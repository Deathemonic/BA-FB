// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamReplayScenarioExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamReplayScenarioExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamReplayScenarioExcel<'a> {
  type Inner = MiniGameDreamReplayScenarioExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamReplayScenarioExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_SCENARIOGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_ORDER: flatbuffers::VOffsetT = 8;
  pub const VT_REPLAYSUMMARYTITLELOCALIZE: flatbuffers::VOffsetT = 10;
  pub const VT_REPLAYSUMMARYLOCALIZESCENARIOID: flatbuffers::VOffsetT = 12;
  pub const VT_REPLAYSCENARIORESOURCE: flatbuffers::VOffsetT = 14;
  pub const VT_ISREPLAYSCENARIOHORIZON: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamReplayScenarioExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamReplayScenarioExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamReplayScenarioExcel<'bldr>> {
    let mut builder = MiniGameDreamReplayScenarioExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamReplayScenario");
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Order(x);
      let x = args.ScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioGroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.ReplayScenarioResource {
        builder.add_ReplayScenarioResource(x);
      }
      let x = args.ReplaySummaryLocalizeScenarioId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_ReplaySummaryLocalizeScenarioId(x);
      let x = args.ReplaySummaryTitleLocalize;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_ReplaySummaryTitleLocalize(x);
      builder.add_IsReplayScenarioHorizon(args.IsReplayScenarioHorizon);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamReplayScenarioExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamReplayScenario");
      let EventContentId = self.EventContentId();
      let ScenarioGroupId = self.ScenarioGroupId();
      let Order = self.Order();
      let ReplaySummaryTitleLocalize = self.ReplaySummaryTitleLocalize();
      let ReplaySummaryLocalizeScenarioId = self.ReplaySummaryLocalizeScenarioId();
    let ReplayScenarioResource = self.ReplayScenarioResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IsReplayScenarioHorizon = self.IsReplayScenarioHorizon();
    MiniGameDreamReplayScenarioExcelT {
      EventContentId,
      ScenarioGroupId,
      Order,
      ReplaySummaryTitleLocalize,
      ReplaySummaryLocalizeScenarioId,
      ReplayScenarioResource,
      IsReplayScenarioHorizon,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamReplayScenarioExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamReplayScenarioExcel::VT_SCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamReplayScenarioExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplaySummaryTitleLocalize(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameDreamReplayScenarioExcel::VT_REPLAYSUMMARYTITLELOCALIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplaySummaryLocalizeScenarioId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameDreamReplayScenarioExcel::VT_REPLAYSUMMARYLOCALIZESCENARIOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplayScenarioResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamReplayScenarioExcel::VT_REPLAYSCENARIORESOURCE, None)}
  }
  #[inline]
  pub fn IsReplayScenarioHorizon(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MiniGameDreamReplayScenarioExcel::VT_ISREPLAYSCENARIOHORIZON, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamReplayScenarioExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("ScenarioGroupId", Self::VT_SCENARIOGROUPID, false)?
     .visit_field::<i64>("Order", Self::VT_ORDER, false)?
     .visit_field::<u32>("ReplaySummaryTitleLocalize", Self::VT_REPLAYSUMMARYTITLELOCALIZE, false)?
     .visit_field::<u32>("ReplaySummaryLocalizeScenarioId", Self::VT_REPLAYSUMMARYLOCALIZESCENARIOID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ReplayScenarioResource", Self::VT_REPLAYSCENARIORESOURCE, false)?
     .visit_field::<bool>("IsReplayScenarioHorizon", Self::VT_ISREPLAYSCENARIOHORIZON, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamReplayScenarioExcelArgs<'a> {
    pub EventContentId: i64,
    pub ScenarioGroupId: i64,
    pub Order: i64,
    pub ReplaySummaryTitleLocalize: u32,
    pub ReplaySummaryLocalizeScenarioId: u32,
    pub ReplayScenarioResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IsReplayScenarioHorizon: bool,
}
impl<'a> Default for MiniGameDreamReplayScenarioExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamReplayScenarioExcelArgs {
      EventContentId: 0,
      ScenarioGroupId: 0,
      Order: 0,
      ReplaySummaryTitleLocalize: 0,
      ReplaySummaryLocalizeScenarioId: 0,
      ReplayScenarioResource: None,
      IsReplayScenarioHorizon: false,
    }
  }
}

impl Serialize for MiniGameDreamReplayScenarioExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamReplayScenarioExcel", 7)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("ScenarioGroupId", &self.ScenarioGroupId())?;
      s.serialize_field("Order", &self.Order())?;
      s.serialize_field("ReplaySummaryTitleLocalize", &self.ReplaySummaryTitleLocalize())?;
      s.serialize_field("ReplaySummaryLocalizeScenarioId", &self.ReplaySummaryLocalizeScenarioId())?;
      if let Some(f) = self.ReplayScenarioResource() {
        s.serialize_field("ReplayScenarioResource", &f)?;
      } else {
        s.skip_field("ReplayScenarioResource")?;
      }
      s.serialize_field("IsReplayScenarioHorizon", &self.IsReplayScenarioHorizon())?;
    s.end()
  }
}

pub struct MiniGameDreamReplayScenarioExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamReplayScenarioExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamReplayScenarioExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_ScenarioGroupId(&mut self, ScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamReplayScenarioExcel::VT_SCENARIOGROUPID, ScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_Order(&mut self, Order: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamReplayScenarioExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_ReplaySummaryTitleLocalize(&mut self, ReplaySummaryTitleLocalize: u32) {
    self.fbb_.push_slot::<u32>(MiniGameDreamReplayScenarioExcel::VT_REPLAYSUMMARYTITLELOCALIZE, ReplaySummaryTitleLocalize, 0);
  }
  #[inline]
  pub fn add_ReplaySummaryLocalizeScenarioId(&mut self, ReplaySummaryLocalizeScenarioId: u32) {
    self.fbb_.push_slot::<u32>(MiniGameDreamReplayScenarioExcel::VT_REPLAYSUMMARYLOCALIZESCENARIOID, ReplaySummaryLocalizeScenarioId, 0);
  }
  #[inline]
  pub fn add_ReplayScenarioResource(&mut self, ReplayScenarioResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamReplayScenarioExcel::VT_REPLAYSCENARIORESOURCE, ReplayScenarioResource);
  }
  #[inline]
  pub fn add_IsReplayScenarioHorizon(&mut self, IsReplayScenarioHorizon: bool) {
    self.fbb_.push_slot::<bool>(MiniGameDreamReplayScenarioExcel::VT_ISREPLAYSCENARIOHORIZON, IsReplayScenarioHorizon, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamReplayScenarioExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamReplayScenarioExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamReplayScenarioExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamReplayScenarioExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamReplayScenarioExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("ScenarioGroupId", &self.ScenarioGroupId());
      ds.field("Order", &self.Order());
      ds.field("ReplaySummaryTitleLocalize", &self.ReplaySummaryTitleLocalize());
      ds.field("ReplaySummaryLocalizeScenarioId", &self.ReplaySummaryLocalizeScenarioId());
      ds.field("ReplayScenarioResource", &self.ReplayScenarioResource());
      ds.field("IsReplayScenarioHorizon", &self.IsReplayScenarioHorizon());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamReplayScenarioExcelT {
  pub EventContentId: i64,
  pub ScenarioGroupId: i64,
  pub Order: i64,
  pub ReplaySummaryTitleLocalize: u32,
  pub ReplaySummaryLocalizeScenarioId: u32,
  pub ReplayScenarioResource: Option<String>,
  pub IsReplayScenarioHorizon: bool,
}
impl Default for MiniGameDreamReplayScenarioExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      ScenarioGroupId: 0,
      Order: 0,
      ReplaySummaryTitleLocalize: 0,
      ReplaySummaryLocalizeScenarioId: 0,
      ReplayScenarioResource: None,
      IsReplayScenarioHorizon: false,
    }
  }
}
impl MiniGameDreamReplayScenarioExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamReplayScenarioExcel<'b>> {
    let EventContentId = self.EventContentId;
    let ScenarioGroupId = self.ScenarioGroupId;
    let Order = self.Order;
    let ReplaySummaryTitleLocalize = self.ReplaySummaryTitleLocalize;
    let ReplaySummaryLocalizeScenarioId = self.ReplaySummaryLocalizeScenarioId;
    let ReplayScenarioResource = self.ReplayScenarioResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IsReplayScenarioHorizon = self.IsReplayScenarioHorizon;
    MiniGameDreamReplayScenarioExcel::create(_fbb, &MiniGameDreamReplayScenarioExcelArgs{
      EventContentId,
      ScenarioGroupId,
      Order,
      ReplaySummaryTitleLocalize,
      ReplaySummaryLocalizeScenarioId,
      ReplayScenarioResource,
      IsReplayScenarioHorizon,
    })
  }
}
