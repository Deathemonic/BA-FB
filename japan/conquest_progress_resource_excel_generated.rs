// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestProgressResourceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestProgressResourceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestProgressResourceExcel<'a> {
  type Inner = ConquestProgressResourceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestProgressResourceExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_GROUP: flatbuffers::VOffsetT = 8;
  pub const VT_PROGRESSRESOURCE: flatbuffers::VOffsetT = 10;
  pub const VT_VOICEID: flatbuffers::VOffsetT = 12;
  pub const VT_PROGRESSLOCALIZECODE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestProgressResourceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestProgressResourceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestProgressResourceExcel<'bldr>> {
    let mut builder = ConquestProgressResourceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestProgressResource");
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ProgressLocalizeCode {
        builder.add_ProgressLocalizeCode(x);
      }
      if let Some(x) = args.VoiceId {
        builder.add_VoiceId(x);
      }
      if let Some(x) = args.ProgressResource {
        builder.add_ProgressResource(x);
      }
      let x = args.Group;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Group(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestProgressResourceExcelT {
    let key = table_encryption_service::create_key(b"ConquestProgressResource");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let Group = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Group(), &key)
      } else {
        self.Group()
      };
    let ProgressResource = self.ProgressResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VoiceId = self.VoiceId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
    let ProgressLocalizeCode = self.ProgressLocalizeCode().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ConquestProgressResourceExcelT {
      Id,
      EventContentId,
      Group,
      ProgressResource,
      VoiceId,
      ProgressLocalizeCode,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestProgressResourceExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestProgressResourceExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Group(&self) -> ConquestProgressType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConquestProgressType>(ConquestProgressResourceExcel::VT_GROUP, Some(ConquestProgressType::None)).unwrap()}
  }
  #[inline]
  pub fn ProgressResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestProgressResourceExcel::VT_PROGRESSRESOURCE, None)}
  }
  #[inline]
  pub fn VoiceId(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(ConquestProgressResourceExcel::VT_VOICEID, None)}
  }
  #[inline]
  pub fn ProgressLocalizeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestProgressResourceExcel::VT_PROGRESSLOCALIZECODE, None)}
  }
}

impl flatbuffers::Verifiable for ConquestProgressResourceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<ConquestProgressType>("Group", Self::VT_GROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProgressResource", Self::VT_PROGRESSRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("VoiceId", Self::VT_VOICEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProgressLocalizeCode", Self::VT_PROGRESSLOCALIZECODE, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestProgressResourceExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub Group: ConquestProgressType,
    pub ProgressResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub ProgressLocalizeCode: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ConquestProgressResourceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestProgressResourceExcelArgs {
      Id: 0,
      EventContentId: 0,
      Group: ConquestProgressType::None,
      ProgressResource: None,
      VoiceId: None,
      ProgressLocalizeCode: None,
    }
  }
}

impl Serialize for ConquestProgressResourceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestProgressResourceExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("Group", &self.Group())?;
      if let Some(f) = self.ProgressResource() {
        s.serialize_field("ProgressResource", &f)?;
      } else {
        s.skip_field("ProgressResource")?;
      }
      if let Some(f) = self.VoiceId() {
        s.serialize_field("VoiceId", &f)?;
      } else {
        s.skip_field("VoiceId")?;
      }
      if let Some(f) = self.ProgressLocalizeCode() {
        s.serialize_field("ProgressLocalizeCode", &f)?;
      } else {
        s.skip_field("ProgressLocalizeCode")?;
      }
    s.end()
  }
}

pub struct ConquestProgressResourceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestProgressResourceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ConquestProgressResourceExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestProgressResourceExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_Group(&mut self, Group: ConquestProgressType) {
    self.fbb_.push_slot::<ConquestProgressType>(ConquestProgressResourceExcel::VT_GROUP, Group, ConquestProgressType::None);
  }
  #[inline]
  pub fn add_ProgressResource(&mut self, ProgressResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestProgressResourceExcel::VT_PROGRESSRESOURCE, ProgressResource);
  }
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestProgressResourceExcel::VT_VOICEID, VoiceId);
  }
  #[inline]
  pub fn add_ProgressLocalizeCode(&mut self, ProgressLocalizeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestProgressResourceExcel::VT_PROGRESSLOCALIZECODE, ProgressLocalizeCode);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestProgressResourceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestProgressResourceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestProgressResourceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestProgressResourceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestProgressResourceExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("Group", &self.Group());
      ds.field("ProgressResource", &self.ProgressResource());
      ds.field("VoiceId", &self.VoiceId());
      ds.field("ProgressLocalizeCode", &self.ProgressLocalizeCode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestProgressResourceExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub Group: ConquestProgressType,
  pub ProgressResource: Option<String>,
  pub VoiceId: Option<Vec<u32>>,
  pub ProgressLocalizeCode: Option<String>,
}
impl Default for ConquestProgressResourceExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      Group: ConquestProgressType::None,
      ProgressResource: None,
      VoiceId: None,
      ProgressLocalizeCode: None,
    }
  }
}
impl ConquestProgressResourceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestProgressResourceExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let Group = self.Group;
    let ProgressResource = self.ProgressResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceId = self.VoiceId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ProgressLocalizeCode = self.ProgressLocalizeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ConquestProgressResourceExcel::create(_fbb, &ConquestProgressResourceExcelArgs{
      Id,
      EventContentId,
      Group,
      ProgressResource,
      VoiceId,
      ProgressLocalizeCode,
    })
  }
}
