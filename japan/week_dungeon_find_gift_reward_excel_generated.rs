// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WeekDungeonFindGiftRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WeekDungeonFindGiftRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WeekDungeonFindGiftRewardExcel<'a> {
  type Inner = WeekDungeonFindGiftRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WeekDungeonFindGiftRewardExcel<'a> {
  pub const VT_STAGEREWARDID: flatbuffers::VOffsetT = 4;
  pub const VT_DEVNAME: flatbuffers::VOffsetT = 6;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELPROBABILITY: flatbuffers::VOffsetT = 14;
  pub const VT_DROPITEMMODELPREFABPATH: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WeekDungeonFindGiftRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WeekDungeonFindGiftRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<WeekDungeonFindGiftRewardExcel<'bldr>> {
    let mut builder = WeekDungeonFindGiftRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"WeekDungeonFindGiftReward");
      let x = args.StageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageRewardId(x);
      if let Some(x) = args.DropItemModelPrefabPath {
        builder.add_DropItemModelPrefabPath(x);
      }
      if let Some(x) = args.RewardParcelProbability {
        builder.add_RewardParcelProbability(x);
      }
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      if let Some(x) = args.DevName {
        builder.add_DevName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> WeekDungeonFindGiftRewardExcelT {
    let key = table_encryption_service::create_key(b"WeekDungeonFindGiftReward");
      let StageRewardId = self.StageRewardId();
    let DevName = self.DevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelProbability = self.RewardParcelProbability().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let DropItemModelPrefabPath = self.DropItemModelPrefabPath().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    WeekDungeonFindGiftRewardExcelT {
      StageRewardId,
      DevName,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      RewardParcelProbability,
      DropItemModelPrefabPath,
    }
  }

  #[inline]
  pub fn StageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WeekDungeonFindGiftRewardExcel::VT_STAGEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeekDungeonFindGiftRewardExcel::VT_DEVNAME, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
  #[inline]
  pub fn RewardParcelProbability(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELPROBABILITY, None)}
  }
  #[inline]
  pub fn DropItemModelPrefabPath(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeekDungeonFindGiftRewardExcel::VT_DROPITEMMODELPREFABPATH, None)}
  }
}

impl flatbuffers::Verifiable for WeekDungeonFindGiftRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("StageRewardId", Self::VT_STAGEREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DevName", Self::VT_DEVNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelProbability", Self::VT_REWARDPARCELPROBABILITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("DropItemModelPrefabPath", Self::VT_DROPITEMMODELPREFABPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct WeekDungeonFindGiftRewardExcelArgs<'a> {
    pub StageRewardId: i64,
    pub DevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelProbability: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub DropItemModelPrefabPath: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for WeekDungeonFindGiftRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    WeekDungeonFindGiftRewardExcelArgs {
      StageRewardId: 0,
      DevName: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
      RewardParcelProbability: None,
      DropItemModelPrefabPath: None,
    }
  }
}

impl Serialize for WeekDungeonFindGiftRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WeekDungeonFindGiftRewardExcel", 7)?;
      s.serialize_field("StageRewardId", &self.StageRewardId())?;
      if let Some(f) = self.DevName() {
        s.serialize_field("DevName", &f)?;
      } else {
        s.skip_field("DevName")?;
      }
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
      if let Some(f) = self.RewardParcelProbability() {
        s.serialize_field("RewardParcelProbability", &f)?;
      } else {
        s.skip_field("RewardParcelProbability")?;
      }
      if let Some(f) = self.DropItemModelPrefabPath() {
        s.serialize_field("DropItemModelPrefabPath", &f)?;
      } else {
        s.skip_field("DropItemModelPrefabPath")?;
      }
    s.end()
  }
}

pub struct WeekDungeonFindGiftRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WeekDungeonFindGiftRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StageRewardId(&mut self, StageRewardId: i64) {
    self.fbb_.push_slot::<i64>(WeekDungeonFindGiftRewardExcel::VT_STAGEREWARDID, StageRewardId, 0);
  }
  #[inline]
  pub fn add_DevName(&mut self, DevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonFindGiftRewardExcel::VT_DEVNAME, DevName);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn add_RewardParcelProbability(&mut self, RewardParcelProbability: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonFindGiftRewardExcel::VT_REWARDPARCELPROBABILITY, RewardParcelProbability);
  }
  #[inline]
  pub fn add_DropItemModelPrefabPath(&mut self, DropItemModelPrefabPath: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonFindGiftRewardExcel::VT_DROPITEMMODELPREFABPATH, DropItemModelPrefabPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WeekDungeonFindGiftRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WeekDungeonFindGiftRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WeekDungeonFindGiftRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WeekDungeonFindGiftRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WeekDungeonFindGiftRewardExcel");
      ds.field("StageRewardId", &self.StageRewardId());
      ds.field("DevName", &self.DevName());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.field("RewardParcelProbability", &self.RewardParcelProbability());
      ds.field("DropItemModelPrefabPath", &self.DropItemModelPrefabPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WeekDungeonFindGiftRewardExcelT {
  pub StageRewardId: i64,
  pub DevName: Option<String>,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
  pub RewardParcelProbability: Option<Vec<i64>>,
  pub DropItemModelPrefabPath: Option<Vec<String>>,
}
impl Default for WeekDungeonFindGiftRewardExcelT {
  fn default() -> Self {
    Self {
      StageRewardId: 0,
      DevName: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
      RewardParcelProbability: None,
      DropItemModelPrefabPath: None,
    }
  }
}
impl WeekDungeonFindGiftRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WeekDungeonFindGiftRewardExcel<'b>> {
    let StageRewardId = self.StageRewardId;
    let DevName = self.DevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelProbability = self.RewardParcelProbability.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let DropItemModelPrefabPath = self.DropItemModelPrefabPath.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    WeekDungeonFindGiftRewardExcel::create(_fbb, &WeekDungeonFindGiftRewardExcelArgs{
      StageRewardId,
      DevName,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      RewardParcelProbability,
      DropItemModelPrefabPath,
    })
  }
}
