// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TutorialCharacterDialogExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TutorialCharacterDialogExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TutorialCharacterDialogExcel<'a> {
  type Inner = TutorialCharacterDialogExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TutorialCharacterDialogExcel<'a> {
  pub const VT_TALKID: flatbuffers::VOffsetT = 4;
  pub const VT_ANIMATIONNAME: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEKR: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEJP: flatbuffers::VOffsetT = 10;
  pub const VT_VOICEID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TutorialCharacterDialogExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TutorialCharacterDialogExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TutorialCharacterDialogExcel<'bldr>> {
    let mut builder = TutorialCharacterDialogExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TutorialCharacterDialog");
      let x = args.TalkId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TalkId(x);
      let x = args.VoiceId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_VoiceId(x);
      if let Some(x) = args.LocalizeJP {
        builder.add_LocalizeJP(x);
      }
      if let Some(x) = args.LocalizeKR {
        builder.add_LocalizeKR(x);
      }
      if let Some(x) = args.AnimationName {
        builder.add_AnimationName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> TutorialCharacterDialogExcelT {
    let key = table_encryption_service::create_key(b"TutorialCharacterDialog");
      let TalkId = self.TalkId();
    let AnimationName = self.AnimationName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeKR = self.LocalizeKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeJP = self.LocalizeJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceId = self.VoiceId();
    TutorialCharacterDialogExcelT {
      TalkId,
      AnimationName,
      LocalizeKR,
      LocalizeJP,
      VoiceId,
    }
  }

  #[inline]
  pub fn TalkId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TutorialCharacterDialogExcel::VT_TALKID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialCharacterDialogExcel::VT_ANIMATIONNAME, None)}
  }
  #[inline]
  pub fn LocalizeKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialCharacterDialogExcel::VT_LOCALIZEKR, None)}
  }
  #[inline]
  pub fn LocalizeJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialCharacterDialogExcel::VT_LOCALIZEJP, None)}
  }
  #[inline]
  pub fn VoiceId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TutorialCharacterDialogExcel::VT_VOICEID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TutorialCharacterDialogExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("TalkId", Self::VT_TALKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AnimationName", Self::VT_ANIMATIONNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeKR", Self::VT_LOCALIZEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeJP", Self::VT_LOCALIZEJP, false)?
     .visit_field::<u32>("VoiceId", Self::VT_VOICEID, false)?
     .finish();
    Ok(())
  }
}
pub struct TutorialCharacterDialogExcelArgs<'a> {
    pub TalkId: i64,
    pub AnimationName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeJP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceId: u32,
}
impl<'a> Default for TutorialCharacterDialogExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TutorialCharacterDialogExcelArgs {
      TalkId: 0,
      AnimationName: None,
      LocalizeKR: None,
      LocalizeJP: None,
      VoiceId: 0,
    }
  }
}

impl Serialize for TutorialCharacterDialogExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TutorialCharacterDialogExcel", 5)?;
      s.serialize_field("TalkId", &self.TalkId())?;
      if let Some(f) = self.AnimationName() {
        s.serialize_field("AnimationName", &f)?;
      } else {
        s.skip_field("AnimationName")?;
      }
      if let Some(f) = self.LocalizeKR() {
        s.serialize_field("LocalizeKR", &f)?;
      } else {
        s.skip_field("LocalizeKR")?;
      }
      if let Some(f) = self.LocalizeJP() {
        s.serialize_field("LocalizeJP", &f)?;
      } else {
        s.skip_field("LocalizeJP")?;
      }
      s.serialize_field("VoiceId", &self.VoiceId())?;
    s.end()
  }
}

pub struct TutorialCharacterDialogExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TutorialCharacterDialogExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_TalkId(&mut self, TalkId: i64) {
    self.fbb_.push_slot::<i64>(TutorialCharacterDialogExcel::VT_TALKID, TalkId, 0);
  }
  #[inline]
  pub fn add_AnimationName(&mut self, AnimationName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialCharacterDialogExcel::VT_ANIMATIONNAME, AnimationName);
  }
  #[inline]
  pub fn add_LocalizeKR(&mut self, LocalizeKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialCharacterDialogExcel::VT_LOCALIZEKR, LocalizeKR);
  }
  #[inline]
  pub fn add_LocalizeJP(&mut self, LocalizeJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialCharacterDialogExcel::VT_LOCALIZEJP, LocalizeJP);
  }
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: u32) {
    self.fbb_.push_slot::<u32>(TutorialCharacterDialogExcel::VT_VOICEID, VoiceId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TutorialCharacterDialogExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TutorialCharacterDialogExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TutorialCharacterDialogExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TutorialCharacterDialogExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TutorialCharacterDialogExcel");
      ds.field("TalkId", &self.TalkId());
      ds.field("AnimationName", &self.AnimationName());
      ds.field("LocalizeKR", &self.LocalizeKR());
      ds.field("LocalizeJP", &self.LocalizeJP());
      ds.field("VoiceId", &self.VoiceId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TutorialCharacterDialogExcelT {
  pub TalkId: i64,
  pub AnimationName: Option<String>,
  pub LocalizeKR: Option<String>,
  pub LocalizeJP: Option<String>,
  pub VoiceId: u32,
}
impl Default for TutorialCharacterDialogExcelT {
  fn default() -> Self {
    Self {
      TalkId: 0,
      AnimationName: None,
      LocalizeKR: None,
      LocalizeJP: None,
      VoiceId: 0,
    }
  }
}
impl TutorialCharacterDialogExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TutorialCharacterDialogExcel<'b>> {
    let TalkId = self.TalkId;
    let AnimationName = self.AnimationName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeKR = self.LocalizeKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeJP = self.LocalizeJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceId = self.VoiceId;
    TutorialCharacterDialogExcel::create(_fbb, &TutorialCharacterDialogExcelArgs{
      TalkId,
      AnimationName,
      LocalizeKR,
      LocalizeJP,
      VoiceId,
    })
  }
}
