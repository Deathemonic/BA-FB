// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestCameraSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestCameraSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestCameraSettingExcel<'a> {
  type Inner = ConquestCameraSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestCameraSettingExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETLEFT: flatbuffers::VOffsetT = 6;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETRIGHT: flatbuffers::VOffsetT = 8;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETTOP: flatbuffers::VOffsetT = 10;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM: flatbuffers::VOffsetT = 12;
  pub const VT_CONQUESTMAPCENTEROFFSETX: flatbuffers::VOffsetT = 14;
  pub const VT_CONQUESTMAPCENTEROFFSETY: flatbuffers::VOffsetT = 16;
  pub const VT_CAMERAANGLE: flatbuffers::VOffsetT = 18;
  pub const VT_CAMERAZOOMMAX: flatbuffers::VOffsetT = 20;
  pub const VT_CAMERAZOOMMIN: flatbuffers::VOffsetT = 22;
  pub const VT_CAMERAZOOMDEFAULT: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestCameraSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestCameraSettingExcelArgs
  ) -> flatbuffers::WIPOffset<ConquestCameraSettingExcel<'bldr>> {
    let mut builder = ConquestCameraSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestCameraSetting");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.CameraZoomDefault;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomDefault(x);
      let x = args.CameraZoomMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomMin(x);
      let x = args.CameraZoomMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomMax(x);
      let x = args.CameraAngle;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraAngle(x);
      let x = args.ConquestMapCenterOffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapCenterOffsetY(x);
      let x = args.ConquestMapCenterOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapCenterOffsetX(x);
      let x = args.ConquestMapBoundaryOffsetBottom;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetBottom(x);
      let x = args.ConquestMapBoundaryOffsetTop;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetTop(x);
      let x = args.ConquestMapBoundaryOffsetRight;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetRight(x);
      let x = args.ConquestMapBoundaryOffsetLeft;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetLeft(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestCameraSettingExcelT {
    let key = table_encryption_service::create_key(b"ConquestCameraSetting");
      let Id = self.Id();
      let ConquestMapBoundaryOffsetLeft = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetLeft(), &key)
      } else {
        self.ConquestMapBoundaryOffsetLeft()
      };
      let ConquestMapBoundaryOffsetRight = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetRight(), &key)
      } else {
        self.ConquestMapBoundaryOffsetRight()
      };
      let ConquestMapBoundaryOffsetTop = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetTop(), &key)
      } else {
        self.ConquestMapBoundaryOffsetTop()
      };
      let ConquestMapBoundaryOffsetBottom = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetBottom(), &key)
      } else {
        self.ConquestMapBoundaryOffsetBottom()
      };
      let ConquestMapCenterOffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapCenterOffsetX(), &key)
      } else {
        self.ConquestMapCenterOffsetX()
      };
      let ConquestMapCenterOffsetY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapCenterOffsetY(), &key)
      } else {
        self.ConquestMapCenterOffsetY()
      };
      let CameraAngle = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraAngle(), &key)
      } else {
        self.CameraAngle()
      };
      let CameraZoomMax = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomMax(), &key)
      } else {
        self.CameraZoomMax()
      };
      let CameraZoomMin = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomMin(), &key)
      } else {
        self.CameraZoomMin()
      };
      let CameraZoomDefault = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomDefault(), &key)
      } else {
        self.CameraZoomDefault()
      };
    ConquestCameraSettingExcelT {
      Id,
      ConquestMapBoundaryOffsetLeft,
      ConquestMapBoundaryOffsetRight,
      ConquestMapBoundaryOffsetTop,
      ConquestMapBoundaryOffsetBottom,
      ConquestMapCenterOffsetX,
      ConquestMapCenterOffsetY,
      CameraAngle,
      CameraZoomMax,
      CameraZoomMin,
      CameraZoomDefault,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestCameraSettingExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetLeft(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETLEFT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetRight(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetTop(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETTOP, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetBottom(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapCenterOffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPCENTEROFFSETX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapCenterOffsetY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPCENTEROFFSETY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraAngle(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CAMERAANGLE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomMax(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CAMERAZOOMMAX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomMin(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CAMERAZOOMMIN, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomDefault(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestCameraSettingExcel::VT_CAMERAZOOMDEFAULT, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestCameraSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetLeft", Self::VT_CONQUESTMAPBOUNDARYOFFSETLEFT, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetRight", Self::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetTop", Self::VT_CONQUESTMAPBOUNDARYOFFSETTOP, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetBottom", Self::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, false)?
     .visit_field::<f32>("ConquestMapCenterOffsetX", Self::VT_CONQUESTMAPCENTEROFFSETX, false)?
     .visit_field::<f32>("ConquestMapCenterOffsetY", Self::VT_CONQUESTMAPCENTEROFFSETY, false)?
     .visit_field::<f32>("CameraAngle", Self::VT_CAMERAANGLE, false)?
     .visit_field::<f32>("CameraZoomMax", Self::VT_CAMERAZOOMMAX, false)?
     .visit_field::<f32>("CameraZoomMin", Self::VT_CAMERAZOOMMIN, false)?
     .visit_field::<f32>("CameraZoomDefault", Self::VT_CAMERAZOOMDEFAULT, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestCameraSettingExcelArgs {
    pub Id: i64,
    pub ConquestMapBoundaryOffsetLeft: f32,
    pub ConquestMapBoundaryOffsetRight: f32,
    pub ConquestMapBoundaryOffsetTop: f32,
    pub ConquestMapBoundaryOffsetBottom: f32,
    pub ConquestMapCenterOffsetX: f32,
    pub ConquestMapCenterOffsetY: f32,
    pub CameraAngle: f32,
    pub CameraZoomMax: f32,
    pub CameraZoomMin: f32,
    pub CameraZoomDefault: f32,
}
impl<'a> Default for ConquestCameraSettingExcelArgs {
  #[inline]
  fn default() -> Self {
    ConquestCameraSettingExcelArgs {
      Id: 0,
      ConquestMapBoundaryOffsetLeft: 0.0,
      ConquestMapBoundaryOffsetRight: 0.0,
      ConquestMapBoundaryOffsetTop: 0.0,
      ConquestMapBoundaryOffsetBottom: 0.0,
      ConquestMapCenterOffsetX: 0.0,
      ConquestMapCenterOffsetY: 0.0,
      CameraAngle: 0.0,
      CameraZoomMax: 0.0,
      CameraZoomMin: 0.0,
      CameraZoomDefault: 0.0,
    }
  }
}

impl Serialize for ConquestCameraSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestCameraSettingExcel", 11)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ConquestMapBoundaryOffsetLeft", &self.ConquestMapBoundaryOffsetLeft())?;
      s.serialize_field("ConquestMapBoundaryOffsetRight", &self.ConquestMapBoundaryOffsetRight())?;
      s.serialize_field("ConquestMapBoundaryOffsetTop", &self.ConquestMapBoundaryOffsetTop())?;
      s.serialize_field("ConquestMapBoundaryOffsetBottom", &self.ConquestMapBoundaryOffsetBottom())?;
      s.serialize_field("ConquestMapCenterOffsetX", &self.ConquestMapCenterOffsetX())?;
      s.serialize_field("ConquestMapCenterOffsetY", &self.ConquestMapCenterOffsetY())?;
      s.serialize_field("CameraAngle", &self.CameraAngle())?;
      s.serialize_field("CameraZoomMax", &self.CameraZoomMax())?;
      s.serialize_field("CameraZoomMin", &self.CameraZoomMin())?;
      s.serialize_field("CameraZoomDefault", &self.CameraZoomDefault())?;
    s.end()
  }
}

pub struct ConquestCameraSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestCameraSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ConquestCameraSettingExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetLeft(&mut self, ConquestMapBoundaryOffsetLeft: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETLEFT, ConquestMapBoundaryOffsetLeft, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetRight(&mut self, ConquestMapBoundaryOffsetRight: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, ConquestMapBoundaryOffsetRight, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetTop(&mut self, ConquestMapBoundaryOffsetTop: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETTOP, ConquestMapBoundaryOffsetTop, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetBottom(&mut self, ConquestMapBoundaryOffsetBottom: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, ConquestMapBoundaryOffsetBottom, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapCenterOffsetX(&mut self, ConquestMapCenterOffsetX: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPCENTEROFFSETX, ConquestMapCenterOffsetX, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapCenterOffsetY(&mut self, ConquestMapCenterOffsetY: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CONQUESTMAPCENTEROFFSETY, ConquestMapCenterOffsetY, 0.0);
  }
  #[inline]
  pub fn add_CameraAngle(&mut self, CameraAngle: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CAMERAANGLE, CameraAngle, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomMax(&mut self, CameraZoomMax: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CAMERAZOOMMAX, CameraZoomMax, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomMin(&mut self, CameraZoomMin: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CAMERAZOOMMIN, CameraZoomMin, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomDefault(&mut self, CameraZoomDefault: f32) {
    self.fbb_.push_slot::<f32>(ConquestCameraSettingExcel::VT_CAMERAZOOMDEFAULT, CameraZoomDefault, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestCameraSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestCameraSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestCameraSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestCameraSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestCameraSettingExcel");
      ds.field("Id", &self.Id());
      ds.field("ConquestMapBoundaryOffsetLeft", &self.ConquestMapBoundaryOffsetLeft());
      ds.field("ConquestMapBoundaryOffsetRight", &self.ConquestMapBoundaryOffsetRight());
      ds.field("ConquestMapBoundaryOffsetTop", &self.ConquestMapBoundaryOffsetTop());
      ds.field("ConquestMapBoundaryOffsetBottom", &self.ConquestMapBoundaryOffsetBottom());
      ds.field("ConquestMapCenterOffsetX", &self.ConquestMapCenterOffsetX());
      ds.field("ConquestMapCenterOffsetY", &self.ConquestMapCenterOffsetY());
      ds.field("CameraAngle", &self.CameraAngle());
      ds.field("CameraZoomMax", &self.CameraZoomMax());
      ds.field("CameraZoomMin", &self.CameraZoomMin());
      ds.field("CameraZoomDefault", &self.CameraZoomDefault());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestCameraSettingExcelT {
  pub Id: i64,
  pub ConquestMapBoundaryOffsetLeft: f32,
  pub ConquestMapBoundaryOffsetRight: f32,
  pub ConquestMapBoundaryOffsetTop: f32,
  pub ConquestMapBoundaryOffsetBottom: f32,
  pub ConquestMapCenterOffsetX: f32,
  pub ConquestMapCenterOffsetY: f32,
  pub CameraAngle: f32,
  pub CameraZoomMax: f32,
  pub CameraZoomMin: f32,
  pub CameraZoomDefault: f32,
}
impl Default for ConquestCameraSettingExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ConquestMapBoundaryOffsetLeft: 0.0,
      ConquestMapBoundaryOffsetRight: 0.0,
      ConquestMapBoundaryOffsetTop: 0.0,
      ConquestMapBoundaryOffsetBottom: 0.0,
      ConquestMapCenterOffsetX: 0.0,
      ConquestMapCenterOffsetY: 0.0,
      CameraAngle: 0.0,
      CameraZoomMax: 0.0,
      CameraZoomMin: 0.0,
      CameraZoomDefault: 0.0,
    }
  }
}
impl ConquestCameraSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestCameraSettingExcel<'b>> {
    let Id = self.Id;
    let ConquestMapBoundaryOffsetLeft = self.ConquestMapBoundaryOffsetLeft;
    let ConquestMapBoundaryOffsetRight = self.ConquestMapBoundaryOffsetRight;
    let ConquestMapBoundaryOffsetTop = self.ConquestMapBoundaryOffsetTop;
    let ConquestMapBoundaryOffsetBottom = self.ConquestMapBoundaryOffsetBottom;
    let ConquestMapCenterOffsetX = self.ConquestMapCenterOffsetX;
    let ConquestMapCenterOffsetY = self.ConquestMapCenterOffsetY;
    let CameraAngle = self.CameraAngle;
    let CameraZoomMax = self.CameraZoomMax;
    let CameraZoomMin = self.CameraZoomMin;
    let CameraZoomDefault = self.CameraZoomDefault;
    ConquestCameraSettingExcel::create(_fbb, &ConquestCameraSettingExcelArgs{
      Id,
      ConquestMapBoundaryOffsetLeft,
      ConquestMapBoundaryOffsetRight,
      ConquestMapBoundaryOffsetTop,
      ConquestMapBoundaryOffsetBottom,
      ConquestMapCenterOffsetX,
      ConquestMapCenterOffsetY,
      CameraAngle,
      CameraZoomMax,
      CameraZoomMin,
      CameraZoomDefault,
    })
  }
}
