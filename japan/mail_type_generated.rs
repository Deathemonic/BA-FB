// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MAIL_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MAIL_TYPE: i32 = 30;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MAIL_TYPE: [MailType; 31] = [
  MailType::System,
  MailType::Attendance,
  MailType::Event,
  MailType::MassTrade,
  MailType::InventoryFull,
  MailType::ArenaDefenseVictory,
  MailType::CouponUsageReward,
  MailType::ArenaSeasonClose,
  MailType::ProductReward,
  MailType::MonthlyProductReward,
  MailType::ExpiryChangeItem,
  MailType::ClanAttendance,
  MailType::AccountLink,
  MailType::NewUserBonus,
  MailType::LeftClanAssistReward,
  MailType::AttendanceImmediately,
  MailType::WeeklyProductReward,
  MailType::BiweeklyProductReward,
  MailType::Temp_1,
  MailType::Temp_2,
  MailType::Temp_3,
  MailType::CouponCompleteReward,
  MailType::BirthdayMail,
  MailType::FromCS,
  MailType::ExpiryChangeCurrency,
  MailType::ExpiryBattlePassItem,
  MailType::FreeProductReward,
  MailType::Temp_4,
  MailType::Temp_5,
  MailType::Temp_6,
  MailType::ProductGooglePointReward,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct MailType(pub i32);
#[allow(non_upper_case_globals)]
impl MailType {
  pub const System: Self = Self(0);
  pub const Attendance: Self = Self(1);
  pub const Event: Self = Self(2);
  pub const MassTrade: Self = Self(3);
  pub const InventoryFull: Self = Self(4);
  pub const ArenaDefenseVictory: Self = Self(5);
  pub const CouponUsageReward: Self = Self(6);
  pub const ArenaSeasonClose: Self = Self(7);
  pub const ProductReward: Self = Self(8);
  pub const MonthlyProductReward: Self = Self(9);
  pub const ExpiryChangeItem: Self = Self(10);
  pub const ClanAttendance: Self = Self(11);
  pub const AccountLink: Self = Self(12);
  pub const NewUserBonus: Self = Self(13);
  pub const LeftClanAssistReward: Self = Self(14);
  pub const AttendanceImmediately: Self = Self(15);
  pub const WeeklyProductReward: Self = Self(16);
  pub const BiweeklyProductReward: Self = Self(17);
  pub const Temp_1: Self = Self(18);
  pub const Temp_2: Self = Self(19);
  pub const Temp_3: Self = Self(20);
  pub const CouponCompleteReward: Self = Self(21);
  pub const BirthdayMail: Self = Self(22);
  pub const FromCS: Self = Self(23);
  pub const ExpiryChangeCurrency: Self = Self(24);
  pub const ExpiryBattlePassItem: Self = Self(25);
  pub const FreeProductReward: Self = Self(26);
  pub const Temp_4: Self = Self(27);
  pub const Temp_5: Self = Self(28);
  pub const Temp_6: Self = Self(29);
  pub const ProductGooglePointReward: Self = Self(30);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 30;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::System,
    Self::Attendance,
    Self::Event,
    Self::MassTrade,
    Self::InventoryFull,
    Self::ArenaDefenseVictory,
    Self::CouponUsageReward,
    Self::ArenaSeasonClose,
    Self::ProductReward,
    Self::MonthlyProductReward,
    Self::ExpiryChangeItem,
    Self::ClanAttendance,
    Self::AccountLink,
    Self::NewUserBonus,
    Self::LeftClanAssistReward,
    Self::AttendanceImmediately,
    Self::WeeklyProductReward,
    Self::BiweeklyProductReward,
    Self::Temp_1,
    Self::Temp_2,
    Self::Temp_3,
    Self::CouponCompleteReward,
    Self::BirthdayMail,
    Self::FromCS,
    Self::ExpiryChangeCurrency,
    Self::ExpiryBattlePassItem,
    Self::FreeProductReward,
    Self::Temp_4,
    Self::Temp_5,
    Self::Temp_6,
    Self::ProductGooglePointReward,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::System => Some("System"),
      Self::Attendance => Some("Attendance"),
      Self::Event => Some("Event"),
      Self::MassTrade => Some("MassTrade"),
      Self::InventoryFull => Some("InventoryFull"),
      Self::ArenaDefenseVictory => Some("ArenaDefenseVictory"),
      Self::CouponUsageReward => Some("CouponUsageReward"),
      Self::ArenaSeasonClose => Some("ArenaSeasonClose"),
      Self::ProductReward => Some("ProductReward"),
      Self::MonthlyProductReward => Some("MonthlyProductReward"),
      Self::ExpiryChangeItem => Some("ExpiryChangeItem"),
      Self::ClanAttendance => Some("ClanAttendance"),
      Self::AccountLink => Some("AccountLink"),
      Self::NewUserBonus => Some("NewUserBonus"),
      Self::LeftClanAssistReward => Some("LeftClanAssistReward"),
      Self::AttendanceImmediately => Some("AttendanceImmediately"),
      Self::WeeklyProductReward => Some("WeeklyProductReward"),
      Self::BiweeklyProductReward => Some("BiweeklyProductReward"),
      Self::Temp_1 => Some("Temp_1"),
      Self::Temp_2 => Some("Temp_2"),
      Self::Temp_3 => Some("Temp_3"),
      Self::CouponCompleteReward => Some("CouponCompleteReward"),
      Self::BirthdayMail => Some("BirthdayMail"),
      Self::FromCS => Some("FromCS"),
      Self::ExpiryChangeCurrency => Some("ExpiryChangeCurrency"),
      Self::ExpiryBattlePassItem => Some("ExpiryBattlePassItem"),
      Self::FreeProductReward => Some("FreeProductReward"),
      Self::Temp_4 => Some("Temp_4"),
      Self::Temp_5 => Some("Temp_5"),
      Self::Temp_6 => Some("Temp_6"),
      Self::ProductGooglePointReward => Some("ProductGooglePointReward"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for MailType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for MailType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("MailType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for MailType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for MailType {
    type Output = MailType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for MailType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for MailType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for MailType {}
