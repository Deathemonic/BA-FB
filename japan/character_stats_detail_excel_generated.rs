// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterStatsDetailExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterStatsDetailExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterStatsDetailExcel<'a> {
  type Inner = CharacterStatsDetailExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterStatsDetailExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DETAILSHOWSTATS: flatbuffers::VOffsetT = 6;
  pub const VT_ISSTATSPERCENT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterStatsDetailExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterStatsDetailExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterStatsDetailExcel<'bldr>> {
    let mut builder = CharacterStatsDetailExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterStatsDetail");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.IsStatsPercent {
        builder.add_IsStatsPercent(x);
      }
      if let Some(x) = args.DetailShowStats {
        builder.add_DetailShowStats(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterStatsDetailExcelT {
    let key = table_encryption_service::create_key(b"CharacterStatsDetail");
      let Id = self.Id();
    let DetailShowStats = self.DetailShowStats().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let IsStatsPercent = self.IsStatsPercent().map(|x| {
      x.into_iter().collect()
    });
    CharacterStatsDetailExcelT {
      Id,
      DetailShowStats,
      IsStatsPercent,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatsDetailExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DetailShowStats(&self) -> Option<flatbuffers::Vector<'a, StatType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, StatType>>>(CharacterStatsDetailExcel::VT_DETAILSHOWSTATS, None)}
  }
  #[inline]
  pub fn IsStatsPercent(&self) -> Option<flatbuffers::Vector<'a, bool>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, bool>>>(CharacterStatsDetailExcel::VT_ISSTATSPERCENT, None)}
  }
}

impl flatbuffers::Verifiable for CharacterStatsDetailExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, StatType>>>("DetailShowStats", Self::VT_DETAILSHOWSTATS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, bool>>>("IsStatsPercent", Self::VT_ISSTATSPERCENT, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterStatsDetailExcelArgs<'a> {
    pub Id: i64,
    pub DetailShowStats: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, StatType>>>,
    pub IsStatsPercent: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, bool>>>,
}
impl<'a> Default for CharacterStatsDetailExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterStatsDetailExcelArgs {
      Id: 0,
      DetailShowStats: None,
      IsStatsPercent: None,
    }
  }
}

impl Serialize for CharacterStatsDetailExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterStatsDetailExcel", 3)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.DetailShowStats() {
        s.serialize_field("DetailShowStats", &f)?;
      } else {
        s.skip_field("DetailShowStats")?;
      }
      if let Some(f) = self.IsStatsPercent() {
        s.serialize_field("IsStatsPercent", &f)?;
      } else {
        s.skip_field("IsStatsPercent")?;
      }
    s.end()
  }
}

pub struct CharacterStatsDetailExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterStatsDetailExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatsDetailExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_DetailShowStats(&mut self, DetailShowStats: flatbuffers::WIPOffset<flatbuffers::Vector<'b , StatType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterStatsDetailExcel::VT_DETAILSHOWSTATS, DetailShowStats);
  }
  #[inline]
  pub fn add_IsStatsPercent(&mut self, IsStatsPercent: flatbuffers::WIPOffset<flatbuffers::Vector<'b , bool>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterStatsDetailExcel::VT_ISSTATSPERCENT, IsStatsPercent);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterStatsDetailExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterStatsDetailExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterStatsDetailExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterStatsDetailExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterStatsDetailExcel");
      ds.field("Id", &self.Id());
      ds.field("DetailShowStats", &self.DetailShowStats());
      ds.field("IsStatsPercent", &self.IsStatsPercent());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterStatsDetailExcelT {
  pub Id: i64,
  pub DetailShowStats: Option<Vec<StatType>>,
  pub IsStatsPercent: Option<Vec<bool>>,
}
impl Default for CharacterStatsDetailExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      DetailShowStats: None,
      IsStatsPercent: None,
    }
  }
}
impl CharacterStatsDetailExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterStatsDetailExcel<'b>> {
    let Id = self.Id;
    let DetailShowStats = self.DetailShowStats.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IsStatsPercent = self.IsStatsPercent.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CharacterStatsDetailExcel::create(_fbb, &CharacterStatsDetailExcelArgs{
      Id,
      DetailShowStats,
      IsStatsPercent,
    })
  }
}
