// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterPotentialExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterPotentialExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterPotentialExcel<'a> {
  type Inner = CharacterPotentialExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterPotentialExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POTENTIALSTATGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_POTENTIALSTATBONUSRATETYPE: flatbuffers::VOffsetT = 8;
  pub const VT_ISUNNECESSARYSTAT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterPotentialExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterPotentialExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterPotentialExcel<'bldr>> {
    let mut builder = CharacterPotentialExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterPotential");
      let x = args.PotentialStatGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PotentialStatGroupId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.PotentialStatBonusRateType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PotentialStatBonusRateType(x);
      builder.add_IsUnnecessaryStat(args.IsUnnecessaryStat);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterPotentialExcelT {
    let key = table_encryption_service::create_key(b"CharacterPotential");
      let Id = self.Id();
      let PotentialStatGroupId = self.PotentialStatGroupId();
      let PotentialStatBonusRateType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PotentialStatBonusRateType(), &key)
      } else {
        self.PotentialStatBonusRateType()
      };
      let IsUnnecessaryStat = self.IsUnnecessaryStat();
    CharacterPotentialExcelT {
      Id,
      PotentialStatGroupId,
      PotentialStatBonusRateType,
      IsUnnecessaryStat,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterPotentialExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PotentialStatGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterPotentialExcel::VT_POTENTIALSTATGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PotentialStatBonusRateType(&self) -> PotentialStatBonusRateType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PotentialStatBonusRateType>(CharacterPotentialExcel::VT_POTENTIALSTATBONUSRATETYPE, Some(PotentialStatBonusRateType::None)).unwrap()}
  }
  #[inline]
  pub fn IsUnnecessaryStat(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterPotentialExcel::VT_ISUNNECESSARYSTAT, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterPotentialExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("PotentialStatGroupId", Self::VT_POTENTIALSTATGROUPID, false)?
     .visit_field::<PotentialStatBonusRateType>("PotentialStatBonusRateType", Self::VT_POTENTIALSTATBONUSRATETYPE, false)?
     .visit_field::<bool>("IsUnnecessaryStat", Self::VT_ISUNNECESSARYSTAT, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterPotentialExcelArgs {
    pub Id: i64,
    pub PotentialStatGroupId: i64,
    pub PotentialStatBonusRateType: PotentialStatBonusRateType,
    pub IsUnnecessaryStat: bool,
}
impl<'a> Default for CharacterPotentialExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterPotentialExcelArgs {
      Id: 0,
      PotentialStatGroupId: 0,
      PotentialStatBonusRateType: PotentialStatBonusRateType::None,
      IsUnnecessaryStat: false,
    }
  }
}

impl Serialize for CharacterPotentialExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterPotentialExcel", 4)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("PotentialStatGroupId", &self.PotentialStatGroupId())?;
      s.serialize_field("PotentialStatBonusRateType", &self.PotentialStatBonusRateType())?;
      s.serialize_field("IsUnnecessaryStat", &self.IsUnnecessaryStat())?;
    s.end()
  }
}

pub struct CharacterPotentialExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterPotentialExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterPotentialExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_PotentialStatGroupId(&mut self, PotentialStatGroupId: i64) {
    self.fbb_.push_slot::<i64>(CharacterPotentialExcel::VT_POTENTIALSTATGROUPID, PotentialStatGroupId, 0);
  }
  #[inline]
  pub fn add_PotentialStatBonusRateType(&mut self, PotentialStatBonusRateType: PotentialStatBonusRateType) {
    self.fbb_.push_slot::<PotentialStatBonusRateType>(CharacterPotentialExcel::VT_POTENTIALSTATBONUSRATETYPE, PotentialStatBonusRateType, PotentialStatBonusRateType::None);
  }
  #[inline]
  pub fn add_IsUnnecessaryStat(&mut self, IsUnnecessaryStat: bool) {
    self.fbb_.push_slot::<bool>(CharacterPotentialExcel::VT_ISUNNECESSARYSTAT, IsUnnecessaryStat, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterPotentialExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterPotentialExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterPotentialExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterPotentialExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterPotentialExcel");
      ds.field("Id", &self.Id());
      ds.field("PotentialStatGroupId", &self.PotentialStatGroupId());
      ds.field("PotentialStatBonusRateType", &self.PotentialStatBonusRateType());
      ds.field("IsUnnecessaryStat", &self.IsUnnecessaryStat());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterPotentialExcelT {
  pub Id: i64,
  pub PotentialStatGroupId: i64,
  pub PotentialStatBonusRateType: PotentialStatBonusRateType,
  pub IsUnnecessaryStat: bool,
}
impl Default for CharacterPotentialExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      PotentialStatGroupId: 0,
      PotentialStatBonusRateType: PotentialStatBonusRateType::None,
      IsUnnecessaryStat: false,
    }
  }
}
impl CharacterPotentialExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterPotentialExcel<'b>> {
    let Id = self.Id;
    let PotentialStatGroupId = self.PotentialStatGroupId;
    let PotentialStatBonusRateType = self.PotentialStatBonusRateType;
    let IsUnnecessaryStat = self.IsUnnecessaryStat;
    CharacterPotentialExcel::create(_fbb, &CharacterPotentialExcelArgs{
      Id,
      PotentialStatGroupId,
      PotentialStatBonusRateType,
      IsUnnecessaryStat,
    })
  }
}
