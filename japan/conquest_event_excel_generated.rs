// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestEventExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestEventExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestEventExcel<'a> {
  type Inner = ConquestEventExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestEventExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_MAINSTORYEVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_CONQUESTEVENTTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_USEEROSION: flatbuffers::VOffsetT = 10;
  pub const VT_USEUNEXPECTEDEVENT: flatbuffers::VOffsetT = 12;
  pub const VT_USECALCULATE: flatbuffers::VOffsetT = 14;
  pub const VT_USECONQUESTOBJECT: flatbuffers::VOffsetT = 16;
  pub const VT_EVNETMAPGOALLOCALIZE: flatbuffers::VOffsetT = 18;
  pub const VT_EVNETMAPNAMELOCALIZE: flatbuffers::VOffsetT = 20;
  pub const VT_MAPENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 22;
  pub const VT_EVNETSCENARIOBG: flatbuffers::VOffsetT = 24;
  pub const VT_MANAGEUNITCHANGE: flatbuffers::VOffsetT = 26;
  pub const VT_ASSISTCOUNT: flatbuffers::VOffsetT = 28;
  pub const VT_PLAYTIMELIMITINSECONDS: flatbuffers::VOffsetT = 30;
  pub const VT_ANIMATIONUNITAMOUNTMIN: flatbuffers::VOffsetT = 32;
  pub const VT_ANIMATIONUNITAMOUNTMAX: flatbuffers::VOffsetT = 34;
  pub const VT_ANIMATIONUNITDELAY: flatbuffers::VOffsetT = 36;
  pub const VT_LOCALIZEUNEXPECTED: flatbuffers::VOffsetT = 38;
  pub const VT_LOCALIZEEROSIONS: flatbuffers::VOffsetT = 40;
  pub const VT_LOCALIZESTEP: flatbuffers::VOffsetT = 42;
  pub const VT_LOCALIZETILE: flatbuffers::VOffsetT = 44;
  pub const VT_LOCALIZEMAPINFO: flatbuffers::VOffsetT = 46;
  pub const VT_LOCALIZEMANAGE: flatbuffers::VOffsetT = 48;
  pub const VT_LOCALIZEUPGRADE: flatbuffers::VOffsetT = 50;
  pub const VT_LOCALIZETREASUREBOX: flatbuffers::VOffsetT = 52;
  pub const VT_INDIVIDUALEROSIONDAILYCOUNT: flatbuffers::VOffsetT = 54;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestEventExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestEventExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestEventExcel<'bldr>> {
    let mut builder = ConquestEventExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestEvent");
      let x = args.IndividualErosionDailyCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_IndividualErosionDailyCount(x);
      let x = args.MapEnterScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MapEnterScenarioGroupId(x);
      let x = args.MainStoryEventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MainStoryEventContentId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.LocalizeTreasureBox {
        builder.add_LocalizeTreasureBox(x);
      }
      if let Some(x) = args.LocalizeUpgrade {
        builder.add_LocalizeUpgrade(x);
      }
      if let Some(x) = args.LocalizeManage {
        builder.add_LocalizeManage(x);
      }
      if let Some(x) = args.LocalizeMapInfo {
        builder.add_LocalizeMapInfo(x);
      }
      if let Some(x) = args.LocalizeTile {
        builder.add_LocalizeTile(x);
      }
      if let Some(x) = args.LocalizeStep {
        builder.add_LocalizeStep(x);
      }
      if let Some(x) = args.LocalizeErosions {
        builder.add_LocalizeErosions(x);
      }
      if let Some(x) = args.LocalizeUnexpected {
        builder.add_LocalizeUnexpected(x);
      }
      let x = args.AnimationUnitDelay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_AnimationUnitDelay(x);
      let x = args.AnimationUnitAmountMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AnimationUnitAmountMax(x);
      let x = args.AnimationUnitAmountMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AnimationUnitAmountMin(x);
      let x = args.PlayTimeLimitInSeconds;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PlayTimeLimitInSeconds(x);
      let x = args.AssistCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AssistCount(x);
      let x = args.ManageUnitChange;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ManageUnitChange(x);
      if let Some(x) = args.EvnetScenarioBG {
        builder.add_EvnetScenarioBG(x);
      }
      if let Some(x) = args.EvnetMapNameLocalize {
        builder.add_EvnetMapNameLocalize(x);
      }
      if let Some(x) = args.EvnetMapGoalLocalize {
        builder.add_EvnetMapGoalLocalize(x);
      }
      let x = args.ConquestEventType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConquestEventType(x);
      builder.add_UseConquestObject(args.UseConquestObject);
      builder.add_UseCalculate(args.UseCalculate);
      builder.add_UseUnexpectedEvent(args.UseUnexpectedEvent);
      builder.add_UseErosion(args.UseErosion);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestEventExcelT {
    let key = table_encryption_service::create_key(b"ConquestEvent");
      let EventContentId = self.EventContentId();
      let MainStoryEventContentId = self.MainStoryEventContentId();
      let ConquestEventType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConquestEventType(), &key)
      } else {
        self.ConquestEventType()
      };
      let UseErosion = self.UseErosion();
      let UseUnexpectedEvent = self.UseUnexpectedEvent();
      let UseCalculate = self.UseCalculate();
      let UseConquestObject = self.UseConquestObject();
    let EvnetMapGoalLocalize = self.EvnetMapGoalLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EvnetMapNameLocalize = self.EvnetMapNameLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let MapEnterScenarioGroupId = self.MapEnterScenarioGroupId();
    let EvnetScenarioBG = self.EvnetScenarioBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ManageUnitChange = self.ManageUnitChange();
      let AssistCount = self.AssistCount();
      let PlayTimeLimitInSeconds = self.PlayTimeLimitInSeconds();
      let AnimationUnitAmountMin = self.AnimationUnitAmountMin();
      let AnimationUnitAmountMax = self.AnimationUnitAmountMax();
      let AnimationUnitDelay = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.AnimationUnitDelay(), &key)
      } else {
        self.AnimationUnitDelay()
      };
    let LocalizeUnexpected = self.LocalizeUnexpected().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeErosions = self.LocalizeErosions().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeStep = self.LocalizeStep().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeTile = self.LocalizeTile().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeMapInfo = self.LocalizeMapInfo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeManage = self.LocalizeManage().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeUpgrade = self.LocalizeUpgrade().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeTreasureBox = self.LocalizeTreasureBox().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IndividualErosionDailyCount = self.IndividualErosionDailyCount();
    ConquestEventExcelT {
      EventContentId,
      MainStoryEventContentId,
      ConquestEventType,
      UseErosion,
      UseUnexpectedEvent,
      UseCalculate,
      UseConquestObject,
      EvnetMapGoalLocalize,
      EvnetMapNameLocalize,
      MapEnterScenarioGroupId,
      EvnetScenarioBG,
      ManageUnitChange,
      AssistCount,
      PlayTimeLimitInSeconds,
      AnimationUnitAmountMin,
      AnimationUnitAmountMax,
      AnimationUnitDelay,
      LocalizeUnexpected,
      LocalizeErosions,
      LocalizeStep,
      LocalizeTile,
      LocalizeMapInfo,
      LocalizeManage,
      LocalizeUpgrade,
      LocalizeTreasureBox,
      IndividualErosionDailyCount,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestEventExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MainStoryEventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestEventExcel::VT_MAINSTORYEVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestEventType(&self) -> ConquestEventType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConquestEventType>(ConquestEventExcel::VT_CONQUESTEVENTTYPE, Some(ConquestEventType::None)).unwrap()}
  }
  #[inline]
  pub fn UseErosion(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestEventExcel::VT_USEEROSION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn UseUnexpectedEvent(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestEventExcel::VT_USEUNEXPECTEDEVENT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn UseCalculate(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestEventExcel::VT_USECALCULATE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn UseConquestObject(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestEventExcel::VT_USECONQUESTOBJECT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EvnetMapGoalLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_EVNETMAPGOALLOCALIZE, None)}
  }
  #[inline]
  pub fn EvnetMapNameLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_EVNETMAPNAMELOCALIZE, None)}
  }
  #[inline]
  pub fn MapEnterScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestEventExcel::VT_MAPENTERSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EvnetScenarioBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_EVNETSCENARIOBG, None)}
  }
  #[inline]
  pub fn ManageUnitChange(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestEventExcel::VT_MANAGEUNITCHANGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AssistCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestEventExcel::VT_ASSISTCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PlayTimeLimitInSeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestEventExcel::VT_PLAYTIMELIMITINSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationUnitAmountMin(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestEventExcel::VT_ANIMATIONUNITAMOUNTMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationUnitAmountMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestEventExcel::VT_ANIMATIONUNITAMOUNTMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationUnitDelay(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestEventExcel::VT_ANIMATIONUNITDELAY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeUnexpected(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZEUNEXPECTED, None)}
  }
  #[inline]
  pub fn LocalizeErosions(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZEEROSIONS, None)}
  }
  #[inline]
  pub fn LocalizeStep(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZESTEP, None)}
  }
  #[inline]
  pub fn LocalizeTile(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZETILE, None)}
  }
  #[inline]
  pub fn LocalizeMapInfo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZEMAPINFO, None)}
  }
  #[inline]
  pub fn LocalizeManage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZEMANAGE, None)}
  }
  #[inline]
  pub fn LocalizeUpgrade(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZEUPGRADE, None)}
  }
  #[inline]
  pub fn LocalizeTreasureBox(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestEventExcel::VT_LOCALIZETREASUREBOX, None)}
  }
  #[inline]
  pub fn IndividualErosionDailyCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestEventExcel::VT_INDIVIDUALEROSIONDAILYCOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestEventExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("MainStoryEventContentId", Self::VT_MAINSTORYEVENTCONTENTID, false)?
     .visit_field::<ConquestEventType>("ConquestEventType", Self::VT_CONQUESTEVENTTYPE, false)?
     .visit_field::<bool>("UseErosion", Self::VT_USEEROSION, false)?
     .visit_field::<bool>("UseUnexpectedEvent", Self::VT_USEUNEXPECTEDEVENT, false)?
     .visit_field::<bool>("UseCalculate", Self::VT_USECALCULATE, false)?
     .visit_field::<bool>("UseConquestObject", Self::VT_USECONQUESTOBJECT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EvnetMapGoalLocalize", Self::VT_EVNETMAPGOALLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EvnetMapNameLocalize", Self::VT_EVNETMAPNAMELOCALIZE, false)?
     .visit_field::<i64>("MapEnterScenarioGroupId", Self::VT_MAPENTERSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EvnetScenarioBG", Self::VT_EVNETSCENARIOBG, false)?
     .visit_field::<i32>("ManageUnitChange", Self::VT_MANAGEUNITCHANGE, false)?
     .visit_field::<i32>("AssistCount", Self::VT_ASSISTCOUNT, false)?
     .visit_field::<i32>("PlayTimeLimitInSeconds", Self::VT_PLAYTIMELIMITINSECONDS, false)?
     .visit_field::<i32>("AnimationUnitAmountMin", Self::VT_ANIMATIONUNITAMOUNTMIN, false)?
     .visit_field::<i32>("AnimationUnitAmountMax", Self::VT_ANIMATIONUNITAMOUNTMAX, false)?
     .visit_field::<f32>("AnimationUnitDelay", Self::VT_ANIMATIONUNITDELAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeUnexpected", Self::VT_LOCALIZEUNEXPECTED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeErosions", Self::VT_LOCALIZEEROSIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeStep", Self::VT_LOCALIZESTEP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeTile", Self::VT_LOCALIZETILE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeMapInfo", Self::VT_LOCALIZEMAPINFO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeManage", Self::VT_LOCALIZEMANAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeUpgrade", Self::VT_LOCALIZEUPGRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeTreasureBox", Self::VT_LOCALIZETREASUREBOX, false)?
     .visit_field::<i64>("IndividualErosionDailyCount", Self::VT_INDIVIDUALEROSIONDAILYCOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestEventExcelArgs<'a> {
    pub EventContentId: i64,
    pub MainStoryEventContentId: i64,
    pub ConquestEventType: ConquestEventType,
    pub UseErosion: bool,
    pub UseUnexpectedEvent: bool,
    pub UseCalculate: bool,
    pub UseConquestObject: bool,
    pub EvnetMapGoalLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EvnetMapNameLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MapEnterScenarioGroupId: i64,
    pub EvnetScenarioBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ManageUnitChange: i32,
    pub AssistCount: i32,
    pub PlayTimeLimitInSeconds: i32,
    pub AnimationUnitAmountMin: i32,
    pub AnimationUnitAmountMax: i32,
    pub AnimationUnitDelay: f32,
    pub LocalizeUnexpected: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeErosions: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeStep: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeTile: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeMapInfo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeManage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeUpgrade: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeTreasureBox: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IndividualErosionDailyCount: i64,
}
impl<'a> Default for ConquestEventExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestEventExcelArgs {
      EventContentId: 0,
      MainStoryEventContentId: 0,
      ConquestEventType: ConquestEventType::None,
      UseErosion: false,
      UseUnexpectedEvent: false,
      UseCalculate: false,
      UseConquestObject: false,
      EvnetMapGoalLocalize: None,
      EvnetMapNameLocalize: None,
      MapEnterScenarioGroupId: 0,
      EvnetScenarioBG: None,
      ManageUnitChange: 0,
      AssistCount: 0,
      PlayTimeLimitInSeconds: 0,
      AnimationUnitAmountMin: 0,
      AnimationUnitAmountMax: 0,
      AnimationUnitDelay: 0.0,
      LocalizeUnexpected: None,
      LocalizeErosions: None,
      LocalizeStep: None,
      LocalizeTile: None,
      LocalizeMapInfo: None,
      LocalizeManage: None,
      LocalizeUpgrade: None,
      LocalizeTreasureBox: None,
      IndividualErosionDailyCount: 0,
    }
  }
}

impl Serialize for ConquestEventExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestEventExcel", 26)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("MainStoryEventContentId", &self.MainStoryEventContentId())?;
      s.serialize_field("ConquestEventType", &self.ConquestEventType())?;
      s.serialize_field("UseErosion", &self.UseErosion())?;
      s.serialize_field("UseUnexpectedEvent", &self.UseUnexpectedEvent())?;
      s.serialize_field("UseCalculate", &self.UseCalculate())?;
      s.serialize_field("UseConquestObject", &self.UseConquestObject())?;
      if let Some(f) = self.EvnetMapGoalLocalize() {
        s.serialize_field("EvnetMapGoalLocalize", &f)?;
      } else {
        s.skip_field("EvnetMapGoalLocalize")?;
      }
      if let Some(f) = self.EvnetMapNameLocalize() {
        s.serialize_field("EvnetMapNameLocalize", &f)?;
      } else {
        s.skip_field("EvnetMapNameLocalize")?;
      }
      s.serialize_field("MapEnterScenarioGroupId", &self.MapEnterScenarioGroupId())?;
      if let Some(f) = self.EvnetScenarioBG() {
        s.serialize_field("EvnetScenarioBG", &f)?;
      } else {
        s.skip_field("EvnetScenarioBG")?;
      }
      s.serialize_field("ManageUnitChange", &self.ManageUnitChange())?;
      s.serialize_field("AssistCount", &self.AssistCount())?;
      s.serialize_field("PlayTimeLimitInSeconds", &self.PlayTimeLimitInSeconds())?;
      s.serialize_field("AnimationUnitAmountMin", &self.AnimationUnitAmountMin())?;
      s.serialize_field("AnimationUnitAmountMax", &self.AnimationUnitAmountMax())?;
      s.serialize_field("AnimationUnitDelay", &self.AnimationUnitDelay())?;
      if let Some(f) = self.LocalizeUnexpected() {
        s.serialize_field("LocalizeUnexpected", &f)?;
      } else {
        s.skip_field("LocalizeUnexpected")?;
      }
      if let Some(f) = self.LocalizeErosions() {
        s.serialize_field("LocalizeErosions", &f)?;
      } else {
        s.skip_field("LocalizeErosions")?;
      }
      if let Some(f) = self.LocalizeStep() {
        s.serialize_field("LocalizeStep", &f)?;
      } else {
        s.skip_field("LocalizeStep")?;
      }
      if let Some(f) = self.LocalizeTile() {
        s.serialize_field("LocalizeTile", &f)?;
      } else {
        s.skip_field("LocalizeTile")?;
      }
      if let Some(f) = self.LocalizeMapInfo() {
        s.serialize_field("LocalizeMapInfo", &f)?;
      } else {
        s.skip_field("LocalizeMapInfo")?;
      }
      if let Some(f) = self.LocalizeManage() {
        s.serialize_field("LocalizeManage", &f)?;
      } else {
        s.skip_field("LocalizeManage")?;
      }
      if let Some(f) = self.LocalizeUpgrade() {
        s.serialize_field("LocalizeUpgrade", &f)?;
      } else {
        s.skip_field("LocalizeUpgrade")?;
      }
      if let Some(f) = self.LocalizeTreasureBox() {
        s.serialize_field("LocalizeTreasureBox", &f)?;
      } else {
        s.skip_field("LocalizeTreasureBox")?;
      }
      s.serialize_field("IndividualErosionDailyCount", &self.IndividualErosionDailyCount())?;
    s.end()
  }
}

pub struct ConquestEventExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestEventExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestEventExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_MainStoryEventContentId(&mut self, MainStoryEventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestEventExcel::VT_MAINSTORYEVENTCONTENTID, MainStoryEventContentId, 0);
  }
  #[inline]
  pub fn add_ConquestEventType(&mut self, ConquestEventType: ConquestEventType) {
    self.fbb_.push_slot::<ConquestEventType>(ConquestEventExcel::VT_CONQUESTEVENTTYPE, ConquestEventType, ConquestEventType::None);
  }
  #[inline]
  pub fn add_UseErosion(&mut self, UseErosion: bool) {
    self.fbb_.push_slot::<bool>(ConquestEventExcel::VT_USEEROSION, UseErosion, false);
  }
  #[inline]
  pub fn add_UseUnexpectedEvent(&mut self, UseUnexpectedEvent: bool) {
    self.fbb_.push_slot::<bool>(ConquestEventExcel::VT_USEUNEXPECTEDEVENT, UseUnexpectedEvent, false);
  }
  #[inline]
  pub fn add_UseCalculate(&mut self, UseCalculate: bool) {
    self.fbb_.push_slot::<bool>(ConquestEventExcel::VT_USECALCULATE, UseCalculate, false);
  }
  #[inline]
  pub fn add_UseConquestObject(&mut self, UseConquestObject: bool) {
    self.fbb_.push_slot::<bool>(ConquestEventExcel::VT_USECONQUESTOBJECT, UseConquestObject, false);
  }
  #[inline]
  pub fn add_EvnetMapGoalLocalize(&mut self, EvnetMapGoalLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_EVNETMAPGOALLOCALIZE, EvnetMapGoalLocalize);
  }
  #[inline]
  pub fn add_EvnetMapNameLocalize(&mut self, EvnetMapNameLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_EVNETMAPNAMELOCALIZE, EvnetMapNameLocalize);
  }
  #[inline]
  pub fn add_MapEnterScenarioGroupId(&mut self, MapEnterScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(ConquestEventExcel::VT_MAPENTERSCENARIOGROUPID, MapEnterScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_EvnetScenarioBG(&mut self, EvnetScenarioBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_EVNETSCENARIOBG, EvnetScenarioBG);
  }
  #[inline]
  pub fn add_ManageUnitChange(&mut self, ManageUnitChange: i32) {
    self.fbb_.push_slot::<i32>(ConquestEventExcel::VT_MANAGEUNITCHANGE, ManageUnitChange, 0);
  }
  #[inline]
  pub fn add_AssistCount(&mut self, AssistCount: i32) {
    self.fbb_.push_slot::<i32>(ConquestEventExcel::VT_ASSISTCOUNT, AssistCount, 0);
  }
  #[inline]
  pub fn add_PlayTimeLimitInSeconds(&mut self, PlayTimeLimitInSeconds: i32) {
    self.fbb_.push_slot::<i32>(ConquestEventExcel::VT_PLAYTIMELIMITINSECONDS, PlayTimeLimitInSeconds, 0);
  }
  #[inline]
  pub fn add_AnimationUnitAmountMin(&mut self, AnimationUnitAmountMin: i32) {
    self.fbb_.push_slot::<i32>(ConquestEventExcel::VT_ANIMATIONUNITAMOUNTMIN, AnimationUnitAmountMin, 0);
  }
  #[inline]
  pub fn add_AnimationUnitAmountMax(&mut self, AnimationUnitAmountMax: i32) {
    self.fbb_.push_slot::<i32>(ConquestEventExcel::VT_ANIMATIONUNITAMOUNTMAX, AnimationUnitAmountMax, 0);
  }
  #[inline]
  pub fn add_AnimationUnitDelay(&mut self, AnimationUnitDelay: f32) {
    self.fbb_.push_slot::<f32>(ConquestEventExcel::VT_ANIMATIONUNITDELAY, AnimationUnitDelay, 0.0);
  }
  #[inline]
  pub fn add_LocalizeUnexpected(&mut self, LocalizeUnexpected: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZEUNEXPECTED, LocalizeUnexpected);
  }
  #[inline]
  pub fn add_LocalizeErosions(&mut self, LocalizeErosions: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZEEROSIONS, LocalizeErosions);
  }
  #[inline]
  pub fn add_LocalizeStep(&mut self, LocalizeStep: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZESTEP, LocalizeStep);
  }
  #[inline]
  pub fn add_LocalizeTile(&mut self, LocalizeTile: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZETILE, LocalizeTile);
  }
  #[inline]
  pub fn add_LocalizeMapInfo(&mut self, LocalizeMapInfo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZEMAPINFO, LocalizeMapInfo);
  }
  #[inline]
  pub fn add_LocalizeManage(&mut self, LocalizeManage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZEMANAGE, LocalizeManage);
  }
  #[inline]
  pub fn add_LocalizeUpgrade(&mut self, LocalizeUpgrade: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZEUPGRADE, LocalizeUpgrade);
  }
  #[inline]
  pub fn add_LocalizeTreasureBox(&mut self, LocalizeTreasureBox: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestEventExcel::VT_LOCALIZETREASUREBOX, LocalizeTreasureBox);
  }
  #[inline]
  pub fn add_IndividualErosionDailyCount(&mut self, IndividualErosionDailyCount: i64) {
    self.fbb_.push_slot::<i64>(ConquestEventExcel::VT_INDIVIDUALEROSIONDAILYCOUNT, IndividualErosionDailyCount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestEventExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestEventExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestEventExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestEventExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestEventExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("MainStoryEventContentId", &self.MainStoryEventContentId());
      ds.field("ConquestEventType", &self.ConquestEventType());
      ds.field("UseErosion", &self.UseErosion());
      ds.field("UseUnexpectedEvent", &self.UseUnexpectedEvent());
      ds.field("UseCalculate", &self.UseCalculate());
      ds.field("UseConquestObject", &self.UseConquestObject());
      ds.field("EvnetMapGoalLocalize", &self.EvnetMapGoalLocalize());
      ds.field("EvnetMapNameLocalize", &self.EvnetMapNameLocalize());
      ds.field("MapEnterScenarioGroupId", &self.MapEnterScenarioGroupId());
      ds.field("EvnetScenarioBG", &self.EvnetScenarioBG());
      ds.field("ManageUnitChange", &self.ManageUnitChange());
      ds.field("AssistCount", &self.AssistCount());
      ds.field("PlayTimeLimitInSeconds", &self.PlayTimeLimitInSeconds());
      ds.field("AnimationUnitAmountMin", &self.AnimationUnitAmountMin());
      ds.field("AnimationUnitAmountMax", &self.AnimationUnitAmountMax());
      ds.field("AnimationUnitDelay", &self.AnimationUnitDelay());
      ds.field("LocalizeUnexpected", &self.LocalizeUnexpected());
      ds.field("LocalizeErosions", &self.LocalizeErosions());
      ds.field("LocalizeStep", &self.LocalizeStep());
      ds.field("LocalizeTile", &self.LocalizeTile());
      ds.field("LocalizeMapInfo", &self.LocalizeMapInfo());
      ds.field("LocalizeManage", &self.LocalizeManage());
      ds.field("LocalizeUpgrade", &self.LocalizeUpgrade());
      ds.field("LocalizeTreasureBox", &self.LocalizeTreasureBox());
      ds.field("IndividualErosionDailyCount", &self.IndividualErosionDailyCount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestEventExcelT {
  pub EventContentId: i64,
  pub MainStoryEventContentId: i64,
  pub ConquestEventType: ConquestEventType,
  pub UseErosion: bool,
  pub UseUnexpectedEvent: bool,
  pub UseCalculate: bool,
  pub UseConquestObject: bool,
  pub EvnetMapGoalLocalize: Option<String>,
  pub EvnetMapNameLocalize: Option<String>,
  pub MapEnterScenarioGroupId: i64,
  pub EvnetScenarioBG: Option<String>,
  pub ManageUnitChange: i32,
  pub AssistCount: i32,
  pub PlayTimeLimitInSeconds: i32,
  pub AnimationUnitAmountMin: i32,
  pub AnimationUnitAmountMax: i32,
  pub AnimationUnitDelay: f32,
  pub LocalizeUnexpected: Option<String>,
  pub LocalizeErosions: Option<String>,
  pub LocalizeStep: Option<String>,
  pub LocalizeTile: Option<String>,
  pub LocalizeMapInfo: Option<String>,
  pub LocalizeManage: Option<String>,
  pub LocalizeUpgrade: Option<String>,
  pub LocalizeTreasureBox: Option<String>,
  pub IndividualErosionDailyCount: i64,
}
impl Default for ConquestEventExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      MainStoryEventContentId: 0,
      ConquestEventType: ConquestEventType::None,
      UseErosion: false,
      UseUnexpectedEvent: false,
      UseCalculate: false,
      UseConquestObject: false,
      EvnetMapGoalLocalize: None,
      EvnetMapNameLocalize: None,
      MapEnterScenarioGroupId: 0,
      EvnetScenarioBG: None,
      ManageUnitChange: 0,
      AssistCount: 0,
      PlayTimeLimitInSeconds: 0,
      AnimationUnitAmountMin: 0,
      AnimationUnitAmountMax: 0,
      AnimationUnitDelay: 0.0,
      LocalizeUnexpected: None,
      LocalizeErosions: None,
      LocalizeStep: None,
      LocalizeTile: None,
      LocalizeMapInfo: None,
      LocalizeManage: None,
      LocalizeUpgrade: None,
      LocalizeTreasureBox: None,
      IndividualErosionDailyCount: 0,
    }
  }
}
impl ConquestEventExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestEventExcel<'b>> {
    let EventContentId = self.EventContentId;
    let MainStoryEventContentId = self.MainStoryEventContentId;
    let ConquestEventType = self.ConquestEventType;
    let UseErosion = self.UseErosion;
    let UseUnexpectedEvent = self.UseUnexpectedEvent;
    let UseCalculate = self.UseCalculate;
    let UseConquestObject = self.UseConquestObject;
    let EvnetMapGoalLocalize = self.EvnetMapGoalLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EvnetMapNameLocalize = self.EvnetMapNameLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MapEnterScenarioGroupId = self.MapEnterScenarioGroupId;
    let EvnetScenarioBG = self.EvnetScenarioBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ManageUnitChange = self.ManageUnitChange;
    let AssistCount = self.AssistCount;
    let PlayTimeLimitInSeconds = self.PlayTimeLimitInSeconds;
    let AnimationUnitAmountMin = self.AnimationUnitAmountMin;
    let AnimationUnitAmountMax = self.AnimationUnitAmountMax;
    let AnimationUnitDelay = self.AnimationUnitDelay;
    let LocalizeUnexpected = self.LocalizeUnexpected.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeErosions = self.LocalizeErosions.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeStep = self.LocalizeStep.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeTile = self.LocalizeTile.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeMapInfo = self.LocalizeMapInfo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeManage = self.LocalizeManage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeUpgrade = self.LocalizeUpgrade.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeTreasureBox = self.LocalizeTreasureBox.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IndividualErosionDailyCount = self.IndividualErosionDailyCount;
    ConquestEventExcel::create(_fbb, &ConquestEventExcelArgs{
      EventContentId,
      MainStoryEventContentId,
      ConquestEventType,
      UseErosion,
      UseUnexpectedEvent,
      UseCalculate,
      UseConquestObject,
      EvnetMapGoalLocalize,
      EvnetMapNameLocalize,
      MapEnterScenarioGroupId,
      EvnetScenarioBG,
      ManageUnitChange,
      AssistCount,
      PlayTimeLimitInSeconds,
      AnimationUnitAmountMin,
      AnimationUnitAmountMax,
      AnimationUnitDelay,
      LocalizeUnexpected,
      LocalizeErosions,
      LocalizeStep,
      LocalizeTile,
      LocalizeMapInfo,
      LocalizeManage,
      LocalizeUpgrade,
      LocalizeTreasureBox,
      IndividualErosionDailyCount,
    })
  }
}
