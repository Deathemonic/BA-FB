// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServiceActionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServiceActionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServiceActionExcel<'a> {
  type Inner = ServiceActionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServiceActionExcel<'a> {
  pub const VT_SERVICEACTIONTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_ISLEGACY: flatbuffers::VOffsetT = 6;
  pub const VT_GOODSID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServiceActionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ServiceActionExcelArgs
  ) -> flatbuffers::WIPOffset<ServiceActionExcel<'bldr>> {
    let mut builder = ServiceActionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ServiceAction");
      let x = args.GoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GoodsId(x);
      let x = args.ServiceActionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ServiceActionType(x);
      builder.add_IsLegacy(args.IsLegacy);
    builder.finish()
  }

  pub fn unpack(&self) -> ServiceActionExcelT {
    let key = table_encryption_service::create_key(b"ServiceAction");
      let ServiceActionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ServiceActionType(), &key)
      } else {
        self.ServiceActionType()
      };
      let IsLegacy = self.IsLegacy();
      let GoodsId = self.GoodsId();
    ServiceActionExcelT {
      ServiceActionType,
      IsLegacy,
      GoodsId,
    }
  }

  #[inline]
  pub fn ServiceActionType(&self) -> ServiceActionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ServiceActionType>(ServiceActionExcel::VT_SERVICEACTIONTYPE, Some(ServiceActionType::ClanCreate)).unwrap()}
  }
  #[inline]
  pub fn IsLegacy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ServiceActionExcel::VT_ISLEGACY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn GoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ServiceActionExcel::VT_GOODSID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ServiceActionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ServiceActionType>("ServiceActionType", Self::VT_SERVICEACTIONTYPE, false)?
     .visit_field::<bool>("IsLegacy", Self::VT_ISLEGACY, false)?
     .visit_field::<i64>("GoodsId", Self::VT_GOODSID, false)?
     .finish();
    Ok(())
  }
}
pub struct ServiceActionExcelArgs {
    pub ServiceActionType: ServiceActionType,
    pub IsLegacy: bool,
    pub GoodsId: i64,
}
impl<'a> Default for ServiceActionExcelArgs {
  #[inline]
  fn default() -> Self {
    ServiceActionExcelArgs {
      ServiceActionType: ServiceActionType::ClanCreate,
      IsLegacy: false,
      GoodsId: 0,
    }
  }
}

impl Serialize for ServiceActionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ServiceActionExcel", 3)?;
      s.serialize_field("ServiceActionType", &self.ServiceActionType())?;
      s.serialize_field("IsLegacy", &self.IsLegacy())?;
      s.serialize_field("GoodsId", &self.GoodsId())?;
    s.end()
  }
}

pub struct ServiceActionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ServiceActionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ServiceActionType(&mut self, ServiceActionType: ServiceActionType) {
    self.fbb_.push_slot::<ServiceActionType>(ServiceActionExcel::VT_SERVICEACTIONTYPE, ServiceActionType, ServiceActionType::ClanCreate);
  }
  #[inline]
  pub fn add_IsLegacy(&mut self, IsLegacy: bool) {
    self.fbb_.push_slot::<bool>(ServiceActionExcel::VT_ISLEGACY, IsLegacy, false);
  }
  #[inline]
  pub fn add_GoodsId(&mut self, GoodsId: i64) {
    self.fbb_.push_slot::<i64>(ServiceActionExcel::VT_GOODSID, GoodsId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ServiceActionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ServiceActionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServiceActionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServiceActionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServiceActionExcel");
      ds.field("ServiceActionType", &self.ServiceActionType());
      ds.field("IsLegacy", &self.IsLegacy());
      ds.field("GoodsId", &self.GoodsId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ServiceActionExcelT {
  pub ServiceActionType: ServiceActionType,
  pub IsLegacy: bool,
  pub GoodsId: i64,
}
impl Default for ServiceActionExcelT {
  fn default() -> Self {
    Self {
      ServiceActionType: ServiceActionType::ClanCreate,
      IsLegacy: false,
      GoodsId: 0,
    }
  }
}
impl ServiceActionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ServiceActionExcel<'b>> {
    let ServiceActionType = self.ServiceActionType;
    let IsLegacy = self.IsLegacy;
    let GoodsId = self.GoodsId;
    ServiceActionExcel::create(_fbb, &ServiceActionExcelArgs{
      ServiceActionType,
      IsLegacy,
      GoodsId,
    })
  }
}
