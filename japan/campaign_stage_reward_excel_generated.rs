// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CampaignStageRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CampaignStageRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CampaignStageRewardExcel<'a> {
  type Inner = CampaignStageRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CampaignStageRewardExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_REWARDTAG: flatbuffers::VOffsetT = 6;
  pub const VT_STAGEREWARDPROB: flatbuffers::VOffsetT = 8;
  pub const VT_STAGEREWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_STAGEREWARDID: flatbuffers::VOffsetT = 12;
  pub const VT_STAGEREWARDAMOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_ISDISPLAYED: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CampaignStageRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CampaignStageRewardExcelArgs
  ) -> flatbuffers::WIPOffset<CampaignStageRewardExcel<'bldr>> {
    let mut builder = CampaignStageRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CampaignStageReward");
      let x = args.StageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageRewardId(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.StageRewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageRewardAmount(x);
      let x = args.StageRewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageRewardParcelType(x);
      let x = args.StageRewardProb;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageRewardProb(x);
      let x = args.RewardTag;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardTag(x);
      builder.add_IsDisplayed(args.IsDisplayed);
    builder.finish()
  }

  pub fn unpack(&self) -> CampaignStageRewardExcelT {
    let key = table_encryption_service::create_key(b"CampaignStageReward");
      let GroupId = self.GroupId();
      let RewardTag = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardTag(), &key)
      } else {
        self.RewardTag()
      };
      let StageRewardProb = self.StageRewardProb();
      let StageRewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageRewardParcelType(), &key)
      } else {
        self.StageRewardParcelType()
      };
      let StageRewardId = self.StageRewardId();
      let StageRewardAmount = self.StageRewardAmount();
      let IsDisplayed = self.IsDisplayed();
    CampaignStageRewardExcelT {
      GroupId,
      RewardTag,
      StageRewardProb,
      StageRewardParcelType,
      StageRewardId,
      StageRewardAmount,
      IsDisplayed,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageRewardExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardTag(&self) -> RewardTag {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RewardTag>(CampaignStageRewardExcel::VT_REWARDTAG, Some(RewardTag::Default)).unwrap()}
  }
  #[inline]
  pub fn StageRewardProb(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageRewardExcel::VT_STAGEREWARDPROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageRewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CampaignStageRewardExcel::VT_STAGEREWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageRewardExcel::VT_STAGEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageRewardAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageRewardExcel::VT_STAGEREWARDAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsDisplayed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CampaignStageRewardExcel::VT_ISDISPLAYED, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CampaignStageRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<RewardTag>("RewardTag", Self::VT_REWARDTAG, false)?
     .visit_field::<i32>("StageRewardProb", Self::VT_STAGEREWARDPROB, false)?
     .visit_field::<ParcelType>("StageRewardParcelType", Self::VT_STAGEREWARDPARCELTYPE, false)?
     .visit_field::<i64>("StageRewardId", Self::VT_STAGEREWARDID, false)?
     .visit_field::<i32>("StageRewardAmount", Self::VT_STAGEREWARDAMOUNT, false)?
     .visit_field::<bool>("IsDisplayed", Self::VT_ISDISPLAYED, false)?
     .finish();
    Ok(())
  }
}
pub struct CampaignStageRewardExcelArgs {
    pub GroupId: i64,
    pub RewardTag: RewardTag,
    pub StageRewardProb: i32,
    pub StageRewardParcelType: ParcelType,
    pub StageRewardId: i64,
    pub StageRewardAmount: i32,
    pub IsDisplayed: bool,
}
impl<'a> Default for CampaignStageRewardExcelArgs {
  #[inline]
  fn default() -> Self {
    CampaignStageRewardExcelArgs {
      GroupId: 0,
      RewardTag: RewardTag::Default,
      StageRewardProb: 0,
      StageRewardParcelType: ParcelType::None,
      StageRewardId: 0,
      StageRewardAmount: 0,
      IsDisplayed: false,
    }
  }
}

impl Serialize for CampaignStageRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CampaignStageRewardExcel", 7)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("RewardTag", &self.RewardTag())?;
      s.serialize_field("StageRewardProb", &self.StageRewardProb())?;
      s.serialize_field("StageRewardParcelType", &self.StageRewardParcelType())?;
      s.serialize_field("StageRewardId", &self.StageRewardId())?;
      s.serialize_field("StageRewardAmount", &self.StageRewardAmount())?;
      s.serialize_field("IsDisplayed", &self.IsDisplayed())?;
    s.end()
  }
}

pub struct CampaignStageRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CampaignStageRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageRewardExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_RewardTag(&mut self, RewardTag: RewardTag) {
    self.fbb_.push_slot::<RewardTag>(CampaignStageRewardExcel::VT_REWARDTAG, RewardTag, RewardTag::Default);
  }
  #[inline]
  pub fn add_StageRewardProb(&mut self, StageRewardProb: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageRewardExcel::VT_STAGEREWARDPROB, StageRewardProb, 0);
  }
  #[inline]
  pub fn add_StageRewardParcelType(&mut self, StageRewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CampaignStageRewardExcel::VT_STAGEREWARDPARCELTYPE, StageRewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_StageRewardId(&mut self, StageRewardId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageRewardExcel::VT_STAGEREWARDID, StageRewardId, 0);
  }
  #[inline]
  pub fn add_StageRewardAmount(&mut self, StageRewardAmount: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageRewardExcel::VT_STAGEREWARDAMOUNT, StageRewardAmount, 0);
  }
  #[inline]
  pub fn add_IsDisplayed(&mut self, IsDisplayed: bool) {
    self.fbb_.push_slot::<bool>(CampaignStageRewardExcel::VT_ISDISPLAYED, IsDisplayed, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CampaignStageRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CampaignStageRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CampaignStageRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CampaignStageRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CampaignStageRewardExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("RewardTag", &self.RewardTag());
      ds.field("StageRewardProb", &self.StageRewardProb());
      ds.field("StageRewardParcelType", &self.StageRewardParcelType());
      ds.field("StageRewardId", &self.StageRewardId());
      ds.field("StageRewardAmount", &self.StageRewardAmount());
      ds.field("IsDisplayed", &self.IsDisplayed());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CampaignStageRewardExcelT {
  pub GroupId: i64,
  pub RewardTag: RewardTag,
  pub StageRewardProb: i32,
  pub StageRewardParcelType: ParcelType,
  pub StageRewardId: i64,
  pub StageRewardAmount: i32,
  pub IsDisplayed: bool,
}
impl Default for CampaignStageRewardExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      RewardTag: RewardTag::Default,
      StageRewardProb: 0,
      StageRewardParcelType: ParcelType::None,
      StageRewardId: 0,
      StageRewardAmount: 0,
      IsDisplayed: false,
    }
  }
}
impl CampaignStageRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CampaignStageRewardExcel<'b>> {
    let GroupId = self.GroupId;
    let RewardTag = self.RewardTag;
    let StageRewardProb = self.StageRewardProb;
    let StageRewardParcelType = self.StageRewardParcelType;
    let StageRewardId = self.StageRewardId;
    let StageRewardAmount = self.StageRewardAmount;
    let IsDisplayed = self.IsDisplayed;
    CampaignStageRewardExcel::create(_fbb, &CampaignStageRewardExcelArgs{
      GroupId,
      RewardTag,
      StageRewardProb,
      StageRewardParcelType,
      StageRewardId,
      StageRewardAmount,
      IsDisplayed,
    })
  }
}
