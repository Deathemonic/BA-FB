// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FixedEchelonSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FixedEchelonSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FixedEchelonSettingExcel<'a> {
  type Inner = FixedEchelonSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FixedEchelonSettingExcel<'a> {
  pub const VT_FIXEDECHELONID: flatbuffers::VOffsetT = 4;
  pub const VT_ECHELONSCENESKIP: flatbuffers::VOffsetT = 6;
  pub const VT_MAINLEADERSLOT: flatbuffers::VOffsetT = 8;
  pub const VT_MAINCHARACTERID: flatbuffers::VOffsetT = 10;
  pub const VT_MAINLEVEL: flatbuffers::VOffsetT = 12;
  pub const VT_MAINGRADE: flatbuffers::VOffsetT = 14;
  pub const VT_MAINEXSKILLLEVEL: flatbuffers::VOffsetT = 16;
  pub const VT_MAINNONEEXSKILLLEVEL: flatbuffers::VOffsetT = 18;
  pub const VT_MAINEQUIPMENT1TIER: flatbuffers::VOffsetT = 20;
  pub const VT_MAINEQUIPMENT1LEVEL: flatbuffers::VOffsetT = 22;
  pub const VT_MAINEQUIPMENT2TIER: flatbuffers::VOffsetT = 24;
  pub const VT_MAINEQUIPMENT2LEVEL: flatbuffers::VOffsetT = 26;
  pub const VT_MAINEQUIPMENT3TIER: flatbuffers::VOffsetT = 28;
  pub const VT_MAINEQUIPMENT3LEVEL: flatbuffers::VOffsetT = 30;
  pub const VT_MAINCHARACTERWEAPONGRADE: flatbuffers::VOffsetT = 32;
  pub const VT_MAINCHARACTERWEAPONLEVEL: flatbuffers::VOffsetT = 34;
  pub const VT_MAINCHARACTERGEARTIER: flatbuffers::VOffsetT = 36;
  pub const VT_MAINCHARACTERGEARLEVEL: flatbuffers::VOffsetT = 38;
  pub const VT_SUPPORTCHARACTERID: flatbuffers::VOffsetT = 40;
  pub const VT_SUPPORTLEVEL: flatbuffers::VOffsetT = 42;
  pub const VT_SUPPORTGRADE: flatbuffers::VOffsetT = 44;
  pub const VT_SUPPORTEXSKILLLEVEL: flatbuffers::VOffsetT = 46;
  pub const VT_SUPPORTNONEEXSKILLLEVEL: flatbuffers::VOffsetT = 48;
  pub const VT_SUPPORTEQUIPMENT1TIER: flatbuffers::VOffsetT = 50;
  pub const VT_SUPPORTEQUIPMENT1LEVEL: flatbuffers::VOffsetT = 52;
  pub const VT_SUPPORTEQUIPMENT2TIER: flatbuffers::VOffsetT = 54;
  pub const VT_SUPPORTEQUIPMENT2LEVEL: flatbuffers::VOffsetT = 56;
  pub const VT_SUPPORTEQUIPMENT3TIER: flatbuffers::VOffsetT = 58;
  pub const VT_SUPPORTEQUIPMENT3LEVEL: flatbuffers::VOffsetT = 60;
  pub const VT_SUPPORTCHARACTERWEAPONGRADE: flatbuffers::VOffsetT = 62;
  pub const VT_SUPPORTCHARACTERWEAPONLEVEL: flatbuffers::VOffsetT = 64;
  pub const VT_SUPPORTCHARACTERGEARTIER: flatbuffers::VOffsetT = 66;
  pub const VT_SUPPORTCHARACTERGEARLEVEL: flatbuffers::VOffsetT = 68;
  pub const VT_INTERACTIONTSCHARACTERID: flatbuffers::VOffsetT = 70;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FixedEchelonSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FixedEchelonSettingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FixedEchelonSettingExcel<'bldr>> {
    let mut builder = FixedEchelonSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FixedEchelonSetting");
      let x = args.InteractionTSCharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_InteractionTSCharacterId(x);
      let x = args.FixedEchelonID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FixedEchelonID(x);
      if let Some(x) = args.SupportCharacterGearLevel {
        builder.add_SupportCharacterGearLevel(x);
      }
      if let Some(x) = args.SupportCharacterGearTier {
        builder.add_SupportCharacterGearTier(x);
      }
      if let Some(x) = args.SupportCharacterWeaponLevel {
        builder.add_SupportCharacterWeaponLevel(x);
      }
      if let Some(x) = args.SupportCharacterWeaponGrade {
        builder.add_SupportCharacterWeaponGrade(x);
      }
      if let Some(x) = args.SupportEquipment3Level {
        builder.add_SupportEquipment3Level(x);
      }
      if let Some(x) = args.SupportEquipment3Tier {
        builder.add_SupportEquipment3Tier(x);
      }
      if let Some(x) = args.SupportEquipment2Level {
        builder.add_SupportEquipment2Level(x);
      }
      if let Some(x) = args.SupportEquipment2Tier {
        builder.add_SupportEquipment2Tier(x);
      }
      if let Some(x) = args.SupportEquipment1Level {
        builder.add_SupportEquipment1Level(x);
      }
      if let Some(x) = args.SupportEquipment1Tier {
        builder.add_SupportEquipment1Tier(x);
      }
      if let Some(x) = args.SupportNoneExSkillLevel {
        builder.add_SupportNoneExSkillLevel(x);
      }
      if let Some(x) = args.SupportExSkillLevel {
        builder.add_SupportExSkillLevel(x);
      }
      if let Some(x) = args.SupportGrade {
        builder.add_SupportGrade(x);
      }
      if let Some(x) = args.SupportLevel {
        builder.add_SupportLevel(x);
      }
      if let Some(x) = args.SupportCharacterID {
        builder.add_SupportCharacterID(x);
      }
      if let Some(x) = args.MainCharacterGearLevel {
        builder.add_MainCharacterGearLevel(x);
      }
      if let Some(x) = args.MainCharacterGearTier {
        builder.add_MainCharacterGearTier(x);
      }
      if let Some(x) = args.MainCharacterWeaponLevel {
        builder.add_MainCharacterWeaponLevel(x);
      }
      if let Some(x) = args.MainCharacterWeaponGrade {
        builder.add_MainCharacterWeaponGrade(x);
      }
      if let Some(x) = args.MainEquipment3Level {
        builder.add_MainEquipment3Level(x);
      }
      if let Some(x) = args.MainEquipment3Tier {
        builder.add_MainEquipment3Tier(x);
      }
      if let Some(x) = args.MainEquipment2Level {
        builder.add_MainEquipment2Level(x);
      }
      if let Some(x) = args.MainEquipment2Tier {
        builder.add_MainEquipment2Tier(x);
      }
      if let Some(x) = args.MainEquipment1Level {
        builder.add_MainEquipment1Level(x);
      }
      if let Some(x) = args.MainEquipment1Tier {
        builder.add_MainEquipment1Tier(x);
      }
      if let Some(x) = args.MainNoneExSkillLevel {
        builder.add_MainNoneExSkillLevel(x);
      }
      if let Some(x) = args.MainExSkillLevel {
        builder.add_MainExSkillLevel(x);
      }
      if let Some(x) = args.MainGrade {
        builder.add_MainGrade(x);
      }
      if let Some(x) = args.MainLevel {
        builder.add_MainLevel(x);
      }
      if let Some(x) = args.MainCharacterID {
        builder.add_MainCharacterID(x);
      }
      let x = args.MainLeaderSlot;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MainLeaderSlot(x);
      builder.add_EchelonSceneSkip(args.EchelonSceneSkip);
    builder.finish()
  }

  pub fn unpack(&self) -> FixedEchelonSettingExcelT {
    let key = table_encryption_service::create_key(b"FixedEchelonSetting");
      let FixedEchelonID = self.FixedEchelonID();
      let EchelonSceneSkip = self.EchelonSceneSkip();
      let MainLeaderSlot = self.MainLeaderSlot();
    let MainCharacterID = self.MainCharacterID().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let MainLevel = self.MainLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainGrade = self.MainGrade().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainExSkillLevel = self.MainExSkillLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainNoneExSkillLevel = self.MainNoneExSkillLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainEquipment1Tier = self.MainEquipment1Tier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainEquipment1Level = self.MainEquipment1Level().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainEquipment2Tier = self.MainEquipment2Tier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainEquipment2Level = self.MainEquipment2Level().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainEquipment3Tier = self.MainEquipment3Tier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainEquipment3Level = self.MainEquipment3Level().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainCharacterWeaponGrade = self.MainCharacterWeaponGrade().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainCharacterWeaponLevel = self.MainCharacterWeaponLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainCharacterGearTier = self.MainCharacterGearTier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let MainCharacterGearLevel = self.MainCharacterGearLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportCharacterID = self.SupportCharacterID().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let SupportLevel = self.SupportLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportGrade = self.SupportGrade().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportExSkillLevel = self.SupportExSkillLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportNoneExSkillLevel = self.SupportNoneExSkillLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportEquipment1Tier = self.SupportEquipment1Tier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportEquipment1Level = self.SupportEquipment1Level().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportEquipment2Tier = self.SupportEquipment2Tier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportEquipment2Level = self.SupportEquipment2Level().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportEquipment3Tier = self.SupportEquipment3Tier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportEquipment3Level = self.SupportEquipment3Level().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportCharacterWeaponGrade = self.SupportCharacterWeaponGrade().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportCharacterWeaponLevel = self.SupportCharacterWeaponLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportCharacterGearTier = self.SupportCharacterGearTier().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let SupportCharacterGearLevel = self.SupportCharacterGearLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
      let InteractionTSCharacterId = self.InteractionTSCharacterId();
    FixedEchelonSettingExcelT {
      FixedEchelonID,
      EchelonSceneSkip,
      MainLeaderSlot,
      MainCharacterID,
      MainLevel,
      MainGrade,
      MainExSkillLevel,
      MainNoneExSkillLevel,
      MainEquipment1Tier,
      MainEquipment1Level,
      MainEquipment2Tier,
      MainEquipment2Level,
      MainEquipment3Tier,
      MainEquipment3Level,
      MainCharacterWeaponGrade,
      MainCharacterWeaponLevel,
      MainCharacterGearTier,
      MainCharacterGearLevel,
      SupportCharacterID,
      SupportLevel,
      SupportGrade,
      SupportExSkillLevel,
      SupportNoneExSkillLevel,
      SupportEquipment1Tier,
      SupportEquipment1Level,
      SupportEquipment2Tier,
      SupportEquipment2Level,
      SupportEquipment3Tier,
      SupportEquipment3Level,
      SupportCharacterWeaponGrade,
      SupportCharacterWeaponLevel,
      SupportCharacterGearTier,
      SupportCharacterGearLevel,
      InteractionTSCharacterId,
    }
  }

  #[inline]
  pub fn FixedEchelonID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedEchelonSettingExcel::VT_FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonSceneSkip(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FixedEchelonSettingExcel::VT_ECHELONSCENESKIP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn MainLeaderSlot(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FixedEchelonSettingExcel::VT_MAINLEADERSLOT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MainCharacterID(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FixedEchelonSettingExcel::VT_MAINCHARACTERID, None)}
  }
  #[inline]
  pub fn MainLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINLEVEL, None)}
  }
  #[inline]
  pub fn MainGrade(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINGRADE, None)}
  }
  #[inline]
  pub fn MainExSkillLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINEXSKILLLEVEL, None)}
  }
  #[inline]
  pub fn MainNoneExSkillLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINNONEEXSKILLLEVEL, None)}
  }
  #[inline]
  pub fn MainEquipment1Tier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT1TIER, None)}
  }
  #[inline]
  pub fn MainEquipment1Level(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT1LEVEL, None)}
  }
  #[inline]
  pub fn MainEquipment2Tier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT2TIER, None)}
  }
  #[inline]
  pub fn MainEquipment2Level(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT2LEVEL, None)}
  }
  #[inline]
  pub fn MainEquipment3Tier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT3TIER, None)}
  }
  #[inline]
  pub fn MainEquipment3Level(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT3LEVEL, None)}
  }
  #[inline]
  pub fn MainCharacterWeaponGrade(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINCHARACTERWEAPONGRADE, None)}
  }
  #[inline]
  pub fn MainCharacterWeaponLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINCHARACTERWEAPONLEVEL, None)}
  }
  #[inline]
  pub fn MainCharacterGearTier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINCHARACTERGEARTIER, None)}
  }
  #[inline]
  pub fn MainCharacterGearLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_MAINCHARACTERGEARLEVEL, None)}
  }
  #[inline]
  pub fn SupportCharacterID(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERID, None)}
  }
  #[inline]
  pub fn SupportLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTLEVEL, None)}
  }
  #[inline]
  pub fn SupportGrade(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTGRADE, None)}
  }
  #[inline]
  pub fn SupportExSkillLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTEXSKILLLEVEL, None)}
  }
  #[inline]
  pub fn SupportNoneExSkillLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTNONEEXSKILLLEVEL, None)}
  }
  #[inline]
  pub fn SupportEquipment1Tier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT1TIER, None)}
  }
  #[inline]
  pub fn SupportEquipment1Level(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT1LEVEL, None)}
  }
  #[inline]
  pub fn SupportEquipment2Tier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT2TIER, None)}
  }
  #[inline]
  pub fn SupportEquipment2Level(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT2LEVEL, None)}
  }
  #[inline]
  pub fn SupportEquipment3Tier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT3TIER, None)}
  }
  #[inline]
  pub fn SupportEquipment3Level(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT3LEVEL, None)}
  }
  #[inline]
  pub fn SupportCharacterWeaponGrade(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERWEAPONGRADE, None)}
  }
  #[inline]
  pub fn SupportCharacterWeaponLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERWEAPONLEVEL, None)}
  }
  #[inline]
  pub fn SupportCharacterGearTier(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERGEARTIER, None)}
  }
  #[inline]
  pub fn SupportCharacterGearLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERGEARLEVEL, None)}
  }
  #[inline]
  pub fn InteractionTSCharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedEchelonSettingExcel::VT_INTERACTIONTSCHARACTERID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FixedEchelonSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("FixedEchelonID", Self::VT_FIXEDECHELONID, false)?
     .visit_field::<bool>("EchelonSceneSkip", Self::VT_ECHELONSCENESKIP, false)?
     .visit_field::<i32>("MainLeaderSlot", Self::VT_MAINLEADERSLOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MainCharacterID", Self::VT_MAINCHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainLevel", Self::VT_MAINLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainGrade", Self::VT_MAINGRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainExSkillLevel", Self::VT_MAINEXSKILLLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainNoneExSkillLevel", Self::VT_MAINNONEEXSKILLLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainEquipment1Tier", Self::VT_MAINEQUIPMENT1TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainEquipment1Level", Self::VT_MAINEQUIPMENT1LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainEquipment2Tier", Self::VT_MAINEQUIPMENT2TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainEquipment2Level", Self::VT_MAINEQUIPMENT2LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainEquipment3Tier", Self::VT_MAINEQUIPMENT3TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainEquipment3Level", Self::VT_MAINEQUIPMENT3LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainCharacterWeaponGrade", Self::VT_MAINCHARACTERWEAPONGRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainCharacterWeaponLevel", Self::VT_MAINCHARACTERWEAPONLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainCharacterGearTier", Self::VT_MAINCHARACTERGEARTIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MainCharacterGearLevel", Self::VT_MAINCHARACTERGEARLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("SupportCharacterID", Self::VT_SUPPORTCHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportLevel", Self::VT_SUPPORTLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportGrade", Self::VT_SUPPORTGRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportExSkillLevel", Self::VT_SUPPORTEXSKILLLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportNoneExSkillLevel", Self::VT_SUPPORTNONEEXSKILLLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportEquipment1Tier", Self::VT_SUPPORTEQUIPMENT1TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportEquipment1Level", Self::VT_SUPPORTEQUIPMENT1LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportEquipment2Tier", Self::VT_SUPPORTEQUIPMENT2TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportEquipment2Level", Self::VT_SUPPORTEQUIPMENT2LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportEquipment3Tier", Self::VT_SUPPORTEQUIPMENT3TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportEquipment3Level", Self::VT_SUPPORTEQUIPMENT3LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportCharacterWeaponGrade", Self::VT_SUPPORTCHARACTERWEAPONGRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportCharacterWeaponLevel", Self::VT_SUPPORTCHARACTERWEAPONLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportCharacterGearTier", Self::VT_SUPPORTCHARACTERGEARTIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("SupportCharacterGearLevel", Self::VT_SUPPORTCHARACTERGEARLEVEL, false)?
     .visit_field::<i64>("InteractionTSCharacterId", Self::VT_INTERACTIONTSCHARACTERID, false)?
     .finish();
    Ok(())
  }
}
pub struct FixedEchelonSettingExcelArgs<'a> {
    pub FixedEchelonID: i64,
    pub EchelonSceneSkip: bool,
    pub MainLeaderSlot: i32,
    pub MainCharacterID: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub MainLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainGrade: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainExSkillLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainNoneExSkillLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainEquipment1Tier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainEquipment1Level: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainEquipment2Tier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainEquipment2Level: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainEquipment3Tier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainEquipment3Level: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainCharacterWeaponGrade: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainCharacterWeaponLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainCharacterGearTier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub MainCharacterGearLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportCharacterID: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub SupportLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportGrade: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportExSkillLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportNoneExSkillLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportEquipment1Tier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportEquipment1Level: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportEquipment2Tier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportEquipment2Level: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportEquipment3Tier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportEquipment3Level: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportCharacterWeaponGrade: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportCharacterWeaponLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportCharacterGearTier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SupportCharacterGearLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub InteractionTSCharacterId: i64,
}
impl<'a> Default for FixedEchelonSettingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FixedEchelonSettingExcelArgs {
      FixedEchelonID: 0,
      EchelonSceneSkip: false,
      MainLeaderSlot: 0,
      MainCharacterID: None,
      MainLevel: None,
      MainGrade: None,
      MainExSkillLevel: None,
      MainNoneExSkillLevel: None,
      MainEquipment1Tier: None,
      MainEquipment1Level: None,
      MainEquipment2Tier: None,
      MainEquipment2Level: None,
      MainEquipment3Tier: None,
      MainEquipment3Level: None,
      MainCharacterWeaponGrade: None,
      MainCharacterWeaponLevel: None,
      MainCharacterGearTier: None,
      MainCharacterGearLevel: None,
      SupportCharacterID: None,
      SupportLevel: None,
      SupportGrade: None,
      SupportExSkillLevel: None,
      SupportNoneExSkillLevel: None,
      SupportEquipment1Tier: None,
      SupportEquipment1Level: None,
      SupportEquipment2Tier: None,
      SupportEquipment2Level: None,
      SupportEquipment3Tier: None,
      SupportEquipment3Level: None,
      SupportCharacterWeaponGrade: None,
      SupportCharacterWeaponLevel: None,
      SupportCharacterGearTier: None,
      SupportCharacterGearLevel: None,
      InteractionTSCharacterId: 0,
    }
  }
}

impl Serialize for FixedEchelonSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FixedEchelonSettingExcel", 34)?;
      s.serialize_field("FixedEchelonID", &self.FixedEchelonID())?;
      s.serialize_field("EchelonSceneSkip", &self.EchelonSceneSkip())?;
      s.serialize_field("MainLeaderSlot", &self.MainLeaderSlot())?;
      if let Some(f) = self.MainCharacterID() {
        s.serialize_field("MainCharacterID", &f)?;
      } else {
        s.skip_field("MainCharacterID")?;
      }
      if let Some(f) = self.MainLevel() {
        s.serialize_field("MainLevel", &f)?;
      } else {
        s.skip_field("MainLevel")?;
      }
      if let Some(f) = self.MainGrade() {
        s.serialize_field("MainGrade", &f)?;
      } else {
        s.skip_field("MainGrade")?;
      }
      if let Some(f) = self.MainExSkillLevel() {
        s.serialize_field("MainExSkillLevel", &f)?;
      } else {
        s.skip_field("MainExSkillLevel")?;
      }
      if let Some(f) = self.MainNoneExSkillLevel() {
        s.serialize_field("MainNoneExSkillLevel", &f)?;
      } else {
        s.skip_field("MainNoneExSkillLevel")?;
      }
      if let Some(f) = self.MainEquipment1Tier() {
        s.serialize_field("MainEquipment1Tier", &f)?;
      } else {
        s.skip_field("MainEquipment1Tier")?;
      }
      if let Some(f) = self.MainEquipment1Level() {
        s.serialize_field("MainEquipment1Level", &f)?;
      } else {
        s.skip_field("MainEquipment1Level")?;
      }
      if let Some(f) = self.MainEquipment2Tier() {
        s.serialize_field("MainEquipment2Tier", &f)?;
      } else {
        s.skip_field("MainEquipment2Tier")?;
      }
      if let Some(f) = self.MainEquipment2Level() {
        s.serialize_field("MainEquipment2Level", &f)?;
      } else {
        s.skip_field("MainEquipment2Level")?;
      }
      if let Some(f) = self.MainEquipment3Tier() {
        s.serialize_field("MainEquipment3Tier", &f)?;
      } else {
        s.skip_field("MainEquipment3Tier")?;
      }
      if let Some(f) = self.MainEquipment3Level() {
        s.serialize_field("MainEquipment3Level", &f)?;
      } else {
        s.skip_field("MainEquipment3Level")?;
      }
      if let Some(f) = self.MainCharacterWeaponGrade() {
        s.serialize_field("MainCharacterWeaponGrade", &f)?;
      } else {
        s.skip_field("MainCharacterWeaponGrade")?;
      }
      if let Some(f) = self.MainCharacterWeaponLevel() {
        s.serialize_field("MainCharacterWeaponLevel", &f)?;
      } else {
        s.skip_field("MainCharacterWeaponLevel")?;
      }
      if let Some(f) = self.MainCharacterGearTier() {
        s.serialize_field("MainCharacterGearTier", &f)?;
      } else {
        s.skip_field("MainCharacterGearTier")?;
      }
      if let Some(f) = self.MainCharacterGearLevel() {
        s.serialize_field("MainCharacterGearLevel", &f)?;
      } else {
        s.skip_field("MainCharacterGearLevel")?;
      }
      if let Some(f) = self.SupportCharacterID() {
        s.serialize_field("SupportCharacterID", &f)?;
      } else {
        s.skip_field("SupportCharacterID")?;
      }
      if let Some(f) = self.SupportLevel() {
        s.serialize_field("SupportLevel", &f)?;
      } else {
        s.skip_field("SupportLevel")?;
      }
      if let Some(f) = self.SupportGrade() {
        s.serialize_field("SupportGrade", &f)?;
      } else {
        s.skip_field("SupportGrade")?;
      }
      if let Some(f) = self.SupportExSkillLevel() {
        s.serialize_field("SupportExSkillLevel", &f)?;
      } else {
        s.skip_field("SupportExSkillLevel")?;
      }
      if let Some(f) = self.SupportNoneExSkillLevel() {
        s.serialize_field("SupportNoneExSkillLevel", &f)?;
      } else {
        s.skip_field("SupportNoneExSkillLevel")?;
      }
      if let Some(f) = self.SupportEquipment1Tier() {
        s.serialize_field("SupportEquipment1Tier", &f)?;
      } else {
        s.skip_field("SupportEquipment1Tier")?;
      }
      if let Some(f) = self.SupportEquipment1Level() {
        s.serialize_field("SupportEquipment1Level", &f)?;
      } else {
        s.skip_field("SupportEquipment1Level")?;
      }
      if let Some(f) = self.SupportEquipment2Tier() {
        s.serialize_field("SupportEquipment2Tier", &f)?;
      } else {
        s.skip_field("SupportEquipment2Tier")?;
      }
      if let Some(f) = self.SupportEquipment2Level() {
        s.serialize_field("SupportEquipment2Level", &f)?;
      } else {
        s.skip_field("SupportEquipment2Level")?;
      }
      if let Some(f) = self.SupportEquipment3Tier() {
        s.serialize_field("SupportEquipment3Tier", &f)?;
      } else {
        s.skip_field("SupportEquipment3Tier")?;
      }
      if let Some(f) = self.SupportEquipment3Level() {
        s.serialize_field("SupportEquipment3Level", &f)?;
      } else {
        s.skip_field("SupportEquipment3Level")?;
      }
      if let Some(f) = self.SupportCharacterWeaponGrade() {
        s.serialize_field("SupportCharacterWeaponGrade", &f)?;
      } else {
        s.skip_field("SupportCharacterWeaponGrade")?;
      }
      if let Some(f) = self.SupportCharacterWeaponLevel() {
        s.serialize_field("SupportCharacterWeaponLevel", &f)?;
      } else {
        s.skip_field("SupportCharacterWeaponLevel")?;
      }
      if let Some(f) = self.SupportCharacterGearTier() {
        s.serialize_field("SupportCharacterGearTier", &f)?;
      } else {
        s.skip_field("SupportCharacterGearTier")?;
      }
      if let Some(f) = self.SupportCharacterGearLevel() {
        s.serialize_field("SupportCharacterGearLevel", &f)?;
      } else {
        s.skip_field("SupportCharacterGearLevel")?;
      }
      s.serialize_field("InteractionTSCharacterId", &self.InteractionTSCharacterId())?;
    s.end()
  }
}

pub struct FixedEchelonSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FixedEchelonSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FixedEchelonID(&mut self, FixedEchelonID: i64) {
    self.fbb_.push_slot::<i64>(FixedEchelonSettingExcel::VT_FIXEDECHELONID, FixedEchelonID, 0);
  }
  #[inline]
  pub fn add_EchelonSceneSkip(&mut self, EchelonSceneSkip: bool) {
    self.fbb_.push_slot::<bool>(FixedEchelonSettingExcel::VT_ECHELONSCENESKIP, EchelonSceneSkip, false);
  }
  #[inline]
  pub fn add_MainLeaderSlot(&mut self, MainLeaderSlot: i32) {
    self.fbb_.push_slot::<i32>(FixedEchelonSettingExcel::VT_MAINLEADERSLOT, MainLeaderSlot, 0);
  }
  #[inline]
  pub fn add_MainCharacterID(&mut self, MainCharacterID: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINCHARACTERID, MainCharacterID);
  }
  #[inline]
  pub fn add_MainLevel(&mut self, MainLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINLEVEL, MainLevel);
  }
  #[inline]
  pub fn add_MainGrade(&mut self, MainGrade: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINGRADE, MainGrade);
  }
  #[inline]
  pub fn add_MainExSkillLevel(&mut self, MainExSkillLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINEXSKILLLEVEL, MainExSkillLevel);
  }
  #[inline]
  pub fn add_MainNoneExSkillLevel(&mut self, MainNoneExSkillLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINNONEEXSKILLLEVEL, MainNoneExSkillLevel);
  }
  #[inline]
  pub fn add_MainEquipment1Tier(&mut self, MainEquipment1Tier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT1TIER, MainEquipment1Tier);
  }
  #[inline]
  pub fn add_MainEquipment1Level(&mut self, MainEquipment1Level: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT1LEVEL, MainEquipment1Level);
  }
  #[inline]
  pub fn add_MainEquipment2Tier(&mut self, MainEquipment2Tier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT2TIER, MainEquipment2Tier);
  }
  #[inline]
  pub fn add_MainEquipment2Level(&mut self, MainEquipment2Level: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT2LEVEL, MainEquipment2Level);
  }
  #[inline]
  pub fn add_MainEquipment3Tier(&mut self, MainEquipment3Tier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT3TIER, MainEquipment3Tier);
  }
  #[inline]
  pub fn add_MainEquipment3Level(&mut self, MainEquipment3Level: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINEQUIPMENT3LEVEL, MainEquipment3Level);
  }
  #[inline]
  pub fn add_MainCharacterWeaponGrade(&mut self, MainCharacterWeaponGrade: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINCHARACTERWEAPONGRADE, MainCharacterWeaponGrade);
  }
  #[inline]
  pub fn add_MainCharacterWeaponLevel(&mut self, MainCharacterWeaponLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINCHARACTERWEAPONLEVEL, MainCharacterWeaponLevel);
  }
  #[inline]
  pub fn add_MainCharacterGearTier(&mut self, MainCharacterGearTier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINCHARACTERGEARTIER, MainCharacterGearTier);
  }
  #[inline]
  pub fn add_MainCharacterGearLevel(&mut self, MainCharacterGearLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_MAINCHARACTERGEARLEVEL, MainCharacterGearLevel);
  }
  #[inline]
  pub fn add_SupportCharacterID(&mut self, SupportCharacterID: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERID, SupportCharacterID);
  }
  #[inline]
  pub fn add_SupportLevel(&mut self, SupportLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTLEVEL, SupportLevel);
  }
  #[inline]
  pub fn add_SupportGrade(&mut self, SupportGrade: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTGRADE, SupportGrade);
  }
  #[inline]
  pub fn add_SupportExSkillLevel(&mut self, SupportExSkillLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTEXSKILLLEVEL, SupportExSkillLevel);
  }
  #[inline]
  pub fn add_SupportNoneExSkillLevel(&mut self, SupportNoneExSkillLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTNONEEXSKILLLEVEL, SupportNoneExSkillLevel);
  }
  #[inline]
  pub fn add_SupportEquipment1Tier(&mut self, SupportEquipment1Tier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT1TIER, SupportEquipment1Tier);
  }
  #[inline]
  pub fn add_SupportEquipment1Level(&mut self, SupportEquipment1Level: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT1LEVEL, SupportEquipment1Level);
  }
  #[inline]
  pub fn add_SupportEquipment2Tier(&mut self, SupportEquipment2Tier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT2TIER, SupportEquipment2Tier);
  }
  #[inline]
  pub fn add_SupportEquipment2Level(&mut self, SupportEquipment2Level: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT2LEVEL, SupportEquipment2Level);
  }
  #[inline]
  pub fn add_SupportEquipment3Tier(&mut self, SupportEquipment3Tier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT3TIER, SupportEquipment3Tier);
  }
  #[inline]
  pub fn add_SupportEquipment3Level(&mut self, SupportEquipment3Level: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTEQUIPMENT3LEVEL, SupportEquipment3Level);
  }
  #[inline]
  pub fn add_SupportCharacterWeaponGrade(&mut self, SupportCharacterWeaponGrade: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERWEAPONGRADE, SupportCharacterWeaponGrade);
  }
  #[inline]
  pub fn add_SupportCharacterWeaponLevel(&mut self, SupportCharacterWeaponLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERWEAPONLEVEL, SupportCharacterWeaponLevel);
  }
  #[inline]
  pub fn add_SupportCharacterGearTier(&mut self, SupportCharacterGearTier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERGEARTIER, SupportCharacterGearTier);
  }
  #[inline]
  pub fn add_SupportCharacterGearLevel(&mut self, SupportCharacterGearLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FixedEchelonSettingExcel::VT_SUPPORTCHARACTERGEARLEVEL, SupportCharacterGearLevel);
  }
  #[inline]
  pub fn add_InteractionTSCharacterId(&mut self, InteractionTSCharacterId: i64) {
    self.fbb_.push_slot::<i64>(FixedEchelonSettingExcel::VT_INTERACTIONTSCHARACTERID, InteractionTSCharacterId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FixedEchelonSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FixedEchelonSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FixedEchelonSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FixedEchelonSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FixedEchelonSettingExcel");
      ds.field("FixedEchelonID", &self.FixedEchelonID());
      ds.field("EchelonSceneSkip", &self.EchelonSceneSkip());
      ds.field("MainLeaderSlot", &self.MainLeaderSlot());
      ds.field("MainCharacterID", &self.MainCharacterID());
      ds.field("MainLevel", &self.MainLevel());
      ds.field("MainGrade", &self.MainGrade());
      ds.field("MainExSkillLevel", &self.MainExSkillLevel());
      ds.field("MainNoneExSkillLevel", &self.MainNoneExSkillLevel());
      ds.field("MainEquipment1Tier", &self.MainEquipment1Tier());
      ds.field("MainEquipment1Level", &self.MainEquipment1Level());
      ds.field("MainEquipment2Tier", &self.MainEquipment2Tier());
      ds.field("MainEquipment2Level", &self.MainEquipment2Level());
      ds.field("MainEquipment3Tier", &self.MainEquipment3Tier());
      ds.field("MainEquipment3Level", &self.MainEquipment3Level());
      ds.field("MainCharacterWeaponGrade", &self.MainCharacterWeaponGrade());
      ds.field("MainCharacterWeaponLevel", &self.MainCharacterWeaponLevel());
      ds.field("MainCharacterGearTier", &self.MainCharacterGearTier());
      ds.field("MainCharacterGearLevel", &self.MainCharacterGearLevel());
      ds.field("SupportCharacterID", &self.SupportCharacterID());
      ds.field("SupportLevel", &self.SupportLevel());
      ds.field("SupportGrade", &self.SupportGrade());
      ds.field("SupportExSkillLevel", &self.SupportExSkillLevel());
      ds.field("SupportNoneExSkillLevel", &self.SupportNoneExSkillLevel());
      ds.field("SupportEquipment1Tier", &self.SupportEquipment1Tier());
      ds.field("SupportEquipment1Level", &self.SupportEquipment1Level());
      ds.field("SupportEquipment2Tier", &self.SupportEquipment2Tier());
      ds.field("SupportEquipment2Level", &self.SupportEquipment2Level());
      ds.field("SupportEquipment3Tier", &self.SupportEquipment3Tier());
      ds.field("SupportEquipment3Level", &self.SupportEquipment3Level());
      ds.field("SupportCharacterWeaponGrade", &self.SupportCharacterWeaponGrade());
      ds.field("SupportCharacterWeaponLevel", &self.SupportCharacterWeaponLevel());
      ds.field("SupportCharacterGearTier", &self.SupportCharacterGearTier());
      ds.field("SupportCharacterGearLevel", &self.SupportCharacterGearLevel());
      ds.field("InteractionTSCharacterId", &self.InteractionTSCharacterId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FixedEchelonSettingExcelT {
  pub FixedEchelonID: i64,
  pub EchelonSceneSkip: bool,
  pub MainLeaderSlot: i32,
  pub MainCharacterID: Option<Vec<i64>>,
  pub MainLevel: Option<Vec<i32>>,
  pub MainGrade: Option<Vec<i32>>,
  pub MainExSkillLevel: Option<Vec<i32>>,
  pub MainNoneExSkillLevel: Option<Vec<i32>>,
  pub MainEquipment1Tier: Option<Vec<i32>>,
  pub MainEquipment1Level: Option<Vec<i32>>,
  pub MainEquipment2Tier: Option<Vec<i32>>,
  pub MainEquipment2Level: Option<Vec<i32>>,
  pub MainEquipment3Tier: Option<Vec<i32>>,
  pub MainEquipment3Level: Option<Vec<i32>>,
  pub MainCharacterWeaponGrade: Option<Vec<i32>>,
  pub MainCharacterWeaponLevel: Option<Vec<i32>>,
  pub MainCharacterGearTier: Option<Vec<i32>>,
  pub MainCharacterGearLevel: Option<Vec<i32>>,
  pub SupportCharacterID: Option<Vec<i64>>,
  pub SupportLevel: Option<Vec<i32>>,
  pub SupportGrade: Option<Vec<i32>>,
  pub SupportExSkillLevel: Option<Vec<i32>>,
  pub SupportNoneExSkillLevel: Option<Vec<i32>>,
  pub SupportEquipment1Tier: Option<Vec<i32>>,
  pub SupportEquipment1Level: Option<Vec<i32>>,
  pub SupportEquipment2Tier: Option<Vec<i32>>,
  pub SupportEquipment2Level: Option<Vec<i32>>,
  pub SupportEquipment3Tier: Option<Vec<i32>>,
  pub SupportEquipment3Level: Option<Vec<i32>>,
  pub SupportCharacterWeaponGrade: Option<Vec<i32>>,
  pub SupportCharacterWeaponLevel: Option<Vec<i32>>,
  pub SupportCharacterGearTier: Option<Vec<i32>>,
  pub SupportCharacterGearLevel: Option<Vec<i32>>,
  pub InteractionTSCharacterId: i64,
}
impl Default for FixedEchelonSettingExcelT {
  fn default() -> Self {
    Self {
      FixedEchelonID: 0,
      EchelonSceneSkip: false,
      MainLeaderSlot: 0,
      MainCharacterID: None,
      MainLevel: None,
      MainGrade: None,
      MainExSkillLevel: None,
      MainNoneExSkillLevel: None,
      MainEquipment1Tier: None,
      MainEquipment1Level: None,
      MainEquipment2Tier: None,
      MainEquipment2Level: None,
      MainEquipment3Tier: None,
      MainEquipment3Level: None,
      MainCharacterWeaponGrade: None,
      MainCharacterWeaponLevel: None,
      MainCharacterGearTier: None,
      MainCharacterGearLevel: None,
      SupportCharacterID: None,
      SupportLevel: None,
      SupportGrade: None,
      SupportExSkillLevel: None,
      SupportNoneExSkillLevel: None,
      SupportEquipment1Tier: None,
      SupportEquipment1Level: None,
      SupportEquipment2Tier: None,
      SupportEquipment2Level: None,
      SupportEquipment3Tier: None,
      SupportEquipment3Level: None,
      SupportCharacterWeaponGrade: None,
      SupportCharacterWeaponLevel: None,
      SupportCharacterGearTier: None,
      SupportCharacterGearLevel: None,
      InteractionTSCharacterId: 0,
    }
  }
}
impl FixedEchelonSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FixedEchelonSettingExcel<'b>> {
    let FixedEchelonID = self.FixedEchelonID;
    let EchelonSceneSkip = self.EchelonSceneSkip;
    let MainLeaderSlot = self.MainLeaderSlot;
    let MainCharacterID = self.MainCharacterID.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainLevel = self.MainLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainGrade = self.MainGrade.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainExSkillLevel = self.MainExSkillLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainNoneExSkillLevel = self.MainNoneExSkillLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainEquipment1Tier = self.MainEquipment1Tier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainEquipment1Level = self.MainEquipment1Level.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainEquipment2Tier = self.MainEquipment2Tier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainEquipment2Level = self.MainEquipment2Level.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainEquipment3Tier = self.MainEquipment3Tier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainEquipment3Level = self.MainEquipment3Level.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainCharacterWeaponGrade = self.MainCharacterWeaponGrade.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainCharacterWeaponLevel = self.MainCharacterWeaponLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainCharacterGearTier = self.MainCharacterGearTier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MainCharacterGearLevel = self.MainCharacterGearLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportCharacterID = self.SupportCharacterID.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportLevel = self.SupportLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportGrade = self.SupportGrade.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportExSkillLevel = self.SupportExSkillLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportNoneExSkillLevel = self.SupportNoneExSkillLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportEquipment1Tier = self.SupportEquipment1Tier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportEquipment1Level = self.SupportEquipment1Level.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportEquipment2Tier = self.SupportEquipment2Tier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportEquipment2Level = self.SupportEquipment2Level.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportEquipment3Tier = self.SupportEquipment3Tier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportEquipment3Level = self.SupportEquipment3Level.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportCharacterWeaponGrade = self.SupportCharacterWeaponGrade.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportCharacterWeaponLevel = self.SupportCharacterWeaponLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportCharacterGearTier = self.SupportCharacterGearTier.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SupportCharacterGearLevel = self.SupportCharacterGearLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let InteractionTSCharacterId = self.InteractionTSCharacterId;
    FixedEchelonSettingExcel::create(_fbb, &FixedEchelonSettingExcelArgs{
      FixedEchelonID,
      EchelonSceneSkip,
      MainLeaderSlot,
      MainCharacterID,
      MainLevel,
      MainGrade,
      MainExSkillLevel,
      MainNoneExSkillLevel,
      MainEquipment1Tier,
      MainEquipment1Level,
      MainEquipment2Tier,
      MainEquipment2Level,
      MainEquipment3Tier,
      MainEquipment3Level,
      MainCharacterWeaponGrade,
      MainCharacterWeaponLevel,
      MainCharacterGearTier,
      MainCharacterGearLevel,
      SupportCharacterID,
      SupportLevel,
      SupportGrade,
      SupportExSkillLevel,
      SupportNoneExSkillLevel,
      SupportEquipment1Tier,
      SupportEquipment1Level,
      SupportEquipment2Tier,
      SupportEquipment2Level,
      SupportEquipment3Tier,
      SupportEquipment3Level,
      SupportCharacterWeaponGrade,
      SupportCharacterWeaponLevel,
      SupportCharacterGearTier,
      SupportCharacterGearLevel,
      InteractionTSCharacterId,
    })
  }
}
