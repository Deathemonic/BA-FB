// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AcademyTicketExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AcademyTicketExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AcademyTicketExcel<'a> {
  type Inner = AcademyTicketExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AcademyTicketExcel<'a> {
  pub const VT_LOCATIONRANKSUM: flatbuffers::VOffsetT = 4;
  pub const VT_SCHEDULETICKTETMAX: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AcademyTicketExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AcademyTicketExcelArgs
  ) -> flatbuffers::WIPOffset<AcademyTicketExcel<'bldr>> {
    let mut builder = AcademyTicketExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AcademyTicket");
      let x = args.ScheduleTicktetMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScheduleTicktetMax(x);
      let x = args.LocationRankSum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LocationRankSum(x);
    builder.finish()
  }

  pub fn unpack(&self) -> AcademyTicketExcelT {
    let key = table_encryption_service::create_key(b"AcademyTicket");
      let LocationRankSum = self.LocationRankSum();
      let ScheduleTicktetMax = self.ScheduleTicktetMax();
    AcademyTicketExcelT {
      LocationRankSum,
      ScheduleTicktetMax,
    }
  }

  #[inline]
  pub fn LocationRankSum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyTicketExcel::VT_LOCATIONRANKSUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScheduleTicktetMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyTicketExcel::VT_SCHEDULETICKTETMAX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AcademyTicketExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("LocationRankSum", Self::VT_LOCATIONRANKSUM, false)?
     .visit_field::<i64>("ScheduleTicktetMax", Self::VT_SCHEDULETICKTETMAX, false)?
     .finish();
    Ok(())
  }
}
pub struct AcademyTicketExcelArgs {
    pub LocationRankSum: i64,
    pub ScheduleTicktetMax: i64,
}
impl<'a> Default for AcademyTicketExcelArgs {
  #[inline]
  fn default() -> Self {
    AcademyTicketExcelArgs {
      LocationRankSum: 0,
      ScheduleTicktetMax: 0,
    }
  }
}

impl Serialize for AcademyTicketExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AcademyTicketExcel", 2)?;
      s.serialize_field("LocationRankSum", &self.LocationRankSum())?;
      s.serialize_field("ScheduleTicktetMax", &self.ScheduleTicktetMax())?;
    s.end()
  }
}

pub struct AcademyTicketExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AcademyTicketExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LocationRankSum(&mut self, LocationRankSum: i64) {
    self.fbb_.push_slot::<i64>(AcademyTicketExcel::VT_LOCATIONRANKSUM, LocationRankSum, 0);
  }
  #[inline]
  pub fn add_ScheduleTicktetMax(&mut self, ScheduleTicktetMax: i64) {
    self.fbb_.push_slot::<i64>(AcademyTicketExcel::VT_SCHEDULETICKTETMAX, ScheduleTicktetMax, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AcademyTicketExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AcademyTicketExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AcademyTicketExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AcademyTicketExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AcademyTicketExcel");
      ds.field("LocationRankSum", &self.LocationRankSum());
      ds.field("ScheduleTicktetMax", &self.ScheduleTicktetMax());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AcademyTicketExcelT {
  pub LocationRankSum: i64,
  pub ScheduleTicktetMax: i64,
}
impl Default for AcademyTicketExcelT {
  fn default() -> Self {
    Self {
      LocationRankSum: 0,
      ScheduleTicktetMax: 0,
    }
  }
}
impl AcademyTicketExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AcademyTicketExcel<'b>> {
    let LocationRankSum = self.LocationRankSum;
    let ScheduleTicktetMax = self.ScheduleTicktetMax;
    AcademyTicketExcel::create(_fbb, &AcademyTicketExcelArgs{
      LocationRankSum,
      ScheduleTicktetMax,
    })
  }
}
