// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentConcentrationRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentConcentrationRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentConcentrationRewardExcel<'a> {
  type Inner = EventContentConcentrationRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentConcentrationRewardExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_CONCENTRATIONREWARDTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEPREFABID: flatbuffers::VOffsetT = 10;
  pub const VT_RARITY: flatbuffers::VOffsetT = 12;
  pub const VT_ROUND: flatbuffers::VOffsetT = 14;
  pub const VT_ISLOOP: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 20;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentConcentrationRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentConcentrationRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentConcentrationRewardExcel<'bldr>> {
    let mut builder = EventContentConcentrationRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentConcentrationReward");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      let x = args.Round;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Round(x);
      let x = args.Rarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Rarity(x);
      if let Some(x) = args.LocalizePrefabId {
        builder.add_LocalizePrefabId(x);
      }
      let x = args.ConcentrationRewardType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConcentrationRewardType(x);
      builder.add_IsLoop(args.IsLoop);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentConcentrationRewardExcelT {
    let key = table_encryption_service::create_key(b"EventContentConcentrationReward");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let ConcentrationRewardType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConcentrationRewardType(), &key)
      } else {
        self.ConcentrationRewardType()
      };
    let LocalizePrefabId = self.LocalizePrefabId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Rarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Rarity(), &key)
      } else {
        self.Rarity()
      };
      let Round = self.Round();
      let IsLoop = self.IsLoop();
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    EventContentConcentrationRewardExcelT {
      EventContentId,
      UniqueId,
      ConcentrationRewardType,
      LocalizePrefabId,
      Rarity,
      Round,
      IsLoop,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentConcentrationRewardExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentConcentrationRewardExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConcentrationRewardType(&self) -> ConcentrationRewardType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConcentrationRewardType>(EventContentConcentrationRewardExcel::VT_CONCENTRATIONREWARDTYPE, Some(ConcentrationRewardType::None)).unwrap()}
  }
  #[inline]
  pub fn LocalizePrefabId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentConcentrationRewardExcel::VT_LOCALIZEPREFABID, None)}
  }
  #[inline]
  pub fn Rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(EventContentConcentrationRewardExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn Round(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentConcentrationRewardExcel::VT_ROUND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsLoop(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentConcentrationRewardExcel::VT_ISLOOP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentConcentrationRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentConcentrationRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(EventContentConcentrationRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EventContentConcentrationRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<ConcentrationRewardType>("ConcentrationRewardType", Self::VT_CONCENTRATIONREWARDTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizePrefabId", Self::VT_LOCALIZEPREFABID, false)?
     .visit_field::<Rarity>("Rarity", Self::VT_RARITY, false)?
     .visit_field::<i32>("Round", Self::VT_ROUND, false)?
     .visit_field::<bool>("IsLoop", Self::VT_ISLOOP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentConcentrationRewardExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub ConcentrationRewardType: ConcentrationRewardType,
    pub LocalizePrefabId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Rarity: Rarity,
    pub Round: i32,
    pub IsLoop: bool,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for EventContentConcentrationRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentConcentrationRewardExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      ConcentrationRewardType: ConcentrationRewardType::None,
      LocalizePrefabId: None,
      Rarity: Rarity::N,
      Round: 0,
      IsLoop: false,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}

impl Serialize for EventContentConcentrationRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentConcentrationRewardExcel", 10)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("ConcentrationRewardType", &self.ConcentrationRewardType())?;
      if let Some(f) = self.LocalizePrefabId() {
        s.serialize_field("LocalizePrefabId", &f)?;
      } else {
        s.skip_field("LocalizePrefabId")?;
      }
      s.serialize_field("Rarity", &self.Rarity())?;
      s.serialize_field("Round", &self.Round())?;
      s.serialize_field("IsLoop", &self.IsLoop())?;
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct EventContentConcentrationRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentConcentrationRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentConcentrationRewardExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(EventContentConcentrationRewardExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_ConcentrationRewardType(&mut self, ConcentrationRewardType: ConcentrationRewardType) {
    self.fbb_.push_slot::<ConcentrationRewardType>(EventContentConcentrationRewardExcel::VT_CONCENTRATIONREWARDTYPE, ConcentrationRewardType, ConcentrationRewardType::None);
  }
  #[inline]
  pub fn add_LocalizePrefabId(&mut self, LocalizePrefabId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentConcentrationRewardExcel::VT_LOCALIZEPREFABID, LocalizePrefabId);
  }
  #[inline]
  pub fn add_Rarity(&mut self, Rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(EventContentConcentrationRewardExcel::VT_RARITY, Rarity, Rarity::N);
  }
  #[inline]
  pub fn add_Round(&mut self, Round: i32) {
    self.fbb_.push_slot::<i32>(EventContentConcentrationRewardExcel::VT_ROUND, Round, 0);
  }
  #[inline]
  pub fn add_IsLoop(&mut self, IsLoop: bool) {
    self.fbb_.push_slot::<bool>(EventContentConcentrationRewardExcel::VT_ISLOOP, IsLoop, false);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentConcentrationRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentConcentrationRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentConcentrationRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentConcentrationRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentConcentrationRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentConcentrationRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentConcentrationRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentConcentrationRewardExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("ConcentrationRewardType", &self.ConcentrationRewardType());
      ds.field("LocalizePrefabId", &self.LocalizePrefabId());
      ds.field("Rarity", &self.Rarity());
      ds.field("Round", &self.Round());
      ds.field("IsLoop", &self.IsLoop());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentConcentrationRewardExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub ConcentrationRewardType: ConcentrationRewardType,
  pub LocalizePrefabId: Option<String>,
  pub Rarity: Rarity,
  pub Round: i32,
  pub IsLoop: bool,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i32>>,
}
impl Default for EventContentConcentrationRewardExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      ConcentrationRewardType: ConcentrationRewardType::None,
      LocalizePrefabId: None,
      Rarity: Rarity::N,
      Round: 0,
      IsLoop: false,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}
impl EventContentConcentrationRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentConcentrationRewardExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let ConcentrationRewardType = self.ConcentrationRewardType;
    let LocalizePrefabId = self.LocalizePrefabId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Rarity = self.Rarity;
    let Round = self.Round;
    let IsLoop = self.IsLoop;
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentConcentrationRewardExcel::create(_fbb, &EventContentConcentrationRewardExcelArgs{
      EventContentId,
      UniqueId,
      ConcentrationRewardType,
      LocalizePrefabId,
      Rarity,
      Round,
      IsLoop,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    })
  }
}
