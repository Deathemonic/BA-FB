// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_STRATEGY_OBJECT_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_STRATEGY_OBJECT_TYPE: i32 = 20;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STRATEGY_OBJECT_TYPE: [StrategyObjectType; 21] = [
  StrategyObjectType::None,
  StrategyObjectType::Start,
  StrategyObjectType::Heal,
  StrategyObjectType::Skill,
  StrategyObjectType::StatBuff,
  StrategyObjectType::Parcel,
  StrategyObjectType::ParcelOneTimePerAccount,
  StrategyObjectType::Portal,
  StrategyObjectType::PortalOneWayEnterance,
  StrategyObjectType::PortalOneWayExit,
  StrategyObjectType::Observatory,
  StrategyObjectType::Beacon,
  StrategyObjectType::BeaconOneTime,
  StrategyObjectType::EnemySpawn,
  StrategyObjectType::SwitchToggle,
  StrategyObjectType::SwitchMovableWhenToggleOff,
  StrategyObjectType::SwitchMovableWhenToggleOn,
  StrategyObjectType::FixedStart01,
  StrategyObjectType::FixedStart02,
  StrategyObjectType::FixedStart03,
  StrategyObjectType::FixedStart04,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct StrategyObjectType(pub i32);
#[allow(non_upper_case_globals)]
impl StrategyObjectType {
  pub const None: Self = Self(0);
  pub const Start: Self = Self(1);
  pub const Heal: Self = Self(2);
  pub const Skill: Self = Self(3);
  pub const StatBuff: Self = Self(4);
  pub const Parcel: Self = Self(5);
  pub const ParcelOneTimePerAccount: Self = Self(6);
  pub const Portal: Self = Self(7);
  pub const PortalOneWayEnterance: Self = Self(8);
  pub const PortalOneWayExit: Self = Self(9);
  pub const Observatory: Self = Self(10);
  pub const Beacon: Self = Self(11);
  pub const BeaconOneTime: Self = Self(12);
  pub const EnemySpawn: Self = Self(13);
  pub const SwitchToggle: Self = Self(14);
  pub const SwitchMovableWhenToggleOff: Self = Self(15);
  pub const SwitchMovableWhenToggleOn: Self = Self(16);
  pub const FixedStart01: Self = Self(17);
  pub const FixedStart02: Self = Self(18);
  pub const FixedStart03: Self = Self(19);
  pub const FixedStart04: Self = Self(20);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 20;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Start,
    Self::Heal,
    Self::Skill,
    Self::StatBuff,
    Self::Parcel,
    Self::ParcelOneTimePerAccount,
    Self::Portal,
    Self::PortalOneWayEnterance,
    Self::PortalOneWayExit,
    Self::Observatory,
    Self::Beacon,
    Self::BeaconOneTime,
    Self::EnemySpawn,
    Self::SwitchToggle,
    Self::SwitchMovableWhenToggleOff,
    Self::SwitchMovableWhenToggleOn,
    Self::FixedStart01,
    Self::FixedStart02,
    Self::FixedStart03,
    Self::FixedStart04,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Start => Some("Start"),
      Self::Heal => Some("Heal"),
      Self::Skill => Some("Skill"),
      Self::StatBuff => Some("StatBuff"),
      Self::Parcel => Some("Parcel"),
      Self::ParcelOneTimePerAccount => Some("ParcelOneTimePerAccount"),
      Self::Portal => Some("Portal"),
      Self::PortalOneWayEnterance => Some("PortalOneWayEnterance"),
      Self::PortalOneWayExit => Some("PortalOneWayExit"),
      Self::Observatory => Some("Observatory"),
      Self::Beacon => Some("Beacon"),
      Self::BeaconOneTime => Some("BeaconOneTime"),
      Self::EnemySpawn => Some("EnemySpawn"),
      Self::SwitchToggle => Some("SwitchToggle"),
      Self::SwitchMovableWhenToggleOff => Some("SwitchMovableWhenToggleOff"),
      Self::SwitchMovableWhenToggleOn => Some("SwitchMovableWhenToggleOn"),
      Self::FixedStart01 => Some("FixedStart01"),
      Self::FixedStart02 => Some("FixedStart02"),
      Self::FixedStart03 => Some("FixedStart03"),
      Self::FixedStart04 => Some("FixedStart04"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for StrategyObjectType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for StrategyObjectType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("StrategyObjectType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for StrategyObjectType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for StrategyObjectType {
    type Output = StrategyObjectType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for StrategyObjectType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for StrategyObjectType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for StrategyObjectType {}
