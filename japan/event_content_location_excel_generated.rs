// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentLocationExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentLocationExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentLocationExcel<'a> {
  type Inner = EventContentLocationExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentLocationExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_PREFABPATH: flatbuffers::VOffsetT = 10;
  pub const VT_LOCATIONRESETSCHEDULECOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_SCHEDULEEVENTPOINTCOSTPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_SCHEDULEEVENTPOINTCOSTPARCELID: flatbuffers::VOffsetT = 16;
  pub const VT_SCHEDULEEVENTPOINTCOSTPARCELAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 22;
  pub const VT_INFORMATIONGROUPID: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentLocationExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentLocationExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentLocationExcel<'bldr>> {
    let mut builder = EventContentLocationExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentLocation");
      let x = args.InformationGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_InformationGroupId(x);
      let x = args.RewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelId(x);
      let x = args.ScheduleEventPointCostParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScheduleEventPointCostParcelAmount(x);
      let x = args.ScheduleEventPointCostParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScheduleEventPointCostParcelId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      let x = args.ScheduleEventPointCostParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ScheduleEventPointCostParcelType(x);
      let x = args.LocationResetScheduleCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_LocationResetScheduleCount(x);
      if let Some(x) = args.PrefabPath {
        builder.add_PrefabPath(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentLocationExcelT {
    let key = table_encryption_service::create_key(b"EventContentLocation");
      let EventContentId = self.EventContentId();
      let Id = self.Id();
      let LocalizeEtcId = self.LocalizeEtcId();
    let PrefabPath = self.PrefabPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocationResetScheduleCount = self.LocationResetScheduleCount();
      let ScheduleEventPointCostParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ScheduleEventPointCostParcelType(), &key)
      } else {
        self.ScheduleEventPointCostParcelType()
      };
      let ScheduleEventPointCostParcelId = self.ScheduleEventPointCostParcelId();
      let ScheduleEventPointCostParcelAmount = self.ScheduleEventPointCostParcelAmount();
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelId = self.RewardParcelId();
      let InformationGroupId = self.InformationGroupId();
    EventContentLocationExcelT {
      EventContentId,
      Id,
      LocalizeEtcId,
      PrefabPath,
      LocationResetScheduleCount,
      ScheduleEventPointCostParcelType,
      ScheduleEventPointCostParcelId,
      ScheduleEventPointCostParcelAmount,
      RewardParcelType,
      RewardParcelId,
      InformationGroupId,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentLocationExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrefabPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentLocationExcel::VT_PREFABPATH, None)}
  }
  #[inline]
  pub fn LocationResetScheduleCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentLocationExcel::VT_LOCATIONRESETSCHEDULECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScheduleEventPointCostParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(EventContentLocationExcel::VT_SCHEDULEEVENTPOINTCOSTPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ScheduleEventPointCostParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationExcel::VT_SCHEDULEEVENTPOINTCOSTPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScheduleEventPointCostParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationExcel::VT_SCHEDULEEVENTPOINTCOSTPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(EventContentLocationExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationExcel::VT_REWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InformationGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationExcel::VT_INFORMATIONGROUPID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentLocationExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabPath", Self::VT_PREFABPATH, false)?
     .visit_field::<i32>("LocationResetScheduleCount", Self::VT_LOCATIONRESETSCHEDULECOUNT, false)?
     .visit_field::<ParcelType>("ScheduleEventPointCostParcelType", Self::VT_SCHEDULEEVENTPOINTCOSTPARCELTYPE, false)?
     .visit_field::<i64>("ScheduleEventPointCostParcelId", Self::VT_SCHEDULEEVENTPOINTCOSTPARCELID, false)?
     .visit_field::<i64>("ScheduleEventPointCostParcelAmount", Self::VT_SCHEDULEEVENTPOINTCOSTPARCELAMOUNT, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<i64>("InformationGroupId", Self::VT_INFORMATIONGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentLocationExcelArgs<'a> {
    pub EventContentId: i64,
    pub Id: i64,
    pub LocalizeEtcId: u32,
    pub PrefabPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocationResetScheduleCount: i32,
    pub ScheduleEventPointCostParcelType: ParcelType,
    pub ScheduleEventPointCostParcelId: i64,
    pub ScheduleEventPointCostParcelAmount: i64,
    pub RewardParcelType: ParcelType,
    pub RewardParcelId: i64,
    pub InformationGroupId: i64,
}
impl<'a> Default for EventContentLocationExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentLocationExcelArgs {
      EventContentId: 0,
      Id: 0,
      LocalizeEtcId: 0,
      PrefabPath: None,
      LocationResetScheduleCount: 0,
      ScheduleEventPointCostParcelType: ParcelType::None,
      ScheduleEventPointCostParcelId: 0,
      ScheduleEventPointCostParcelAmount: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      InformationGroupId: 0,
    }
  }
}

impl Serialize for EventContentLocationExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentLocationExcel", 11)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.PrefabPath() {
        s.serialize_field("PrefabPath", &f)?;
      } else {
        s.skip_field("PrefabPath")?;
      }
      s.serialize_field("LocationResetScheduleCount", &self.LocationResetScheduleCount())?;
      s.serialize_field("ScheduleEventPointCostParcelType", &self.ScheduleEventPointCostParcelType())?;
      s.serialize_field("ScheduleEventPointCostParcelId", &self.ScheduleEventPointCostParcelId())?;
      s.serialize_field("ScheduleEventPointCostParcelAmount", &self.ScheduleEventPointCostParcelAmount())?;
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelId", &self.RewardParcelId())?;
      s.serialize_field("InformationGroupId", &self.InformationGroupId())?;
    s.end()
  }
}

pub struct EventContentLocationExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentLocationExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(EventContentLocationExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_PrefabPath(&mut self, PrefabPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationExcel::VT_PREFABPATH, PrefabPath);
  }
  #[inline]
  pub fn add_LocationResetScheduleCount(&mut self, LocationResetScheduleCount: i32) {
    self.fbb_.push_slot::<i32>(EventContentLocationExcel::VT_LOCATIONRESETSCHEDULECOUNT, LocationResetScheduleCount, 0);
  }
  #[inline]
  pub fn add_ScheduleEventPointCostParcelType(&mut self, ScheduleEventPointCostParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(EventContentLocationExcel::VT_SCHEDULEEVENTPOINTCOSTPARCELTYPE, ScheduleEventPointCostParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ScheduleEventPointCostParcelId(&mut self, ScheduleEventPointCostParcelId: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationExcel::VT_SCHEDULEEVENTPOINTCOSTPARCELID, ScheduleEventPointCostParcelId, 0);
  }
  #[inline]
  pub fn add_ScheduleEventPointCostParcelAmount(&mut self, ScheduleEventPointCostParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationExcel::VT_SCHEDULEEVENTPOINTCOSTPARCELAMOUNT, ScheduleEventPointCostParcelAmount, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(EventContentLocationExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationExcel::VT_REWARDPARCELID, RewardParcelId, 0);
  }
  #[inline]
  pub fn add_InformationGroupId(&mut self, InformationGroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationExcel::VT_INFORMATIONGROUPID, InformationGroupId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentLocationExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentLocationExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentLocationExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentLocationExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentLocationExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("Id", &self.Id());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("PrefabPath", &self.PrefabPath());
      ds.field("LocationResetScheduleCount", &self.LocationResetScheduleCount());
      ds.field("ScheduleEventPointCostParcelType", &self.ScheduleEventPointCostParcelType());
      ds.field("ScheduleEventPointCostParcelId", &self.ScheduleEventPointCostParcelId());
      ds.field("ScheduleEventPointCostParcelAmount", &self.ScheduleEventPointCostParcelAmount());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("InformationGroupId", &self.InformationGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentLocationExcelT {
  pub EventContentId: i64,
  pub Id: i64,
  pub LocalizeEtcId: u32,
  pub PrefabPath: Option<String>,
  pub LocationResetScheduleCount: i32,
  pub ScheduleEventPointCostParcelType: ParcelType,
  pub ScheduleEventPointCostParcelId: i64,
  pub ScheduleEventPointCostParcelAmount: i64,
  pub RewardParcelType: ParcelType,
  pub RewardParcelId: i64,
  pub InformationGroupId: i64,
}
impl Default for EventContentLocationExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      Id: 0,
      LocalizeEtcId: 0,
      PrefabPath: None,
      LocationResetScheduleCount: 0,
      ScheduleEventPointCostParcelType: ParcelType::None,
      ScheduleEventPointCostParcelId: 0,
      ScheduleEventPointCostParcelAmount: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      InformationGroupId: 0,
    }
  }
}
impl EventContentLocationExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentLocationExcel<'b>> {
    let EventContentId = self.EventContentId;
    let Id = self.Id;
    let LocalizeEtcId = self.LocalizeEtcId;
    let PrefabPath = self.PrefabPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocationResetScheduleCount = self.LocationResetScheduleCount;
    let ScheduleEventPointCostParcelType = self.ScheduleEventPointCostParcelType;
    let ScheduleEventPointCostParcelId = self.ScheduleEventPointCostParcelId;
    let ScheduleEventPointCostParcelAmount = self.ScheduleEventPointCostParcelAmount;
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelId = self.RewardParcelId;
    let InformationGroupId = self.InformationGroupId;
    EventContentLocationExcel::create(_fbb, &EventContentLocationExcelArgs{
      EventContentId,
      Id,
      LocalizeEtcId,
      PrefabPath,
      LocationResetScheduleCount,
      ScheduleEventPointCostParcelType,
      ScheduleEventPointCostParcelId,
      ScheduleEventPointCostParcelAmount,
      RewardParcelType,
      RewardParcelId,
      InformationGroupId,
    })
  }
}
