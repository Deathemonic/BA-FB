// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterAcademyTagsExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterAcademyTagsExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterAcademyTagsExcel<'a> {
  type Inner = CharacterAcademyTagsExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterAcademyTagsExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_FAVORTAGS: flatbuffers::VOffsetT = 6;
  pub const VT_FAVORITEMTAGS: flatbuffers::VOffsetT = 8;
  pub const VT_FAVORITEMUNIQUETAGS: flatbuffers::VOffsetT = 10;
  pub const VT_FORBIDDENTAGS: flatbuffers::VOffsetT = 12;
  pub const VT_ZONEWHITELISTTAGS: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterAcademyTagsExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterAcademyTagsExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterAcademyTagsExcel<'bldr>> {
    let mut builder = CharacterAcademyTagsExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterAcademyTags");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ZoneWhiteListTags {
        builder.add_ZoneWhiteListTags(x);
      }
      if let Some(x) = args.ForbiddenTags {
        builder.add_ForbiddenTags(x);
      }
      if let Some(x) = args.FavorItemUniqueTags {
        builder.add_FavorItemUniqueTags(x);
      }
      if let Some(x) = args.FavorItemTags {
        builder.add_FavorItemTags(x);
      }
      if let Some(x) = args.FavorTags {
        builder.add_FavorTags(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterAcademyTagsExcelT {
    let key = table_encryption_service::create_key(b"CharacterAcademyTags");
      let Id = self.Id();
    let FavorTags = self.FavorTags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let FavorItemTags = self.FavorItemTags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let FavorItemUniqueTags = self.FavorItemUniqueTags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ForbiddenTags = self.ForbiddenTags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ZoneWhiteListTags = self.ZoneWhiteListTags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    CharacterAcademyTagsExcelT {
      Id,
      FavorTags,
      FavorItemTags,
      FavorItemUniqueTags,
      ForbiddenTags,
      ZoneWhiteListTags,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterAcademyTagsExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorTags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(CharacterAcademyTagsExcel::VT_FAVORTAGS, None)}
  }
  #[inline]
  pub fn FavorItemTags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(CharacterAcademyTagsExcel::VT_FAVORITEMTAGS, None)}
  }
  #[inline]
  pub fn FavorItemUniqueTags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(CharacterAcademyTagsExcel::VT_FAVORITEMUNIQUETAGS, None)}
  }
  #[inline]
  pub fn ForbiddenTags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(CharacterAcademyTagsExcel::VT_FORBIDDENTAGS, None)}
  }
  #[inline]
  pub fn ZoneWhiteListTags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(CharacterAcademyTagsExcel::VT_ZONEWHITELISTTAGS, None)}
  }
}

impl flatbuffers::Verifiable for CharacterAcademyTagsExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("FavorTags", Self::VT_FAVORTAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("FavorItemTags", Self::VT_FAVORITEMTAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("FavorItemUniqueTags", Self::VT_FAVORITEMUNIQUETAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("ForbiddenTags", Self::VT_FORBIDDENTAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("ZoneWhiteListTags", Self::VT_ZONEWHITELISTTAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterAcademyTagsExcelArgs<'a> {
    pub Id: i64,
    pub FavorTags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub FavorItemTags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub FavorItemUniqueTags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub ForbiddenTags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub ZoneWhiteListTags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
}
impl<'a> Default for CharacterAcademyTagsExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterAcademyTagsExcelArgs {
      Id: 0,
      FavorTags: None,
      FavorItemTags: None,
      FavorItemUniqueTags: None,
      ForbiddenTags: None,
      ZoneWhiteListTags: None,
    }
  }
}

impl Serialize for CharacterAcademyTagsExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterAcademyTagsExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.FavorTags() {
        s.serialize_field("FavorTags", &f)?;
      } else {
        s.skip_field("FavorTags")?;
      }
      if let Some(f) = self.FavorItemTags() {
        s.serialize_field("FavorItemTags", &f)?;
      } else {
        s.skip_field("FavorItemTags")?;
      }
      if let Some(f) = self.FavorItemUniqueTags() {
        s.serialize_field("FavorItemUniqueTags", &f)?;
      } else {
        s.skip_field("FavorItemUniqueTags")?;
      }
      if let Some(f) = self.ForbiddenTags() {
        s.serialize_field("ForbiddenTags", &f)?;
      } else {
        s.skip_field("ForbiddenTags")?;
      }
      if let Some(f) = self.ZoneWhiteListTags() {
        s.serialize_field("ZoneWhiteListTags", &f)?;
      } else {
        s.skip_field("ZoneWhiteListTags")?;
      }
    s.end()
  }
}

pub struct CharacterAcademyTagsExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterAcademyTagsExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterAcademyTagsExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_FavorTags(&mut self, FavorTags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterAcademyTagsExcel::VT_FAVORTAGS, FavorTags);
  }
  #[inline]
  pub fn add_FavorItemTags(&mut self, FavorItemTags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterAcademyTagsExcel::VT_FAVORITEMTAGS, FavorItemTags);
  }
  #[inline]
  pub fn add_FavorItemUniqueTags(&mut self, FavorItemUniqueTags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterAcademyTagsExcel::VT_FAVORITEMUNIQUETAGS, FavorItemUniqueTags);
  }
  #[inline]
  pub fn add_ForbiddenTags(&mut self, ForbiddenTags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterAcademyTagsExcel::VT_FORBIDDENTAGS, ForbiddenTags);
  }
  #[inline]
  pub fn add_ZoneWhiteListTags(&mut self, ZoneWhiteListTags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterAcademyTagsExcel::VT_ZONEWHITELISTTAGS, ZoneWhiteListTags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterAcademyTagsExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterAcademyTagsExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterAcademyTagsExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterAcademyTagsExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterAcademyTagsExcel");
      ds.field("Id", &self.Id());
      ds.field("FavorTags", &self.FavorTags());
      ds.field("FavorItemTags", &self.FavorItemTags());
      ds.field("FavorItemUniqueTags", &self.FavorItemUniqueTags());
      ds.field("ForbiddenTags", &self.ForbiddenTags());
      ds.field("ZoneWhiteListTags", &self.ZoneWhiteListTags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterAcademyTagsExcelT {
  pub Id: i64,
  pub FavorTags: Option<Vec<Tag>>,
  pub FavorItemTags: Option<Vec<Tag>>,
  pub FavorItemUniqueTags: Option<Vec<Tag>>,
  pub ForbiddenTags: Option<Vec<Tag>>,
  pub ZoneWhiteListTags: Option<Vec<Tag>>,
}
impl Default for CharacterAcademyTagsExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      FavorTags: None,
      FavorItemTags: None,
      FavorItemUniqueTags: None,
      ForbiddenTags: None,
      ZoneWhiteListTags: None,
    }
  }
}
impl CharacterAcademyTagsExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterAcademyTagsExcel<'b>> {
    let Id = self.Id;
    let FavorTags = self.FavorTags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let FavorItemTags = self.FavorItemTags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let FavorItemUniqueTags = self.FavorItemUniqueTags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ForbiddenTags = self.ForbiddenTags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ZoneWhiteListTags = self.ZoneWhiteListTags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CharacterAcademyTagsExcel::create(_fbb, &CharacterAcademyTagsExcelArgs{
      Id,
      FavorTags,
      FavorItemTags,
      FavorItemUniqueTags,
      ForbiddenTags,
      ZoneWhiteListTags,
    })
  }
}
