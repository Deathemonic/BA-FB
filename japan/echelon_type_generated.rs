// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ECHELON_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ECHELON_TYPE: i32 = 25;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ECHELON_TYPE: [EchelonType; 26] = [
  EchelonType::None,
  EchelonType::Adventure,
  EchelonType::Raid,
  EchelonType::ArenaAttack,
  EchelonType::ArenaDefence,
  EchelonType::WeekDungeonChaserA,
  EchelonType::Scenario,
  EchelonType::WeekDungeonBlood,
  EchelonType::WeekDungeonChaserB,
  EchelonType::WeekDungeonChaserC,
  EchelonType::WeekDungeonFindGift,
  EchelonType::EventContent,
  EchelonType::SchoolDungeonA,
  EchelonType::SchoolDungeonB,
  EchelonType::SchoolDungeonC,
  EchelonType::TimeAttack,
  EchelonType::WorldRaid,
  EchelonType::Conquest,
  EchelonType::ConquestManage,
  EchelonType::StoryStrategyStage,
  EchelonType::EliminateRaid01,
  EchelonType::EliminateRaid02,
  EchelonType::EliminateRaid03,
  EchelonType::Field,
  EchelonType::MultiFloorRaid,
  EchelonType::MinigameDefense,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EchelonType(pub i32);
#[allow(non_upper_case_globals)]
impl EchelonType {
  pub const None: Self = Self(0);
  pub const Adventure: Self = Self(1);
  pub const Raid: Self = Self(2);
  pub const ArenaAttack: Self = Self(3);
  pub const ArenaDefence: Self = Self(4);
  pub const WeekDungeonChaserA: Self = Self(5);
  pub const Scenario: Self = Self(6);
  pub const WeekDungeonBlood: Self = Self(7);
  pub const WeekDungeonChaserB: Self = Self(8);
  pub const WeekDungeonChaserC: Self = Self(9);
  pub const WeekDungeonFindGift: Self = Self(10);
  pub const EventContent: Self = Self(11);
  pub const SchoolDungeonA: Self = Self(12);
  pub const SchoolDungeonB: Self = Self(13);
  pub const SchoolDungeonC: Self = Self(14);
  pub const TimeAttack: Self = Self(15);
  pub const WorldRaid: Self = Self(16);
  pub const Conquest: Self = Self(17);
  pub const ConquestManage: Self = Self(18);
  pub const StoryStrategyStage: Self = Self(19);
  pub const EliminateRaid01: Self = Self(20);
  pub const EliminateRaid02: Self = Self(21);
  pub const EliminateRaid03: Self = Self(22);
  pub const Field: Self = Self(23);
  pub const MultiFloorRaid: Self = Self(24);
  pub const MinigameDefense: Self = Self(25);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 25;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Adventure,
    Self::Raid,
    Self::ArenaAttack,
    Self::ArenaDefence,
    Self::WeekDungeonChaserA,
    Self::Scenario,
    Self::WeekDungeonBlood,
    Self::WeekDungeonChaserB,
    Self::WeekDungeonChaserC,
    Self::WeekDungeonFindGift,
    Self::EventContent,
    Self::SchoolDungeonA,
    Self::SchoolDungeonB,
    Self::SchoolDungeonC,
    Self::TimeAttack,
    Self::WorldRaid,
    Self::Conquest,
    Self::ConquestManage,
    Self::StoryStrategyStage,
    Self::EliminateRaid01,
    Self::EliminateRaid02,
    Self::EliminateRaid03,
    Self::Field,
    Self::MultiFloorRaid,
    Self::MinigameDefense,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Adventure => Some("Adventure"),
      Self::Raid => Some("Raid"),
      Self::ArenaAttack => Some("ArenaAttack"),
      Self::ArenaDefence => Some("ArenaDefence"),
      Self::WeekDungeonChaserA => Some("WeekDungeonChaserA"),
      Self::Scenario => Some("Scenario"),
      Self::WeekDungeonBlood => Some("WeekDungeonBlood"),
      Self::WeekDungeonChaserB => Some("WeekDungeonChaserB"),
      Self::WeekDungeonChaserC => Some("WeekDungeonChaserC"),
      Self::WeekDungeonFindGift => Some("WeekDungeonFindGift"),
      Self::EventContent => Some("EventContent"),
      Self::SchoolDungeonA => Some("SchoolDungeonA"),
      Self::SchoolDungeonB => Some("SchoolDungeonB"),
      Self::SchoolDungeonC => Some("SchoolDungeonC"),
      Self::TimeAttack => Some("TimeAttack"),
      Self::WorldRaid => Some("WorldRaid"),
      Self::Conquest => Some("Conquest"),
      Self::ConquestManage => Some("ConquestManage"),
      Self::StoryStrategyStage => Some("StoryStrategyStage"),
      Self::EliminateRaid01 => Some("EliminateRaid01"),
      Self::EliminateRaid02 => Some("EliminateRaid02"),
      Self::EliminateRaid03 => Some("EliminateRaid03"),
      Self::Field => Some("Field"),
      Self::MultiFloorRaid => Some("MultiFloorRaid"),
      Self::MinigameDefense => Some("MinigameDefense"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EchelonType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for EchelonType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("EchelonType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for EchelonType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EchelonType {
    type Output = EchelonType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EchelonType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EchelonType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EchelonType {}
