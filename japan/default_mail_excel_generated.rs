// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DefaultMailExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DefaultMailExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DefaultMailExcel<'a> {
  type Inner = DefaultMailExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DefaultMailExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZECODEID: flatbuffers::VOffsetT = 6;
  pub const VT_MAILTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_MAILSENDPERIODFROM: flatbuffers::VOffsetT = 10;
  pub const VT_MAILSENDPERIODTO: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DefaultMailExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DefaultMailExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<DefaultMailExcel<'bldr>> {
    let mut builder = DefaultMailExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"DefaultMail");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.rewardParcelAmount {
        builder.add_rewardParcelAmount(x);
      }
      if let Some(x) = args.rewardParcelId {
        builder.add_rewardParcelId(x);
      }
      if let Some(x) = args.rewardParcelType {
        builder.add_rewardParcelType(x);
      }
      if let Some(x) = args.MailSendPeriodTo {
        builder.add_MailSendPeriodTo(x);
      }
      if let Some(x) = args.MailSendPeriodFrom {
        builder.add_MailSendPeriodFrom(x);
      }
      let x = args.MailType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MailType(x);
      let x = args.LocalizeCodeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeCodeId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> DefaultMailExcelT {
    let key = table_encryption_service::create_key(b"DefaultMail");
      let Id = self.Id();
      let LocalizeCodeId = self.LocalizeCodeId();
      let MailType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MailType(), &key)
      } else {
        self.MailType()
      };
    let MailSendPeriodFrom = self.MailSendPeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MailSendPeriodTo = self.MailSendPeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let rewardParcelType = self.rewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let rewardParcelId = self.rewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let rewardParcelAmount = self.rewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    DefaultMailExcelT {
      Id,
      LocalizeCodeId,
      MailType,
      MailSendPeriodFrom,
      MailSendPeriodTo,
      rewardParcelType,
      rewardParcelId,
      rewardParcelAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DefaultMailExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCodeId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(DefaultMailExcel::VT_LOCALIZECODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MailType(&self) -> MailType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MailType>(DefaultMailExcel::VT_MAILTYPE, Some(MailType::System)).unwrap()}
  }
  #[inline]
  pub fn MailSendPeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DefaultMailExcel::VT_MAILSENDPERIODFROM, None)}
  }
  #[inline]
  pub fn MailSendPeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DefaultMailExcel::VT_MAILSENDPERIODTO, None)}
  }
  #[inline]
  pub fn rewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(DefaultMailExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn rewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(DefaultMailExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn rewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(DefaultMailExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for DefaultMailExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeCodeId", Self::VT_LOCALIZECODEID, false)?
     .visit_field::<MailType>("MailType", Self::VT_MAILTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MailSendPeriodFrom", Self::VT_MAILSENDPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MailSendPeriodTo", Self::VT_MAILSENDPERIODTO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("rewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("rewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("rewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct DefaultMailExcelArgs<'a> {
    pub Id: i64,
    pub LocalizeCodeId: u32,
    pub MailType: MailType,
    pub MailSendPeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MailSendPeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub rewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub rewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for DefaultMailExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    DefaultMailExcelArgs {
      Id: 0,
      LocalizeCodeId: 0,
      MailType: MailType::System,
      MailSendPeriodFrom: None,
      MailSendPeriodTo: None,
      rewardParcelType: None,
      rewardParcelId: None,
      rewardParcelAmount: None,
    }
  }
}

impl Serialize for DefaultMailExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("DefaultMailExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeCodeId", &self.LocalizeCodeId())?;
      s.serialize_field("MailType", &self.MailType())?;
      if let Some(f) = self.MailSendPeriodFrom() {
        s.serialize_field("MailSendPeriodFrom", &f)?;
      } else {
        s.skip_field("MailSendPeriodFrom")?;
      }
      if let Some(f) = self.MailSendPeriodTo() {
        s.serialize_field("MailSendPeriodTo", &f)?;
      } else {
        s.skip_field("MailSendPeriodTo")?;
      }
      if let Some(f) = self.rewardParcelType() {
        s.serialize_field("rewardParcelType", &f)?;
      } else {
        s.skip_field("rewardParcelType")?;
      }
      if let Some(f) = self.rewardParcelId() {
        s.serialize_field("rewardParcelId", &f)?;
      } else {
        s.skip_field("rewardParcelId")?;
      }
      if let Some(f) = self.rewardParcelAmount() {
        s.serialize_field("rewardParcelAmount", &f)?;
      } else {
        s.skip_field("rewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct DefaultMailExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DefaultMailExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(DefaultMailExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeCodeId(&mut self, LocalizeCodeId: u32) {
    self.fbb_.push_slot::<u32>(DefaultMailExcel::VT_LOCALIZECODEID, LocalizeCodeId, 0);
  }
  #[inline]
  pub fn add_MailType(&mut self, MailType: MailType) {
    self.fbb_.push_slot::<MailType>(DefaultMailExcel::VT_MAILTYPE, MailType, MailType::System);
  }
  #[inline]
  pub fn add_MailSendPeriodFrom(&mut self, MailSendPeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DefaultMailExcel::VT_MAILSENDPERIODFROM, MailSendPeriodFrom);
  }
  #[inline]
  pub fn add_MailSendPeriodTo(&mut self, MailSendPeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DefaultMailExcel::VT_MAILSENDPERIODTO, MailSendPeriodTo);
  }
  #[inline]
  pub fn add_rewardParcelType(&mut self, rewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DefaultMailExcel::VT_REWARDPARCELTYPE, rewardParcelType);
  }
  #[inline]
  pub fn add_rewardParcelId(&mut self, rewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DefaultMailExcel::VT_REWARDPARCELID, rewardParcelId);
  }
  #[inline]
  pub fn add_rewardParcelAmount(&mut self, rewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DefaultMailExcel::VT_REWARDPARCELAMOUNT, rewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DefaultMailExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DefaultMailExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DefaultMailExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DefaultMailExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DefaultMailExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeCodeId", &self.LocalizeCodeId());
      ds.field("MailType", &self.MailType());
      ds.field("MailSendPeriodFrom", &self.MailSendPeriodFrom());
      ds.field("MailSendPeriodTo", &self.MailSendPeriodTo());
      ds.field("rewardParcelType", &self.rewardParcelType());
      ds.field("rewardParcelId", &self.rewardParcelId());
      ds.field("rewardParcelAmount", &self.rewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DefaultMailExcelT {
  pub Id: i64,
  pub LocalizeCodeId: u32,
  pub MailType: MailType,
  pub MailSendPeriodFrom: Option<String>,
  pub MailSendPeriodTo: Option<String>,
  pub rewardParcelType: Option<Vec<ParcelType>>,
  pub rewardParcelId: Option<Vec<i64>>,
  pub rewardParcelAmount: Option<Vec<i64>>,
}
impl Default for DefaultMailExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeCodeId: 0,
      MailType: MailType::System,
      MailSendPeriodFrom: None,
      MailSendPeriodTo: None,
      rewardParcelType: None,
      rewardParcelId: None,
      rewardParcelAmount: None,
    }
  }
}
impl DefaultMailExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DefaultMailExcel<'b>> {
    let Id = self.Id;
    let LocalizeCodeId = self.LocalizeCodeId;
    let MailType = self.MailType;
    let MailSendPeriodFrom = self.MailSendPeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MailSendPeriodTo = self.MailSendPeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rewardParcelType = self.rewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardParcelId = self.rewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardParcelAmount = self.rewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    DefaultMailExcel::create(_fbb, &DefaultMailExcelArgs{
      Id,
      LocalizeCodeId,
      MailType,
      MailSendPeriodFrom,
      MailSendPeriodTo,
      rewardParcelType,
      rewardParcelId,
      rewardParcelAmount,
    })
  }
}
