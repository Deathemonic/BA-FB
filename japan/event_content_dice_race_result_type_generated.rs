// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EVENT_CONTENT_DICE_RACE_RESULT_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EVENT_CONTENT_DICE_RACE_RESULT_TYPE: i32 = 15;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EVENT_CONTENT_DICE_RACE_RESULT_TYPE: [EventContentDiceRaceResultType; 16] = [
  EventContentDiceRaceResultType::DiceResult1,
  EventContentDiceRaceResultType::DiceResult2,
  EventContentDiceRaceResultType::DiceResult3,
  EventContentDiceRaceResultType::DiceResult4,
  EventContentDiceRaceResultType::DiceResult5,
  EventContentDiceRaceResultType::DiceResult6,
  EventContentDiceRaceResultType::MoveForward,
  EventContentDiceRaceResultType::LapFinish,
  EventContentDiceRaceResultType::EventOccur,
  EventContentDiceRaceResultType::DiceResultFixed1,
  EventContentDiceRaceResultType::DiceResultFixed2,
  EventContentDiceRaceResultType::DiceResultFixed3,
  EventContentDiceRaceResultType::DiceResultFixed4,
  EventContentDiceRaceResultType::DiceResultFixed5,
  EventContentDiceRaceResultType::DiceResultFixed6,
  EventContentDiceRaceResultType::SpecialReward,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EventContentDiceRaceResultType(pub i32);
#[allow(non_upper_case_globals)]
impl EventContentDiceRaceResultType {
  pub const DiceResult1: Self = Self(0);
  pub const DiceResult2: Self = Self(1);
  pub const DiceResult3: Self = Self(2);
  pub const DiceResult4: Self = Self(3);
  pub const DiceResult5: Self = Self(4);
  pub const DiceResult6: Self = Self(5);
  pub const MoveForward: Self = Self(6);
  pub const LapFinish: Self = Self(7);
  pub const EventOccur: Self = Self(8);
  pub const DiceResultFixed1: Self = Self(9);
  pub const DiceResultFixed2: Self = Self(10);
  pub const DiceResultFixed3: Self = Self(11);
  pub const DiceResultFixed4: Self = Self(12);
  pub const DiceResultFixed5: Self = Self(13);
  pub const DiceResultFixed6: Self = Self(14);
  pub const SpecialReward: Self = Self(15);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 15;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::DiceResult1,
    Self::DiceResult2,
    Self::DiceResult3,
    Self::DiceResult4,
    Self::DiceResult5,
    Self::DiceResult6,
    Self::MoveForward,
    Self::LapFinish,
    Self::EventOccur,
    Self::DiceResultFixed1,
    Self::DiceResultFixed2,
    Self::DiceResultFixed3,
    Self::DiceResultFixed4,
    Self::DiceResultFixed5,
    Self::DiceResultFixed6,
    Self::SpecialReward,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::DiceResult1 => Some("DiceResult1"),
      Self::DiceResult2 => Some("DiceResult2"),
      Self::DiceResult3 => Some("DiceResult3"),
      Self::DiceResult4 => Some("DiceResult4"),
      Self::DiceResult5 => Some("DiceResult5"),
      Self::DiceResult6 => Some("DiceResult6"),
      Self::MoveForward => Some("MoveForward"),
      Self::LapFinish => Some("LapFinish"),
      Self::EventOccur => Some("EventOccur"),
      Self::DiceResultFixed1 => Some("DiceResultFixed1"),
      Self::DiceResultFixed2 => Some("DiceResultFixed2"),
      Self::DiceResultFixed3 => Some("DiceResultFixed3"),
      Self::DiceResultFixed4 => Some("DiceResultFixed4"),
      Self::DiceResultFixed5 => Some("DiceResultFixed5"),
      Self::DiceResultFixed6 => Some("DiceResultFixed6"),
      Self::SpecialReward => Some("SpecialReward"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EventContentDiceRaceResultType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for EventContentDiceRaceResultType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("EventContentDiceRaceResultType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for EventContentDiceRaceResultType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EventContentDiceRaceResultType {
    type Output = EventContentDiceRaceResultType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EventContentDiceRaceResultType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EventContentDiceRaceResultType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EventContentDiceRaceResultType {}
