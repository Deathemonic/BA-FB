// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TutorialExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TutorialExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TutorialExcel<'a> {
  type Inner = TutorialExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TutorialExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_COMPLETIONREPORTEVENTNAME: flatbuffers::VOffsetT = 6;
  pub const VT_COMPULSORYTUTORIAL: flatbuffers::VOffsetT = 8;
  pub const VT_DESCRIPTIONTUTORIAL: flatbuffers::VOffsetT = 10;
  pub const VT_TUTORIALSTAGEID: flatbuffers::VOffsetT = 12;
  pub const VT_UINAME: flatbuffers::VOffsetT = 14;
  pub const VT_TUTORIALPARENTNAME: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TutorialExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TutorialExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TutorialExcel<'bldr>> {
    let mut builder = TutorialExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Tutorial");
      let x = args.TutorialStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TutorialStageId(x);
      let x = args.ID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ID(x);
      if let Some(x) = args.TutorialParentName {
        builder.add_TutorialParentName(x);
      }
      if let Some(x) = args.UIName {
        builder.add_UIName(x);
      }
      if let Some(x) = args.CompletionReportEventName {
        builder.add_CompletionReportEventName(x);
      }
      builder.add_DescriptionTutorial(args.DescriptionTutorial);
      builder.add_CompulsoryTutorial(args.CompulsoryTutorial);
    builder.finish()
  }

  pub fn unpack(&self) -> TutorialExcelT {
    let key = table_encryption_service::create_key(b"Tutorial");
      let ID = self.ID();
    let CompletionReportEventName = self.CompletionReportEventName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CompulsoryTutorial = self.CompulsoryTutorial();
      let DescriptionTutorial = self.DescriptionTutorial();
      let TutorialStageId = self.TutorialStageId();
    let UIName = self.UIName().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let TutorialParentName = self.TutorialParentName().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    TutorialExcelT {
      ID,
      CompletionReportEventName,
      CompulsoryTutorial,
      DescriptionTutorial,
      TutorialStageId,
      UIName,
      TutorialParentName,
    }
  }

  #[inline]
  pub fn ID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TutorialExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CompletionReportEventName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialExcel::VT_COMPLETIONREPORTEVENTNAME, None)}
  }
  #[inline]
  pub fn CompulsoryTutorial(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TutorialExcel::VT_COMPULSORYTUTORIAL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn DescriptionTutorial(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TutorialExcel::VT_DESCRIPTIONTUTORIAL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn TutorialStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TutorialExcel::VT_TUTORIALSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UIName(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TutorialExcel::VT_UINAME, None)}
  }
  #[inline]
  pub fn TutorialParentName(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TutorialExcel::VT_TUTORIALPARENTNAME, None)}
  }
}

impl flatbuffers::Verifiable for TutorialExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ID", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CompletionReportEventName", Self::VT_COMPLETIONREPORTEVENTNAME, false)?
     .visit_field::<bool>("CompulsoryTutorial", Self::VT_COMPULSORYTUTORIAL, false)?
     .visit_field::<bool>("DescriptionTutorial", Self::VT_DESCRIPTIONTUTORIAL, false)?
     .visit_field::<i64>("TutorialStageId", Self::VT_TUTORIALSTAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("UIName", Self::VT_UINAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("TutorialParentName", Self::VT_TUTORIALPARENTNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct TutorialExcelArgs<'a> {
    pub ID: i64,
    pub CompletionReportEventName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CompulsoryTutorial: bool,
    pub DescriptionTutorial: bool,
    pub TutorialStageId: i64,
    pub UIName: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub TutorialParentName: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for TutorialExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TutorialExcelArgs {
      ID: 0,
      CompletionReportEventName: None,
      CompulsoryTutorial: false,
      DescriptionTutorial: false,
      TutorialStageId: 0,
      UIName: None,
      TutorialParentName: None,
    }
  }
}

impl Serialize for TutorialExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TutorialExcel", 7)?;
      s.serialize_field("ID", &self.ID())?;
      if let Some(f) = self.CompletionReportEventName() {
        s.serialize_field("CompletionReportEventName", &f)?;
      } else {
        s.skip_field("CompletionReportEventName")?;
      }
      s.serialize_field("CompulsoryTutorial", &self.CompulsoryTutorial())?;
      s.serialize_field("DescriptionTutorial", &self.DescriptionTutorial())?;
      s.serialize_field("TutorialStageId", &self.TutorialStageId())?;
      if let Some(f) = self.UIName() {
        s.serialize_field("UIName", &f)?;
      } else {
        s.skip_field("UIName")?;
      }
      if let Some(f) = self.TutorialParentName() {
        s.serialize_field("TutorialParentName", &f)?;
      } else {
        s.skip_field("TutorialParentName")?;
      }
    s.end()
  }
}

pub struct TutorialExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TutorialExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ID(&mut self, ID: i64) {
    self.fbb_.push_slot::<i64>(TutorialExcel::VT_ID, ID, 0);
  }
  #[inline]
  pub fn add_CompletionReportEventName(&mut self, CompletionReportEventName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialExcel::VT_COMPLETIONREPORTEVENTNAME, CompletionReportEventName);
  }
  #[inline]
  pub fn add_CompulsoryTutorial(&mut self, CompulsoryTutorial: bool) {
    self.fbb_.push_slot::<bool>(TutorialExcel::VT_COMPULSORYTUTORIAL, CompulsoryTutorial, false);
  }
  #[inline]
  pub fn add_DescriptionTutorial(&mut self, DescriptionTutorial: bool) {
    self.fbb_.push_slot::<bool>(TutorialExcel::VT_DESCRIPTIONTUTORIAL, DescriptionTutorial, false);
  }
  #[inline]
  pub fn add_TutorialStageId(&mut self, TutorialStageId: i64) {
    self.fbb_.push_slot::<i64>(TutorialExcel::VT_TUTORIALSTAGEID, TutorialStageId, 0);
  }
  #[inline]
  pub fn add_UIName(&mut self, UIName: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialExcel::VT_UINAME, UIName);
  }
  #[inline]
  pub fn add_TutorialParentName(&mut self, TutorialParentName: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialExcel::VT_TUTORIALPARENTNAME, TutorialParentName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TutorialExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TutorialExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TutorialExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TutorialExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TutorialExcel");
      ds.field("ID", &self.ID());
      ds.field("CompletionReportEventName", &self.CompletionReportEventName());
      ds.field("CompulsoryTutorial", &self.CompulsoryTutorial());
      ds.field("DescriptionTutorial", &self.DescriptionTutorial());
      ds.field("TutorialStageId", &self.TutorialStageId());
      ds.field("UIName", &self.UIName());
      ds.field("TutorialParentName", &self.TutorialParentName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TutorialExcelT {
  pub ID: i64,
  pub CompletionReportEventName: Option<String>,
  pub CompulsoryTutorial: bool,
  pub DescriptionTutorial: bool,
  pub TutorialStageId: i64,
  pub UIName: Option<Vec<String>>,
  pub TutorialParentName: Option<Vec<String>>,
}
impl Default for TutorialExcelT {
  fn default() -> Self {
    Self {
      ID: 0,
      CompletionReportEventName: None,
      CompulsoryTutorial: false,
      DescriptionTutorial: false,
      TutorialStageId: 0,
      UIName: None,
      TutorialParentName: None,
    }
  }
}
impl TutorialExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TutorialExcel<'b>> {
    let ID = self.ID;
    let CompletionReportEventName = self.CompletionReportEventName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CompulsoryTutorial = self.CompulsoryTutorial;
    let DescriptionTutorial = self.DescriptionTutorial;
    let TutorialStageId = self.TutorialStageId;
    let UIName = self.UIName.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let TutorialParentName = self.TutorialParentName.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    TutorialExcel::create(_fbb, &TutorialExcelArgs{
      ID,
      CompletionReportEventName,
      CompulsoryTutorial,
      DescriptionTutorial,
      TutorialStageId,
      UIName,
      TutorialParentName,
    })
  }
}
