// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BGMUIExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BGMUIExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BGMUIExcel<'a> {
  type Inner = BGMUIExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BGMUIExcel<'a> {
  pub const VT_UIPREFAB: flatbuffers::VOffsetT = 4;
  pub const VT_BGMID: flatbuffers::VOffsetT = 6;
  pub const VT_BGMID2ND: flatbuffers::VOffsetT = 8;
  pub const VT_BGMID3RD: flatbuffers::VOffsetT = 10;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BGMUIExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BGMUIExcelArgs
  ) -> flatbuffers::WIPOffset<BGMUIExcel<'bldr>> {
    let mut builder = BGMUIExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BGMUI");
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.BGMId3rd;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId3rd(x);
      let x = args.BGMId2nd;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId2nd(x);
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.UIPrefab;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_UIPrefab(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BGMUIExcelT {
    let key = table_encryption_service::create_key(b"BGMUI");
      let UIPrefab = self.UIPrefab();
      let BGMId = self.BGMId();
      let BGMId2nd = self.BGMId2nd();
      let BGMId3rd = self.BGMId3rd();
      let EventContentId = self.EventContentId();
    BGMUIExcelT {
      UIPrefab,
      BGMId,
      BGMId2nd,
      BGMId3rd,
      EventContentId,
    }
  }

  #[inline]
  pub fn UIPrefab(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(BGMUIExcel::VT_UIPREFAB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMUIExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMId2nd(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMUIExcel::VT_BGMID2ND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMId3rd(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMUIExcel::VT_BGMID3RD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMUIExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BGMUIExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("UIPrefab", Self::VT_UIPREFAB, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<i64>("BGMId2nd", Self::VT_BGMID2ND, false)?
     .visit_field::<i64>("BGMId3rd", Self::VT_BGMID3RD, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .finish();
    Ok(())
  }
}
pub struct BGMUIExcelArgs {
    pub UIPrefab: u32,
    pub BGMId: i64,
    pub BGMId2nd: i64,
    pub BGMId3rd: i64,
    pub EventContentId: i64,
}
impl<'a> Default for BGMUIExcelArgs {
  #[inline]
  fn default() -> Self {
    BGMUIExcelArgs {
      UIPrefab: 0,
      BGMId: 0,
      BGMId2nd: 0,
      BGMId3rd: 0,
      EventContentId: 0,
    }
  }
}

impl Serialize for BGMUIExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BGMUIExcel", 5)?;
      s.serialize_field("UIPrefab", &self.UIPrefab())?;
      s.serialize_field("BGMId", &self.BGMId())?;
      s.serialize_field("BGMId2nd", &self.BGMId2nd())?;
      s.serialize_field("BGMId3rd", &self.BGMId3rd())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
    s.end()
  }
}

pub struct BGMUIExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BGMUIExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UIPrefab(&mut self, UIPrefab: u32) {
    self.fbb_.push_slot::<u32>(BGMUIExcel::VT_UIPREFAB, UIPrefab, 0);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(BGMUIExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_BGMId2nd(&mut self, BGMId2nd: i64) {
    self.fbb_.push_slot::<i64>(BGMUIExcel::VT_BGMID2ND, BGMId2nd, 0);
  }
  #[inline]
  pub fn add_BGMId3rd(&mut self, BGMId3rd: i64) {
    self.fbb_.push_slot::<i64>(BGMUIExcel::VT_BGMID3RD, BGMId3rd, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(BGMUIExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BGMUIExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BGMUIExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BGMUIExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BGMUIExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BGMUIExcel");
      ds.field("UIPrefab", &self.UIPrefab());
      ds.field("BGMId", &self.BGMId());
      ds.field("BGMId2nd", &self.BGMId2nd());
      ds.field("BGMId3rd", &self.BGMId3rd());
      ds.field("EventContentId", &self.EventContentId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BGMUIExcelT {
  pub UIPrefab: u32,
  pub BGMId: i64,
  pub BGMId2nd: i64,
  pub BGMId3rd: i64,
  pub EventContentId: i64,
}
impl Default for BGMUIExcelT {
  fn default() -> Self {
    Self {
      UIPrefab: 0,
      BGMId: 0,
      BGMId2nd: 0,
      BGMId3rd: 0,
      EventContentId: 0,
    }
  }
}
impl BGMUIExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BGMUIExcel<'b>> {
    let UIPrefab = self.UIPrefab;
    let BGMId = self.BGMId;
    let BGMId2nd = self.BGMId2nd;
    let BGMId3rd = self.BGMId3rd;
    let EventContentId = self.EventContentId;
    BGMUIExcel::create(_fbb, &BGMUIExcelArgs{
      UIPrefab,
      BGMId,
      BGMId2nd,
      BGMId3rd,
      EventContentId,
    })
  }
}
