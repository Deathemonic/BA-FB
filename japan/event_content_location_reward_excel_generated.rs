// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentLocationRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentLocationRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentLocationRewardExcel<'a> {
  type Inner = EventContentLocationRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentLocationRewardExcel<'a> {
  pub const VT_LOCATION: flatbuffers::VOffsetT = 4;
  pub const VT_SCHEDULEGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_ORDERINGROUP: flatbuffers::VOffsetT = 8;
  pub const VT_ID: flatbuffers::VOffsetT = 10;
  pub const VT_PROGRESSTEXTURE: flatbuffers::VOffsetT = 12;
  pub const VT_VOICEID: flatbuffers::VOffsetT = 14;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 16;
  pub const VT_LOCATIONRANK: flatbuffers::VOffsetT = 18;
  pub const VT_FAVOREXP: flatbuffers::VOffsetT = 20;
  pub const VT_SECRETSTONEAMOUNT: flatbuffers::VOffsetT = 22;
  pub const VT_SECRETSTONEPROB: flatbuffers::VOffsetT = 24;
  pub const VT_EXTRAFAVOREXP: flatbuffers::VOffsetT = 26;
  pub const VT_EXTRAFAVOREXPPROB: flatbuffers::VOffsetT = 28;
  pub const VT_EXTRAREWARDPARCELTYPE: flatbuffers::VOffsetT = 30;
  pub const VT_EXTRAREWARDPARCELID: flatbuffers::VOffsetT = 32;
  pub const VT_EXTRAREWARDAMOUNT: flatbuffers::VOffsetT = 34;
  pub const VT_EXTRAREWARDPROB: flatbuffers::VOffsetT = 36;
  pub const VT_ISEXTRAREWARDDISPLAYED: flatbuffers::VOffsetT = 38;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 40;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 42;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentLocationRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentLocationRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentLocationRewardExcel<'bldr>> {
    let mut builder = EventContentLocationRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentLocationReward");
      let x = args.ExtraFavorExpProb;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExtraFavorExpProb(x);
      let x = args.ExtraFavorExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExtraFavorExp(x);
      let x = args.SecretStoneProb;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SecretStoneProb(x);
      let x = args.SecretStoneAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SecretStoneAmount(x);
      let x = args.FavorExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FavorExp(x);
      let x = args.LocationRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LocationRank(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.OrderInGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OrderInGroup(x);
      let x = args.ScheduleGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScheduleGroupId(x);
      if let Some(x) = args.RewardAmount {
        builder.add_RewardAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      if let Some(x) = args.IsExtraRewardDisplayed {
        builder.add_IsExtraRewardDisplayed(x);
      }
      if let Some(x) = args.ExtraRewardProb {
        builder.add_ExtraRewardProb(x);
      }
      if let Some(x) = args.ExtraRewardAmount {
        builder.add_ExtraRewardAmount(x);
      }
      if let Some(x) = args.ExtraRewardParcelId {
        builder.add_ExtraRewardParcelId(x);
      }
      if let Some(x) = args.ExtraRewardParcelType {
        builder.add_ExtraRewardParcelType(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      if let Some(x) = args.VoiceId {
        builder.add_VoiceId(x);
      }
      if let Some(x) = args.ProgressTexture {
        builder.add_ProgressTexture(x);
      }
      if let Some(x) = args.Location {
        builder.add_Location(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentLocationRewardExcelT {
    let key = table_encryption_service::create_key(b"EventContentLocationReward");
    let Location = self.Location().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ScheduleGroupId = self.ScheduleGroupId();
      let OrderInGroup = self.OrderInGroup();
      let Id = self.Id();
    let ProgressTexture = self.ProgressTexture().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VoiceId = self.VoiceId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
      let LocalizeEtcId = self.LocalizeEtcId();
      let LocationRank = self.LocationRank();
      let FavorExp = self.FavorExp();
      let SecretStoneAmount = self.SecretStoneAmount();
      let SecretStoneProb = self.SecretStoneProb();
      let ExtraFavorExp = self.ExtraFavorExp();
      let ExtraFavorExpProb = self.ExtraFavorExpProb();
    let ExtraRewardParcelType = self.ExtraRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ExtraRewardParcelId = self.ExtraRewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ExtraRewardAmount = self.ExtraRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ExtraRewardProb = self.ExtraRewardProb().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let IsExtraRewardDisplayed = self.IsExtraRewardDisplayed().map(|x| {
      x.into_iter().collect()
    });
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardAmount = self.RewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EventContentLocationRewardExcelT {
      Location,
      ScheduleGroupId,
      OrderInGroup,
      Id,
      ProgressTexture,
      VoiceId,
      LocalizeEtcId,
      LocationRank,
      FavorExp,
      SecretStoneAmount,
      SecretStoneProb,
      ExtraFavorExp,
      ExtraFavorExpProb,
      ExtraRewardParcelType,
      ExtraRewardParcelId,
      ExtraRewardAmount,
      ExtraRewardProb,
      IsExtraRewardDisplayed,
      RewardParcelType,
      RewardParcelId,
      RewardAmount,
    }
  }

  #[inline]
  pub fn Location(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentLocationRewardExcel::VT_LOCATION, None)}
  }
  #[inline]
  pub fn ScheduleGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_SCHEDULEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OrderInGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_ORDERINGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProgressTexture(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentLocationRewardExcel::VT_PROGRESSTEXTURE, None)}
  }
  #[inline]
  pub fn VoiceId(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(EventContentLocationRewardExcel::VT_VOICEID, None)}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentLocationRewardExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocationRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_LOCATIONRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_FAVOREXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SecretStoneAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_SECRETSTONEAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SecretStoneProb(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_SECRETSTONEPROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraFavorExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_EXTRAFAVOREXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraFavorExpProb(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLocationRewardExcel::VT_EXTRAFAVOREXPPROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentLocationRewardExcel::VT_EXTRAREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn ExtraRewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentLocationRewardExcel::VT_EXTRAREWARDPARCELID, None)}
  }
  #[inline]
  pub fn ExtraRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentLocationRewardExcel::VT_EXTRAREWARDAMOUNT, None)}
  }
  #[inline]
  pub fn ExtraRewardProb(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentLocationRewardExcel::VT_EXTRAREWARDPROB, None)}
  }
  #[inline]
  pub fn IsExtraRewardDisplayed(&self) -> Option<flatbuffers::Vector<'a, bool>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, bool>>>(EventContentLocationRewardExcel::VT_ISEXTRAREWARDDISPLAYED, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentLocationRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentLocationRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentLocationRewardExcel::VT_REWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EventContentLocationRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Location", Self::VT_LOCATION, false)?
     .visit_field::<i64>("ScheduleGroupId", Self::VT_SCHEDULEGROUPID, false)?
     .visit_field::<i64>("OrderInGroup", Self::VT_ORDERINGROUP, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProgressTexture", Self::VT_PROGRESSTEXTURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("VoiceId", Self::VT_VOICEID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<i64>("LocationRank", Self::VT_LOCATIONRANK, false)?
     .visit_field::<i64>("FavorExp", Self::VT_FAVOREXP, false)?
     .visit_field::<i64>("SecretStoneAmount", Self::VT_SECRETSTONEAMOUNT, false)?
     .visit_field::<i64>("SecretStoneProb", Self::VT_SECRETSTONEPROB, false)?
     .visit_field::<i64>("ExtraFavorExp", Self::VT_EXTRAFAVOREXP, false)?
     .visit_field::<i64>("ExtraFavorExpProb", Self::VT_EXTRAFAVOREXPPROB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("ExtraRewardParcelType", Self::VT_EXTRAREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ExtraRewardParcelId", Self::VT_EXTRAREWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ExtraRewardAmount", Self::VT_EXTRAREWARDAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ExtraRewardProb", Self::VT_EXTRAREWARDPROB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, bool>>>("IsExtraRewardDisplayed", Self::VT_ISEXTRAREWARDDISPLAYED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardAmount", Self::VT_REWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentLocationRewardExcelArgs<'a> {
    pub Location: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ScheduleGroupId: i64,
    pub OrderInGroup: i64,
    pub Id: i64,
    pub ProgressTexture: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub LocalizeEtcId: u32,
    pub LocationRank: i64,
    pub FavorExp: i64,
    pub SecretStoneAmount: i64,
    pub SecretStoneProb: i64,
    pub ExtraFavorExp: i64,
    pub ExtraFavorExpProb: i64,
    pub ExtraRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub ExtraRewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ExtraRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ExtraRewardProb: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub IsExtraRewardDisplayed: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, bool>>>,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EventContentLocationRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentLocationRewardExcelArgs {
      Location: None,
      ScheduleGroupId: 0,
      OrderInGroup: 0,
      Id: 0,
      ProgressTexture: None,
      VoiceId: None,
      LocalizeEtcId: 0,
      LocationRank: 0,
      FavorExp: 0,
      SecretStoneAmount: 0,
      SecretStoneProb: 0,
      ExtraFavorExp: 0,
      ExtraFavorExpProb: 0,
      ExtraRewardParcelType: None,
      ExtraRewardParcelId: None,
      ExtraRewardAmount: None,
      ExtraRewardProb: None,
      IsExtraRewardDisplayed: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardAmount: None,
    }
  }
}

impl Serialize for EventContentLocationRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentLocationRewardExcel", 21)?;
      if let Some(f) = self.Location() {
        s.serialize_field("Location", &f)?;
      } else {
        s.skip_field("Location")?;
      }
      s.serialize_field("ScheduleGroupId", &self.ScheduleGroupId())?;
      s.serialize_field("OrderInGroup", &self.OrderInGroup())?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.ProgressTexture() {
        s.serialize_field("ProgressTexture", &f)?;
      } else {
        s.skip_field("ProgressTexture")?;
      }
      if let Some(f) = self.VoiceId() {
        s.serialize_field("VoiceId", &f)?;
      } else {
        s.skip_field("VoiceId")?;
      }
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("LocationRank", &self.LocationRank())?;
      s.serialize_field("FavorExp", &self.FavorExp())?;
      s.serialize_field("SecretStoneAmount", &self.SecretStoneAmount())?;
      s.serialize_field("SecretStoneProb", &self.SecretStoneProb())?;
      s.serialize_field("ExtraFavorExp", &self.ExtraFavorExp())?;
      s.serialize_field("ExtraFavorExpProb", &self.ExtraFavorExpProb())?;
      if let Some(f) = self.ExtraRewardParcelType() {
        s.serialize_field("ExtraRewardParcelType", &f)?;
      } else {
        s.skip_field("ExtraRewardParcelType")?;
      }
      if let Some(f) = self.ExtraRewardParcelId() {
        s.serialize_field("ExtraRewardParcelId", &f)?;
      } else {
        s.skip_field("ExtraRewardParcelId")?;
      }
      if let Some(f) = self.ExtraRewardAmount() {
        s.serialize_field("ExtraRewardAmount", &f)?;
      } else {
        s.skip_field("ExtraRewardAmount")?;
      }
      if let Some(f) = self.ExtraRewardProb() {
        s.serialize_field("ExtraRewardProb", &f)?;
      } else {
        s.skip_field("ExtraRewardProb")?;
      }
      if let Some(f) = self.IsExtraRewardDisplayed() {
        s.serialize_field("IsExtraRewardDisplayed", &f)?;
      } else {
        s.skip_field("IsExtraRewardDisplayed")?;
      }
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardAmount() {
        s.serialize_field("RewardAmount", &f)?;
      } else {
        s.skip_field("RewardAmount")?;
      }
    s.end()
  }
}

pub struct EventContentLocationRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentLocationRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Location(&mut self, Location: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_LOCATION, Location);
  }
  #[inline]
  pub fn add_ScheduleGroupId(&mut self, ScheduleGroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_SCHEDULEGROUPID, ScheduleGroupId, 0);
  }
  #[inline]
  pub fn add_OrderInGroup(&mut self, OrderInGroup: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_ORDERINGROUP, OrderInGroup, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ProgressTexture(&mut self, ProgressTexture: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_PROGRESSTEXTURE, ProgressTexture);
  }
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_VOICEID, VoiceId);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(EventContentLocationRewardExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_LocationRank(&mut self, LocationRank: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_LOCATIONRANK, LocationRank, 0);
  }
  #[inline]
  pub fn add_FavorExp(&mut self, FavorExp: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_FAVOREXP, FavorExp, 0);
  }
  #[inline]
  pub fn add_SecretStoneAmount(&mut self, SecretStoneAmount: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_SECRETSTONEAMOUNT, SecretStoneAmount, 0);
  }
  #[inline]
  pub fn add_SecretStoneProb(&mut self, SecretStoneProb: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_SECRETSTONEPROB, SecretStoneProb, 0);
  }
  #[inline]
  pub fn add_ExtraFavorExp(&mut self, ExtraFavorExp: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_EXTRAFAVOREXP, ExtraFavorExp, 0);
  }
  #[inline]
  pub fn add_ExtraFavorExpProb(&mut self, ExtraFavorExpProb: i64) {
    self.fbb_.push_slot::<i64>(EventContentLocationRewardExcel::VT_EXTRAFAVOREXPPROB, ExtraFavorExpProb, 0);
  }
  #[inline]
  pub fn add_ExtraRewardParcelType(&mut self, ExtraRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_EXTRAREWARDPARCELTYPE, ExtraRewardParcelType);
  }
  #[inline]
  pub fn add_ExtraRewardParcelId(&mut self, ExtraRewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_EXTRAREWARDPARCELID, ExtraRewardParcelId);
  }
  #[inline]
  pub fn add_ExtraRewardAmount(&mut self, ExtraRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_EXTRAREWARDAMOUNT, ExtraRewardAmount);
  }
  #[inline]
  pub fn add_ExtraRewardProb(&mut self, ExtraRewardProb: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_EXTRAREWARDPROB, ExtraRewardProb);
  }
  #[inline]
  pub fn add_IsExtraRewardDisplayed(&mut self, IsExtraRewardDisplayed: flatbuffers::WIPOffset<flatbuffers::Vector<'b , bool>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_ISEXTRAREWARDDISPLAYED, IsExtraRewardDisplayed);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardAmount(&mut self, RewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLocationRewardExcel::VT_REWARDAMOUNT, RewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentLocationRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentLocationRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentLocationRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentLocationRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentLocationRewardExcel");
      ds.field("Location", &self.Location());
      ds.field("ScheduleGroupId", &self.ScheduleGroupId());
      ds.field("OrderInGroup", &self.OrderInGroup());
      ds.field("Id", &self.Id());
      ds.field("ProgressTexture", &self.ProgressTexture());
      ds.field("VoiceId", &self.VoiceId());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("LocationRank", &self.LocationRank());
      ds.field("FavorExp", &self.FavorExp());
      ds.field("SecretStoneAmount", &self.SecretStoneAmount());
      ds.field("SecretStoneProb", &self.SecretStoneProb());
      ds.field("ExtraFavorExp", &self.ExtraFavorExp());
      ds.field("ExtraFavorExpProb", &self.ExtraFavorExpProb());
      ds.field("ExtraRewardParcelType", &self.ExtraRewardParcelType());
      ds.field("ExtraRewardParcelId", &self.ExtraRewardParcelId());
      ds.field("ExtraRewardAmount", &self.ExtraRewardAmount());
      ds.field("ExtraRewardProb", &self.ExtraRewardProb());
      ds.field("IsExtraRewardDisplayed", &self.IsExtraRewardDisplayed());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardAmount", &self.RewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentLocationRewardExcelT {
  pub Location: Option<String>,
  pub ScheduleGroupId: i64,
  pub OrderInGroup: i64,
  pub Id: i64,
  pub ProgressTexture: Option<String>,
  pub VoiceId: Option<Vec<u32>>,
  pub LocalizeEtcId: u32,
  pub LocationRank: i64,
  pub FavorExp: i64,
  pub SecretStoneAmount: i64,
  pub SecretStoneProb: i64,
  pub ExtraFavorExp: i64,
  pub ExtraFavorExpProb: i64,
  pub ExtraRewardParcelType: Option<Vec<ParcelType>>,
  pub ExtraRewardParcelId: Option<Vec<i64>>,
  pub ExtraRewardAmount: Option<Vec<i64>>,
  pub ExtraRewardProb: Option<Vec<i64>>,
  pub IsExtraRewardDisplayed: Option<Vec<bool>>,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardAmount: Option<Vec<i64>>,
}
impl Default for EventContentLocationRewardExcelT {
  fn default() -> Self {
    Self {
      Location: None,
      ScheduleGroupId: 0,
      OrderInGroup: 0,
      Id: 0,
      ProgressTexture: None,
      VoiceId: None,
      LocalizeEtcId: 0,
      LocationRank: 0,
      FavorExp: 0,
      SecretStoneAmount: 0,
      SecretStoneProb: 0,
      ExtraFavorExp: 0,
      ExtraFavorExpProb: 0,
      ExtraRewardParcelType: None,
      ExtraRewardParcelId: None,
      ExtraRewardAmount: None,
      ExtraRewardProb: None,
      IsExtraRewardDisplayed: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardAmount: None,
    }
  }
}
impl EventContentLocationRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentLocationRewardExcel<'b>> {
    let Location = self.Location.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ScheduleGroupId = self.ScheduleGroupId;
    let OrderInGroup = self.OrderInGroup;
    let Id = self.Id;
    let ProgressTexture = self.ProgressTexture.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceId = self.VoiceId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LocalizeEtcId = self.LocalizeEtcId;
    let LocationRank = self.LocationRank;
    let FavorExp = self.FavorExp;
    let SecretStoneAmount = self.SecretStoneAmount;
    let SecretStoneProb = self.SecretStoneProb;
    let ExtraFavorExp = self.ExtraFavorExp;
    let ExtraFavorExpProb = self.ExtraFavorExpProb;
    let ExtraRewardParcelType = self.ExtraRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ExtraRewardParcelId = self.ExtraRewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ExtraRewardAmount = self.ExtraRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ExtraRewardProb = self.ExtraRewardProb.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IsExtraRewardDisplayed = self.IsExtraRewardDisplayed.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardAmount = self.RewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentLocationRewardExcel::create(_fbb, &EventContentLocationRewardExcelArgs{
      Location,
      ScheduleGroupId,
      OrderInGroup,
      Id,
      ProgressTexture,
      VoiceId,
      LocalizeEtcId,
      LocationRank,
      FavorExp,
      SecretStoneAmount,
      SecretStoneProb,
      ExtraFavorExp,
      ExtraFavorExpProb,
      ExtraRewardParcelType,
      ExtraRewardParcelId,
      ExtraRewardAmount,
      ExtraRewardProb,
      IsExtraRewardDisplayed,
      RewardParcelType,
      RewardParcelId,
      RewardAmount,
    })
  }
}
