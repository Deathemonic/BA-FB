// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentNotifyExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentNotifyExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentNotifyExcel<'a> {
  type Inner = EventContentNotifyExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentNotifyExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 6;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 8;
  pub const VT_EVENTNOTIFYTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_EVENTTARGETTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_SHORTCUTEVENTTARGETTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_ISSHORTCUTENABLE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentNotifyExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentNotifyExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentNotifyExcel<'bldr>> {
    let mut builder = EventContentNotifyExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentNotify");
      let x = args.ShortcutEventTargetType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ShortcutEventTargetType(x);
      let x = args.EventTargetType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventTargetType(x);
      let x = args.EventNotifyType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventNotifyType(x);
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Id(x);
      builder.add_IsShortcutEnable(args.IsShortcutEnable);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentNotifyExcelT {
    let key = table_encryption_service::create_key(b"EventContentNotify");
      let Id = self.Id();
      let LocalizeEtcId = self.LocalizeEtcId();
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventNotifyType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventNotifyType(), &key)
      } else {
        self.EventNotifyType()
      };
      let EventTargetType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventTargetType(), &key)
      } else {
        self.EventTargetType()
      };
      let ShortcutEventTargetType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ShortcutEventTargetType(), &key)
      } else {
        self.ShortcutEventTargetType()
      };
      let IsShortcutEnable = self.IsShortcutEnable();
    EventContentNotifyExcelT {
      Id,
      LocalizeEtcId,
      IconPath,
      EventNotifyType,
      EventTargetType,
      ShortcutEventTargetType,
      IsShortcutEnable,
    }
  }

  #[inline]
  pub fn Id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentNotifyExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentNotifyExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentNotifyExcel::VT_ICONPATH, None)}
  }
  #[inline]
  pub fn EventNotifyType(&self) -> EventNotifyType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventNotifyType>(EventContentNotifyExcel::VT_EVENTNOTIFYTYPE, Some(EventNotifyType::RewardIncreaseEvent)).unwrap()}
  }
  #[inline]
  pub fn EventTargetType(&self) -> EventTargetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventTargetType>(EventContentNotifyExcel::VT_EVENTTARGETTYPE, Some(EventTargetType::WeekDungeon)).unwrap()}
  }
  #[inline]
  pub fn ShortcutEventTargetType(&self) -> EventTargetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventTargetType>(EventContentNotifyExcel::VT_SHORTCUTEVENTTARGETTYPE, Some(EventTargetType::WeekDungeon)).unwrap()}
  }
  #[inline]
  pub fn IsShortcutEnable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentNotifyExcel::VT_ISSHORTCUTENABLE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentNotifyExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .visit_field::<EventNotifyType>("EventNotifyType", Self::VT_EVENTNOTIFYTYPE, false)?
     .visit_field::<EventTargetType>("EventTargetType", Self::VT_EVENTTARGETTYPE, false)?
     .visit_field::<EventTargetType>("ShortcutEventTargetType", Self::VT_SHORTCUTEVENTTARGETTYPE, false)?
     .visit_field::<bool>("IsShortcutEnable", Self::VT_ISSHORTCUTENABLE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentNotifyExcelArgs<'a> {
    pub Id: i32,
    pub LocalizeEtcId: u32,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventNotifyType: EventNotifyType,
    pub EventTargetType: EventTargetType,
    pub ShortcutEventTargetType: EventTargetType,
    pub IsShortcutEnable: bool,
}
impl<'a> Default for EventContentNotifyExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentNotifyExcelArgs {
      Id: 0,
      LocalizeEtcId: 0,
      IconPath: None,
      EventNotifyType: EventNotifyType::RewardIncreaseEvent,
      EventTargetType: EventTargetType::WeekDungeon,
      ShortcutEventTargetType: EventTargetType::WeekDungeon,
      IsShortcutEnable: false,
    }
  }
}

impl Serialize for EventContentNotifyExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentNotifyExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
      s.serialize_field("EventNotifyType", &self.EventNotifyType())?;
      s.serialize_field("EventTargetType", &self.EventTargetType())?;
      s.serialize_field("ShortcutEventTargetType", &self.ShortcutEventTargetType())?;
      s.serialize_field("IsShortcutEnable", &self.IsShortcutEnable())?;
    s.end()
  }
}

pub struct EventContentNotifyExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentNotifyExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i32) {
    self.fbb_.push_slot::<i32>(EventContentNotifyExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(EventContentNotifyExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentNotifyExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn add_EventNotifyType(&mut self, EventNotifyType: EventNotifyType) {
    self.fbb_.push_slot::<EventNotifyType>(EventContentNotifyExcel::VT_EVENTNOTIFYTYPE, EventNotifyType, EventNotifyType::RewardIncreaseEvent);
  }
  #[inline]
  pub fn add_EventTargetType(&mut self, EventTargetType: EventTargetType) {
    self.fbb_.push_slot::<EventTargetType>(EventContentNotifyExcel::VT_EVENTTARGETTYPE, EventTargetType, EventTargetType::WeekDungeon);
  }
  #[inline]
  pub fn add_ShortcutEventTargetType(&mut self, ShortcutEventTargetType: EventTargetType) {
    self.fbb_.push_slot::<EventTargetType>(EventContentNotifyExcel::VT_SHORTCUTEVENTTARGETTYPE, ShortcutEventTargetType, EventTargetType::WeekDungeon);
  }
  #[inline]
  pub fn add_IsShortcutEnable(&mut self, IsShortcutEnable: bool) {
    self.fbb_.push_slot::<bool>(EventContentNotifyExcel::VT_ISSHORTCUTENABLE, IsShortcutEnable, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentNotifyExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentNotifyExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentNotifyExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentNotifyExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentNotifyExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("IconPath", &self.IconPath());
      ds.field("EventNotifyType", &self.EventNotifyType());
      ds.field("EventTargetType", &self.EventTargetType());
      ds.field("ShortcutEventTargetType", &self.ShortcutEventTargetType());
      ds.field("IsShortcutEnable", &self.IsShortcutEnable());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentNotifyExcelT {
  pub Id: i32,
  pub LocalizeEtcId: u32,
  pub IconPath: Option<String>,
  pub EventNotifyType: EventNotifyType,
  pub EventTargetType: EventTargetType,
  pub ShortcutEventTargetType: EventTargetType,
  pub IsShortcutEnable: bool,
}
impl Default for EventContentNotifyExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeEtcId: 0,
      IconPath: None,
      EventNotifyType: EventNotifyType::RewardIncreaseEvent,
      EventTargetType: EventTargetType::WeekDungeon,
      ShortcutEventTargetType: EventTargetType::WeekDungeon,
      IsShortcutEnable: false,
    }
  }
}
impl EventContentNotifyExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentNotifyExcel<'b>> {
    let Id = self.Id;
    let LocalizeEtcId = self.LocalizeEtcId;
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventNotifyType = self.EventNotifyType;
    let EventTargetType = self.EventTargetType;
    let ShortcutEventTargetType = self.ShortcutEventTargetType;
    let IsShortcutEnable = self.IsShortcutEnable;
    EventContentNotifyExcel::create(_fbb, &EventContentNotifyExcelArgs{
      Id,
      LocalizeEtcId,
      IconPath,
      EventNotifyType,
      EventTargetType,
      ShortcutEventTargetType,
      IsShortcutEnable,
    })
  }
}
