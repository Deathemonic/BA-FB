// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum IdCardBackgroundExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct IdCardBackgroundExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IdCardBackgroundExcel<'a> {
  type Inner = IdCardBackgroundExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IdCardBackgroundExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_RARITY: flatbuffers::VOffsetT = 6;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_COLLECTIONVISIBLE: flatbuffers::VOffsetT = 10;
  pub const VT_ISDEFAULT: flatbuffers::VOffsetT = 12;
  pub const VT_BGPATH: flatbuffers::VOffsetT = 14;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 16;
  pub const VT_ICON: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IdCardBackgroundExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IdCardBackgroundExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<IdCardBackgroundExcel<'bldr>> {
    let mut builder = IdCardBackgroundExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"IdCardBackground");
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      if let Some(x) = args.BgPath {
        builder.add_BgPath(x);
      }
      let x = args.Rarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Rarity(x);
      builder.add_IsDefault(args.IsDefault);
      builder.add_CollectionVisible(args.CollectionVisible);
    builder.finish()
  }

  pub fn unpack(&self) -> IdCardBackgroundExcelT {
    let key = table_encryption_service::create_key(b"IdCardBackground");
      let Id = self.Id();
      let Rarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Rarity(), &key)
      } else {
        self.Rarity()
      };
      let DisplayOrder = self.DisplayOrder();
      let CollectionVisible = self.CollectionVisible();
      let IsDefault = self.IsDefault();
    let BgPath = self.BgPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeEtcId = self.LocalizeEtcId();
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    IdCardBackgroundExcelT {
      Id,
      Rarity,
      DisplayOrder,
      CollectionVisible,
      IsDefault,
      BgPath,
      LocalizeEtcId,
      Icon,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(IdCardBackgroundExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(IdCardBackgroundExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(IdCardBackgroundExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CollectionVisible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(IdCardBackgroundExcel::VT_COLLECTIONVISIBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsDefault(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(IdCardBackgroundExcel::VT_ISDEFAULT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn BgPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IdCardBackgroundExcel::VT_BGPATH, None)}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(IdCardBackgroundExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IdCardBackgroundExcel::VT_ICON, None)}
  }
}

impl flatbuffers::Verifiable for IdCardBackgroundExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<Rarity>("Rarity", Self::VT_RARITY, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<bool>("CollectionVisible", Self::VT_COLLECTIONVISIBLE, false)?
     .visit_field::<bool>("IsDefault", Self::VT_ISDEFAULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgPath", Self::VT_BGPATH, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .finish();
    Ok(())
  }
}
pub struct IdCardBackgroundExcelArgs<'a> {
    pub Id: i64,
    pub Rarity: Rarity,
    pub DisplayOrder: i64,
    pub CollectionVisible: bool,
    pub IsDefault: bool,
    pub BgPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeEtcId: u32,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for IdCardBackgroundExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    IdCardBackgroundExcelArgs {
      Id: 0,
      Rarity: Rarity::N,
      DisplayOrder: 0,
      CollectionVisible: false,
      IsDefault: false,
      BgPath: None,
      LocalizeEtcId: 0,
      Icon: None,
    }
  }
}

impl Serialize for IdCardBackgroundExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("IdCardBackgroundExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Rarity", &self.Rarity())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("CollectionVisible", &self.CollectionVisible())?;
      s.serialize_field("IsDefault", &self.IsDefault())?;
      if let Some(f) = self.BgPath() {
        s.serialize_field("BgPath", &f)?;
      } else {
        s.skip_field("BgPath")?;
      }
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
    s.end()
  }
}

pub struct IdCardBackgroundExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IdCardBackgroundExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(IdCardBackgroundExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Rarity(&mut self, Rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(IdCardBackgroundExcel::VT_RARITY, Rarity, Rarity::N);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(IdCardBackgroundExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_CollectionVisible(&mut self, CollectionVisible: bool) {
    self.fbb_.push_slot::<bool>(IdCardBackgroundExcel::VT_COLLECTIONVISIBLE, CollectionVisible, false);
  }
  #[inline]
  pub fn add_IsDefault(&mut self, IsDefault: bool) {
    self.fbb_.push_slot::<bool>(IdCardBackgroundExcel::VT_ISDEFAULT, IsDefault, false);
  }
  #[inline]
  pub fn add_BgPath(&mut self, BgPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IdCardBackgroundExcel::VT_BGPATH, BgPath);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(IdCardBackgroundExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IdCardBackgroundExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IdCardBackgroundExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IdCardBackgroundExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IdCardBackgroundExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IdCardBackgroundExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IdCardBackgroundExcel");
      ds.field("Id", &self.Id());
      ds.field("Rarity", &self.Rarity());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("CollectionVisible", &self.CollectionVisible());
      ds.field("IsDefault", &self.IsDefault());
      ds.field("BgPath", &self.BgPath());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("Icon", &self.Icon());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IdCardBackgroundExcelT {
  pub Id: i64,
  pub Rarity: Rarity,
  pub DisplayOrder: i64,
  pub CollectionVisible: bool,
  pub IsDefault: bool,
  pub BgPath: Option<String>,
  pub LocalizeEtcId: u32,
  pub Icon: Option<String>,
}
impl Default for IdCardBackgroundExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Rarity: Rarity::N,
      DisplayOrder: 0,
      CollectionVisible: false,
      IsDefault: false,
      BgPath: None,
      LocalizeEtcId: 0,
      Icon: None,
    }
  }
}
impl IdCardBackgroundExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IdCardBackgroundExcel<'b>> {
    let Id = self.Id;
    let Rarity = self.Rarity;
    let DisplayOrder = self.DisplayOrder;
    let CollectionVisible = self.CollectionVisible;
    let IsDefault = self.IsDefault;
    let BgPath = self.BgPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeEtcId = self.LocalizeEtcId;
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    IdCardBackgroundExcel::create(_fbb, &IdCardBackgroundExcelArgs{
      Id,
      Rarity,
      DisplayOrder,
      CollectionVisible,
      IsDefault,
      BgPath,
      LocalizeEtcId,
      Icon,
    })
  }
}
