// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RaidRankingRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidRankingRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidRankingRewardExcel<'a> {
  type Inner = RaidRankingRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RaidRankingRewardExcel<'a> {
  pub const VT_RANKINGREWARDGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_RANKSTART: flatbuffers::VOffsetT = 8;
  pub const VT_RANKEND: flatbuffers::VOffsetT = 10;
  pub const VT_PERCENTRANKSTART: flatbuffers::VOffsetT = 12;
  pub const VT_PERCENTRANKEND: flatbuffers::VOffsetT = 14;
  pub const VT_TIER: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_REWARDPARCELUNIQUEID: flatbuffers::VOffsetT = 20;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RaidRankingRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RaidRankingRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<RaidRankingRewardExcel<'bldr>> {
    let mut builder = RaidRankingRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"RaidRankingReward");
      let x = args.PercentRankEnd;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PercentRankEnd(x);
      let x = args.PercentRankStart;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PercentRankStart(x);
      let x = args.RankEnd;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankEnd(x);
      let x = args.RankStart;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankStart(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RankingRewardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankingRewardGroupId(x);
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelUniqueId {
        builder.add_RewardParcelUniqueId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      let x = args.Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Tier(x);
    builder.finish()
  }

  pub fn unpack(&self) -> RaidRankingRewardExcelT {
    let key = table_encryption_service::create_key(b"RaidRankingReward");
      let RankingRewardGroupId = self.RankingRewardGroupId();
      let Id = self.Id();
      let RankStart = self.RankStart();
      let RankEnd = self.RankEnd();
      let PercentRankStart = self.PercentRankStart();
      let PercentRankEnd = self.PercentRankEnd();
      let Tier = self.Tier();
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelUniqueId = self.RewardParcelUniqueId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    RaidRankingRewardExcelT {
      RankingRewardGroupId,
      Id,
      RankStart,
      RankEnd,
      PercentRankStart,
      PercentRankEnd,
      Tier,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn RankingRewardGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidRankingRewardExcel::VT_RANKINGREWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidRankingRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankStart(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidRankingRewardExcel::VT_RANKSTART, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankEnd(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidRankingRewardExcel::VT_RANKEND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PercentRankStart(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidRankingRewardExcel::VT_PERCENTRANKSTART, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PercentRankEnd(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidRankingRewardExcel::VT_PERCENTRANKEND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RaidRankingRewardExcel::VT_TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(RaidRankingRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelUniqueId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RaidRankingRewardExcel::VT_REWARDPARCELUNIQUEID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RaidRankingRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for RaidRankingRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("RankingRewardGroupId", Self::VT_RANKINGREWARDGROUPID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("RankStart", Self::VT_RANKSTART, false)?
     .visit_field::<i64>("RankEnd", Self::VT_RANKEND, false)?
     .visit_field::<i64>("PercentRankStart", Self::VT_PERCENTRANKSTART, false)?
     .visit_field::<i64>("PercentRankEnd", Self::VT_PERCENTRANKEND, false)?
     .visit_field::<i32>("Tier", Self::VT_TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelUniqueId", Self::VT_REWARDPARCELUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct RaidRankingRewardExcelArgs<'a> {
    pub RankingRewardGroupId: i64,
    pub Id: i64,
    pub RankStart: i64,
    pub RankEnd: i64,
    pub PercentRankStart: i64,
    pub PercentRankEnd: i64,
    pub Tier: i32,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelUniqueId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for RaidRankingRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    RaidRankingRewardExcelArgs {
      RankingRewardGroupId: 0,
      Id: 0,
      RankStart: 0,
      RankEnd: 0,
      PercentRankStart: 0,
      PercentRankEnd: 0,
      Tier: 0,
      RewardParcelType: None,
      RewardParcelUniqueId: None,
      RewardParcelAmount: None,
    }
  }
}

impl Serialize for RaidRankingRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RaidRankingRewardExcel", 10)?;
      s.serialize_field("RankingRewardGroupId", &self.RankingRewardGroupId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("RankStart", &self.RankStart())?;
      s.serialize_field("RankEnd", &self.RankEnd())?;
      s.serialize_field("PercentRankStart", &self.PercentRankStart())?;
      s.serialize_field("PercentRankEnd", &self.PercentRankEnd())?;
      s.serialize_field("Tier", &self.Tier())?;
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelUniqueId() {
        s.serialize_field("RewardParcelUniqueId", &f)?;
      } else {
        s.skip_field("RewardParcelUniqueId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct RaidRankingRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RaidRankingRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_RankingRewardGroupId(&mut self, RankingRewardGroupId: i64) {
    self.fbb_.push_slot::<i64>(RaidRankingRewardExcel::VT_RANKINGREWARDGROUPID, RankingRewardGroupId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(RaidRankingRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_RankStart(&mut self, RankStart: i64) {
    self.fbb_.push_slot::<i64>(RaidRankingRewardExcel::VT_RANKSTART, RankStart, 0);
  }
  #[inline]
  pub fn add_RankEnd(&mut self, RankEnd: i64) {
    self.fbb_.push_slot::<i64>(RaidRankingRewardExcel::VT_RANKEND, RankEnd, 0);
  }
  #[inline]
  pub fn add_PercentRankStart(&mut self, PercentRankStart: i64) {
    self.fbb_.push_slot::<i64>(RaidRankingRewardExcel::VT_PERCENTRANKSTART, PercentRankStart, 0);
  }
  #[inline]
  pub fn add_PercentRankEnd(&mut self, PercentRankEnd: i64) {
    self.fbb_.push_slot::<i64>(RaidRankingRewardExcel::VT_PERCENTRANKEND, PercentRankEnd, 0);
  }
  #[inline]
  pub fn add_Tier(&mut self, Tier: i32) {
    self.fbb_.push_slot::<i32>(RaidRankingRewardExcel::VT_TIER, Tier, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidRankingRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelUniqueId(&mut self, RewardParcelUniqueId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidRankingRewardExcel::VT_REWARDPARCELUNIQUEID, RewardParcelUniqueId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidRankingRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RaidRankingRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RaidRankingRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RaidRankingRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RaidRankingRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RaidRankingRewardExcel");
      ds.field("RankingRewardGroupId", &self.RankingRewardGroupId());
      ds.field("Id", &self.Id());
      ds.field("RankStart", &self.RankStart());
      ds.field("RankEnd", &self.RankEnd());
      ds.field("PercentRankStart", &self.PercentRankStart());
      ds.field("PercentRankEnd", &self.PercentRankEnd());
      ds.field("Tier", &self.Tier());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelUniqueId", &self.RewardParcelUniqueId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RaidRankingRewardExcelT {
  pub RankingRewardGroupId: i64,
  pub Id: i64,
  pub RankStart: i64,
  pub RankEnd: i64,
  pub PercentRankStart: i64,
  pub PercentRankEnd: i64,
  pub Tier: i32,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelUniqueId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
}
impl Default for RaidRankingRewardExcelT {
  fn default() -> Self {
    Self {
      RankingRewardGroupId: 0,
      Id: 0,
      RankStart: 0,
      RankEnd: 0,
      PercentRankStart: 0,
      PercentRankEnd: 0,
      Tier: 0,
      RewardParcelType: None,
      RewardParcelUniqueId: None,
      RewardParcelAmount: None,
    }
  }
}
impl RaidRankingRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RaidRankingRewardExcel<'b>> {
    let RankingRewardGroupId = self.RankingRewardGroupId;
    let Id = self.Id;
    let RankStart = self.RankStart;
    let RankEnd = self.RankEnd;
    let PercentRankStart = self.PercentRankStart;
    let PercentRankEnd = self.PercentRankEnd;
    let Tier = self.Tier;
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelUniqueId = self.RewardParcelUniqueId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    RaidRankingRewardExcel::create(_fbb, &RaidRankingRewardExcelArgs{
      RankingRewardGroupId,
      Id,
      RankStart,
      RankEnd,
      PercentRankStart,
      PercentRankEnd,
      Tier,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelAmount,
    })
  }
}
