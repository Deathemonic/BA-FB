// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SystemMailExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SystemMailExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SystemMailExcel<'a> {
  type Inner = SystemMailExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SystemMailExcel<'a> {
  pub const VT_MAILTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_EXPIREDDAY: flatbuffers::VOffsetT = 6;
  pub const VT_SENDER: flatbuffers::VOffsetT = 8;
  pub const VT_COMMENT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SystemMailExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SystemMailExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<SystemMailExcel<'bldr>> {
    let mut builder = SystemMailExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"SystemMail");
      let x = args.ExpiredDay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExpiredDay(x);
      if let Some(x) = args.Comment {
        builder.add_Comment(x);
      }
      if let Some(x) = args.Sender {
        builder.add_Sender(x);
      }
      let x = args.MailType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MailType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> SystemMailExcelT {
    let key = table_encryption_service::create_key(b"SystemMail");
      let MailType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MailType(), &key)
      } else {
        self.MailType()
      };
      let ExpiredDay = self.ExpiredDay();
    let Sender = self.Sender().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Comment = self.Comment().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    SystemMailExcelT {
      MailType,
      ExpiredDay,
      Sender,
      Comment,
    }
  }

  #[inline]
  pub fn MailType(&self) -> MailType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MailType>(SystemMailExcel::VT_MAILTYPE, Some(MailType::System)).unwrap()}
  }
  #[inline]
  pub fn ExpiredDay(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SystemMailExcel::VT_EXPIREDDAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Sender(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SystemMailExcel::VT_SENDER, None)}
  }
  #[inline]
  pub fn Comment(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SystemMailExcel::VT_COMMENT, None)}
  }
}

impl flatbuffers::Verifiable for SystemMailExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<MailType>("MailType", Self::VT_MAILTYPE, false)?
     .visit_field::<i64>("ExpiredDay", Self::VT_EXPIREDDAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Sender", Self::VT_SENDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Comment", Self::VT_COMMENT, false)?
     .finish();
    Ok(())
  }
}
pub struct SystemMailExcelArgs<'a> {
    pub MailType: MailType,
    pub ExpiredDay: i64,
    pub Sender: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Comment: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SystemMailExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SystemMailExcelArgs {
      MailType: MailType::System,
      ExpiredDay: 0,
      Sender: None,
      Comment: None,
    }
  }
}

impl Serialize for SystemMailExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SystemMailExcel", 4)?;
      s.serialize_field("MailType", &self.MailType())?;
      s.serialize_field("ExpiredDay", &self.ExpiredDay())?;
      if let Some(f) = self.Sender() {
        s.serialize_field("Sender", &f)?;
      } else {
        s.skip_field("Sender")?;
      }
      if let Some(f) = self.Comment() {
        s.serialize_field("Comment", &f)?;
      } else {
        s.skip_field("Comment")?;
      }
    s.end()
  }
}

pub struct SystemMailExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SystemMailExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_MailType(&mut self, MailType: MailType) {
    self.fbb_.push_slot::<MailType>(SystemMailExcel::VT_MAILTYPE, MailType, MailType::System);
  }
  #[inline]
  pub fn add_ExpiredDay(&mut self, ExpiredDay: i64) {
    self.fbb_.push_slot::<i64>(SystemMailExcel::VT_EXPIREDDAY, ExpiredDay, 0);
  }
  #[inline]
  pub fn add_Sender(&mut self, Sender: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SystemMailExcel::VT_SENDER, Sender);
  }
  #[inline]
  pub fn add_Comment(&mut self, Comment: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SystemMailExcel::VT_COMMENT, Comment);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SystemMailExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SystemMailExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SystemMailExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SystemMailExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SystemMailExcel");
      ds.field("MailType", &self.MailType());
      ds.field("ExpiredDay", &self.ExpiredDay());
      ds.field("Sender", &self.Sender());
      ds.field("Comment", &self.Comment());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SystemMailExcelT {
  pub MailType: MailType,
  pub ExpiredDay: i64,
  pub Sender: Option<String>,
  pub Comment: Option<String>,
}
impl Default for SystemMailExcelT {
  fn default() -> Self {
    Self {
      MailType: MailType::System,
      ExpiredDay: 0,
      Sender: None,
      Comment: None,
    }
  }
}
impl SystemMailExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SystemMailExcel<'b>> {
    let MailType = self.MailType;
    let ExpiredDay = self.ExpiredDay;
    let Sender = self.Sender.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Comment = self.Comment.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SystemMailExcel::create(_fbb, &SystemMailExcelArgs{
      MailType,
      ExpiredDay,
      Sender,
      Comment,
    })
  }
}
