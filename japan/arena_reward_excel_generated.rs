// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ArenaRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ArenaRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArenaRewardExcel<'a> {
  type Inner = ArenaRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArenaRewardExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_ARENAREWARDTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_RANKSTART: flatbuffers::VOffsetT = 8;
  pub const VT_RANKEND: flatbuffers::VOffsetT = 10;
  pub const VT_RANKICONPATH: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARCELUNIQUEID: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArenaRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArenaRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ArenaRewardExcel<'bldr>> {
    let mut builder = ArenaRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ArenaReward");
      let x = args.RankEnd;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankEnd(x);
      let x = args.RankStart;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankStart(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelUniqueId {
        builder.add_RewardParcelUniqueId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      if let Some(x) = args.RankIconPath {
        builder.add_RankIconPath(x);
      }
      let x = args.ArenaRewardType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ArenaRewardType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ArenaRewardExcelT {
    let key = table_encryption_service::create_key(b"ArenaReward");
      let UniqueId = self.UniqueId();
      let ArenaRewardType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ArenaRewardType(), &key)
      } else {
        self.ArenaRewardType()
      };
      let RankStart = self.RankStart();
      let RankEnd = self.RankEnd();
    let RankIconPath = self.RankIconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelUniqueId = self.RewardParcelUniqueId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ArenaRewardExcelT {
      UniqueId,
      ArenaRewardType,
      RankStart,
      RankEnd,
      RankIconPath,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaRewardExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ArenaRewardType(&self) -> ArenaRewardType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ArenaRewardType>(ArenaRewardExcel::VT_ARENAREWARDTYPE, Some(ArenaRewardType::None)).unwrap()}
  }
  #[inline]
  pub fn RankStart(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaRewardExcel::VT_RANKSTART, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankEnd(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaRewardExcel::VT_RANKEND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankIconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArenaRewardExcel::VT_RANKICONPATH, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(ArenaRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelUniqueId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ArenaRewardExcel::VT_REWARDPARCELUNIQUEID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ArenaRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for ArenaRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<ArenaRewardType>("ArenaRewardType", Self::VT_ARENAREWARDTYPE, false)?
     .visit_field::<i64>("RankStart", Self::VT_RANKSTART, false)?
     .visit_field::<i64>("RankEnd", Self::VT_RANKEND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RankIconPath", Self::VT_RANKICONPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelUniqueId", Self::VT_REWARDPARCELUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ArenaRewardExcelArgs<'a> {
    pub UniqueId: i64,
    pub ArenaRewardType: ArenaRewardType,
    pub RankStart: i64,
    pub RankEnd: i64,
    pub RankIconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelUniqueId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ArenaRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArenaRewardExcelArgs {
      UniqueId: 0,
      ArenaRewardType: ArenaRewardType::None,
      RankStart: 0,
      RankEnd: 0,
      RankIconPath: None,
      RewardParcelType: None,
      RewardParcelUniqueId: None,
      RewardParcelAmount: None,
    }
  }
}

impl Serialize for ArenaRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ArenaRewardExcel", 8)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("ArenaRewardType", &self.ArenaRewardType())?;
      s.serialize_field("RankStart", &self.RankStart())?;
      s.serialize_field("RankEnd", &self.RankEnd())?;
      if let Some(f) = self.RankIconPath() {
        s.serialize_field("RankIconPath", &f)?;
      } else {
        s.skip_field("RankIconPath")?;
      }
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelUniqueId() {
        s.serialize_field("RewardParcelUniqueId", &f)?;
      } else {
        s.skip_field("RewardParcelUniqueId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct ArenaRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArenaRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(ArenaRewardExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_ArenaRewardType(&mut self, ArenaRewardType: ArenaRewardType) {
    self.fbb_.push_slot::<ArenaRewardType>(ArenaRewardExcel::VT_ARENAREWARDTYPE, ArenaRewardType, ArenaRewardType::None);
  }
  #[inline]
  pub fn add_RankStart(&mut self, RankStart: i64) {
    self.fbb_.push_slot::<i64>(ArenaRewardExcel::VT_RANKSTART, RankStart, 0);
  }
  #[inline]
  pub fn add_RankEnd(&mut self, RankEnd: i64) {
    self.fbb_.push_slot::<i64>(ArenaRewardExcel::VT_RANKEND, RankEnd, 0);
  }
  #[inline]
  pub fn add_RankIconPath(&mut self, RankIconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaRewardExcel::VT_RANKICONPATH, RankIconPath);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelUniqueId(&mut self, RewardParcelUniqueId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaRewardExcel::VT_REWARDPARCELUNIQUEID, RewardParcelUniqueId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArenaRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArenaRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArenaRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArenaRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArenaRewardExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("ArenaRewardType", &self.ArenaRewardType());
      ds.field("RankStart", &self.RankStart());
      ds.field("RankEnd", &self.RankEnd());
      ds.field("RankIconPath", &self.RankIconPath());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelUniqueId", &self.RewardParcelUniqueId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ArenaRewardExcelT {
  pub UniqueId: i64,
  pub ArenaRewardType: ArenaRewardType,
  pub RankStart: i64,
  pub RankEnd: i64,
  pub RankIconPath: Option<String>,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelUniqueId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
}
impl Default for ArenaRewardExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      ArenaRewardType: ArenaRewardType::None,
      RankStart: 0,
      RankEnd: 0,
      RankIconPath: None,
      RewardParcelType: None,
      RewardParcelUniqueId: None,
      RewardParcelAmount: None,
    }
  }
}
impl ArenaRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ArenaRewardExcel<'b>> {
    let UniqueId = self.UniqueId;
    let ArenaRewardType = self.ArenaRewardType;
    let RankStart = self.RankStart;
    let RankEnd = self.RankEnd;
    let RankIconPath = self.RankIconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelUniqueId = self.RewardParcelUniqueId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ArenaRewardExcel::create(_fbb, &ArenaRewardExcelArgs{
      UniqueId,
      ArenaRewardType,
      RankStart,
      RankEnd,
      RankIconPath,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelAmount,
    })
  }
}
