// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GachaCombinedCostExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GachaCombinedCostExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GachaCombinedCostExcel<'a> {
  type Inner = GachaCombinedCostExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GachaCombinedCostExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 6;
  pub const VT_CONSUMEGACHATICKETTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_CONSUMEGACHATICKETTYPEAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_CONSUMEPARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_CONSUMEPARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_CONSUMEPARCELAMOUNT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GachaCombinedCostExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GachaCombinedCostExcelArgs
  ) -> flatbuffers::WIPOffset<GachaCombinedCostExcel<'bldr>> {
    let mut builder = GachaCombinedCostExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GachaCombinedCost");
      let x = args.ConsumeParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConsumeParcelAmount(x);
      let x = args.ConsumeParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConsumeParcelId(x);
      let x = args.ConsumeGachaTicketTypeAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConsumeGachaTicketTypeAmount(x);
      let x = args.Priority;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Priority(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.ConsumeParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConsumeParcelType(x);
      let x = args.ConsumeGachaTicketType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConsumeGachaTicketType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> GachaCombinedCostExcelT {
    let key = table_encryption_service::create_key(b"GachaCombinedCost");
      let GroupId = self.GroupId();
      let Priority = self.Priority();
      let ConsumeGachaTicketType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConsumeGachaTicketType(), &key)
      } else {
        self.ConsumeGachaTicketType()
      };
      let ConsumeGachaTicketTypeAmount = self.ConsumeGachaTicketTypeAmount();
      let ConsumeParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConsumeParcelType(), &key)
      } else {
        self.ConsumeParcelType()
      };
      let ConsumeParcelId = self.ConsumeParcelId();
      let ConsumeParcelAmount = self.ConsumeParcelAmount();
    GachaCombinedCostExcelT {
      GroupId,
      Priority,
      ConsumeGachaTicketType,
      ConsumeGachaTicketTypeAmount,
      ConsumeParcelType,
      ConsumeParcelId,
      ConsumeParcelAmount,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCombinedCostExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Priority(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCombinedCostExcel::VT_PRIORITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConsumeGachaTicketType(&self) -> GachaTicketType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GachaTicketType>(GachaCombinedCostExcel::VT_CONSUMEGACHATICKETTYPE, Some(GachaTicketType::None)).unwrap()}
  }
  #[inline]
  pub fn ConsumeGachaTicketTypeAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCombinedCostExcel::VT_CONSUMEGACHATICKETTYPEAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConsumeParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(GachaCombinedCostExcel::VT_CONSUMEPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ConsumeParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCombinedCostExcel::VT_CONSUMEPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConsumeParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCombinedCostExcel::VT_CONSUMEPARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GachaCombinedCostExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i64>("Priority", Self::VT_PRIORITY, false)?
     .visit_field::<GachaTicketType>("ConsumeGachaTicketType", Self::VT_CONSUMEGACHATICKETTYPE, false)?
     .visit_field::<i64>("ConsumeGachaTicketTypeAmount", Self::VT_CONSUMEGACHATICKETTYPEAMOUNT, false)?
     .visit_field::<ParcelType>("ConsumeParcelType", Self::VT_CONSUMEPARCELTYPE, false)?
     .visit_field::<i64>("ConsumeParcelId", Self::VT_CONSUMEPARCELID, false)?
     .visit_field::<i64>("ConsumeParcelAmount", Self::VT_CONSUMEPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct GachaCombinedCostExcelArgs {
    pub GroupId: i64,
    pub Priority: i64,
    pub ConsumeGachaTicketType: GachaTicketType,
    pub ConsumeGachaTicketTypeAmount: i64,
    pub ConsumeParcelType: ParcelType,
    pub ConsumeParcelId: i64,
    pub ConsumeParcelAmount: i64,
}
impl<'a> Default for GachaCombinedCostExcelArgs {
  #[inline]
  fn default() -> Self {
    GachaCombinedCostExcelArgs {
      GroupId: 0,
      Priority: 0,
      ConsumeGachaTicketType: GachaTicketType::None,
      ConsumeGachaTicketTypeAmount: 0,
      ConsumeParcelType: ParcelType::None,
      ConsumeParcelId: 0,
      ConsumeParcelAmount: 0,
    }
  }
}

impl Serialize for GachaCombinedCostExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GachaCombinedCostExcel", 7)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("Priority", &self.Priority())?;
      s.serialize_field("ConsumeGachaTicketType", &self.ConsumeGachaTicketType())?;
      s.serialize_field("ConsumeGachaTicketTypeAmount", &self.ConsumeGachaTicketTypeAmount())?;
      s.serialize_field("ConsumeParcelType", &self.ConsumeParcelType())?;
      s.serialize_field("ConsumeParcelId", &self.ConsumeParcelId())?;
      s.serialize_field("ConsumeParcelAmount", &self.ConsumeParcelAmount())?;
    s.end()
  }
}

pub struct GachaCombinedCostExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GachaCombinedCostExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(GachaCombinedCostExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_Priority(&mut self, Priority: i64) {
    self.fbb_.push_slot::<i64>(GachaCombinedCostExcel::VT_PRIORITY, Priority, 0);
  }
  #[inline]
  pub fn add_ConsumeGachaTicketType(&mut self, ConsumeGachaTicketType: GachaTicketType) {
    self.fbb_.push_slot::<GachaTicketType>(GachaCombinedCostExcel::VT_CONSUMEGACHATICKETTYPE, ConsumeGachaTicketType, GachaTicketType::None);
  }
  #[inline]
  pub fn add_ConsumeGachaTicketTypeAmount(&mut self, ConsumeGachaTicketTypeAmount: i64) {
    self.fbb_.push_slot::<i64>(GachaCombinedCostExcel::VT_CONSUMEGACHATICKETTYPEAMOUNT, ConsumeGachaTicketTypeAmount, 0);
  }
  #[inline]
  pub fn add_ConsumeParcelType(&mut self, ConsumeParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(GachaCombinedCostExcel::VT_CONSUMEPARCELTYPE, ConsumeParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ConsumeParcelId(&mut self, ConsumeParcelId: i64) {
    self.fbb_.push_slot::<i64>(GachaCombinedCostExcel::VT_CONSUMEPARCELID, ConsumeParcelId, 0);
  }
  #[inline]
  pub fn add_ConsumeParcelAmount(&mut self, ConsumeParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(GachaCombinedCostExcel::VT_CONSUMEPARCELAMOUNT, ConsumeParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GachaCombinedCostExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GachaCombinedCostExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GachaCombinedCostExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GachaCombinedCostExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GachaCombinedCostExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("Priority", &self.Priority());
      ds.field("ConsumeGachaTicketType", &self.ConsumeGachaTicketType());
      ds.field("ConsumeGachaTicketTypeAmount", &self.ConsumeGachaTicketTypeAmount());
      ds.field("ConsumeParcelType", &self.ConsumeParcelType());
      ds.field("ConsumeParcelId", &self.ConsumeParcelId());
      ds.field("ConsumeParcelAmount", &self.ConsumeParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GachaCombinedCostExcelT {
  pub GroupId: i64,
  pub Priority: i64,
  pub ConsumeGachaTicketType: GachaTicketType,
  pub ConsumeGachaTicketTypeAmount: i64,
  pub ConsumeParcelType: ParcelType,
  pub ConsumeParcelId: i64,
  pub ConsumeParcelAmount: i64,
}
impl Default for GachaCombinedCostExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      Priority: 0,
      ConsumeGachaTicketType: GachaTicketType::None,
      ConsumeGachaTicketTypeAmount: 0,
      ConsumeParcelType: ParcelType::None,
      ConsumeParcelId: 0,
      ConsumeParcelAmount: 0,
    }
  }
}
impl GachaCombinedCostExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GachaCombinedCostExcel<'b>> {
    let GroupId = self.GroupId;
    let Priority = self.Priority;
    let ConsumeGachaTicketType = self.ConsumeGachaTicketType;
    let ConsumeGachaTicketTypeAmount = self.ConsumeGachaTicketTypeAmount;
    let ConsumeParcelType = self.ConsumeParcelType;
    let ConsumeParcelId = self.ConsumeParcelId;
    let ConsumeParcelAmount = self.ConsumeParcelAmount;
    GachaCombinedCostExcel::create(_fbb, &GachaCombinedCostExcelArgs{
      GroupId,
      Priority,
      ConsumeGachaTicketType,
      ConsumeGachaTicketTypeAmount,
      ConsumeParcelType,
      ConsumeParcelId,
      ConsumeParcelAmount,
    })
  }
}
