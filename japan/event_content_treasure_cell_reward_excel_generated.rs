// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentTreasureCellRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentTreasureCellRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentTreasureCellRewardExcel<'a> {
  type Inner = EventContentTreasureCellRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentTreasureCellRewardExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZECODEID: flatbuffers::VOffsetT = 6;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentTreasureCellRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentTreasureCellRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentTreasureCellRewardExcel<'bldr>> {
    let mut builder = EventContentTreasureCellRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentTreasureCellReward");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      if let Some(x) = args.LocalizeCodeID {
        builder.add_LocalizeCodeID(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentTreasureCellRewardExcelT {
    let key = table_encryption_service::create_key(b"EventContentTreasureCellReward");
      let Id = self.Id();
    let LocalizeCodeID = self.LocalizeCodeID().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EventContentTreasureCellRewardExcelT {
      Id,
      LocalizeCodeID,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentTreasureCellRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCodeID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentTreasureCellRewardExcel::VT_LOCALIZECODEID, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentTreasureCellRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentTreasureCellRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentTreasureCellRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EventContentTreasureCellRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeCodeID", Self::VT_LOCALIZECODEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentTreasureCellRewardExcelArgs<'a> {
    pub Id: i64,
    pub LocalizeCodeID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EventContentTreasureCellRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentTreasureCellRewardExcelArgs {
      Id: 0,
      LocalizeCodeID: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}

impl Serialize for EventContentTreasureCellRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentTreasureCellRewardExcel", 5)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.LocalizeCodeID() {
        s.serialize_field("LocalizeCodeID", &f)?;
      } else {
        s.skip_field("LocalizeCodeID")?;
      }
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct EventContentTreasureCellRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentTreasureCellRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentTreasureCellRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeCodeID(&mut self, LocalizeCodeID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureCellRewardExcel::VT_LOCALIZECODEID, LocalizeCodeID);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureCellRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureCellRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureCellRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentTreasureCellRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentTreasureCellRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentTreasureCellRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentTreasureCellRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentTreasureCellRewardExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeCodeID", &self.LocalizeCodeID());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentTreasureCellRewardExcelT {
  pub Id: i64,
  pub LocalizeCodeID: Option<String>,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
}
impl Default for EventContentTreasureCellRewardExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeCodeID: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}
impl EventContentTreasureCellRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentTreasureCellRewardExcel<'b>> {
    let Id = self.Id;
    let LocalizeCodeID = self.LocalizeCodeID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentTreasureCellRewardExcel::create(_fbb, &EventContentTreasureCellRewardExcelArgs{
      Id,
      LocalizeCodeID,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    })
  }
}
