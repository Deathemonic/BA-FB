// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ToastExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ToastExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ToastExcel<'a> {
  type Inner = ToastExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ToastExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TOASTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_MISSIONID: flatbuffers::VOffsetT = 8;
  pub const VT_TEXTID: flatbuffers::VOffsetT = 10;
  pub const VT_LIFETIME: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ToastExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ToastExcelArgs
  ) -> flatbuffers::WIPOffset<ToastExcel<'bldr>> {
    let mut builder = ToastExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Toast");
      let x = args.LifeTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LifeTime(x);
      let x = args.TextId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_TextId(x);
      let x = args.MissionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_MissionId(x);
      let x = args.ToastType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ToastType(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Id(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ToastExcelT {
    let key = table_encryption_service::create_key(b"Toast");
      let Id = self.Id();
      let ToastType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ToastType(), &key)
      } else {
        self.ToastType()
      };
      let MissionId = self.MissionId();
      let TextId = self.TextId();
      let LifeTime = self.LifeTime();
    ToastExcelT {
      Id,
      ToastType,
      MissionId,
      TextId,
      LifeTime,
    }
  }

  #[inline]
  pub fn Id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ToastExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ToastType(&self) -> ToastType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ToastType>(ToastExcel::VT_TOASTTYPE, Some(ToastType::None)).unwrap()}
  }
  #[inline]
  pub fn MissionId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ToastExcel::VT_MISSIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TextId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ToastExcel::VT_TEXTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LifeTime(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ToastExcel::VT_LIFETIME, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ToastExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Id", Self::VT_ID, false)?
     .visit_field::<ToastType>("ToastType", Self::VT_TOASTTYPE, false)?
     .visit_field::<u32>("MissionId", Self::VT_MISSIONID, false)?
     .visit_field::<u32>("TextId", Self::VT_TEXTID, false)?
     .visit_field::<i64>("LifeTime", Self::VT_LIFETIME, false)?
     .finish();
    Ok(())
  }
}
pub struct ToastExcelArgs {
    pub Id: u32,
    pub ToastType: ToastType,
    pub MissionId: u32,
    pub TextId: u32,
    pub LifeTime: i64,
}
impl<'a> Default for ToastExcelArgs {
  #[inline]
  fn default() -> Self {
    ToastExcelArgs {
      Id: 0,
      ToastType: ToastType::None,
      MissionId: 0,
      TextId: 0,
      LifeTime: 0,
    }
  }
}

impl Serialize for ToastExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ToastExcel", 5)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ToastType", &self.ToastType())?;
      s.serialize_field("MissionId", &self.MissionId())?;
      s.serialize_field("TextId", &self.TextId())?;
      s.serialize_field("LifeTime", &self.LifeTime())?;
    s.end()
  }
}

pub struct ToastExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ToastExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: u32) {
    self.fbb_.push_slot::<u32>(ToastExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ToastType(&mut self, ToastType: ToastType) {
    self.fbb_.push_slot::<ToastType>(ToastExcel::VT_TOASTTYPE, ToastType, ToastType::None);
  }
  #[inline]
  pub fn add_MissionId(&mut self, MissionId: u32) {
    self.fbb_.push_slot::<u32>(ToastExcel::VT_MISSIONID, MissionId, 0);
  }
  #[inline]
  pub fn add_TextId(&mut self, TextId: u32) {
    self.fbb_.push_slot::<u32>(ToastExcel::VT_TEXTID, TextId, 0);
  }
  #[inline]
  pub fn add_LifeTime(&mut self, LifeTime: i64) {
    self.fbb_.push_slot::<i64>(ToastExcel::VT_LIFETIME, LifeTime, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ToastExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ToastExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ToastExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ToastExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ToastExcel");
      ds.field("Id", &self.Id());
      ds.field("ToastType", &self.ToastType());
      ds.field("MissionId", &self.MissionId());
      ds.field("TextId", &self.TextId());
      ds.field("LifeTime", &self.LifeTime());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ToastExcelT {
  pub Id: u32,
  pub ToastType: ToastType,
  pub MissionId: u32,
  pub TextId: u32,
  pub LifeTime: i64,
}
impl Default for ToastExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ToastType: ToastType::None,
      MissionId: 0,
      TextId: 0,
      LifeTime: 0,
    }
  }
}
impl ToastExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ToastExcel<'b>> {
    let Id = self.Id;
    let ToastType = self.ToastType;
    let MissionId = self.MissionId;
    let TextId = self.TextId;
    let LifeTime = self.LifeTime;
    ToastExcel::create(_fbb, &ToastExcelArgs{
      Id,
      ToastType,
      MissionId,
      TextId,
      LifeTime,
    })
  }
}
