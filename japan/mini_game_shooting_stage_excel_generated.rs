// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameShootingStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameShootingStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameShootingStageExcel<'a> {
  type Inner = MiniGameShootingStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameShootingStageExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_BGMID: flatbuffers::VOffsetT = 6;
  pub const VT_COSTGOODSID: flatbuffers::VOffsetT = 8;
  pub const VT_DIFFICULTY: flatbuffers::VOffsetT = 10;
  pub const VT_DESIGNLEVEL: flatbuffers::VOffsetT = 12;
  pub const VT_ARTLEVEL: flatbuffers::VOffsetT = 14;
  pub const VT_STARTBATTLEDURATION: flatbuffers::VOffsetT = 16;
  pub const VT_DEFAULTBATTLEDURATION: flatbuffers::VOffsetT = 18;
  pub const VT_DEFAULTLOGICEFFECT: flatbuffers::VOffsetT = 20;
  pub const VT_CAMERASIZERATE: flatbuffers::VOffsetT = 22;
  pub const VT_EVENTCONTENTSTAGEREWARDID: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameShootingStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameShootingStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameShootingStageExcel<'bldr>> {
    let mut builder = MiniGameShootingStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameShootingStage");
      let x = args.EventContentStageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentStageRewardId(x);
      let x = args.DefaultBattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefaultBattleDuration(x);
      let x = args.StartBattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StartBattleDuration(x);
      let x = args.CostGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostGoodsId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.CameraSizeRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraSizeRate(x);
      if let Some(x) = args.DefaultLogicEffect {
        builder.add_DefaultLogicEffect(x);
      }
      if let Some(x) = args.ArtLevel {
        builder.add_ArtLevel(x);
      }
      if let Some(x) = args.DesignLevel {
        builder.add_DesignLevel(x);
      }
      let x = args.Difficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Difficulty(x);
      if let Some(x) = args.BgmId {
        builder.add_BgmId(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameShootingStageExcelT {
    let key = table_encryption_service::create_key(b"MiniGameShootingStage");
      let UniqueId = self.UniqueId();
    let BgmId = self.BgmId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let CostGoodsId = self.CostGoodsId();
      let Difficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Difficulty(), &key)
      } else {
        self.Difficulty()
      };
    let DesignLevel = self.DesignLevel().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ArtLevel = self.ArtLevel().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StartBattleDuration = self.StartBattleDuration();
      let DefaultBattleDuration = self.DefaultBattleDuration();
    let DefaultLogicEffect = self.DefaultLogicEffect().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CameraSizeRate = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraSizeRate(), &key)
      } else {
        self.CameraSizeRate()
      };
      let EventContentStageRewardId = self.EventContentStageRewardId();
    MiniGameShootingStageExcelT {
      UniqueId,
      BgmId,
      CostGoodsId,
      Difficulty,
      DesignLevel,
      ArtLevel,
      StartBattleDuration,
      DefaultBattleDuration,
      DefaultLogicEffect,
      CameraSizeRate,
      EventContentStageRewardId,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingStageExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BgmId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameShootingStageExcel::VT_BGMID, None)}
  }
  #[inline]
  pub fn CostGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingStageExcel::VT_COSTGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Difficulty(&self) -> Difficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Difficulty>(MiniGameShootingStageExcel::VT_DIFFICULTY, Some(Difficulty::Normal)).unwrap()}
  }
  #[inline]
  pub fn DesignLevel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameShootingStageExcel::VT_DESIGNLEVEL, None)}
  }
  #[inline]
  pub fn ArtLevel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameShootingStageExcel::VT_ARTLEVEL, None)}
  }
  #[inline]
  pub fn StartBattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingStageExcel::VT_STARTBATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefaultBattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingStageExcel::VT_DEFAULTBATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefaultLogicEffect(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameShootingStageExcel::VT_DEFAULTLOGICEFFECT, None)}
  }
  #[inline]
  pub fn CameraSizeRate(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MiniGameShootingStageExcel::VT_CAMERASIZERATE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn EventContentStageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingStageExcel::VT_EVENTCONTENTSTAGEREWARDID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameShootingStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("BgmId", Self::VT_BGMID, false)?
     .visit_field::<i64>("CostGoodsId", Self::VT_COSTGOODSID, false)?
     .visit_field::<Difficulty>("Difficulty", Self::VT_DIFFICULTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignLevel", Self::VT_DESIGNLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ArtLevel", Self::VT_ARTLEVEL, false)?
     .visit_field::<i64>("StartBattleDuration", Self::VT_STARTBATTLEDURATION, false)?
     .visit_field::<i64>("DefaultBattleDuration", Self::VT_DEFAULTBATTLEDURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DefaultLogicEffect", Self::VT_DEFAULTLOGICEFFECT, false)?
     .visit_field::<f32>("CameraSizeRate", Self::VT_CAMERASIZERATE, false)?
     .visit_field::<i64>("EventContentStageRewardId", Self::VT_EVENTCONTENTSTAGEREWARDID, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameShootingStageExcelArgs<'a> {
    pub UniqueId: i64,
    pub BgmId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub CostGoodsId: i64,
    pub Difficulty: Difficulty,
    pub DesignLevel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ArtLevel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StartBattleDuration: i64,
    pub DefaultBattleDuration: i64,
    pub DefaultLogicEffect: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CameraSizeRate: f32,
    pub EventContentStageRewardId: i64,
}
impl<'a> Default for MiniGameShootingStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameShootingStageExcelArgs {
      UniqueId: 0,
      BgmId: None,
      CostGoodsId: 0,
      Difficulty: Difficulty::Normal,
      DesignLevel: None,
      ArtLevel: None,
      StartBattleDuration: 0,
      DefaultBattleDuration: 0,
      DefaultLogicEffect: None,
      CameraSizeRate: 0.0,
      EventContentStageRewardId: 0,
    }
  }
}

impl Serialize for MiniGameShootingStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameShootingStageExcel", 11)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      if let Some(f) = self.BgmId() {
        s.serialize_field("BgmId", &f)?;
      } else {
        s.skip_field("BgmId")?;
      }
      s.serialize_field("CostGoodsId", &self.CostGoodsId())?;
      s.serialize_field("Difficulty", &self.Difficulty())?;
      if let Some(f) = self.DesignLevel() {
        s.serialize_field("DesignLevel", &f)?;
      } else {
        s.skip_field("DesignLevel")?;
      }
      if let Some(f) = self.ArtLevel() {
        s.serialize_field("ArtLevel", &f)?;
      } else {
        s.skip_field("ArtLevel")?;
      }
      s.serialize_field("StartBattleDuration", &self.StartBattleDuration())?;
      s.serialize_field("DefaultBattleDuration", &self.DefaultBattleDuration())?;
      if let Some(f) = self.DefaultLogicEffect() {
        s.serialize_field("DefaultLogicEffect", &f)?;
      } else {
        s.skip_field("DefaultLogicEffect")?;
      }
      s.serialize_field("CameraSizeRate", &self.CameraSizeRate())?;
      s.serialize_field("EventContentStageRewardId", &self.EventContentStageRewardId())?;
    s.end()
  }
}

pub struct MiniGameShootingStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameShootingStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingStageExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_BgmId(&mut self, BgmId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameShootingStageExcel::VT_BGMID, BgmId);
  }
  #[inline]
  pub fn add_CostGoodsId(&mut self, CostGoodsId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingStageExcel::VT_COSTGOODSID, CostGoodsId, 0);
  }
  #[inline]
  pub fn add_Difficulty(&mut self, Difficulty: Difficulty) {
    self.fbb_.push_slot::<Difficulty>(MiniGameShootingStageExcel::VT_DIFFICULTY, Difficulty, Difficulty::Normal);
  }
  #[inline]
  pub fn add_DesignLevel(&mut self, DesignLevel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameShootingStageExcel::VT_DESIGNLEVEL, DesignLevel);
  }
  #[inline]
  pub fn add_ArtLevel(&mut self, ArtLevel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameShootingStageExcel::VT_ARTLEVEL, ArtLevel);
  }
  #[inline]
  pub fn add_StartBattleDuration(&mut self, StartBattleDuration: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingStageExcel::VT_STARTBATTLEDURATION, StartBattleDuration, 0);
  }
  #[inline]
  pub fn add_DefaultBattleDuration(&mut self, DefaultBattleDuration: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingStageExcel::VT_DEFAULTBATTLEDURATION, DefaultBattleDuration, 0);
  }
  #[inline]
  pub fn add_DefaultLogicEffect(&mut self, DefaultLogicEffect: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameShootingStageExcel::VT_DEFAULTLOGICEFFECT, DefaultLogicEffect);
  }
  #[inline]
  pub fn add_CameraSizeRate(&mut self, CameraSizeRate: f32) {
    self.fbb_.push_slot::<f32>(MiniGameShootingStageExcel::VT_CAMERASIZERATE, CameraSizeRate, 0.0);
  }
  #[inline]
  pub fn add_EventContentStageRewardId(&mut self, EventContentStageRewardId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingStageExcel::VT_EVENTCONTENTSTAGEREWARDID, EventContentStageRewardId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameShootingStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameShootingStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameShootingStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameShootingStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameShootingStageExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("BgmId", &self.BgmId());
      ds.field("CostGoodsId", &self.CostGoodsId());
      ds.field("Difficulty", &self.Difficulty());
      ds.field("DesignLevel", &self.DesignLevel());
      ds.field("ArtLevel", &self.ArtLevel());
      ds.field("StartBattleDuration", &self.StartBattleDuration());
      ds.field("DefaultBattleDuration", &self.DefaultBattleDuration());
      ds.field("DefaultLogicEffect", &self.DefaultLogicEffect());
      ds.field("CameraSizeRate", &self.CameraSizeRate());
      ds.field("EventContentStageRewardId", &self.EventContentStageRewardId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameShootingStageExcelT {
  pub UniqueId: i64,
  pub BgmId: Option<Vec<i64>>,
  pub CostGoodsId: i64,
  pub Difficulty: Difficulty,
  pub DesignLevel: Option<String>,
  pub ArtLevel: Option<String>,
  pub StartBattleDuration: i64,
  pub DefaultBattleDuration: i64,
  pub DefaultLogicEffect: Option<String>,
  pub CameraSizeRate: f32,
  pub EventContentStageRewardId: i64,
}
impl Default for MiniGameShootingStageExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      BgmId: None,
      CostGoodsId: 0,
      Difficulty: Difficulty::Normal,
      DesignLevel: None,
      ArtLevel: None,
      StartBattleDuration: 0,
      DefaultBattleDuration: 0,
      DefaultLogicEffect: None,
      CameraSizeRate: 0.0,
      EventContentStageRewardId: 0,
    }
  }
}
impl MiniGameShootingStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameShootingStageExcel<'b>> {
    let UniqueId = self.UniqueId;
    let BgmId = self.BgmId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CostGoodsId = self.CostGoodsId;
    let Difficulty = self.Difficulty;
    let DesignLevel = self.DesignLevel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ArtLevel = self.ArtLevel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StartBattleDuration = self.StartBattleDuration;
    let DefaultBattleDuration = self.DefaultBattleDuration;
    let DefaultLogicEffect = self.DefaultLogicEffect.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CameraSizeRate = self.CameraSizeRate;
    let EventContentStageRewardId = self.EventContentStageRewardId;
    MiniGameShootingStageExcel::create(_fbb, &MiniGameShootingStageExcelArgs{
      UniqueId,
      BgmId,
      CostGoodsId,
      Difficulty,
      DesignLevel,
      ArtLevel,
      StartBattleDuration,
      DefaultBattleDuration,
      DefaultLogicEffect,
      CameraSizeRate,
      EventContentStageRewardId,
    })
  }
}
