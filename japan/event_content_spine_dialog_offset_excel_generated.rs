// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentSpineDialogOffsetExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentSpineDialogOffsetExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentSpineDialogOffsetExcel<'a> {
  type Inner = EventContentSpineDialogOffsetExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentSpineDialogOffsetExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_COSTUMEUNIQUEID: flatbuffers::VOffsetT = 8;
  pub const VT_SPINEOFFSETX: flatbuffers::VOffsetT = 10;
  pub const VT_SPINEOFFSETY: flatbuffers::VOffsetT = 12;
  pub const VT_DIALOGOFFSETX: flatbuffers::VOffsetT = 14;
  pub const VT_DIALOGOFFSETY: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentSpineDialogOffsetExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentSpineDialogOffsetExcelArgs
  ) -> flatbuffers::WIPOffset<EventContentSpineDialogOffsetExcel<'bldr>> {
    let mut builder = EventContentSpineDialogOffsetExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentSpineDialogOffset");
      let x = args.CostumeUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeUniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.DialogOffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_DialogOffsetY(x);
      let x = args.DialogOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_DialogOffsetX(x);
      let x = args.SpineOffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_SpineOffsetY(x);
      let x = args.SpineOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_SpineOffsetX(x);
      let x = args.EventContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventContentType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentSpineDialogOffsetExcelT {
    let key = table_encryption_service::create_key(b"EventContentSpineDialogOffset");
      let EventContentId = self.EventContentId();
      let EventContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventContentType(), &key)
      } else {
        self.EventContentType()
      };
      let CostumeUniqueId = self.CostumeUniqueId();
      let SpineOffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.SpineOffsetX(), &key)
      } else {
        self.SpineOffsetX()
      };
      let SpineOffsetY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.SpineOffsetY(), &key)
      } else {
        self.SpineOffsetY()
      };
      let DialogOffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.DialogOffsetX(), &key)
      } else {
        self.DialogOffsetX()
      };
      let DialogOffsetY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.DialogOffsetY(), &key)
      } else {
        self.DialogOffsetY()
      };
    EventContentSpineDialogOffsetExcelT {
      EventContentId,
      EventContentType,
      CostumeUniqueId,
      SpineOffsetX,
      SpineOffsetY,
      DialogOffsetX,
      DialogOffsetY,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentSpineDialogOffsetExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentType(&self) -> EventContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentType>(EventContentSpineDialogOffsetExcel::VT_EVENTCONTENTTYPE, Some(EventContentType::Stage)).unwrap()}
  }
  #[inline]
  pub fn CostumeUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentSpineDialogOffsetExcel::VT_COSTUMEUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SpineOffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentSpineDialogOffsetExcel::VT_SPINEOFFSETX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn SpineOffsetY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentSpineDialogOffsetExcel::VT_SPINEOFFSETY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn DialogOffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentSpineDialogOffsetExcel::VT_DIALOGOFFSETX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn DialogOffsetY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentSpineDialogOffsetExcel::VT_DIALOGOFFSETY, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentSpineDialogOffsetExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<EventContentType>("EventContentType", Self::VT_EVENTCONTENTTYPE, false)?
     .visit_field::<i64>("CostumeUniqueId", Self::VT_COSTUMEUNIQUEID, false)?
     .visit_field::<f32>("SpineOffsetX", Self::VT_SPINEOFFSETX, false)?
     .visit_field::<f32>("SpineOffsetY", Self::VT_SPINEOFFSETY, false)?
     .visit_field::<f32>("DialogOffsetX", Self::VT_DIALOGOFFSETX, false)?
     .visit_field::<f32>("DialogOffsetY", Self::VT_DIALOGOFFSETY, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentSpineDialogOffsetExcelArgs {
    pub EventContentId: i64,
    pub EventContentType: EventContentType,
    pub CostumeUniqueId: i64,
    pub SpineOffsetX: f32,
    pub SpineOffsetY: f32,
    pub DialogOffsetX: f32,
    pub DialogOffsetY: f32,
}
impl<'a> Default for EventContentSpineDialogOffsetExcelArgs {
  #[inline]
  fn default() -> Self {
    EventContentSpineDialogOffsetExcelArgs {
      EventContentId: 0,
      EventContentType: EventContentType::Stage,
      CostumeUniqueId: 0,
      SpineOffsetX: 0.0,
      SpineOffsetY: 0.0,
      DialogOffsetX: 0.0,
      DialogOffsetY: 0.0,
    }
  }
}

impl Serialize for EventContentSpineDialogOffsetExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentSpineDialogOffsetExcel", 7)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventContentType", &self.EventContentType())?;
      s.serialize_field("CostumeUniqueId", &self.CostumeUniqueId())?;
      s.serialize_field("SpineOffsetX", &self.SpineOffsetX())?;
      s.serialize_field("SpineOffsetY", &self.SpineOffsetY())?;
      s.serialize_field("DialogOffsetX", &self.DialogOffsetX())?;
      s.serialize_field("DialogOffsetY", &self.DialogOffsetY())?;
    s.end()
  }
}

pub struct EventContentSpineDialogOffsetExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentSpineDialogOffsetExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentSpineDialogOffsetExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventContentType(&mut self, EventContentType: EventContentType) {
    self.fbb_.push_slot::<EventContentType>(EventContentSpineDialogOffsetExcel::VT_EVENTCONTENTTYPE, EventContentType, EventContentType::Stage);
  }
  #[inline]
  pub fn add_CostumeUniqueId(&mut self, CostumeUniqueId: i64) {
    self.fbb_.push_slot::<i64>(EventContentSpineDialogOffsetExcel::VT_COSTUMEUNIQUEID, CostumeUniqueId, 0);
  }
  #[inline]
  pub fn add_SpineOffsetX(&mut self, SpineOffsetX: f32) {
    self.fbb_.push_slot::<f32>(EventContentSpineDialogOffsetExcel::VT_SPINEOFFSETX, SpineOffsetX, 0.0);
  }
  #[inline]
  pub fn add_SpineOffsetY(&mut self, SpineOffsetY: f32) {
    self.fbb_.push_slot::<f32>(EventContentSpineDialogOffsetExcel::VT_SPINEOFFSETY, SpineOffsetY, 0.0);
  }
  #[inline]
  pub fn add_DialogOffsetX(&mut self, DialogOffsetX: f32) {
    self.fbb_.push_slot::<f32>(EventContentSpineDialogOffsetExcel::VT_DIALOGOFFSETX, DialogOffsetX, 0.0);
  }
  #[inline]
  pub fn add_DialogOffsetY(&mut self, DialogOffsetY: f32) {
    self.fbb_.push_slot::<f32>(EventContentSpineDialogOffsetExcel::VT_DIALOGOFFSETY, DialogOffsetY, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentSpineDialogOffsetExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentSpineDialogOffsetExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentSpineDialogOffsetExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentSpineDialogOffsetExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentSpineDialogOffsetExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventContentType", &self.EventContentType());
      ds.field("CostumeUniqueId", &self.CostumeUniqueId());
      ds.field("SpineOffsetX", &self.SpineOffsetX());
      ds.field("SpineOffsetY", &self.SpineOffsetY());
      ds.field("DialogOffsetX", &self.DialogOffsetX());
      ds.field("DialogOffsetY", &self.DialogOffsetY());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentSpineDialogOffsetExcelT {
  pub EventContentId: i64,
  pub EventContentType: EventContentType,
  pub CostumeUniqueId: i64,
  pub SpineOffsetX: f32,
  pub SpineOffsetY: f32,
  pub DialogOffsetX: f32,
  pub DialogOffsetY: f32,
}
impl Default for EventContentSpineDialogOffsetExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventContentType: EventContentType::Stage,
      CostumeUniqueId: 0,
      SpineOffsetX: 0.0,
      SpineOffsetY: 0.0,
      DialogOffsetX: 0.0,
      DialogOffsetY: 0.0,
    }
  }
}
impl EventContentSpineDialogOffsetExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentSpineDialogOffsetExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventContentType = self.EventContentType;
    let CostumeUniqueId = self.CostumeUniqueId;
    let SpineOffsetX = self.SpineOffsetX;
    let SpineOffsetY = self.SpineOffsetY;
    let DialogOffsetX = self.DialogOffsetX;
    let DialogOffsetY = self.DialogOffsetY;
    EventContentSpineDialogOffsetExcel::create(_fbb, &EventContentSpineDialogOffsetExcelArgs{
      EventContentId,
      EventContentType,
      CostumeUniqueId,
      SpineOffsetX,
      SpineOffsetY,
      DialogOffsetX,
      DialogOffsetY,
    })
  }
}
