// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldCurtainCallFreeModeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldCurtainCallFreeModeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldCurtainCallFreeModeExcel<'a> {
  type Inner = FieldCurtainCallFreeModeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldCurtainCallFreeModeExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_OPENDATE: flatbuffers::VOffsetT = 6;
  pub const VT_SETFIELDDATEID: flatbuffers::VOffsetT = 8;
  pub const VT_SETFIELDQUESTOPENDATE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldCurtainCallFreeModeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldCurtainCallFreeModeExcelArgs
  ) -> flatbuffers::WIPOffset<FieldCurtainCallFreeModeExcel<'bldr>> {
    let mut builder = FieldCurtainCallFreeModeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldCurtainCallFreeMode");
      let x = args.SetFieldQuestOpenDate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SetFieldQuestOpenDate(x);
      let x = args.SetFieldDateID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SetFieldDateID(x);
      let x = args.OpenDate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenDate(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldCurtainCallFreeModeExcelT {
    let key = table_encryption_service::create_key(b"FieldCurtainCallFreeMode");
      let UniqueId = self.UniqueId();
      let OpenDate = self.OpenDate();
      let SetFieldDateID = self.SetFieldDateID();
      let SetFieldQuestOpenDate = self.SetFieldQuestOpenDate();
    FieldCurtainCallFreeModeExcelT {
      UniqueId,
      OpenDate,
      SetFieldDateID,
      SetFieldQuestOpenDate,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldCurtainCallFreeModeExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenDate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldCurtainCallFreeModeExcel::VT_OPENDATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SetFieldDateID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldCurtainCallFreeModeExcel::VT_SETFIELDDATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SetFieldQuestOpenDate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldCurtainCallFreeModeExcel::VT_SETFIELDQUESTOPENDATE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FieldCurtainCallFreeModeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("OpenDate", Self::VT_OPENDATE, false)?
     .visit_field::<i64>("SetFieldDateID", Self::VT_SETFIELDDATEID, false)?
     .visit_field::<i64>("SetFieldQuestOpenDate", Self::VT_SETFIELDQUESTOPENDATE, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldCurtainCallFreeModeExcelArgs {
    pub UniqueId: i64,
    pub OpenDate: i64,
    pub SetFieldDateID: i64,
    pub SetFieldQuestOpenDate: i64,
}
impl<'a> Default for FieldCurtainCallFreeModeExcelArgs {
  #[inline]
  fn default() -> Self {
    FieldCurtainCallFreeModeExcelArgs {
      UniqueId: 0,
      OpenDate: 0,
      SetFieldDateID: 0,
      SetFieldQuestOpenDate: 0,
    }
  }
}

impl Serialize for FieldCurtainCallFreeModeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldCurtainCallFreeModeExcel", 4)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("OpenDate", &self.OpenDate())?;
      s.serialize_field("SetFieldDateID", &self.SetFieldDateID())?;
      s.serialize_field("SetFieldQuestOpenDate", &self.SetFieldQuestOpenDate())?;
    s.end()
  }
}

pub struct FieldCurtainCallFreeModeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldCurtainCallFreeModeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldCurtainCallFreeModeExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_OpenDate(&mut self, OpenDate: i64) {
    self.fbb_.push_slot::<i64>(FieldCurtainCallFreeModeExcel::VT_OPENDATE, OpenDate, 0);
  }
  #[inline]
  pub fn add_SetFieldDateID(&mut self, SetFieldDateID: i64) {
    self.fbb_.push_slot::<i64>(FieldCurtainCallFreeModeExcel::VT_SETFIELDDATEID, SetFieldDateID, 0);
  }
  #[inline]
  pub fn add_SetFieldQuestOpenDate(&mut self, SetFieldQuestOpenDate: i64) {
    self.fbb_.push_slot::<i64>(FieldCurtainCallFreeModeExcel::VT_SETFIELDQUESTOPENDATE, SetFieldQuestOpenDate, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldCurtainCallFreeModeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldCurtainCallFreeModeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldCurtainCallFreeModeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldCurtainCallFreeModeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldCurtainCallFreeModeExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("OpenDate", &self.OpenDate());
      ds.field("SetFieldDateID", &self.SetFieldDateID());
      ds.field("SetFieldQuestOpenDate", &self.SetFieldQuestOpenDate());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldCurtainCallFreeModeExcelT {
  pub UniqueId: i64,
  pub OpenDate: i64,
  pub SetFieldDateID: i64,
  pub SetFieldQuestOpenDate: i64,
}
impl Default for FieldCurtainCallFreeModeExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      OpenDate: 0,
      SetFieldDateID: 0,
      SetFieldQuestOpenDate: 0,
    }
  }
}
impl FieldCurtainCallFreeModeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldCurtainCallFreeModeExcel<'b>> {
    let UniqueId = self.UniqueId;
    let OpenDate = self.OpenDate;
    let SetFieldDateID = self.SetFieldDateID;
    let SetFieldQuestOpenDate = self.SetFieldQuestOpenDate;
    FieldCurtainCallFreeModeExcel::create(_fbb, &FieldCurtainCallFreeModeExcelArgs{
      UniqueId,
      OpenDate,
      SetFieldDateID,
      SetFieldQuestOpenDate,
    })
  }
}
