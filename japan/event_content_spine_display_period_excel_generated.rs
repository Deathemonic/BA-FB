// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentSpineDisplayPeriodExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentSpineDisplayPeriodExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentSpineDisplayPeriodExcel<'a> {
  type Inner = EventContentSpineDisplayPeriodExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentSpineDisplayPeriodExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_DIALOGCATEGORY: flatbuffers::VOffsetT = 6;
  pub const VT_COSTUMEUNIQUEID: flatbuffers::VOffsetT = 8;
  pub const VT_SHOWPERIODFROM: flatbuffers::VOffsetT = 10;
  pub const VT_SHOWPERIODTO: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentSpineDisplayPeriodExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentSpineDisplayPeriodExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentSpineDisplayPeriodExcel<'bldr>> {
    let mut builder = EventContentSpineDisplayPeriodExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentSpineDisplayPeriod");
      let x = args.CostumeUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeUniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.ShowPeriodTo {
        builder.add_ShowPeriodTo(x);
      }
      if let Some(x) = args.ShowPeriodFrom {
        builder.add_ShowPeriodFrom(x);
      }
      let x = args.DialogCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DialogCategory(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentSpineDisplayPeriodExcelT {
    let key = table_encryption_service::create_key(b"EventContentSpineDisplayPeriod");
      let EventContentId = self.EventContentId();
      let DialogCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DialogCategory(), &key)
      } else {
        self.DialogCategory()
      };
      let CostumeUniqueId = self.CostumeUniqueId();
    let ShowPeriodFrom = self.ShowPeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ShowPeriodTo = self.ShowPeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentSpineDisplayPeriodExcelT {
      EventContentId,
      DialogCategory,
      CostumeUniqueId,
      ShowPeriodFrom,
      ShowPeriodTo,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentSpineDisplayPeriodExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DialogCategory(&self) -> DialogCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogCategory>(EventContentSpineDisplayPeriodExcel::VT_DIALOGCATEGORY, Some(DialogCategory::Cafe)).unwrap()}
  }
  #[inline]
  pub fn CostumeUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentSpineDisplayPeriodExcel::VT_COSTUMEUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShowPeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentSpineDisplayPeriodExcel::VT_SHOWPERIODFROM, None)}
  }
  #[inline]
  pub fn ShowPeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentSpineDisplayPeriodExcel::VT_SHOWPERIODTO, None)}
  }
}

impl flatbuffers::Verifiable for EventContentSpineDisplayPeriodExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<DialogCategory>("DialogCategory", Self::VT_DIALOGCATEGORY, false)?
     .visit_field::<i64>("CostumeUniqueId", Self::VT_COSTUMEUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShowPeriodFrom", Self::VT_SHOWPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShowPeriodTo", Self::VT_SHOWPERIODTO, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentSpineDisplayPeriodExcelArgs<'a> {
    pub EventContentId: i64,
    pub DialogCategory: DialogCategory,
    pub CostumeUniqueId: i64,
    pub ShowPeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShowPeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentSpineDisplayPeriodExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentSpineDisplayPeriodExcelArgs {
      EventContentId: 0,
      DialogCategory: DialogCategory::Cafe,
      CostumeUniqueId: 0,
      ShowPeriodFrom: None,
      ShowPeriodTo: None,
    }
  }
}

impl Serialize for EventContentSpineDisplayPeriodExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentSpineDisplayPeriodExcel", 5)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("DialogCategory", &self.DialogCategory())?;
      s.serialize_field("CostumeUniqueId", &self.CostumeUniqueId())?;
      if let Some(f) = self.ShowPeriodFrom() {
        s.serialize_field("ShowPeriodFrom", &f)?;
      } else {
        s.skip_field("ShowPeriodFrom")?;
      }
      if let Some(f) = self.ShowPeriodTo() {
        s.serialize_field("ShowPeriodTo", &f)?;
      } else {
        s.skip_field("ShowPeriodTo")?;
      }
    s.end()
  }
}

pub struct EventContentSpineDisplayPeriodExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentSpineDisplayPeriodExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentSpineDisplayPeriodExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_DialogCategory(&mut self, DialogCategory: DialogCategory) {
    self.fbb_.push_slot::<DialogCategory>(EventContentSpineDisplayPeriodExcel::VT_DIALOGCATEGORY, DialogCategory, DialogCategory::Cafe);
  }
  #[inline]
  pub fn add_CostumeUniqueId(&mut self, CostumeUniqueId: i64) {
    self.fbb_.push_slot::<i64>(EventContentSpineDisplayPeriodExcel::VT_COSTUMEUNIQUEID, CostumeUniqueId, 0);
  }
  #[inline]
  pub fn add_ShowPeriodFrom(&mut self, ShowPeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentSpineDisplayPeriodExcel::VT_SHOWPERIODFROM, ShowPeriodFrom);
  }
  #[inline]
  pub fn add_ShowPeriodTo(&mut self, ShowPeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentSpineDisplayPeriodExcel::VT_SHOWPERIODTO, ShowPeriodTo);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentSpineDisplayPeriodExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentSpineDisplayPeriodExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentSpineDisplayPeriodExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentSpineDisplayPeriodExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentSpineDisplayPeriodExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("DialogCategory", &self.DialogCategory());
      ds.field("CostumeUniqueId", &self.CostumeUniqueId());
      ds.field("ShowPeriodFrom", &self.ShowPeriodFrom());
      ds.field("ShowPeriodTo", &self.ShowPeriodTo());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentSpineDisplayPeriodExcelT {
  pub EventContentId: i64,
  pub DialogCategory: DialogCategory,
  pub CostumeUniqueId: i64,
  pub ShowPeriodFrom: Option<String>,
  pub ShowPeriodTo: Option<String>,
}
impl Default for EventContentSpineDisplayPeriodExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      DialogCategory: DialogCategory::Cafe,
      CostumeUniqueId: 0,
      ShowPeriodFrom: None,
      ShowPeriodTo: None,
    }
  }
}
impl EventContentSpineDisplayPeriodExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentSpineDisplayPeriodExcel<'b>> {
    let EventContentId = self.EventContentId;
    let DialogCategory = self.DialogCategory;
    let CostumeUniqueId = self.CostumeUniqueId;
    let ShowPeriodFrom = self.ShowPeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShowPeriodTo = self.ShowPeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentSpineDisplayPeriodExcel::create(_fbb, &EventContentSpineDisplayPeriodExcelArgs{
      EventContentId,
      DialogCategory,
      CostumeUniqueId,
      ShowPeriodFrom,
      ShowPeriodTo,
    })
  }
}
