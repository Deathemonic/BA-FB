// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterIllustCoordinateExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterIllustCoordinateExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterIllustCoordinateExcel<'a> {
  type Inner = CharacterIllustCoordinateExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterIllustCoordinateExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERBODYCENTERX: flatbuffers::VOffsetT = 6;
  pub const VT_CHARACTERBODYCENTERY: flatbuffers::VOffsetT = 8;
  pub const VT_DEFAULTSCALE: flatbuffers::VOffsetT = 10;
  pub const VT_MINSCALE: flatbuffers::VOffsetT = 12;
  pub const VT_MAXSCALE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterIllustCoordinateExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterIllustCoordinateExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterIllustCoordinateExcel<'bldr>> {
    let mut builder = CharacterIllustCoordinateExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterIllustCoordinate");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.MaxScale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_MaxScale(x);
      let x = args.MinScale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_MinScale(x);
      let x = args.DefaultScale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_DefaultScale(x);
      let x = args.CharacterBodyCenterY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CharacterBodyCenterY(x);
      let x = args.CharacterBodyCenterX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CharacterBodyCenterX(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterIllustCoordinateExcelT {
    let key = table_encryption_service::create_key(b"CharacterIllustCoordinate");
      let Id = self.Id();
      let CharacterBodyCenterX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CharacterBodyCenterX(), &key)
      } else {
        self.CharacterBodyCenterX()
      };
      let CharacterBodyCenterY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CharacterBodyCenterY(), &key)
      } else {
        self.CharacterBodyCenterY()
      };
      let DefaultScale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.DefaultScale(), &key)
      } else {
        self.DefaultScale()
      };
      let MinScale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.MinScale(), &key)
      } else {
        self.MinScale()
      };
      let MaxScale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.MaxScale(), &key)
      } else {
        self.MaxScale()
      };
    CharacterIllustCoordinateExcelT {
      Id,
      CharacterBodyCenterX,
      CharacterBodyCenterY,
      DefaultScale,
      MinScale,
      MaxScale,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterIllustCoordinateExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterBodyCenterX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterIllustCoordinateExcel::VT_CHARACTERBODYCENTERX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CharacterBodyCenterY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterIllustCoordinateExcel::VT_CHARACTERBODYCENTERY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn DefaultScale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterIllustCoordinateExcel::VT_DEFAULTSCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn MinScale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterIllustCoordinateExcel::VT_MINSCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn MaxScale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterIllustCoordinateExcel::VT_MAXSCALE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterIllustCoordinateExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<f32>("CharacterBodyCenterX", Self::VT_CHARACTERBODYCENTERX, false)?
     .visit_field::<f32>("CharacterBodyCenterY", Self::VT_CHARACTERBODYCENTERY, false)?
     .visit_field::<f32>("DefaultScale", Self::VT_DEFAULTSCALE, false)?
     .visit_field::<f32>("MinScale", Self::VT_MINSCALE, false)?
     .visit_field::<f32>("MaxScale", Self::VT_MAXSCALE, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterIllustCoordinateExcelArgs {
    pub Id: i64,
    pub CharacterBodyCenterX: f32,
    pub CharacterBodyCenterY: f32,
    pub DefaultScale: f32,
    pub MinScale: f32,
    pub MaxScale: f32,
}
impl<'a> Default for CharacterIllustCoordinateExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterIllustCoordinateExcelArgs {
      Id: 0,
      CharacterBodyCenterX: 0.0,
      CharacterBodyCenterY: 0.0,
      DefaultScale: 0.0,
      MinScale: 0.0,
      MaxScale: 0.0,
    }
  }
}

impl Serialize for CharacterIllustCoordinateExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterIllustCoordinateExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CharacterBodyCenterX", &self.CharacterBodyCenterX())?;
      s.serialize_field("CharacterBodyCenterY", &self.CharacterBodyCenterY())?;
      s.serialize_field("DefaultScale", &self.DefaultScale())?;
      s.serialize_field("MinScale", &self.MinScale())?;
      s.serialize_field("MaxScale", &self.MaxScale())?;
    s.end()
  }
}

pub struct CharacterIllustCoordinateExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterIllustCoordinateExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterIllustCoordinateExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CharacterBodyCenterX(&mut self, CharacterBodyCenterX: f32) {
    self.fbb_.push_slot::<f32>(CharacterIllustCoordinateExcel::VT_CHARACTERBODYCENTERX, CharacterBodyCenterX, 0.0);
  }
  #[inline]
  pub fn add_CharacterBodyCenterY(&mut self, CharacterBodyCenterY: f32) {
    self.fbb_.push_slot::<f32>(CharacterIllustCoordinateExcel::VT_CHARACTERBODYCENTERY, CharacterBodyCenterY, 0.0);
  }
  #[inline]
  pub fn add_DefaultScale(&mut self, DefaultScale: f32) {
    self.fbb_.push_slot::<f32>(CharacterIllustCoordinateExcel::VT_DEFAULTSCALE, DefaultScale, 0.0);
  }
  #[inline]
  pub fn add_MinScale(&mut self, MinScale: f32) {
    self.fbb_.push_slot::<f32>(CharacterIllustCoordinateExcel::VT_MINSCALE, MinScale, 0.0);
  }
  #[inline]
  pub fn add_MaxScale(&mut self, MaxScale: f32) {
    self.fbb_.push_slot::<f32>(CharacterIllustCoordinateExcel::VT_MAXSCALE, MaxScale, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterIllustCoordinateExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterIllustCoordinateExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterIllustCoordinateExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterIllustCoordinateExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterIllustCoordinateExcel");
      ds.field("Id", &self.Id());
      ds.field("CharacterBodyCenterX", &self.CharacterBodyCenterX());
      ds.field("CharacterBodyCenterY", &self.CharacterBodyCenterY());
      ds.field("DefaultScale", &self.DefaultScale());
      ds.field("MinScale", &self.MinScale());
      ds.field("MaxScale", &self.MaxScale());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterIllustCoordinateExcelT {
  pub Id: i64,
  pub CharacterBodyCenterX: f32,
  pub CharacterBodyCenterY: f32,
  pub DefaultScale: f32,
  pub MinScale: f32,
  pub MaxScale: f32,
}
impl Default for CharacterIllustCoordinateExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CharacterBodyCenterX: 0.0,
      CharacterBodyCenterY: 0.0,
      DefaultScale: 0.0,
      MinScale: 0.0,
      MaxScale: 0.0,
    }
  }
}
impl CharacterIllustCoordinateExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterIllustCoordinateExcel<'b>> {
    let Id = self.Id;
    let CharacterBodyCenterX = self.CharacterBodyCenterX;
    let CharacterBodyCenterY = self.CharacterBodyCenterY;
    let DefaultScale = self.DefaultScale;
    let MinScale = self.MinScale;
    let MaxScale = self.MaxScale;
    CharacterIllustCoordinateExcel::create(_fbb, &CharacterIllustCoordinateExcelArgs{
      Id,
      CharacterBodyCenterX,
      CharacterBodyCenterY,
      DefaultScale,
      MinScale,
      MaxScale,
    })
  }
}
