// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CampaignStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CampaignStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CampaignStageExcel<'a> {
  type Inner = CampaignStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CampaignStageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DEPRECATED: flatbuffers::VOffsetT = 6;
  pub const VT_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_STAGENUMBER: flatbuffers::VOffsetT = 10;
  pub const VT_CLEARDSCENARIOID: flatbuffers::VOffsetT = 12;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 14;
  pub const VT_STAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_STAGEENTERCOSTID: flatbuffers::VOffsetT = 18;
  pub const VT_STAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_STAGEENTERECHELONCOUNT: flatbuffers::VOffsetT = 22;
  pub const VT_STARCONDITIONTACTICRANKSCOUNT: flatbuffers::VOffsetT = 24;
  pub const VT_STARCONDITIONTURNCOUNT: flatbuffers::VOffsetT = 26;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 28;
  pub const VT_CLEARSCENARIOGROUPID: flatbuffers::VOffsetT = 30;
  pub const VT_STRATEGYMAP: flatbuffers::VOffsetT = 32;
  pub const VT_STRATEGYMAPBG: flatbuffers::VOffsetT = 34;
  pub const VT_CAMPAIGNSTAGEREWARDID: flatbuffers::VOffsetT = 36;
  pub const VT_MAXTURN: flatbuffers::VOffsetT = 38;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 40;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 42;
  pub const VT_RECOMMANDLEVELGAPFORGUIDE: flatbuffers::VOffsetT = 44;
  pub const VT_MINEQUIPMENTTIERFORGUIDE: flatbuffers::VOffsetT = 46;
  pub const VT_MINSKILLLEVELFORGUIDE: flatbuffers::VOffsetT = 48;
  pub const VT_BGMID: flatbuffers::VOffsetT = 50;
  pub const VT_STRATEGYENVIRONMENT: flatbuffers::VOffsetT = 52;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 54;
  pub const VT_STRATEGYSKIPGROUNDID: flatbuffers::VOffsetT = 56;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 58;
  pub const VT_BGMID: flatbuffers::VOffsetT = 60;
  pub const VT_FIRSTCLEARREPORTEVENTNAME: flatbuffers::VOffsetT = 62;
  pub const VT_TACTICREWARDEXP: flatbuffers::VOffsetT = 64;
  pub const VT_FIXEDECHELONID: flatbuffers::VOffsetT = 66;
  pub const VT_ECHELONEXTENSIONTYPE: flatbuffers::VOffsetT = 68;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CampaignStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CampaignStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CampaignStageExcel<'bldr>> {
    let mut builder = CampaignStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CampaignStage");
      let x = args.FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FixedEchelonId(x);
      let x = args.TacticRewardExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TacticRewardExp(x);
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.CampaignStageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CampaignStageRewardId(x);
      let x = args.StarConditionTurnCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StarConditionTurnCount(x);
      let x = args.StarConditionTacticRankSCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StarConditionTacticRankSCount(x);
      let x = args.StageEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterCostId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.CleardScenarioId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CleardScenarioId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EchelonExtensionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EchelonExtensionType(x);
      if let Some(x) = args.FirstClearReportEventName {
        builder.add_FirstClearReportEventName(x);
      }
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
      let x = args.StrategySkipGroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StrategySkipGroundId(x);
      let x = args.StrategyEnvironment;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StrategyEnvironment(x);
      if let Some(x) = args.BgmId {
        builder.add_BgmId(x);
      }
      if let Some(x) = args.MinSkillLevelForGuide {
        builder.add_MinSkillLevelForGuide(x);
      }
      if let Some(x) = args.MinEquipmentTierForGuide {
        builder.add_MinEquipmentTierForGuide(x);
      }
      let x = args.RecommandLevelGapForGuide;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevelGapForGuide(x);
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      let x = args.MaxTurn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxTurn(x);
      if let Some(x) = args.StrategyMapBG {
        builder.add_StrategyMapBG(x);
      }
      if let Some(x) = args.StrategyMap {
        builder.add_StrategyMap(x);
      }
      if let Some(x) = args.ClearScenarioGroupId {
        builder.add_ClearScenarioGroupId(x);
      }
      if let Some(x) = args.EnterScenarioGroupId {
        builder.add_EnterScenarioGroupId(x);
      }
      let x = args.StageEnterEchelonCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterEchelonCount(x);
      let x = args.StageEnterCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterCostAmount(x);
      let x = args.StageEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageEnterCostType(x);
      if let Some(x) = args.StageNumber {
        builder.add_StageNumber(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      builder.add_Deprecated(args.Deprecated);
    builder.finish()
  }

  pub fn unpack(&self) -> CampaignStageExcelT {
    let key = table_encryption_service::create_key(b"CampaignStage");
      let Id = self.Id();
      let Deprecated = self.Deprecated();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StageNumber = self.StageNumber().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CleardScenarioId = self.CleardScenarioId();
      let BattleDuration = self.BattleDuration();
      let StageEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageEnterCostType(), &key)
      } else {
        self.StageEnterCostType()
      };
      let StageEnterCostId = self.StageEnterCostId();
      let StageEnterCostAmount = self.StageEnterCostAmount();
      let StageEnterEchelonCount = self.StageEnterEchelonCount();
      let StarConditionTacticRankSCount = self.StarConditionTacticRankSCount();
      let StarConditionTurnCount = self.StarConditionTurnCount();
    let EnterScenarioGroupId = self.EnterScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StrategyMap = self.StrategyMap().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StrategyMapBG = self.StrategyMapBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CampaignStageRewardId = self.CampaignStageRewardId();
      let MaxTurn = self.MaxTurn();
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let RecommandLevel = self.RecommandLevel();
      let RecommandLevelGapForGuide = self.RecommandLevelGapForGuide();
    let MinEquipmentTierForGuide = self.MinEquipmentTierForGuide().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let MinSkillLevelForGuide = self.MinSkillLevelForGuide().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let BgmId = self.BgmId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StrategyEnvironment = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StrategyEnvironment(), &key)
      } else {
        self.StrategyEnvironment()
      };
      let GroundId = self.GroundId();
      let StrategySkipGroundId = self.StrategySkipGroundId();
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let BGMId = self.BGMId();
    let FirstClearReportEventName = self.FirstClearReportEventName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let TacticRewardExp = self.TacticRewardExp();
      let FixedEchelonId = self.FixedEchelonId();
      let EchelonExtensionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EchelonExtensionType(), &key)
      } else {
        self.EchelonExtensionType()
      };
    CampaignStageExcelT {
      Id,
      Deprecated,
      Name,
      StageNumber,
      CleardScenarioId,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterEchelonCount,
      StarConditionTacticRankSCount,
      StarConditionTurnCount,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      StrategyMap,
      StrategyMapBG,
      CampaignStageRewardId,
      MaxTurn,
      StageTopography,
      RecommandLevel,
      RecommandLevelGapForGuide,
      MinEquipmentTierForGuide,
      MinSkillLevelForGuide,
      BgmId,
      StrategyEnvironment,
      GroundId,
      StrategySkipGroundId,
      ContentType,
      BGMId,
      FirstClearReportEventName,
      TacticRewardExp,
      FixedEchelonId,
      EchelonExtensionType,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Deprecated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CampaignStageExcel::VT_DEPRECATED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStageExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn StageNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStageExcel::VT_STAGENUMBER, None)}
  }
  #[inline]
  pub fn CleardScenarioId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_CLEARDSCENARIOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CampaignStageExcel::VT_STAGEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_STAGEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageExcel::VT_STAGEENTERCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelonCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageExcel::VT_STAGEENTERECHELONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarConditionTacticRankSCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_STARCONDITIONTACTICRANKSCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarConditionTurnCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_STARCONDITIONTURNCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnterScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignStageExcel::VT_ENTERSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn ClearScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignStageExcel::VT_CLEARSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn StrategyMap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStageExcel::VT_STRATEGYMAP, None)}
  }
  #[inline]
  pub fn StrategyMapBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStageExcel::VT_STRATEGYMAPBG, None)}
  }
  #[inline]
  pub fn CampaignStageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_CAMPAIGNSTAGEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxTurn(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageExcel::VT_MAXTURN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(CampaignStageExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevelGapForGuide(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageExcel::VT_RECOMMANDLEVELGAPFORGUIDE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MinEquipmentTierForGuide(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignStageExcel::VT_MINEQUIPMENTTIERFORGUIDE, None)}
  }
  #[inline]
  pub fn MinSkillLevelForGuide(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignStageExcel::VT_MINSKILLLEVELFORGUIDE, None)}
  }
  #[inline]
  pub fn BgmId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStageExcel::VT_BGMID, None)}
  }
  #[inline]
  pub fn StrategyEnvironment(&self) -> StrategyEnvironment {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StrategyEnvironment>(CampaignStageExcel::VT_STRATEGYENVIRONMENT, Some(StrategyEnvironment::None)).unwrap()}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrategySkipGroundId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStageExcel::VT_STRATEGYSKIPGROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(CampaignStageExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FirstClearReportEventName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStageExcel::VT_FIRSTCLEARREPORTEVENTNAME, None)}
  }
  #[inline]
  pub fn TacticRewardExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_TACTICREWARDEXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStageExcel::VT_FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonExtensionType(&self) -> EchelonExtensionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonExtensionType>(CampaignStageExcel::VT_ECHELONEXTENSIONTYPE, Some(EchelonExtensionType::Base)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CampaignStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<bool>("Deprecated", Self::VT_DEPRECATED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StageNumber", Self::VT_STAGENUMBER, false)?
     .visit_field::<i64>("CleardScenarioId", Self::VT_CLEARDSCENARIOID, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<ParcelType>("StageEnterCostType", Self::VT_STAGEENTERCOSTTYPE, false)?
     .visit_field::<i64>("StageEnterCostId", Self::VT_STAGEENTERCOSTID, false)?
     .visit_field::<i32>("StageEnterCostAmount", Self::VT_STAGEENTERCOSTAMOUNT, false)?
     .visit_field::<i32>("StageEnterEchelonCount", Self::VT_STAGEENTERECHELONCOUNT, false)?
     .visit_field::<i64>("StarConditionTacticRankSCount", Self::VT_STARCONDITIONTACTICRANKSCOUNT, false)?
     .visit_field::<i64>("StarConditionTurnCount", Self::VT_STARCONDITIONTURNCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("EnterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ClearScenarioGroupId", Self::VT_CLEARSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMap", Self::VT_STRATEGYMAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMapBG", Self::VT_STRATEGYMAPBG, false)?
     .visit_field::<i64>("CampaignStageRewardId", Self::VT_CAMPAIGNSTAGEREWARDID, false)?
     .visit_field::<i32>("MaxTurn", Self::VT_MAXTURN, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<i32>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<i32>("RecommandLevelGapForGuide", Self::VT_RECOMMANDLEVELGAPFORGUIDE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MinEquipmentTierForGuide", Self::VT_MINEQUIPMENTTIERFORGUIDE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MinSkillLevelForGuide", Self::VT_MINSKILLLEVELFORGUIDE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgmId", Self::VT_BGMID, false)?
     .visit_field::<StrategyEnvironment>("StrategyEnvironment", Self::VT_STRATEGYENVIRONMENT, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<i32>("StrategySkipGroundId", Self::VT_STRATEGYSKIPGROUNDID, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FirstClearReportEventName", Self::VT_FIRSTCLEARREPORTEVENTNAME, false)?
     .visit_field::<i64>("TacticRewardExp", Self::VT_TACTICREWARDEXP, false)?
     .visit_field::<i64>("FixedEchelonId", Self::VT_FIXEDECHELONID, false)?
     .visit_field::<EchelonExtensionType>("EchelonExtensionType", Self::VT_ECHELONEXTENSIONTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct CampaignStageExcelArgs<'a> {
    pub Id: i64,
    pub Deprecated: bool,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StageNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CleardScenarioId: i64,
    pub BattleDuration: i64,
    pub StageEnterCostType: ParcelType,
    pub StageEnterCostId: i64,
    pub StageEnterCostAmount: i32,
    pub StageEnterEchelonCount: i32,
    pub StarConditionTacticRankSCount: i64,
    pub StarConditionTurnCount: i64,
    pub EnterScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ClearScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StrategyMap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyMapBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CampaignStageRewardId: i64,
    pub MaxTurn: i32,
    pub StageTopography: StageTopography,
    pub RecommandLevel: i32,
    pub RecommandLevelGapForGuide: i32,
    pub MinEquipmentTierForGuide: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub MinSkillLevelForGuide: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub BgmId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyEnvironment: StrategyEnvironment,
    pub GroundId: i64,
    pub StrategySkipGroundId: i32,
    pub ContentType: ContentType,
    pub BGMId: i64,
    pub FirstClearReportEventName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TacticRewardExp: i64,
    pub FixedEchelonId: i64,
    pub EchelonExtensionType: EchelonExtensionType,
}
impl<'a> Default for CampaignStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CampaignStageExcelArgs {
      Id: 0,
      Deprecated: false,
      Name: None,
      StageNumber: None,
      CleardScenarioId: 0,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageEnterEchelonCount: 0,
      StarConditionTacticRankSCount: 0,
      StarConditionTurnCount: 0,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      StrategyMap: None,
      StrategyMapBG: None,
      CampaignStageRewardId: 0,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      RecommandLevelGapForGuide: 0,
      MinEquipmentTierForGuide: None,
      MinSkillLevelForGuide: None,
      BgmId: None,
      StrategyEnvironment: StrategyEnvironment::None,
      GroundId: 0,
      StrategySkipGroundId: 0,
      ContentType: ContentType::None,
      BGMId: 0,
      FirstClearReportEventName: None,
      TacticRewardExp: 0,
      FixedEchelonId: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}

impl Serialize for CampaignStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CampaignStageExcel", 33)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Deprecated", &self.Deprecated())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.StageNumber() {
        s.serialize_field("StageNumber", &f)?;
      } else {
        s.skip_field("StageNumber")?;
      }
      s.serialize_field("CleardScenarioId", &self.CleardScenarioId())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("StageEnterCostType", &self.StageEnterCostType())?;
      s.serialize_field("StageEnterCostId", &self.StageEnterCostId())?;
      s.serialize_field("StageEnterCostAmount", &self.StageEnterCostAmount())?;
      s.serialize_field("StageEnterEchelonCount", &self.StageEnterEchelonCount())?;
      s.serialize_field("StarConditionTacticRankSCount", &self.StarConditionTacticRankSCount())?;
      s.serialize_field("StarConditionTurnCount", &self.StarConditionTurnCount())?;
      if let Some(f) = self.EnterScenarioGroupId() {
        s.serialize_field("EnterScenarioGroupId", &f)?;
      } else {
        s.skip_field("EnterScenarioGroupId")?;
      }
      if let Some(f) = self.ClearScenarioGroupId() {
        s.serialize_field("ClearScenarioGroupId", &f)?;
      } else {
        s.skip_field("ClearScenarioGroupId")?;
      }
      if let Some(f) = self.StrategyMap() {
        s.serialize_field("StrategyMap", &f)?;
      } else {
        s.skip_field("StrategyMap")?;
      }
      if let Some(f) = self.StrategyMapBG() {
        s.serialize_field("StrategyMapBG", &f)?;
      } else {
        s.skip_field("StrategyMapBG")?;
      }
      s.serialize_field("CampaignStageRewardId", &self.CampaignStageRewardId())?;
      s.serialize_field("MaxTurn", &self.MaxTurn())?;
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      s.serialize_field("RecommandLevelGapForGuide", &self.RecommandLevelGapForGuide())?;
      if let Some(f) = self.MinEquipmentTierForGuide() {
        s.serialize_field("MinEquipmentTierForGuide", &f)?;
      } else {
        s.skip_field("MinEquipmentTierForGuide")?;
      }
      if let Some(f) = self.MinSkillLevelForGuide() {
        s.serialize_field("MinSkillLevelForGuide", &f)?;
      } else {
        s.skip_field("MinSkillLevelForGuide")?;
      }
      if let Some(f) = self.BgmId() {
        s.serialize_field("BgmId", &f)?;
      } else {
        s.skip_field("BgmId")?;
      }
      s.serialize_field("StrategyEnvironment", &self.StrategyEnvironment())?;
      s.serialize_field("GroundId", &self.GroundId())?;
      s.serialize_field("StrategySkipGroundId", &self.StrategySkipGroundId())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("BGMId", &self.BGMId())?;
      if let Some(f) = self.FirstClearReportEventName() {
        s.serialize_field("FirstClearReportEventName", &f)?;
      } else {
        s.skip_field("FirstClearReportEventName")?;
      }
      s.serialize_field("TacticRewardExp", &self.TacticRewardExp())?;
      s.serialize_field("FixedEchelonId", &self.FixedEchelonId())?;
      s.serialize_field("EchelonExtensionType", &self.EchelonExtensionType())?;
    s.end()
  }
}

pub struct CampaignStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CampaignStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Deprecated(&mut self, Deprecated: bool) {
    self.fbb_.push_slot::<bool>(CampaignStageExcel::VT_DEPRECATED, Deprecated, false);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_StageNumber(&mut self, StageNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_STAGENUMBER, StageNumber);
  }
  #[inline]
  pub fn add_CleardScenarioId(&mut self, CleardScenarioId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_CLEARDSCENARIOID, CleardScenarioId, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_StageEnterCostType(&mut self, StageEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CampaignStageExcel::VT_STAGEENTERCOSTTYPE, StageEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_StageEnterCostId(&mut self, StageEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_STAGEENTERCOSTID, StageEnterCostId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostAmount(&mut self, StageEnterCostAmount: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageExcel::VT_STAGEENTERCOSTAMOUNT, StageEnterCostAmount, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelonCount(&mut self, StageEnterEchelonCount: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageExcel::VT_STAGEENTERECHELONCOUNT, StageEnterEchelonCount, 0);
  }
  #[inline]
  pub fn add_StarConditionTacticRankSCount(&mut self, StarConditionTacticRankSCount: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_STARCONDITIONTACTICRANKSCOUNT, StarConditionTacticRankSCount, 0);
  }
  #[inline]
  pub fn add_StarConditionTurnCount(&mut self, StarConditionTurnCount: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_STARCONDITIONTURNCOUNT, StarConditionTurnCount, 0);
  }
  #[inline]
  pub fn add_EnterScenarioGroupId(&mut self, EnterScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_ENTERSCENARIOGROUPID, EnterScenarioGroupId);
  }
  #[inline]
  pub fn add_ClearScenarioGroupId(&mut self, ClearScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_CLEARSCENARIOGROUPID, ClearScenarioGroupId);
  }
  #[inline]
  pub fn add_StrategyMap(&mut self, StrategyMap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_STRATEGYMAP, StrategyMap);
  }
  #[inline]
  pub fn add_StrategyMapBG(&mut self, StrategyMapBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_STRATEGYMAPBG, StrategyMapBG);
  }
  #[inline]
  pub fn add_CampaignStageRewardId(&mut self, CampaignStageRewardId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_CAMPAIGNSTAGEREWARDID, CampaignStageRewardId, 0);
  }
  #[inline]
  pub fn add_MaxTurn(&mut self, MaxTurn: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageExcel::VT_MAXTURN, MaxTurn, 0);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(CampaignStageExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_RecommandLevelGapForGuide(&mut self, RecommandLevelGapForGuide: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageExcel::VT_RECOMMANDLEVELGAPFORGUIDE, RecommandLevelGapForGuide, 0);
  }
  #[inline]
  pub fn add_MinEquipmentTierForGuide(&mut self, MinEquipmentTierForGuide: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_MINEQUIPMENTTIERFORGUIDE, MinEquipmentTierForGuide);
  }
  #[inline]
  pub fn add_MinSkillLevelForGuide(&mut self, MinSkillLevelForGuide: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_MINSKILLLEVELFORGUIDE, MinSkillLevelForGuide);
  }
  #[inline]
  pub fn add_BgmId(&mut self, BgmId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_BGMID, BgmId);
  }
  #[inline]
  pub fn add_StrategyEnvironment(&mut self, StrategyEnvironment: StrategyEnvironment) {
    self.fbb_.push_slot::<StrategyEnvironment>(CampaignStageExcel::VT_STRATEGYENVIRONMENT, StrategyEnvironment, StrategyEnvironment::None);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_StrategySkipGroundId(&mut self, StrategySkipGroundId: i32) {
    self.fbb_.push_slot::<i32>(CampaignStageExcel::VT_STRATEGYSKIPGROUNDID, StrategySkipGroundId, 0);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(CampaignStageExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_FirstClearReportEventName(&mut self, FirstClearReportEventName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStageExcel::VT_FIRSTCLEARREPORTEVENTNAME, FirstClearReportEventName);
  }
  #[inline]
  pub fn add_TacticRewardExp(&mut self, TacticRewardExp: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_TACTICREWARDEXP, TacticRewardExp, 0);
  }
  #[inline]
  pub fn add_FixedEchelonId(&mut self, FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(CampaignStageExcel::VT_FIXEDECHELONID, FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_EchelonExtensionType(&mut self, EchelonExtensionType: EchelonExtensionType) {
    self.fbb_.push_slot::<EchelonExtensionType>(CampaignStageExcel::VT_ECHELONEXTENSIONTYPE, EchelonExtensionType, EchelonExtensionType::Base);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CampaignStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CampaignStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CampaignStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CampaignStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CampaignStageExcel");
      ds.field("Id", &self.Id());
      ds.field("Deprecated", &self.Deprecated());
      ds.field("Name", &self.Name());
      ds.field("StageNumber", &self.StageNumber());
      ds.field("CleardScenarioId", &self.CleardScenarioId());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("StageEnterCostType", &self.StageEnterCostType());
      ds.field("StageEnterCostId", &self.StageEnterCostId());
      ds.field("StageEnterCostAmount", &self.StageEnterCostAmount());
      ds.field("StageEnterEchelonCount", &self.StageEnterEchelonCount());
      ds.field("StarConditionTacticRankSCount", &self.StarConditionTacticRankSCount());
      ds.field("StarConditionTurnCount", &self.StarConditionTurnCount());
      ds.field("EnterScenarioGroupId", &self.EnterScenarioGroupId());
      ds.field("ClearScenarioGroupId", &self.ClearScenarioGroupId());
      ds.field("StrategyMap", &self.StrategyMap());
      ds.field("StrategyMapBG", &self.StrategyMapBG());
      ds.field("CampaignStageRewardId", &self.CampaignStageRewardId());
      ds.field("MaxTurn", &self.MaxTurn());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("RecommandLevelGapForGuide", &self.RecommandLevelGapForGuide());
      ds.field("MinEquipmentTierForGuide", &self.MinEquipmentTierForGuide());
      ds.field("MinSkillLevelForGuide", &self.MinSkillLevelForGuide());
      ds.field("BgmId", &self.BgmId());
      ds.field("StrategyEnvironment", &self.StrategyEnvironment());
      ds.field("GroundId", &self.GroundId());
      ds.field("StrategySkipGroundId", &self.StrategySkipGroundId());
      ds.field("ContentType", &self.ContentType());
      ds.field("BGMId", &self.BGMId());
      ds.field("FirstClearReportEventName", &self.FirstClearReportEventName());
      ds.field("TacticRewardExp", &self.TacticRewardExp());
      ds.field("FixedEchelonId", &self.FixedEchelonId());
      ds.field("EchelonExtensionType", &self.EchelonExtensionType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CampaignStageExcelT {
  pub Id: i64,
  pub Deprecated: bool,
  pub Name: Option<String>,
  pub StageNumber: Option<String>,
  pub CleardScenarioId: i64,
  pub BattleDuration: i64,
  pub StageEnterCostType: ParcelType,
  pub StageEnterCostId: i64,
  pub StageEnterCostAmount: i32,
  pub StageEnterEchelonCount: i32,
  pub StarConditionTacticRankSCount: i64,
  pub StarConditionTurnCount: i64,
  pub EnterScenarioGroupId: Option<Vec<i64>>,
  pub ClearScenarioGroupId: Option<Vec<i64>>,
  pub StrategyMap: Option<String>,
  pub StrategyMapBG: Option<String>,
  pub CampaignStageRewardId: i64,
  pub MaxTurn: i32,
  pub StageTopography: StageTopography,
  pub RecommandLevel: i32,
  pub RecommandLevelGapForGuide: i32,
  pub MinEquipmentTierForGuide: Option<Vec<i64>>,
  pub MinSkillLevelForGuide: Option<Vec<i64>>,
  pub BgmId: Option<String>,
  pub StrategyEnvironment: StrategyEnvironment,
  pub GroundId: i64,
  pub StrategySkipGroundId: i32,
  pub ContentType: ContentType,
  pub BGMId: i64,
  pub FirstClearReportEventName: Option<String>,
  pub TacticRewardExp: i64,
  pub FixedEchelonId: i64,
  pub EchelonExtensionType: EchelonExtensionType,
}
impl Default for CampaignStageExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Deprecated: false,
      Name: None,
      StageNumber: None,
      CleardScenarioId: 0,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageEnterEchelonCount: 0,
      StarConditionTacticRankSCount: 0,
      StarConditionTurnCount: 0,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      StrategyMap: None,
      StrategyMapBG: None,
      CampaignStageRewardId: 0,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      RecommandLevelGapForGuide: 0,
      MinEquipmentTierForGuide: None,
      MinSkillLevelForGuide: None,
      BgmId: None,
      StrategyEnvironment: StrategyEnvironment::None,
      GroundId: 0,
      StrategySkipGroundId: 0,
      ContentType: ContentType::None,
      BGMId: 0,
      FirstClearReportEventName: None,
      TacticRewardExp: 0,
      FixedEchelonId: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}
impl CampaignStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CampaignStageExcel<'b>> {
    let Id = self.Id;
    let Deprecated = self.Deprecated;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StageNumber = self.StageNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CleardScenarioId = self.CleardScenarioId;
    let BattleDuration = self.BattleDuration;
    let StageEnterCostType = self.StageEnterCostType;
    let StageEnterCostId = self.StageEnterCostId;
    let StageEnterCostAmount = self.StageEnterCostAmount;
    let StageEnterEchelonCount = self.StageEnterEchelonCount;
    let StarConditionTacticRankSCount = self.StarConditionTacticRankSCount;
    let StarConditionTurnCount = self.StarConditionTurnCount;
    let EnterScenarioGroupId = self.EnterScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StrategyMap = self.StrategyMap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyMapBG = self.StrategyMapBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CampaignStageRewardId = self.CampaignStageRewardId;
    let MaxTurn = self.MaxTurn;
    let StageTopography = self.StageTopography;
    let RecommandLevel = self.RecommandLevel;
    let RecommandLevelGapForGuide = self.RecommandLevelGapForGuide;
    let MinEquipmentTierForGuide = self.MinEquipmentTierForGuide.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MinSkillLevelForGuide = self.MinSkillLevelForGuide.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BgmId = self.BgmId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyEnvironment = self.StrategyEnvironment;
    let GroundId = self.GroundId;
    let StrategySkipGroundId = self.StrategySkipGroundId;
    let ContentType = self.ContentType;
    let BGMId = self.BGMId;
    let FirstClearReportEventName = self.FirstClearReportEventName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TacticRewardExp = self.TacticRewardExp;
    let FixedEchelonId = self.FixedEchelonId;
    let EchelonExtensionType = self.EchelonExtensionType;
    CampaignStageExcel::create(_fbb, &CampaignStageExcelArgs{
      Id,
      Deprecated,
      Name,
      StageNumber,
      CleardScenarioId,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterEchelonCount,
      StarConditionTacticRankSCount,
      StarConditionTurnCount,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      StrategyMap,
      StrategyMapBG,
      CampaignStageRewardId,
      MaxTurn,
      StageTopography,
      RecommandLevel,
      RecommandLevelGapForGuide,
      MinEquipmentTierForGuide,
      MinSkillLevelForGuide,
      BgmId,
      StrategyEnvironment,
      GroundId,
      StrategySkipGroundId,
      ContentType,
      BGMId,
      FirstClearReportEventName,
      TacticRewardExp,
      FixedEchelonId,
      EchelonExtensionType,
    })
  }
}
