// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EXTERNAL_BEHAVIOR: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EXTERNAL_BEHAVIOR: i32 = 17;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EXTERNAL_BEHAVIOR: [ExternalBehavior; 18] = [
  ExternalBehavior::UseNextExSkill,
  ExternalBehavior::ChangePhase,
  ExternalBehavior::ChangeSection,
  ExternalBehavior::AddActiveGauge,
  ExternalBehavior::UseSelectExSkill,
  ExternalBehavior::ClearNormalSkill,
  ExternalBehavior::MoveLeft,
  ExternalBehavior::MoveRight,
  ExternalBehavior::AllUseSelectExSkill,
  ExternalBehavior::ConnectCharacterToDummy,
  ExternalBehavior::ConnectExSkillToParts,
  ExternalBehavior::SetMaxHPToParts,
  ExternalBehavior::AlivePartsUseExSkill,
  ExternalBehavior::ActivatePart,
  ExternalBehavior::AddGroggy,
  ExternalBehavior::SelectTargetToUseSkillAlly,
  ExternalBehavior::ForceChangePhase,
  ExternalBehavior::ClearUseSkillEndGroupId,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ExternalBehavior(pub i32);
#[allow(non_upper_case_globals)]
impl ExternalBehavior {
  pub const UseNextExSkill: Self = Self(0);
  pub const ChangePhase: Self = Self(1);
  pub const ChangeSection: Self = Self(2);
  pub const AddActiveGauge: Self = Self(3);
  pub const UseSelectExSkill: Self = Self(4);
  pub const ClearNormalSkill: Self = Self(5);
  pub const MoveLeft: Self = Self(6);
  pub const MoveRight: Self = Self(7);
  pub const AllUseSelectExSkill: Self = Self(8);
  pub const ConnectCharacterToDummy: Self = Self(9);
  pub const ConnectExSkillToParts: Self = Self(10);
  pub const SetMaxHPToParts: Self = Self(11);
  pub const AlivePartsUseExSkill: Self = Self(12);
  pub const ActivatePart: Self = Self(13);
  pub const AddGroggy: Self = Self(14);
  pub const SelectTargetToUseSkillAlly: Self = Self(15);
  pub const ForceChangePhase: Self = Self(16);
  pub const ClearUseSkillEndGroupId: Self = Self(17);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 17;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::UseNextExSkill,
    Self::ChangePhase,
    Self::ChangeSection,
    Self::AddActiveGauge,
    Self::UseSelectExSkill,
    Self::ClearNormalSkill,
    Self::MoveLeft,
    Self::MoveRight,
    Self::AllUseSelectExSkill,
    Self::ConnectCharacterToDummy,
    Self::ConnectExSkillToParts,
    Self::SetMaxHPToParts,
    Self::AlivePartsUseExSkill,
    Self::ActivatePart,
    Self::AddGroggy,
    Self::SelectTargetToUseSkillAlly,
    Self::ForceChangePhase,
    Self::ClearUseSkillEndGroupId,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::UseNextExSkill => Some("UseNextExSkill"),
      Self::ChangePhase => Some("ChangePhase"),
      Self::ChangeSection => Some("ChangeSection"),
      Self::AddActiveGauge => Some("AddActiveGauge"),
      Self::UseSelectExSkill => Some("UseSelectExSkill"),
      Self::ClearNormalSkill => Some("ClearNormalSkill"),
      Self::MoveLeft => Some("MoveLeft"),
      Self::MoveRight => Some("MoveRight"),
      Self::AllUseSelectExSkill => Some("AllUseSelectExSkill"),
      Self::ConnectCharacterToDummy => Some("ConnectCharacterToDummy"),
      Self::ConnectExSkillToParts => Some("ConnectExSkillToParts"),
      Self::SetMaxHPToParts => Some("SetMaxHPToParts"),
      Self::AlivePartsUseExSkill => Some("AlivePartsUseExSkill"),
      Self::ActivatePart => Some("ActivatePart"),
      Self::AddGroggy => Some("AddGroggy"),
      Self::SelectTargetToUseSkillAlly => Some("SelectTargetToUseSkillAlly"),
      Self::ForceChangePhase => Some("ForceChangePhase"),
      Self::ClearUseSkillEndGroupId => Some("ClearUseSkillEndGroupId"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ExternalBehavior {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for ExternalBehavior {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("ExternalBehavior", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for ExternalBehavior {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ExternalBehavior {
    type Output = ExternalBehavior;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ExternalBehavior {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ExternalBehavior {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ExternalBehavior {}
