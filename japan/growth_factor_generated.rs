// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GROWTH_FACTOR: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GROWTH_FACTOR: i32 = 18;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GROWTH_FACTOR: [GrowthFactor; 19] = [
  GrowthFactor::CharacterLevel,
  GrowthFactor::CharacterGrade,
  GrowthFactor::ExSkillLevel,
  GrowthFactor::PublicSkillLevel,
  GrowthFactor::PassiveSkillLevel,
  GrowthFactor::ExtraPassiveSkillLevel,
  GrowthFactor::Equipment01Tier,
  GrowthFactor::Equipment01Level,
  GrowthFactor::Equipment02Tier,
  GrowthFactor::Equipment02Level,
  GrowthFactor::Equipment03Tier,
  GrowthFactor::Equipment03Level,
  GrowthFactor::CharacterWeaponTier,
  GrowthFactor::CharacterWeponLevel,
  GrowthFactor::PotentialStat01Level,
  GrowthFactor::PotentialStat02Level,
  GrowthFactor::PotentialStat03Level,
  GrowthFactor::FavorRank,
  GrowthFactor::Max,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GrowthFactor(pub i32);
#[allow(non_upper_case_globals)]
impl GrowthFactor {
  pub const CharacterLevel: Self = Self(0);
  pub const CharacterGrade: Self = Self(1);
  pub const ExSkillLevel: Self = Self(2);
  pub const PublicSkillLevel: Self = Self(3);
  pub const PassiveSkillLevel: Self = Self(4);
  pub const ExtraPassiveSkillLevel: Self = Self(5);
  pub const Equipment01Tier: Self = Self(6);
  pub const Equipment01Level: Self = Self(7);
  pub const Equipment02Tier: Self = Self(8);
  pub const Equipment02Level: Self = Self(9);
  pub const Equipment03Tier: Self = Self(10);
  pub const Equipment03Level: Self = Self(11);
  pub const CharacterWeaponTier: Self = Self(12);
  pub const CharacterWeponLevel: Self = Self(13);
  pub const PotentialStat01Level: Self = Self(14);
  pub const PotentialStat02Level: Self = Self(15);
  pub const PotentialStat03Level: Self = Self(16);
  pub const FavorRank: Self = Self(17);
  pub const Max: Self = Self(18);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 18;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::CharacterLevel,
    Self::CharacterGrade,
    Self::ExSkillLevel,
    Self::PublicSkillLevel,
    Self::PassiveSkillLevel,
    Self::ExtraPassiveSkillLevel,
    Self::Equipment01Tier,
    Self::Equipment01Level,
    Self::Equipment02Tier,
    Self::Equipment02Level,
    Self::Equipment03Tier,
    Self::Equipment03Level,
    Self::CharacterWeaponTier,
    Self::CharacterWeponLevel,
    Self::PotentialStat01Level,
    Self::PotentialStat02Level,
    Self::PotentialStat03Level,
    Self::FavorRank,
    Self::Max,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::CharacterLevel => Some("CharacterLevel"),
      Self::CharacterGrade => Some("CharacterGrade"),
      Self::ExSkillLevel => Some("ExSkillLevel"),
      Self::PublicSkillLevel => Some("PublicSkillLevel"),
      Self::PassiveSkillLevel => Some("PassiveSkillLevel"),
      Self::ExtraPassiveSkillLevel => Some("ExtraPassiveSkillLevel"),
      Self::Equipment01Tier => Some("Equipment01Tier"),
      Self::Equipment01Level => Some("Equipment01Level"),
      Self::Equipment02Tier => Some("Equipment02Tier"),
      Self::Equipment02Level => Some("Equipment02Level"),
      Self::Equipment03Tier => Some("Equipment03Tier"),
      Self::Equipment03Level => Some("Equipment03Level"),
      Self::CharacterWeaponTier => Some("CharacterWeaponTier"),
      Self::CharacterWeponLevel => Some("CharacterWeponLevel"),
      Self::PotentialStat01Level => Some("PotentialStat01Level"),
      Self::PotentialStat02Level => Some("PotentialStat02Level"),
      Self::PotentialStat03Level => Some("PotentialStat03Level"),
      Self::FavorRank => Some("FavorRank"),
      Self::Max => Some("Max"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GrowthFactor {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for GrowthFactor {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("GrowthFactor", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for GrowthFactor {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GrowthFactor {
    type Output = GrowthFactor;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GrowthFactor {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GrowthFactor {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GrowthFactor {}
