// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SkillExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SkillExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SkillExcel<'a> {
  type Inner = SkillExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SkillExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZESKILLID: flatbuffers::VOffsetT = 6;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_SKILLDATAKEY: flatbuffers::VOffsetT = 10;
  pub const VT_VISUALDATAKEY: flatbuffers::VOffsetT = 12;
  pub const VT_LEVEL: flatbuffers::VOffsetT = 14;
  pub const VT_SKILLCOST: flatbuffers::VOffsetT = 16;
  pub const VT_EXTRASKILLCOST: flatbuffers::VOffsetT = 18;
  pub const VT_ENEMYSKILLCOST: flatbuffers::VOffsetT = 20;
  pub const VT_EXTRAENEMYSKILLCOST: flatbuffers::VOffsetT = 22;
  pub const VT_NPCSKILLCOST: flatbuffers::VOffsetT = 24;
  pub const VT_EXTRANPCSKILLCOST: flatbuffers::VOffsetT = 26;
  pub const VT_BULLETTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_STARTCOOLTIME: flatbuffers::VOffsetT = 30;
  pub const VT_COOLTIME: flatbuffers::VOffsetT = 32;
  pub const VT_ENEMYSTARTCOOLTIME: flatbuffers::VOffsetT = 34;
  pub const VT_ENEMYCOOLTIME: flatbuffers::VOffsetT = 36;
  pub const VT_NPCSTARTCOOLTIME: flatbuffers::VOffsetT = 38;
  pub const VT_NPCCOOLTIME: flatbuffers::VOffsetT = 40;
  pub const VT_USEATG: flatbuffers::VOffsetT = 42;
  pub const VT_REQUIRECHARACTERLEVEL: flatbuffers::VOffsetT = 44;
  pub const VT_REQUIRELEVELUPMATERIAL: flatbuffers::VOffsetT = 46;
  pub const VT_ICONNAME: flatbuffers::VOffsetT = 48;
  pub const VT_ISSHOWINFO: flatbuffers::VOffsetT = 50;
  pub const VT_ISSHOWSPEECHBUBBLE: flatbuffers::VOffsetT = 52;
  pub const VT_PUBLICSPEECHDURATION: flatbuffers::VOffsetT = 54;
  pub const VT_ADDITIONALTOOLTIPID: flatbuffers::VOffsetT = 56;
  pub const VT_SELECTEXSKILLTOOLTIPID: flatbuffers::VOffsetT = 58;
  pub const VT_TEXTURESKILLCARDFORFORMCONVERSION: flatbuffers::VOffsetT = 60;
  pub const VT_SKILLCARDLABELPATH: flatbuffers::VOffsetT = 62;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SkillExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SkillExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<SkillExcel<'bldr>> {
    let mut builder = SkillExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Skill");
      let x = args.SelectExSkillToolTipId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SelectExSkillToolTipId(x);
      let x = args.AdditionalToolTipId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AdditionalToolTipId(x);
      let x = args.RequireLevelUpMaterial;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RequireLevelUpMaterial(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.SkillCardLabelPath {
        builder.add_SkillCardLabelPath(x);
      }
      if let Some(x) = args.TextureSkillCardForFormConversion {
        builder.add_TextureSkillCardForFormConversion(x);
      }
      let x = args.PublicSpeechDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PublicSpeechDuration(x);
      if let Some(x) = args.IconName {
        builder.add_IconName(x);
      }
      let x = args.RequireCharacterLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RequireCharacterLevel(x);
      let x = args.UseAtg;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_UseAtg(x);
      let x = args.NPCCoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NPCCoolTime(x);
      let x = args.NPCStartCoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NPCStartCoolTime(x);
      let x = args.EnemyCoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EnemyCoolTime(x);
      let x = args.EnemyStartCoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EnemyStartCoolTime(x);
      let x = args.CoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CoolTime(x);
      let x = args.StartCoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StartCoolTime(x);
      let x = args.BulletType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_BulletType(x);
      let x = args.ExtraNPCSkillCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExtraNPCSkillCost(x);
      let x = args.NPCSkillCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NPCSkillCost(x);
      let x = args.ExtraEnemySkillCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExtraEnemySkillCost(x);
      let x = args.EnemySkillCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EnemySkillCost(x);
      let x = args.ExtraSkillCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExtraSkillCost(x);
      let x = args.SkillCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SkillCost(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Level(x);
      if let Some(x) = args.VisualDataKey {
        builder.add_VisualDataKey(x);
      }
      if let Some(x) = args.SkillDataKey {
        builder.add_SkillDataKey(x);
      }
      if let Some(x) = args.GroupId {
        builder.add_GroupId(x);
      }
      let x = args.LocalizeSkillId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeSkillId(x);
      builder.add_IsShowSpeechbubble(args.IsShowSpeechbubble);
      builder.add_IsShowInfo(args.IsShowInfo);
    builder.finish()
  }

  pub fn unpack(&self) -> SkillExcelT {
    let key = table_encryption_service::create_key(b"Skill");
      let Id = self.Id();
      let LocalizeSkillId = self.LocalizeSkillId();
    let GroupId = self.GroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SkillDataKey = self.SkillDataKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VisualDataKey = self.VisualDataKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Level = self.Level();
      let SkillCost = self.SkillCost();
      let ExtraSkillCost = self.ExtraSkillCost();
      let EnemySkillCost = self.EnemySkillCost();
      let ExtraEnemySkillCost = self.ExtraEnemySkillCost();
      let NPCSkillCost = self.NPCSkillCost();
      let ExtraNPCSkillCost = self.ExtraNPCSkillCost();
      let BulletType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.BulletType(), &key)
      } else {
        self.BulletType()
      };
      let StartCoolTime = self.StartCoolTime();
      let CoolTime = self.CoolTime();
      let EnemyStartCoolTime = self.EnemyStartCoolTime();
      let EnemyCoolTime = self.EnemyCoolTime();
      let NPCStartCoolTime = self.NPCStartCoolTime();
      let NPCCoolTime = self.NPCCoolTime();
      let UseAtg = self.UseAtg();
      let RequireCharacterLevel = self.RequireCharacterLevel();
      let RequireLevelUpMaterial = self.RequireLevelUpMaterial();
    let IconName = self.IconName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IsShowInfo = self.IsShowInfo();
      let IsShowSpeechbubble = self.IsShowSpeechbubble();
      let PublicSpeechDuration = self.PublicSpeechDuration();
      let AdditionalToolTipId = self.AdditionalToolTipId();
      let SelectExSkillToolTipId = self.SelectExSkillToolTipId();
    let TextureSkillCardForFormConversion = self.TextureSkillCardForFormConversion().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SkillCardLabelPath = self.SkillCardLabelPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    SkillExcelT {
      Id,
      LocalizeSkillId,
      GroupId,
      SkillDataKey,
      VisualDataKey,
      Level,
      SkillCost,
      ExtraSkillCost,
      EnemySkillCost,
      ExtraEnemySkillCost,
      NPCSkillCost,
      ExtraNPCSkillCost,
      BulletType,
      StartCoolTime,
      CoolTime,
      EnemyStartCoolTime,
      EnemyCoolTime,
      NPCStartCoolTime,
      NPCCoolTime,
      UseAtg,
      RequireCharacterLevel,
      RequireLevelUpMaterial,
      IconName,
      IsShowInfo,
      IsShowSpeechbubble,
      PublicSpeechDuration,
      AdditionalToolTipId,
      SelectExSkillToolTipId,
      TextureSkillCardForFormConversion,
      SkillCardLabelPath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SkillExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeSkillId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(SkillExcel::VT_LOCALIZESKILLID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillExcel::VT_GROUPID, None)}
  }
  #[inline]
  pub fn SkillDataKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillExcel::VT_SKILLDATAKEY, None)}
  }
  #[inline]
  pub fn VisualDataKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillExcel::VT_VISUALDATAKEY, None)}
  }
  #[inline]
  pub fn Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkillCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_SKILLCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraSkillCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_EXTRASKILLCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnemySkillCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_ENEMYSKILLCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraEnemySkillCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_EXTRAENEMYSKILLCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NPCSkillCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_NPCSKILLCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraNPCSkillCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_EXTRANPCSKILLCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BulletType(&self) -> BulletType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BulletType>(SkillExcel::VT_BULLETTYPE, Some(BulletType::Normal)).unwrap()}
  }
  #[inline]
  pub fn StartCoolTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_STARTCOOLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CoolTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_COOLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnemyStartCoolTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_ENEMYSTARTCOOLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnemyCoolTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_ENEMYCOOLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NPCStartCoolTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_NPCSTARTCOOLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NPCCoolTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_NPCCOOLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UseAtg(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_USEATG, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequireCharacterLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_REQUIRECHARACTERLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequireLevelUpMaterial(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SkillExcel::VT_REQUIRELEVELUPMATERIAL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillExcel::VT_ICONNAME, None)}
  }
  #[inline]
  pub fn IsShowInfo(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SkillExcel::VT_ISSHOWINFO, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsShowSpeechbubble(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SkillExcel::VT_ISSHOWSPEECHBUBBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn PublicSpeechDuration(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkillExcel::VT_PUBLICSPEECHDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AdditionalToolTipId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SkillExcel::VT_ADDITIONALTOOLTIPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SelectExSkillToolTipId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SkillExcel::VT_SELECTEXSKILLTOOLTIPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TextureSkillCardForFormConversion(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillExcel::VT_TEXTURESKILLCARDFORFORMCONVERSION, None)}
  }
  #[inline]
  pub fn SkillCardLabelPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillExcel::VT_SKILLCARDLABELPATH, None)}
  }
}

impl flatbuffers::Verifiable for SkillExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeSkillId", Self::VT_LOCALIZESKILLID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillDataKey", Self::VT_SKILLDATAKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VisualDataKey", Self::VT_VISUALDATAKEY, false)?
     .visit_field::<i32>("Level", Self::VT_LEVEL, false)?
     .visit_field::<i32>("SkillCost", Self::VT_SKILLCOST, false)?
     .visit_field::<i32>("ExtraSkillCost", Self::VT_EXTRASKILLCOST, false)?
     .visit_field::<i32>("EnemySkillCost", Self::VT_ENEMYSKILLCOST, false)?
     .visit_field::<i32>("ExtraEnemySkillCost", Self::VT_EXTRAENEMYSKILLCOST, false)?
     .visit_field::<i32>("NPCSkillCost", Self::VT_NPCSKILLCOST, false)?
     .visit_field::<i32>("ExtraNPCSkillCost", Self::VT_EXTRANPCSKILLCOST, false)?
     .visit_field::<BulletType>("BulletType", Self::VT_BULLETTYPE, false)?
     .visit_field::<i32>("StartCoolTime", Self::VT_STARTCOOLTIME, false)?
     .visit_field::<i32>("CoolTime", Self::VT_COOLTIME, false)?
     .visit_field::<i32>("EnemyStartCoolTime", Self::VT_ENEMYSTARTCOOLTIME, false)?
     .visit_field::<i32>("EnemyCoolTime", Self::VT_ENEMYCOOLTIME, false)?
     .visit_field::<i32>("NPCStartCoolTime", Self::VT_NPCSTARTCOOLTIME, false)?
     .visit_field::<i32>("NPCCoolTime", Self::VT_NPCCOOLTIME, false)?
     .visit_field::<i32>("UseAtg", Self::VT_USEATG, false)?
     .visit_field::<i32>("RequireCharacterLevel", Self::VT_REQUIRECHARACTERLEVEL, false)?
     .visit_field::<i64>("RequireLevelUpMaterial", Self::VT_REQUIRELEVELUPMATERIAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconName", Self::VT_ICONNAME, false)?
     .visit_field::<bool>("IsShowInfo", Self::VT_ISSHOWINFO, false)?
     .visit_field::<bool>("IsShowSpeechbubble", Self::VT_ISSHOWSPEECHBUBBLE, false)?
     .visit_field::<i32>("PublicSpeechDuration", Self::VT_PUBLICSPEECHDURATION, false)?
     .visit_field::<i64>("AdditionalToolTipId", Self::VT_ADDITIONALTOOLTIPID, false)?
     .visit_field::<i64>("SelectExSkillToolTipId", Self::VT_SELECTEXSKILLTOOLTIPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TextureSkillCardForFormConversion", Self::VT_TEXTURESKILLCARDFORFORMCONVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillCardLabelPath", Self::VT_SKILLCARDLABELPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct SkillExcelArgs<'a> {
    pub Id: i64,
    pub LocalizeSkillId: u32,
    pub GroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SkillDataKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VisualDataKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Level: i32,
    pub SkillCost: i32,
    pub ExtraSkillCost: i32,
    pub EnemySkillCost: i32,
    pub ExtraEnemySkillCost: i32,
    pub NPCSkillCost: i32,
    pub ExtraNPCSkillCost: i32,
    pub BulletType: BulletType,
    pub StartCoolTime: i32,
    pub CoolTime: i32,
    pub EnemyStartCoolTime: i32,
    pub EnemyCoolTime: i32,
    pub NPCStartCoolTime: i32,
    pub NPCCoolTime: i32,
    pub UseAtg: i32,
    pub RequireCharacterLevel: i32,
    pub RequireLevelUpMaterial: i64,
    pub IconName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IsShowInfo: bool,
    pub IsShowSpeechbubble: bool,
    pub PublicSpeechDuration: i32,
    pub AdditionalToolTipId: i64,
    pub SelectExSkillToolTipId: i64,
    pub TextureSkillCardForFormConversion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SkillCardLabelPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SkillExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SkillExcelArgs {
      Id: 0,
      LocalizeSkillId: 0,
      GroupId: None,
      SkillDataKey: None,
      VisualDataKey: None,
      Level: 0,
      SkillCost: 0,
      ExtraSkillCost: 0,
      EnemySkillCost: 0,
      ExtraEnemySkillCost: 0,
      NPCSkillCost: 0,
      ExtraNPCSkillCost: 0,
      BulletType: BulletType::Normal,
      StartCoolTime: 0,
      CoolTime: 0,
      EnemyStartCoolTime: 0,
      EnemyCoolTime: 0,
      NPCStartCoolTime: 0,
      NPCCoolTime: 0,
      UseAtg: 0,
      RequireCharacterLevel: 0,
      RequireLevelUpMaterial: 0,
      IconName: None,
      IsShowInfo: false,
      IsShowSpeechbubble: false,
      PublicSpeechDuration: 0,
      AdditionalToolTipId: 0,
      SelectExSkillToolTipId: 0,
      TextureSkillCardForFormConversion: None,
      SkillCardLabelPath: None,
    }
  }
}

impl Serialize for SkillExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SkillExcel", 30)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeSkillId", &self.LocalizeSkillId())?;
      if let Some(f) = self.GroupId() {
        s.serialize_field("GroupId", &f)?;
      } else {
        s.skip_field("GroupId")?;
      }
      if let Some(f) = self.SkillDataKey() {
        s.serialize_field("SkillDataKey", &f)?;
      } else {
        s.skip_field("SkillDataKey")?;
      }
      if let Some(f) = self.VisualDataKey() {
        s.serialize_field("VisualDataKey", &f)?;
      } else {
        s.skip_field("VisualDataKey")?;
      }
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("SkillCost", &self.SkillCost())?;
      s.serialize_field("ExtraSkillCost", &self.ExtraSkillCost())?;
      s.serialize_field("EnemySkillCost", &self.EnemySkillCost())?;
      s.serialize_field("ExtraEnemySkillCost", &self.ExtraEnemySkillCost())?;
      s.serialize_field("NPCSkillCost", &self.NPCSkillCost())?;
      s.serialize_field("ExtraNPCSkillCost", &self.ExtraNPCSkillCost())?;
      s.serialize_field("BulletType", &self.BulletType())?;
      s.serialize_field("StartCoolTime", &self.StartCoolTime())?;
      s.serialize_field("CoolTime", &self.CoolTime())?;
      s.serialize_field("EnemyStartCoolTime", &self.EnemyStartCoolTime())?;
      s.serialize_field("EnemyCoolTime", &self.EnemyCoolTime())?;
      s.serialize_field("NPCStartCoolTime", &self.NPCStartCoolTime())?;
      s.serialize_field("NPCCoolTime", &self.NPCCoolTime())?;
      s.serialize_field("UseAtg", &self.UseAtg())?;
      s.serialize_field("RequireCharacterLevel", &self.RequireCharacterLevel())?;
      s.serialize_field("RequireLevelUpMaterial", &self.RequireLevelUpMaterial())?;
      if let Some(f) = self.IconName() {
        s.serialize_field("IconName", &f)?;
      } else {
        s.skip_field("IconName")?;
      }
      s.serialize_field("IsShowInfo", &self.IsShowInfo())?;
      s.serialize_field("IsShowSpeechbubble", &self.IsShowSpeechbubble())?;
      s.serialize_field("PublicSpeechDuration", &self.PublicSpeechDuration())?;
      s.serialize_field("AdditionalToolTipId", &self.AdditionalToolTipId())?;
      s.serialize_field("SelectExSkillToolTipId", &self.SelectExSkillToolTipId())?;
      if let Some(f) = self.TextureSkillCardForFormConversion() {
        s.serialize_field("TextureSkillCardForFormConversion", &f)?;
      } else {
        s.skip_field("TextureSkillCardForFormConversion")?;
      }
      if let Some(f) = self.SkillCardLabelPath() {
        s.serialize_field("SkillCardLabelPath", &f)?;
      } else {
        s.skip_field("SkillCardLabelPath")?;
      }
    s.end()
  }
}

pub struct SkillExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SkillExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(SkillExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeSkillId(&mut self, LocalizeSkillId: u32) {
    self.fbb_.push_slot::<u32>(SkillExcel::VT_LOCALIZESKILLID, LocalizeSkillId, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillExcel::VT_GROUPID, GroupId);
  }
  #[inline]
  pub fn add_SkillDataKey(&mut self, SkillDataKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillExcel::VT_SKILLDATAKEY, SkillDataKey);
  }
  #[inline]
  pub fn add_VisualDataKey(&mut self, VisualDataKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillExcel::VT_VISUALDATAKEY, VisualDataKey);
  }
  #[inline]
  pub fn add_Level(&mut self, Level: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_SkillCost(&mut self, SkillCost: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_SKILLCOST, SkillCost, 0);
  }
  #[inline]
  pub fn add_ExtraSkillCost(&mut self, ExtraSkillCost: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_EXTRASKILLCOST, ExtraSkillCost, 0);
  }
  #[inline]
  pub fn add_EnemySkillCost(&mut self, EnemySkillCost: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_ENEMYSKILLCOST, EnemySkillCost, 0);
  }
  #[inline]
  pub fn add_ExtraEnemySkillCost(&mut self, ExtraEnemySkillCost: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_EXTRAENEMYSKILLCOST, ExtraEnemySkillCost, 0);
  }
  #[inline]
  pub fn add_NPCSkillCost(&mut self, NPCSkillCost: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_NPCSKILLCOST, NPCSkillCost, 0);
  }
  #[inline]
  pub fn add_ExtraNPCSkillCost(&mut self, ExtraNPCSkillCost: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_EXTRANPCSKILLCOST, ExtraNPCSkillCost, 0);
  }
  #[inline]
  pub fn add_BulletType(&mut self, BulletType: BulletType) {
    self.fbb_.push_slot::<BulletType>(SkillExcel::VT_BULLETTYPE, BulletType, BulletType::Normal);
  }
  #[inline]
  pub fn add_StartCoolTime(&mut self, StartCoolTime: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_STARTCOOLTIME, StartCoolTime, 0);
  }
  #[inline]
  pub fn add_CoolTime(&mut self, CoolTime: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_COOLTIME, CoolTime, 0);
  }
  #[inline]
  pub fn add_EnemyStartCoolTime(&mut self, EnemyStartCoolTime: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_ENEMYSTARTCOOLTIME, EnemyStartCoolTime, 0);
  }
  #[inline]
  pub fn add_EnemyCoolTime(&mut self, EnemyCoolTime: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_ENEMYCOOLTIME, EnemyCoolTime, 0);
  }
  #[inline]
  pub fn add_NPCStartCoolTime(&mut self, NPCStartCoolTime: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_NPCSTARTCOOLTIME, NPCStartCoolTime, 0);
  }
  #[inline]
  pub fn add_NPCCoolTime(&mut self, NPCCoolTime: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_NPCCOOLTIME, NPCCoolTime, 0);
  }
  #[inline]
  pub fn add_UseAtg(&mut self, UseAtg: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_USEATG, UseAtg, 0);
  }
  #[inline]
  pub fn add_RequireCharacterLevel(&mut self, RequireCharacterLevel: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_REQUIRECHARACTERLEVEL, RequireCharacterLevel, 0);
  }
  #[inline]
  pub fn add_RequireLevelUpMaterial(&mut self, RequireLevelUpMaterial: i64) {
    self.fbb_.push_slot::<i64>(SkillExcel::VT_REQUIRELEVELUPMATERIAL, RequireLevelUpMaterial, 0);
  }
  #[inline]
  pub fn add_IconName(&mut self, IconName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillExcel::VT_ICONNAME, IconName);
  }
  #[inline]
  pub fn add_IsShowInfo(&mut self, IsShowInfo: bool) {
    self.fbb_.push_slot::<bool>(SkillExcel::VT_ISSHOWINFO, IsShowInfo, false);
  }
  #[inline]
  pub fn add_IsShowSpeechbubble(&mut self, IsShowSpeechbubble: bool) {
    self.fbb_.push_slot::<bool>(SkillExcel::VT_ISSHOWSPEECHBUBBLE, IsShowSpeechbubble, false);
  }
  #[inline]
  pub fn add_PublicSpeechDuration(&mut self, PublicSpeechDuration: i32) {
    self.fbb_.push_slot::<i32>(SkillExcel::VT_PUBLICSPEECHDURATION, PublicSpeechDuration, 0);
  }
  #[inline]
  pub fn add_AdditionalToolTipId(&mut self, AdditionalToolTipId: i64) {
    self.fbb_.push_slot::<i64>(SkillExcel::VT_ADDITIONALTOOLTIPID, AdditionalToolTipId, 0);
  }
  #[inline]
  pub fn add_SelectExSkillToolTipId(&mut self, SelectExSkillToolTipId: i64) {
    self.fbb_.push_slot::<i64>(SkillExcel::VT_SELECTEXSKILLTOOLTIPID, SelectExSkillToolTipId, 0);
  }
  #[inline]
  pub fn add_TextureSkillCardForFormConversion(&mut self, TextureSkillCardForFormConversion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillExcel::VT_TEXTURESKILLCARDFORFORMCONVERSION, TextureSkillCardForFormConversion);
  }
  #[inline]
  pub fn add_SkillCardLabelPath(&mut self, SkillCardLabelPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillExcel::VT_SKILLCARDLABELPATH, SkillCardLabelPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SkillExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SkillExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SkillExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SkillExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SkillExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeSkillId", &self.LocalizeSkillId());
      ds.field("GroupId", &self.GroupId());
      ds.field("SkillDataKey", &self.SkillDataKey());
      ds.field("VisualDataKey", &self.VisualDataKey());
      ds.field("Level", &self.Level());
      ds.field("SkillCost", &self.SkillCost());
      ds.field("ExtraSkillCost", &self.ExtraSkillCost());
      ds.field("EnemySkillCost", &self.EnemySkillCost());
      ds.field("ExtraEnemySkillCost", &self.ExtraEnemySkillCost());
      ds.field("NPCSkillCost", &self.NPCSkillCost());
      ds.field("ExtraNPCSkillCost", &self.ExtraNPCSkillCost());
      ds.field("BulletType", &self.BulletType());
      ds.field("StartCoolTime", &self.StartCoolTime());
      ds.field("CoolTime", &self.CoolTime());
      ds.field("EnemyStartCoolTime", &self.EnemyStartCoolTime());
      ds.field("EnemyCoolTime", &self.EnemyCoolTime());
      ds.field("NPCStartCoolTime", &self.NPCStartCoolTime());
      ds.field("NPCCoolTime", &self.NPCCoolTime());
      ds.field("UseAtg", &self.UseAtg());
      ds.field("RequireCharacterLevel", &self.RequireCharacterLevel());
      ds.field("RequireLevelUpMaterial", &self.RequireLevelUpMaterial());
      ds.field("IconName", &self.IconName());
      ds.field("IsShowInfo", &self.IsShowInfo());
      ds.field("IsShowSpeechbubble", &self.IsShowSpeechbubble());
      ds.field("PublicSpeechDuration", &self.PublicSpeechDuration());
      ds.field("AdditionalToolTipId", &self.AdditionalToolTipId());
      ds.field("SelectExSkillToolTipId", &self.SelectExSkillToolTipId());
      ds.field("TextureSkillCardForFormConversion", &self.TextureSkillCardForFormConversion());
      ds.field("SkillCardLabelPath", &self.SkillCardLabelPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SkillExcelT {
  pub Id: i64,
  pub LocalizeSkillId: u32,
  pub GroupId: Option<String>,
  pub SkillDataKey: Option<String>,
  pub VisualDataKey: Option<String>,
  pub Level: i32,
  pub SkillCost: i32,
  pub ExtraSkillCost: i32,
  pub EnemySkillCost: i32,
  pub ExtraEnemySkillCost: i32,
  pub NPCSkillCost: i32,
  pub ExtraNPCSkillCost: i32,
  pub BulletType: BulletType,
  pub StartCoolTime: i32,
  pub CoolTime: i32,
  pub EnemyStartCoolTime: i32,
  pub EnemyCoolTime: i32,
  pub NPCStartCoolTime: i32,
  pub NPCCoolTime: i32,
  pub UseAtg: i32,
  pub RequireCharacterLevel: i32,
  pub RequireLevelUpMaterial: i64,
  pub IconName: Option<String>,
  pub IsShowInfo: bool,
  pub IsShowSpeechbubble: bool,
  pub PublicSpeechDuration: i32,
  pub AdditionalToolTipId: i64,
  pub SelectExSkillToolTipId: i64,
  pub TextureSkillCardForFormConversion: Option<String>,
  pub SkillCardLabelPath: Option<String>,
}
impl Default for SkillExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeSkillId: 0,
      GroupId: None,
      SkillDataKey: None,
      VisualDataKey: None,
      Level: 0,
      SkillCost: 0,
      ExtraSkillCost: 0,
      EnemySkillCost: 0,
      ExtraEnemySkillCost: 0,
      NPCSkillCost: 0,
      ExtraNPCSkillCost: 0,
      BulletType: BulletType::Normal,
      StartCoolTime: 0,
      CoolTime: 0,
      EnemyStartCoolTime: 0,
      EnemyCoolTime: 0,
      NPCStartCoolTime: 0,
      NPCCoolTime: 0,
      UseAtg: 0,
      RequireCharacterLevel: 0,
      RequireLevelUpMaterial: 0,
      IconName: None,
      IsShowInfo: false,
      IsShowSpeechbubble: false,
      PublicSpeechDuration: 0,
      AdditionalToolTipId: 0,
      SelectExSkillToolTipId: 0,
      TextureSkillCardForFormConversion: None,
      SkillCardLabelPath: None,
    }
  }
}
impl SkillExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SkillExcel<'b>> {
    let Id = self.Id;
    let LocalizeSkillId = self.LocalizeSkillId;
    let GroupId = self.GroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SkillDataKey = self.SkillDataKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VisualDataKey = self.VisualDataKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Level = self.Level;
    let SkillCost = self.SkillCost;
    let ExtraSkillCost = self.ExtraSkillCost;
    let EnemySkillCost = self.EnemySkillCost;
    let ExtraEnemySkillCost = self.ExtraEnemySkillCost;
    let NPCSkillCost = self.NPCSkillCost;
    let ExtraNPCSkillCost = self.ExtraNPCSkillCost;
    let BulletType = self.BulletType;
    let StartCoolTime = self.StartCoolTime;
    let CoolTime = self.CoolTime;
    let EnemyStartCoolTime = self.EnemyStartCoolTime;
    let EnemyCoolTime = self.EnemyCoolTime;
    let NPCStartCoolTime = self.NPCStartCoolTime;
    let NPCCoolTime = self.NPCCoolTime;
    let UseAtg = self.UseAtg;
    let RequireCharacterLevel = self.RequireCharacterLevel;
    let RequireLevelUpMaterial = self.RequireLevelUpMaterial;
    let IconName = self.IconName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IsShowInfo = self.IsShowInfo;
    let IsShowSpeechbubble = self.IsShowSpeechbubble;
    let PublicSpeechDuration = self.PublicSpeechDuration;
    let AdditionalToolTipId = self.AdditionalToolTipId;
    let SelectExSkillToolTipId = self.SelectExSkillToolTipId;
    let TextureSkillCardForFormConversion = self.TextureSkillCardForFormConversion.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SkillCardLabelPath = self.SkillCardLabelPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SkillExcel::create(_fbb, &SkillExcelArgs{
      Id,
      LocalizeSkillId,
      GroupId,
      SkillDataKey,
      VisualDataKey,
      Level,
      SkillCost,
      ExtraSkillCost,
      EnemySkillCost,
      ExtraEnemySkillCost,
      NPCSkillCost,
      ExtraNPCSkillCost,
      BulletType,
      StartCoolTime,
      CoolTime,
      EnemyStartCoolTime,
      EnemyCoolTime,
      NPCStartCoolTime,
      NPCCoolTime,
      UseAtg,
      RequireCharacterLevel,
      RequireLevelUpMaterial,
      IconName,
      IsShowInfo,
      IsShowSpeechbubble,
      PublicSpeechDuration,
      AdditionalToolTipId,
      SelectExSkillToolTipId,
      TextureSkillCardForFormConversion,
      SkillCardLabelPath,
    })
  }
}
