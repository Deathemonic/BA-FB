// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterTranscendenceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterTranscendenceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterTranscendenceExcel<'a> {
  type Inner = CharacterTranscendenceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterTranscendenceExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_MAXFAVORLEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_STATBONUSRATEATTACK: flatbuffers::VOffsetT = 8;
  pub const VT_STATBONUSRATEHP: flatbuffers::VOffsetT = 10;
  pub const VT_STATBONUSRATEHEAL: flatbuffers::VOffsetT = 12;
  pub const VT_RECIPEID: flatbuffers::VOffsetT = 14;
  pub const VT_SKILLSLOTA: flatbuffers::VOffsetT = 16;
  pub const VT_SKILLSLOTB: flatbuffers::VOffsetT = 18;
  pub const VT_SKILLSLOTC: flatbuffers::VOffsetT = 20;
  pub const VT_MAXLEVELSTAR: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterTranscendenceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterTranscendenceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterTranscendenceExcel<'bldr>> {
    let mut builder = CharacterTranscendenceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterTranscendence");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.MaxlevelStar {
        builder.add_MaxlevelStar(x);
      }
      if let Some(x) = args.SkillSlotC {
        builder.add_SkillSlotC(x);
      }
      if let Some(x) = args.SkillSlotB {
        builder.add_SkillSlotB(x);
      }
      if let Some(x) = args.SkillSlotA {
        builder.add_SkillSlotA(x);
      }
      if let Some(x) = args.RecipeId {
        builder.add_RecipeId(x);
      }
      if let Some(x) = args.StatBonusRateHeal {
        builder.add_StatBonusRateHeal(x);
      }
      if let Some(x) = args.StatBonusRateHP {
        builder.add_StatBonusRateHP(x);
      }
      if let Some(x) = args.StatBonusRateAttack {
        builder.add_StatBonusRateAttack(x);
      }
      if let Some(x) = args.MaxFavorLevel {
        builder.add_MaxFavorLevel(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterTranscendenceExcelT {
    let key = table_encryption_service::create_key(b"CharacterTranscendence");
      let CharacterId = self.CharacterId();
    let MaxFavorLevel = self.MaxFavorLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let StatBonusRateAttack = self.StatBonusRateAttack().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StatBonusRateHP = self.StatBonusRateHP().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StatBonusRateHeal = self.StatBonusRateHeal().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RecipeId = self.RecipeId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let SkillSlotA = self.SkillSlotA().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let SkillSlotB = self.SkillSlotB().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let SkillSlotC = self.SkillSlotC().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let MaxlevelStar = self.MaxlevelStar().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    CharacterTranscendenceExcelT {
      CharacterId,
      MaxFavorLevel,
      StatBonusRateAttack,
      StatBonusRateHP,
      StatBonusRateHeal,
      RecipeId,
      SkillSlotA,
      SkillSlotB,
      SkillSlotC,
      MaxlevelStar,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterTranscendenceExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxFavorLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CharacterTranscendenceExcel::VT_MAXFAVORLEVEL, None)}
  }
  #[inline]
  pub fn StatBonusRateAttack(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_STATBONUSRATEATTACK, None)}
  }
  #[inline]
  pub fn StatBonusRateHP(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHP, None)}
  }
  #[inline]
  pub fn StatBonusRateHeal(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHEAL, None)}
  }
  #[inline]
  pub fn RecipeId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_RECIPEID, None)}
  }
  #[inline]
  pub fn SkillSlotA(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterTranscendenceExcel::VT_SKILLSLOTA, None)}
  }
  #[inline]
  pub fn SkillSlotB(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterTranscendenceExcel::VT_SKILLSLOTB, None)}
  }
  #[inline]
  pub fn SkillSlotC(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterTranscendenceExcel::VT_SKILLSLOTC, None)}
  }
  #[inline]
  pub fn MaxlevelStar(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CharacterTranscendenceExcel::VT_MAXLEVELSTAR, None)}
  }
}

impl flatbuffers::Verifiable for CharacterTranscendenceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MaxFavorLevel", Self::VT_MAXFAVORLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StatBonusRateAttack", Self::VT_STATBONUSRATEATTACK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StatBonusRateHP", Self::VT_STATBONUSRATEHP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StatBonusRateHeal", Self::VT_STATBONUSRATEHEAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RecipeId", Self::VT_RECIPEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("SkillSlotA", Self::VT_SKILLSLOTA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("SkillSlotB", Self::VT_SKILLSLOTB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("SkillSlotC", Self::VT_SKILLSLOTC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MaxlevelStar", Self::VT_MAXLEVELSTAR, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterTranscendenceExcelArgs<'a> {
    pub CharacterId: i64,
    pub MaxFavorLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub StatBonusRateAttack: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StatBonusRateHP: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StatBonusRateHeal: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RecipeId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub SkillSlotA: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub SkillSlotB: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub SkillSlotC: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub MaxlevelStar: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for CharacterTranscendenceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterTranscendenceExcelArgs {
      CharacterId: 0,
      MaxFavorLevel: None,
      StatBonusRateAttack: None,
      StatBonusRateHP: None,
      StatBonusRateHeal: None,
      RecipeId: None,
      SkillSlotA: None,
      SkillSlotB: None,
      SkillSlotC: None,
      MaxlevelStar: None,
    }
  }
}

impl Serialize for CharacterTranscendenceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterTranscendenceExcel", 10)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.MaxFavorLevel() {
        s.serialize_field("MaxFavorLevel", &f)?;
      } else {
        s.skip_field("MaxFavorLevel")?;
      }
      if let Some(f) = self.StatBonusRateAttack() {
        s.serialize_field("StatBonusRateAttack", &f)?;
      } else {
        s.skip_field("StatBonusRateAttack")?;
      }
      if let Some(f) = self.StatBonusRateHP() {
        s.serialize_field("StatBonusRateHP", &f)?;
      } else {
        s.skip_field("StatBonusRateHP")?;
      }
      if let Some(f) = self.StatBonusRateHeal() {
        s.serialize_field("StatBonusRateHeal", &f)?;
      } else {
        s.skip_field("StatBonusRateHeal")?;
      }
      if let Some(f) = self.RecipeId() {
        s.serialize_field("RecipeId", &f)?;
      } else {
        s.skip_field("RecipeId")?;
      }
      if let Some(f) = self.SkillSlotA() {
        s.serialize_field("SkillSlotA", &f)?;
      } else {
        s.skip_field("SkillSlotA")?;
      }
      if let Some(f) = self.SkillSlotB() {
        s.serialize_field("SkillSlotB", &f)?;
      } else {
        s.skip_field("SkillSlotB")?;
      }
      if let Some(f) = self.SkillSlotC() {
        s.serialize_field("SkillSlotC", &f)?;
      } else {
        s.skip_field("SkillSlotC")?;
      }
      if let Some(f) = self.MaxlevelStar() {
        s.serialize_field("MaxlevelStar", &f)?;
      } else {
        s.skip_field("MaxlevelStar")?;
      }
    s.end()
  }
}

pub struct CharacterTranscendenceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterTranscendenceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(CharacterTranscendenceExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_MaxFavorLevel(&mut self, MaxFavorLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_MAXFAVORLEVEL, MaxFavorLevel);
  }
  #[inline]
  pub fn add_StatBonusRateAttack(&mut self, StatBonusRateAttack: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_STATBONUSRATEATTACK, StatBonusRateAttack);
  }
  #[inline]
  pub fn add_StatBonusRateHP(&mut self, StatBonusRateHP: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHP, StatBonusRateHP);
  }
  #[inline]
  pub fn add_StatBonusRateHeal(&mut self, StatBonusRateHeal: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHEAL, StatBonusRateHeal);
  }
  #[inline]
  pub fn add_RecipeId(&mut self, RecipeId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_RECIPEID, RecipeId);
  }
  #[inline]
  pub fn add_SkillSlotA(&mut self, SkillSlotA: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_SKILLSLOTA, SkillSlotA);
  }
  #[inline]
  pub fn add_SkillSlotB(&mut self, SkillSlotB: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_SKILLSLOTB, SkillSlotB);
  }
  #[inline]
  pub fn add_SkillSlotC(&mut self, SkillSlotC: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_SKILLSLOTC, SkillSlotC);
  }
  #[inline]
  pub fn add_MaxlevelStar(&mut self, MaxlevelStar: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_MAXLEVELSTAR, MaxlevelStar);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterTranscendenceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterTranscendenceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterTranscendenceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterTranscendenceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterTranscendenceExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("MaxFavorLevel", &self.MaxFavorLevel());
      ds.field("StatBonusRateAttack", &self.StatBonusRateAttack());
      ds.field("StatBonusRateHP", &self.StatBonusRateHP());
      ds.field("StatBonusRateHeal", &self.StatBonusRateHeal());
      ds.field("RecipeId", &self.RecipeId());
      ds.field("SkillSlotA", &self.SkillSlotA());
      ds.field("SkillSlotB", &self.SkillSlotB());
      ds.field("SkillSlotC", &self.SkillSlotC());
      ds.field("MaxlevelStar", &self.MaxlevelStar());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterTranscendenceExcelT {
  pub CharacterId: i64,
  pub MaxFavorLevel: Option<Vec<i32>>,
  pub StatBonusRateAttack: Option<Vec<i64>>,
  pub StatBonusRateHP: Option<Vec<i64>>,
  pub StatBonusRateHeal: Option<Vec<i64>>,
  pub RecipeId: Option<Vec<i64>>,
  pub SkillSlotA: Option<Vec<String>>,
  pub SkillSlotB: Option<Vec<String>>,
  pub SkillSlotC: Option<Vec<String>>,
  pub MaxlevelStar: Option<Vec<i32>>,
}
impl Default for CharacterTranscendenceExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      MaxFavorLevel: None,
      StatBonusRateAttack: None,
      StatBonusRateHP: None,
      StatBonusRateHeal: None,
      RecipeId: None,
      SkillSlotA: None,
      SkillSlotB: None,
      SkillSlotC: None,
      MaxlevelStar: None,
    }
  }
}
impl CharacterTranscendenceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterTranscendenceExcel<'b>> {
    let CharacterId = self.CharacterId;
    let MaxFavorLevel = self.MaxFavorLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StatBonusRateAttack = self.StatBonusRateAttack.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StatBonusRateHP = self.StatBonusRateHP.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StatBonusRateHeal = self.StatBonusRateHeal.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RecipeId = self.RecipeId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SkillSlotA = self.SkillSlotA.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let SkillSlotB = self.SkillSlotB.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let SkillSlotC = self.SkillSlotC.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let MaxlevelStar = self.MaxlevelStar.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CharacterTranscendenceExcel::create(_fbb, &CharacterTranscendenceExcelArgs{
      CharacterId,
      MaxFavorLevel,
      StatBonusRateAttack,
      StatBonusRateHP,
      StatBonusRateHeal,
      RecipeId,
      SkillSlotA,
      SkillSlotB,
      SkillSlotC,
      MaxlevelStar,
    })
  }
}
