// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameRoadPuzzleRailTileExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameRoadPuzzleRailTileExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameRoadPuzzleRailTileExcel<'a> {
  type Inner = MinigameRoadPuzzleRailTileExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameRoadPuzzleRailTileExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_ORIGINALTILE: flatbuffers::VOffsetT = 10;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 12;
  pub const VT_RAILTILETYPE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameRoadPuzzleRailTileExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameRoadPuzzleRailTileExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleRailTileExcel<'bldr>> {
    let mut builder = MinigameRoadPuzzleRailTileExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleRailTile");
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.RailTileType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RailTileType(x);
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      builder.add_OriginalTile(args.OriginalTile);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameRoadPuzzleRailTileExcelT {
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleRailTile");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let GroupId = self.GroupId();
      let OriginalTile = self.OriginalTile();
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let RailTileType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RailTileType(), &key)
      } else {
        self.RailTileType()
      };
    MinigameRoadPuzzleRailTileExcelT {
      EventContentId,
      UniqueId,
      GroupId,
      OriginalTile,
      PrefabName,
      RailTileType,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRailTileExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRailTileExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRailTileExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OriginalTile(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameRoadPuzzleRailTileExcel::VT_ORIGINALTILE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameRoadPuzzleRailTileExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn RailTileType(&self) -> RoadPuzzleRailTileType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RoadPuzzleRailTileType>(MinigameRoadPuzzleRailTileExcel::VT_RAILTILETYPE, Some(RoadPuzzleRailTileType::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameRoadPuzzleRailTileExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<bool>("OriginalTile", Self::VT_ORIGINALTILE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<RoadPuzzleRailTileType>("RailTileType", Self::VT_RAILTILETYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameRoadPuzzleRailTileExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub GroupId: i64,
    pub OriginalTile: bool,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RailTileType: RoadPuzzleRailTileType,
}
impl<'a> Default for MinigameRoadPuzzleRailTileExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameRoadPuzzleRailTileExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      GroupId: 0,
      OriginalTile: false,
      PrefabName: None,
      RailTileType: RoadPuzzleRailTileType::None,
    }
  }
}

impl Serialize for MinigameRoadPuzzleRailTileExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameRoadPuzzleRailTileExcel", 6)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("OriginalTile", &self.OriginalTile())?;
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      s.serialize_field("RailTileType", &self.RailTileType())?;
    s.end()
  }
}

pub struct MinigameRoadPuzzleRailTileExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameRoadPuzzleRailTileExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRailTileExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRailTileExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRailTileExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_OriginalTile(&mut self, OriginalTile: bool) {
    self.fbb_.push_slot::<bool>(MinigameRoadPuzzleRailTileExcel::VT_ORIGINALTILE, OriginalTile, false);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleRailTileExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_RailTileType(&mut self, RailTileType: RoadPuzzleRailTileType) {
    self.fbb_.push_slot::<RoadPuzzleRailTileType>(MinigameRoadPuzzleRailTileExcel::VT_RAILTILETYPE, RailTileType, RoadPuzzleRailTileType::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameRoadPuzzleRailTileExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameRoadPuzzleRailTileExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameRoadPuzzleRailTileExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameRoadPuzzleRailTileExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameRoadPuzzleRailTileExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("GroupId", &self.GroupId());
      ds.field("OriginalTile", &self.OriginalTile());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("RailTileType", &self.RailTileType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameRoadPuzzleRailTileExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub GroupId: i64,
  pub OriginalTile: bool,
  pub PrefabName: Option<String>,
  pub RailTileType: RoadPuzzleRailTileType,
}
impl Default for MinigameRoadPuzzleRailTileExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      GroupId: 0,
      OriginalTile: false,
      PrefabName: None,
      RailTileType: RoadPuzzleRailTileType::None,
    }
  }
}
impl MinigameRoadPuzzleRailTileExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleRailTileExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let GroupId = self.GroupId;
    let OriginalTile = self.OriginalTile;
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RailTileType = self.RailTileType;
    MinigameRoadPuzzleRailTileExcel::create(_fbb, &MinigameRoadPuzzleRailTileExcelArgs{
      EventContentId,
      UniqueId,
      GroupId,
      OriginalTile,
      PrefabName,
      RailTileType,
    })
  }
}
