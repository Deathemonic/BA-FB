// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SkillSelectExTooltipExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SkillSelectExTooltipExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SkillSelectExTooltipExcel<'a> {
  type Inner = SkillSelectExTooltipExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SkillSelectExTooltipExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_SELECTABLEEXSKILLGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_SKILLUSECONDITIONLOCALIZEID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SkillSelectExTooltipExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SkillSelectExTooltipExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<SkillSelectExTooltipExcel<'bldr>> {
    let mut builder = SkillSelectExTooltipExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"SkillSelectExTooltip");
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      if let Some(x) = args.SkillUseConditionLocalizeId {
        builder.add_SkillUseConditionLocalizeId(x);
      }
      if let Some(x) = args.SelectableExSkillGroupId {
        builder.add_SelectableExSkillGroupId(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> SkillSelectExTooltipExcelT {
    let key = table_encryption_service::create_key(b"SkillSelectExTooltip");
      let GroupId = self.GroupId();
    let SelectableExSkillGroupId = self.SelectableExSkillGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SkillUseConditionLocalizeId = self.SkillUseConditionLocalizeId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    SkillSelectExTooltipExcelT {
      GroupId,
      SelectableExSkillGroupId,
      SkillUseConditionLocalizeId,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SkillSelectExTooltipExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SelectableExSkillGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillSelectExTooltipExcel::VT_SELECTABLEEXSKILLGROUPID, None)}
  }
  #[inline]
  pub fn SkillUseConditionLocalizeId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillSelectExTooltipExcel::VT_SKILLUSECONDITIONLOCALIZEID, None)}
  }
}

impl flatbuffers::Verifiable for SkillSelectExTooltipExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SelectableExSkillGroupId", Self::VT_SELECTABLEEXSKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillUseConditionLocalizeId", Self::VT_SKILLUSECONDITIONLOCALIZEID, false)?
     .finish();
    Ok(())
  }
}
pub struct SkillSelectExTooltipExcelArgs<'a> {
    pub GroupId: i64,
    pub SelectableExSkillGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SkillUseConditionLocalizeId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SkillSelectExTooltipExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SkillSelectExTooltipExcelArgs {
      GroupId: 0,
      SelectableExSkillGroupId: None,
      SkillUseConditionLocalizeId: None,
    }
  }
}

impl Serialize for SkillSelectExTooltipExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SkillSelectExTooltipExcel", 3)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      if let Some(f) = self.SelectableExSkillGroupId() {
        s.serialize_field("SelectableExSkillGroupId", &f)?;
      } else {
        s.skip_field("SelectableExSkillGroupId")?;
      }
      if let Some(f) = self.SkillUseConditionLocalizeId() {
        s.serialize_field("SkillUseConditionLocalizeId", &f)?;
      } else {
        s.skip_field("SkillUseConditionLocalizeId")?;
      }
    s.end()
  }
}

pub struct SkillSelectExTooltipExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SkillSelectExTooltipExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(SkillSelectExTooltipExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_SelectableExSkillGroupId(&mut self, SelectableExSkillGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillSelectExTooltipExcel::VT_SELECTABLEEXSKILLGROUPID, SelectableExSkillGroupId);
  }
  #[inline]
  pub fn add_SkillUseConditionLocalizeId(&mut self, SkillUseConditionLocalizeId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillSelectExTooltipExcel::VT_SKILLUSECONDITIONLOCALIZEID, SkillUseConditionLocalizeId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SkillSelectExTooltipExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SkillSelectExTooltipExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SkillSelectExTooltipExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SkillSelectExTooltipExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SkillSelectExTooltipExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("SelectableExSkillGroupId", &self.SelectableExSkillGroupId());
      ds.field("SkillUseConditionLocalizeId", &self.SkillUseConditionLocalizeId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SkillSelectExTooltipExcelT {
  pub GroupId: i64,
  pub SelectableExSkillGroupId: Option<String>,
  pub SkillUseConditionLocalizeId: Option<String>,
}
impl Default for SkillSelectExTooltipExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      SelectableExSkillGroupId: None,
      SkillUseConditionLocalizeId: None,
    }
  }
}
impl SkillSelectExTooltipExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SkillSelectExTooltipExcel<'b>> {
    let GroupId = self.GroupId;
    let SelectableExSkillGroupId = self.SelectableExSkillGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SkillUseConditionLocalizeId = self.SkillUseConditionLocalizeId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SkillSelectExTooltipExcel::create(_fbb, &SkillSelectExTooltipExcelArgs{
      GroupId,
      SelectableExSkillGroupId,
      SkillUseConditionLocalizeId,
    })
  }
}
