// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamTimelineExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamTimelineExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamTimelineExcel<'a> {
  type Inner = MiniGameDreamTimelineExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamTimelineExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_DREAMMAKERDAYS: flatbuffers::VOffsetT = 10;
  pub const VT_DREAMMAKERACTIONPOINT: flatbuffers::VOffsetT = 12;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_BGM: flatbuffers::VOffsetT = 16;
  pub const VT_ARTLEVELPATH: flatbuffers::VOffsetT = 18;
  pub const VT_DESIGNLEVELPATH: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamTimelineExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamTimelineExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamTimelineExcel<'bldr>> {
    let mut builder = MiniGameDreamTimelineExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamTimeline");
      let x = args.Bgm;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Bgm(x);
      let x = args.EnterScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnterScenarioGroupId(x);
      let x = args.DreamMakerActionPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DreamMakerActionPoint(x);
      let x = args.DreamMakerDays;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DreamMakerDays(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.DesignLevelPath {
        builder.add_DesignLevelPath(x);
      }
      if let Some(x) = args.ArtLevelPath {
        builder.add_ArtLevelPath(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamTimelineExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamTimeline");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let GroupId = self.GroupId();
      let DreamMakerDays = self.DreamMakerDays();
      let DreamMakerActionPoint = self.DreamMakerActionPoint();
      let EnterScenarioGroupId = self.EnterScenarioGroupId();
      let Bgm = self.Bgm();
    let ArtLevelPath = self.ArtLevelPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignLevelPath = self.DesignLevelPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MiniGameDreamTimelineExcelT {
      Id,
      EventContentId,
      GroupId,
      DreamMakerDays,
      DreamMakerActionPoint,
      EnterScenarioGroupId,
      Bgm,
      ArtLevelPath,
      DesignLevelPath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamTimelineExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamTimelineExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamTimelineExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerDays(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamTimelineExcel::VT_DREAMMAKERDAYS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerActionPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamTimelineExcel::VT_DREAMMAKERACTIONPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnterScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamTimelineExcel::VT_ENTERSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Bgm(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamTimelineExcel::VT_BGM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ArtLevelPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamTimelineExcel::VT_ARTLEVELPATH, None)}
  }
  #[inline]
  pub fn DesignLevelPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamTimelineExcel::VT_DESIGNLEVELPATH, None)}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamTimelineExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i64>("DreamMakerDays", Self::VT_DREAMMAKERDAYS, false)?
     .visit_field::<i64>("DreamMakerActionPoint", Self::VT_DREAMMAKERACTIONPOINT, false)?
     .visit_field::<i64>("EnterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<i64>("Bgm", Self::VT_BGM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ArtLevelPath", Self::VT_ARTLEVELPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignLevelPath", Self::VT_DESIGNLEVELPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamTimelineExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub GroupId: i64,
    pub DreamMakerDays: i64,
    pub DreamMakerActionPoint: i64,
    pub EnterScenarioGroupId: i64,
    pub Bgm: i64,
    pub ArtLevelPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignLevelPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MiniGameDreamTimelineExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamTimelineExcelArgs {
      Id: 0,
      EventContentId: 0,
      GroupId: 0,
      DreamMakerDays: 0,
      DreamMakerActionPoint: 0,
      EnterScenarioGroupId: 0,
      Bgm: 0,
      ArtLevelPath: None,
      DesignLevelPath: None,
    }
  }
}

impl Serialize for MiniGameDreamTimelineExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamTimelineExcel", 9)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("DreamMakerDays", &self.DreamMakerDays())?;
      s.serialize_field("DreamMakerActionPoint", &self.DreamMakerActionPoint())?;
      s.serialize_field("EnterScenarioGroupId", &self.EnterScenarioGroupId())?;
      s.serialize_field("Bgm", &self.Bgm())?;
      if let Some(f) = self.ArtLevelPath() {
        s.serialize_field("ArtLevelPath", &f)?;
      } else {
        s.skip_field("ArtLevelPath")?;
      }
      if let Some(f) = self.DesignLevelPath() {
        s.serialize_field("DesignLevelPath", &f)?;
      } else {
        s.skip_field("DesignLevelPath")?;
      }
    s.end()
  }
}

pub struct MiniGameDreamTimelineExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamTimelineExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamTimelineExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamTimelineExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamTimelineExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_DreamMakerDays(&mut self, DreamMakerDays: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamTimelineExcel::VT_DREAMMAKERDAYS, DreamMakerDays, 0);
  }
  #[inline]
  pub fn add_DreamMakerActionPoint(&mut self, DreamMakerActionPoint: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamTimelineExcel::VT_DREAMMAKERACTIONPOINT, DreamMakerActionPoint, 0);
  }
  #[inline]
  pub fn add_EnterScenarioGroupId(&mut self, EnterScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamTimelineExcel::VT_ENTERSCENARIOGROUPID, EnterScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_Bgm(&mut self, Bgm: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamTimelineExcel::VT_BGM, Bgm, 0);
  }
  #[inline]
  pub fn add_ArtLevelPath(&mut self, ArtLevelPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamTimelineExcel::VT_ARTLEVELPATH, ArtLevelPath);
  }
  #[inline]
  pub fn add_DesignLevelPath(&mut self, DesignLevelPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamTimelineExcel::VT_DESIGNLEVELPATH, DesignLevelPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamTimelineExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamTimelineExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamTimelineExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamTimelineExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamTimelineExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("GroupId", &self.GroupId());
      ds.field("DreamMakerDays", &self.DreamMakerDays());
      ds.field("DreamMakerActionPoint", &self.DreamMakerActionPoint());
      ds.field("EnterScenarioGroupId", &self.EnterScenarioGroupId());
      ds.field("Bgm", &self.Bgm());
      ds.field("ArtLevelPath", &self.ArtLevelPath());
      ds.field("DesignLevelPath", &self.DesignLevelPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamTimelineExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub GroupId: i64,
  pub DreamMakerDays: i64,
  pub DreamMakerActionPoint: i64,
  pub EnterScenarioGroupId: i64,
  pub Bgm: i64,
  pub ArtLevelPath: Option<String>,
  pub DesignLevelPath: Option<String>,
}
impl Default for MiniGameDreamTimelineExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      GroupId: 0,
      DreamMakerDays: 0,
      DreamMakerActionPoint: 0,
      EnterScenarioGroupId: 0,
      Bgm: 0,
      ArtLevelPath: None,
      DesignLevelPath: None,
    }
  }
}
impl MiniGameDreamTimelineExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamTimelineExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let GroupId = self.GroupId;
    let DreamMakerDays = self.DreamMakerDays;
    let DreamMakerActionPoint = self.DreamMakerActionPoint;
    let EnterScenarioGroupId = self.EnterScenarioGroupId;
    let Bgm = self.Bgm;
    let ArtLevelPath = self.ArtLevelPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignLevelPath = self.DesignLevelPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MiniGameDreamTimelineExcel::create(_fbb, &MiniGameDreamTimelineExcelArgs{
      Id,
      EventContentId,
      GroupId,
      DreamMakerDays,
      DreamMakerActionPoint,
      EnterScenarioGroupId,
      Bgm,
      ArtLevelPath,
      DesignLevelPath,
    })
  }
}
