// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentFortuneGachaModifyExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentFortuneGachaModifyExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentFortuneGachaModifyExcel<'a> {
  type Inner = EventContentFortuneGachaModifyExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentFortuneGachaModifyExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_TARGETGRADE: flatbuffers::VOffsetT = 6;
  pub const VT_PROBMODIFYSTARTCOUNT: flatbuffers::VOffsetT = 8;
  pub const VT_USEPREFABNAME: flatbuffers::VOffsetT = 10;
  pub const VT_BUCKETIMAGEPATH: flatbuffers::VOffsetT = 12;
  pub const VT_SHOPBGIMAGEPATH: flatbuffers::VOffsetT = 14;
  pub const VT_TITLELOCALIZEKEY: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentFortuneGachaModifyExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentFortuneGachaModifyExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentFortuneGachaModifyExcel<'bldr>> {
    let mut builder = EventContentFortuneGachaModifyExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentFortuneGachaModify");
      if let Some(x) = args.TitleLocalizeKey {
        builder.add_TitleLocalizeKey(x);
      }
      if let Some(x) = args.ShopBgImagePath {
        builder.add_ShopBgImagePath(x);
      }
      if let Some(x) = args.BucketImagePath {
        builder.add_BucketImagePath(x);
      }
      if let Some(x) = args.UsePrefabName {
        builder.add_UsePrefabName(x);
      }
      let x = args.ProbModifyStartCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ProbModifyStartCount(x);
      let x = args.TargetGrade;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TargetGrade(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EventContentId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentFortuneGachaModifyExcelT {
    let key = table_encryption_service::create_key(b"EventContentFortuneGachaModify");
      let EventContentId = self.EventContentId();
      let TargetGrade = self.TargetGrade();
      let ProbModifyStartCount = self.ProbModifyStartCount();
    let UsePrefabName = self.UsePrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BucketImagePath = self.BucketImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ShopBgImagePath = self.ShopBgImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleLocalizeKey = self.TitleLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentFortuneGachaModifyExcelT {
      EventContentId,
      TargetGrade,
      ProbModifyStartCount,
      UsePrefabName,
      BucketImagePath,
      ShopBgImagePath,
      TitleLocalizeKey,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentFortuneGachaModifyExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TargetGrade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentFortuneGachaModifyExcel::VT_TARGETGRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProbModifyStartCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentFortuneGachaModifyExcel::VT_PROBMODIFYSTARTCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UsePrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentFortuneGachaModifyExcel::VT_USEPREFABNAME, None)}
  }
  #[inline]
  pub fn BucketImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentFortuneGachaModifyExcel::VT_BUCKETIMAGEPATH, None)}
  }
  #[inline]
  pub fn ShopBgImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentFortuneGachaModifyExcel::VT_SHOPBGIMAGEPATH, None)}
  }
  #[inline]
  pub fn TitleLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentFortuneGachaModifyExcel::VT_TITLELOCALIZEKEY, None)}
  }
}

impl flatbuffers::Verifiable for EventContentFortuneGachaModifyExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i32>("TargetGrade", Self::VT_TARGETGRADE, false)?
     .visit_field::<i32>("ProbModifyStartCount", Self::VT_PROBMODIFYSTARTCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("UsePrefabName", Self::VT_USEPREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BucketImagePath", Self::VT_BUCKETIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShopBgImagePath", Self::VT_SHOPBGIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleLocalizeKey", Self::VT_TITLELOCALIZEKEY, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentFortuneGachaModifyExcelArgs<'a> {
    pub EventContentId: i32,
    pub TargetGrade: i32,
    pub ProbModifyStartCount: i32,
    pub UsePrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BucketImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShopBgImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentFortuneGachaModifyExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentFortuneGachaModifyExcelArgs {
      EventContentId: 0,
      TargetGrade: 0,
      ProbModifyStartCount: 0,
      UsePrefabName: None,
      BucketImagePath: None,
      ShopBgImagePath: None,
      TitleLocalizeKey: None,
    }
  }
}

impl Serialize for EventContentFortuneGachaModifyExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentFortuneGachaModifyExcel", 7)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("TargetGrade", &self.TargetGrade())?;
      s.serialize_field("ProbModifyStartCount", &self.ProbModifyStartCount())?;
      if let Some(f) = self.UsePrefabName() {
        s.serialize_field("UsePrefabName", &f)?;
      } else {
        s.skip_field("UsePrefabName")?;
      }
      if let Some(f) = self.BucketImagePath() {
        s.serialize_field("BucketImagePath", &f)?;
      } else {
        s.skip_field("BucketImagePath")?;
      }
      if let Some(f) = self.ShopBgImagePath() {
        s.serialize_field("ShopBgImagePath", &f)?;
      } else {
        s.skip_field("ShopBgImagePath")?;
      }
      if let Some(f) = self.TitleLocalizeKey() {
        s.serialize_field("TitleLocalizeKey", &f)?;
      } else {
        s.skip_field("TitleLocalizeKey")?;
      }
    s.end()
  }
}

pub struct EventContentFortuneGachaModifyExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentFortuneGachaModifyExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i32) {
    self.fbb_.push_slot::<i32>(EventContentFortuneGachaModifyExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_TargetGrade(&mut self, TargetGrade: i32) {
    self.fbb_.push_slot::<i32>(EventContentFortuneGachaModifyExcel::VT_TARGETGRADE, TargetGrade, 0);
  }
  #[inline]
  pub fn add_ProbModifyStartCount(&mut self, ProbModifyStartCount: i32) {
    self.fbb_.push_slot::<i32>(EventContentFortuneGachaModifyExcel::VT_PROBMODIFYSTARTCOUNT, ProbModifyStartCount, 0);
  }
  #[inline]
  pub fn add_UsePrefabName(&mut self, UsePrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentFortuneGachaModifyExcel::VT_USEPREFABNAME, UsePrefabName);
  }
  #[inline]
  pub fn add_BucketImagePath(&mut self, BucketImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentFortuneGachaModifyExcel::VT_BUCKETIMAGEPATH, BucketImagePath);
  }
  #[inline]
  pub fn add_ShopBgImagePath(&mut self, ShopBgImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentFortuneGachaModifyExcel::VT_SHOPBGIMAGEPATH, ShopBgImagePath);
  }
  #[inline]
  pub fn add_TitleLocalizeKey(&mut self, TitleLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentFortuneGachaModifyExcel::VT_TITLELOCALIZEKEY, TitleLocalizeKey);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentFortuneGachaModifyExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentFortuneGachaModifyExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentFortuneGachaModifyExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentFortuneGachaModifyExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentFortuneGachaModifyExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("TargetGrade", &self.TargetGrade());
      ds.field("ProbModifyStartCount", &self.ProbModifyStartCount());
      ds.field("UsePrefabName", &self.UsePrefabName());
      ds.field("BucketImagePath", &self.BucketImagePath());
      ds.field("ShopBgImagePath", &self.ShopBgImagePath());
      ds.field("TitleLocalizeKey", &self.TitleLocalizeKey());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentFortuneGachaModifyExcelT {
  pub EventContentId: i32,
  pub TargetGrade: i32,
  pub ProbModifyStartCount: i32,
  pub UsePrefabName: Option<String>,
  pub BucketImagePath: Option<String>,
  pub ShopBgImagePath: Option<String>,
  pub TitleLocalizeKey: Option<String>,
}
impl Default for EventContentFortuneGachaModifyExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      TargetGrade: 0,
      ProbModifyStartCount: 0,
      UsePrefabName: None,
      BucketImagePath: None,
      ShopBgImagePath: None,
      TitleLocalizeKey: None,
    }
  }
}
impl EventContentFortuneGachaModifyExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentFortuneGachaModifyExcel<'b>> {
    let EventContentId = self.EventContentId;
    let TargetGrade = self.TargetGrade;
    let ProbModifyStartCount = self.ProbModifyStartCount;
    let UsePrefabName = self.UsePrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BucketImagePath = self.BucketImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShopBgImagePath = self.ShopBgImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleLocalizeKey = self.TitleLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentFortuneGachaModifyExcel::create(_fbb, &EventContentFortuneGachaModifyExcelArgs{
      EventContentId,
      TargetGrade,
      ProbModifyStartCount,
      UsePrefabName,
      BucketImagePath,
      ShopBgImagePath,
      TitleLocalizeKey,
    })
  }
}
