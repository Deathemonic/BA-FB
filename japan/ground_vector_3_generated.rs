// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GroundVector3Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GroundVector3<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GroundVector3<'a> {
  type Inner = GroundVector3<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GroundVector3<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_Z: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GroundVector3 { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GroundVector3Args
  ) -> flatbuffers::WIPOffset<GroundVector3<'bldr>> {
    let mut builder = GroundVector3Builder::new(_fbb);
    let key = table_encryption_service::create_key(b"GroundVe");
      let x = args.z;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_z(x);
      let x = args.y;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_y(x);
      let x = args.x;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_x(x);
    builder.finish()
  }

  pub fn unpack(&self) -> GroundVector3T {
    let key = table_encryption_service::create_key(b"GroundVe");
      let x = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.x(), &key)
      } else {
        self.x()
      };
      let y = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.y(), &key)
      } else {
        self.y()
      };
      let z = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.z(), &key)
      } else {
        self.z()
      };
    GroundVector3T {
      x,
      y,
      z,
    }
  }

  #[inline]
  pub fn x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GroundVector3::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GroundVector3::VT_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn z(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GroundVector3::VT_Z, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GroundVector3<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<f32>("z", Self::VT_Z, false)?
     .finish();
    Ok(())
  }
}
pub struct GroundVector3Args {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
impl<'a> Default for GroundVector3Args {
  #[inline]
  fn default() -> Self {
    GroundVector3Args {
      x: 0.0,
      y: 0.0,
      z: 0.0,
    }
  }
}

impl Serialize for GroundVector3<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GroundVector3", 3)?;
      s.serialize_field("x", &self.x())?;
      s.serialize_field("y", &self.y())?;
      s.serialize_field("z", &self.z())?;
    s.end()
  }
}

pub struct GroundVector3Builder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GroundVector3Builder<'a, 'b, A> {
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(GroundVector3::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(GroundVector3::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_z(&mut self, z: f32) {
    self.fbb_.push_slot::<f32>(GroundVector3::VT_Z, z, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GroundVector3Builder<'a, 'b, A> {
    let start = _fbb.start_table();
    GroundVector3Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GroundVector3<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GroundVector3<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GroundVector3");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("z", &self.z());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GroundVector3T {
  pub x: f32,
  pub y: f32,
  pub z: f32,
}
impl Default for GroundVector3T {
  fn default() -> Self {
    Self {
      x: 0.0,
      y: 0.0,
      z: 0.0,
    }
  }
}
impl GroundVector3T {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GroundVector3<'b>> {
    let x = self.x;
    let y = self.y;
    let z = self.z;
    GroundVector3::create(_fbb, &GroundVector3Args{
      x,
      y,
      z,
    })
  }
}
