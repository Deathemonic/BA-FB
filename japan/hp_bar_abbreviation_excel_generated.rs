// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum HpBarAbbreviationExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HpBarAbbreviationExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HpBarAbbreviationExcel<'a> {
  type Inner = HpBarAbbreviationExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HpBarAbbreviationExcel<'a> {
  pub const VT_MONSTERLV: flatbuffers::VOffsetT = 4;
  pub const VT_STANDARDHPBAR: flatbuffers::VOffsetT = 6;
  pub const VT_RAIDBOSSHPBAR: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HpBarAbbreviationExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HpBarAbbreviationExcelArgs
  ) -> flatbuffers::WIPOffset<HpBarAbbreviationExcel<'bldr>> {
    let mut builder = HpBarAbbreviationExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"HpBarAbbreviation");
      let x = args.RaidBossHpBar;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RaidBossHpBar(x);
      let x = args.StandardHpBar;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StandardHpBar(x);
      let x = args.MonsterLv;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MonsterLv(x);
    builder.finish()
  }

  pub fn unpack(&self) -> HpBarAbbreviationExcelT {
    let key = table_encryption_service::create_key(b"HpBarAbbreviation");
      let MonsterLv = self.MonsterLv();
      let StandardHpBar = self.StandardHpBar();
      let RaidBossHpBar = self.RaidBossHpBar();
    HpBarAbbreviationExcelT {
      MonsterLv,
      StandardHpBar,
      RaidBossHpBar,
    }
  }

  #[inline]
  pub fn MonsterLv(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HpBarAbbreviationExcel::VT_MONSTERLV, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StandardHpBar(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HpBarAbbreviationExcel::VT_STANDARDHPBAR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RaidBossHpBar(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HpBarAbbreviationExcel::VT_RAIDBOSSHPBAR, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for HpBarAbbreviationExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("MonsterLv", Self::VT_MONSTERLV, false)?
     .visit_field::<i32>("StandardHpBar", Self::VT_STANDARDHPBAR, false)?
     .visit_field::<i32>("RaidBossHpBar", Self::VT_RAIDBOSSHPBAR, false)?
     .finish();
    Ok(())
  }
}
pub struct HpBarAbbreviationExcelArgs {
    pub MonsterLv: i32,
    pub StandardHpBar: i32,
    pub RaidBossHpBar: i32,
}
impl<'a> Default for HpBarAbbreviationExcelArgs {
  #[inline]
  fn default() -> Self {
    HpBarAbbreviationExcelArgs {
      MonsterLv: 0,
      StandardHpBar: 0,
      RaidBossHpBar: 0,
    }
  }
}

impl Serialize for HpBarAbbreviationExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("HpBarAbbreviationExcel", 3)?;
      s.serialize_field("MonsterLv", &self.MonsterLv())?;
      s.serialize_field("StandardHpBar", &self.StandardHpBar())?;
      s.serialize_field("RaidBossHpBar", &self.RaidBossHpBar())?;
    s.end()
  }
}

pub struct HpBarAbbreviationExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HpBarAbbreviationExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_MonsterLv(&mut self, MonsterLv: i32) {
    self.fbb_.push_slot::<i32>(HpBarAbbreviationExcel::VT_MONSTERLV, MonsterLv, 0);
  }
  #[inline]
  pub fn add_StandardHpBar(&mut self, StandardHpBar: i32) {
    self.fbb_.push_slot::<i32>(HpBarAbbreviationExcel::VT_STANDARDHPBAR, StandardHpBar, 0);
  }
  #[inline]
  pub fn add_RaidBossHpBar(&mut self, RaidBossHpBar: i32) {
    self.fbb_.push_slot::<i32>(HpBarAbbreviationExcel::VT_RAIDBOSSHPBAR, RaidBossHpBar, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HpBarAbbreviationExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HpBarAbbreviationExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HpBarAbbreviationExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HpBarAbbreviationExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HpBarAbbreviationExcel");
      ds.field("MonsterLv", &self.MonsterLv());
      ds.field("StandardHpBar", &self.StandardHpBar());
      ds.field("RaidBossHpBar", &self.RaidBossHpBar());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct HpBarAbbreviationExcelT {
  pub MonsterLv: i32,
  pub StandardHpBar: i32,
  pub RaidBossHpBar: i32,
}
impl Default for HpBarAbbreviationExcelT {
  fn default() -> Self {
    Self {
      MonsterLv: 0,
      StandardHpBar: 0,
      RaidBossHpBar: 0,
    }
  }
}
impl HpBarAbbreviationExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<HpBarAbbreviationExcel<'b>> {
    let MonsterLv = self.MonsterLv;
    let StandardHpBar = self.StandardHpBar;
    let RaidBossHpBar = self.RaidBossHpBar;
    HpBarAbbreviationExcel::create(_fbb, &HpBarAbbreviationExcelArgs{
      MonsterLv,
      StandardHpBar,
      RaidBossHpBar,
    })
  }
}
