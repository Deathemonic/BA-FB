// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterDialogFieldExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterDialogFieldExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterDialogFieldExcel<'a> {
  type Inner = CharacterDialogFieldExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterDialogFieldExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_PHASE: flatbuffers::VOffsetT = 6;
  pub const VT_TARGETINDEX: flatbuffers::VOffsetT = 8;
  pub const VT_DIALOGTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_DURATION: flatbuffers::VOffsetT = 12;
  pub const VT_MOTIONNAME: flatbuffers::VOffsetT = 14;
  pub const VT_ISINTERACTIONDIALOG: flatbuffers::VOffsetT = 16;
  pub const VT_HIDEUI: flatbuffers::VOffsetT = 18;
  pub const VT_LOCALIZEKR: flatbuffers::VOffsetT = 20;
  pub const VT_LOCALIZEJP: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterDialogFieldExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterDialogFieldExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterDialogFieldExcel<'bldr>> {
    let mut builder = CharacterDialogFieldExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterDialogField");
      let x = args.Duration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Duration(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      if let Some(x) = args.LocalizeJP {
        builder.add_LocalizeJP(x);
      }
      if let Some(x) = args.LocalizeKR {
        builder.add_LocalizeKR(x);
      }
      if let Some(x) = args.MotionName {
        builder.add_MotionName(x);
      }
      let x = args.DialogType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DialogType(x);
      let x = args.TargetIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TargetIndex(x);
      let x = args.Phase;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Phase(x);
      builder.add_HideUI(args.HideUI);
      builder.add_IsInteractionDialog(args.IsInteractionDialog);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterDialogFieldExcelT {
    let key = table_encryption_service::create_key(b"CharacterDialogField");
      let GroupId = self.GroupId();
      let Phase = self.Phase();
      let TargetIndex = self.TargetIndex();
      let DialogType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DialogType(), &key)
      } else {
        self.DialogType()
      };
      let Duration = self.Duration();
    let MotionName = self.MotionName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IsInteractionDialog = self.IsInteractionDialog();
      let HideUI = self.HideUI();
    let LocalizeKR = self.LocalizeKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeJP = self.LocalizeJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CharacterDialogFieldExcelT {
      GroupId,
      Phase,
      TargetIndex,
      DialogType,
      Duration,
      MotionName,
      IsInteractionDialog,
      HideUI,
      LocalizeKR,
      LocalizeJP,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogFieldExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Phase(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterDialogFieldExcel::VT_PHASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TargetIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterDialogFieldExcel::VT_TARGETINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DialogType(&self) -> FieldDialogType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldDialogType>(CharacterDialogFieldExcel::VT_DIALOGTYPE, Some(FieldDialogType::None)).unwrap()}
  }
  #[inline]
  pub fn Duration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogFieldExcel::VT_DURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MotionName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogFieldExcel::VT_MOTIONNAME, None)}
  }
  #[inline]
  pub fn IsInteractionDialog(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogFieldExcel::VT_ISINTERACTIONDIALOG, Some(false)).unwrap()}
  }
  #[inline]
  pub fn HideUI(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogFieldExcel::VT_HIDEUI, Some(false)).unwrap()}
  }
  #[inline]
  pub fn LocalizeKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogFieldExcel::VT_LOCALIZEKR, None)}
  }
  #[inline]
  pub fn LocalizeJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogFieldExcel::VT_LOCALIZEJP, None)}
  }
}

impl flatbuffers::Verifiable for CharacterDialogFieldExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i32>("Phase", Self::VT_PHASE, false)?
     .visit_field::<i32>("TargetIndex", Self::VT_TARGETINDEX, false)?
     .visit_field::<FieldDialogType>("DialogType", Self::VT_DIALOGTYPE, false)?
     .visit_field::<i64>("Duration", Self::VT_DURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MotionName", Self::VT_MOTIONNAME, false)?
     .visit_field::<bool>("IsInteractionDialog", Self::VT_ISINTERACTIONDIALOG, false)?
     .visit_field::<bool>("HideUI", Self::VT_HIDEUI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeKR", Self::VT_LOCALIZEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeJP", Self::VT_LOCALIZEJP, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterDialogFieldExcelArgs<'a> {
    pub GroupId: i64,
    pub Phase: i32,
    pub TargetIndex: i32,
    pub DialogType: FieldDialogType,
    pub Duration: i64,
    pub MotionName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IsInteractionDialog: bool,
    pub HideUI: bool,
    pub LocalizeKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeJP: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CharacterDialogFieldExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterDialogFieldExcelArgs {
      GroupId: 0,
      Phase: 0,
      TargetIndex: 0,
      DialogType: FieldDialogType::None,
      Duration: 0,
      MotionName: None,
      IsInteractionDialog: false,
      HideUI: false,
      LocalizeKR: None,
      LocalizeJP: None,
    }
  }
}

impl Serialize for CharacterDialogFieldExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterDialogFieldExcel", 10)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("Phase", &self.Phase())?;
      s.serialize_field("TargetIndex", &self.TargetIndex())?;
      s.serialize_field("DialogType", &self.DialogType())?;
      s.serialize_field("Duration", &self.Duration())?;
      if let Some(f) = self.MotionName() {
        s.serialize_field("MotionName", &f)?;
      } else {
        s.skip_field("MotionName")?;
      }
      s.serialize_field("IsInteractionDialog", &self.IsInteractionDialog())?;
      s.serialize_field("HideUI", &self.HideUI())?;
      if let Some(f) = self.LocalizeKR() {
        s.serialize_field("LocalizeKR", &f)?;
      } else {
        s.skip_field("LocalizeKR")?;
      }
      if let Some(f) = self.LocalizeJP() {
        s.serialize_field("LocalizeJP", &f)?;
      } else {
        s.skip_field("LocalizeJP")?;
      }
    s.end()
  }
}

pub struct CharacterDialogFieldExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterDialogFieldExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogFieldExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_Phase(&mut self, Phase: i32) {
    self.fbb_.push_slot::<i32>(CharacterDialogFieldExcel::VT_PHASE, Phase, 0);
  }
  #[inline]
  pub fn add_TargetIndex(&mut self, TargetIndex: i32) {
    self.fbb_.push_slot::<i32>(CharacterDialogFieldExcel::VT_TARGETINDEX, TargetIndex, 0);
  }
  #[inline]
  pub fn add_DialogType(&mut self, DialogType: FieldDialogType) {
    self.fbb_.push_slot::<FieldDialogType>(CharacterDialogFieldExcel::VT_DIALOGTYPE, DialogType, FieldDialogType::None);
  }
  #[inline]
  pub fn add_Duration(&mut self, Duration: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogFieldExcel::VT_DURATION, Duration, 0);
  }
  #[inline]
  pub fn add_MotionName(&mut self, MotionName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogFieldExcel::VT_MOTIONNAME, MotionName);
  }
  #[inline]
  pub fn add_IsInteractionDialog(&mut self, IsInteractionDialog: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogFieldExcel::VT_ISINTERACTIONDIALOG, IsInteractionDialog, false);
  }
  #[inline]
  pub fn add_HideUI(&mut self, HideUI: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogFieldExcel::VT_HIDEUI, HideUI, false);
  }
  #[inline]
  pub fn add_LocalizeKR(&mut self, LocalizeKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogFieldExcel::VT_LOCALIZEKR, LocalizeKR);
  }
  #[inline]
  pub fn add_LocalizeJP(&mut self, LocalizeJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogFieldExcel::VT_LOCALIZEJP, LocalizeJP);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterDialogFieldExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterDialogFieldExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterDialogFieldExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterDialogFieldExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterDialogFieldExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("Phase", &self.Phase());
      ds.field("TargetIndex", &self.TargetIndex());
      ds.field("DialogType", &self.DialogType());
      ds.field("Duration", &self.Duration());
      ds.field("MotionName", &self.MotionName());
      ds.field("IsInteractionDialog", &self.IsInteractionDialog());
      ds.field("HideUI", &self.HideUI());
      ds.field("LocalizeKR", &self.LocalizeKR());
      ds.field("LocalizeJP", &self.LocalizeJP());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterDialogFieldExcelT {
  pub GroupId: i64,
  pub Phase: i32,
  pub TargetIndex: i32,
  pub DialogType: FieldDialogType,
  pub Duration: i64,
  pub MotionName: Option<String>,
  pub IsInteractionDialog: bool,
  pub HideUI: bool,
  pub LocalizeKR: Option<String>,
  pub LocalizeJP: Option<String>,
}
impl Default for CharacterDialogFieldExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      Phase: 0,
      TargetIndex: 0,
      DialogType: FieldDialogType::None,
      Duration: 0,
      MotionName: None,
      IsInteractionDialog: false,
      HideUI: false,
      LocalizeKR: None,
      LocalizeJP: None,
    }
  }
}
impl CharacterDialogFieldExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterDialogFieldExcel<'b>> {
    let GroupId = self.GroupId;
    let Phase = self.Phase;
    let TargetIndex = self.TargetIndex;
    let DialogType = self.DialogType;
    let Duration = self.Duration;
    let MotionName = self.MotionName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IsInteractionDialog = self.IsInteractionDialog;
    let HideUI = self.HideUI;
    let LocalizeKR = self.LocalizeKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeJP = self.LocalizeJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CharacterDialogFieldExcel::create(_fbb, &CharacterDialogFieldExcelArgs{
      GroupId,
      Phase,
      TargetIndex,
      DialogType,
      Duration,
      MotionName,
      IsInteractionDialog,
      HideUI,
      LocalizeKR,
      LocalizeJP,
    })
  }
}
