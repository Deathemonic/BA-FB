// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentCurrencyItemExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentCurrencyItemExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentCurrencyItemExcel<'a> {
  type Inner = EventContentCurrencyItemExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentCurrencyItemExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTITEMTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ITEMUNIQUEID: flatbuffers::VOffsetT = 8;
  pub const VT_USESHORTCUTCONTENTTYPE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentCurrencyItemExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentCurrencyItemExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentCurrencyItemExcel<'bldr>> {
    let mut builder = EventContentCurrencyItemExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentCurrencyItem");
      let x = args.ItemUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ItemUniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.UseShortCutContentType {
        builder.add_UseShortCutContentType(x);
      }
      let x = args.EventContentItemType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventContentItemType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentCurrencyItemExcelT {
    let key = table_encryption_service::create_key(b"EventContentCurrencyItem");
      let EventContentId = self.EventContentId();
      let EventContentItemType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventContentItemType(), &key)
      } else {
        self.EventContentItemType()
      };
      let ItemUniqueId = self.ItemUniqueId();
    let UseShortCutContentType = self.UseShortCutContentType().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentCurrencyItemExcelT {
      EventContentId,
      EventContentItemType,
      ItemUniqueId,
      UseShortCutContentType,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentCurrencyItemExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentItemType(&self) -> EventContentItemType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentItemType>(EventContentCurrencyItemExcel::VT_EVENTCONTENTITEMTYPE, Some(EventContentItemType::EventPoint)).unwrap()}
  }
  #[inline]
  pub fn ItemUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentCurrencyItemExcel::VT_ITEMUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UseShortCutContentType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentCurrencyItemExcel::VT_USESHORTCUTCONTENTTYPE, None)}
  }
}

impl flatbuffers::Verifiable for EventContentCurrencyItemExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<EventContentItemType>("EventContentItemType", Self::VT_EVENTCONTENTITEMTYPE, false)?
     .visit_field::<i64>("ItemUniqueId", Self::VT_ITEMUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("UseShortCutContentType", Self::VT_USESHORTCUTCONTENTTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentCurrencyItemExcelArgs<'a> {
    pub EventContentId: i64,
    pub EventContentItemType: EventContentItemType,
    pub ItemUniqueId: i64,
    pub UseShortCutContentType: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentCurrencyItemExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentCurrencyItemExcelArgs {
      EventContentId: 0,
      EventContentItemType: EventContentItemType::EventPoint,
      ItemUniqueId: 0,
      UseShortCutContentType: None,
    }
  }
}

impl Serialize for EventContentCurrencyItemExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentCurrencyItemExcel", 4)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventContentItemType", &self.EventContentItemType())?;
      s.serialize_field("ItemUniqueId", &self.ItemUniqueId())?;
      if let Some(f) = self.UseShortCutContentType() {
        s.serialize_field("UseShortCutContentType", &f)?;
      } else {
        s.skip_field("UseShortCutContentType")?;
      }
    s.end()
  }
}

pub struct EventContentCurrencyItemExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentCurrencyItemExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentCurrencyItemExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventContentItemType(&mut self, EventContentItemType: EventContentItemType) {
    self.fbb_.push_slot::<EventContentItemType>(EventContentCurrencyItemExcel::VT_EVENTCONTENTITEMTYPE, EventContentItemType, EventContentItemType::EventPoint);
  }
  #[inline]
  pub fn add_ItemUniqueId(&mut self, ItemUniqueId: i64) {
    self.fbb_.push_slot::<i64>(EventContentCurrencyItemExcel::VT_ITEMUNIQUEID, ItemUniqueId, 0);
  }
  #[inline]
  pub fn add_UseShortCutContentType(&mut self, UseShortCutContentType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentCurrencyItemExcel::VT_USESHORTCUTCONTENTTYPE, UseShortCutContentType);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentCurrencyItemExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentCurrencyItemExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentCurrencyItemExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentCurrencyItemExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentCurrencyItemExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventContentItemType", &self.EventContentItemType());
      ds.field("ItemUniqueId", &self.ItemUniqueId());
      ds.field("UseShortCutContentType", &self.UseShortCutContentType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentCurrencyItemExcelT {
  pub EventContentId: i64,
  pub EventContentItemType: EventContentItemType,
  pub ItemUniqueId: i64,
  pub UseShortCutContentType: Option<String>,
}
impl Default for EventContentCurrencyItemExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventContentItemType: EventContentItemType::EventPoint,
      ItemUniqueId: 0,
      UseShortCutContentType: None,
    }
  }
}
impl EventContentCurrencyItemExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentCurrencyItemExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventContentItemType = self.EventContentItemType;
    let ItemUniqueId = self.ItemUniqueId;
    let UseShortCutContentType = self.UseShortCutContentType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentCurrencyItemExcel::create(_fbb, &EventContentCurrencyItemExcelArgs{
      EventContentId,
      EventContentItemType,
      ItemUniqueId,
      UseShortCutContentType,
    })
  }
}
