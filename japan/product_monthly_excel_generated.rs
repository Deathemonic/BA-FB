// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProductMonthlyExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ProductMonthlyExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProductMonthlyExcel<'a> {
  type Inner = ProductMonthlyExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProductMonthlyExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTID: flatbuffers::VOffsetT = 6;
  pub const VT_STORETYPE: flatbuffers::VOffsetT = 8;
  pub const VT_PRICE: flatbuffers::VOffsetT = 10;
  pub const VT_PRICEREFERENCE: flatbuffers::VOffsetT = 12;
  pub const VT_PRODUCTTAGTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_MONTHLYDAYS: flatbuffers::VOffsetT = 16;
  pub const VT_USEMONTHLYPRODUCTCHECK: flatbuffers::VOffsetT = 18;
  pub const VT_PURCHASECOUNTLIMIT: flatbuffers::VOffsetT = 20;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 24;
  pub const VT_PARCELAMOUNT: flatbuffers::VOffsetT = 26;
  pub const VT_ENTERCOSTREDUCEGROUPID: flatbuffers::VOffsetT = 28;
  pub const VT_DAILYPARCELTYPE: flatbuffers::VOffsetT = 30;
  pub const VT_DAILYPARCELID: flatbuffers::VOffsetT = 32;
  pub const VT_DAILYPARCELAMOUNT: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProductMonthlyExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ProductMonthlyExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ProductMonthlyExcel<'bldr>> {
    let mut builder = ProductMonthlyExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ProductMonthly");
      let x = args.EnterCostReduceGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnterCostReduceGroupId(x);
      let x = args.PurchaseCountLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PurchaseCountLimit(x);
      let x = args.MonthlyDays;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MonthlyDays(x);
      let x = args.Price;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Price(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.DailyParcelAmount {
        builder.add_DailyParcelAmount(x);
      }
      if let Some(x) = args.DailyParcelId {
        builder.add_DailyParcelId(x);
      }
      if let Some(x) = args.DailyParcelType {
        builder.add_DailyParcelType(x);
      }
      if let Some(x) = args.ParcelAmount {
        builder.add_ParcelAmount(x);
      }
      if let Some(x) = args.ParcelId {
        builder.add_ParcelId(x);
      }
      if let Some(x) = args.ParcelType {
        builder.add_ParcelType(x);
      }
      let x = args.ProductTagType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ProductTagType(x);
      if let Some(x) = args.PriceReference {
        builder.add_PriceReference(x);
      }
      let x = args.StoreType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StoreType(x);
      if let Some(x) = args.ProductId {
        builder.add_ProductId(x);
      }
      builder.add_UseMonthlyProductCheck(args.UseMonthlyProductCheck);
    builder.finish()
  }

  pub fn unpack(&self) -> ProductMonthlyExcelT {
    let key = table_encryption_service::create_key(b"ProductMonthly");
      let Id = self.Id();
    let ProductId = self.ProductId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StoreType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StoreType(), &key)
      } else {
        self.StoreType()
      };
      let Price = self.Price();
    let PriceReference = self.PriceReference().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ProductTagType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ProductTagType(), &key)
      } else {
        self.ProductTagType()
      };
      let MonthlyDays = self.MonthlyDays();
      let UseMonthlyProductCheck = self.UseMonthlyProductCheck();
      let PurchaseCountLimit = self.PurchaseCountLimit();
    let ParcelType = self.ParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ParcelId = self.ParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ParcelAmount = self.ParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let EnterCostReduceGroupId = self.EnterCostReduceGroupId();
    let DailyParcelType = self.DailyParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let DailyParcelId = self.DailyParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let DailyParcelAmount = self.DailyParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ProductMonthlyExcelT {
      Id,
      ProductId,
      StoreType,
      Price,
      PriceReference,
      ProductTagType,
      MonthlyDays,
      UseMonthlyProductCheck,
      PurchaseCountLimit,
      ParcelType,
      ParcelId,
      ParcelAmount,
      EnterCostReduceGroupId,
      DailyParcelType,
      DailyParcelId,
      DailyParcelAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductMonthlyExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ProductMonthlyExcel::VT_PRODUCTID, None)}
  }
  #[inline]
  pub fn StoreType(&self) -> StoreType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StoreType>(ProductMonthlyExcel::VT_STORETYPE, Some(StoreType::None)).unwrap()}
  }
  #[inline]
  pub fn Price(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductMonthlyExcel::VT_PRICE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PriceReference(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ProductMonthlyExcel::VT_PRICEREFERENCE, None)}
  }
  #[inline]
  pub fn ProductTagType(&self) -> ProductTagType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductTagType>(ProductMonthlyExcel::VT_PRODUCTTAGTYPE, Some(ProductTagType::Monthly)).unwrap()}
  }
  #[inline]
  pub fn MonthlyDays(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductMonthlyExcel::VT_MONTHLYDAYS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UseMonthlyProductCheck(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ProductMonthlyExcel::VT_USEMONTHLYPRODUCTCHECK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn PurchaseCountLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductMonthlyExcel::VT_PURCHASECOUNTLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(ProductMonthlyExcel::VT_PARCELTYPE, None)}
  }
  #[inline]
  pub fn ParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ProductMonthlyExcel::VT_PARCELID, None)}
  }
  #[inline]
  pub fn ParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ProductMonthlyExcel::VT_PARCELAMOUNT, None)}
  }
  #[inline]
  pub fn EnterCostReduceGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductMonthlyExcel::VT_ENTERCOSTREDUCEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DailyParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(ProductMonthlyExcel::VT_DAILYPARCELTYPE, None)}
  }
  #[inline]
  pub fn DailyParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ProductMonthlyExcel::VT_DAILYPARCELID, None)}
  }
  #[inline]
  pub fn DailyParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ProductMonthlyExcel::VT_DAILYPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for ProductMonthlyExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProductId", Self::VT_PRODUCTID, false)?
     .visit_field::<StoreType>("StoreType", Self::VT_STORETYPE, false)?
     .visit_field::<i64>("Price", Self::VT_PRICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PriceReference", Self::VT_PRICEREFERENCE, false)?
     .visit_field::<ProductTagType>("ProductTagType", Self::VT_PRODUCTTAGTYPE, false)?
     .visit_field::<i64>("MonthlyDays", Self::VT_MONTHLYDAYS, false)?
     .visit_field::<bool>("UseMonthlyProductCheck", Self::VT_USEMONTHLYPRODUCTCHECK, false)?
     .visit_field::<i64>("PurchaseCountLimit", Self::VT_PURCHASECOUNTLIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ParcelAmount", Self::VT_PARCELAMOUNT, false)?
     .visit_field::<i64>("EnterCostReduceGroupId", Self::VT_ENTERCOSTREDUCEGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("DailyParcelType", Self::VT_DAILYPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("DailyParcelId", Self::VT_DAILYPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("DailyParcelAmount", Self::VT_DAILYPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ProductMonthlyExcelArgs<'a> {
    pub Id: i64,
    pub ProductId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StoreType: StoreType,
    pub Price: i64,
    pub PriceReference: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProductTagType: ProductTagType,
    pub MonthlyDays: i64,
    pub UseMonthlyProductCheck: bool,
    pub PurchaseCountLimit: i64,
    pub ParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub ParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub EnterCostReduceGroupId: i64,
    pub DailyParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub DailyParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub DailyParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ProductMonthlyExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProductMonthlyExcelArgs {
      Id: 0,
      ProductId: None,
      StoreType: StoreType::None,
      Price: 0,
      PriceReference: None,
      ProductTagType: ProductTagType::Monthly,
      MonthlyDays: 0,
      UseMonthlyProductCheck: false,
      PurchaseCountLimit: 0,
      ParcelType: None,
      ParcelId: None,
      ParcelAmount: None,
      EnterCostReduceGroupId: 0,
      DailyParcelType: None,
      DailyParcelId: None,
      DailyParcelAmount: None,
    }
  }
}

impl Serialize for ProductMonthlyExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProductMonthlyExcel", 16)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.ProductId() {
        s.serialize_field("ProductId", &f)?;
      } else {
        s.skip_field("ProductId")?;
      }
      s.serialize_field("StoreType", &self.StoreType())?;
      s.serialize_field("Price", &self.Price())?;
      if let Some(f) = self.PriceReference() {
        s.serialize_field("PriceReference", &f)?;
      } else {
        s.skip_field("PriceReference")?;
      }
      s.serialize_field("ProductTagType", &self.ProductTagType())?;
      s.serialize_field("MonthlyDays", &self.MonthlyDays())?;
      s.serialize_field("UseMonthlyProductCheck", &self.UseMonthlyProductCheck())?;
      s.serialize_field("PurchaseCountLimit", &self.PurchaseCountLimit())?;
      if let Some(f) = self.ParcelType() {
        s.serialize_field("ParcelType", &f)?;
      } else {
        s.skip_field("ParcelType")?;
      }
      if let Some(f) = self.ParcelId() {
        s.serialize_field("ParcelId", &f)?;
      } else {
        s.skip_field("ParcelId")?;
      }
      if let Some(f) = self.ParcelAmount() {
        s.serialize_field("ParcelAmount", &f)?;
      } else {
        s.skip_field("ParcelAmount")?;
      }
      s.serialize_field("EnterCostReduceGroupId", &self.EnterCostReduceGroupId())?;
      if let Some(f) = self.DailyParcelType() {
        s.serialize_field("DailyParcelType", &f)?;
      } else {
        s.skip_field("DailyParcelType")?;
      }
      if let Some(f) = self.DailyParcelId() {
        s.serialize_field("DailyParcelId", &f)?;
      } else {
        s.skip_field("DailyParcelId")?;
      }
      if let Some(f) = self.DailyParcelAmount() {
        s.serialize_field("DailyParcelAmount", &f)?;
      } else {
        s.skip_field("DailyParcelAmount")?;
      }
    s.end()
  }
}

pub struct ProductMonthlyExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ProductMonthlyExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ProductMonthlyExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ProductId(&mut self, ProductId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_PRODUCTID, ProductId);
  }
  #[inline]
  pub fn add_StoreType(&mut self, StoreType: StoreType) {
    self.fbb_.push_slot::<StoreType>(ProductMonthlyExcel::VT_STORETYPE, StoreType, StoreType::None);
  }
  #[inline]
  pub fn add_Price(&mut self, Price: i64) {
    self.fbb_.push_slot::<i64>(ProductMonthlyExcel::VT_PRICE, Price, 0);
  }
  #[inline]
  pub fn add_PriceReference(&mut self, PriceReference: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_PRICEREFERENCE, PriceReference);
  }
  #[inline]
  pub fn add_ProductTagType(&mut self, ProductTagType: ProductTagType) {
    self.fbb_.push_slot::<ProductTagType>(ProductMonthlyExcel::VT_PRODUCTTAGTYPE, ProductTagType, ProductTagType::Monthly);
  }
  #[inline]
  pub fn add_MonthlyDays(&mut self, MonthlyDays: i64) {
    self.fbb_.push_slot::<i64>(ProductMonthlyExcel::VT_MONTHLYDAYS, MonthlyDays, 0);
  }
  #[inline]
  pub fn add_UseMonthlyProductCheck(&mut self, UseMonthlyProductCheck: bool) {
    self.fbb_.push_slot::<bool>(ProductMonthlyExcel::VT_USEMONTHLYPRODUCTCHECK, UseMonthlyProductCheck, false);
  }
  #[inline]
  pub fn add_PurchaseCountLimit(&mut self, PurchaseCountLimit: i64) {
    self.fbb_.push_slot::<i64>(ProductMonthlyExcel::VT_PURCHASECOUNTLIMIT, PurchaseCountLimit, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_PARCELTYPE, ParcelType);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_PARCELID, ParcelId);
  }
  #[inline]
  pub fn add_ParcelAmount(&mut self, ParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_PARCELAMOUNT, ParcelAmount);
  }
  #[inline]
  pub fn add_EnterCostReduceGroupId(&mut self, EnterCostReduceGroupId: i64) {
    self.fbb_.push_slot::<i64>(ProductMonthlyExcel::VT_ENTERCOSTREDUCEGROUPID, EnterCostReduceGroupId, 0);
  }
  #[inline]
  pub fn add_DailyParcelType(&mut self, DailyParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_DAILYPARCELTYPE, DailyParcelType);
  }
  #[inline]
  pub fn add_DailyParcelId(&mut self, DailyParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_DAILYPARCELID, DailyParcelId);
  }
  #[inline]
  pub fn add_DailyParcelAmount(&mut self, DailyParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductMonthlyExcel::VT_DAILYPARCELAMOUNT, DailyParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ProductMonthlyExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ProductMonthlyExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProductMonthlyExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProductMonthlyExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProductMonthlyExcel");
      ds.field("Id", &self.Id());
      ds.field("ProductId", &self.ProductId());
      ds.field("StoreType", &self.StoreType());
      ds.field("Price", &self.Price());
      ds.field("PriceReference", &self.PriceReference());
      ds.field("ProductTagType", &self.ProductTagType());
      ds.field("MonthlyDays", &self.MonthlyDays());
      ds.field("UseMonthlyProductCheck", &self.UseMonthlyProductCheck());
      ds.field("PurchaseCountLimit", &self.PurchaseCountLimit());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("ParcelAmount", &self.ParcelAmount());
      ds.field("EnterCostReduceGroupId", &self.EnterCostReduceGroupId());
      ds.field("DailyParcelType", &self.DailyParcelType());
      ds.field("DailyParcelId", &self.DailyParcelId());
      ds.field("DailyParcelAmount", &self.DailyParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ProductMonthlyExcelT {
  pub Id: i64,
  pub ProductId: Option<String>,
  pub StoreType: StoreType,
  pub Price: i64,
  pub PriceReference: Option<String>,
  pub ProductTagType: ProductTagType,
  pub MonthlyDays: i64,
  pub UseMonthlyProductCheck: bool,
  pub PurchaseCountLimit: i64,
  pub ParcelType: Option<Vec<ParcelType>>,
  pub ParcelId: Option<Vec<i64>>,
  pub ParcelAmount: Option<Vec<i64>>,
  pub EnterCostReduceGroupId: i64,
  pub DailyParcelType: Option<Vec<ParcelType>>,
  pub DailyParcelId: Option<Vec<i64>>,
  pub DailyParcelAmount: Option<Vec<i64>>,
}
impl Default for ProductMonthlyExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ProductId: None,
      StoreType: StoreType::None,
      Price: 0,
      PriceReference: None,
      ProductTagType: ProductTagType::Monthly,
      MonthlyDays: 0,
      UseMonthlyProductCheck: false,
      PurchaseCountLimit: 0,
      ParcelType: None,
      ParcelId: None,
      ParcelAmount: None,
      EnterCostReduceGroupId: 0,
      DailyParcelType: None,
      DailyParcelId: None,
      DailyParcelAmount: None,
    }
  }
}
impl ProductMonthlyExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ProductMonthlyExcel<'b>> {
    let Id = self.Id;
    let ProductId = self.ProductId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StoreType = self.StoreType;
    let Price = self.Price;
    let PriceReference = self.PriceReference.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProductTagType = self.ProductTagType;
    let MonthlyDays = self.MonthlyDays;
    let UseMonthlyProductCheck = self.UseMonthlyProductCheck;
    let PurchaseCountLimit = self.PurchaseCountLimit;
    let ParcelType = self.ParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParcelId = self.ParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParcelAmount = self.ParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let EnterCostReduceGroupId = self.EnterCostReduceGroupId;
    let DailyParcelType = self.DailyParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let DailyParcelId = self.DailyParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let DailyParcelAmount = self.DailyParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ProductMonthlyExcel::create(_fbb, &ProductMonthlyExcelArgs{
      Id,
      ProductId,
      StoreType,
      Price,
      PriceReference,
      ProductTagType,
      MonthlyDays,
      UseMonthlyProductCheck,
      PurchaseCountLimit,
      ParcelType,
      ParcelId,
      ParcelAmount,
      EnterCostReduceGroupId,
      DailyParcelType,
      DailyParcelId,
      DailyParcelAmount,
    })
  }
}
