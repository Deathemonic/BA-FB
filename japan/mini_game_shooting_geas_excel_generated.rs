// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameShootingGeasExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameShootingGeasExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameShootingGeasExcel<'a> {
  type Inner = MiniGameShootingGeasExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameShootingGeasExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_GEASTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ICON: flatbuffers::VOffsetT = 8;
  pub const VT_PROBABILITY: flatbuffers::VOffsetT = 10;
  pub const VT_MAXOVERLAPCOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_GEASDATA: flatbuffers::VOffsetT = 14;
  pub const VT_NEEDGEASID: flatbuffers::VOffsetT = 16;
  pub const VT_HIDEINPAUSEPOPUP: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameShootingGeasExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameShootingGeasExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameShootingGeasExcel<'bldr>> {
    let mut builder = MiniGameShootingGeasExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameShootingGeas");
      let x = args.NeedGeasId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NeedGeasId(x);
      let x = args.Probability;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Probability(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.GeasData {
        builder.add_GeasData(x);
      }
      let x = args.MaxOverlapCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxOverlapCount(x);
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      let x = args.GeasType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_GeasType(x);
      builder.add_HideInPausePopup(args.HideInPausePopup);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameShootingGeasExcelT {
    let key = table_encryption_service::create_key(b"MiniGameShootingGeas");
      let UniqueId = self.UniqueId();
      let GeasType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.GeasType(), &key)
      } else {
        self.GeasType()
      };
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Probability = self.Probability();
      let MaxOverlapCount = self.MaxOverlapCount();
    let GeasData = self.GeasData().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let NeedGeasId = self.NeedGeasId();
      let HideInPausePopup = self.HideInPausePopup();
    MiniGameShootingGeasExcelT {
      UniqueId,
      GeasType,
      Icon,
      Probability,
      MaxOverlapCount,
      GeasData,
      NeedGeasId,
      HideInPausePopup,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingGeasExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GeasType(&self) -> Geas {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Geas>(MiniGameShootingGeasExcel::VT_GEASTYPE, Some(Geas::ForwardProjectile)).unwrap()}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameShootingGeasExcel::VT_ICON, None)}
  }
  #[inline]
  pub fn Probability(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingGeasExcel::VT_PROBABILITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxOverlapCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameShootingGeasExcel::VT_MAXOVERLAPCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GeasData(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameShootingGeasExcel::VT_GEASDATA, None)}
  }
  #[inline]
  pub fn NeedGeasId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameShootingGeasExcel::VT_NEEDGEASID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HideInPausePopup(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MiniGameShootingGeasExcel::VT_HIDEINPAUSEPOPUP, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameShootingGeasExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<Geas>("GeasType", Self::VT_GEASTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .visit_field::<i64>("Probability", Self::VT_PROBABILITY, false)?
     .visit_field::<i32>("MaxOverlapCount", Self::VT_MAXOVERLAPCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GeasData", Self::VT_GEASDATA, false)?
     .visit_field::<i64>("NeedGeasId", Self::VT_NEEDGEASID, false)?
     .visit_field::<bool>("HideInPausePopup", Self::VT_HIDEINPAUSEPOPUP, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameShootingGeasExcelArgs<'a> {
    pub UniqueId: i64,
    pub GeasType: Geas,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Probability: i64,
    pub MaxOverlapCount: i32,
    pub GeasData: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NeedGeasId: i64,
    pub HideInPausePopup: bool,
}
impl<'a> Default for MiniGameShootingGeasExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameShootingGeasExcelArgs {
      UniqueId: 0,
      GeasType: Geas::ForwardProjectile,
      Icon: None,
      Probability: 0,
      MaxOverlapCount: 0,
      GeasData: None,
      NeedGeasId: 0,
      HideInPausePopup: false,
    }
  }
}

impl Serialize for MiniGameShootingGeasExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameShootingGeasExcel", 8)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("GeasType", &self.GeasType())?;
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
      s.serialize_field("Probability", &self.Probability())?;
      s.serialize_field("MaxOverlapCount", &self.MaxOverlapCount())?;
      if let Some(f) = self.GeasData() {
        s.serialize_field("GeasData", &f)?;
      } else {
        s.skip_field("GeasData")?;
      }
      s.serialize_field("NeedGeasId", &self.NeedGeasId())?;
      s.serialize_field("HideInPausePopup", &self.HideInPausePopup())?;
    s.end()
  }
}

pub struct MiniGameShootingGeasExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameShootingGeasExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingGeasExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_GeasType(&mut self, GeasType: Geas) {
    self.fbb_.push_slot::<Geas>(MiniGameShootingGeasExcel::VT_GEASTYPE, GeasType, Geas::ForwardProjectile);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameShootingGeasExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn add_Probability(&mut self, Probability: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingGeasExcel::VT_PROBABILITY, Probability, 0);
  }
  #[inline]
  pub fn add_MaxOverlapCount(&mut self, MaxOverlapCount: i32) {
    self.fbb_.push_slot::<i32>(MiniGameShootingGeasExcel::VT_MAXOVERLAPCOUNT, MaxOverlapCount, 0);
  }
  #[inline]
  pub fn add_GeasData(&mut self, GeasData: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameShootingGeasExcel::VT_GEASDATA, GeasData);
  }
  #[inline]
  pub fn add_NeedGeasId(&mut self, NeedGeasId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameShootingGeasExcel::VT_NEEDGEASID, NeedGeasId, 0);
  }
  #[inline]
  pub fn add_HideInPausePopup(&mut self, HideInPausePopup: bool) {
    self.fbb_.push_slot::<bool>(MiniGameShootingGeasExcel::VT_HIDEINPAUSEPOPUP, HideInPausePopup, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameShootingGeasExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameShootingGeasExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameShootingGeasExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameShootingGeasExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameShootingGeasExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("GeasType", &self.GeasType());
      ds.field("Icon", &self.Icon());
      ds.field("Probability", &self.Probability());
      ds.field("MaxOverlapCount", &self.MaxOverlapCount());
      ds.field("GeasData", &self.GeasData());
      ds.field("NeedGeasId", &self.NeedGeasId());
      ds.field("HideInPausePopup", &self.HideInPausePopup());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameShootingGeasExcelT {
  pub UniqueId: i64,
  pub GeasType: Geas,
  pub Icon: Option<String>,
  pub Probability: i64,
  pub MaxOverlapCount: i32,
  pub GeasData: Option<String>,
  pub NeedGeasId: i64,
  pub HideInPausePopup: bool,
}
impl Default for MiniGameShootingGeasExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      GeasType: Geas::ForwardProjectile,
      Icon: None,
      Probability: 0,
      MaxOverlapCount: 0,
      GeasData: None,
      NeedGeasId: 0,
      HideInPausePopup: false,
    }
  }
}
impl MiniGameShootingGeasExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameShootingGeasExcel<'b>> {
    let UniqueId = self.UniqueId;
    let GeasType = self.GeasType;
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Probability = self.Probability;
    let MaxOverlapCount = self.MaxOverlapCount;
    let GeasData = self.GeasData.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NeedGeasId = self.NeedGeasId;
    let HideInPausePopup = self.HideInPausePopup;
    MiniGameShootingGeasExcel::create(_fbb, &MiniGameShootingGeasExcelArgs{
      UniqueId,
      GeasType,
      Icon,
      Probability,
      MaxOverlapCount,
      GeasData,
      NeedGeasId,
      HideInPausePopup,
    })
  }
}
