// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WeekDungeonOpenScheduleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WeekDungeonOpenScheduleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WeekDungeonOpenScheduleExcel<'a> {
  type Inner = WeekDungeonOpenScheduleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WeekDungeonOpenScheduleExcel<'a> {
  pub const VT_WEEKDAY: flatbuffers::VOffsetT = 4;
  pub const VT_OPEN: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WeekDungeonOpenScheduleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WeekDungeonOpenScheduleExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<WeekDungeonOpenScheduleExcel<'bldr>> {
    let mut builder = WeekDungeonOpenScheduleExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"WeekDungeonOpenSchedule");
      if let Some(x) = args.Open {
        builder.add_Open(x);
      }
      let x = args.WeekDay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_WeekDay(x);
    builder.finish()
  }

  pub fn unpack(&self) -> WeekDungeonOpenScheduleExcelT {
    let key = table_encryption_service::create_key(b"WeekDungeonOpenSchedule");
      let WeekDay = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.WeekDay(), &key)
      } else {
        self.WeekDay()
      };
    let Open = self.Open().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    WeekDungeonOpenScheduleExcelT {
      WeekDay,
      Open,
    }
  }

  #[inline]
  pub fn WeekDay(&self) -> WeekDay {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WeekDay>(WeekDungeonOpenScheduleExcel::VT_WEEKDAY, Some(WeekDay::Sunday)).unwrap()}
  }
  #[inline]
  pub fn Open(&self) -> Option<flatbuffers::Vector<'a, WeekDungeonType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, WeekDungeonType>>>(WeekDungeonOpenScheduleExcel::VT_OPEN, None)}
  }
}

impl flatbuffers::Verifiable for WeekDungeonOpenScheduleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<WeekDay>("WeekDay", Self::VT_WEEKDAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, WeekDungeonType>>>("Open", Self::VT_OPEN, false)?
     .finish();
    Ok(())
  }
}
pub struct WeekDungeonOpenScheduleExcelArgs<'a> {
    pub WeekDay: WeekDay,
    pub Open: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, WeekDungeonType>>>,
}
impl<'a> Default for WeekDungeonOpenScheduleExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    WeekDungeonOpenScheduleExcelArgs {
      WeekDay: WeekDay::Sunday,
      Open: None,
    }
  }
}

impl Serialize for WeekDungeonOpenScheduleExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WeekDungeonOpenScheduleExcel", 2)?;
      s.serialize_field("WeekDay", &self.WeekDay())?;
      if let Some(f) = self.Open() {
        s.serialize_field("Open", &f)?;
      } else {
        s.skip_field("Open")?;
      }
    s.end()
  }
}

pub struct WeekDungeonOpenScheduleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WeekDungeonOpenScheduleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_WeekDay(&mut self, WeekDay: WeekDay) {
    self.fbb_.push_slot::<WeekDay>(WeekDungeonOpenScheduleExcel::VT_WEEKDAY, WeekDay, WeekDay::Sunday);
  }
  #[inline]
  pub fn add_Open(&mut self, Open: flatbuffers::WIPOffset<flatbuffers::Vector<'b , WeekDungeonType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonOpenScheduleExcel::VT_OPEN, Open);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WeekDungeonOpenScheduleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WeekDungeonOpenScheduleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WeekDungeonOpenScheduleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WeekDungeonOpenScheduleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WeekDungeonOpenScheduleExcel");
      ds.field("WeekDay", &self.WeekDay());
      ds.field("Open", &self.Open());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WeekDungeonOpenScheduleExcelT {
  pub WeekDay: WeekDay,
  pub Open: Option<Vec<WeekDungeonType>>,
}
impl Default for WeekDungeonOpenScheduleExcelT {
  fn default() -> Self {
    Self {
      WeekDay: WeekDay::Sunday,
      Open: None,
    }
  }
}
impl WeekDungeonOpenScheduleExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WeekDungeonOpenScheduleExcel<'b>> {
    let WeekDay = self.WeekDay;
    let Open = self.Open.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    WeekDungeonOpenScheduleExcel::create(_fbb, &WeekDungeonOpenScheduleExcelArgs{
      WeekDay,
      Open,
    })
  }
}
