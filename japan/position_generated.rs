// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PositionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Position<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Position<'a> {
  type Inner = Position<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Position<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Z: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Position { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PositionArgs
  ) -> flatbuffers::WIPOffset<Position<'bldr>> {
    let mut builder = PositionBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Pos");
      let x = args.Z;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Z(x);
      let x = args.X;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_X(x);
    builder.finish()
  }

  pub fn unpack(&self) -> PositionT {
    let key = table_encryption_service::create_key(b"Pos");
      let X = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.X(), &key)
      } else {
        self.X()
      };
      let Z = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Z(), &key)
      } else {
        self.Z()
      };
    PositionT {
      X,
      Z,
    }
  }

  #[inline]
  pub fn X(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Position::VT_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Z(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(Position::VT_Z, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Position<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("X", Self::VT_X, false)?
     .visit_field::<f32>("Z", Self::VT_Z, false)?
     .finish();
    Ok(())
  }
}
pub struct PositionArgs {
    pub X: f32,
    pub Z: f32,
}
impl<'a> Default for PositionArgs {
  #[inline]
  fn default() -> Self {
    PositionArgs {
      X: 0.0,
      Z: 0.0,
    }
  }
}

impl Serialize for Position<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Position", 2)?;
      s.serialize_field("X", &self.X())?;
      s.serialize_field("Z", &self.Z())?;
    s.end()
  }
}

pub struct PositionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PositionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_X(&mut self, X: f32) {
    self.fbb_.push_slot::<f32>(Position::VT_X, X, 0.0);
  }
  #[inline]
  pub fn add_Z(&mut self, Z: f32) {
    self.fbb_.push_slot::<f32>(Position::VT_Z, Z, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PositionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PositionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Position<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Position<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Position");
      ds.field("X", &self.X());
      ds.field("Z", &self.Z());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PositionT {
  pub X: f32,
  pub Z: f32,
}
impl Default for PositionT {
  fn default() -> Self {
    Self {
      X: 0.0,
      Z: 0.0,
    }
  }
}
impl PositionT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Position<'b>> {
    let X = self.X;
    let Z = self.Z;
    Position::create(_fbb, &PositionArgs{
      X,
      Z,
    })
  }
}
