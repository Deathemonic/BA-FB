// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StoryStrategyExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StoryStrategyExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StoryStrategyExcel<'a> {
  type Inner = StoryStrategyExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StoryStrategyExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZE: flatbuffers::VOffsetT = 8;
  pub const VT_STAGEENTERECHELONCOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 12;
  pub const VT_WHITELISTID: flatbuffers::VOffsetT = 14;
  pub const VT_STRATEGYMAP: flatbuffers::VOffsetT = 16;
  pub const VT_STRATEGYMAPBG: flatbuffers::VOffsetT = 18;
  pub const VT_MAXTURN: flatbuffers::VOffsetT = 20;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 22;
  pub const VT_STRATEGYENVIRONMENT: flatbuffers::VOffsetT = 24;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 26;
  pub const VT_BGMID: flatbuffers::VOffsetT = 28;
  pub const VT_FIRSTCLEARREPORTEVENTNAME: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StoryStrategyExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StoryStrategyExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<StoryStrategyExcel<'bldr>> {
    let mut builder = StoryStrategyExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"StoryStrategy");
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.WhiteListId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_WhiteListId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.FirstClearReportEventName {
        builder.add_FirstClearReportEventName(x);
      }
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
      let x = args.StrategyEnvironment;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StrategyEnvironment(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      let x = args.MaxTurn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxTurn(x);
      if let Some(x) = args.StrategyMapBG {
        builder.add_StrategyMapBG(x);
      }
      if let Some(x) = args.StrategyMap {
        builder.add_StrategyMap(x);
      }
      let x = args.StageEnterEchelonCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterEchelonCount(x);
      if let Some(x) = args.Localize {
        builder.add_Localize(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> StoryStrategyExcelT {
    let key = table_encryption_service::create_key(b"StoryStrategy");
      let Id = self.Id();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Localize = self.Localize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StageEnterEchelonCount = self.StageEnterEchelonCount();
      let BattleDuration = self.BattleDuration();
      let WhiteListId = self.WhiteListId();
    let StrategyMap = self.StrategyMap().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StrategyMapBG = self.StrategyMapBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let MaxTurn = self.MaxTurn();
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let StrategyEnvironment = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StrategyEnvironment(), &key)
      } else {
        self.StrategyEnvironment()
      };
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let BGMId = self.BGMId();
    let FirstClearReportEventName = self.FirstClearReportEventName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    StoryStrategyExcelT {
      Id,
      Name,
      Localize,
      StageEnterEchelonCount,
      BattleDuration,
      WhiteListId,
      StrategyMap,
      StrategyMapBG,
      MaxTurn,
      StageTopography,
      StrategyEnvironment,
      ContentType,
      BGMId,
      FirstClearReportEventName,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StoryStrategyExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StoryStrategyExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn Localize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StoryStrategyExcel::VT_LOCALIZE, None)}
  }
  #[inline]
  pub fn StageEnterEchelonCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StoryStrategyExcel::VT_STAGEENTERECHELONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StoryStrategyExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn WhiteListId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StoryStrategyExcel::VT_WHITELISTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrategyMap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StoryStrategyExcel::VT_STRATEGYMAP, None)}
  }
  #[inline]
  pub fn StrategyMapBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StoryStrategyExcel::VT_STRATEGYMAPBG, None)}
  }
  #[inline]
  pub fn MaxTurn(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StoryStrategyExcel::VT_MAXTURN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(StoryStrategyExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn StrategyEnvironment(&self) -> StrategyEnvironment {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StrategyEnvironment>(StoryStrategyExcel::VT_STRATEGYENVIRONMENT, Some(StrategyEnvironment::None)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(StoryStrategyExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StoryStrategyExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FirstClearReportEventName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StoryStrategyExcel::VT_FIRSTCLEARREPORTEVENTNAME, None)}
  }
}

impl flatbuffers::Verifiable for StoryStrategyExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Localize", Self::VT_LOCALIZE, false)?
     .visit_field::<i32>("StageEnterEchelonCount", Self::VT_STAGEENTERECHELONCOUNT, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<i64>("WhiteListId", Self::VT_WHITELISTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMap", Self::VT_STRATEGYMAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMapBG", Self::VT_STRATEGYMAPBG, false)?
     .visit_field::<i32>("MaxTurn", Self::VT_MAXTURN, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<StrategyEnvironment>("StrategyEnvironment", Self::VT_STRATEGYENVIRONMENT, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FirstClearReportEventName", Self::VT_FIRSTCLEARREPORTEVENTNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct StoryStrategyExcelArgs<'a> {
    pub Id: i64,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Localize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StageEnterEchelonCount: i32,
    pub BattleDuration: i64,
    pub WhiteListId: i64,
    pub StrategyMap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyMapBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MaxTurn: i32,
    pub StageTopography: StageTopography,
    pub StrategyEnvironment: StrategyEnvironment,
    pub ContentType: ContentType,
    pub BGMId: i64,
    pub FirstClearReportEventName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for StoryStrategyExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    StoryStrategyExcelArgs {
      Id: 0,
      Name: None,
      Localize: None,
      StageEnterEchelonCount: 0,
      BattleDuration: 0,
      WhiteListId: 0,
      StrategyMap: None,
      StrategyMapBG: None,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      StrategyEnvironment: StrategyEnvironment::None,
      ContentType: ContentType::None,
      BGMId: 0,
      FirstClearReportEventName: None,
    }
  }
}

impl Serialize for StoryStrategyExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StoryStrategyExcel", 14)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.Localize() {
        s.serialize_field("Localize", &f)?;
      } else {
        s.skip_field("Localize")?;
      }
      s.serialize_field("StageEnterEchelonCount", &self.StageEnterEchelonCount())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("WhiteListId", &self.WhiteListId())?;
      if let Some(f) = self.StrategyMap() {
        s.serialize_field("StrategyMap", &f)?;
      } else {
        s.skip_field("StrategyMap")?;
      }
      if let Some(f) = self.StrategyMapBG() {
        s.serialize_field("StrategyMapBG", &f)?;
      } else {
        s.skip_field("StrategyMapBG")?;
      }
      s.serialize_field("MaxTurn", &self.MaxTurn())?;
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("StrategyEnvironment", &self.StrategyEnvironment())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("BGMId", &self.BGMId())?;
      if let Some(f) = self.FirstClearReportEventName() {
        s.serialize_field("FirstClearReportEventName", &f)?;
      } else {
        s.skip_field("FirstClearReportEventName")?;
      }
    s.end()
  }
}

pub struct StoryStrategyExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StoryStrategyExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(StoryStrategyExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoryStrategyExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_Localize(&mut self, Localize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoryStrategyExcel::VT_LOCALIZE, Localize);
  }
  #[inline]
  pub fn add_StageEnterEchelonCount(&mut self, StageEnterEchelonCount: i32) {
    self.fbb_.push_slot::<i32>(StoryStrategyExcel::VT_STAGEENTERECHELONCOUNT, StageEnterEchelonCount, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(StoryStrategyExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_WhiteListId(&mut self, WhiteListId: i64) {
    self.fbb_.push_slot::<i64>(StoryStrategyExcel::VT_WHITELISTID, WhiteListId, 0);
  }
  #[inline]
  pub fn add_StrategyMap(&mut self, StrategyMap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoryStrategyExcel::VT_STRATEGYMAP, StrategyMap);
  }
  #[inline]
  pub fn add_StrategyMapBG(&mut self, StrategyMapBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoryStrategyExcel::VT_STRATEGYMAPBG, StrategyMapBG);
  }
  #[inline]
  pub fn add_MaxTurn(&mut self, MaxTurn: i32) {
    self.fbb_.push_slot::<i32>(StoryStrategyExcel::VT_MAXTURN, MaxTurn, 0);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(StoryStrategyExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_StrategyEnvironment(&mut self, StrategyEnvironment: StrategyEnvironment) {
    self.fbb_.push_slot::<StrategyEnvironment>(StoryStrategyExcel::VT_STRATEGYENVIRONMENT, StrategyEnvironment, StrategyEnvironment::None);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(StoryStrategyExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(StoryStrategyExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_FirstClearReportEventName(&mut self, FirstClearReportEventName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StoryStrategyExcel::VT_FIRSTCLEARREPORTEVENTNAME, FirstClearReportEventName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StoryStrategyExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StoryStrategyExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StoryStrategyExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StoryStrategyExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StoryStrategyExcel");
      ds.field("Id", &self.Id());
      ds.field("Name", &self.Name());
      ds.field("Localize", &self.Localize());
      ds.field("StageEnterEchelonCount", &self.StageEnterEchelonCount());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("WhiteListId", &self.WhiteListId());
      ds.field("StrategyMap", &self.StrategyMap());
      ds.field("StrategyMapBG", &self.StrategyMapBG());
      ds.field("MaxTurn", &self.MaxTurn());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("StrategyEnvironment", &self.StrategyEnvironment());
      ds.field("ContentType", &self.ContentType());
      ds.field("BGMId", &self.BGMId());
      ds.field("FirstClearReportEventName", &self.FirstClearReportEventName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StoryStrategyExcelT {
  pub Id: i64,
  pub Name: Option<String>,
  pub Localize: Option<String>,
  pub StageEnterEchelonCount: i32,
  pub BattleDuration: i64,
  pub WhiteListId: i64,
  pub StrategyMap: Option<String>,
  pub StrategyMapBG: Option<String>,
  pub MaxTurn: i32,
  pub StageTopography: StageTopography,
  pub StrategyEnvironment: StrategyEnvironment,
  pub ContentType: ContentType,
  pub BGMId: i64,
  pub FirstClearReportEventName: Option<String>,
}
impl Default for StoryStrategyExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Name: None,
      Localize: None,
      StageEnterEchelonCount: 0,
      BattleDuration: 0,
      WhiteListId: 0,
      StrategyMap: None,
      StrategyMapBG: None,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      StrategyEnvironment: StrategyEnvironment::None,
      ContentType: ContentType::None,
      BGMId: 0,
      FirstClearReportEventName: None,
    }
  }
}
impl StoryStrategyExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<StoryStrategyExcel<'b>> {
    let Id = self.Id;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Localize = self.Localize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StageEnterEchelonCount = self.StageEnterEchelonCount;
    let BattleDuration = self.BattleDuration;
    let WhiteListId = self.WhiteListId;
    let StrategyMap = self.StrategyMap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyMapBG = self.StrategyMapBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MaxTurn = self.MaxTurn;
    let StageTopography = self.StageTopography;
    let StrategyEnvironment = self.StrategyEnvironment;
    let ContentType = self.ContentType;
    let BGMId = self.BGMId;
    let FirstClearReportEventName = self.FirstClearReportEventName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    StoryStrategyExcel::create(_fbb, &StoryStrategyExcelArgs{
      Id,
      Name,
      Localize,
      StageEnterEchelonCount,
      BattleDuration,
      WhiteListId,
      StrategyMap,
      StrategyMapBG,
      MaxTurn,
      StageTopography,
      StrategyEnvironment,
      ContentType,
      BGMId,
      FirstClearReportEventName,
    })
  }
}
