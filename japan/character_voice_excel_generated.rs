// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterVoiceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterVoiceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterVoiceExcel<'a> {
  type Inner = CharacterVoiceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterVoiceExcel<'a> {
  pub const VT_CHARACTERVOICEUNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERVOICEGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_VOICEHASH: flatbuffers::VOffsetT = 8;
  pub const VT_ONLYONE: flatbuffers::VOffsetT = 10;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 12;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 14;
  pub const VT_COLLECTIONVISIBLE: flatbuffers::VOffsetT = 16;
  pub const VT_CVCOLLECTIONTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_UNLOCKFAVORRANK: flatbuffers::VOffsetT = 20;
  pub const VT_LOCALIZECVGROUP: flatbuffers::VOffsetT = 22;
  pub const VT_NATION: flatbuffers::VOffsetT = 24;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 26;
  pub const VT_DELAY: flatbuffers::VOffsetT = 28;
  pub const VT_PATH: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterVoiceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterVoiceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterVoiceExcel<'bldr>> {
    let mut builder = CharacterVoiceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterVoice");
      let x = args.UnlockFavorRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UnlockFavorRank(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.CharacterVoiceGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterVoiceGroupId(x);
      let x = args.CharacterVoiceUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterVoiceUniqueId(x);
      if let Some(x) = args.Path {
        builder.add_Path(x);
      }
      if let Some(x) = args.Delay {
        builder.add_Delay(x);
      }
      if let Some(x) = args.Volume {
        builder.add_Volume(x);
      }
      if let Some(x) = args.Nation {
        builder.add_Nation(x);
      }
      if let Some(x) = args.LocalizeCVGroup {
        builder.add_LocalizeCVGroup(x);
      }
      let x = args.CVCollectionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CVCollectionType(x);
      let x = args.Priority;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Priority(x);
      let x = args.VoiceHash;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_VoiceHash(x);
      builder.add_CollectionVisible(args.CollectionVisible);
      builder.add_OnlyOne(args.OnlyOne);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterVoiceExcelT {
    let key = table_encryption_service::create_key(b"CharacterVoice");
      let CharacterVoiceUniqueId = self.CharacterVoiceUniqueId();
      let CharacterVoiceGroupId = self.CharacterVoiceGroupId();
      let VoiceHash = self.VoiceHash();
      let OnlyOne = self.OnlyOne();
      let Priority = self.Priority();
      let DisplayOrder = self.DisplayOrder();
      let CollectionVisible = self.CollectionVisible();
      let CVCollectionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CVCollectionType(), &key)
      } else {
        self.CVCollectionType()
      };
      let UnlockFavorRank = self.UnlockFavorRank();
    let LocalizeCVGroup = self.LocalizeCVGroup().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Nation = self.Nation().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let Volume = self.Volume().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    let Delay = self.Delay().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    let Path = self.Path().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    CharacterVoiceExcelT {
      CharacterVoiceUniqueId,
      CharacterVoiceGroupId,
      VoiceHash,
      OnlyOne,
      Priority,
      DisplayOrder,
      CollectionVisible,
      CVCollectionType,
      UnlockFavorRank,
      LocalizeCVGroup,
      Nation,
      Volume,
      Delay,
      Path,
    }
  }

  #[inline]
  pub fn CharacterVoiceUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVoiceExcel::VT_CHARACTERVOICEUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterVoiceGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVoiceExcel::VT_CHARACTERVOICEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VoiceHash(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CharacterVoiceExcel::VT_VOICEHASH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OnlyOne(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterVoiceExcel::VT_ONLYONE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Priority(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterVoiceExcel::VT_PRIORITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVoiceExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CollectionVisible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterVoiceExcel::VT_COLLECTIONVISIBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn CVCollectionType(&self) -> CVCollectionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CVCollectionType>(CharacterVoiceExcel::VT_CVCOLLECTIONTYPE, Some(CVCollectionType::CVNormal)).unwrap()}
  }
  #[inline]
  pub fn UnlockFavorRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVoiceExcel::VT_UNLOCKFAVORRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCVGroup(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVoiceExcel::VT_LOCALIZECVGROUP, None)}
  }
  #[inline]
  pub fn Nation(&self) -> Option<flatbuffers::Vector<'a, Nation>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Nation>>>(CharacterVoiceExcel::VT_NATION, None)}
  }
  #[inline]
  pub fn Volume(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(CharacterVoiceExcel::VT_VOLUME, None)}
  }
  #[inline]
  pub fn Delay(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(CharacterVoiceExcel::VT_DELAY, None)}
  }
  #[inline]
  pub fn Path(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterVoiceExcel::VT_PATH, None)}
  }
}

impl flatbuffers::Verifiable for CharacterVoiceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterVoiceUniqueId", Self::VT_CHARACTERVOICEUNIQUEID, false)?
     .visit_field::<i64>("CharacterVoiceGroupId", Self::VT_CHARACTERVOICEGROUPID, false)?
     .visit_field::<u32>("VoiceHash", Self::VT_VOICEHASH, false)?
     .visit_field::<bool>("OnlyOne", Self::VT_ONLYONE, false)?
     .visit_field::<i32>("Priority", Self::VT_PRIORITY, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<bool>("CollectionVisible", Self::VT_COLLECTIONVISIBLE, false)?
     .visit_field::<CVCollectionType>("CVCollectionType", Self::VT_CVCOLLECTIONTYPE, false)?
     .visit_field::<i64>("UnlockFavorRank", Self::VT_UNLOCKFAVORRANK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeCVGroup", Self::VT_LOCALIZECVGROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Nation>>>("Nation", Self::VT_NATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("Volume", Self::VT_VOLUME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("Delay", Self::VT_DELAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("Path", Self::VT_PATH, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterVoiceExcelArgs<'a> {
    pub CharacterVoiceUniqueId: i64,
    pub CharacterVoiceGroupId: i64,
    pub VoiceHash: u32,
    pub OnlyOne: bool,
    pub Priority: i32,
    pub DisplayOrder: i64,
    pub CollectionVisible: bool,
    pub CVCollectionType: CVCollectionType,
    pub UnlockFavorRank: i64,
    pub LocalizeCVGroup: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Nation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Nation>>>,
    pub Volume: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub Delay: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub Path: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for CharacterVoiceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterVoiceExcelArgs {
      CharacterVoiceUniqueId: 0,
      CharacterVoiceGroupId: 0,
      VoiceHash: 0,
      OnlyOne: false,
      Priority: 0,
      DisplayOrder: 0,
      CollectionVisible: false,
      CVCollectionType: CVCollectionType::CVNormal,
      UnlockFavorRank: 0,
      LocalizeCVGroup: None,
      Nation: None,
      Volume: None,
      Delay: None,
      Path: None,
    }
  }
}

impl Serialize for CharacterVoiceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterVoiceExcel", 14)?;
      s.serialize_field("CharacterVoiceUniqueId", &self.CharacterVoiceUniqueId())?;
      s.serialize_field("CharacterVoiceGroupId", &self.CharacterVoiceGroupId())?;
      s.serialize_field("VoiceHash", &self.VoiceHash())?;
      s.serialize_field("OnlyOne", &self.OnlyOne())?;
      s.serialize_field("Priority", &self.Priority())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("CollectionVisible", &self.CollectionVisible())?;
      s.serialize_field("CVCollectionType", &self.CVCollectionType())?;
      s.serialize_field("UnlockFavorRank", &self.UnlockFavorRank())?;
      if let Some(f) = self.LocalizeCVGroup() {
        s.serialize_field("LocalizeCVGroup", &f)?;
      } else {
        s.skip_field("LocalizeCVGroup")?;
      }
      if let Some(f) = self.Nation() {
        s.serialize_field("Nation", &f)?;
      } else {
        s.skip_field("Nation")?;
      }
      if let Some(f) = self.Volume() {
        s.serialize_field("Volume", &f)?;
      } else {
        s.skip_field("Volume")?;
      }
      if let Some(f) = self.Delay() {
        s.serialize_field("Delay", &f)?;
      } else {
        s.skip_field("Delay")?;
      }
      if let Some(f) = self.Path() {
        s.serialize_field("Path", &f)?;
      } else {
        s.skip_field("Path")?;
      }
    s.end()
  }
}

pub struct CharacterVoiceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterVoiceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterVoiceUniqueId(&mut self, CharacterVoiceUniqueId: i64) {
    self.fbb_.push_slot::<i64>(CharacterVoiceExcel::VT_CHARACTERVOICEUNIQUEID, CharacterVoiceUniqueId, 0);
  }
  #[inline]
  pub fn add_CharacterVoiceGroupId(&mut self, CharacterVoiceGroupId: i64) {
    self.fbb_.push_slot::<i64>(CharacterVoiceExcel::VT_CHARACTERVOICEGROUPID, CharacterVoiceGroupId, 0);
  }
  #[inline]
  pub fn add_VoiceHash(&mut self, VoiceHash: u32) {
    self.fbb_.push_slot::<u32>(CharacterVoiceExcel::VT_VOICEHASH, VoiceHash, 0);
  }
  #[inline]
  pub fn add_OnlyOne(&mut self, OnlyOne: bool) {
    self.fbb_.push_slot::<bool>(CharacterVoiceExcel::VT_ONLYONE, OnlyOne, false);
  }
  #[inline]
  pub fn add_Priority(&mut self, Priority: i32) {
    self.fbb_.push_slot::<i32>(CharacterVoiceExcel::VT_PRIORITY, Priority, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(CharacterVoiceExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_CollectionVisible(&mut self, CollectionVisible: bool) {
    self.fbb_.push_slot::<bool>(CharacterVoiceExcel::VT_COLLECTIONVISIBLE, CollectionVisible, false);
  }
  #[inline]
  pub fn add_CVCollectionType(&mut self, CVCollectionType: CVCollectionType) {
    self.fbb_.push_slot::<CVCollectionType>(CharacterVoiceExcel::VT_CVCOLLECTIONTYPE, CVCollectionType, CVCollectionType::CVNormal);
  }
  #[inline]
  pub fn add_UnlockFavorRank(&mut self, UnlockFavorRank: i64) {
    self.fbb_.push_slot::<i64>(CharacterVoiceExcel::VT_UNLOCKFAVORRANK, UnlockFavorRank, 0);
  }
  #[inline]
  pub fn add_LocalizeCVGroup(&mut self, LocalizeCVGroup: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceExcel::VT_LOCALIZECVGROUP, LocalizeCVGroup);
  }
  #[inline]
  pub fn add_Nation(&mut self, Nation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Nation>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceExcel::VT_NATION, Nation);
  }
  #[inline]
  pub fn add_Volume(&mut self, Volume: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceExcel::VT_VOLUME, Volume);
  }
  #[inline]
  pub fn add_Delay(&mut self, Delay: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceExcel::VT_DELAY, Delay);
  }
  #[inline]
  pub fn add_Path(&mut self, Path: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceExcel::VT_PATH, Path);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterVoiceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterVoiceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterVoiceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterVoiceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterVoiceExcel");
      ds.field("CharacterVoiceUniqueId", &self.CharacterVoiceUniqueId());
      ds.field("CharacterVoiceGroupId", &self.CharacterVoiceGroupId());
      ds.field("VoiceHash", &self.VoiceHash());
      ds.field("OnlyOne", &self.OnlyOne());
      ds.field("Priority", &self.Priority());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("CollectionVisible", &self.CollectionVisible());
      ds.field("CVCollectionType", &self.CVCollectionType());
      ds.field("UnlockFavorRank", &self.UnlockFavorRank());
      ds.field("LocalizeCVGroup", &self.LocalizeCVGroup());
      ds.field("Nation", &self.Nation());
      ds.field("Volume", &self.Volume());
      ds.field("Delay", &self.Delay());
      ds.field("Path", &self.Path());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterVoiceExcelT {
  pub CharacterVoiceUniqueId: i64,
  pub CharacterVoiceGroupId: i64,
  pub VoiceHash: u32,
  pub OnlyOne: bool,
  pub Priority: i32,
  pub DisplayOrder: i64,
  pub CollectionVisible: bool,
  pub CVCollectionType: CVCollectionType,
  pub UnlockFavorRank: i64,
  pub LocalizeCVGroup: Option<String>,
  pub Nation: Option<Vec<Nation>>,
  pub Volume: Option<Vec<f32>>,
  pub Delay: Option<Vec<f32>>,
  pub Path: Option<Vec<String>>,
}
impl Default for CharacterVoiceExcelT {
  fn default() -> Self {
    Self {
      CharacterVoiceUniqueId: 0,
      CharacterVoiceGroupId: 0,
      VoiceHash: 0,
      OnlyOne: false,
      Priority: 0,
      DisplayOrder: 0,
      CollectionVisible: false,
      CVCollectionType: CVCollectionType::CVNormal,
      UnlockFavorRank: 0,
      LocalizeCVGroup: None,
      Nation: None,
      Volume: None,
      Delay: None,
      Path: None,
    }
  }
}
impl CharacterVoiceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterVoiceExcel<'b>> {
    let CharacterVoiceUniqueId = self.CharacterVoiceUniqueId;
    let CharacterVoiceGroupId = self.CharacterVoiceGroupId;
    let VoiceHash = self.VoiceHash;
    let OnlyOne = self.OnlyOne;
    let Priority = self.Priority;
    let DisplayOrder = self.DisplayOrder;
    let CollectionVisible = self.CollectionVisible;
    let CVCollectionType = self.CVCollectionType;
    let UnlockFavorRank = self.UnlockFavorRank;
    let LocalizeCVGroup = self.LocalizeCVGroup.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Nation = self.Nation.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let Volume = self.Volume.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let Delay = self.Delay.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let Path = self.Path.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    CharacterVoiceExcel::create(_fbb, &CharacterVoiceExcelArgs{
      CharacterVoiceUniqueId,
      CharacterVoiceGroupId,
      VoiceHash,
      OnlyOne,
      Priority,
      DisplayOrder,
      CollectionVisible,
      CVCollectionType,
      UnlockFavorRank,
      LocalizeCVGroup,
      Nation,
      Volume,
      Delay,
      Path,
    })
  }
}
