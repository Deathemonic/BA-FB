// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MultiFloorRaidSeasonManageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MultiFloorRaidSeasonManageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MultiFloorRaidSeasonManageExcel<'a> {
  type Inner = MultiFloorRaidSeasonManageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MultiFloorRaidSeasonManageExcel<'a> {
  pub const VT_SEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_LOBBYENTERSCENARIO: flatbuffers::VOffsetT = 6;
  pub const VT_SHOWLOBBYBANNER: flatbuffers::VOffsetT = 8;
  pub const VT_SEASONSTARTDATE: flatbuffers::VOffsetT = 10;
  pub const VT_ENDNOTELABELSTARTDATE: flatbuffers::VOffsetT = 12;
  pub const VT_SEASONENDDATE: flatbuffers::VOffsetT = 14;
  pub const VT_SETTLEMENTENDDATE: flatbuffers::VOffsetT = 16;
  pub const VT_OPENRAIDBOSSGROUPID: flatbuffers::VOffsetT = 18;
  pub const VT_ENTERSCENARIOKEY: flatbuffers::VOffsetT = 20;
  pub const VT_LOBBYIMGPATH: flatbuffers::VOffsetT = 22;
  pub const VT_LEVELIMGPATH: flatbuffers::VOffsetT = 24;
  pub const VT_PLAYTIP: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MultiFloorRaidSeasonManageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MultiFloorRaidSeasonManageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MultiFloorRaidSeasonManageExcel<'bldr>> {
    let mut builder = MultiFloorRaidSeasonManageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MultiFloorRaidSeasonManage");
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      if let Some(x) = args.PlayTip {
        builder.add_PlayTip(x);
      }
      if let Some(x) = args.LevelImgPath {
        builder.add_LevelImgPath(x);
      }
      if let Some(x) = args.LobbyImgPath {
        builder.add_LobbyImgPath(x);
      }
      let x = args.EnterScenarioKey;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_EnterScenarioKey(x);
      if let Some(x) = args.OpenRaidBossGroupId {
        builder.add_OpenRaidBossGroupId(x);
      }
      if let Some(x) = args.SettlementEndDate {
        builder.add_SettlementEndDate(x);
      }
      if let Some(x) = args.SeasonEndDate {
        builder.add_SeasonEndDate(x);
      }
      if let Some(x) = args.EndNoteLabelStartDate {
        builder.add_EndNoteLabelStartDate(x);
      }
      if let Some(x) = args.SeasonStartDate {
        builder.add_SeasonStartDate(x);
      }
      let x = args.LobbyEnterScenario;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LobbyEnterScenario(x);
      builder.add_ShowLobbyBanner(args.ShowLobbyBanner);
    builder.finish()
  }

  pub fn unpack(&self) -> MultiFloorRaidSeasonManageExcelT {
    let key = table_encryption_service::create_key(b"MultiFloorRaidSeasonManage");
      let SeasonId = self.SeasonId();
      let LobbyEnterScenario = self.LobbyEnterScenario();
      let ShowLobbyBanner = self.ShowLobbyBanner();
    let SeasonStartDate = self.SeasonStartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndNoteLabelStartDate = self.EndNoteLabelStartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SeasonEndDate = self.SeasonEndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SettlementEndDate = self.SettlementEndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let OpenRaidBossGroupId = self.OpenRaidBossGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EnterScenarioKey = self.EnterScenarioKey();
    let LobbyImgPath = self.LobbyImgPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LevelImgPath = self.LevelImgPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PlayTip = self.PlayTip().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MultiFloorRaidSeasonManageExcelT {
      SeasonId,
      LobbyEnterScenario,
      ShowLobbyBanner,
      SeasonStartDate,
      EndNoteLabelStartDate,
      SeasonEndDate,
      SettlementEndDate,
      OpenRaidBossGroupId,
      EnterScenarioKey,
      LobbyImgPath,
      LevelImgPath,
      PlayTip,
    }
  }

  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MultiFloorRaidSeasonManageExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LobbyEnterScenario(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MultiFloorRaidSeasonManageExcel::VT_LOBBYENTERSCENARIO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShowLobbyBanner(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MultiFloorRaidSeasonManageExcel::VT_SHOWLOBBYBANNER, Some(false)).unwrap()}
  }
  #[inline]
  pub fn SeasonStartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_SEASONSTARTDATE, None)}
  }
  #[inline]
  pub fn EndNoteLabelStartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_ENDNOTELABELSTARTDATE, None)}
  }
  #[inline]
  pub fn SeasonEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_SEASONENDDATE, None)}
  }
  #[inline]
  pub fn SettlementEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_SETTLEMENTENDDATE, None)}
  }
  #[inline]
  pub fn OpenRaidBossGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_OPENRAIDBOSSGROUPID, None)}
  }
  #[inline]
  pub fn EnterScenarioKey(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MultiFloorRaidSeasonManageExcel::VT_ENTERSCENARIOKEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LobbyImgPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_LOBBYIMGPATH, None)}
  }
  #[inline]
  pub fn LevelImgPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_LEVELIMGPATH, None)}
  }
  #[inline]
  pub fn PlayTip(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MultiFloorRaidSeasonManageExcel::VT_PLAYTIP, None)}
  }
}

impl flatbuffers::Verifiable for MultiFloorRaidSeasonManageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<u32>("LobbyEnterScenario", Self::VT_LOBBYENTERSCENARIO, false)?
     .visit_field::<bool>("ShowLobbyBanner", Self::VT_SHOWLOBBYBANNER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SeasonStartDate", Self::VT_SEASONSTARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndNoteLabelStartDate", Self::VT_ENDNOTELABELSTARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SeasonEndDate", Self::VT_SEASONENDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SettlementEndDate", Self::VT_SETTLEMENTENDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OpenRaidBossGroupId", Self::VT_OPENRAIDBOSSGROUPID, false)?
     .visit_field::<u32>("EnterScenarioKey", Self::VT_ENTERSCENARIOKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LobbyImgPath", Self::VT_LOBBYIMGPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LevelImgPath", Self::VT_LEVELIMGPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PlayTip", Self::VT_PLAYTIP, false)?
     .finish();
    Ok(())
  }
}
pub struct MultiFloorRaidSeasonManageExcelArgs<'a> {
    pub SeasonId: i64,
    pub LobbyEnterScenario: u32,
    pub ShowLobbyBanner: bool,
    pub SeasonStartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndNoteLabelStartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SeasonEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SettlementEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OpenRaidBossGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EnterScenarioKey: u32,
    pub LobbyImgPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LevelImgPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PlayTip: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MultiFloorRaidSeasonManageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MultiFloorRaidSeasonManageExcelArgs {
      SeasonId: 0,
      LobbyEnterScenario: 0,
      ShowLobbyBanner: false,
      SeasonStartDate: None,
      EndNoteLabelStartDate: None,
      SeasonEndDate: None,
      SettlementEndDate: None,
      OpenRaidBossGroupId: None,
      EnterScenarioKey: 0,
      LobbyImgPath: None,
      LevelImgPath: None,
      PlayTip: None,
    }
  }
}

impl Serialize for MultiFloorRaidSeasonManageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MultiFloorRaidSeasonManageExcel", 12)?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      s.serialize_field("LobbyEnterScenario", &self.LobbyEnterScenario())?;
      s.serialize_field("ShowLobbyBanner", &self.ShowLobbyBanner())?;
      if let Some(f) = self.SeasonStartDate() {
        s.serialize_field("SeasonStartDate", &f)?;
      } else {
        s.skip_field("SeasonStartDate")?;
      }
      if let Some(f) = self.EndNoteLabelStartDate() {
        s.serialize_field("EndNoteLabelStartDate", &f)?;
      } else {
        s.skip_field("EndNoteLabelStartDate")?;
      }
      if let Some(f) = self.SeasonEndDate() {
        s.serialize_field("SeasonEndDate", &f)?;
      } else {
        s.skip_field("SeasonEndDate")?;
      }
      if let Some(f) = self.SettlementEndDate() {
        s.serialize_field("SettlementEndDate", &f)?;
      } else {
        s.skip_field("SettlementEndDate")?;
      }
      if let Some(f) = self.OpenRaidBossGroupId() {
        s.serialize_field("OpenRaidBossGroupId", &f)?;
      } else {
        s.skip_field("OpenRaidBossGroupId")?;
      }
      s.serialize_field("EnterScenarioKey", &self.EnterScenarioKey())?;
      if let Some(f) = self.LobbyImgPath() {
        s.serialize_field("LobbyImgPath", &f)?;
      } else {
        s.skip_field("LobbyImgPath")?;
      }
      if let Some(f) = self.LevelImgPath() {
        s.serialize_field("LevelImgPath", &f)?;
      } else {
        s.skip_field("LevelImgPath")?;
      }
      if let Some(f) = self.PlayTip() {
        s.serialize_field("PlayTip", &f)?;
      } else {
        s.skip_field("PlayTip")?;
      }
    s.end()
  }
}

pub struct MultiFloorRaidSeasonManageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MultiFloorRaidSeasonManageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(MultiFloorRaidSeasonManageExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_LobbyEnterScenario(&mut self, LobbyEnterScenario: u32) {
    self.fbb_.push_slot::<u32>(MultiFloorRaidSeasonManageExcel::VT_LOBBYENTERSCENARIO, LobbyEnterScenario, 0);
  }
  #[inline]
  pub fn add_ShowLobbyBanner(&mut self, ShowLobbyBanner: bool) {
    self.fbb_.push_slot::<bool>(MultiFloorRaidSeasonManageExcel::VT_SHOWLOBBYBANNER, ShowLobbyBanner, false);
  }
  #[inline]
  pub fn add_SeasonStartDate(&mut self, SeasonStartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_SEASONSTARTDATE, SeasonStartDate);
  }
  #[inline]
  pub fn add_EndNoteLabelStartDate(&mut self, EndNoteLabelStartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_ENDNOTELABELSTARTDATE, EndNoteLabelStartDate);
  }
  #[inline]
  pub fn add_SeasonEndDate(&mut self, SeasonEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_SEASONENDDATE, SeasonEndDate);
  }
  #[inline]
  pub fn add_SettlementEndDate(&mut self, SettlementEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_SETTLEMENTENDDATE, SettlementEndDate);
  }
  #[inline]
  pub fn add_OpenRaidBossGroupId(&mut self, OpenRaidBossGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_OPENRAIDBOSSGROUPID, OpenRaidBossGroupId);
  }
  #[inline]
  pub fn add_EnterScenarioKey(&mut self, EnterScenarioKey: u32) {
    self.fbb_.push_slot::<u32>(MultiFloorRaidSeasonManageExcel::VT_ENTERSCENARIOKEY, EnterScenarioKey, 0);
  }
  #[inline]
  pub fn add_LobbyImgPath(&mut self, LobbyImgPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_LOBBYIMGPATH, LobbyImgPath);
  }
  #[inline]
  pub fn add_LevelImgPath(&mut self, LevelImgPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_LEVELIMGPATH, LevelImgPath);
  }
  #[inline]
  pub fn add_PlayTip(&mut self, PlayTip: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidSeasonManageExcel::VT_PLAYTIP, PlayTip);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MultiFloorRaidSeasonManageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MultiFloorRaidSeasonManageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MultiFloorRaidSeasonManageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MultiFloorRaidSeasonManageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MultiFloorRaidSeasonManageExcel");
      ds.field("SeasonId", &self.SeasonId());
      ds.field("LobbyEnterScenario", &self.LobbyEnterScenario());
      ds.field("ShowLobbyBanner", &self.ShowLobbyBanner());
      ds.field("SeasonStartDate", &self.SeasonStartDate());
      ds.field("EndNoteLabelStartDate", &self.EndNoteLabelStartDate());
      ds.field("SeasonEndDate", &self.SeasonEndDate());
      ds.field("SettlementEndDate", &self.SettlementEndDate());
      ds.field("OpenRaidBossGroupId", &self.OpenRaidBossGroupId());
      ds.field("EnterScenarioKey", &self.EnterScenarioKey());
      ds.field("LobbyImgPath", &self.LobbyImgPath());
      ds.field("LevelImgPath", &self.LevelImgPath());
      ds.field("PlayTip", &self.PlayTip());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MultiFloorRaidSeasonManageExcelT {
  pub SeasonId: i64,
  pub LobbyEnterScenario: u32,
  pub ShowLobbyBanner: bool,
  pub SeasonStartDate: Option<String>,
  pub EndNoteLabelStartDate: Option<String>,
  pub SeasonEndDate: Option<String>,
  pub SettlementEndDate: Option<String>,
  pub OpenRaidBossGroupId: Option<String>,
  pub EnterScenarioKey: u32,
  pub LobbyImgPath: Option<String>,
  pub LevelImgPath: Option<String>,
  pub PlayTip: Option<String>,
}
impl Default for MultiFloorRaidSeasonManageExcelT {
  fn default() -> Self {
    Self {
      SeasonId: 0,
      LobbyEnterScenario: 0,
      ShowLobbyBanner: false,
      SeasonStartDate: None,
      EndNoteLabelStartDate: None,
      SeasonEndDate: None,
      SettlementEndDate: None,
      OpenRaidBossGroupId: None,
      EnterScenarioKey: 0,
      LobbyImgPath: None,
      LevelImgPath: None,
      PlayTip: None,
    }
  }
}
impl MultiFloorRaidSeasonManageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MultiFloorRaidSeasonManageExcel<'b>> {
    let SeasonId = self.SeasonId;
    let LobbyEnterScenario = self.LobbyEnterScenario;
    let ShowLobbyBanner = self.ShowLobbyBanner;
    let SeasonStartDate = self.SeasonStartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndNoteLabelStartDate = self.EndNoteLabelStartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SeasonEndDate = self.SeasonEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SettlementEndDate = self.SettlementEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OpenRaidBossGroupId = self.OpenRaidBossGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EnterScenarioKey = self.EnterScenarioKey;
    let LobbyImgPath = self.LobbyImgPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LevelImgPath = self.LevelImgPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PlayTip = self.PlayTip.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MultiFloorRaidSeasonManageExcel::create(_fbb, &MultiFloorRaidSeasonManageExcelArgs{
      SeasonId,
      LobbyEnterScenario,
      ShowLobbyBanner,
      SeasonStartDate,
      EndNoteLabelStartDate,
      SeasonEndDate,
      SettlementEndDate,
      OpenRaidBossGroupId,
      EnterScenarioKey,
      LobbyImgPath,
      LevelImgPath,
      PlayTip,
    })
  }
}
