// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopFreeRecruitPeriodExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopFreeRecruitPeriodExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopFreeRecruitPeriodExcel<'a> {
  type Inner = ShopFreeRecruitPeriodExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopFreeRecruitPeriodExcel<'a> {
  pub const VT_SHOPFREERECRUITID: flatbuffers::VOffsetT = 4;
  pub const VT_SHOPFREERECRUITINTERVALID: flatbuffers::VOffsetT = 6;
  pub const VT_INTERVALDATE: flatbuffers::VOffsetT = 8;
  pub const VT_FREERECRUITCOUNT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopFreeRecruitPeriodExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopFreeRecruitPeriodExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShopFreeRecruitPeriodExcel<'bldr>> {
    let mut builder = ShopFreeRecruitPeriodExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShopFreeRecruitPeriod");
      let x = args.ShopFreeRecruitIntervalId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShopFreeRecruitIntervalId(x);
      let x = args.ShopFreeRecruitId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShopFreeRecruitId(x);
      let x = args.FreeRecruitCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FreeRecruitCount(x);
      if let Some(x) = args.IntervalDate {
        builder.add_IntervalDate(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ShopFreeRecruitPeriodExcelT {
    let key = table_encryption_service::create_key(b"ShopFreeRecruitPeriod");
      let ShopFreeRecruitId = self.ShopFreeRecruitId();
      let ShopFreeRecruitIntervalId = self.ShopFreeRecruitIntervalId();
    let IntervalDate = self.IntervalDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let FreeRecruitCount = self.FreeRecruitCount();
    ShopFreeRecruitPeriodExcelT {
      ShopFreeRecruitId,
      ShopFreeRecruitIntervalId,
      IntervalDate,
      FreeRecruitCount,
    }
  }

  #[inline]
  pub fn ShopFreeRecruitId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopFreeRecruitPeriodExcel::VT_SHOPFREERECRUITID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopFreeRecruitIntervalId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopFreeRecruitPeriodExcel::VT_SHOPFREERECRUITINTERVALID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IntervalDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopFreeRecruitPeriodExcel::VT_INTERVALDATE, None)}
  }
  #[inline]
  pub fn FreeRecruitCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ShopFreeRecruitPeriodExcel::VT_FREERECRUITCOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ShopFreeRecruitPeriodExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ShopFreeRecruitId", Self::VT_SHOPFREERECRUITID, false)?
     .visit_field::<i64>("ShopFreeRecruitIntervalId", Self::VT_SHOPFREERECRUITINTERVALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IntervalDate", Self::VT_INTERVALDATE, false)?
     .visit_field::<i32>("FreeRecruitCount", Self::VT_FREERECRUITCOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopFreeRecruitPeriodExcelArgs<'a> {
    pub ShopFreeRecruitId: i64,
    pub ShopFreeRecruitIntervalId: i64,
    pub IntervalDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FreeRecruitCount: i32,
}
impl<'a> Default for ShopFreeRecruitPeriodExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShopFreeRecruitPeriodExcelArgs {
      ShopFreeRecruitId: 0,
      ShopFreeRecruitIntervalId: 0,
      IntervalDate: None,
      FreeRecruitCount: 0,
    }
  }
}

impl Serialize for ShopFreeRecruitPeriodExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopFreeRecruitPeriodExcel", 4)?;
      s.serialize_field("ShopFreeRecruitId", &self.ShopFreeRecruitId())?;
      s.serialize_field("ShopFreeRecruitIntervalId", &self.ShopFreeRecruitIntervalId())?;
      if let Some(f) = self.IntervalDate() {
        s.serialize_field("IntervalDate", &f)?;
      } else {
        s.skip_field("IntervalDate")?;
      }
      s.serialize_field("FreeRecruitCount", &self.FreeRecruitCount())?;
    s.end()
  }
}

pub struct ShopFreeRecruitPeriodExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopFreeRecruitPeriodExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ShopFreeRecruitId(&mut self, ShopFreeRecruitId: i64) {
    self.fbb_.push_slot::<i64>(ShopFreeRecruitPeriodExcel::VT_SHOPFREERECRUITID, ShopFreeRecruitId, 0);
  }
  #[inline]
  pub fn add_ShopFreeRecruitIntervalId(&mut self, ShopFreeRecruitIntervalId: i64) {
    self.fbb_.push_slot::<i64>(ShopFreeRecruitPeriodExcel::VT_SHOPFREERECRUITINTERVALID, ShopFreeRecruitIntervalId, 0);
  }
  #[inline]
  pub fn add_IntervalDate(&mut self, IntervalDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopFreeRecruitPeriodExcel::VT_INTERVALDATE, IntervalDate);
  }
  #[inline]
  pub fn add_FreeRecruitCount(&mut self, FreeRecruitCount: i32) {
    self.fbb_.push_slot::<i32>(ShopFreeRecruitPeriodExcel::VT_FREERECRUITCOUNT, FreeRecruitCount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopFreeRecruitPeriodExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopFreeRecruitPeriodExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopFreeRecruitPeriodExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopFreeRecruitPeriodExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopFreeRecruitPeriodExcel");
      ds.field("ShopFreeRecruitId", &self.ShopFreeRecruitId());
      ds.field("ShopFreeRecruitIntervalId", &self.ShopFreeRecruitIntervalId());
      ds.field("IntervalDate", &self.IntervalDate());
      ds.field("FreeRecruitCount", &self.FreeRecruitCount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopFreeRecruitPeriodExcelT {
  pub ShopFreeRecruitId: i64,
  pub ShopFreeRecruitIntervalId: i64,
  pub IntervalDate: Option<String>,
  pub FreeRecruitCount: i32,
}
impl Default for ShopFreeRecruitPeriodExcelT {
  fn default() -> Self {
    Self {
      ShopFreeRecruitId: 0,
      ShopFreeRecruitIntervalId: 0,
      IntervalDate: None,
      FreeRecruitCount: 0,
    }
  }
}
impl ShopFreeRecruitPeriodExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopFreeRecruitPeriodExcel<'b>> {
    let ShopFreeRecruitId = self.ShopFreeRecruitId;
    let ShopFreeRecruitIntervalId = self.ShopFreeRecruitIntervalId;
    let IntervalDate = self.IntervalDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FreeRecruitCount = self.FreeRecruitCount;
    ShopFreeRecruitPeriodExcel::create(_fbb, &ShopFreeRecruitPeriodExcelArgs{
      ShopFreeRecruitId,
      ShopFreeRecruitIntervalId,
      IntervalDate,
      FreeRecruitCount,
    })
  }
}
