// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MotionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Motion<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Motion<'a> {
  type Inner = Motion<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Motion<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_POSITIONS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Motion { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MotionArgs<'args>
  ) -> flatbuffers::WIPOffset<Motion<'bldr>> {
    let mut builder = MotionBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"M");
      if let Some(x) = args.Positions {
        builder.add_Positions(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MotionT {
    let key = table_encryption_service::create_key(b"M");
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Positions = self.Positions().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    MotionT {
      Name,
      Positions,
    }
  }

  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Motion::VT_NAME, None)}
  }
  #[inline]
  pub fn Positions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Position<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Position>>>>(Motion::VT_POSITIONS, None)}
  }
}

impl flatbuffers::Verifiable for Motion<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Position>>>>("Positions", Self::VT_POSITIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct MotionArgs<'a> {
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Positions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Position<'a>>>>>,
}
impl<'a> Default for MotionArgs<'a> {
  #[inline]
  fn default() -> Self {
    MotionArgs {
      Name: None,
      Positions: None,
    }
  }
}

impl Serialize for Motion<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Motion", 2)?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.Positions() {
        s.serialize_field("Positions", &f)?;
      } else {
        s.skip_field("Positions")?;
      }
    s.end()
  }
}

pub struct MotionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MotionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Motion::VT_NAME, Name);
  }
  #[inline]
  pub fn add_Positions(&mut self, Positions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Position<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Motion::VT_POSITIONS, Positions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MotionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MotionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Motion<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Motion<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Motion");
      ds.field("Name", &self.Name());
      ds.field("Positions", &self.Positions());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MotionT {
  pub Name: Option<String>,
  pub Positions: Option<Vec<PositionT>>,
}
impl Default for MotionT {
  fn default() -> Self {
    Self {
      Name: None,
      Positions: None,
    }
  }
}
impl MotionT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Motion<'b>> {
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Positions = self.Positions.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    Motion::create(_fbb, &MotionArgs{
      Name,
      Positions,
    })
  }
}
