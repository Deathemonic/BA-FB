// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EVENT_CONTENT_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EVENT_CONTENT_TYPE: i32 = 41;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EVENT_CONTENT_TYPE: [EventContentType; 42] = [
  EventContentType::Stage,
  EventContentType::Gacha,
  EventContentType::Mission,
  EventContentType::Shop,
  EventContentType::Raid,
  EventContentType::Arena,
  EventContentType::BoxGacha,
  EventContentType::Collection,
  EventContentType::Recollection,
  EventContentType::MiniGameRhythm,
  EventContentType::CardShop,
  EventContentType::EventLocation,
  EventContentType::MinigameRhythmEvent,
  EventContentType::FortuneGachaShop,
  EventContentType::SubEvent,
  EventContentType::EventMeetup,
  EventContentType::BoxGachaResult,
  EventContentType::Conquest,
  EventContentType::WorldRaid,
  EventContentType::DiceRace,
  EventContentType::MiniGameRhythmMission,
  EventContentType::WorldRaidEntrance,
  EventContentType::MiniEvent,
  EventContentType::MiniGameShooting,
  EventContentType::MiniGameShootingMission,
  EventContentType::MiniGameTBG,
  EventContentType::TimeAttackDungeon,
  EventContentType::EliminateRaid,
  EventContentType::Treasure,
  EventContentType::Field,
  EventContentType::MultiFloorRaid,
  EventContentType::MinigameDreamMaker,
  EventContentType::MiniGameDefense,
  EventContentType::OpenWebView,
  EventContentType::SpecialMiniEvent,
  EventContentType::ScenarioCollection,
  EventContentType::ScenarioShortcut,
  EventContentType::SeasonalEvent,
  EventContentType::MiniShop,
  EventContentType::MiniGameRoad,
  EventContentType::MiniGameCCG,
  EventContentType::Concentration,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EventContentType(pub i32);
#[allow(non_upper_case_globals)]
impl EventContentType {
  pub const Stage: Self = Self(0);
  pub const Gacha: Self = Self(1);
  pub const Mission: Self = Self(2);
  pub const Shop: Self = Self(3);
  pub const Raid: Self = Self(4);
  pub const Arena: Self = Self(5);
  pub const BoxGacha: Self = Self(6);
  pub const Collection: Self = Self(7);
  pub const Recollection: Self = Self(8);
  pub const MiniGameRhythm: Self = Self(9);
  pub const CardShop: Self = Self(10);
  pub const EventLocation: Self = Self(11);
  pub const MinigameRhythmEvent: Self = Self(12);
  pub const FortuneGachaShop: Self = Self(13);
  pub const SubEvent: Self = Self(14);
  pub const EventMeetup: Self = Self(15);
  pub const BoxGachaResult: Self = Self(16);
  pub const Conquest: Self = Self(17);
  pub const WorldRaid: Self = Self(18);
  pub const DiceRace: Self = Self(19);
  pub const MiniGameRhythmMission: Self = Self(20);
  pub const WorldRaidEntrance: Self = Self(21);
  pub const MiniEvent: Self = Self(22);
  pub const MiniGameShooting: Self = Self(23);
  pub const MiniGameShootingMission: Self = Self(24);
  pub const MiniGameTBG: Self = Self(25);
  pub const TimeAttackDungeon: Self = Self(26);
  pub const EliminateRaid: Self = Self(27);
  pub const Treasure: Self = Self(28);
  pub const Field: Self = Self(29);
  pub const MultiFloorRaid: Self = Self(30);
  pub const MinigameDreamMaker: Self = Self(31);
  pub const MiniGameDefense: Self = Self(32);
  pub const OpenWebView: Self = Self(33);
  pub const SpecialMiniEvent: Self = Self(34);
  pub const ScenarioCollection: Self = Self(35);
  pub const ScenarioShortcut: Self = Self(36);
  pub const SeasonalEvent: Self = Self(37);
  pub const MiniShop: Self = Self(38);
  pub const MiniGameRoad: Self = Self(39);
  pub const MiniGameCCG: Self = Self(40);
  pub const Concentration: Self = Self(41);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 41;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Stage,
    Self::Gacha,
    Self::Mission,
    Self::Shop,
    Self::Raid,
    Self::Arena,
    Self::BoxGacha,
    Self::Collection,
    Self::Recollection,
    Self::MiniGameRhythm,
    Self::CardShop,
    Self::EventLocation,
    Self::MinigameRhythmEvent,
    Self::FortuneGachaShop,
    Self::SubEvent,
    Self::EventMeetup,
    Self::BoxGachaResult,
    Self::Conquest,
    Self::WorldRaid,
    Self::DiceRace,
    Self::MiniGameRhythmMission,
    Self::WorldRaidEntrance,
    Self::MiniEvent,
    Self::MiniGameShooting,
    Self::MiniGameShootingMission,
    Self::MiniGameTBG,
    Self::TimeAttackDungeon,
    Self::EliminateRaid,
    Self::Treasure,
    Self::Field,
    Self::MultiFloorRaid,
    Self::MinigameDreamMaker,
    Self::MiniGameDefense,
    Self::OpenWebView,
    Self::SpecialMiniEvent,
    Self::ScenarioCollection,
    Self::ScenarioShortcut,
    Self::SeasonalEvent,
    Self::MiniShop,
    Self::MiniGameRoad,
    Self::MiniGameCCG,
    Self::Concentration,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Stage => Some("Stage"),
      Self::Gacha => Some("Gacha"),
      Self::Mission => Some("Mission"),
      Self::Shop => Some("Shop"),
      Self::Raid => Some("Raid"),
      Self::Arena => Some("Arena"),
      Self::BoxGacha => Some("BoxGacha"),
      Self::Collection => Some("Collection"),
      Self::Recollection => Some("Recollection"),
      Self::MiniGameRhythm => Some("MiniGameRhythm"),
      Self::CardShop => Some("CardShop"),
      Self::EventLocation => Some("EventLocation"),
      Self::MinigameRhythmEvent => Some("MinigameRhythmEvent"),
      Self::FortuneGachaShop => Some("FortuneGachaShop"),
      Self::SubEvent => Some("SubEvent"),
      Self::EventMeetup => Some("EventMeetup"),
      Self::BoxGachaResult => Some("BoxGachaResult"),
      Self::Conquest => Some("Conquest"),
      Self::WorldRaid => Some("WorldRaid"),
      Self::DiceRace => Some("DiceRace"),
      Self::MiniGameRhythmMission => Some("MiniGameRhythmMission"),
      Self::WorldRaidEntrance => Some("WorldRaidEntrance"),
      Self::MiniEvent => Some("MiniEvent"),
      Self::MiniGameShooting => Some("MiniGameShooting"),
      Self::MiniGameShootingMission => Some("MiniGameShootingMission"),
      Self::MiniGameTBG => Some("MiniGameTBG"),
      Self::TimeAttackDungeon => Some("TimeAttackDungeon"),
      Self::EliminateRaid => Some("EliminateRaid"),
      Self::Treasure => Some("Treasure"),
      Self::Field => Some("Field"),
      Self::MultiFloorRaid => Some("MultiFloorRaid"),
      Self::MinigameDreamMaker => Some("MinigameDreamMaker"),
      Self::MiniGameDefense => Some("MiniGameDefense"),
      Self::OpenWebView => Some("OpenWebView"),
      Self::SpecialMiniEvent => Some("SpecialMiniEvent"),
      Self::ScenarioCollection => Some("ScenarioCollection"),
      Self::ScenarioShortcut => Some("ScenarioShortcut"),
      Self::SeasonalEvent => Some("SeasonalEvent"),
      Self::MiniShop => Some("MiniShop"),
      Self::MiniGameRoad => Some("MiniGameRoad"),
      Self::MiniGameCCG => Some("MiniGameCCG"),
      Self::Concentration => Some("Concentration"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EventContentType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for EventContentType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("EventContentType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for EventContentType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EventContentType {
    type Output = EventContentType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EventContentType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EventContentType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EventContentType {}
