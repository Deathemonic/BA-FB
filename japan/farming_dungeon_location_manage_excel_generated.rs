// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FarmingDungeonLocationManageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FarmingDungeonLocationManageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FarmingDungeonLocationManageExcel<'a> {
  type Inner = FarmingDungeonLocationManageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FarmingDungeonLocationManageExcel<'a> {
  pub const VT_FARMINGDUNGEONLOCATIONID: flatbuffers::VOffsetT = 4;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_WEEKDUNGEONTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_SCHOOLDUNGEONTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_ORDER: flatbuffers::VOffsetT = 12;
  pub const VT_OPENSTARTDATETIME: flatbuffers::VOffsetT = 14;
  pub const VT_OPENENDDATETIME: flatbuffers::VOffsetT = 16;
  pub const VT_LOCATIONBUTTONIMAGEPATH: flatbuffers::VOffsetT = 18;
  pub const VT_LOCALIZECODETITLE: flatbuffers::VOffsetT = 20;
  pub const VT_LOCALIZECODEINFO: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FarmingDungeonLocationManageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FarmingDungeonLocationManageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FarmingDungeonLocationManageExcel<'bldr>> {
    let mut builder = FarmingDungeonLocationManageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FarmingDungeonLocationManage");
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Order(x);
      let x = args.FarmingDungeonLocationId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FarmingDungeonLocationId(x);
      let x = args.LocalizeCodeInfo;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeCodeInfo(x);
      let x = args.LocalizeCodeTitle;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeCodeTitle(x);
      if let Some(x) = args.LocationButtonImagePath {
        builder.add_LocationButtonImagePath(x);
      }
      if let Some(x) = args.OpenEndDateTime {
        builder.add_OpenEndDateTime(x);
      }
      if let Some(x) = args.OpenStartDateTime {
        builder.add_OpenStartDateTime(x);
      }
      let x = args.SchoolDungeonType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_SchoolDungeonType(x);
      let x = args.WeekDungeonType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_WeekDungeonType(x);
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FarmingDungeonLocationManageExcelT {
    let key = table_encryption_service::create_key(b"FarmingDungeonLocationManage");
      let FarmingDungeonLocationId = self.FarmingDungeonLocationId();
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let WeekDungeonType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.WeekDungeonType(), &key)
      } else {
        self.WeekDungeonType()
      };
      let SchoolDungeonType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.SchoolDungeonType(), &key)
      } else {
        self.SchoolDungeonType()
      };
      let Order = self.Order();
    let OpenStartDateTime = self.OpenStartDateTime().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let OpenEndDateTime = self.OpenEndDateTime().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocationButtonImagePath = self.LocationButtonImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeCodeTitle = self.LocalizeCodeTitle();
      let LocalizeCodeInfo = self.LocalizeCodeInfo();
    FarmingDungeonLocationManageExcelT {
      FarmingDungeonLocationId,
      ContentType,
      WeekDungeonType,
      SchoolDungeonType,
      Order,
      OpenStartDateTime,
      OpenEndDateTime,
      LocationButtonImagePath,
      LocalizeCodeTitle,
      LocalizeCodeInfo,
    }
  }

  #[inline]
  pub fn FarmingDungeonLocationId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FarmingDungeonLocationManageExcel::VT_FARMINGDUNGEONLOCATIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(FarmingDungeonLocationManageExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn WeekDungeonType(&self) -> WeekDungeonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WeekDungeonType>(FarmingDungeonLocationManageExcel::VT_WEEKDUNGEONTYPE, Some(WeekDungeonType::None)).unwrap()}
  }
  #[inline]
  pub fn SchoolDungeonType(&self) -> SchoolDungeonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SchoolDungeonType>(FarmingDungeonLocationManageExcel::VT_SCHOOLDUNGEONTYPE, Some(SchoolDungeonType::SchoolA)).unwrap()}
  }
  #[inline]
  pub fn Order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FarmingDungeonLocationManageExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenStartDateTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FarmingDungeonLocationManageExcel::VT_OPENSTARTDATETIME, None)}
  }
  #[inline]
  pub fn OpenEndDateTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FarmingDungeonLocationManageExcel::VT_OPENENDDATETIME, None)}
  }
  #[inline]
  pub fn LocationButtonImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FarmingDungeonLocationManageExcel::VT_LOCATIONBUTTONIMAGEPATH, None)}
  }
  #[inline]
  pub fn LocalizeCodeTitle(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FarmingDungeonLocationManageExcel::VT_LOCALIZECODETITLE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCodeInfo(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FarmingDungeonLocationManageExcel::VT_LOCALIZECODEINFO, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FarmingDungeonLocationManageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("FarmingDungeonLocationId", Self::VT_FARMINGDUNGEONLOCATIONID, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<WeekDungeonType>("WeekDungeonType", Self::VT_WEEKDUNGEONTYPE, false)?
     .visit_field::<SchoolDungeonType>("SchoolDungeonType", Self::VT_SCHOOLDUNGEONTYPE, false)?
     .visit_field::<i64>("Order", Self::VT_ORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OpenStartDateTime", Self::VT_OPENSTARTDATETIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OpenEndDateTime", Self::VT_OPENENDDATETIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocationButtonImagePath", Self::VT_LOCATIONBUTTONIMAGEPATH, false)?
     .visit_field::<u32>("LocalizeCodeTitle", Self::VT_LOCALIZECODETITLE, false)?
     .visit_field::<u32>("LocalizeCodeInfo", Self::VT_LOCALIZECODEINFO, false)?
     .finish();
    Ok(())
  }
}
pub struct FarmingDungeonLocationManageExcelArgs<'a> {
    pub FarmingDungeonLocationId: i64,
    pub ContentType: ContentType,
    pub WeekDungeonType: WeekDungeonType,
    pub SchoolDungeonType: SchoolDungeonType,
    pub Order: i64,
    pub OpenStartDateTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OpenEndDateTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocationButtonImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeCodeTitle: u32,
    pub LocalizeCodeInfo: u32,
}
impl<'a> Default for FarmingDungeonLocationManageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FarmingDungeonLocationManageExcelArgs {
      FarmingDungeonLocationId: 0,
      ContentType: ContentType::None,
      WeekDungeonType: WeekDungeonType::None,
      SchoolDungeonType: SchoolDungeonType::SchoolA,
      Order: 0,
      OpenStartDateTime: None,
      OpenEndDateTime: None,
      LocationButtonImagePath: None,
      LocalizeCodeTitle: 0,
      LocalizeCodeInfo: 0,
    }
  }
}

impl Serialize for FarmingDungeonLocationManageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FarmingDungeonLocationManageExcel", 10)?;
      s.serialize_field("FarmingDungeonLocationId", &self.FarmingDungeonLocationId())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("WeekDungeonType", &self.WeekDungeonType())?;
      s.serialize_field("SchoolDungeonType", &self.SchoolDungeonType())?;
      s.serialize_field("Order", &self.Order())?;
      if let Some(f) = self.OpenStartDateTime() {
        s.serialize_field("OpenStartDateTime", &f)?;
      } else {
        s.skip_field("OpenStartDateTime")?;
      }
      if let Some(f) = self.OpenEndDateTime() {
        s.serialize_field("OpenEndDateTime", &f)?;
      } else {
        s.skip_field("OpenEndDateTime")?;
      }
      if let Some(f) = self.LocationButtonImagePath() {
        s.serialize_field("LocationButtonImagePath", &f)?;
      } else {
        s.skip_field("LocationButtonImagePath")?;
      }
      s.serialize_field("LocalizeCodeTitle", &self.LocalizeCodeTitle())?;
      s.serialize_field("LocalizeCodeInfo", &self.LocalizeCodeInfo())?;
    s.end()
  }
}

pub struct FarmingDungeonLocationManageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FarmingDungeonLocationManageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FarmingDungeonLocationId(&mut self, FarmingDungeonLocationId: i64) {
    self.fbb_.push_slot::<i64>(FarmingDungeonLocationManageExcel::VT_FARMINGDUNGEONLOCATIONID, FarmingDungeonLocationId, 0);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(FarmingDungeonLocationManageExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_WeekDungeonType(&mut self, WeekDungeonType: WeekDungeonType) {
    self.fbb_.push_slot::<WeekDungeonType>(FarmingDungeonLocationManageExcel::VT_WEEKDUNGEONTYPE, WeekDungeonType, WeekDungeonType::None);
  }
  #[inline]
  pub fn add_SchoolDungeonType(&mut self, SchoolDungeonType: SchoolDungeonType) {
    self.fbb_.push_slot::<SchoolDungeonType>(FarmingDungeonLocationManageExcel::VT_SCHOOLDUNGEONTYPE, SchoolDungeonType, SchoolDungeonType::SchoolA);
  }
  #[inline]
  pub fn add_Order(&mut self, Order: i64) {
    self.fbb_.push_slot::<i64>(FarmingDungeonLocationManageExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_OpenStartDateTime(&mut self, OpenStartDateTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FarmingDungeonLocationManageExcel::VT_OPENSTARTDATETIME, OpenStartDateTime);
  }
  #[inline]
  pub fn add_OpenEndDateTime(&mut self, OpenEndDateTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FarmingDungeonLocationManageExcel::VT_OPENENDDATETIME, OpenEndDateTime);
  }
  #[inline]
  pub fn add_LocationButtonImagePath(&mut self, LocationButtonImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FarmingDungeonLocationManageExcel::VT_LOCATIONBUTTONIMAGEPATH, LocationButtonImagePath);
  }
  #[inline]
  pub fn add_LocalizeCodeTitle(&mut self, LocalizeCodeTitle: u32) {
    self.fbb_.push_slot::<u32>(FarmingDungeonLocationManageExcel::VT_LOCALIZECODETITLE, LocalizeCodeTitle, 0);
  }
  #[inline]
  pub fn add_LocalizeCodeInfo(&mut self, LocalizeCodeInfo: u32) {
    self.fbb_.push_slot::<u32>(FarmingDungeonLocationManageExcel::VT_LOCALIZECODEINFO, LocalizeCodeInfo, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FarmingDungeonLocationManageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FarmingDungeonLocationManageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FarmingDungeonLocationManageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FarmingDungeonLocationManageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FarmingDungeonLocationManageExcel");
      ds.field("FarmingDungeonLocationId", &self.FarmingDungeonLocationId());
      ds.field("ContentType", &self.ContentType());
      ds.field("WeekDungeonType", &self.WeekDungeonType());
      ds.field("SchoolDungeonType", &self.SchoolDungeonType());
      ds.field("Order", &self.Order());
      ds.field("OpenStartDateTime", &self.OpenStartDateTime());
      ds.field("OpenEndDateTime", &self.OpenEndDateTime());
      ds.field("LocationButtonImagePath", &self.LocationButtonImagePath());
      ds.field("LocalizeCodeTitle", &self.LocalizeCodeTitle());
      ds.field("LocalizeCodeInfo", &self.LocalizeCodeInfo());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FarmingDungeonLocationManageExcelT {
  pub FarmingDungeonLocationId: i64,
  pub ContentType: ContentType,
  pub WeekDungeonType: WeekDungeonType,
  pub SchoolDungeonType: SchoolDungeonType,
  pub Order: i64,
  pub OpenStartDateTime: Option<String>,
  pub OpenEndDateTime: Option<String>,
  pub LocationButtonImagePath: Option<String>,
  pub LocalizeCodeTitle: u32,
  pub LocalizeCodeInfo: u32,
}
impl Default for FarmingDungeonLocationManageExcelT {
  fn default() -> Self {
    Self {
      FarmingDungeonLocationId: 0,
      ContentType: ContentType::None,
      WeekDungeonType: WeekDungeonType::None,
      SchoolDungeonType: SchoolDungeonType::SchoolA,
      Order: 0,
      OpenStartDateTime: None,
      OpenEndDateTime: None,
      LocationButtonImagePath: None,
      LocalizeCodeTitle: 0,
      LocalizeCodeInfo: 0,
    }
  }
}
impl FarmingDungeonLocationManageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FarmingDungeonLocationManageExcel<'b>> {
    let FarmingDungeonLocationId = self.FarmingDungeonLocationId;
    let ContentType = self.ContentType;
    let WeekDungeonType = self.WeekDungeonType;
    let SchoolDungeonType = self.SchoolDungeonType;
    let Order = self.Order;
    let OpenStartDateTime = self.OpenStartDateTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OpenEndDateTime = self.OpenEndDateTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocationButtonImagePath = self.LocationButtonImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeCodeTitle = self.LocalizeCodeTitle;
    let LocalizeCodeInfo = self.LocalizeCodeInfo;
    FarmingDungeonLocationManageExcel::create(_fbb, &FarmingDungeonLocationManageExcelArgs{
      FarmingDungeonLocationId,
      ContentType,
      WeekDungeonType,
      SchoolDungeonType,
      Order,
      OpenStartDateTime,
      OpenEndDateTime,
      LocationButtonImagePath,
      LocalizeCodeTitle,
      LocalizeCodeInfo,
    })
  }
}
