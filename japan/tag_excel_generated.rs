// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TagExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TagExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TagExcel<'a> {
  type Inner = TagExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TagExcel<'a> {
  pub const VT_FURNITURE: flatbuffers::VOffsetT = 4;
  pub const VT_NONE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TagExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TagExcelArgs
  ) -> flatbuffers::WIPOffset<TagExcel<'bldr>> {
    let mut builder = TagExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Tag");
      let x = args.None;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_None(x);
      let x = args.Furniture;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Furniture(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TagExcelT {
    let key = table_encryption_service::create_key(b"Tag");
      let Furniture = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Furniture(), &key)
      } else {
        self.Furniture()
      };
      let None = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.None(), &key)
      } else {
        self.None()
      };
    TagExcelT {
      Furniture,
      None,
    }
  }

  #[inline]
  pub fn Furniture(&self) -> Tag {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Tag>(TagExcel::VT_FURNITURE, Some(Tag::A)).unwrap()}
  }
  #[inline]
  pub fn None(&self) -> Club {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Club>(TagExcel::VT_NONE, Some(Club::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TagExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Tag>("Furniture", Self::VT_FURNITURE, false)?
     .visit_field::<Club>("None", Self::VT_NONE, false)?
     .finish();
    Ok(())
  }
}
pub struct TagExcelArgs {
    pub Furniture: Tag,
    pub None: Club,
}
impl<'a> Default for TagExcelArgs {
  #[inline]
  fn default() -> Self {
    TagExcelArgs {
      Furniture: Tag::A,
      None: Club::None,
    }
  }
}

impl Serialize for TagExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TagExcel", 2)?;
      s.serialize_field("Furniture", &self.Furniture())?;
      s.serialize_field("None", &self.None())?;
    s.end()
  }
}

pub struct TagExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TagExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Furniture(&mut self, Furniture: Tag) {
    self.fbb_.push_slot::<Tag>(TagExcel::VT_FURNITURE, Furniture, Tag::A);
  }
  #[inline]
  pub fn add_None(&mut self, None: Club) {
    self.fbb_.push_slot::<Club>(TagExcel::VT_NONE, None, Club::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TagExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TagExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TagExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TagExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TagExcel");
      ds.field("Furniture", &self.Furniture());
      ds.field("None", &self.None());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TagExcelT {
  pub Furniture: Tag,
  pub None: Club,
}
impl Default for TagExcelT {
  fn default() -> Self {
    Self {
      Furniture: Tag::A,
      None: Club::None,
    }
  }
}
impl TagExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TagExcel<'b>> {
    let Furniture = self.Furniture;
    let None = self.None;
    TagExcel::create(_fbb, &TagExcelArgs{
      Furniture,
      None,
    })
  }
}
