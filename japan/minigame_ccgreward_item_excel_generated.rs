// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGRewardItemExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGRewardItemExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGRewardItemExcel<'a> {
  type Inner = MinigameCCGRewardItemExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGRewardItemExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CCGID: flatbuffers::VOffsetT = 6;
  pub const VT_MINPOINT: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGRewardItemExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGRewardItemExcelArgs
  ) -> flatbuffers::WIPOffset<MinigameCCGRewardItemExcel<'bldr>> {
    let mut builder = MinigameCCGRewardItemExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGRewardItem");
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.RewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelId(x);
      let x = args.CCGId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CCGId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RewardParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RewardParcelAmount(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      let x = args.MinPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MinPoint(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGRewardItemExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGRewardItem");
      let Id = self.Id();
      let CCGId = self.CCGId();
      let MinPoint = self.MinPoint();
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelId = self.RewardParcelId();
      let RewardParcelAmount = self.RewardParcelAmount();
      let DisplayOrder = self.DisplayOrder();
    MinigameCCGRewardItemExcelT {
      Id,
      CCGId,
      MinPoint,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      DisplayOrder,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGRewardItemExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CCGId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGRewardItemExcel::VT_CCGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MinPoint(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGRewardItemExcel::VT_MINPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MinigameCCGRewardItemExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGRewardItemExcel::VT_REWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGRewardItemExcel::VT_REWARDPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGRewardItemExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGRewardItemExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CCGId", Self::VT_CCGID, false)?
     .visit_field::<i32>("MinPoint", Self::VT_MINPOINT, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<i32>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGRewardItemExcelArgs {
    pub Id: i64,
    pub CCGId: i64,
    pub MinPoint: i32,
    pub RewardParcelType: ParcelType,
    pub RewardParcelId: i64,
    pub RewardParcelAmount: i32,
    pub DisplayOrder: i64,
}
impl<'a> Default for MinigameCCGRewardItemExcelArgs {
  #[inline]
  fn default() -> Self {
    MinigameCCGRewardItemExcelArgs {
      Id: 0,
      CCGId: 0,
      MinPoint: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
      DisplayOrder: 0,
    }
  }
}

impl Serialize for MinigameCCGRewardItemExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGRewardItemExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CCGId", &self.CCGId())?;
      s.serialize_field("MinPoint", &self.MinPoint())?;
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelId", &self.RewardParcelId())?;
      s.serialize_field("RewardParcelAmount", &self.RewardParcelAmount())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
    s.end()
  }
}

pub struct MinigameCCGRewardItemExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGRewardItemExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGRewardItemExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CCGId(&mut self, CCGId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGRewardItemExcel::VT_CCGID, CCGId, 0);
  }
  #[inline]
  pub fn add_MinPoint(&mut self, MinPoint: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGRewardItemExcel::VT_MINPOINT, MinPoint, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MinigameCCGRewardItemExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGRewardItemExcel::VT_REWARDPARCELID, RewardParcelId, 0);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGRewardItemExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGRewardItemExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGRewardItemExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGRewardItemExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGRewardItemExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGRewardItemExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGRewardItemExcel");
      ds.field("Id", &self.Id());
      ds.field("CCGId", &self.CCGId());
      ds.field("MinPoint", &self.MinPoint());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGRewardItemExcelT {
  pub Id: i64,
  pub CCGId: i64,
  pub MinPoint: i32,
  pub RewardParcelType: ParcelType,
  pub RewardParcelId: i64,
  pub RewardParcelAmount: i32,
  pub DisplayOrder: i64,
}
impl Default for MinigameCCGRewardItemExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CCGId: 0,
      MinPoint: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
      DisplayOrder: 0,
    }
  }
}
impl MinigameCCGRewardItemExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGRewardItemExcel<'b>> {
    let Id = self.Id;
    let CCGId = self.CCGId;
    let MinPoint = self.MinPoint;
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelId = self.RewardParcelId;
    let RewardParcelAmount = self.RewardParcelAmount;
    let DisplayOrder = self.DisplayOrder;
    MinigameCCGRewardItemExcel::create(_fbb, &MinigameCCGRewardItemExcelArgs{
      Id,
      CCGId,
      MinPoint,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      DisplayOrder,
    })
  }
}
