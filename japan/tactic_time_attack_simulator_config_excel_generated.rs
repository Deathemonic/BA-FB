// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TacticTimeAttackSimulatorConfigExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TacticTimeAttackSimulatorConfigExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TacticTimeAttackSimulatorConfigExcel<'a> {
  type Inner = TacticTimeAttackSimulatorConfigExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TacticTimeAttackSimulatorConfigExcel<'a> {
  pub const VT_ORDER: flatbuffers::VOffsetT = 4;
  pub const VT_REPEAT: flatbuffers::VOffsetT = 6;
  pub const VT_PRESETGROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_ATTACKSTRIKERNUM: flatbuffers::VOffsetT = 10;
  pub const VT_ATTACKSPECIALNUM: flatbuffers::VOffsetT = 12;
  pub const VT_GEASID: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TacticTimeAttackSimulatorConfigExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TacticTimeAttackSimulatorConfigExcelArgs
  ) -> flatbuffers::WIPOffset<TacticTimeAttackSimulatorConfigExcel<'bldr>> {
    let mut builder = TacticTimeAttackSimulatorConfigExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TacticTimeAttackSimulatorConfig");
      let x = args.GeasId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GeasId(x);
      let x = args.AttackSpecialNum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackSpecialNum(x);
      let x = args.AttackStrikerNum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackStrikerNum(x);
      let x = args.PresetGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PresetGroupId(x);
      let x = args.Repeat;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Repeat(x);
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Order(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TacticTimeAttackSimulatorConfigExcelT {
    let key = table_encryption_service::create_key(b"TacticTimeAttackSimulatorConfig");
      let Order = self.Order();
      let Repeat = self.Repeat();
      let PresetGroupId = self.PresetGroupId();
      let AttackStrikerNum = self.AttackStrikerNum();
      let AttackSpecialNum = self.AttackSpecialNum();
      let GeasId = self.GeasId();
    TacticTimeAttackSimulatorConfigExcelT {
      Order,
      Repeat,
      PresetGroupId,
      AttackStrikerNum,
      AttackSpecialNum,
      GeasId,
    }
  }

  #[inline]
  pub fn Order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Repeat(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_REPEAT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PresetGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_PRESETGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackStrikerNum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_ATTACKSTRIKERNUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackSpecialNum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_ATTACKSPECIALNUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GeasId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_GEASID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TacticTimeAttackSimulatorConfigExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Order", Self::VT_ORDER, false)?
     .visit_field::<i64>("Repeat", Self::VT_REPEAT, false)?
     .visit_field::<i64>("PresetGroupId", Self::VT_PRESETGROUPID, false)?
     .visit_field::<i64>("AttackStrikerNum", Self::VT_ATTACKSTRIKERNUM, false)?
     .visit_field::<i64>("AttackSpecialNum", Self::VT_ATTACKSPECIALNUM, false)?
     .visit_field::<i64>("GeasId", Self::VT_GEASID, false)?
     .finish();
    Ok(())
  }
}
pub struct TacticTimeAttackSimulatorConfigExcelArgs {
    pub Order: i64,
    pub Repeat: i64,
    pub PresetGroupId: i64,
    pub AttackStrikerNum: i64,
    pub AttackSpecialNum: i64,
    pub GeasId: i64,
}
impl<'a> Default for TacticTimeAttackSimulatorConfigExcelArgs {
  #[inline]
  fn default() -> Self {
    TacticTimeAttackSimulatorConfigExcelArgs {
      Order: 0,
      Repeat: 0,
      PresetGroupId: 0,
      AttackStrikerNum: 0,
      AttackSpecialNum: 0,
      GeasId: 0,
    }
  }
}

impl Serialize for TacticTimeAttackSimulatorConfigExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TacticTimeAttackSimulatorConfigExcel", 6)?;
      s.serialize_field("Order", &self.Order())?;
      s.serialize_field("Repeat", &self.Repeat())?;
      s.serialize_field("PresetGroupId", &self.PresetGroupId())?;
      s.serialize_field("AttackStrikerNum", &self.AttackStrikerNum())?;
      s.serialize_field("AttackSpecialNum", &self.AttackSpecialNum())?;
      s.serialize_field("GeasId", &self.GeasId())?;
    s.end()
  }
}

pub struct TacticTimeAttackSimulatorConfigExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TacticTimeAttackSimulatorConfigExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Order(&mut self, Order: i64) {
    self.fbb_.push_slot::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_Repeat(&mut self, Repeat: i64) {
    self.fbb_.push_slot::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_REPEAT, Repeat, 0);
  }
  #[inline]
  pub fn add_PresetGroupId(&mut self, PresetGroupId: i64) {
    self.fbb_.push_slot::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_PRESETGROUPID, PresetGroupId, 0);
  }
  #[inline]
  pub fn add_AttackStrikerNum(&mut self, AttackStrikerNum: i64) {
    self.fbb_.push_slot::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_ATTACKSTRIKERNUM, AttackStrikerNum, 0);
  }
  #[inline]
  pub fn add_AttackSpecialNum(&mut self, AttackSpecialNum: i64) {
    self.fbb_.push_slot::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_ATTACKSPECIALNUM, AttackSpecialNum, 0);
  }
  #[inline]
  pub fn add_GeasId(&mut self, GeasId: i64) {
    self.fbb_.push_slot::<i64>(TacticTimeAttackSimulatorConfigExcel::VT_GEASID, GeasId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TacticTimeAttackSimulatorConfigExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TacticTimeAttackSimulatorConfigExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TacticTimeAttackSimulatorConfigExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TacticTimeAttackSimulatorConfigExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TacticTimeAttackSimulatorConfigExcel");
      ds.field("Order", &self.Order());
      ds.field("Repeat", &self.Repeat());
      ds.field("PresetGroupId", &self.PresetGroupId());
      ds.field("AttackStrikerNum", &self.AttackStrikerNum());
      ds.field("AttackSpecialNum", &self.AttackSpecialNum());
      ds.field("GeasId", &self.GeasId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TacticTimeAttackSimulatorConfigExcelT {
  pub Order: i64,
  pub Repeat: i64,
  pub PresetGroupId: i64,
  pub AttackStrikerNum: i64,
  pub AttackSpecialNum: i64,
  pub GeasId: i64,
}
impl Default for TacticTimeAttackSimulatorConfigExcelT {
  fn default() -> Self {
    Self {
      Order: 0,
      Repeat: 0,
      PresetGroupId: 0,
      AttackStrikerNum: 0,
      AttackSpecialNum: 0,
      GeasId: 0,
    }
  }
}
impl TacticTimeAttackSimulatorConfigExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TacticTimeAttackSimulatorConfigExcel<'b>> {
    let Order = self.Order;
    let Repeat = self.Repeat;
    let PresetGroupId = self.PresetGroupId;
    let AttackStrikerNum = self.AttackStrikerNum;
    let AttackSpecialNum = self.AttackSpecialNum;
    let GeasId = self.GeasId;
    TacticTimeAttackSimulatorConfigExcel::create(_fbb, &TacticTimeAttackSimulatorConfigExcelArgs{
      Order,
      Repeat,
      PresetGroupId,
      AttackStrikerNum,
      AttackSpecialNum,
      GeasId,
    })
  }
}
