// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VoiceTimelineExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VoiceTimelineExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VoiceTimelineExcel<'a> {
  type Inner = VoiceTimelineExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VoiceTimelineExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_NATION: flatbuffers::VOffsetT = 8;
  pub const VT_PATH: flatbuffers::VOffsetT = 10;
  pub const VT_SOUNDVOLUME: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VoiceTimelineExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VoiceTimelineExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<VoiceTimelineExcel<'bldr>> {
    let mut builder = VoiceTimelineExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"VoiceTimeline");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.SoundVolume {
        builder.add_SoundVolume(x);
      }
      if let Some(x) = args.Path {
        builder.add_Path(x);
      }
      if let Some(x) = args.Nation {
        builder.add_Nation(x);
      }
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Id(x);
    builder.finish()
  }

  pub fn unpack(&self) -> VoiceTimelineExcelT {
    let key = table_encryption_service::create_key(b"VoiceTimeline");
      let UniqueId = self.UniqueId();
      let Id = self.Id();
    let Nation = self.Nation().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let Path = self.Path().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let SoundVolume = self.SoundVolume().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    VoiceTimelineExcelT {
      UniqueId,
      Id,
      Nation,
      Path,
      SoundVolume,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(VoiceTimelineExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VoiceTimelineExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Nation(&self) -> Option<flatbuffers::Vector<'a, Nation>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Nation>>>(VoiceTimelineExcel::VT_NATION, None)}
  }
  #[inline]
  pub fn Path(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(VoiceTimelineExcel::VT_PATH, None)}
  }
  #[inline]
  pub fn SoundVolume(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(VoiceTimelineExcel::VT_SOUNDVOLUME, None)}
  }
}

impl flatbuffers::Verifiable for VoiceTimelineExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<u32>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Nation>>>("Nation", Self::VT_NATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("Path", Self::VT_PATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("SoundVolume", Self::VT_SOUNDVOLUME, false)?
     .finish();
    Ok(())
  }
}
pub struct VoiceTimelineExcelArgs<'a> {
    pub UniqueId: i64,
    pub Id: u32,
    pub Nation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Nation>>>,
    pub Path: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub SoundVolume: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}
impl<'a> Default for VoiceTimelineExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    VoiceTimelineExcelArgs {
      UniqueId: 0,
      Id: 0,
      Nation: None,
      Path: None,
      SoundVolume: None,
    }
  }
}

impl Serialize for VoiceTimelineExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VoiceTimelineExcel", 5)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Nation() {
        s.serialize_field("Nation", &f)?;
      } else {
        s.skip_field("Nation")?;
      }
      if let Some(f) = self.Path() {
        s.serialize_field("Path", &f)?;
      } else {
        s.skip_field("Path")?;
      }
      if let Some(f) = self.SoundVolume() {
        s.serialize_field("SoundVolume", &f)?;
      } else {
        s.skip_field("SoundVolume")?;
      }
    s.end()
  }
}

pub struct VoiceTimelineExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VoiceTimelineExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(VoiceTimelineExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: u32) {
    self.fbb_.push_slot::<u32>(VoiceTimelineExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Nation(&mut self, Nation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Nation>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VoiceTimelineExcel::VT_NATION, Nation);
  }
  #[inline]
  pub fn add_Path(&mut self, Path: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VoiceTimelineExcel::VT_PATH, Path);
  }
  #[inline]
  pub fn add_SoundVolume(&mut self, SoundVolume: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VoiceTimelineExcel::VT_SOUNDVOLUME, SoundVolume);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VoiceTimelineExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VoiceTimelineExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VoiceTimelineExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VoiceTimelineExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VoiceTimelineExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("Id", &self.Id());
      ds.field("Nation", &self.Nation());
      ds.field("Path", &self.Path());
      ds.field("SoundVolume", &self.SoundVolume());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VoiceTimelineExcelT {
  pub UniqueId: i64,
  pub Id: u32,
  pub Nation: Option<Vec<Nation>>,
  pub Path: Option<Vec<String>>,
  pub SoundVolume: Option<Vec<f32>>,
}
impl Default for VoiceTimelineExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      Id: 0,
      Nation: None,
      Path: None,
      SoundVolume: None,
    }
  }
}
impl VoiceTimelineExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<VoiceTimelineExcel<'b>> {
    let UniqueId = self.UniqueId;
    let Id = self.Id;
    let Nation = self.Nation.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let Path = self.Path.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let SoundVolume = self.SoundVolume.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    VoiceTimelineExcel::create(_fbb, &VoiceTimelineExcelArgs{
      UniqueId,
      Id,
      Nation,
      Path,
      SoundVolume,
    })
  }
}
