// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FurnitureTemplateElementExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FurnitureTemplateElementExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FurnitureTemplateElementExcel<'a> {
  type Inner = FurnitureTemplateElementExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FurnitureTemplateElementExcel<'a> {
  pub const VT_FURNITURETEMPLATEID: flatbuffers::VOffsetT = 4;
  pub const VT_FURNITUREID: flatbuffers::VOffsetT = 6;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 8;
  pub const VT_POSITIONX: flatbuffers::VOffsetT = 10;
  pub const VT_POSITIONY: flatbuffers::VOffsetT = 12;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 14;
  pub const VT_ORDER: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FurnitureTemplateElementExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FurnitureTemplateElementExcelArgs
  ) -> flatbuffers::WIPOffset<FurnitureTemplateElementExcel<'bldr>> {
    let mut builder = FurnitureTemplateElementExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FurnitureTemplateElement");
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Order(x);
      let x = args.FurnitureId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FurnitureId(x);
      let x = args.FurnitureTemplateId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FurnitureTemplateId(x);
      let x = args.Rotation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Rotation(x);
      let x = args.PositionY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_PositionY(x);
      let x = args.PositionX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_PositionX(x);
      let x = args.Location;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Location(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FurnitureTemplateElementExcelT {
    let key = table_encryption_service::create_key(b"FurnitureTemplateElement");
      let FurnitureTemplateId = self.FurnitureTemplateId();
      let FurnitureId = self.FurnitureId();
      let Location = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Location(), &key)
      } else {
        self.Location()
      };
      let PositionX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.PositionX(), &key)
      } else {
        self.PositionX()
      };
      let PositionY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.PositionY(), &key)
      } else {
        self.PositionY()
      };
      let Rotation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Rotation(), &key)
      } else {
        self.Rotation()
      };
      let Order = self.Order();
    FurnitureTemplateElementExcelT {
      FurnitureTemplateId,
      FurnitureId,
      Location,
      PositionX,
      PositionY,
      Rotation,
      Order,
    }
  }

  #[inline]
  pub fn FurnitureTemplateId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureTemplateElementExcel::VT_FURNITURETEMPLATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FurnitureId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureTemplateElementExcel::VT_FURNITUREID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Location(&self) -> FurnitureLocation {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FurnitureLocation>(FurnitureTemplateElementExcel::VT_LOCATION, Some(FurnitureLocation::None)).unwrap()}
  }
  #[inline]
  pub fn PositionX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(FurnitureTemplateElementExcel::VT_POSITIONX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn PositionY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(FurnitureTemplateElementExcel::VT_POSITIONY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(FurnitureTemplateElementExcel::VT_ROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureTemplateElementExcel::VT_ORDER, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FurnitureTemplateElementExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("FurnitureTemplateId", Self::VT_FURNITURETEMPLATEID, false)?
     .visit_field::<i64>("FurnitureId", Self::VT_FURNITUREID, false)?
     .visit_field::<FurnitureLocation>("Location", Self::VT_LOCATION, false)?
     .visit_field::<f32>("PositionX", Self::VT_POSITIONX, false)?
     .visit_field::<f32>("PositionY", Self::VT_POSITIONY, false)?
     .visit_field::<f32>("Rotation", Self::VT_ROTATION, false)?
     .visit_field::<i64>("Order", Self::VT_ORDER, false)?
     .finish();
    Ok(())
  }
}
pub struct FurnitureTemplateElementExcelArgs {
    pub FurnitureTemplateId: i64,
    pub FurnitureId: i64,
    pub Location: FurnitureLocation,
    pub PositionX: f32,
    pub PositionY: f32,
    pub Rotation: f32,
    pub Order: i64,
}
impl<'a> Default for FurnitureTemplateElementExcelArgs {
  #[inline]
  fn default() -> Self {
    FurnitureTemplateElementExcelArgs {
      FurnitureTemplateId: 0,
      FurnitureId: 0,
      Location: FurnitureLocation::None,
      PositionX: 0.0,
      PositionY: 0.0,
      Rotation: 0.0,
      Order: 0,
    }
  }
}

impl Serialize for FurnitureTemplateElementExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FurnitureTemplateElementExcel", 7)?;
      s.serialize_field("FurnitureTemplateId", &self.FurnitureTemplateId())?;
      s.serialize_field("FurnitureId", &self.FurnitureId())?;
      s.serialize_field("Location", &self.Location())?;
      s.serialize_field("PositionX", &self.PositionX())?;
      s.serialize_field("PositionY", &self.PositionY())?;
      s.serialize_field("Rotation", &self.Rotation())?;
      s.serialize_field("Order", &self.Order())?;
    s.end()
  }
}

pub struct FurnitureTemplateElementExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FurnitureTemplateElementExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FurnitureTemplateId(&mut self, FurnitureTemplateId: i64) {
    self.fbb_.push_slot::<i64>(FurnitureTemplateElementExcel::VT_FURNITURETEMPLATEID, FurnitureTemplateId, 0);
  }
  #[inline]
  pub fn add_FurnitureId(&mut self, FurnitureId: i64) {
    self.fbb_.push_slot::<i64>(FurnitureTemplateElementExcel::VT_FURNITUREID, FurnitureId, 0);
  }
  #[inline]
  pub fn add_Location(&mut self, Location: FurnitureLocation) {
    self.fbb_.push_slot::<FurnitureLocation>(FurnitureTemplateElementExcel::VT_LOCATION, Location, FurnitureLocation::None);
  }
  #[inline]
  pub fn add_PositionX(&mut self, PositionX: f32) {
    self.fbb_.push_slot::<f32>(FurnitureTemplateElementExcel::VT_POSITIONX, PositionX, 0.0);
  }
  #[inline]
  pub fn add_PositionY(&mut self, PositionY: f32) {
    self.fbb_.push_slot::<f32>(FurnitureTemplateElementExcel::VT_POSITIONY, PositionY, 0.0);
  }
  #[inline]
  pub fn add_Rotation(&mut self, Rotation: f32) {
    self.fbb_.push_slot::<f32>(FurnitureTemplateElementExcel::VT_ROTATION, Rotation, 0.0);
  }
  #[inline]
  pub fn add_Order(&mut self, Order: i64) {
    self.fbb_.push_slot::<i64>(FurnitureTemplateElementExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FurnitureTemplateElementExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FurnitureTemplateElementExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FurnitureTemplateElementExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FurnitureTemplateElementExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FurnitureTemplateElementExcel");
      ds.field("FurnitureTemplateId", &self.FurnitureTemplateId());
      ds.field("FurnitureId", &self.FurnitureId());
      ds.field("Location", &self.Location());
      ds.field("PositionX", &self.PositionX());
      ds.field("PositionY", &self.PositionY());
      ds.field("Rotation", &self.Rotation());
      ds.field("Order", &self.Order());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FurnitureTemplateElementExcelT {
  pub FurnitureTemplateId: i64,
  pub FurnitureId: i64,
  pub Location: FurnitureLocation,
  pub PositionX: f32,
  pub PositionY: f32,
  pub Rotation: f32,
  pub Order: i64,
}
impl Default for FurnitureTemplateElementExcelT {
  fn default() -> Self {
    Self {
      FurnitureTemplateId: 0,
      FurnitureId: 0,
      Location: FurnitureLocation::None,
      PositionX: 0.0,
      PositionY: 0.0,
      Rotation: 0.0,
      Order: 0,
    }
  }
}
impl FurnitureTemplateElementExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FurnitureTemplateElementExcel<'b>> {
    let FurnitureTemplateId = self.FurnitureTemplateId;
    let FurnitureId = self.FurnitureId;
    let Location = self.Location;
    let PositionX = self.PositionX;
    let PositionY = self.PositionY;
    let Rotation = self.Rotation;
    let Order = self.Order;
    FurnitureTemplateElementExcel::create(_fbb, &FurnitureTemplateElementExcelArgs{
      FurnitureTemplateId,
      FurnitureId,
      Location,
      PositionX,
      PositionY,
      Rotation,
      Order,
    })
  }
}
