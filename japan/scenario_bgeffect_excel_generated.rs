// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioBGEffectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioBGEffectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioBGEffectExcel<'a> {
  type Inner = ScenarioBGEffectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioBGEffectExcel<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_EFFECT: flatbuffers::VOffsetT = 6;
  pub const VT_EFFECT2: flatbuffers::VOffsetT = 8;
  pub const VT_SCROLL: flatbuffers::VOffsetT = 10;
  pub const VT_SCROLLTIME: flatbuffers::VOffsetT = 12;
  pub const VT_SCROLLFROM: flatbuffers::VOffsetT = 14;
  pub const VT_SCROLLTO: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioBGEffectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioBGEffectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioBGEffectExcel<'bldr>> {
    let mut builder = ScenarioBGEffectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioBGEffect");
      let x = args.ScrollTo;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScrollTo(x);
      let x = args.ScrollFrom;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScrollFrom(x);
      let x = args.ScrollTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScrollTime(x);
      let x = args.Scroll;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Scroll(x);
      if let Some(x) = args.Effect2 {
        builder.add_Effect2(x);
      }
      if let Some(x) = args.Effect {
        builder.add_Effect(x);
      }
      let x = args.Name;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Name(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioBGEffectExcelT {
    let key = table_encryption_service::create_key(b"ScenarioBGEffect");
      let Name = self.Name();
    let Effect = self.Effect().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Effect2 = self.Effect2().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Scroll = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Scroll(), &key)
      } else {
        self.Scroll()
      };
      let ScrollTime = self.ScrollTime();
      let ScrollFrom = self.ScrollFrom();
      let ScrollTo = self.ScrollTo();
    ScenarioBGEffectExcelT {
      Name,
      Effect,
      Effect2,
      Scroll,
      ScrollTime,
      ScrollFrom,
      ScrollTo,
    }
  }

  #[inline]
  pub fn Name(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGEffectExcel::VT_NAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Effect(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioBGEffectExcel::VT_EFFECT, None)}
  }
  #[inline]
  pub fn Effect2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioBGEffectExcel::VT_EFFECT2, None)}
  }
  #[inline]
  pub fn Scroll(&self) -> ScenarioBGScroll {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ScenarioBGScroll>(ScenarioBGEffectExcel::VT_SCROLL, Some(ScenarioBGScroll::None)).unwrap()}
  }
  #[inline]
  pub fn ScrollTime(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioBGEffectExcel::VT_SCROLLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScrollFrom(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioBGEffectExcel::VT_SCROLLFROM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScrollTo(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioBGEffectExcel::VT_SCROLLTO, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScenarioBGEffectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Effect", Self::VT_EFFECT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Effect2", Self::VT_EFFECT2, false)?
     .visit_field::<ScenarioBGScroll>("Scroll", Self::VT_SCROLL, false)?
     .visit_field::<i64>("ScrollTime", Self::VT_SCROLLTIME, false)?
     .visit_field::<i64>("ScrollFrom", Self::VT_SCROLLFROM, false)?
     .visit_field::<i64>("ScrollTo", Self::VT_SCROLLTO, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioBGEffectExcelArgs<'a> {
    pub Name: u32,
    pub Effect: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Effect2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Scroll: ScenarioBGScroll,
    pub ScrollTime: i64,
    pub ScrollFrom: i64,
    pub ScrollTo: i64,
}
impl<'a> Default for ScenarioBGEffectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioBGEffectExcelArgs {
      Name: 0,
      Effect: None,
      Effect2: None,
      Scroll: ScenarioBGScroll::None,
      ScrollTime: 0,
      ScrollFrom: 0,
      ScrollTo: 0,
    }
  }
}

impl Serialize for ScenarioBGEffectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioBGEffectExcel", 7)?;
      s.serialize_field("Name", &self.Name())?;
      if let Some(f) = self.Effect() {
        s.serialize_field("Effect", &f)?;
      } else {
        s.skip_field("Effect")?;
      }
      if let Some(f) = self.Effect2() {
        s.serialize_field("Effect2", &f)?;
      } else {
        s.skip_field("Effect2")?;
      }
      s.serialize_field("Scroll", &self.Scroll())?;
      s.serialize_field("ScrollTime", &self.ScrollTime())?;
      s.serialize_field("ScrollFrom", &self.ScrollFrom())?;
      s.serialize_field("ScrollTo", &self.ScrollTo())?;
    s.end()
  }
}

pub struct ScenarioBGEffectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioBGEffectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Name(&mut self, Name: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGEffectExcel::VT_NAME, Name, 0);
  }
  #[inline]
  pub fn add_Effect(&mut self, Effect: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioBGEffectExcel::VT_EFFECT, Effect);
  }
  #[inline]
  pub fn add_Effect2(&mut self, Effect2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioBGEffectExcel::VT_EFFECT2, Effect2);
  }
  #[inline]
  pub fn add_Scroll(&mut self, Scroll: ScenarioBGScroll) {
    self.fbb_.push_slot::<ScenarioBGScroll>(ScenarioBGEffectExcel::VT_SCROLL, Scroll, ScenarioBGScroll::None);
  }
  #[inline]
  pub fn add_ScrollTime(&mut self, ScrollTime: i64) {
    self.fbb_.push_slot::<i64>(ScenarioBGEffectExcel::VT_SCROLLTIME, ScrollTime, 0);
  }
  #[inline]
  pub fn add_ScrollFrom(&mut self, ScrollFrom: i64) {
    self.fbb_.push_slot::<i64>(ScenarioBGEffectExcel::VT_SCROLLFROM, ScrollFrom, 0);
  }
  #[inline]
  pub fn add_ScrollTo(&mut self, ScrollTo: i64) {
    self.fbb_.push_slot::<i64>(ScenarioBGEffectExcel::VT_SCROLLTO, ScrollTo, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioBGEffectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioBGEffectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioBGEffectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioBGEffectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioBGEffectExcel");
      ds.field("Name", &self.Name());
      ds.field("Effect", &self.Effect());
      ds.field("Effect2", &self.Effect2());
      ds.field("Scroll", &self.Scroll());
      ds.field("ScrollTime", &self.ScrollTime());
      ds.field("ScrollFrom", &self.ScrollFrom());
      ds.field("ScrollTo", &self.ScrollTo());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioBGEffectExcelT {
  pub Name: u32,
  pub Effect: Option<String>,
  pub Effect2: Option<String>,
  pub Scroll: ScenarioBGScroll,
  pub ScrollTime: i64,
  pub ScrollFrom: i64,
  pub ScrollTo: i64,
}
impl Default for ScenarioBGEffectExcelT {
  fn default() -> Self {
    Self {
      Name: 0,
      Effect: None,
      Effect2: None,
      Scroll: ScenarioBGScroll::None,
      ScrollTime: 0,
      ScrollFrom: 0,
      ScrollTo: 0,
    }
  }
}
impl ScenarioBGEffectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioBGEffectExcel<'b>> {
    let Name = self.Name;
    let Effect = self.Effect.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Effect2 = self.Effect2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Scroll = self.Scroll;
    let ScrollTime = self.ScrollTime;
    let ScrollFrom = self.ScrollFrom;
    let ScrollTo = self.ScrollTo;
    ScenarioBGEffectExcel::create(_fbb, &ScenarioBGEffectExcelArgs{
      Name,
      Effect,
      Effect2,
      Scroll,
      ScrollTime,
      ScrollFrom,
      ScrollTo,
    })
  }
}
