// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioScriptExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioScriptExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioScriptExcel<'a> {
  type Inner = ScenarioScriptExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioScriptExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_SELECTIONGROUP: flatbuffers::VOffsetT = 6;
  pub const VT_BGMID: flatbuffers::VOffsetT = 8;
  pub const VT_SOUND: flatbuffers::VOffsetT = 10;
  pub const VT_TRANSITION: flatbuffers::VOffsetT = 12;
  pub const VT_BGNAME: flatbuffers::VOffsetT = 14;
  pub const VT_BGEFFECT: flatbuffers::VOffsetT = 16;
  pub const VT_POPUPFILENAME: flatbuffers::VOffsetT = 18;
  pub const VT_SCRIPTKR: flatbuffers::VOffsetT = 20;
  pub const VT_TEXTJP: flatbuffers::VOffsetT = 22;
  pub const VT_VOICEID: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioScriptExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioScriptExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioScriptExcel<'bldr>> {
    let mut builder = ScenarioScriptExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioScript");
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.SelectionGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SelectionGroup(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.VoiceId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_VoiceId(x);
      if let Some(x) = args.TextJp {
        builder.add_TextJp(x);
      }
      if let Some(x) = args.ScriptKr {
        builder.add_ScriptKr(x);
      }
      if let Some(x) = args.PopupFileName {
        builder.add_PopupFileName(x);
      }
      let x = args.BGEffect;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_BGEffect(x);
      let x = args.BGName;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_BGName(x);
      let x = args.Transition;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Transition(x);
      if let Some(x) = args.Sound {
        builder.add_Sound(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioScriptExcelT {
    let key = table_encryption_service::create_key(b"ScenarioScript");
      let GroupId = self.GroupId();
      let SelectionGroup = self.SelectionGroup();
      let BGMId = self.BGMId();
    let Sound = self.Sound().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Transition = self.Transition();
      let BGName = self.BGName();
      let BGEffect = self.BGEffect();
    let PopupFileName = self.PopupFileName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ScriptKr = self.ScriptKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TextJp = self.TextJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceId = self.VoiceId();
    ScenarioScriptExcelT {
      GroupId,
      SelectionGroup,
      BGMId,
      Sound,
      Transition,
      BGName,
      BGEffect,
      PopupFileName,
      ScriptKr,
      TextJp,
      VoiceId,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioScriptExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SelectionGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioScriptExcel::VT_SELECTIONGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioScriptExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Sound(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioScriptExcel::VT_SOUND, None)}
  }
  #[inline]
  pub fn Transition(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioScriptExcel::VT_TRANSITION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGName(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioScriptExcel::VT_BGNAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGEffect(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioScriptExcel::VT_BGEFFECT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PopupFileName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioScriptExcel::VT_POPUPFILENAME, None)}
  }
  #[inline]
  pub fn ScriptKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioScriptExcel::VT_SCRIPTKR, None)}
  }
  #[inline]
  pub fn TextJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioScriptExcel::VT_TEXTJP, None)}
  }
  #[inline]
  pub fn VoiceId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioScriptExcel::VT_VOICEID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScenarioScriptExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i64>("SelectionGroup", Self::VT_SELECTIONGROUP, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Sound", Self::VT_SOUND, false)?
     .visit_field::<u32>("Transition", Self::VT_TRANSITION, false)?
     .visit_field::<u32>("BGName", Self::VT_BGNAME, false)?
     .visit_field::<u32>("BGEffect", Self::VT_BGEFFECT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PopupFileName", Self::VT_POPUPFILENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ScriptKr", Self::VT_SCRIPTKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TextJp", Self::VT_TEXTJP, false)?
     .visit_field::<u32>("VoiceId", Self::VT_VOICEID, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioScriptExcelArgs<'a> {
    pub GroupId: i64,
    pub SelectionGroup: i64,
    pub BGMId: i64,
    pub Sound: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Transition: u32,
    pub BGName: u32,
    pub BGEffect: u32,
    pub PopupFileName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ScriptKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TextJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceId: u32,
}
impl<'a> Default for ScenarioScriptExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioScriptExcelArgs {
      GroupId: 0,
      SelectionGroup: 0,
      BGMId: 0,
      Sound: None,
      Transition: 0,
      BGName: 0,
      BGEffect: 0,
      PopupFileName: None,
      ScriptKr: None,
      TextJp: None,
      VoiceId: 0,
    }
  }
}

impl Serialize for ScenarioScriptExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioScriptExcel", 11)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("SelectionGroup", &self.SelectionGroup())?;
      s.serialize_field("BGMId", &self.BGMId())?;
      if let Some(f) = self.Sound() {
        s.serialize_field("Sound", &f)?;
      } else {
        s.skip_field("Sound")?;
      }
      s.serialize_field("Transition", &self.Transition())?;
      s.serialize_field("BGName", &self.BGName())?;
      s.serialize_field("BGEffect", &self.BGEffect())?;
      if let Some(f) = self.PopupFileName() {
        s.serialize_field("PopupFileName", &f)?;
      } else {
        s.skip_field("PopupFileName")?;
      }
      if let Some(f) = self.ScriptKr() {
        s.serialize_field("ScriptKr", &f)?;
      } else {
        s.skip_field("ScriptKr")?;
      }
      if let Some(f) = self.TextJp() {
        s.serialize_field("TextJp", &f)?;
      } else {
        s.skip_field("TextJp")?;
      }
      s.serialize_field("VoiceId", &self.VoiceId())?;
    s.end()
  }
}

pub struct ScenarioScriptExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioScriptExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioScriptExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_SelectionGroup(&mut self, SelectionGroup: i64) {
    self.fbb_.push_slot::<i64>(ScenarioScriptExcel::VT_SELECTIONGROUP, SelectionGroup, 0);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioScriptExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_Sound(&mut self, Sound: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioScriptExcel::VT_SOUND, Sound);
  }
  #[inline]
  pub fn add_Transition(&mut self, Transition: u32) {
    self.fbb_.push_slot::<u32>(ScenarioScriptExcel::VT_TRANSITION, Transition, 0);
  }
  #[inline]
  pub fn add_BGName(&mut self, BGName: u32) {
    self.fbb_.push_slot::<u32>(ScenarioScriptExcel::VT_BGNAME, BGName, 0);
  }
  #[inline]
  pub fn add_BGEffect(&mut self, BGEffect: u32) {
    self.fbb_.push_slot::<u32>(ScenarioScriptExcel::VT_BGEFFECT, BGEffect, 0);
  }
  #[inline]
  pub fn add_PopupFileName(&mut self, PopupFileName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioScriptExcel::VT_POPUPFILENAME, PopupFileName);
  }
  #[inline]
  pub fn add_ScriptKr(&mut self, ScriptKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioScriptExcel::VT_SCRIPTKR, ScriptKr);
  }
  #[inline]
  pub fn add_TextJp(&mut self, TextJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioScriptExcel::VT_TEXTJP, TextJp);
  }
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: u32) {
    self.fbb_.push_slot::<u32>(ScenarioScriptExcel::VT_VOICEID, VoiceId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioScriptExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioScriptExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioScriptExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioScriptExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioScriptExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("SelectionGroup", &self.SelectionGroup());
      ds.field("BGMId", &self.BGMId());
      ds.field("Sound", &self.Sound());
      ds.field("Transition", &self.Transition());
      ds.field("BGName", &self.BGName());
      ds.field("BGEffect", &self.BGEffect());
      ds.field("PopupFileName", &self.PopupFileName());
      ds.field("ScriptKr", &self.ScriptKr());
      ds.field("TextJp", &self.TextJp());
      ds.field("VoiceId", &self.VoiceId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioScriptExcelT {
  pub GroupId: i64,
  pub SelectionGroup: i64,
  pub BGMId: i64,
  pub Sound: Option<String>,
  pub Transition: u32,
  pub BGName: u32,
  pub BGEffect: u32,
  pub PopupFileName: Option<String>,
  pub ScriptKr: Option<String>,
  pub TextJp: Option<String>,
  pub VoiceId: u32,
}
impl Default for ScenarioScriptExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      SelectionGroup: 0,
      BGMId: 0,
      Sound: None,
      Transition: 0,
      BGName: 0,
      BGEffect: 0,
      PopupFileName: None,
      ScriptKr: None,
      TextJp: None,
      VoiceId: 0,
    }
  }
}
impl ScenarioScriptExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioScriptExcel<'b>> {
    let GroupId = self.GroupId;
    let SelectionGroup = self.SelectionGroup;
    let BGMId = self.BGMId;
    let Sound = self.Sound.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Transition = self.Transition;
    let BGName = self.BGName;
    let BGEffect = self.BGEffect;
    let PopupFileName = self.PopupFileName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ScriptKr = self.ScriptKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TextJp = self.TextJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceId = self.VoiceId;
    ScenarioScriptExcel::create(_fbb, &ScenarioScriptExcelArgs{
      GroupId,
      SelectionGroup,
      BGMId,
      Sound,
      Transition,
      BGName,
      BGEffect,
      PopupFileName,
      ScriptKr,
      TextJp,
      VoiceId,
    })
  }
}
