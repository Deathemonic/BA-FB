// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDefenseStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDefenseStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDefenseStageExcel<'a> {
  type Inner = MiniGameDefenseStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDefenseStageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 8;
  pub const VT_STAGEDIFFICULTY: flatbuffers::VOffsetT = 10;
  pub const VT_STAGEDIFFICULTYLOCALIZE: flatbuffers::VOffsetT = 12;
  pub const VT_STAGENUMBER: flatbuffers::VOffsetT = 14;
  pub const VT_STAGEDISPLAY: flatbuffers::VOffsetT = 16;
  pub const VT_PREVSTAGEID: flatbuffers::VOffsetT = 18;
  pub const VT_ECHELONEXTENSIONTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 22;
  pub const VT_STAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_STAGEENTERCOSTID: flatbuffers::VOffsetT = 26;
  pub const VT_STAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 28;
  pub const VT_EVENTCONTENTSTAGEREWARDID: flatbuffers::VOffsetT = 30;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 32;
  pub const VT_CLEARSCENARIOGROUPID: flatbuffers::VOffsetT = 34;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 36;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 38;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 40;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 42;
  pub const VT_STARGOAL: flatbuffers::VOffsetT = 44;
  pub const VT_STARGOALAMOUNT: flatbuffers::VOffsetT = 46;
  pub const VT_DEFENSEFORMATIONBGPREFAB: flatbuffers::VOffsetT = 48;
  pub const VT_DEFENSEFORMATIONBGPREFABSCALE: flatbuffers::VOffsetT = 50;
  pub const VT_FIXEDECHELON: flatbuffers::VOffsetT = 52;
  pub const VT_MININAGEDEFENSEFIXEDSTATID: flatbuffers::VOffsetT = 54;
  pub const VT_STAGEHINT: flatbuffers::VOffsetT = 56;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDefenseStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDefenseStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDefenseStageExcel<'bldr>> {
    let mut builder = MiniGameDefenseStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDefenseStage");
      let x = args.MininageDefenseFixedStatId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MininageDefenseFixedStatId(x);
      let x = args.FixedEchelon;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FixedEchelon(x);
      let x = args.GroundID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundID(x);
      let x = args.EventContentStageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentStageRewardId(x);
      let x = args.StageEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterCostId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.PrevStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevStageId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.StageHint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StageHint(x);
      let x = args.DefenseFormationBGPrefabScale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_DefenseFormationBGPrefabScale(x);
      if let Some(x) = args.DefenseFormationBGPrefab {
        builder.add_DefenseFormationBGPrefab(x);
      }
      if let Some(x) = args.StarGoalAmount {
        builder.add_StarGoalAmount(x);
      }
      if let Some(x) = args.StarGoal {
        builder.add_StarGoal(x);
      }
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      if let Some(x) = args.ClearScenarioGroupId {
        builder.add_ClearScenarioGroupId(x);
      }
      if let Some(x) = args.EnterScenarioGroupId {
        builder.add_EnterScenarioGroupId(x);
      }
      let x = args.StageEnterCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterCostAmount(x);
      let x = args.StageEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageEnterCostType(x);
      let x = args.EchelonExtensionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EchelonExtensionType(x);
      let x = args.StageDisplay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageDisplay(x);
      let x = args.StageNumber;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageNumber(x);
      let x = args.StageDifficultyLocalize;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StageDifficultyLocalize(x);
      let x = args.StageDifficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageDifficulty(x);
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDefenseStageExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDefenseStage");
      let Id = self.Id();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventContentId = self.EventContentId();
      let StageDifficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageDifficulty(), &key)
      } else {
        self.StageDifficulty()
      };
      let StageDifficultyLocalize = self.StageDifficultyLocalize();
      let StageNumber = self.StageNumber();
      let StageDisplay = self.StageDisplay();
      let PrevStageId = self.PrevStageId();
      let EchelonExtensionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EchelonExtensionType(), &key)
      } else {
        self.EchelonExtensionType()
      };
      let BattleDuration = self.BattleDuration();
      let StageEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageEnterCostType(), &key)
      } else {
        self.StageEnterCostType()
      };
      let StageEnterCostId = self.StageEnterCostId();
      let StageEnterCostAmount = self.StageEnterCostAmount();
      let EventContentStageRewardId = self.EventContentStageRewardId();
    let EnterScenarioGroupId = self.EnterScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let RecommandLevel = self.RecommandLevel();
      let GroundID = self.GroundID();
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
    let StarGoal = self.StarGoal().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StarGoalAmount = self.StarGoalAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let DefenseFormationBGPrefab = self.DefenseFormationBGPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DefenseFormationBGPrefabScale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.DefenseFormationBGPrefabScale(), &key)
      } else {
        self.DefenseFormationBGPrefabScale()
      };
      let FixedEchelon = self.FixedEchelon();
      let MininageDefenseFixedStatId = self.MininageDefenseFixedStatId();
      let StageHint = self.StageHint();
    MiniGameDefenseStageExcelT {
      Id,
      Name,
      EventContentId,
      StageDifficulty,
      StageDifficultyLocalize,
      StageNumber,
      StageDisplay,
      PrevStageId,
      EchelonExtensionType,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      EventContentStageRewardId,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      StageTopography,
      RecommandLevel,
      GroundID,
      ContentType,
      StarGoal,
      StarGoalAmount,
      DefenseFormationBGPrefab,
      DefenseFormationBGPrefabScale,
      FixedEchelon,
      MininageDefenseFixedStatId,
      StageHint,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDefenseStageExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageDifficulty(&self) -> StageDifficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageDifficulty>(MiniGameDefenseStageExcel::VT_STAGEDIFFICULTY, Some(StageDifficulty::None)).unwrap()}
  }
  #[inline]
  pub fn StageDifficultyLocalize(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameDefenseStageExcel::VT_STAGEDIFFICULTYLOCALIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageNumber(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseStageExcel::VT_STAGENUMBER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageDisplay(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseStageExcel::VT_STAGEDISPLAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrevStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_PREVSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonExtensionType(&self) -> EchelonExtensionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonExtensionType>(MiniGameDefenseStageExcel::VT_ECHELONEXTENSIONTYPE, Some(EchelonExtensionType::Base)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MiniGameDefenseStageExcel::VT_STAGEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_STAGEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseStageExcel::VT_STAGEENTERCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentStageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_EVENTCONTENTSTAGEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnterScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameDefenseStageExcel::VT_ENTERSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn ClearScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameDefenseStageExcel::VT_CLEARSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(MiniGameDefenseStageExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseStageExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroundID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(MiniGameDefenseStageExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn StarGoal(&self) -> Option<flatbuffers::Vector<'a, StarGoalType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, StarGoalType>>>(MiniGameDefenseStageExcel::VT_STARGOAL, None)}
  }
  #[inline]
  pub fn StarGoalAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(MiniGameDefenseStageExcel::VT_STARGOALAMOUNT, None)}
  }
  #[inline]
  pub fn DefenseFormationBGPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDefenseStageExcel::VT_DEFENSEFORMATIONBGPREFAB, None)}
  }
  #[inline]
  pub fn DefenseFormationBGPrefabScale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MiniGameDefenseStageExcel::VT_DEFENSEFORMATIONBGPREFABSCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn FixedEchelon(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_FIXEDECHELON, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MininageDefenseFixedStatId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseStageExcel::VT_MININAGEDEFENSEFIXEDSTATID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageHint(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameDefenseStageExcel::VT_STAGEHINT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameDefenseStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<StageDifficulty>("StageDifficulty", Self::VT_STAGEDIFFICULTY, false)?
     .visit_field::<u32>("StageDifficultyLocalize", Self::VT_STAGEDIFFICULTYLOCALIZE, false)?
     .visit_field::<i32>("StageNumber", Self::VT_STAGENUMBER, false)?
     .visit_field::<i32>("StageDisplay", Self::VT_STAGEDISPLAY, false)?
     .visit_field::<i64>("PrevStageId", Self::VT_PREVSTAGEID, false)?
     .visit_field::<EchelonExtensionType>("EchelonExtensionType", Self::VT_ECHELONEXTENSIONTYPE, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<ParcelType>("StageEnterCostType", Self::VT_STAGEENTERCOSTTYPE, false)?
     .visit_field::<i64>("StageEnterCostId", Self::VT_STAGEENTERCOSTID, false)?
     .visit_field::<i32>("StageEnterCostAmount", Self::VT_STAGEENTERCOSTAMOUNT, false)?
     .visit_field::<i64>("EventContentStageRewardId", Self::VT_EVENTCONTENTSTAGEREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("EnterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ClearScenarioGroupId", Self::VT_CLEARSCENARIOGROUPID, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<i32>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<i64>("GroundID", Self::VT_GROUNDID, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, StarGoalType>>>("StarGoal", Self::VT_STARGOAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("StarGoalAmount", Self::VT_STARGOALAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DefenseFormationBGPrefab", Self::VT_DEFENSEFORMATIONBGPREFAB, false)?
     .visit_field::<f32>("DefenseFormationBGPrefabScale", Self::VT_DEFENSEFORMATIONBGPREFABSCALE, false)?
     .visit_field::<i64>("FixedEchelon", Self::VT_FIXEDECHELON, false)?
     .visit_field::<i64>("MininageDefenseFixedStatId", Self::VT_MININAGEDEFENSEFIXEDSTATID, false)?
     .visit_field::<u32>("StageHint", Self::VT_STAGEHINT, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDefenseStageExcelArgs<'a> {
    pub Id: i64,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventContentId: i64,
    pub StageDifficulty: StageDifficulty,
    pub StageDifficultyLocalize: u32,
    pub StageNumber: i32,
    pub StageDisplay: i32,
    pub PrevStageId: i64,
    pub EchelonExtensionType: EchelonExtensionType,
    pub BattleDuration: i64,
    pub StageEnterCostType: ParcelType,
    pub StageEnterCostId: i64,
    pub StageEnterCostAmount: i32,
    pub EventContentStageRewardId: i64,
    pub EnterScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ClearScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StageTopography: StageTopography,
    pub RecommandLevel: i32,
    pub GroundID: i64,
    pub ContentType: ContentType,
    pub StarGoal: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, StarGoalType>>>,
    pub StarGoalAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub DefenseFormationBGPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DefenseFormationBGPrefabScale: f32,
    pub FixedEchelon: i64,
    pub MininageDefenseFixedStatId: i64,
    pub StageHint: u32,
}
impl<'a> Default for MiniGameDefenseStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDefenseStageExcelArgs {
      Id: 0,
      Name: None,
      EventContentId: 0,
      StageDifficulty: StageDifficulty::None,
      StageDifficultyLocalize: 0,
      StageNumber: 0,
      StageDisplay: 0,
      PrevStageId: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      EventContentStageRewardId: 0,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      GroundID: 0,
      ContentType: ContentType::None,
      StarGoal: None,
      StarGoalAmount: None,
      DefenseFormationBGPrefab: None,
      DefenseFormationBGPrefabScale: 0.0,
      FixedEchelon: 0,
      MininageDefenseFixedStatId: 0,
      StageHint: 0,
    }
  }
}

impl Serialize for MiniGameDefenseStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDefenseStageExcel", 27)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("StageDifficulty", &self.StageDifficulty())?;
      s.serialize_field("StageDifficultyLocalize", &self.StageDifficultyLocalize())?;
      s.serialize_field("StageNumber", &self.StageNumber())?;
      s.serialize_field("StageDisplay", &self.StageDisplay())?;
      s.serialize_field("PrevStageId", &self.PrevStageId())?;
      s.serialize_field("EchelonExtensionType", &self.EchelonExtensionType())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("StageEnterCostType", &self.StageEnterCostType())?;
      s.serialize_field("StageEnterCostId", &self.StageEnterCostId())?;
      s.serialize_field("StageEnterCostAmount", &self.StageEnterCostAmount())?;
      s.serialize_field("EventContentStageRewardId", &self.EventContentStageRewardId())?;
      if let Some(f) = self.EnterScenarioGroupId() {
        s.serialize_field("EnterScenarioGroupId", &f)?;
      } else {
        s.skip_field("EnterScenarioGroupId")?;
      }
      if let Some(f) = self.ClearScenarioGroupId() {
        s.serialize_field("ClearScenarioGroupId", &f)?;
      } else {
        s.skip_field("ClearScenarioGroupId")?;
      }
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      s.serialize_field("GroundID", &self.GroundID())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      if let Some(f) = self.StarGoal() {
        s.serialize_field("StarGoal", &f)?;
      } else {
        s.skip_field("StarGoal")?;
      }
      if let Some(f) = self.StarGoalAmount() {
        s.serialize_field("StarGoalAmount", &f)?;
      } else {
        s.skip_field("StarGoalAmount")?;
      }
      if let Some(f) = self.DefenseFormationBGPrefab() {
        s.serialize_field("DefenseFormationBGPrefab", &f)?;
      } else {
        s.skip_field("DefenseFormationBGPrefab")?;
      }
      s.serialize_field("DefenseFormationBGPrefabScale", &self.DefenseFormationBGPrefabScale())?;
      s.serialize_field("FixedEchelon", &self.FixedEchelon())?;
      s.serialize_field("MininageDefenseFixedStatId", &self.MininageDefenseFixedStatId())?;
      s.serialize_field("StageHint", &self.StageHint())?;
    s.end()
  }
}

pub struct MiniGameDefenseStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDefenseStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDefenseStageExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_StageDifficulty(&mut self, StageDifficulty: StageDifficulty) {
    self.fbb_.push_slot::<StageDifficulty>(MiniGameDefenseStageExcel::VT_STAGEDIFFICULTY, StageDifficulty, StageDifficulty::None);
  }
  #[inline]
  pub fn add_StageDifficultyLocalize(&mut self, StageDifficultyLocalize: u32) {
    self.fbb_.push_slot::<u32>(MiniGameDefenseStageExcel::VT_STAGEDIFFICULTYLOCALIZE, StageDifficultyLocalize, 0);
  }
  #[inline]
  pub fn add_StageNumber(&mut self, StageNumber: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseStageExcel::VT_STAGENUMBER, StageNumber, 0);
  }
  #[inline]
  pub fn add_StageDisplay(&mut self, StageDisplay: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseStageExcel::VT_STAGEDISPLAY, StageDisplay, 0);
  }
  #[inline]
  pub fn add_PrevStageId(&mut self, PrevStageId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_PREVSTAGEID, PrevStageId, 0);
  }
  #[inline]
  pub fn add_EchelonExtensionType(&mut self, EchelonExtensionType: EchelonExtensionType) {
    self.fbb_.push_slot::<EchelonExtensionType>(MiniGameDefenseStageExcel::VT_ECHELONEXTENSIONTYPE, EchelonExtensionType, EchelonExtensionType::Base);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_StageEnterCostType(&mut self, StageEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MiniGameDefenseStageExcel::VT_STAGEENTERCOSTTYPE, StageEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_StageEnterCostId(&mut self, StageEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_STAGEENTERCOSTID, StageEnterCostId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostAmount(&mut self, StageEnterCostAmount: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseStageExcel::VT_STAGEENTERCOSTAMOUNT, StageEnterCostAmount, 0);
  }
  #[inline]
  pub fn add_EventContentStageRewardId(&mut self, EventContentStageRewardId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_EVENTCONTENTSTAGEREWARDID, EventContentStageRewardId, 0);
  }
  #[inline]
  pub fn add_EnterScenarioGroupId(&mut self, EnterScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDefenseStageExcel::VT_ENTERSCENARIOGROUPID, EnterScenarioGroupId);
  }
  #[inline]
  pub fn add_ClearScenarioGroupId(&mut self, ClearScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDefenseStageExcel::VT_CLEARSCENARIOGROUPID, ClearScenarioGroupId);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(MiniGameDefenseStageExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseStageExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_GroundID(&mut self, GroundID: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_GROUNDID, GroundID, 0);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(MiniGameDefenseStageExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_StarGoal(&mut self, StarGoal: flatbuffers::WIPOffset<flatbuffers::Vector<'b , StarGoalType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDefenseStageExcel::VT_STARGOAL, StarGoal);
  }
  #[inline]
  pub fn add_StarGoalAmount(&mut self, StarGoalAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDefenseStageExcel::VT_STARGOALAMOUNT, StarGoalAmount);
  }
  #[inline]
  pub fn add_DefenseFormationBGPrefab(&mut self, DefenseFormationBGPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDefenseStageExcel::VT_DEFENSEFORMATIONBGPREFAB, DefenseFormationBGPrefab);
  }
  #[inline]
  pub fn add_DefenseFormationBGPrefabScale(&mut self, DefenseFormationBGPrefabScale: f32) {
    self.fbb_.push_slot::<f32>(MiniGameDefenseStageExcel::VT_DEFENSEFORMATIONBGPREFABSCALE, DefenseFormationBGPrefabScale, 0.0);
  }
  #[inline]
  pub fn add_FixedEchelon(&mut self, FixedEchelon: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_FIXEDECHELON, FixedEchelon, 0);
  }
  #[inline]
  pub fn add_MininageDefenseFixedStatId(&mut self, MininageDefenseFixedStatId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseStageExcel::VT_MININAGEDEFENSEFIXEDSTATID, MininageDefenseFixedStatId, 0);
  }
  #[inline]
  pub fn add_StageHint(&mut self, StageHint: u32) {
    self.fbb_.push_slot::<u32>(MiniGameDefenseStageExcel::VT_STAGEHINT, StageHint, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDefenseStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDefenseStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDefenseStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDefenseStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDefenseStageExcel");
      ds.field("Id", &self.Id());
      ds.field("Name", &self.Name());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("StageDifficulty", &self.StageDifficulty());
      ds.field("StageDifficultyLocalize", &self.StageDifficultyLocalize());
      ds.field("StageNumber", &self.StageNumber());
      ds.field("StageDisplay", &self.StageDisplay());
      ds.field("PrevStageId", &self.PrevStageId());
      ds.field("EchelonExtensionType", &self.EchelonExtensionType());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("StageEnterCostType", &self.StageEnterCostType());
      ds.field("StageEnterCostId", &self.StageEnterCostId());
      ds.field("StageEnterCostAmount", &self.StageEnterCostAmount());
      ds.field("EventContentStageRewardId", &self.EventContentStageRewardId());
      ds.field("EnterScenarioGroupId", &self.EnterScenarioGroupId());
      ds.field("ClearScenarioGroupId", &self.ClearScenarioGroupId());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("GroundID", &self.GroundID());
      ds.field("ContentType", &self.ContentType());
      ds.field("StarGoal", &self.StarGoal());
      ds.field("StarGoalAmount", &self.StarGoalAmount());
      ds.field("DefenseFormationBGPrefab", &self.DefenseFormationBGPrefab());
      ds.field("DefenseFormationBGPrefabScale", &self.DefenseFormationBGPrefabScale());
      ds.field("FixedEchelon", &self.FixedEchelon());
      ds.field("MininageDefenseFixedStatId", &self.MininageDefenseFixedStatId());
      ds.field("StageHint", &self.StageHint());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDefenseStageExcelT {
  pub Id: i64,
  pub Name: Option<String>,
  pub EventContentId: i64,
  pub StageDifficulty: StageDifficulty,
  pub StageDifficultyLocalize: u32,
  pub StageNumber: i32,
  pub StageDisplay: i32,
  pub PrevStageId: i64,
  pub EchelonExtensionType: EchelonExtensionType,
  pub BattleDuration: i64,
  pub StageEnterCostType: ParcelType,
  pub StageEnterCostId: i64,
  pub StageEnterCostAmount: i32,
  pub EventContentStageRewardId: i64,
  pub EnterScenarioGroupId: Option<Vec<i64>>,
  pub ClearScenarioGroupId: Option<Vec<i64>>,
  pub StageTopography: StageTopography,
  pub RecommandLevel: i32,
  pub GroundID: i64,
  pub ContentType: ContentType,
  pub StarGoal: Option<Vec<StarGoalType>>,
  pub StarGoalAmount: Option<Vec<i32>>,
  pub DefenseFormationBGPrefab: Option<String>,
  pub DefenseFormationBGPrefabScale: f32,
  pub FixedEchelon: i64,
  pub MininageDefenseFixedStatId: i64,
  pub StageHint: u32,
}
impl Default for MiniGameDefenseStageExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Name: None,
      EventContentId: 0,
      StageDifficulty: StageDifficulty::None,
      StageDifficultyLocalize: 0,
      StageNumber: 0,
      StageDisplay: 0,
      PrevStageId: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      EventContentStageRewardId: 0,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      GroundID: 0,
      ContentType: ContentType::None,
      StarGoal: None,
      StarGoalAmount: None,
      DefenseFormationBGPrefab: None,
      DefenseFormationBGPrefabScale: 0.0,
      FixedEchelon: 0,
      MininageDefenseFixedStatId: 0,
      StageHint: 0,
    }
  }
}
impl MiniGameDefenseStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDefenseStageExcel<'b>> {
    let Id = self.Id;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventContentId = self.EventContentId;
    let StageDifficulty = self.StageDifficulty;
    let StageDifficultyLocalize = self.StageDifficultyLocalize;
    let StageNumber = self.StageNumber;
    let StageDisplay = self.StageDisplay;
    let PrevStageId = self.PrevStageId;
    let EchelonExtensionType = self.EchelonExtensionType;
    let BattleDuration = self.BattleDuration;
    let StageEnterCostType = self.StageEnterCostType;
    let StageEnterCostId = self.StageEnterCostId;
    let StageEnterCostAmount = self.StageEnterCostAmount;
    let EventContentStageRewardId = self.EventContentStageRewardId;
    let EnterScenarioGroupId = self.EnterScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StageTopography = self.StageTopography;
    let RecommandLevel = self.RecommandLevel;
    let GroundID = self.GroundID;
    let ContentType = self.ContentType;
    let StarGoal = self.StarGoal.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StarGoalAmount = self.StarGoalAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let DefenseFormationBGPrefab = self.DefenseFormationBGPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DefenseFormationBGPrefabScale = self.DefenseFormationBGPrefabScale;
    let FixedEchelon = self.FixedEchelon;
    let MininageDefenseFixedStatId = self.MininageDefenseFixedStatId;
    let StageHint = self.StageHint;
    MiniGameDefenseStageExcel::create(_fbb, &MiniGameDefenseStageExcelArgs{
      Id,
      Name,
      EventContentId,
      StageDifficulty,
      StageDifficultyLocalize,
      StageNumber,
      StageDisplay,
      PrevStageId,
      EchelonExtensionType,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      EventContentStageRewardId,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      StageTopography,
      RecommandLevel,
      GroundID,
      ContentType,
      StarGoal,
      StarGoalAmount,
      DefenseFormationBGPrefab,
      DefenseFormationBGPrefabScale,
      FixedEchelon,
      MininageDefenseFixedStatId,
      StageHint,
    })
  }
}
