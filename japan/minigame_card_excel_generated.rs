// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCardExcel<'a> {
  type Inner = MinigameCardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCardExcel<'a> {
  pub const VT_NONE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCardExcel<'bldr>> {
    let mut builder = MinigameCardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCard");
      if let Some(x) = args.none {
        builder.add_none(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCardExcelT {
    let key = table_encryption_service::create_key(b"MinigameCard");
    let none = self.none().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    MinigameCardExcelT {
      none,
    }
  }

  #[inline]
  pub fn none(&self) -> Option<flatbuffers::Vector<'a, CCGCharacterType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, CCGCharacterType>>>(MinigameCardExcel::VT_NONE, None)}
  }
}

impl flatbuffers::Verifiable for MinigameCardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, CCGCharacterType>>>("none", Self::VT_NONE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCardExcelArgs<'a> {
    pub none: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, CCGCharacterType>>>,
}
impl<'a> Default for MinigameCardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCardExcelArgs {
      none: None,
    }
  }
}

impl Serialize for MinigameCardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCardExcel", 1)?;
      if let Some(f) = self.none() {
        s.serialize_field("none", &f)?;
      } else {
        s.skip_field("none")?;
      }
    s.end()
  }
}

pub struct MinigameCardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_none(&mut self, none: flatbuffers::WIPOffset<flatbuffers::Vector<'b , CCGCharacterType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCardExcel::VT_NONE, none);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCardExcel");
      ds.field("none", &self.none());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCardExcelT {
  pub none: Option<Vec<CCGCharacterType>>,
}
impl Default for MinigameCardExcelT {
  fn default() -> Self {
    Self {
      none: None,
    }
  }
}
impl MinigameCardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCardExcel<'b>> {
    let none = self.none.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MinigameCardExcel::create(_fbb, &MinigameCardExcelArgs{
      none,
    })
  }
}
