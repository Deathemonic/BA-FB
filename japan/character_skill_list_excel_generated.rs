// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterSkillListExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterSkillListExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterSkillListExcel<'a> {
  type Inner = CharacterSkillListExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterSkillListExcel<'a> {
  pub const VT_CHARACTERSKILLLISTGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_MINIMUMGRADECHARACTERWEAPON: flatbuffers::VOffsetT = 6;
  pub const VT_MINIMUMTIERCHARACTERGEAR: flatbuffers::VOffsetT = 8;
  pub const VT_FORMINDEX: flatbuffers::VOffsetT = 10;
  pub const VT_ISROOTMOTION: flatbuffers::VOffsetT = 12;
  pub const VT_ISMOVELEFTRIGHT: flatbuffers::VOffsetT = 14;
  pub const VT_USERANDOMEXSKILLTIMELINE: flatbuffers::VOffsetT = 16;
  pub const VT_TSAINTERACTIONID: flatbuffers::VOffsetT = 18;
  pub const VT_NORMALSKILLGROUPID: flatbuffers::VOffsetT = 20;
  pub const VT_NORMALSKILLTIMELINEINDEX: flatbuffers::VOffsetT = 22;
  pub const VT_SELECTEXSKILLACTIONSKILLSLOT: flatbuffers::VOffsetT = 24;
  pub const VT_EXSKILLGROUPID: flatbuffers::VOffsetT = 26;
  pub const VT_EXSKILLCUTINTIMELINEINDEX: flatbuffers::VOffsetT = 28;
  pub const VT_EXSKILLLEVELTIMELINEINDEX: flatbuffers::VOffsetT = 30;
  pub const VT_PUBLICSKILLGROUPID: flatbuffers::VOffsetT = 32;
  pub const VT_PUBLICSKILLTIMELINEINDEX: flatbuffers::VOffsetT = 34;
  pub const VT_PASSIVESKILLGROUPID: flatbuffers::VOffsetT = 36;
  pub const VT_LEADERSKILLGROUPID: flatbuffers::VOffsetT = 38;
  pub const VT_EXTRAPASSIVESKILLGROUPID: flatbuffers::VOffsetT = 40;
  pub const VT_HIDDENPASSIVESKILLGROUPID: flatbuffers::VOffsetT = 42;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterSkillListExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterSkillListExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterSkillListExcel<'bldr>> {
    let mut builder = CharacterSkillListExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterSkillList");
      let x = args.TSAInteractionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TSAInteractionId(x);
      let x = args.CharacterSkillListGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterSkillListGroupId(x);
      if let Some(x) = args.HiddenPassiveSkillGroupId {
        builder.add_HiddenPassiveSkillGroupId(x);
      }
      if let Some(x) = args.ExtraPassiveSkillGroupId {
        builder.add_ExtraPassiveSkillGroupId(x);
      }
      if let Some(x) = args.LeaderSkillGroupId {
        builder.add_LeaderSkillGroupId(x);
      }
      if let Some(x) = args.PassiveSkillGroupId {
        builder.add_PassiveSkillGroupId(x);
      }
      if let Some(x) = args.PublicSkillTimeLineIndex {
        builder.add_PublicSkillTimeLineIndex(x);
      }
      if let Some(x) = args.PublicSkillGroupId {
        builder.add_PublicSkillGroupId(x);
      }
      if let Some(x) = args.ExSkillLevelTimeLineIndex {
        builder.add_ExSkillLevelTimeLineIndex(x);
      }
      if let Some(x) = args.ExSkillCutInTimeLineIndex {
        builder.add_ExSkillCutInTimeLineIndex(x);
      }
      if let Some(x) = args.ExSkillGroupId {
        builder.add_ExSkillGroupId(x);
      }
      let x = args.SelectExSkillActionSkillSlot;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SelectExSkillActionSkillSlot(x);
      if let Some(x) = args.NormalSkillTimeLineIndex {
        builder.add_NormalSkillTimeLineIndex(x);
      }
      if let Some(x) = args.NormalSkillGroupId {
        builder.add_NormalSkillGroupId(x);
      }
      let x = args.FormIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FormIndex(x);
      let x = args.MinimumTierCharacterGear;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MinimumTierCharacterGear(x);
      let x = args.MinimumGradeCharacterWeapon;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MinimumGradeCharacterWeapon(x);
      builder.add_UseRandomExSkillTimeline(args.UseRandomExSkillTimeline);
      builder.add_IsMoveLeftRight(args.IsMoveLeftRight);
      builder.add_IsRootMotion(args.IsRootMotion);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterSkillListExcelT {
    let key = table_encryption_service::create_key(b"CharacterSkillList");
      let CharacterSkillListGroupId = self.CharacterSkillListGroupId();
      let MinimumGradeCharacterWeapon = self.MinimumGradeCharacterWeapon();
      let MinimumTierCharacterGear = self.MinimumTierCharacterGear();
      let FormIndex = self.FormIndex();
      let IsRootMotion = self.IsRootMotion();
      let IsMoveLeftRight = self.IsMoveLeftRight();
      let UseRandomExSkillTimeline = self.UseRandomExSkillTimeline();
      let TSAInteractionId = self.TSAInteractionId();
    let NormalSkillGroupId = self.NormalSkillGroupId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let NormalSkillTimeLineIndex = self.NormalSkillTimeLineIndex().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
      let SelectExSkillActionSkillSlot = self.SelectExSkillActionSkillSlot();
    let ExSkillGroupId = self.ExSkillGroupId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let ExSkillCutInTimeLineIndex = self.ExSkillCutInTimeLineIndex().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let ExSkillLevelTimeLineIndex = self.ExSkillLevelTimeLineIndex().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let PublicSkillGroupId = self.PublicSkillGroupId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let PublicSkillTimeLineIndex = self.PublicSkillTimeLineIndex().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let PassiveSkillGroupId = self.PassiveSkillGroupId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let LeaderSkillGroupId = self.LeaderSkillGroupId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let ExtraPassiveSkillGroupId = self.ExtraPassiveSkillGroupId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let HiddenPassiveSkillGroupId = self.HiddenPassiveSkillGroupId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    CharacterSkillListExcelT {
      CharacterSkillListGroupId,
      MinimumGradeCharacterWeapon,
      MinimumTierCharacterGear,
      FormIndex,
      IsRootMotion,
      IsMoveLeftRight,
      UseRandomExSkillTimeline,
      TSAInteractionId,
      NormalSkillGroupId,
      NormalSkillTimeLineIndex,
      SelectExSkillActionSkillSlot,
      ExSkillGroupId,
      ExSkillCutInTimeLineIndex,
      ExSkillLevelTimeLineIndex,
      PublicSkillGroupId,
      PublicSkillTimeLineIndex,
      PassiveSkillGroupId,
      LeaderSkillGroupId,
      ExtraPassiveSkillGroupId,
      HiddenPassiveSkillGroupId,
    }
  }

  #[inline]
  pub fn CharacterSkillListGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterSkillListExcel::VT_CHARACTERSKILLLISTGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MinimumGradeCharacterWeapon(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterSkillListExcel::VT_MINIMUMGRADECHARACTERWEAPON, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MinimumTierCharacterGear(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterSkillListExcel::VT_MINIMUMTIERCHARACTERGEAR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FormIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterSkillListExcel::VT_FORMINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsRootMotion(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterSkillListExcel::VT_ISROOTMOTION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsMoveLeftRight(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterSkillListExcel::VT_ISMOVELEFTRIGHT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn UseRandomExSkillTimeline(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterSkillListExcel::VT_USERANDOMEXSKILLTIMELINE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn TSAInteractionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterSkillListExcel::VT_TSAINTERACTIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NormalSkillGroupId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_NORMALSKILLGROUPID, None)}
  }
  #[inline]
  pub fn NormalSkillTimeLineIndex(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CharacterSkillListExcel::VT_NORMALSKILLTIMELINEINDEX, None)}
  }
  #[inline]
  pub fn SelectExSkillActionSkillSlot(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterSkillListExcel::VT_SELECTEXSKILLACTIONSKILLSLOT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExSkillGroupId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_EXSKILLGROUPID, None)}
  }
  #[inline]
  pub fn ExSkillCutInTimeLineIndex(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_EXSKILLCUTINTIMELINEINDEX, None)}
  }
  #[inline]
  pub fn ExSkillLevelTimeLineIndex(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_EXSKILLLEVELTIMELINEINDEX, None)}
  }
  #[inline]
  pub fn PublicSkillGroupId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_PUBLICSKILLGROUPID, None)}
  }
  #[inline]
  pub fn PublicSkillTimeLineIndex(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CharacterSkillListExcel::VT_PUBLICSKILLTIMELINEINDEX, None)}
  }
  #[inline]
  pub fn PassiveSkillGroupId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_PASSIVESKILLGROUPID, None)}
  }
  #[inline]
  pub fn LeaderSkillGroupId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_LEADERSKILLGROUPID, None)}
  }
  #[inline]
  pub fn ExtraPassiveSkillGroupId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_EXTRAPASSIVESKILLGROUPID, None)}
  }
  #[inline]
  pub fn HiddenPassiveSkillGroupId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterSkillListExcel::VT_HIDDENPASSIVESKILLGROUPID, None)}
  }
}

impl flatbuffers::Verifiable for CharacterSkillListExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterSkillListGroupId", Self::VT_CHARACTERSKILLLISTGROUPID, false)?
     .visit_field::<i32>("MinimumGradeCharacterWeapon", Self::VT_MINIMUMGRADECHARACTERWEAPON, false)?
     .visit_field::<i32>("MinimumTierCharacterGear", Self::VT_MINIMUMTIERCHARACTERGEAR, false)?
     .visit_field::<i32>("FormIndex", Self::VT_FORMINDEX, false)?
     .visit_field::<bool>("IsRootMotion", Self::VT_ISROOTMOTION, false)?
     .visit_field::<bool>("IsMoveLeftRight", Self::VT_ISMOVELEFTRIGHT, false)?
     .visit_field::<bool>("UseRandomExSkillTimeline", Self::VT_USERANDOMEXSKILLTIMELINE, false)?
     .visit_field::<i64>("TSAInteractionId", Self::VT_TSAINTERACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("NormalSkillGroupId", Self::VT_NORMALSKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("NormalSkillTimeLineIndex", Self::VT_NORMALSKILLTIMELINEINDEX, false)?
     .visit_field::<i32>("SelectExSkillActionSkillSlot", Self::VT_SELECTEXSKILLACTIONSKILLSLOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ExSkillGroupId", Self::VT_EXSKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ExSkillCutInTimeLineIndex", Self::VT_EXSKILLCUTINTIMELINEINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ExSkillLevelTimeLineIndex", Self::VT_EXSKILLLEVELTIMELINEINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("PublicSkillGroupId", Self::VT_PUBLICSKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("PublicSkillTimeLineIndex", Self::VT_PUBLICSKILLTIMELINEINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("PassiveSkillGroupId", Self::VT_PASSIVESKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("LeaderSkillGroupId", Self::VT_LEADERSKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ExtraPassiveSkillGroupId", Self::VT_EXTRAPASSIVESKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("HiddenPassiveSkillGroupId", Self::VT_HIDDENPASSIVESKILLGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterSkillListExcelArgs<'a> {
    pub CharacterSkillListGroupId: i64,
    pub MinimumGradeCharacterWeapon: i32,
    pub MinimumTierCharacterGear: i32,
    pub FormIndex: i32,
    pub IsRootMotion: bool,
    pub IsMoveLeftRight: bool,
    pub UseRandomExSkillTimeline: bool,
    pub TSAInteractionId: i64,
    pub NormalSkillGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub NormalSkillTimeLineIndex: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub SelectExSkillActionSkillSlot: i32,
    pub ExSkillGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ExSkillCutInTimeLineIndex: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ExSkillLevelTimeLineIndex: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub PublicSkillGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub PublicSkillTimeLineIndex: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub PassiveSkillGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub LeaderSkillGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ExtraPassiveSkillGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub HiddenPassiveSkillGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for CharacterSkillListExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterSkillListExcelArgs {
      CharacterSkillListGroupId: 0,
      MinimumGradeCharacterWeapon: 0,
      MinimumTierCharacterGear: 0,
      FormIndex: 0,
      IsRootMotion: false,
      IsMoveLeftRight: false,
      UseRandomExSkillTimeline: false,
      TSAInteractionId: 0,
      NormalSkillGroupId: None,
      NormalSkillTimeLineIndex: None,
      SelectExSkillActionSkillSlot: 0,
      ExSkillGroupId: None,
      ExSkillCutInTimeLineIndex: None,
      ExSkillLevelTimeLineIndex: None,
      PublicSkillGroupId: None,
      PublicSkillTimeLineIndex: None,
      PassiveSkillGroupId: None,
      LeaderSkillGroupId: None,
      ExtraPassiveSkillGroupId: None,
      HiddenPassiveSkillGroupId: None,
    }
  }
}

impl Serialize for CharacterSkillListExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterSkillListExcel", 20)?;
      s.serialize_field("CharacterSkillListGroupId", &self.CharacterSkillListGroupId())?;
      s.serialize_field("MinimumGradeCharacterWeapon", &self.MinimumGradeCharacterWeapon())?;
      s.serialize_field("MinimumTierCharacterGear", &self.MinimumTierCharacterGear())?;
      s.serialize_field("FormIndex", &self.FormIndex())?;
      s.serialize_field("IsRootMotion", &self.IsRootMotion())?;
      s.serialize_field("IsMoveLeftRight", &self.IsMoveLeftRight())?;
      s.serialize_field("UseRandomExSkillTimeline", &self.UseRandomExSkillTimeline())?;
      s.serialize_field("TSAInteractionId", &self.TSAInteractionId())?;
      if let Some(f) = self.NormalSkillGroupId() {
        s.serialize_field("NormalSkillGroupId", &f)?;
      } else {
        s.skip_field("NormalSkillGroupId")?;
      }
      if let Some(f) = self.NormalSkillTimeLineIndex() {
        s.serialize_field("NormalSkillTimeLineIndex", &f)?;
      } else {
        s.skip_field("NormalSkillTimeLineIndex")?;
      }
      s.serialize_field("SelectExSkillActionSkillSlot", &self.SelectExSkillActionSkillSlot())?;
      if let Some(f) = self.ExSkillGroupId() {
        s.serialize_field("ExSkillGroupId", &f)?;
      } else {
        s.skip_field("ExSkillGroupId")?;
      }
      if let Some(f) = self.ExSkillCutInTimeLineIndex() {
        s.serialize_field("ExSkillCutInTimeLineIndex", &f)?;
      } else {
        s.skip_field("ExSkillCutInTimeLineIndex")?;
      }
      if let Some(f) = self.ExSkillLevelTimeLineIndex() {
        s.serialize_field("ExSkillLevelTimeLineIndex", &f)?;
      } else {
        s.skip_field("ExSkillLevelTimeLineIndex")?;
      }
      if let Some(f) = self.PublicSkillGroupId() {
        s.serialize_field("PublicSkillGroupId", &f)?;
      } else {
        s.skip_field("PublicSkillGroupId")?;
      }
      if let Some(f) = self.PublicSkillTimeLineIndex() {
        s.serialize_field("PublicSkillTimeLineIndex", &f)?;
      } else {
        s.skip_field("PublicSkillTimeLineIndex")?;
      }
      if let Some(f) = self.PassiveSkillGroupId() {
        s.serialize_field("PassiveSkillGroupId", &f)?;
      } else {
        s.skip_field("PassiveSkillGroupId")?;
      }
      if let Some(f) = self.LeaderSkillGroupId() {
        s.serialize_field("LeaderSkillGroupId", &f)?;
      } else {
        s.skip_field("LeaderSkillGroupId")?;
      }
      if let Some(f) = self.ExtraPassiveSkillGroupId() {
        s.serialize_field("ExtraPassiveSkillGroupId", &f)?;
      } else {
        s.skip_field("ExtraPassiveSkillGroupId")?;
      }
      if let Some(f) = self.HiddenPassiveSkillGroupId() {
        s.serialize_field("HiddenPassiveSkillGroupId", &f)?;
      } else {
        s.skip_field("HiddenPassiveSkillGroupId")?;
      }
    s.end()
  }
}

pub struct CharacterSkillListExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterSkillListExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterSkillListGroupId(&mut self, CharacterSkillListGroupId: i64) {
    self.fbb_.push_slot::<i64>(CharacterSkillListExcel::VT_CHARACTERSKILLLISTGROUPID, CharacterSkillListGroupId, 0);
  }
  #[inline]
  pub fn add_MinimumGradeCharacterWeapon(&mut self, MinimumGradeCharacterWeapon: i32) {
    self.fbb_.push_slot::<i32>(CharacterSkillListExcel::VT_MINIMUMGRADECHARACTERWEAPON, MinimumGradeCharacterWeapon, 0);
  }
  #[inline]
  pub fn add_MinimumTierCharacterGear(&mut self, MinimumTierCharacterGear: i32) {
    self.fbb_.push_slot::<i32>(CharacterSkillListExcel::VT_MINIMUMTIERCHARACTERGEAR, MinimumTierCharacterGear, 0);
  }
  #[inline]
  pub fn add_FormIndex(&mut self, FormIndex: i32) {
    self.fbb_.push_slot::<i32>(CharacterSkillListExcel::VT_FORMINDEX, FormIndex, 0);
  }
  #[inline]
  pub fn add_IsRootMotion(&mut self, IsRootMotion: bool) {
    self.fbb_.push_slot::<bool>(CharacterSkillListExcel::VT_ISROOTMOTION, IsRootMotion, false);
  }
  #[inline]
  pub fn add_IsMoveLeftRight(&mut self, IsMoveLeftRight: bool) {
    self.fbb_.push_slot::<bool>(CharacterSkillListExcel::VT_ISMOVELEFTRIGHT, IsMoveLeftRight, false);
  }
  #[inline]
  pub fn add_UseRandomExSkillTimeline(&mut self, UseRandomExSkillTimeline: bool) {
    self.fbb_.push_slot::<bool>(CharacterSkillListExcel::VT_USERANDOMEXSKILLTIMELINE, UseRandomExSkillTimeline, false);
  }
  #[inline]
  pub fn add_TSAInteractionId(&mut self, TSAInteractionId: i64) {
    self.fbb_.push_slot::<i64>(CharacterSkillListExcel::VT_TSAINTERACTIONID, TSAInteractionId, 0);
  }
  #[inline]
  pub fn add_NormalSkillGroupId(&mut self, NormalSkillGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_NORMALSKILLGROUPID, NormalSkillGroupId);
  }
  #[inline]
  pub fn add_NormalSkillTimeLineIndex(&mut self, NormalSkillTimeLineIndex: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_NORMALSKILLTIMELINEINDEX, NormalSkillTimeLineIndex);
  }
  #[inline]
  pub fn add_SelectExSkillActionSkillSlot(&mut self, SelectExSkillActionSkillSlot: i32) {
    self.fbb_.push_slot::<i32>(CharacterSkillListExcel::VT_SELECTEXSKILLACTIONSKILLSLOT, SelectExSkillActionSkillSlot, 0);
  }
  #[inline]
  pub fn add_ExSkillGroupId(&mut self, ExSkillGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_EXSKILLGROUPID, ExSkillGroupId);
  }
  #[inline]
  pub fn add_ExSkillCutInTimeLineIndex(&mut self, ExSkillCutInTimeLineIndex: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_EXSKILLCUTINTIMELINEINDEX, ExSkillCutInTimeLineIndex);
  }
  #[inline]
  pub fn add_ExSkillLevelTimeLineIndex(&mut self, ExSkillLevelTimeLineIndex: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_EXSKILLLEVELTIMELINEINDEX, ExSkillLevelTimeLineIndex);
  }
  #[inline]
  pub fn add_PublicSkillGroupId(&mut self, PublicSkillGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_PUBLICSKILLGROUPID, PublicSkillGroupId);
  }
  #[inline]
  pub fn add_PublicSkillTimeLineIndex(&mut self, PublicSkillTimeLineIndex: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_PUBLICSKILLTIMELINEINDEX, PublicSkillTimeLineIndex);
  }
  #[inline]
  pub fn add_PassiveSkillGroupId(&mut self, PassiveSkillGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_PASSIVESKILLGROUPID, PassiveSkillGroupId);
  }
  #[inline]
  pub fn add_LeaderSkillGroupId(&mut self, LeaderSkillGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_LEADERSKILLGROUPID, LeaderSkillGroupId);
  }
  #[inline]
  pub fn add_ExtraPassiveSkillGroupId(&mut self, ExtraPassiveSkillGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_EXTRAPASSIVESKILLGROUPID, ExtraPassiveSkillGroupId);
  }
  #[inline]
  pub fn add_HiddenPassiveSkillGroupId(&mut self, HiddenPassiveSkillGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterSkillListExcel::VT_HIDDENPASSIVESKILLGROUPID, HiddenPassiveSkillGroupId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterSkillListExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterSkillListExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterSkillListExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterSkillListExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterSkillListExcel");
      ds.field("CharacterSkillListGroupId", &self.CharacterSkillListGroupId());
      ds.field("MinimumGradeCharacterWeapon", &self.MinimumGradeCharacterWeapon());
      ds.field("MinimumTierCharacterGear", &self.MinimumTierCharacterGear());
      ds.field("FormIndex", &self.FormIndex());
      ds.field("IsRootMotion", &self.IsRootMotion());
      ds.field("IsMoveLeftRight", &self.IsMoveLeftRight());
      ds.field("UseRandomExSkillTimeline", &self.UseRandomExSkillTimeline());
      ds.field("TSAInteractionId", &self.TSAInteractionId());
      ds.field("NormalSkillGroupId", &self.NormalSkillGroupId());
      ds.field("NormalSkillTimeLineIndex", &self.NormalSkillTimeLineIndex());
      ds.field("SelectExSkillActionSkillSlot", &self.SelectExSkillActionSkillSlot());
      ds.field("ExSkillGroupId", &self.ExSkillGroupId());
      ds.field("ExSkillCutInTimeLineIndex", &self.ExSkillCutInTimeLineIndex());
      ds.field("ExSkillLevelTimeLineIndex", &self.ExSkillLevelTimeLineIndex());
      ds.field("PublicSkillGroupId", &self.PublicSkillGroupId());
      ds.field("PublicSkillTimeLineIndex", &self.PublicSkillTimeLineIndex());
      ds.field("PassiveSkillGroupId", &self.PassiveSkillGroupId());
      ds.field("LeaderSkillGroupId", &self.LeaderSkillGroupId());
      ds.field("ExtraPassiveSkillGroupId", &self.ExtraPassiveSkillGroupId());
      ds.field("HiddenPassiveSkillGroupId", &self.HiddenPassiveSkillGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterSkillListExcelT {
  pub CharacterSkillListGroupId: i64,
  pub MinimumGradeCharacterWeapon: i32,
  pub MinimumTierCharacterGear: i32,
  pub FormIndex: i32,
  pub IsRootMotion: bool,
  pub IsMoveLeftRight: bool,
  pub UseRandomExSkillTimeline: bool,
  pub TSAInteractionId: i64,
  pub NormalSkillGroupId: Option<Vec<String>>,
  pub NormalSkillTimeLineIndex: Option<Vec<i32>>,
  pub SelectExSkillActionSkillSlot: i32,
  pub ExSkillGroupId: Option<Vec<String>>,
  pub ExSkillCutInTimeLineIndex: Option<Vec<String>>,
  pub ExSkillLevelTimeLineIndex: Option<Vec<String>>,
  pub PublicSkillGroupId: Option<Vec<String>>,
  pub PublicSkillTimeLineIndex: Option<Vec<i32>>,
  pub PassiveSkillGroupId: Option<Vec<String>>,
  pub LeaderSkillGroupId: Option<Vec<String>>,
  pub ExtraPassiveSkillGroupId: Option<Vec<String>>,
  pub HiddenPassiveSkillGroupId: Option<Vec<String>>,
}
impl Default for CharacterSkillListExcelT {
  fn default() -> Self {
    Self {
      CharacterSkillListGroupId: 0,
      MinimumGradeCharacterWeapon: 0,
      MinimumTierCharacterGear: 0,
      FormIndex: 0,
      IsRootMotion: false,
      IsMoveLeftRight: false,
      UseRandomExSkillTimeline: false,
      TSAInteractionId: 0,
      NormalSkillGroupId: None,
      NormalSkillTimeLineIndex: None,
      SelectExSkillActionSkillSlot: 0,
      ExSkillGroupId: None,
      ExSkillCutInTimeLineIndex: None,
      ExSkillLevelTimeLineIndex: None,
      PublicSkillGroupId: None,
      PublicSkillTimeLineIndex: None,
      PassiveSkillGroupId: None,
      LeaderSkillGroupId: None,
      ExtraPassiveSkillGroupId: None,
      HiddenPassiveSkillGroupId: None,
    }
  }
}
impl CharacterSkillListExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterSkillListExcel<'b>> {
    let CharacterSkillListGroupId = self.CharacterSkillListGroupId;
    let MinimumGradeCharacterWeapon = self.MinimumGradeCharacterWeapon;
    let MinimumTierCharacterGear = self.MinimumTierCharacterGear;
    let FormIndex = self.FormIndex;
    let IsRootMotion = self.IsRootMotion;
    let IsMoveLeftRight = self.IsMoveLeftRight;
    let UseRandomExSkillTimeline = self.UseRandomExSkillTimeline;
    let TSAInteractionId = self.TSAInteractionId;
    let NormalSkillGroupId = self.NormalSkillGroupId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let NormalSkillTimeLineIndex = self.NormalSkillTimeLineIndex.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SelectExSkillActionSkillSlot = self.SelectExSkillActionSkillSlot;
    let ExSkillGroupId = self.ExSkillGroupId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ExSkillCutInTimeLineIndex = self.ExSkillCutInTimeLineIndex.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ExSkillLevelTimeLineIndex = self.ExSkillLevelTimeLineIndex.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let PublicSkillGroupId = self.PublicSkillGroupId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let PublicSkillTimeLineIndex = self.PublicSkillTimeLineIndex.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let PassiveSkillGroupId = self.PassiveSkillGroupId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let LeaderSkillGroupId = self.LeaderSkillGroupId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ExtraPassiveSkillGroupId = self.ExtraPassiveSkillGroupId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let HiddenPassiveSkillGroupId = self.HiddenPassiveSkillGroupId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    CharacterSkillListExcel::create(_fbb, &CharacterSkillListExcelArgs{
      CharacterSkillListGroupId,
      MinimumGradeCharacterWeapon,
      MinimumTierCharacterGear,
      FormIndex,
      IsRootMotion,
      IsMoveLeftRight,
      UseRandomExSkillTimeline,
      TSAInteractionId,
      NormalSkillGroupId,
      NormalSkillTimeLineIndex,
      SelectExSkillActionSkillSlot,
      ExSkillGroupId,
      ExSkillCutInTimeLineIndex,
      ExSkillLevelTimeLineIndex,
      PublicSkillGroupId,
      PublicSkillTimeLineIndex,
      PassiveSkillGroupId,
      LeaderSkillGroupId,
      ExtraPassiveSkillGroupId,
      HiddenPassiveSkillGroupId,
    })
  }
}
