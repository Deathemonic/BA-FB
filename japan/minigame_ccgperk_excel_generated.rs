// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGPerkExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGPerkExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGPerkExcel<'a> {
  type Inner = MinigameCCGPerkExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGPerkExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CCGID: flatbuffers::VOffsetT = 6;
  pub const VT_COSTPARCELAMOUNT: flatbuffers::VOffsetT = 8;
  pub const VT_REROLLPOINT: flatbuffers::VOffsetT = 10;
  pub const VT_DISCARDPOINT: flatbuffers::VOffsetT = 12;
  pub const VT_ENVIRONMENTLOGICEFFECTID: flatbuffers::VOffsetT = 14;
  pub const VT_REQUIREDPERKID: flatbuffers::VOffsetT = 16;
  pub const VT_SHOPORDER: flatbuffers::VOffsetT = 18;
  pub const VT_SHOPICON: flatbuffers::VOffsetT = 20;
  pub const VT_SHOPLOCALIZETITLE: flatbuffers::VOffsetT = 22;
  pub const VT_SHOPLOCALIZEDESC: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGPerkExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGPerkExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGPerkExcel<'bldr>> {
    let mut builder = MinigameCCGPerkExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGPerk");
      let x = args.CCGId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CCGId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.ShopLocalizeDesc;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_ShopLocalizeDesc(x);
      let x = args.ShopLocalizeTitle;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_ShopLocalizeTitle(x);
      if let Some(x) = args.ShopIcon {
        builder.add_ShopIcon(x);
      }
      let x = args.ShopOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ShopOrder(x);
      if let Some(x) = args.RequiredPerkId {
        builder.add_RequiredPerkId(x);
      }
      if let Some(x) = args.EnvironmentLogicEffectId {
        builder.add_EnvironmentLogicEffectId(x);
      }
      let x = args.DiscardPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DiscardPoint(x);
      let x = args.RerollPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RerollPoint(x);
      let x = args.CostParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CostParcelAmount(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGPerkExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGPerk");
      let Id = self.Id();
      let CCGId = self.CCGId();
      let CostParcelAmount = self.CostParcelAmount();
      let RerollPoint = self.RerollPoint();
      let DiscardPoint = self.DiscardPoint();
    let EnvironmentLogicEffectId = self.EnvironmentLogicEffectId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RequiredPerkId = self.RequiredPerkId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let ShopOrder = self.ShopOrder();
    let ShopIcon = self.ShopIcon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ShopLocalizeTitle = self.ShopLocalizeTitle();
      let ShopLocalizeDesc = self.ShopLocalizeDesc();
    MinigameCCGPerkExcelT {
      Id,
      CCGId,
      CostParcelAmount,
      RerollPoint,
      DiscardPoint,
      EnvironmentLogicEffectId,
      RequiredPerkId,
      ShopOrder,
      ShopIcon,
      ShopLocalizeTitle,
      ShopLocalizeDesc,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGPerkExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CCGId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGPerkExcel::VT_CCGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostParcelAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGPerkExcel::VT_COSTPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RerollPoint(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGPerkExcel::VT_REROLLPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiscardPoint(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGPerkExcel::VT_DISCARDPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnvironmentLogicEffectId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameCCGPerkExcel::VT_ENVIRONMENTLOGICEFFECTID, None)}
  }
  #[inline]
  pub fn RequiredPerkId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameCCGPerkExcel::VT_REQUIREDPERKID, None)}
  }
  #[inline]
  pub fn ShopOrder(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGPerkExcel::VT_SHOPORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopIcon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGPerkExcel::VT_SHOPICON, None)}
  }
  #[inline]
  pub fn ShopLocalizeTitle(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGPerkExcel::VT_SHOPLOCALIZETITLE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopLocalizeDesc(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGPerkExcel::VT_SHOPLOCALIZEDESC, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGPerkExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CCGId", Self::VT_CCGID, false)?
     .visit_field::<i32>("CostParcelAmount", Self::VT_COSTPARCELAMOUNT, false)?
     .visit_field::<i32>("RerollPoint", Self::VT_REROLLPOINT, false)?
     .visit_field::<i32>("DiscardPoint", Self::VT_DISCARDPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("EnvironmentLogicEffectId", Self::VT_ENVIRONMENTLOGICEFFECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RequiredPerkId", Self::VT_REQUIREDPERKID, false)?
     .visit_field::<i32>("ShopOrder", Self::VT_SHOPORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShopIcon", Self::VT_SHOPICON, false)?
     .visit_field::<u32>("ShopLocalizeTitle", Self::VT_SHOPLOCALIZETITLE, false)?
     .visit_field::<u32>("ShopLocalizeDesc", Self::VT_SHOPLOCALIZEDESC, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGPerkExcelArgs<'a> {
    pub Id: i64,
    pub CCGId: i64,
    pub CostParcelAmount: i32,
    pub RerollPoint: i32,
    pub DiscardPoint: i32,
    pub EnvironmentLogicEffectId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RequiredPerkId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ShopOrder: i32,
    pub ShopIcon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShopLocalizeTitle: u32,
    pub ShopLocalizeDesc: u32,
}
impl<'a> Default for MinigameCCGPerkExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGPerkExcelArgs {
      Id: 0,
      CCGId: 0,
      CostParcelAmount: 0,
      RerollPoint: 0,
      DiscardPoint: 0,
      EnvironmentLogicEffectId: None,
      RequiredPerkId: None,
      ShopOrder: 0,
      ShopIcon: None,
      ShopLocalizeTitle: 0,
      ShopLocalizeDesc: 0,
    }
  }
}

impl Serialize for MinigameCCGPerkExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGPerkExcel", 11)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CCGId", &self.CCGId())?;
      s.serialize_field("CostParcelAmount", &self.CostParcelAmount())?;
      s.serialize_field("RerollPoint", &self.RerollPoint())?;
      s.serialize_field("DiscardPoint", &self.DiscardPoint())?;
      if let Some(f) = self.EnvironmentLogicEffectId() {
        s.serialize_field("EnvironmentLogicEffectId", &f)?;
      } else {
        s.skip_field("EnvironmentLogicEffectId")?;
      }
      if let Some(f) = self.RequiredPerkId() {
        s.serialize_field("RequiredPerkId", &f)?;
      } else {
        s.skip_field("RequiredPerkId")?;
      }
      s.serialize_field("ShopOrder", &self.ShopOrder())?;
      if let Some(f) = self.ShopIcon() {
        s.serialize_field("ShopIcon", &f)?;
      } else {
        s.skip_field("ShopIcon")?;
      }
      s.serialize_field("ShopLocalizeTitle", &self.ShopLocalizeTitle())?;
      s.serialize_field("ShopLocalizeDesc", &self.ShopLocalizeDesc())?;
    s.end()
  }
}

pub struct MinigameCCGPerkExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGPerkExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGPerkExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CCGId(&mut self, CCGId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGPerkExcel::VT_CCGID, CCGId, 0);
  }
  #[inline]
  pub fn add_CostParcelAmount(&mut self, CostParcelAmount: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGPerkExcel::VT_COSTPARCELAMOUNT, CostParcelAmount, 0);
  }
  #[inline]
  pub fn add_RerollPoint(&mut self, RerollPoint: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGPerkExcel::VT_REROLLPOINT, RerollPoint, 0);
  }
  #[inline]
  pub fn add_DiscardPoint(&mut self, DiscardPoint: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGPerkExcel::VT_DISCARDPOINT, DiscardPoint, 0);
  }
  #[inline]
  pub fn add_EnvironmentLogicEffectId(&mut self, EnvironmentLogicEffectId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGPerkExcel::VT_ENVIRONMENTLOGICEFFECTID, EnvironmentLogicEffectId);
  }
  #[inline]
  pub fn add_RequiredPerkId(&mut self, RequiredPerkId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGPerkExcel::VT_REQUIREDPERKID, RequiredPerkId);
  }
  #[inline]
  pub fn add_ShopOrder(&mut self, ShopOrder: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGPerkExcel::VT_SHOPORDER, ShopOrder, 0);
  }
  #[inline]
  pub fn add_ShopIcon(&mut self, ShopIcon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGPerkExcel::VT_SHOPICON, ShopIcon);
  }
  #[inline]
  pub fn add_ShopLocalizeTitle(&mut self, ShopLocalizeTitle: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGPerkExcel::VT_SHOPLOCALIZETITLE, ShopLocalizeTitle, 0);
  }
  #[inline]
  pub fn add_ShopLocalizeDesc(&mut self, ShopLocalizeDesc: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGPerkExcel::VT_SHOPLOCALIZEDESC, ShopLocalizeDesc, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGPerkExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGPerkExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGPerkExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGPerkExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGPerkExcel");
      ds.field("Id", &self.Id());
      ds.field("CCGId", &self.CCGId());
      ds.field("CostParcelAmount", &self.CostParcelAmount());
      ds.field("RerollPoint", &self.RerollPoint());
      ds.field("DiscardPoint", &self.DiscardPoint());
      ds.field("EnvironmentLogicEffectId", &self.EnvironmentLogicEffectId());
      ds.field("RequiredPerkId", &self.RequiredPerkId());
      ds.field("ShopOrder", &self.ShopOrder());
      ds.field("ShopIcon", &self.ShopIcon());
      ds.field("ShopLocalizeTitle", &self.ShopLocalizeTitle());
      ds.field("ShopLocalizeDesc", &self.ShopLocalizeDesc());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGPerkExcelT {
  pub Id: i64,
  pub CCGId: i64,
  pub CostParcelAmount: i32,
  pub RerollPoint: i32,
  pub DiscardPoint: i32,
  pub EnvironmentLogicEffectId: Option<Vec<i64>>,
  pub RequiredPerkId: Option<Vec<i64>>,
  pub ShopOrder: i32,
  pub ShopIcon: Option<String>,
  pub ShopLocalizeTitle: u32,
  pub ShopLocalizeDesc: u32,
}
impl Default for MinigameCCGPerkExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CCGId: 0,
      CostParcelAmount: 0,
      RerollPoint: 0,
      DiscardPoint: 0,
      EnvironmentLogicEffectId: None,
      RequiredPerkId: None,
      ShopOrder: 0,
      ShopIcon: None,
      ShopLocalizeTitle: 0,
      ShopLocalizeDesc: 0,
    }
  }
}
impl MinigameCCGPerkExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGPerkExcel<'b>> {
    let Id = self.Id;
    let CCGId = self.CCGId;
    let CostParcelAmount = self.CostParcelAmount;
    let RerollPoint = self.RerollPoint;
    let DiscardPoint = self.DiscardPoint;
    let EnvironmentLogicEffectId = self.EnvironmentLogicEffectId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RequiredPerkId = self.RequiredPerkId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ShopOrder = self.ShopOrder;
    let ShopIcon = self.ShopIcon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShopLocalizeTitle = self.ShopLocalizeTitle;
    let ShopLocalizeDesc = self.ShopLocalizeDesc;
    MinigameCCGPerkExcel::create(_fbb, &MinigameCCGPerkExcelArgs{
      Id,
      CCGId,
      CostParcelAmount,
      RerollPoint,
      DiscardPoint,
      EnvironmentLogicEffectId,
      RequiredPerkId,
      ShopOrder,
      ShopIcon,
      ShopLocalizeTitle,
      ShopLocalizeDesc,
    })
  }
}
