// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CampaignStrategyObjectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CampaignStrategyObjectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CampaignStrategyObjectExcel<'a> {
  type Inner = CampaignStrategyObjectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CampaignStrategyObjectExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_KEY: flatbuffers::VOffsetT = 6;
  pub const VT_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 10;
  pub const VT_STRATEGYOBJECTTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_STRATEGYREWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_STRATEGYREWARDID: flatbuffers::VOffsetT = 16;
  pub const VT_STRATEGYREWARDNAME: flatbuffers::VOffsetT = 18;
  pub const VT_STRATEGYREWARDAMOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_STRATEGYSIGHTRANGE: flatbuffers::VOffsetT = 22;
  pub const VT_PORTALID: flatbuffers::VOffsetT = 24;
  pub const VT_HEALVALUE: flatbuffers::VOffsetT = 26;
  pub const VT_SWITHID: flatbuffers::VOffsetT = 28;
  pub const VT_BUFFID: flatbuffers::VOffsetT = 30;
  pub const VT_DISPOSABLE: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CampaignStrategyObjectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CampaignStrategyObjectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CampaignStrategyObjectExcel<'bldr>> {
    let mut builder = CampaignStrategyObjectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CampaignStrategyObject");
      let x = args.StrategySightRange;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StrategySightRange(x);
      let x = args.StrategyRewardID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StrategyRewardID(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.BuffId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_BuffId(x);
      let x = args.SwithId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SwithId(x);
      let x = args.HealValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_HealValue(x);
      let x = args.PortalId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PortalId(x);
      let x = args.StrategyRewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StrategyRewardAmount(x);
      if let Some(x) = args.StrategyRewardName {
        builder.add_StrategyRewardName(x);
      }
      let x = args.StrategyRewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StrategyRewardParcelType(x);
      let x = args.StrategyObjectType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StrategyObjectType(x);
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      let x = args.Key;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Key(x);
      builder.add_Disposable(args.Disposable);
    builder.finish()
  }

  pub fn unpack(&self) -> CampaignStrategyObjectExcelT {
    let key = table_encryption_service::create_key(b"CampaignStrategyObject");
      let Id = self.Id();
      let Key = self.Key();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StrategyObjectType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StrategyObjectType(), &key)
      } else {
        self.StrategyObjectType()
      };
      let StrategyRewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StrategyRewardParcelType(), &key)
      } else {
        self.StrategyRewardParcelType()
      };
      let StrategyRewardID = self.StrategyRewardID();
    let StrategyRewardName = self.StrategyRewardName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StrategyRewardAmount = self.StrategyRewardAmount();
      let StrategySightRange = self.StrategySightRange();
      let PortalId = self.PortalId();
      let HealValue = self.HealValue();
      let SwithId = self.SwithId();
      let BuffId = self.BuffId();
      let Disposable = self.Disposable();
    CampaignStrategyObjectExcelT {
      Id,
      Key,
      Name,
      PrefabName,
      StrategyObjectType,
      StrategyRewardParcelType,
      StrategyRewardID,
      StrategyRewardName,
      StrategyRewardAmount,
      StrategySightRange,
      PortalId,
      HealValue,
      SwithId,
      BuffId,
      Disposable,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStrategyObjectExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Key(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CampaignStrategyObjectExcel::VT_KEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStrategyObjectExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStrategyObjectExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn StrategyObjectType(&self) -> StrategyObjectType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StrategyObjectType>(CampaignStrategyObjectExcel::VT_STRATEGYOBJECTTYPE, Some(StrategyObjectType::None)).unwrap()}
  }
  #[inline]
  pub fn StrategyRewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StrategyRewardID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrategyRewardName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDNAME, None)}
  }
  #[inline]
  pub fn StrategyRewardAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrategySightRange(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignStrategyObjectExcel::VT_STRATEGYSIGHTRANGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PortalId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStrategyObjectExcel::VT_PORTALID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealValue(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStrategyObjectExcel::VT_HEALVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SwithId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStrategyObjectExcel::VT_SWITHID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuffId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignStrategyObjectExcel::VT_BUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Disposable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CampaignStrategyObjectExcel::VT_DISPOSABLE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CampaignStrategyObjectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("Key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<StrategyObjectType>("StrategyObjectType", Self::VT_STRATEGYOBJECTTYPE, false)?
     .visit_field::<ParcelType>("StrategyRewardParcelType", Self::VT_STRATEGYREWARDPARCELTYPE, false)?
     .visit_field::<i64>("StrategyRewardID", Self::VT_STRATEGYREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyRewardName", Self::VT_STRATEGYREWARDNAME, false)?
     .visit_field::<i32>("StrategyRewardAmount", Self::VT_STRATEGYREWARDAMOUNT, false)?
     .visit_field::<i64>("StrategySightRange", Self::VT_STRATEGYSIGHTRANGE, false)?
     .visit_field::<i32>("PortalId", Self::VT_PORTALID, false)?
     .visit_field::<i32>("HealValue", Self::VT_HEALVALUE, false)?
     .visit_field::<i32>("SwithId", Self::VT_SWITHID, false)?
     .visit_field::<i32>("BuffId", Self::VT_BUFFID, false)?
     .visit_field::<bool>("Disposable", Self::VT_DISPOSABLE, false)?
     .finish();
    Ok(())
  }
}
pub struct CampaignStrategyObjectExcelArgs<'a> {
    pub Id: i64,
    pub Key: u32,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyObjectType: StrategyObjectType,
    pub StrategyRewardParcelType: ParcelType,
    pub StrategyRewardID: i64,
    pub StrategyRewardName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyRewardAmount: i32,
    pub StrategySightRange: i64,
    pub PortalId: i32,
    pub HealValue: i32,
    pub SwithId: i32,
    pub BuffId: i32,
    pub Disposable: bool,
}
impl<'a> Default for CampaignStrategyObjectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CampaignStrategyObjectExcelArgs {
      Id: 0,
      Key: 0,
      Name: None,
      PrefabName: None,
      StrategyObjectType: StrategyObjectType::None,
      StrategyRewardParcelType: ParcelType::None,
      StrategyRewardID: 0,
      StrategyRewardName: None,
      StrategyRewardAmount: 0,
      StrategySightRange: 0,
      PortalId: 0,
      HealValue: 0,
      SwithId: 0,
      BuffId: 0,
      Disposable: false,
    }
  }
}

impl Serialize for CampaignStrategyObjectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CampaignStrategyObjectExcel", 15)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Key", &self.Key())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      s.serialize_field("StrategyObjectType", &self.StrategyObjectType())?;
      s.serialize_field("StrategyRewardParcelType", &self.StrategyRewardParcelType())?;
      s.serialize_field("StrategyRewardID", &self.StrategyRewardID())?;
      if let Some(f) = self.StrategyRewardName() {
        s.serialize_field("StrategyRewardName", &f)?;
      } else {
        s.skip_field("StrategyRewardName")?;
      }
      s.serialize_field("StrategyRewardAmount", &self.StrategyRewardAmount())?;
      s.serialize_field("StrategySightRange", &self.StrategySightRange())?;
      s.serialize_field("PortalId", &self.PortalId())?;
      s.serialize_field("HealValue", &self.HealValue())?;
      s.serialize_field("SwithId", &self.SwithId())?;
      s.serialize_field("BuffId", &self.BuffId())?;
      s.serialize_field("Disposable", &self.Disposable())?;
    s.end()
  }
}

pub struct CampaignStrategyObjectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CampaignStrategyObjectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CampaignStrategyObjectExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Key(&mut self, Key: u32) {
    self.fbb_.push_slot::<u32>(CampaignStrategyObjectExcel::VT_KEY, Key, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStrategyObjectExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStrategyObjectExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_StrategyObjectType(&mut self, StrategyObjectType: StrategyObjectType) {
    self.fbb_.push_slot::<StrategyObjectType>(CampaignStrategyObjectExcel::VT_STRATEGYOBJECTTYPE, StrategyObjectType, StrategyObjectType::None);
  }
  #[inline]
  pub fn add_StrategyRewardParcelType(&mut self, StrategyRewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDPARCELTYPE, StrategyRewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_StrategyRewardID(&mut self, StrategyRewardID: i64) {
    self.fbb_.push_slot::<i64>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDID, StrategyRewardID, 0);
  }
  #[inline]
  pub fn add_StrategyRewardName(&mut self, StrategyRewardName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDNAME, StrategyRewardName);
  }
  #[inline]
  pub fn add_StrategyRewardAmount(&mut self, StrategyRewardAmount: i32) {
    self.fbb_.push_slot::<i32>(CampaignStrategyObjectExcel::VT_STRATEGYREWARDAMOUNT, StrategyRewardAmount, 0);
  }
  #[inline]
  pub fn add_StrategySightRange(&mut self, StrategySightRange: i64) {
    self.fbb_.push_slot::<i64>(CampaignStrategyObjectExcel::VT_STRATEGYSIGHTRANGE, StrategySightRange, 0);
  }
  #[inline]
  pub fn add_PortalId(&mut self, PortalId: i32) {
    self.fbb_.push_slot::<i32>(CampaignStrategyObjectExcel::VT_PORTALID, PortalId, 0);
  }
  #[inline]
  pub fn add_HealValue(&mut self, HealValue: i32) {
    self.fbb_.push_slot::<i32>(CampaignStrategyObjectExcel::VT_HEALVALUE, HealValue, 0);
  }
  #[inline]
  pub fn add_SwithId(&mut self, SwithId: i32) {
    self.fbb_.push_slot::<i32>(CampaignStrategyObjectExcel::VT_SWITHID, SwithId, 0);
  }
  #[inline]
  pub fn add_BuffId(&mut self, BuffId: i32) {
    self.fbb_.push_slot::<i32>(CampaignStrategyObjectExcel::VT_BUFFID, BuffId, 0);
  }
  #[inline]
  pub fn add_Disposable(&mut self, Disposable: bool) {
    self.fbb_.push_slot::<bool>(CampaignStrategyObjectExcel::VT_DISPOSABLE, Disposable, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CampaignStrategyObjectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CampaignStrategyObjectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CampaignStrategyObjectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CampaignStrategyObjectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CampaignStrategyObjectExcel");
      ds.field("Id", &self.Id());
      ds.field("Key", &self.Key());
      ds.field("Name", &self.Name());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("StrategyObjectType", &self.StrategyObjectType());
      ds.field("StrategyRewardParcelType", &self.StrategyRewardParcelType());
      ds.field("StrategyRewardID", &self.StrategyRewardID());
      ds.field("StrategyRewardName", &self.StrategyRewardName());
      ds.field("StrategyRewardAmount", &self.StrategyRewardAmount());
      ds.field("StrategySightRange", &self.StrategySightRange());
      ds.field("PortalId", &self.PortalId());
      ds.field("HealValue", &self.HealValue());
      ds.field("SwithId", &self.SwithId());
      ds.field("BuffId", &self.BuffId());
      ds.field("Disposable", &self.Disposable());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CampaignStrategyObjectExcelT {
  pub Id: i64,
  pub Key: u32,
  pub Name: Option<String>,
  pub PrefabName: Option<String>,
  pub StrategyObjectType: StrategyObjectType,
  pub StrategyRewardParcelType: ParcelType,
  pub StrategyRewardID: i64,
  pub StrategyRewardName: Option<String>,
  pub StrategyRewardAmount: i32,
  pub StrategySightRange: i64,
  pub PortalId: i32,
  pub HealValue: i32,
  pub SwithId: i32,
  pub BuffId: i32,
  pub Disposable: bool,
}
impl Default for CampaignStrategyObjectExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Key: 0,
      Name: None,
      PrefabName: None,
      StrategyObjectType: StrategyObjectType::None,
      StrategyRewardParcelType: ParcelType::None,
      StrategyRewardID: 0,
      StrategyRewardName: None,
      StrategyRewardAmount: 0,
      StrategySightRange: 0,
      PortalId: 0,
      HealValue: 0,
      SwithId: 0,
      BuffId: 0,
      Disposable: false,
    }
  }
}
impl CampaignStrategyObjectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CampaignStrategyObjectExcel<'b>> {
    let Id = self.Id;
    let Key = self.Key;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyObjectType = self.StrategyObjectType;
    let StrategyRewardParcelType = self.StrategyRewardParcelType;
    let StrategyRewardID = self.StrategyRewardID;
    let StrategyRewardName = self.StrategyRewardName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyRewardAmount = self.StrategyRewardAmount;
    let StrategySightRange = self.StrategySightRange;
    let PortalId = self.PortalId;
    let HealValue = self.HealValue;
    let SwithId = self.SwithId;
    let BuffId = self.BuffId;
    let Disposable = self.Disposable;
    CampaignStrategyObjectExcel::create(_fbb, &CampaignStrategyObjectExcelArgs{
      Id,
      Key,
      Name,
      PrefabName,
      StrategyObjectType,
      StrategyRewardParcelType,
      StrategyRewardID,
      StrategyRewardName,
      StrategyRewardAmount,
      StrategySightRange,
      PortalId,
      HealValue,
      SwithId,
      BuffId,
      Disposable,
    })
  }
}
