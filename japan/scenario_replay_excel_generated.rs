// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioReplayExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioReplayExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioReplayExcel<'a> {
  type Inner = ScenarioReplayExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioReplayExcel<'a> {
  pub const VT_MODEID: flatbuffers::VOffsetT = 4;
  pub const VT_VOLUMEID: flatbuffers::VOffsetT = 6;
  pub const VT_REPLAYTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_CHAPTERID: flatbuffers::VOffsetT = 10;
  pub const VT_EPISODEID: flatbuffers::VOffsetT = 12;
  pub const VT_FRONTSCENARIOGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 16;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 18;
  pub const VT_BACKSCENARIOGROUPID: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioReplayExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioReplayExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioReplayExcel<'bldr>> {
    let mut builder = ScenarioReplayExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioReplay");
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.EpisodeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EpisodeId(x);
      let x = args.ChapterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChapterId(x);
      let x = args.VolumeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_VolumeId(x);
      let x = args.ModeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ModeId(x);
      if let Some(x) = args.backScenarioGroupId {
        builder.add_backScenarioGroupId(x);
      }
      if let Some(x) = args.frontScenarioGroupId {
        builder.add_frontScenarioGroupId(x);
      }
      let x = args.ReplayType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ReplayType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioReplayExcelT {
    let key = table_encryption_service::create_key(b"ScenarioReplay");
      let ModeId = self.ModeId();
      let VolumeId = self.VolumeId();
      let ReplayType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ReplayType(), &key)
      } else {
        self.ReplayType()
      };
      let ChapterId = self.ChapterId();
      let EpisodeId = self.EpisodeId();
    let frontScenarioGroupId = self.frontScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let GroundId = self.GroundId();
      let BattleDuration = self.BattleDuration();
    let backScenarioGroupId = self.backScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ScenarioReplayExcelT {
      ModeId,
      VolumeId,
      ReplayType,
      ChapterId,
      EpisodeId,
      frontScenarioGroupId,
      GroundId,
      BattleDuration,
      backScenarioGroupId,
    }
  }

  #[inline]
  pub fn ModeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioReplayExcel::VT_MODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VolumeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioReplayExcel::VT_VOLUMEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplayType(&self) -> ScenarioModeReplayTypes {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ScenarioModeReplayTypes>(ScenarioReplayExcel::VT_REPLAYTYPE, Some(ScenarioModeReplayTypes::None)).unwrap()}
  }
  #[inline]
  pub fn ChapterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioReplayExcel::VT_CHAPTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EpisodeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioReplayExcel::VT_EPISODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn frontScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ScenarioReplayExcel::VT_FRONTSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioReplayExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioReplayExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn backScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ScenarioReplayExcel::VT_BACKSCENARIOGROUPID, None)}
  }
}

impl flatbuffers::Verifiable for ScenarioReplayExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ModeId", Self::VT_MODEID, false)?
     .visit_field::<i64>("VolumeId", Self::VT_VOLUMEID, false)?
     .visit_field::<ScenarioModeReplayTypes>("ReplayType", Self::VT_REPLAYTYPE, false)?
     .visit_field::<i64>("ChapterId", Self::VT_CHAPTERID, false)?
     .visit_field::<i64>("EpisodeId", Self::VT_EPISODEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("frontScenarioGroupId", Self::VT_FRONTSCENARIOGROUPID, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("backScenarioGroupId", Self::VT_BACKSCENARIOGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioReplayExcelArgs<'a> {
    pub ModeId: i64,
    pub VolumeId: i64,
    pub ReplayType: ScenarioModeReplayTypes,
    pub ChapterId: i64,
    pub EpisodeId: i64,
    pub frontScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub GroundId: i64,
    pub BattleDuration: i64,
    pub backScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ScenarioReplayExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioReplayExcelArgs {
      ModeId: 0,
      VolumeId: 0,
      ReplayType: ScenarioModeReplayTypes::None,
      ChapterId: 0,
      EpisodeId: 0,
      frontScenarioGroupId: None,
      GroundId: 0,
      BattleDuration: 0,
      backScenarioGroupId: None,
    }
  }
}

impl Serialize for ScenarioReplayExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioReplayExcel", 9)?;
      s.serialize_field("ModeId", &self.ModeId())?;
      s.serialize_field("VolumeId", &self.VolumeId())?;
      s.serialize_field("ReplayType", &self.ReplayType())?;
      s.serialize_field("ChapterId", &self.ChapterId())?;
      s.serialize_field("EpisodeId", &self.EpisodeId())?;
      if let Some(f) = self.frontScenarioGroupId() {
        s.serialize_field("frontScenarioGroupId", &f)?;
      } else {
        s.skip_field("frontScenarioGroupId")?;
      }
      s.serialize_field("GroundId", &self.GroundId())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      if let Some(f) = self.backScenarioGroupId() {
        s.serialize_field("backScenarioGroupId", &f)?;
      } else {
        s.skip_field("backScenarioGroupId")?;
      }
    s.end()
  }
}

pub struct ScenarioReplayExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioReplayExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ModeId(&mut self, ModeId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioReplayExcel::VT_MODEID, ModeId, 0);
  }
  #[inline]
  pub fn add_VolumeId(&mut self, VolumeId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioReplayExcel::VT_VOLUMEID, VolumeId, 0);
  }
  #[inline]
  pub fn add_ReplayType(&mut self, ReplayType: ScenarioModeReplayTypes) {
    self.fbb_.push_slot::<ScenarioModeReplayTypes>(ScenarioReplayExcel::VT_REPLAYTYPE, ReplayType, ScenarioModeReplayTypes::None);
  }
  #[inline]
  pub fn add_ChapterId(&mut self, ChapterId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioReplayExcel::VT_CHAPTERID, ChapterId, 0);
  }
  #[inline]
  pub fn add_EpisodeId(&mut self, EpisodeId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioReplayExcel::VT_EPISODEID, EpisodeId, 0);
  }
  #[inline]
  pub fn add_frontScenarioGroupId(&mut self, frontScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioReplayExcel::VT_FRONTSCENARIOGROUPID, frontScenarioGroupId);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioReplayExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(ScenarioReplayExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_backScenarioGroupId(&mut self, backScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioReplayExcel::VT_BACKSCENARIOGROUPID, backScenarioGroupId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioReplayExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioReplayExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioReplayExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioReplayExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioReplayExcel");
      ds.field("ModeId", &self.ModeId());
      ds.field("VolumeId", &self.VolumeId());
      ds.field("ReplayType", &self.ReplayType());
      ds.field("ChapterId", &self.ChapterId());
      ds.field("EpisodeId", &self.EpisodeId());
      ds.field("frontScenarioGroupId", &self.frontScenarioGroupId());
      ds.field("GroundId", &self.GroundId());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("backScenarioGroupId", &self.backScenarioGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioReplayExcelT {
  pub ModeId: i64,
  pub VolumeId: i64,
  pub ReplayType: ScenarioModeReplayTypes,
  pub ChapterId: i64,
  pub EpisodeId: i64,
  pub frontScenarioGroupId: Option<Vec<i64>>,
  pub GroundId: i64,
  pub BattleDuration: i64,
  pub backScenarioGroupId: Option<Vec<i64>>,
}
impl Default for ScenarioReplayExcelT {
  fn default() -> Self {
    Self {
      ModeId: 0,
      VolumeId: 0,
      ReplayType: ScenarioModeReplayTypes::None,
      ChapterId: 0,
      EpisodeId: 0,
      frontScenarioGroupId: None,
      GroundId: 0,
      BattleDuration: 0,
      backScenarioGroupId: None,
    }
  }
}
impl ScenarioReplayExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioReplayExcel<'b>> {
    let ModeId = self.ModeId;
    let VolumeId = self.VolumeId;
    let ReplayType = self.ReplayType;
    let ChapterId = self.ChapterId;
    let EpisodeId = self.EpisodeId;
    let frontScenarioGroupId = self.frontScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let GroundId = self.GroundId;
    let BattleDuration = self.BattleDuration;
    let backScenarioGroupId = self.backScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ScenarioReplayExcel::create(_fbb, &ScenarioReplayExcelArgs{
      ModeId,
      VolumeId,
      ReplayType,
      ChapterId,
      EpisodeId,
      frontScenarioGroupId,
      GroundId,
      BattleDuration,
      backScenarioGroupId,
    })
  }
}
