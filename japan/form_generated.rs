// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FormOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Form<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Form<'a> {
  type Inner = Form<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Form<'a> {
  pub const VT_MOVEENDOFFSET: flatbuffers::VOffsetT = 4;
  pub const VT_PUBLICSKILLOFFSET: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Form { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FormArgs<'args>
  ) -> flatbuffers::WIPOffset<Form<'bldr>> {
    let mut builder = FormBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Form");
      if let Some(x) = args.PublicSkillOffset {
        builder.add_PublicSkillOffset(x);
      }
      if let Some(x) = args.MoveEndOffset {
        builder.add_MoveEndOffset(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> FormT {
    let key = table_encryption_service::create_key(b"Form");
    let MoveEndOffset = self.MoveEndOffset().map(|x| {
      Box::new(x.unpack())
    });
    let PublicSkillOffset = self.PublicSkillOffset().map(|x| {
      Box::new(x.unpack())
    });
    FormT {
      MoveEndOffset,
      PublicSkillOffset,
    }
  }

  #[inline]
  pub fn MoveEndOffset(&self) -> Option<MoveEnd<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<MoveEnd>>(Form::VT_MOVEENDOFFSET, None)}
  }
  #[inline]
  pub fn PublicSkillOffset(&self) -> Option<Motion<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Motion>>(Form::VT_PUBLICSKILLOFFSET, None)}
  }
}

impl flatbuffers::Verifiable for Form<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<MoveEnd>>("MoveEndOffset", Self::VT_MOVEENDOFFSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Motion>>("PublicSkillOffset", Self::VT_PUBLICSKILLOFFSET, false)?
     .finish();
    Ok(())
  }
}
pub struct FormArgs<'a> {
    pub MoveEndOffset: Option<flatbuffers::WIPOffset<MoveEnd<'a>>>,
    pub PublicSkillOffset: Option<flatbuffers::WIPOffset<Motion<'a>>>,
}
impl<'a> Default for FormArgs<'a> {
  #[inline]
  fn default() -> Self {
    FormArgs {
      MoveEndOffset: None,
      PublicSkillOffset: None,
    }
  }
}

impl Serialize for Form<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Form", 2)?;
      if let Some(f) = self.MoveEndOffset() {
        s.serialize_field("MoveEndOffset", &f)?;
      } else {
        s.skip_field("MoveEndOffset")?;
      }
      if let Some(f) = self.PublicSkillOffset() {
        s.serialize_field("PublicSkillOffset", &f)?;
      } else {
        s.skip_field("PublicSkillOffset")?;
      }
    s.end()
  }
}

pub struct FormBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FormBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_MoveEndOffset(&mut self, MoveEndOffset: flatbuffers::WIPOffset<MoveEnd<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MoveEnd>>(Form::VT_MOVEENDOFFSET, MoveEndOffset);
  }
  #[inline]
  pub fn add_PublicSkillOffset(&mut self, PublicSkillOffset: flatbuffers::WIPOffset<Motion<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Motion>>(Form::VT_PUBLICSKILLOFFSET, PublicSkillOffset);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FormBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FormBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Form<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Form<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Form");
      ds.field("MoveEndOffset", &self.MoveEndOffset());
      ds.field("PublicSkillOffset", &self.PublicSkillOffset());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FormT {
  pub MoveEndOffset: Option<Box<MoveEndT>>,
  pub PublicSkillOffset: Option<Box<MotionT>>,
}
impl Default for FormT {
  fn default() -> Self {
    Self {
      MoveEndOffset: None,
      PublicSkillOffset: None,
    }
  }
}
impl FormT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Form<'b>> {
    let MoveEndOffset = self.MoveEndOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let PublicSkillOffset = self.PublicSkillOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    Form::create(_fbb, &FormArgs{
      MoveEndOffset,
      PublicSkillOffset,
    })
  }
}
