// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentDiceRaceEffectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentDiceRaceEffectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentDiceRaceEffectExcel<'a> {
  type Inner = EventContentDiceRaceEffectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentDiceRaceEffectExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTDICERACERESULTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ISDICERESULT: flatbuffers::VOffsetT = 8;
  pub const VT_ANICLIP: flatbuffers::VOffsetT = 10;
  pub const VT_VOICEID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentDiceRaceEffectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentDiceRaceEffectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentDiceRaceEffectExcel<'bldr>> {
    let mut builder = EventContentDiceRaceEffectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentDiceRaceEffect");
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.VoiceId {
        builder.add_VoiceId(x);
      }
      if let Some(x) = args.AniClip {
        builder.add_AniClip(x);
      }
      let x = args.EventContentDiceRaceResultType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventContentDiceRaceResultType(x);
      builder.add_isDiceResult(args.isDiceResult);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentDiceRaceEffectExcelT {
    let key = table_encryption_service::create_key(b"EventContentDiceRaceEffect");
      let EventContentId = self.EventContentId();
      let EventContentDiceRaceResultType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventContentDiceRaceResultType(), &key)
      } else {
        self.EventContentDiceRaceResultType()
      };
      let isDiceResult = self.isDiceResult();
    let AniClip = self.AniClip().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VoiceId = self.VoiceId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
    EventContentDiceRaceEffectExcelT {
      EventContentId,
      EventContentDiceRaceResultType,
      isDiceResult,
      AniClip,
      VoiceId,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDiceRaceEffectExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentDiceRaceResultType(&self) -> EventContentDiceRaceResultType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentDiceRaceResultType>(EventContentDiceRaceEffectExcel::VT_EVENTCONTENTDICERACERESULTTYPE, Some(EventContentDiceRaceResultType::DiceResult1)).unwrap()}
  }
  #[inline]
  pub fn isDiceResult(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentDiceRaceEffectExcel::VT_ISDICERESULT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn AniClip(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentDiceRaceEffectExcel::VT_ANICLIP, None)}
  }
  #[inline]
  pub fn VoiceId(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(EventContentDiceRaceEffectExcel::VT_VOICEID, None)}
  }
}

impl flatbuffers::Verifiable for EventContentDiceRaceEffectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<EventContentDiceRaceResultType>("EventContentDiceRaceResultType", Self::VT_EVENTCONTENTDICERACERESULTTYPE, false)?
     .visit_field::<bool>("isDiceResult", Self::VT_ISDICERESULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AniClip", Self::VT_ANICLIP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("VoiceId", Self::VT_VOICEID, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentDiceRaceEffectExcelArgs<'a> {
    pub EventContentId: i64,
    pub EventContentDiceRaceResultType: EventContentDiceRaceResultType,
    pub isDiceResult: bool,
    pub AniClip: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for EventContentDiceRaceEffectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentDiceRaceEffectExcelArgs {
      EventContentId: 0,
      EventContentDiceRaceResultType: EventContentDiceRaceResultType::DiceResult1,
      isDiceResult: false,
      AniClip: None,
      VoiceId: None,
    }
  }
}

impl Serialize for EventContentDiceRaceEffectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentDiceRaceEffectExcel", 5)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventContentDiceRaceResultType", &self.EventContentDiceRaceResultType())?;
      s.serialize_field("isDiceResult", &self.isDiceResult())?;
      if let Some(f) = self.AniClip() {
        s.serialize_field("AniClip", &f)?;
      } else {
        s.skip_field("AniClip")?;
      }
      if let Some(f) = self.VoiceId() {
        s.serialize_field("VoiceId", &f)?;
      } else {
        s.skip_field("VoiceId")?;
      }
    s.end()
  }
}

pub struct EventContentDiceRaceEffectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentDiceRaceEffectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentDiceRaceEffectExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventContentDiceRaceResultType(&mut self, EventContentDiceRaceResultType: EventContentDiceRaceResultType) {
    self.fbb_.push_slot::<EventContentDiceRaceResultType>(EventContentDiceRaceEffectExcel::VT_EVENTCONTENTDICERACERESULTTYPE, EventContentDiceRaceResultType, EventContentDiceRaceResultType::DiceResult1);
  }
  #[inline]
  pub fn add_isDiceResult(&mut self, isDiceResult: bool) {
    self.fbb_.push_slot::<bool>(EventContentDiceRaceEffectExcel::VT_ISDICERESULT, isDiceResult, false);
  }
  #[inline]
  pub fn add_AniClip(&mut self, AniClip: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentDiceRaceEffectExcel::VT_ANICLIP, AniClip);
  }
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentDiceRaceEffectExcel::VT_VOICEID, VoiceId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentDiceRaceEffectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentDiceRaceEffectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentDiceRaceEffectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentDiceRaceEffectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentDiceRaceEffectExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventContentDiceRaceResultType", &self.EventContentDiceRaceResultType());
      ds.field("isDiceResult", &self.isDiceResult());
      ds.field("AniClip", &self.AniClip());
      ds.field("VoiceId", &self.VoiceId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentDiceRaceEffectExcelT {
  pub EventContentId: i64,
  pub EventContentDiceRaceResultType: EventContentDiceRaceResultType,
  pub isDiceResult: bool,
  pub AniClip: Option<String>,
  pub VoiceId: Option<Vec<u32>>,
}
impl Default for EventContentDiceRaceEffectExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventContentDiceRaceResultType: EventContentDiceRaceResultType::DiceResult1,
      isDiceResult: false,
      AniClip: None,
      VoiceId: None,
    }
  }
}
impl EventContentDiceRaceEffectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentDiceRaceEffectExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventContentDiceRaceResultType = self.EventContentDiceRaceResultType;
    let isDiceResult = self.isDiceResult;
    let AniClip = self.AniClip.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceId = self.VoiceId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentDiceRaceEffectExcel::create(_fbb, &EventContentDiceRaceEffectExcelArgs{
      EventContentId,
      EventContentDiceRaceResultType,
      isDiceResult,
      AniClip,
      VoiceId,
    })
  }
}
