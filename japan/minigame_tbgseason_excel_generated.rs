// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGSeasonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGSeasonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGSeasonExcel<'a> {
  type Inner = MinigameTBGSeasonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGSeasonExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ITEMSLOT: flatbuffers::VOffsetT = 6;
  pub const VT_DEFAULTECHELONHP: flatbuffers::VOffsetT = 8;
  pub const VT_DEFAULTITEMDICEID: flatbuffers::VOffsetT = 10;
  pub const VT_ECHELONSLOT1CHARACTERID: flatbuffers::VOffsetT = 12;
  pub const VT_ECHELONSLOT2CHARACTERID: flatbuffers::VOffsetT = 14;
  pub const VT_ECHELONSLOT3CHARACTERID: flatbuffers::VOffsetT = 16;
  pub const VT_ECHELONSLOT4CHARACTERID: flatbuffers::VOffsetT = 18;
  pub const VT_ECHELONSLOT1PORTRAIT: flatbuffers::VOffsetT = 20;
  pub const VT_ECHELONSLOT2PORTRAIT: flatbuffers::VOffsetT = 22;
  pub const VT_ECHELONSLOT3PORTRAIT: flatbuffers::VOffsetT = 24;
  pub const VT_ECHELONSLOT4PORTRAIT: flatbuffers::VOffsetT = 26;
  pub const VT_EVENTUSECOSTTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_EVENTUSECOSTID: flatbuffers::VOffsetT = 30;
  pub const VT_ECHELONREVIVALCOSTTYPE: flatbuffers::VOffsetT = 32;
  pub const VT_ECHELONREVIVALCOSTID: flatbuffers::VOffsetT = 34;
  pub const VT_ECHELONREVIVALCOSTAMOUNT: flatbuffers::VOffsetT = 36;
  pub const VT_ENEMYBOSSHP: flatbuffers::VOffsetT = 38;
  pub const VT_ENEMYMINIONHP: flatbuffers::VOffsetT = 40;
  pub const VT_ATTACKDAMAGE: flatbuffers::VOffsetT = 42;
  pub const VT_CRITICALATTACKDAMAGE: flatbuffers::VOffsetT = 44;
  pub const VT_ROUNDITEMSELECTLIMIT: flatbuffers::VOffsetT = 46;
  pub const VT_INSTANTCLEARROUND: flatbuffers::VOffsetT = 48;
  pub const VT_MAXHP: flatbuffers::VOffsetT = 50;
  pub const VT_MAPIMAGEPATH: flatbuffers::VOffsetT = 52;
  pub const VT_MAPNAMELOCALIZE: flatbuffers::VOffsetT = 54;
  pub const VT_STARTTHEMAINDEX: flatbuffers::VOffsetT = 56;
  pub const VT_LOOPTHEMAINDEX: flatbuffers::VOffsetT = 58;
  pub const VT_MAXDICEPLUS: flatbuffers::VOffsetT = 60;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGSeasonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGSeasonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameTBGSeasonExcel<'bldr>> {
    let mut builder = MinigameTBGSeasonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGSeason");
      let x = args.EchelonRevivalCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EchelonRevivalCostId(x);
      let x = args.EventUseCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventUseCostId(x);
      let x = args.EchelonSlot4CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EchelonSlot4CharacterId(x);
      let x = args.EchelonSlot3CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EchelonSlot3CharacterId(x);
      let x = args.EchelonSlot2CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EchelonSlot2CharacterId(x);
      let x = args.EchelonSlot1CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EchelonSlot1CharacterId(x);
      let x = args.DefaultItemDiceId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefaultItemDiceId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.MaxDicePlus;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxDicePlus(x);
      let x = args.LoopThemaIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_LoopThemaIndex(x);
      let x = args.StartThemaIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StartThemaIndex(x);
      if let Some(x) = args.MapNameLocalize {
        builder.add_MapNameLocalize(x);
      }
      if let Some(x) = args.MapImagePath {
        builder.add_MapImagePath(x);
      }
      let x = args.MaxHp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxHp(x);
      let x = args.InstantClearRound;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_InstantClearRound(x);
      let x = args.RoundItemSelectLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RoundItemSelectLimit(x);
      let x = args.CriticalAttackDamage;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CriticalAttackDamage(x);
      let x = args.AttackDamage;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AttackDamage(x);
      let x = args.EnemyMinionHP;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EnemyMinionHP(x);
      let x = args.EnemyBossHP;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EnemyBossHP(x);
      let x = args.EchelonRevivalCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EchelonRevivalCostAmount(x);
      let x = args.EchelonRevivalCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EchelonRevivalCostType(x);
      let x = args.EventUseCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventUseCostType(x);
      if let Some(x) = args.EchelonSlot4Portrait {
        builder.add_EchelonSlot4Portrait(x);
      }
      if let Some(x) = args.EchelonSlot3Portrait {
        builder.add_EchelonSlot3Portrait(x);
      }
      if let Some(x) = args.EchelonSlot2Portrait {
        builder.add_EchelonSlot2Portrait(x);
      }
      if let Some(x) = args.EchelonSlot1Portrait {
        builder.add_EchelonSlot1Portrait(x);
      }
      let x = args.DefaultEchelonHp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DefaultEchelonHp(x);
      let x = args.ItemSlot;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ItemSlot(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGSeasonExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGSeason");
      let EventContentId = self.EventContentId();
      let ItemSlot = self.ItemSlot();
      let DefaultEchelonHp = self.DefaultEchelonHp();
      let DefaultItemDiceId = self.DefaultItemDiceId();
      let EchelonSlot1CharacterId = self.EchelonSlot1CharacterId();
      let EchelonSlot2CharacterId = self.EchelonSlot2CharacterId();
      let EchelonSlot3CharacterId = self.EchelonSlot3CharacterId();
      let EchelonSlot4CharacterId = self.EchelonSlot4CharacterId();
    let EchelonSlot1Portrait = self.EchelonSlot1Portrait().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EchelonSlot2Portrait = self.EchelonSlot2Portrait().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EchelonSlot3Portrait = self.EchelonSlot3Portrait().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EchelonSlot4Portrait = self.EchelonSlot4Portrait().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventUseCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventUseCostType(), &key)
      } else {
        self.EventUseCostType()
      };
      let EventUseCostId = self.EventUseCostId();
      let EchelonRevivalCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EchelonRevivalCostType(), &key)
      } else {
        self.EchelonRevivalCostType()
      };
      let EchelonRevivalCostId = self.EchelonRevivalCostId();
      let EchelonRevivalCostAmount = self.EchelonRevivalCostAmount();
      let EnemyBossHP = self.EnemyBossHP();
      let EnemyMinionHP = self.EnemyMinionHP();
      let AttackDamage = self.AttackDamage();
      let CriticalAttackDamage = self.CriticalAttackDamage();
      let RoundItemSelectLimit = self.RoundItemSelectLimit();
      let InstantClearRound = self.InstantClearRound();
      let MaxHp = self.MaxHp();
    let MapImagePath = self.MapImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MapNameLocalize = self.MapNameLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StartThemaIndex = self.StartThemaIndex();
      let LoopThemaIndex = self.LoopThemaIndex();
      let MaxDicePlus = self.MaxDicePlus();
    MinigameTBGSeasonExcelT {
      EventContentId,
      ItemSlot,
      DefaultEchelonHp,
      DefaultItemDiceId,
      EchelonSlot1CharacterId,
      EchelonSlot2CharacterId,
      EchelonSlot3CharacterId,
      EchelonSlot4CharacterId,
      EchelonSlot1Portrait,
      EchelonSlot2Portrait,
      EchelonSlot3Portrait,
      EchelonSlot4Portrait,
      EventUseCostType,
      EventUseCostId,
      EchelonRevivalCostType,
      EchelonRevivalCostId,
      EchelonRevivalCostAmount,
      EnemyBossHP,
      EnemyMinionHP,
      AttackDamage,
      CriticalAttackDamage,
      RoundItemSelectLimit,
      InstantClearRound,
      MaxHp,
      MapImagePath,
      MapNameLocalize,
      StartThemaIndex,
      LoopThemaIndex,
      MaxDicePlus,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ItemSlot(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_ITEMSLOT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefaultEchelonHp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_DEFAULTECHELONHP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefaultItemDiceId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_DEFAULTITEMDICEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonSlot1CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT1CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonSlot2CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT2CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonSlot3CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT3CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonSlot4CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT4CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonSlot1Portrait(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT1PORTRAIT, None)}
  }
  #[inline]
  pub fn EchelonSlot2Portrait(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT2PORTRAIT, None)}
  }
  #[inline]
  pub fn EchelonSlot3Portrait(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT3PORTRAIT, None)}
  }
  #[inline]
  pub fn EchelonSlot4Portrait(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT4PORTRAIT, None)}
  }
  #[inline]
  pub fn EventUseCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MinigameTBGSeasonExcel::VT_EVENTUSECOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn EventUseCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_EVENTUSECOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonRevivalCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MinigameTBGSeasonExcel::VT_ECHELONREVIVALCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn EchelonRevivalCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGSeasonExcel::VT_ECHELONREVIVALCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonRevivalCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_ECHELONREVIVALCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnemyBossHP(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_ENEMYBOSSHP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnemyMinionHP(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_ENEMYMINIONHP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackDamage(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_ATTACKDAMAGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CriticalAttackDamage(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_CRITICALATTACKDAMAGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RoundItemSelectLimit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_ROUNDITEMSELECTLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InstantClearRound(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_INSTANTCLEARROUND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxHp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_MAXHP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MapImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGSeasonExcel::VT_MAPIMAGEPATH, None)}
  }
  #[inline]
  pub fn MapNameLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGSeasonExcel::VT_MAPNAMELOCALIZE, None)}
  }
  #[inline]
  pub fn StartThemaIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_STARTTHEMAINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LoopThemaIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_LOOPTHEMAINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxDicePlus(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGSeasonExcel::VT_MAXDICEPLUS, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameTBGSeasonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i32>("ItemSlot", Self::VT_ITEMSLOT, false)?
     .visit_field::<i32>("DefaultEchelonHp", Self::VT_DEFAULTECHELONHP, false)?
     .visit_field::<i64>("DefaultItemDiceId", Self::VT_DEFAULTITEMDICEID, false)?
     .visit_field::<i64>("EchelonSlot1CharacterId", Self::VT_ECHELONSLOT1CHARACTERID, false)?
     .visit_field::<i64>("EchelonSlot2CharacterId", Self::VT_ECHELONSLOT2CHARACTERID, false)?
     .visit_field::<i64>("EchelonSlot3CharacterId", Self::VT_ECHELONSLOT3CHARACTERID, false)?
     .visit_field::<i64>("EchelonSlot4CharacterId", Self::VT_ECHELONSLOT4CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EchelonSlot1Portrait", Self::VT_ECHELONSLOT1PORTRAIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EchelonSlot2Portrait", Self::VT_ECHELONSLOT2PORTRAIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EchelonSlot3Portrait", Self::VT_ECHELONSLOT3PORTRAIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EchelonSlot4Portrait", Self::VT_ECHELONSLOT4PORTRAIT, false)?
     .visit_field::<ParcelType>("EventUseCostType", Self::VT_EVENTUSECOSTTYPE, false)?
     .visit_field::<i64>("EventUseCostId", Self::VT_EVENTUSECOSTID, false)?
     .visit_field::<ParcelType>("EchelonRevivalCostType", Self::VT_ECHELONREVIVALCOSTTYPE, false)?
     .visit_field::<i64>("EchelonRevivalCostId", Self::VT_ECHELONREVIVALCOSTID, false)?
     .visit_field::<i32>("EchelonRevivalCostAmount", Self::VT_ECHELONREVIVALCOSTAMOUNT, false)?
     .visit_field::<i32>("EnemyBossHP", Self::VT_ENEMYBOSSHP, false)?
     .visit_field::<i32>("EnemyMinionHP", Self::VT_ENEMYMINIONHP, false)?
     .visit_field::<i32>("AttackDamage", Self::VT_ATTACKDAMAGE, false)?
     .visit_field::<i32>("CriticalAttackDamage", Self::VT_CRITICALATTACKDAMAGE, false)?
     .visit_field::<i32>("RoundItemSelectLimit", Self::VT_ROUNDITEMSELECTLIMIT, false)?
     .visit_field::<i32>("InstantClearRound", Self::VT_INSTANTCLEARROUND, false)?
     .visit_field::<i32>("MaxHp", Self::VT_MAXHP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MapImagePath", Self::VT_MAPIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MapNameLocalize", Self::VT_MAPNAMELOCALIZE, false)?
     .visit_field::<i32>("StartThemaIndex", Self::VT_STARTTHEMAINDEX, false)?
     .visit_field::<i32>("LoopThemaIndex", Self::VT_LOOPTHEMAINDEX, false)?
     .visit_field::<i32>("MaxDicePlus", Self::VT_MAXDICEPLUS, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGSeasonExcelArgs<'a> {
    pub EventContentId: i64,
    pub ItemSlot: i32,
    pub DefaultEchelonHp: i32,
    pub DefaultItemDiceId: i64,
    pub EchelonSlot1CharacterId: i64,
    pub EchelonSlot2CharacterId: i64,
    pub EchelonSlot3CharacterId: i64,
    pub EchelonSlot4CharacterId: i64,
    pub EchelonSlot1Portrait: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EchelonSlot2Portrait: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EchelonSlot3Portrait: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EchelonSlot4Portrait: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventUseCostType: ParcelType,
    pub EventUseCostId: i64,
    pub EchelonRevivalCostType: ParcelType,
    pub EchelonRevivalCostId: i64,
    pub EchelonRevivalCostAmount: i32,
    pub EnemyBossHP: i32,
    pub EnemyMinionHP: i32,
    pub AttackDamage: i32,
    pub CriticalAttackDamage: i32,
    pub RoundItemSelectLimit: i32,
    pub InstantClearRound: i32,
    pub MaxHp: i32,
    pub MapImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MapNameLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StartThemaIndex: i32,
    pub LoopThemaIndex: i32,
    pub MaxDicePlus: i32,
}
impl<'a> Default for MinigameTBGSeasonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameTBGSeasonExcelArgs {
      EventContentId: 0,
      ItemSlot: 0,
      DefaultEchelonHp: 0,
      DefaultItemDiceId: 0,
      EchelonSlot1CharacterId: 0,
      EchelonSlot2CharacterId: 0,
      EchelonSlot3CharacterId: 0,
      EchelonSlot4CharacterId: 0,
      EchelonSlot1Portrait: None,
      EchelonSlot2Portrait: None,
      EchelonSlot3Portrait: None,
      EchelonSlot4Portrait: None,
      EventUseCostType: ParcelType::None,
      EventUseCostId: 0,
      EchelonRevivalCostType: ParcelType::None,
      EchelonRevivalCostId: 0,
      EchelonRevivalCostAmount: 0,
      EnemyBossHP: 0,
      EnemyMinionHP: 0,
      AttackDamage: 0,
      CriticalAttackDamage: 0,
      RoundItemSelectLimit: 0,
      InstantClearRound: 0,
      MaxHp: 0,
      MapImagePath: None,
      MapNameLocalize: None,
      StartThemaIndex: 0,
      LoopThemaIndex: 0,
      MaxDicePlus: 0,
    }
  }
}

impl Serialize for MinigameTBGSeasonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGSeasonExcel", 29)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("ItemSlot", &self.ItemSlot())?;
      s.serialize_field("DefaultEchelonHp", &self.DefaultEchelonHp())?;
      s.serialize_field("DefaultItemDiceId", &self.DefaultItemDiceId())?;
      s.serialize_field("EchelonSlot1CharacterId", &self.EchelonSlot1CharacterId())?;
      s.serialize_field("EchelonSlot2CharacterId", &self.EchelonSlot2CharacterId())?;
      s.serialize_field("EchelonSlot3CharacterId", &self.EchelonSlot3CharacterId())?;
      s.serialize_field("EchelonSlot4CharacterId", &self.EchelonSlot4CharacterId())?;
      if let Some(f) = self.EchelonSlot1Portrait() {
        s.serialize_field("EchelonSlot1Portrait", &f)?;
      } else {
        s.skip_field("EchelonSlot1Portrait")?;
      }
      if let Some(f) = self.EchelonSlot2Portrait() {
        s.serialize_field("EchelonSlot2Portrait", &f)?;
      } else {
        s.skip_field("EchelonSlot2Portrait")?;
      }
      if let Some(f) = self.EchelonSlot3Portrait() {
        s.serialize_field("EchelonSlot3Portrait", &f)?;
      } else {
        s.skip_field("EchelonSlot3Portrait")?;
      }
      if let Some(f) = self.EchelonSlot4Portrait() {
        s.serialize_field("EchelonSlot4Portrait", &f)?;
      } else {
        s.skip_field("EchelonSlot4Portrait")?;
      }
      s.serialize_field("EventUseCostType", &self.EventUseCostType())?;
      s.serialize_field("EventUseCostId", &self.EventUseCostId())?;
      s.serialize_field("EchelonRevivalCostType", &self.EchelonRevivalCostType())?;
      s.serialize_field("EchelonRevivalCostId", &self.EchelonRevivalCostId())?;
      s.serialize_field("EchelonRevivalCostAmount", &self.EchelonRevivalCostAmount())?;
      s.serialize_field("EnemyBossHP", &self.EnemyBossHP())?;
      s.serialize_field("EnemyMinionHP", &self.EnemyMinionHP())?;
      s.serialize_field("AttackDamage", &self.AttackDamage())?;
      s.serialize_field("CriticalAttackDamage", &self.CriticalAttackDamage())?;
      s.serialize_field("RoundItemSelectLimit", &self.RoundItemSelectLimit())?;
      s.serialize_field("InstantClearRound", &self.InstantClearRound())?;
      s.serialize_field("MaxHp", &self.MaxHp())?;
      if let Some(f) = self.MapImagePath() {
        s.serialize_field("MapImagePath", &f)?;
      } else {
        s.skip_field("MapImagePath")?;
      }
      if let Some(f) = self.MapNameLocalize() {
        s.serialize_field("MapNameLocalize", &f)?;
      } else {
        s.skip_field("MapNameLocalize")?;
      }
      s.serialize_field("StartThemaIndex", &self.StartThemaIndex())?;
      s.serialize_field("LoopThemaIndex", &self.LoopThemaIndex())?;
      s.serialize_field("MaxDicePlus", &self.MaxDicePlus())?;
    s.end()
  }
}

pub struct MinigameTBGSeasonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGSeasonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_ItemSlot(&mut self, ItemSlot: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_ITEMSLOT, ItemSlot, 0);
  }
  #[inline]
  pub fn add_DefaultEchelonHp(&mut self, DefaultEchelonHp: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_DEFAULTECHELONHP, DefaultEchelonHp, 0);
  }
  #[inline]
  pub fn add_DefaultItemDiceId(&mut self, DefaultItemDiceId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_DEFAULTITEMDICEID, DefaultItemDiceId, 0);
  }
  #[inline]
  pub fn add_EchelonSlot1CharacterId(&mut self, EchelonSlot1CharacterId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT1CHARACTERID, EchelonSlot1CharacterId, 0);
  }
  #[inline]
  pub fn add_EchelonSlot2CharacterId(&mut self, EchelonSlot2CharacterId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT2CHARACTERID, EchelonSlot2CharacterId, 0);
  }
  #[inline]
  pub fn add_EchelonSlot3CharacterId(&mut self, EchelonSlot3CharacterId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT3CHARACTERID, EchelonSlot3CharacterId, 0);
  }
  #[inline]
  pub fn add_EchelonSlot4CharacterId(&mut self, EchelonSlot4CharacterId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_ECHELONSLOT4CHARACTERID, EchelonSlot4CharacterId, 0);
  }
  #[inline]
  pub fn add_EchelonSlot1Portrait(&mut self, EchelonSlot1Portrait: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT1PORTRAIT, EchelonSlot1Portrait);
  }
  #[inline]
  pub fn add_EchelonSlot2Portrait(&mut self, EchelonSlot2Portrait: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT2PORTRAIT, EchelonSlot2Portrait);
  }
  #[inline]
  pub fn add_EchelonSlot3Portrait(&mut self, EchelonSlot3Portrait: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT3PORTRAIT, EchelonSlot3Portrait);
  }
  #[inline]
  pub fn add_EchelonSlot4Portrait(&mut self, EchelonSlot4Portrait: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGSeasonExcel::VT_ECHELONSLOT4PORTRAIT, EchelonSlot4Portrait);
  }
  #[inline]
  pub fn add_EventUseCostType(&mut self, EventUseCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MinigameTBGSeasonExcel::VT_EVENTUSECOSTTYPE, EventUseCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_EventUseCostId(&mut self, EventUseCostId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_EVENTUSECOSTID, EventUseCostId, 0);
  }
  #[inline]
  pub fn add_EchelonRevivalCostType(&mut self, EchelonRevivalCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MinigameTBGSeasonExcel::VT_ECHELONREVIVALCOSTTYPE, EchelonRevivalCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_EchelonRevivalCostId(&mut self, EchelonRevivalCostId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGSeasonExcel::VT_ECHELONREVIVALCOSTID, EchelonRevivalCostId, 0);
  }
  #[inline]
  pub fn add_EchelonRevivalCostAmount(&mut self, EchelonRevivalCostAmount: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_ECHELONREVIVALCOSTAMOUNT, EchelonRevivalCostAmount, 0);
  }
  #[inline]
  pub fn add_EnemyBossHP(&mut self, EnemyBossHP: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_ENEMYBOSSHP, EnemyBossHP, 0);
  }
  #[inline]
  pub fn add_EnemyMinionHP(&mut self, EnemyMinionHP: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_ENEMYMINIONHP, EnemyMinionHP, 0);
  }
  #[inline]
  pub fn add_AttackDamage(&mut self, AttackDamage: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_ATTACKDAMAGE, AttackDamage, 0);
  }
  #[inline]
  pub fn add_CriticalAttackDamage(&mut self, CriticalAttackDamage: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_CRITICALATTACKDAMAGE, CriticalAttackDamage, 0);
  }
  #[inline]
  pub fn add_RoundItemSelectLimit(&mut self, RoundItemSelectLimit: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_ROUNDITEMSELECTLIMIT, RoundItemSelectLimit, 0);
  }
  #[inline]
  pub fn add_InstantClearRound(&mut self, InstantClearRound: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_INSTANTCLEARROUND, InstantClearRound, 0);
  }
  #[inline]
  pub fn add_MaxHp(&mut self, MaxHp: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_MAXHP, MaxHp, 0);
  }
  #[inline]
  pub fn add_MapImagePath(&mut self, MapImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGSeasonExcel::VT_MAPIMAGEPATH, MapImagePath);
  }
  #[inline]
  pub fn add_MapNameLocalize(&mut self, MapNameLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGSeasonExcel::VT_MAPNAMELOCALIZE, MapNameLocalize);
  }
  #[inline]
  pub fn add_StartThemaIndex(&mut self, StartThemaIndex: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_STARTTHEMAINDEX, StartThemaIndex, 0);
  }
  #[inline]
  pub fn add_LoopThemaIndex(&mut self, LoopThemaIndex: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_LOOPTHEMAINDEX, LoopThemaIndex, 0);
  }
  #[inline]
  pub fn add_MaxDicePlus(&mut self, MaxDicePlus: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGSeasonExcel::VT_MAXDICEPLUS, MaxDicePlus, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGSeasonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGSeasonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGSeasonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGSeasonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGSeasonExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("ItemSlot", &self.ItemSlot());
      ds.field("DefaultEchelonHp", &self.DefaultEchelonHp());
      ds.field("DefaultItemDiceId", &self.DefaultItemDiceId());
      ds.field("EchelonSlot1CharacterId", &self.EchelonSlot1CharacterId());
      ds.field("EchelonSlot2CharacterId", &self.EchelonSlot2CharacterId());
      ds.field("EchelonSlot3CharacterId", &self.EchelonSlot3CharacterId());
      ds.field("EchelonSlot4CharacterId", &self.EchelonSlot4CharacterId());
      ds.field("EchelonSlot1Portrait", &self.EchelonSlot1Portrait());
      ds.field("EchelonSlot2Portrait", &self.EchelonSlot2Portrait());
      ds.field("EchelonSlot3Portrait", &self.EchelonSlot3Portrait());
      ds.field("EchelonSlot4Portrait", &self.EchelonSlot4Portrait());
      ds.field("EventUseCostType", &self.EventUseCostType());
      ds.field("EventUseCostId", &self.EventUseCostId());
      ds.field("EchelonRevivalCostType", &self.EchelonRevivalCostType());
      ds.field("EchelonRevivalCostId", &self.EchelonRevivalCostId());
      ds.field("EchelonRevivalCostAmount", &self.EchelonRevivalCostAmount());
      ds.field("EnemyBossHP", &self.EnemyBossHP());
      ds.field("EnemyMinionHP", &self.EnemyMinionHP());
      ds.field("AttackDamage", &self.AttackDamage());
      ds.field("CriticalAttackDamage", &self.CriticalAttackDamage());
      ds.field("RoundItemSelectLimit", &self.RoundItemSelectLimit());
      ds.field("InstantClearRound", &self.InstantClearRound());
      ds.field("MaxHp", &self.MaxHp());
      ds.field("MapImagePath", &self.MapImagePath());
      ds.field("MapNameLocalize", &self.MapNameLocalize());
      ds.field("StartThemaIndex", &self.StartThemaIndex());
      ds.field("LoopThemaIndex", &self.LoopThemaIndex());
      ds.field("MaxDicePlus", &self.MaxDicePlus());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGSeasonExcelT {
  pub EventContentId: i64,
  pub ItemSlot: i32,
  pub DefaultEchelonHp: i32,
  pub DefaultItemDiceId: i64,
  pub EchelonSlot1CharacterId: i64,
  pub EchelonSlot2CharacterId: i64,
  pub EchelonSlot3CharacterId: i64,
  pub EchelonSlot4CharacterId: i64,
  pub EchelonSlot1Portrait: Option<String>,
  pub EchelonSlot2Portrait: Option<String>,
  pub EchelonSlot3Portrait: Option<String>,
  pub EchelonSlot4Portrait: Option<String>,
  pub EventUseCostType: ParcelType,
  pub EventUseCostId: i64,
  pub EchelonRevivalCostType: ParcelType,
  pub EchelonRevivalCostId: i64,
  pub EchelonRevivalCostAmount: i32,
  pub EnemyBossHP: i32,
  pub EnemyMinionHP: i32,
  pub AttackDamage: i32,
  pub CriticalAttackDamage: i32,
  pub RoundItemSelectLimit: i32,
  pub InstantClearRound: i32,
  pub MaxHp: i32,
  pub MapImagePath: Option<String>,
  pub MapNameLocalize: Option<String>,
  pub StartThemaIndex: i32,
  pub LoopThemaIndex: i32,
  pub MaxDicePlus: i32,
}
impl Default for MinigameTBGSeasonExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      ItemSlot: 0,
      DefaultEchelonHp: 0,
      DefaultItemDiceId: 0,
      EchelonSlot1CharacterId: 0,
      EchelonSlot2CharacterId: 0,
      EchelonSlot3CharacterId: 0,
      EchelonSlot4CharacterId: 0,
      EchelonSlot1Portrait: None,
      EchelonSlot2Portrait: None,
      EchelonSlot3Portrait: None,
      EchelonSlot4Portrait: None,
      EventUseCostType: ParcelType::None,
      EventUseCostId: 0,
      EchelonRevivalCostType: ParcelType::None,
      EchelonRevivalCostId: 0,
      EchelonRevivalCostAmount: 0,
      EnemyBossHP: 0,
      EnemyMinionHP: 0,
      AttackDamage: 0,
      CriticalAttackDamage: 0,
      RoundItemSelectLimit: 0,
      InstantClearRound: 0,
      MaxHp: 0,
      MapImagePath: None,
      MapNameLocalize: None,
      StartThemaIndex: 0,
      LoopThemaIndex: 0,
      MaxDicePlus: 0,
    }
  }
}
impl MinigameTBGSeasonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGSeasonExcel<'b>> {
    let EventContentId = self.EventContentId;
    let ItemSlot = self.ItemSlot;
    let DefaultEchelonHp = self.DefaultEchelonHp;
    let DefaultItemDiceId = self.DefaultItemDiceId;
    let EchelonSlot1CharacterId = self.EchelonSlot1CharacterId;
    let EchelonSlot2CharacterId = self.EchelonSlot2CharacterId;
    let EchelonSlot3CharacterId = self.EchelonSlot3CharacterId;
    let EchelonSlot4CharacterId = self.EchelonSlot4CharacterId;
    let EchelonSlot1Portrait = self.EchelonSlot1Portrait.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EchelonSlot2Portrait = self.EchelonSlot2Portrait.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EchelonSlot3Portrait = self.EchelonSlot3Portrait.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EchelonSlot4Portrait = self.EchelonSlot4Portrait.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventUseCostType = self.EventUseCostType;
    let EventUseCostId = self.EventUseCostId;
    let EchelonRevivalCostType = self.EchelonRevivalCostType;
    let EchelonRevivalCostId = self.EchelonRevivalCostId;
    let EchelonRevivalCostAmount = self.EchelonRevivalCostAmount;
    let EnemyBossHP = self.EnemyBossHP;
    let EnemyMinionHP = self.EnemyMinionHP;
    let AttackDamage = self.AttackDamage;
    let CriticalAttackDamage = self.CriticalAttackDamage;
    let RoundItemSelectLimit = self.RoundItemSelectLimit;
    let InstantClearRound = self.InstantClearRound;
    let MaxHp = self.MaxHp;
    let MapImagePath = self.MapImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MapNameLocalize = self.MapNameLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StartThemaIndex = self.StartThemaIndex;
    let LoopThemaIndex = self.LoopThemaIndex;
    let MaxDicePlus = self.MaxDicePlus;
    MinigameTBGSeasonExcel::create(_fbb, &MinigameTBGSeasonExcelArgs{
      EventContentId,
      ItemSlot,
      DefaultEchelonHp,
      DefaultItemDiceId,
      EchelonSlot1CharacterId,
      EchelonSlot2CharacterId,
      EchelonSlot3CharacterId,
      EchelonSlot4CharacterId,
      EchelonSlot1Portrait,
      EchelonSlot2Portrait,
      EchelonSlot3Portrait,
      EchelonSlot4Portrait,
      EventUseCostType,
      EventUseCostId,
      EchelonRevivalCostType,
      EchelonRevivalCostId,
      EchelonRevivalCostAmount,
      EnemyBossHP,
      EnemyMinionHP,
      AttackDamage,
      CriticalAttackDamage,
      RoundItemSelectLimit,
      InstantClearRound,
      MaxHp,
      MapImagePath,
      MapNameLocalize,
      StartThemaIndex,
      LoopThemaIndex,
      MaxDicePlus,
    })
  }
}
