// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContentSpoilerPopupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContentSpoilerPopupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContentSpoilerPopupExcel<'a> {
  type Inner = ContentSpoilerPopupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContentSpoilerPopupExcel<'a> {
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_SPOILERPOPUPTITLE: flatbuffers::VOffsetT = 6;
  pub const VT_SPOILERPOPUPDESCRIPTION: flatbuffers::VOffsetT = 8;
  pub const VT_ISWARNINGPOPUP: flatbuffers::VOffsetT = 10;
  pub const VT_CONDITIONSCENARIOMODEID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContentSpoilerPopupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContentSpoilerPopupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ContentSpoilerPopupExcel<'bldr>> {
    let mut builder = ContentSpoilerPopupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ContentSpoilerPopup");
      let x = args.ConditionScenarioModeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionScenarioModeId(x);
      if let Some(x) = args.SpoilerPopupDescription {
        builder.add_SpoilerPopupDescription(x);
      }
      if let Some(x) = args.SpoilerPopupTitle {
        builder.add_SpoilerPopupTitle(x);
      }
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
      builder.add_IsWarningPopUp(args.IsWarningPopUp);
    builder.finish()
  }

  pub fn unpack(&self) -> ContentSpoilerPopupExcelT {
    let key = table_encryption_service::create_key(b"ContentSpoilerPopup");
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
    let SpoilerPopupTitle = self.SpoilerPopupTitle().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SpoilerPopupDescription = self.SpoilerPopupDescription().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IsWarningPopUp = self.IsWarningPopUp();
      let ConditionScenarioModeId = self.ConditionScenarioModeId();
    ContentSpoilerPopupExcelT {
      ContentType,
      SpoilerPopupTitle,
      SpoilerPopupDescription,
      IsWarningPopUp,
      ConditionScenarioModeId,
    }
  }

  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(ContentSpoilerPopupExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn SpoilerPopupTitle(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContentSpoilerPopupExcel::VT_SPOILERPOPUPTITLE, None)}
  }
  #[inline]
  pub fn SpoilerPopupDescription(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContentSpoilerPopupExcel::VT_SPOILERPOPUPDESCRIPTION, None)}
  }
  #[inline]
  pub fn IsWarningPopUp(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ContentSpoilerPopupExcel::VT_ISWARNINGPOPUP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ConditionScenarioModeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentSpoilerPopupExcel::VT_CONDITIONSCENARIOMODEID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ContentSpoilerPopupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpoilerPopupTitle", Self::VT_SPOILERPOPUPTITLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpoilerPopupDescription", Self::VT_SPOILERPOPUPDESCRIPTION, false)?
     .visit_field::<bool>("IsWarningPopUp", Self::VT_ISWARNINGPOPUP, false)?
     .visit_field::<i64>("ConditionScenarioModeId", Self::VT_CONDITIONSCENARIOMODEID, false)?
     .finish();
    Ok(())
  }
}
pub struct ContentSpoilerPopupExcelArgs<'a> {
    pub ContentType: ContentType,
    pub SpoilerPopupTitle: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpoilerPopupDescription: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IsWarningPopUp: bool,
    pub ConditionScenarioModeId: i64,
}
impl<'a> Default for ContentSpoilerPopupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContentSpoilerPopupExcelArgs {
      ContentType: ContentType::None,
      SpoilerPopupTitle: None,
      SpoilerPopupDescription: None,
      IsWarningPopUp: false,
      ConditionScenarioModeId: 0,
    }
  }
}

impl Serialize for ContentSpoilerPopupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ContentSpoilerPopupExcel", 5)?;
      s.serialize_field("ContentType", &self.ContentType())?;
      if let Some(f) = self.SpoilerPopupTitle() {
        s.serialize_field("SpoilerPopupTitle", &f)?;
      } else {
        s.skip_field("SpoilerPopupTitle")?;
      }
      if let Some(f) = self.SpoilerPopupDescription() {
        s.serialize_field("SpoilerPopupDescription", &f)?;
      } else {
        s.skip_field("SpoilerPopupDescription")?;
      }
      s.serialize_field("IsWarningPopUp", &self.IsWarningPopUp())?;
      s.serialize_field("ConditionScenarioModeId", &self.ConditionScenarioModeId())?;
    s.end()
  }
}

pub struct ContentSpoilerPopupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContentSpoilerPopupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(ContentSpoilerPopupExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_SpoilerPopupTitle(&mut self, SpoilerPopupTitle: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContentSpoilerPopupExcel::VT_SPOILERPOPUPTITLE, SpoilerPopupTitle);
  }
  #[inline]
  pub fn add_SpoilerPopupDescription(&mut self, SpoilerPopupDescription: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContentSpoilerPopupExcel::VT_SPOILERPOPUPDESCRIPTION, SpoilerPopupDescription);
  }
  #[inline]
  pub fn add_IsWarningPopUp(&mut self, IsWarningPopUp: bool) {
    self.fbb_.push_slot::<bool>(ContentSpoilerPopupExcel::VT_ISWARNINGPOPUP, IsWarningPopUp, false);
  }
  #[inline]
  pub fn add_ConditionScenarioModeId(&mut self, ConditionScenarioModeId: i64) {
    self.fbb_.push_slot::<i64>(ContentSpoilerPopupExcel::VT_CONDITIONSCENARIOMODEID, ConditionScenarioModeId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContentSpoilerPopupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContentSpoilerPopupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContentSpoilerPopupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContentSpoilerPopupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContentSpoilerPopupExcel");
      ds.field("ContentType", &self.ContentType());
      ds.field("SpoilerPopupTitle", &self.SpoilerPopupTitle());
      ds.field("SpoilerPopupDescription", &self.SpoilerPopupDescription());
      ds.field("IsWarningPopUp", &self.IsWarningPopUp());
      ds.field("ConditionScenarioModeId", &self.ConditionScenarioModeId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ContentSpoilerPopupExcelT {
  pub ContentType: ContentType,
  pub SpoilerPopupTitle: Option<String>,
  pub SpoilerPopupDescription: Option<String>,
  pub IsWarningPopUp: bool,
  pub ConditionScenarioModeId: i64,
}
impl Default for ContentSpoilerPopupExcelT {
  fn default() -> Self {
    Self {
      ContentType: ContentType::None,
      SpoilerPopupTitle: None,
      SpoilerPopupDescription: None,
      IsWarningPopUp: false,
      ConditionScenarioModeId: 0,
    }
  }
}
impl ContentSpoilerPopupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ContentSpoilerPopupExcel<'b>> {
    let ContentType = self.ContentType;
    let SpoilerPopupTitle = self.SpoilerPopupTitle.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpoilerPopupDescription = self.SpoilerPopupDescription.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IsWarningPopUp = self.IsWarningPopUp;
    let ConditionScenarioModeId = self.ConditionScenarioModeId;
    ContentSpoilerPopupExcel::create(_fbb, &ContentSpoilerPopupExcelArgs{
      ContentType,
      SpoilerPopupTitle,
      SpoilerPopupDescription,
      IsWarningPopUp,
      ConditionScenarioModeId,
    })
  }
}
