// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TranscendenceRecipeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TranscendenceRecipeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TranscendenceRecipeExcel<'a> {
  type Inner = TranscendenceRecipeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TranscendenceRecipeExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DEVNAME: flatbuffers::VOffsetT = 6;
  pub const VT_COSTCURRENCYTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_COSTCURRENCYAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_PARCELAMOUNT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TranscendenceRecipeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TranscendenceRecipeExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TranscendenceRecipeExcel<'bldr>> {
    let mut builder = TranscendenceRecipeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TranscendenceRecipe");
      let x = args.CostCurrencyAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostCurrencyAmount(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ParcelAmount {
        builder.add_ParcelAmount(x);
      }
      if let Some(x) = args.ParcelId {
        builder.add_ParcelId(x);
      }
      if let Some(x) = args.ParcelType {
        builder.add_ParcelType(x);
      }
      let x = args.CostCurrencyType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CostCurrencyType(x);
      if let Some(x) = args.DevName {
        builder.add_DevName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> TranscendenceRecipeExcelT {
    let key = table_encryption_service::create_key(b"TranscendenceRecipe");
      let Id = self.Id();
    let DevName = self.DevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CostCurrencyType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CostCurrencyType(), &key)
      } else {
        self.CostCurrencyType()
      };
      let CostCurrencyAmount = self.CostCurrencyAmount();
    let ParcelType = self.ParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ParcelId = self.ParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ParcelAmount = self.ParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    TranscendenceRecipeExcelT {
      Id,
      DevName,
      CostCurrencyType,
      CostCurrencyAmount,
      ParcelType,
      ParcelId,
      ParcelAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TranscendenceRecipeExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TranscendenceRecipeExcel::VT_DEVNAME, None)}
  }
  #[inline]
  pub fn CostCurrencyType(&self) -> CurrencyTypes {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CurrencyTypes>(TranscendenceRecipeExcel::VT_COSTCURRENCYTYPE, Some(CurrencyTypes::Invalid)).unwrap()}
  }
  #[inline]
  pub fn CostCurrencyAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TranscendenceRecipeExcel::VT_COSTCURRENCYAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(TranscendenceRecipeExcel::VT_PARCELTYPE, None)}
  }
  #[inline]
  pub fn ParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TranscendenceRecipeExcel::VT_PARCELID, None)}
  }
  #[inline]
  pub fn ParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(TranscendenceRecipeExcel::VT_PARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for TranscendenceRecipeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DevName", Self::VT_DEVNAME, false)?
     .visit_field::<CurrencyTypes>("CostCurrencyType", Self::VT_COSTCURRENCYTYPE, false)?
     .visit_field::<i64>("CostCurrencyAmount", Self::VT_COSTCURRENCYAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("ParcelAmount", Self::VT_PARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct TranscendenceRecipeExcelArgs<'a> {
    pub Id: i64,
    pub DevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CostCurrencyType: CurrencyTypes,
    pub CostCurrencyAmount: i64,
    pub ParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub ParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for TranscendenceRecipeExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TranscendenceRecipeExcelArgs {
      Id: 0,
      DevName: None,
      CostCurrencyType: CurrencyTypes::Invalid,
      CostCurrencyAmount: 0,
      ParcelType: None,
      ParcelId: None,
      ParcelAmount: None,
    }
  }
}

impl Serialize for TranscendenceRecipeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TranscendenceRecipeExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.DevName() {
        s.serialize_field("DevName", &f)?;
      } else {
        s.skip_field("DevName")?;
      }
      s.serialize_field("CostCurrencyType", &self.CostCurrencyType())?;
      s.serialize_field("CostCurrencyAmount", &self.CostCurrencyAmount())?;
      if let Some(f) = self.ParcelType() {
        s.serialize_field("ParcelType", &f)?;
      } else {
        s.skip_field("ParcelType")?;
      }
      if let Some(f) = self.ParcelId() {
        s.serialize_field("ParcelId", &f)?;
      } else {
        s.skip_field("ParcelId")?;
      }
      if let Some(f) = self.ParcelAmount() {
        s.serialize_field("ParcelAmount", &f)?;
      } else {
        s.skip_field("ParcelAmount")?;
      }
    s.end()
  }
}

pub struct TranscendenceRecipeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TranscendenceRecipeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(TranscendenceRecipeExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_DevName(&mut self, DevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TranscendenceRecipeExcel::VT_DEVNAME, DevName);
  }
  #[inline]
  pub fn add_CostCurrencyType(&mut self, CostCurrencyType: CurrencyTypes) {
    self.fbb_.push_slot::<CurrencyTypes>(TranscendenceRecipeExcel::VT_COSTCURRENCYTYPE, CostCurrencyType, CurrencyTypes::Invalid);
  }
  #[inline]
  pub fn add_CostCurrencyAmount(&mut self, CostCurrencyAmount: i64) {
    self.fbb_.push_slot::<i64>(TranscendenceRecipeExcel::VT_COSTCURRENCYAMOUNT, CostCurrencyAmount, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TranscendenceRecipeExcel::VT_PARCELTYPE, ParcelType);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TranscendenceRecipeExcel::VT_PARCELID, ParcelId);
  }
  #[inline]
  pub fn add_ParcelAmount(&mut self, ParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TranscendenceRecipeExcel::VT_PARCELAMOUNT, ParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TranscendenceRecipeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TranscendenceRecipeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TranscendenceRecipeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TranscendenceRecipeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TranscendenceRecipeExcel");
      ds.field("Id", &self.Id());
      ds.field("DevName", &self.DevName());
      ds.field("CostCurrencyType", &self.CostCurrencyType());
      ds.field("CostCurrencyAmount", &self.CostCurrencyAmount());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("ParcelAmount", &self.ParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TranscendenceRecipeExcelT {
  pub Id: i64,
  pub DevName: Option<String>,
  pub CostCurrencyType: CurrencyTypes,
  pub CostCurrencyAmount: i64,
  pub ParcelType: Option<Vec<ParcelType>>,
  pub ParcelId: Option<Vec<i64>>,
  pub ParcelAmount: Option<Vec<i32>>,
}
impl Default for TranscendenceRecipeExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      DevName: None,
      CostCurrencyType: CurrencyTypes::Invalid,
      CostCurrencyAmount: 0,
      ParcelType: None,
      ParcelId: None,
      ParcelAmount: None,
    }
  }
}
impl TranscendenceRecipeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TranscendenceRecipeExcel<'b>> {
    let Id = self.Id;
    let DevName = self.DevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CostCurrencyType = self.CostCurrencyType;
    let CostCurrencyAmount = self.CostCurrencyAmount;
    let ParcelType = self.ParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParcelId = self.ParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParcelAmount = self.ParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    TranscendenceRecipeExcel::create(_fbb, &TranscendenceRecipeExcelArgs{
      Id,
      DevName,
      CostCurrencyType,
      CostCurrencyAmount,
      ParcelType,
      ParcelId,
      ParcelAmount,
    })
  }
}
