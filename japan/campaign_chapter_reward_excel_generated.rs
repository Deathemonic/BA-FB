// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CampaignChapterRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CampaignChapterRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CampaignChapterRewardExcel<'a> {
  type Inner = CampaignChapterRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CampaignChapterRewardExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CAMPAIGNCHAPTERSTAR: flatbuffers::VOffsetT = 6;
  pub const VT_CHAPTERREWARDPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_CHAPTERREWARDID: flatbuffers::VOffsetT = 10;
  pub const VT_CHAPTERREWARDAMOUNT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CampaignChapterRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CampaignChapterRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CampaignChapterRewardExcel<'bldr>> {
    let mut builder = CampaignChapterRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CampaignChapterReward");
      let x = args.CampaignChapterStar;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CampaignChapterStar(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ChapterRewardAmount {
        builder.add_ChapterRewardAmount(x);
      }
      if let Some(x) = args.ChapterRewardId {
        builder.add_ChapterRewardId(x);
      }
      if let Some(x) = args.ChapterRewardParcelType {
        builder.add_ChapterRewardParcelType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CampaignChapterRewardExcelT {
    let key = table_encryption_service::create_key(b"CampaignChapterReward");
      let Id = self.Id();
      let CampaignChapterStar = self.CampaignChapterStar();
    let ChapterRewardParcelType = self.ChapterRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ChapterRewardId = self.ChapterRewardId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ChapterRewardAmount = self.ChapterRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    CampaignChapterRewardExcelT {
      Id,
      CampaignChapterStar,
      ChapterRewardParcelType,
      ChapterRewardId,
      ChapterRewardAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignChapterRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CampaignChapterStar(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignChapterRewardExcel::VT_CAMPAIGNCHAPTERSTAR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChapterRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(CampaignChapterRewardExcel::VT_CHAPTERREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn ChapterRewardId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignChapterRewardExcel::VT_CHAPTERREWARDID, None)}
  }
  #[inline]
  pub fn ChapterRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CampaignChapterRewardExcel::VT_CHAPTERREWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for CampaignChapterRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CampaignChapterStar", Self::VT_CAMPAIGNCHAPTERSTAR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("ChapterRewardParcelType", Self::VT_CHAPTERREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ChapterRewardId", Self::VT_CHAPTERREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("ChapterRewardAmount", Self::VT_CHAPTERREWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct CampaignChapterRewardExcelArgs<'a> {
    pub Id: i64,
    pub CampaignChapterStar: i64,
    pub ChapterRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub ChapterRewardId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ChapterRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for CampaignChapterRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CampaignChapterRewardExcelArgs {
      Id: 0,
      CampaignChapterStar: 0,
      ChapterRewardParcelType: None,
      ChapterRewardId: None,
      ChapterRewardAmount: None,
    }
  }
}

impl Serialize for CampaignChapterRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CampaignChapterRewardExcel", 5)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CampaignChapterStar", &self.CampaignChapterStar())?;
      if let Some(f) = self.ChapterRewardParcelType() {
        s.serialize_field("ChapterRewardParcelType", &f)?;
      } else {
        s.skip_field("ChapterRewardParcelType")?;
      }
      if let Some(f) = self.ChapterRewardId() {
        s.serialize_field("ChapterRewardId", &f)?;
      } else {
        s.skip_field("ChapterRewardId")?;
      }
      if let Some(f) = self.ChapterRewardAmount() {
        s.serialize_field("ChapterRewardAmount", &f)?;
      } else {
        s.skip_field("ChapterRewardAmount")?;
      }
    s.end()
  }
}

pub struct CampaignChapterRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CampaignChapterRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CampaignChapterRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CampaignChapterStar(&mut self, CampaignChapterStar: i64) {
    self.fbb_.push_slot::<i64>(CampaignChapterRewardExcel::VT_CAMPAIGNCHAPTERSTAR, CampaignChapterStar, 0);
  }
  #[inline]
  pub fn add_ChapterRewardParcelType(&mut self, ChapterRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterRewardExcel::VT_CHAPTERREWARDPARCELTYPE, ChapterRewardParcelType);
  }
  #[inline]
  pub fn add_ChapterRewardId(&mut self, ChapterRewardId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterRewardExcel::VT_CHAPTERREWARDID, ChapterRewardId);
  }
  #[inline]
  pub fn add_ChapterRewardAmount(&mut self, ChapterRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterRewardExcel::VT_CHAPTERREWARDAMOUNT, ChapterRewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CampaignChapterRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CampaignChapterRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CampaignChapterRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CampaignChapterRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CampaignChapterRewardExcel");
      ds.field("Id", &self.Id());
      ds.field("CampaignChapterStar", &self.CampaignChapterStar());
      ds.field("ChapterRewardParcelType", &self.ChapterRewardParcelType());
      ds.field("ChapterRewardId", &self.ChapterRewardId());
      ds.field("ChapterRewardAmount", &self.ChapterRewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CampaignChapterRewardExcelT {
  pub Id: i64,
  pub CampaignChapterStar: i64,
  pub ChapterRewardParcelType: Option<Vec<ParcelType>>,
  pub ChapterRewardId: Option<Vec<i64>>,
  pub ChapterRewardAmount: Option<Vec<i32>>,
}
impl Default for CampaignChapterRewardExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CampaignChapterStar: 0,
      ChapterRewardParcelType: None,
      ChapterRewardId: None,
      ChapterRewardAmount: None,
    }
  }
}
impl CampaignChapterRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CampaignChapterRewardExcel<'b>> {
    let Id = self.Id;
    let CampaignChapterStar = self.CampaignChapterStar;
    let ChapterRewardParcelType = self.ChapterRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ChapterRewardId = self.ChapterRewardId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ChapterRewardAmount = self.ChapterRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CampaignChapterRewardExcel::create(_fbb, &CampaignChapterRewardExcelArgs{
      Id,
      CampaignChapterStar,
      ChapterRewardParcelType,
      ChapterRewardId,
      ChapterRewardAmount,
    })
  }
}
