// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGSkillExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGSkillExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGSkillExcel<'a> {
  type Inner = MinigameCCGSkillExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGSkillExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SKILLTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DATALOADPATH: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 12;
  pub const VT_SKILLICON: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGSkillExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGSkillExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGSkillExcel<'bldr>> {
    let mut builder = MinigameCCGSkillExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGSkill");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.SkillIcon {
        builder.add_SkillIcon(x);
      }
      let x = args.Description;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Description(x);
      let x = args.Name;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Name(x);
      if let Some(x) = args.DataLoadPath {
        builder.add_DataLoadPath(x);
      }
      if let Some(x) = args.SkillType {
        builder.add_SkillType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGSkillExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGSkill");
      let Id = self.Id();
    let SkillType = self.SkillType().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DataLoadPath = self.DataLoadPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Name = self.Name();
      let Description = self.Description();
    let SkillIcon = self.SkillIcon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MinigameCCGSkillExcelT {
      Id,
      SkillType,
      DataLoadPath,
      Name,
      Description,
      SkillIcon,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGSkillExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkillType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGSkillExcel::VT_SKILLTYPE, None)}
  }
  #[inline]
  pub fn DataLoadPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGSkillExcel::VT_DATALOADPATH, None)}
  }
  #[inline]
  pub fn Name(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGSkillExcel::VT_NAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Description(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGSkillExcel::VT_DESCRIPTION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkillIcon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGSkillExcel::VT_SKILLICON, None)}
  }
}

impl flatbuffers::Verifiable for MinigameCCGSkillExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillType", Self::VT_SKILLTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DataLoadPath", Self::VT_DATALOADPATH, false)?
     .visit_field::<u32>("Name", Self::VT_NAME, false)?
     .visit_field::<u32>("Description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillIcon", Self::VT_SKILLICON, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGSkillExcelArgs<'a> {
    pub Id: i64,
    pub SkillType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DataLoadPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Name: u32,
    pub Description: u32,
    pub SkillIcon: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MinigameCCGSkillExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGSkillExcelArgs {
      Id: 0,
      SkillType: None,
      DataLoadPath: None,
      Name: 0,
      Description: 0,
      SkillIcon: None,
    }
  }
}

impl Serialize for MinigameCCGSkillExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGSkillExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.SkillType() {
        s.serialize_field("SkillType", &f)?;
      } else {
        s.skip_field("SkillType")?;
      }
      if let Some(f) = self.DataLoadPath() {
        s.serialize_field("DataLoadPath", &f)?;
      } else {
        s.skip_field("DataLoadPath")?;
      }
      s.serialize_field("Name", &self.Name())?;
      s.serialize_field("Description", &self.Description())?;
      if let Some(f) = self.SkillIcon() {
        s.serialize_field("SkillIcon", &f)?;
      } else {
        s.skip_field("SkillIcon")?;
      }
    s.end()
  }
}

pub struct MinigameCCGSkillExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGSkillExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGSkillExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_SkillType(&mut self, SkillType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGSkillExcel::VT_SKILLTYPE, SkillType);
  }
  #[inline]
  pub fn add_DataLoadPath(&mut self, DataLoadPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGSkillExcel::VT_DATALOADPATH, DataLoadPath);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGSkillExcel::VT_NAME, Name, 0);
  }
  #[inline]
  pub fn add_Description(&mut self, Description: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGSkillExcel::VT_DESCRIPTION, Description, 0);
  }
  #[inline]
  pub fn add_SkillIcon(&mut self, SkillIcon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGSkillExcel::VT_SKILLICON, SkillIcon);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGSkillExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGSkillExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGSkillExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGSkillExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGSkillExcel");
      ds.field("Id", &self.Id());
      ds.field("SkillType", &self.SkillType());
      ds.field("DataLoadPath", &self.DataLoadPath());
      ds.field("Name", &self.Name());
      ds.field("Description", &self.Description());
      ds.field("SkillIcon", &self.SkillIcon());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGSkillExcelT {
  pub Id: i64,
  pub SkillType: Option<String>,
  pub DataLoadPath: Option<String>,
  pub Name: u32,
  pub Description: u32,
  pub SkillIcon: Option<String>,
}
impl Default for MinigameCCGSkillExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      SkillType: None,
      DataLoadPath: None,
      Name: 0,
      Description: 0,
      SkillIcon: None,
    }
  }
}
impl MinigameCCGSkillExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGSkillExcel<'b>> {
    let Id = self.Id;
    let SkillType = self.SkillType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DataLoadPath = self.DataLoadPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Name = self.Name;
    let Description = self.Description;
    let SkillIcon = self.SkillIcon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MinigameCCGSkillExcel::create(_fbb, &MinigameCCGSkillExcelArgs{
      Id,
      SkillType,
      DataLoadPath,
      Name,
      Description,
      SkillIcon,
    })
  }
}
