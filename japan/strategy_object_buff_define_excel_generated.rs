// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StrategyObjectBuffDefineExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StrategyObjectBuffDefineExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StrategyObjectBuffDefineExcel<'a> {
  type Inner = StrategyObjectBuffDefineExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StrategyObjectBuffDefineExcel<'a> {
  pub const VT_STRATEGYOBJECTBUFFID: flatbuffers::VOffsetT = 4;
  pub const VT_STRATEGYOBJECTTURN: flatbuffers::VOffsetT = 6;
  pub const VT_SKILLGROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZECODEID: flatbuffers::VOffsetT = 10;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StrategyObjectBuffDefineExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StrategyObjectBuffDefineExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<StrategyObjectBuffDefineExcel<'bldr>> {
    let mut builder = StrategyObjectBuffDefineExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"StrategyObjectBuffDefine");
      let x = args.StrategyObjectBuffID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StrategyObjectBuffID(x);
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      let x = args.LocalizeCodeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeCodeId(x);
      if let Some(x) = args.SkillGroupId {
        builder.add_SkillGroupId(x);
      }
      let x = args.StrategyObjectTurn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StrategyObjectTurn(x);
    builder.finish()
  }

  pub fn unpack(&self) -> StrategyObjectBuffDefineExcelT {
    let key = table_encryption_service::create_key(b"StrategyObjectBuffDefine");
      let StrategyObjectBuffID = self.StrategyObjectBuffID();
      let StrategyObjectTurn = self.StrategyObjectTurn();
    let SkillGroupId = self.SkillGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeCodeId = self.LocalizeCodeId();
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    StrategyObjectBuffDefineExcelT {
      StrategyObjectBuffID,
      StrategyObjectTurn,
      SkillGroupId,
      LocalizeCodeId,
      IconPath,
    }
  }

  #[inline]
  pub fn StrategyObjectBuffID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StrategyObjectBuffDefineExcel::VT_STRATEGYOBJECTBUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrategyObjectTurn(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StrategyObjectBuffDefineExcel::VT_STRATEGYOBJECTTURN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkillGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StrategyObjectBuffDefineExcel::VT_SKILLGROUPID, None)}
  }
  #[inline]
  pub fn LocalizeCodeId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(StrategyObjectBuffDefineExcel::VT_LOCALIZECODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StrategyObjectBuffDefineExcel::VT_ICONPATH, None)}
  }
}

impl flatbuffers::Verifiable for StrategyObjectBuffDefineExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("StrategyObjectBuffID", Self::VT_STRATEGYOBJECTBUFFID, false)?
     .visit_field::<i32>("StrategyObjectTurn", Self::VT_STRATEGYOBJECTTURN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillGroupId", Self::VT_SKILLGROUPID, false)?
     .visit_field::<u32>("LocalizeCodeId", Self::VT_LOCALIZECODEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct StrategyObjectBuffDefineExcelArgs<'a> {
    pub StrategyObjectBuffID: i64,
    pub StrategyObjectTurn: i32,
    pub SkillGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeCodeId: u32,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for StrategyObjectBuffDefineExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    StrategyObjectBuffDefineExcelArgs {
      StrategyObjectBuffID: 0,
      StrategyObjectTurn: 0,
      SkillGroupId: None,
      LocalizeCodeId: 0,
      IconPath: None,
    }
  }
}

impl Serialize for StrategyObjectBuffDefineExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StrategyObjectBuffDefineExcel", 5)?;
      s.serialize_field("StrategyObjectBuffID", &self.StrategyObjectBuffID())?;
      s.serialize_field("StrategyObjectTurn", &self.StrategyObjectTurn())?;
      if let Some(f) = self.SkillGroupId() {
        s.serialize_field("SkillGroupId", &f)?;
      } else {
        s.skip_field("SkillGroupId")?;
      }
      s.serialize_field("LocalizeCodeId", &self.LocalizeCodeId())?;
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
    s.end()
  }
}

pub struct StrategyObjectBuffDefineExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StrategyObjectBuffDefineExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StrategyObjectBuffID(&mut self, StrategyObjectBuffID: i64) {
    self.fbb_.push_slot::<i64>(StrategyObjectBuffDefineExcel::VT_STRATEGYOBJECTBUFFID, StrategyObjectBuffID, 0);
  }
  #[inline]
  pub fn add_StrategyObjectTurn(&mut self, StrategyObjectTurn: i32) {
    self.fbb_.push_slot::<i32>(StrategyObjectBuffDefineExcel::VT_STRATEGYOBJECTTURN, StrategyObjectTurn, 0);
  }
  #[inline]
  pub fn add_SkillGroupId(&mut self, SkillGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StrategyObjectBuffDefineExcel::VT_SKILLGROUPID, SkillGroupId);
  }
  #[inline]
  pub fn add_LocalizeCodeId(&mut self, LocalizeCodeId: u32) {
    self.fbb_.push_slot::<u32>(StrategyObjectBuffDefineExcel::VT_LOCALIZECODEID, LocalizeCodeId, 0);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StrategyObjectBuffDefineExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StrategyObjectBuffDefineExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StrategyObjectBuffDefineExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StrategyObjectBuffDefineExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StrategyObjectBuffDefineExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StrategyObjectBuffDefineExcel");
      ds.field("StrategyObjectBuffID", &self.StrategyObjectBuffID());
      ds.field("StrategyObjectTurn", &self.StrategyObjectTurn());
      ds.field("SkillGroupId", &self.SkillGroupId());
      ds.field("LocalizeCodeId", &self.LocalizeCodeId());
      ds.field("IconPath", &self.IconPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StrategyObjectBuffDefineExcelT {
  pub StrategyObjectBuffID: i64,
  pub StrategyObjectTurn: i32,
  pub SkillGroupId: Option<String>,
  pub LocalizeCodeId: u32,
  pub IconPath: Option<String>,
}
impl Default for StrategyObjectBuffDefineExcelT {
  fn default() -> Self {
    Self {
      StrategyObjectBuffID: 0,
      StrategyObjectTurn: 0,
      SkillGroupId: None,
      LocalizeCodeId: 0,
      IconPath: None,
    }
  }
}
impl StrategyObjectBuffDefineExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<StrategyObjectBuffDefineExcel<'b>> {
    let StrategyObjectBuffID = self.StrategyObjectBuffID;
    let StrategyObjectTurn = self.StrategyObjectTurn;
    let SkillGroupId = self.SkillGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeCodeId = self.LocalizeCodeId;
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    StrategyObjectBuffDefineExcel::create(_fbb, &StrategyObjectBuffDefineExcelArgs{
      StrategyObjectBuffID,
      StrategyObjectTurn,
      SkillGroupId,
      LocalizeCodeId,
      IconPath,
    })
  }
}
