// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LimitedStageSeasonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LimitedStageSeasonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LimitedStageSeasonExcel<'a> {
  type Inner = LimitedStageSeasonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LimitedStageSeasonExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 6;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 8;
  pub const VT_TYPEACOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_TYPEBCOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_TYPECCOUNT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LimitedStageSeasonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LimitedStageSeasonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LimitedStageSeasonExcel<'bldr>> {
    let mut builder = LimitedStageSeasonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LimitedStageSeason");
      let x = args.TypeCCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TypeCCount(x);
      let x = args.TypeBCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TypeBCount(x);
      let x = args.TypeACount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TypeACount(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> LimitedStageSeasonExcelT {
    let key = table_encryption_service::create_key(b"LimitedStageSeason");
      let Id = self.Id();
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let TypeACount = self.TypeACount();
      let TypeBCount = self.TypeBCount();
      let TypeCCount = self.TypeCCount();
    LimitedStageSeasonExcelT {
      Id,
      StartDate,
      EndDate,
      TypeACount,
      TypeBCount,
      TypeCCount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageSeasonExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitedStageSeasonExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitedStageSeasonExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn TypeACount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageSeasonExcel::VT_TYPEACOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TypeBCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageSeasonExcel::VT_TYPEBCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TypeCCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageSeasonExcel::VT_TYPECCOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LimitedStageSeasonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<i64>("TypeACount", Self::VT_TYPEACOUNT, false)?
     .visit_field::<i64>("TypeBCount", Self::VT_TYPEBCOUNT, false)?
     .visit_field::<i64>("TypeCCount", Self::VT_TYPECCOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct LimitedStageSeasonExcelArgs<'a> {
    pub Id: i64,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TypeACount: i64,
    pub TypeBCount: i64,
    pub TypeCCount: i64,
}
impl<'a> Default for LimitedStageSeasonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LimitedStageSeasonExcelArgs {
      Id: 0,
      StartDate: None,
      EndDate: None,
      TypeACount: 0,
      TypeBCount: 0,
      TypeCCount: 0,
    }
  }
}

impl Serialize for LimitedStageSeasonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LimitedStageSeasonExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      s.serialize_field("TypeACount", &self.TypeACount())?;
      s.serialize_field("TypeBCount", &self.TypeBCount())?;
      s.serialize_field("TypeCCount", &self.TypeCCount())?;
    s.end()
  }
}

pub struct LimitedStageSeasonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LimitedStageSeasonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageSeasonExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageSeasonExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageSeasonExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_TypeACount(&mut self, TypeACount: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageSeasonExcel::VT_TYPEACOUNT, TypeACount, 0);
  }
  #[inline]
  pub fn add_TypeBCount(&mut self, TypeBCount: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageSeasonExcel::VT_TYPEBCOUNT, TypeBCount, 0);
  }
  #[inline]
  pub fn add_TypeCCount(&mut self, TypeCCount: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageSeasonExcel::VT_TYPECCOUNT, TypeCCount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LimitedStageSeasonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LimitedStageSeasonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LimitedStageSeasonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LimitedStageSeasonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LimitedStageSeasonExcel");
      ds.field("Id", &self.Id());
      ds.field("StartDate", &self.StartDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("TypeACount", &self.TypeACount());
      ds.field("TypeBCount", &self.TypeBCount());
      ds.field("TypeCCount", &self.TypeCCount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LimitedStageSeasonExcelT {
  pub Id: i64,
  pub StartDate: Option<String>,
  pub EndDate: Option<String>,
  pub TypeACount: i64,
  pub TypeBCount: i64,
  pub TypeCCount: i64,
}
impl Default for LimitedStageSeasonExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      StartDate: None,
      EndDate: None,
      TypeACount: 0,
      TypeBCount: 0,
      TypeCCount: 0,
    }
  }
}
impl LimitedStageSeasonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LimitedStageSeasonExcel<'b>> {
    let Id = self.Id;
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TypeACount = self.TypeACount;
    let TypeBCount = self.TypeBCount;
    let TypeCCount = self.TypeCCount;
    LimitedStageSeasonExcel::create(_fbb, &LimitedStageSeasonExcelArgs{
      Id,
      StartDate,
      EndDate,
      TypeACount,
      TypeBCount,
      TypeCCount,
    })
  }
}
