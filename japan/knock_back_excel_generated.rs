// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum KnockBackExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KnockBackExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KnockBackExcel<'a> {
  type Inner = KnockBackExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> KnockBackExcel<'a> {
  pub const VT_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_DIST: flatbuffers::VOffsetT = 6;
  pub const VT_SPEED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KnockBackExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KnockBackExcelArgs
  ) -> flatbuffers::WIPOffset<KnockBackExcel<'bldr>> {
    let mut builder = KnockBackExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"KnockBack");
      let x = args.Index;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Index(x);
      let x = args.Speed;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Speed(x);
      let x = args.Dist;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Dist(x);
    builder.finish()
  }

  pub fn unpack(&self) -> KnockBackExcelT {
    let key = table_encryption_service::create_key(b"KnockBack");
      let Index = self.Index();
      let Dist = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Dist(), &key)
      } else {
        self.Dist()
      };
      let Speed = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Speed(), &key)
      } else {
        self.Speed()
      };
    KnockBackExcelT {
      Index,
      Dist,
      Speed,
    }
  }

  #[inline]
  pub fn Index(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(KnockBackExcel::VT_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Dist(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(KnockBackExcel::VT_DIST, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Speed(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(KnockBackExcel::VT_SPEED, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for KnockBackExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Index", Self::VT_INDEX, false)?
     .visit_field::<f32>("Dist", Self::VT_DIST, false)?
     .visit_field::<f32>("Speed", Self::VT_SPEED, false)?
     .finish();
    Ok(())
  }
}
pub struct KnockBackExcelArgs {
    pub Index: i64,
    pub Dist: f32,
    pub Speed: f32,
}
impl<'a> Default for KnockBackExcelArgs {
  #[inline]
  fn default() -> Self {
    KnockBackExcelArgs {
      Index: 0,
      Dist: 0.0,
      Speed: 0.0,
    }
  }
}

impl Serialize for KnockBackExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("KnockBackExcel", 3)?;
      s.serialize_field("Index", &self.Index())?;
      s.serialize_field("Dist", &self.Dist())?;
      s.serialize_field("Speed", &self.Speed())?;
    s.end()
  }
}

pub struct KnockBackExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KnockBackExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Index(&mut self, Index: i64) {
    self.fbb_.push_slot::<i64>(KnockBackExcel::VT_INDEX, Index, 0);
  }
  #[inline]
  pub fn add_Dist(&mut self, Dist: f32) {
    self.fbb_.push_slot::<f32>(KnockBackExcel::VT_DIST, Dist, 0.0);
  }
  #[inline]
  pub fn add_Speed(&mut self, Speed: f32) {
    self.fbb_.push_slot::<f32>(KnockBackExcel::VT_SPEED, Speed, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KnockBackExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KnockBackExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KnockBackExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KnockBackExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KnockBackExcel");
      ds.field("Index", &self.Index());
      ds.field("Dist", &self.Dist());
      ds.field("Speed", &self.Speed());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct KnockBackExcelT {
  pub Index: i64,
  pub Dist: f32,
  pub Speed: f32,
}
impl Default for KnockBackExcelT {
  fn default() -> Self {
    Self {
      Index: 0,
      Dist: 0.0,
      Speed: 0.0,
    }
  }
}
impl KnockBackExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<KnockBackExcel<'b>> {
    let Index = self.Index;
    let Dist = self.Dist;
    let Speed = self.Speed;
    KnockBackExcel::create(_fbb, &KnockBackExcelArgs{
      Index,
      Dist,
      Speed,
    })
  }
}
