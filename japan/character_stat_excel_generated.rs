// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterStatExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterStatExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterStatExcel<'a> {
  type Inner = CharacterStatExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterStatExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_STABILITYRATE: flatbuffers::VOffsetT = 6;
  pub const VT_STABILITYPOINT: flatbuffers::VOffsetT = 8;
  pub const VT_ATTACKPOWER1: flatbuffers::VOffsetT = 10;
  pub const VT_ATTACKPOWER100: flatbuffers::VOffsetT = 12;
  pub const VT_MAXHP1: flatbuffers::VOffsetT = 14;
  pub const VT_MAXHP100: flatbuffers::VOffsetT = 16;
  pub const VT_DEFENSEPOWER1: flatbuffers::VOffsetT = 18;
  pub const VT_DEFENSEPOWER100: flatbuffers::VOffsetT = 20;
  pub const VT_HEALPOWER1: flatbuffers::VOffsetT = 22;
  pub const VT_HEALPOWER100: flatbuffers::VOffsetT = 24;
  pub const VT_DODGEPOINT: flatbuffers::VOffsetT = 26;
  pub const VT_ACCURACYPOINT: flatbuffers::VOffsetT = 28;
  pub const VT_CRITICALPOINT: flatbuffers::VOffsetT = 30;
  pub const VT_CRITICALRESISTPOINT: flatbuffers::VOffsetT = 32;
  pub const VT_CRITICALDAMAGERATE: flatbuffers::VOffsetT = 34;
  pub const VT_CRITICALDAMAGERESISTRATE: flatbuffers::VOffsetT = 36;
  pub const VT_BLOCKRATE: flatbuffers::VOffsetT = 38;
  pub const VT_HEALEFFECTIVENESSRATE: flatbuffers::VOffsetT = 40;
  pub const VT_OPPRESSIONPOWER: flatbuffers::VOffsetT = 42;
  pub const VT_OPPRESSIONRESIST: flatbuffers::VOffsetT = 44;
  pub const VT_DEFENSEPENETRATION1: flatbuffers::VOffsetT = 46;
  pub const VT_DEFENSEPENETRATION100: flatbuffers::VOffsetT = 48;
  pub const VT_DEFENSEPENETRATIONRESIST1: flatbuffers::VOffsetT = 50;
  pub const VT_DEFENSEPENETRATIONRESIST100: flatbuffers::VOffsetT = 52;
  pub const VT_ENHANCEEXPLOSIONRATE: flatbuffers::VOffsetT = 54;
  pub const VT_ENHANCEPIERCERATE: flatbuffers::VOffsetT = 56;
  pub const VT_ENHANCEMYSTICRATE: flatbuffers::VOffsetT = 58;
  pub const VT_ENHANCESONICRATE: flatbuffers::VOffsetT = 60;
  pub const VT_ENHANCESIEGERATE: flatbuffers::VOffsetT = 62;
  pub const VT_ENHANCENORMALRATE: flatbuffers::VOffsetT = 64;
  pub const VT_ENHANCELIGHTARMORRATE: flatbuffers::VOffsetT = 66;
  pub const VT_ENHANCEHEAVYARMORRATE: flatbuffers::VOffsetT = 68;
  pub const VT_ENHANCEUNARMEDRATE: flatbuffers::VOffsetT = 70;
  pub const VT_ENHANCEELASTICARMORRATE: flatbuffers::VOffsetT = 72;
  pub const VT_ENHANCESTRUCTURERATE: flatbuffers::VOffsetT = 74;
  pub const VT_ENHANCENORMALARMORRATE: flatbuffers::VOffsetT = 76;
  pub const VT_EXTENDBUFFDURATION: flatbuffers::VOffsetT = 78;
  pub const VT_EXTENDDEBUFFDURATION: flatbuffers::VOffsetT = 80;
  pub const VT_EXTENDCROWDCONTROLDURATION: flatbuffers::VOffsetT = 82;
  pub const VT_AMMOCOUNT: flatbuffers::VOffsetT = 84;
  pub const VT_AMMOCOST: flatbuffers::VOffsetT = 86;
  pub const VT_IGNOREDELAYCOUNT: flatbuffers::VOffsetT = 88;
  pub const VT_NORMALATTACKSPEED: flatbuffers::VOffsetT = 90;
  pub const VT_RANGE: flatbuffers::VOffsetT = 92;
  pub const VT_INITIALRANGERATE: flatbuffers::VOffsetT = 94;
  pub const VT_MOVESPEED: flatbuffers::VOffsetT = 96;
  pub const VT_SIGHTPOINT: flatbuffers::VOffsetT = 98;
  pub const VT_ACTIVEGAUGE: flatbuffers::VOffsetT = 100;
  pub const VT_GROGGYGAUGE: flatbuffers::VOffsetT = 102;
  pub const VT_GROGGYTIME: flatbuffers::VOffsetT = 104;
  pub const VT_STRATEGYMOBILITY: flatbuffers::VOffsetT = 106;
  pub const VT_ACTIONCOUNT: flatbuffers::VOffsetT = 108;
  pub const VT_STRATEGYSIGHTRANGE: flatbuffers::VOffsetT = 110;
  pub const VT_DAMAGERATIO: flatbuffers::VOffsetT = 112;
  pub const VT_DAMAGEDRATIO: flatbuffers::VOffsetT = 114;
  pub const VT_DAMAGERATIO2INCREASE: flatbuffers::VOffsetT = 116;
  pub const VT_DAMAGERATIO2DECREASE: flatbuffers::VOffsetT = 118;
  pub const VT_DAMAGEDRATIO2INCREASE: flatbuffers::VOffsetT = 120;
  pub const VT_DAMAGEDRATIO2DECREASE: flatbuffers::VOffsetT = 122;
  pub const VT_EXDAMAGEDRATIOINCREASE: flatbuffers::VOffsetT = 124;
  pub const VT_EXDAMAGEDRATIODECREASE: flatbuffers::VOffsetT = 126;
  pub const VT_ENHANCEEXDAMAGERATE: flatbuffers::VOffsetT = 128;
  pub const VT_REDUCEEXDAMAGEDRATE: flatbuffers::VOffsetT = 130;
  pub const VT_ENHANCEBASICSDAMAGERATE: flatbuffers::VOffsetT = 132;
  pub const VT_REDUCEBASICSDAMAGEDRATE: flatbuffers::VOffsetT = 134;
  pub const VT_HEALRATE: flatbuffers::VOffsetT = 136;
  pub const VT_HEALLIGHTARMORRATE: flatbuffers::VOffsetT = 138;
  pub const VT_HEALHEAVYARMORRATE: flatbuffers::VOffsetT = 140;
  pub const VT_HEALUNARMEDRATE: flatbuffers::VOffsetT = 142;
  pub const VT_HEALELASTICARMORRATE: flatbuffers::VOffsetT = 144;
  pub const VT_HEALNORMALARMORRATE: flatbuffers::VOffsetT = 146;
  pub const VT_HEALEDEXPLOSIONRATE: flatbuffers::VOffsetT = 148;
  pub const VT_HEALEDPIERCERATE: flatbuffers::VOffsetT = 150;
  pub const VT_HEALEDMYSTICRATE: flatbuffers::VOffsetT = 152;
  pub const VT_HEALEDSONICRATE: flatbuffers::VOffsetT = 154;
  pub const VT_HEALEDNORMALRATE: flatbuffers::VOffsetT = 156;
  pub const VT_STREETBATTLEADAPTATION: flatbuffers::VOffsetT = 158;
  pub const VT_OUTDOORBATTLEADAPTATION: flatbuffers::VOffsetT = 160;
  pub const VT_INDOORBATTLEADAPTATION: flatbuffers::VOffsetT = 162;
  pub const VT_REGENCOST: flatbuffers::VOffsetT = 164;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterStatExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterStatExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterStatExcel<'bldr>> {
    let mut builder = CharacterStatExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterStat");
      let x = args.RegenCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RegenCost(x);
      let x = args.HealedNormalRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealedNormalRate(x);
      let x = args.HealedSonicRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealedSonicRate(x);
      let x = args.HealedMysticRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealedMysticRate(x);
      let x = args.HealedPierceRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealedPierceRate(x);
      let x = args.HealedExplosionRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealedExplosionRate(x);
      let x = args.HealNormalArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealNormalArmorRate(x);
      let x = args.HealElasticArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealElasticArmorRate(x);
      let x = args.HealUnarmedRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealUnarmedRate(x);
      let x = args.HealHeavyArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealHeavyArmorRate(x);
      let x = args.HealLightArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealLightArmorRate(x);
      let x = args.HealRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealRate(x);
      let x = args.ReduceBasicsDamagedRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ReduceBasicsDamagedRate(x);
      let x = args.EnhanceBasicsDamageRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceBasicsDamageRate(x);
      let x = args.ReduceExDamagedRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ReduceExDamagedRate(x);
      let x = args.EnhanceExDamageRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceExDamageRate(x);
      let x = args.ExDamagedRatioDecrease;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExDamagedRatioDecrease(x);
      let x = args.ExDamagedRatioIncrease;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExDamagedRatioIncrease(x);
      let x = args.DamagedRatio2Decrease;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamagedRatio2Decrease(x);
      let x = args.DamagedRatio2Increase;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamagedRatio2Increase(x);
      let x = args.DamageRatio2Decrease;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamageRatio2Decrease(x);
      let x = args.DamageRatio2Increase;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamageRatio2Increase(x);
      let x = args.DamagedRatio;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamagedRatio(x);
      let x = args.DamageRatio;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamageRatio(x);
      let x = args.StrategySightRange;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StrategySightRange(x);
      let x = args.ActionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ActionCount(x);
      let x = args.StrategyMobility;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StrategyMobility(x);
      let x = args.ActiveGauge;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ActiveGauge(x);
      let x = args.SightPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SightPoint(x);
      let x = args.MoveSpeed;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MoveSpeed(x);
      let x = args.InitialRangeRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_InitialRangeRate(x);
      let x = args.Range;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Range(x);
      let x = args.NormalAttackSpeed;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NormalAttackSpeed(x);
      let x = args.IgnoreDelayCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_IgnoreDelayCount(x);
      let x = args.AmmoCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AmmoCost(x);
      let x = args.AmmoCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AmmoCount(x);
      let x = args.ExtendCrowdControlDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExtendCrowdControlDuration(x);
      let x = args.ExtendDebuffDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExtendDebuffDuration(x);
      let x = args.ExtendBuffDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExtendBuffDuration(x);
      let x = args.EnhanceNormalArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceNormalArmorRate(x);
      let x = args.EnhanceStructureRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceStructureRate(x);
      let x = args.EnhanceElasticArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceElasticArmorRate(x);
      let x = args.EnhanceUnarmedRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceUnarmedRate(x);
      let x = args.EnhanceHeavyArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceHeavyArmorRate(x);
      let x = args.EnhanceLightArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceLightArmorRate(x);
      let x = args.EnhanceNormalRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceNormalRate(x);
      let x = args.EnhanceSiegeRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceSiegeRate(x);
      let x = args.EnhanceSonicRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceSonicRate(x);
      let x = args.EnhanceMysticRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceMysticRate(x);
      let x = args.EnhancePierceRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhancePierceRate(x);
      let x = args.EnhanceExplosionRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceExplosionRate(x);
      let x = args.DefensePenetrationResist100;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefensePenetrationResist100(x);
      let x = args.DefensePenetrationResist1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefensePenetrationResist1(x);
      let x = args.DefensePenetration100;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefensePenetration100(x);
      let x = args.DefensePenetration1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefensePenetration1(x);
      let x = args.OppressionResist;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OppressionResist(x);
      let x = args.OppressionPower;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OppressionPower(x);
      let x = args.HealEffectivenessRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealEffectivenessRate(x);
      let x = args.BlockRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BlockRate(x);
      let x = args.CriticalDamageResistRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CriticalDamageResistRate(x);
      let x = args.CriticalDamageRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CriticalDamageRate(x);
      let x = args.CriticalResistPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CriticalResistPoint(x);
      let x = args.CriticalPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CriticalPoint(x);
      let x = args.AccuracyPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccuracyPoint(x);
      let x = args.DodgePoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DodgePoint(x);
      let x = args.HealPower100;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealPower100(x);
      let x = args.HealPower1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HealPower1(x);
      let x = args.DefensePower100;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefensePower100(x);
      let x = args.DefensePower1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefensePower1(x);
      let x = args.MaxHP100;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxHP100(x);
      let x = args.MaxHP1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxHP1(x);
      let x = args.AttackPower100;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackPower100(x);
      let x = args.AttackPower1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackPower1(x);
      let x = args.StabilityPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StabilityPoint(x);
      let x = args.StabilityRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StabilityRate(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.IndoorBattleAdaptation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_IndoorBattleAdaptation(x);
      let x = args.OutdoorBattleAdaptation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OutdoorBattleAdaptation(x);
      let x = args.StreetBattleAdaptation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StreetBattleAdaptation(x);
      let x = args.GroggyTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_GroggyTime(x);
      let x = args.GroggyGauge;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_GroggyGauge(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterStatExcelT {
    let key = table_encryption_service::create_key(b"CharacterStat");
      let CharacterId = self.CharacterId();
      let StabilityRate = self.StabilityRate();
      let StabilityPoint = self.StabilityPoint();
      let AttackPower1 = self.AttackPower1();
      let AttackPower100 = self.AttackPower100();
      let MaxHP1 = self.MaxHP1();
      let MaxHP100 = self.MaxHP100();
      let DefensePower1 = self.DefensePower1();
      let DefensePower100 = self.DefensePower100();
      let HealPower1 = self.HealPower1();
      let HealPower100 = self.HealPower100();
      let DodgePoint = self.DodgePoint();
      let AccuracyPoint = self.AccuracyPoint();
      let CriticalPoint = self.CriticalPoint();
      let CriticalResistPoint = self.CriticalResistPoint();
      let CriticalDamageRate = self.CriticalDamageRate();
      let CriticalDamageResistRate = self.CriticalDamageResistRate();
      let BlockRate = self.BlockRate();
      let HealEffectivenessRate = self.HealEffectivenessRate();
      let OppressionPower = self.OppressionPower();
      let OppressionResist = self.OppressionResist();
      let DefensePenetration1 = self.DefensePenetration1();
      let DefensePenetration100 = self.DefensePenetration100();
      let DefensePenetrationResist1 = self.DefensePenetrationResist1();
      let DefensePenetrationResist100 = self.DefensePenetrationResist100();
      let EnhanceExplosionRate = self.EnhanceExplosionRate();
      let EnhancePierceRate = self.EnhancePierceRate();
      let EnhanceMysticRate = self.EnhanceMysticRate();
      let EnhanceSonicRate = self.EnhanceSonicRate();
      let EnhanceSiegeRate = self.EnhanceSiegeRate();
      let EnhanceNormalRate = self.EnhanceNormalRate();
      let EnhanceLightArmorRate = self.EnhanceLightArmorRate();
      let EnhanceHeavyArmorRate = self.EnhanceHeavyArmorRate();
      let EnhanceUnarmedRate = self.EnhanceUnarmedRate();
      let EnhanceElasticArmorRate = self.EnhanceElasticArmorRate();
      let EnhanceStructureRate = self.EnhanceStructureRate();
      let EnhanceNormalArmorRate = self.EnhanceNormalArmorRate();
      let ExtendBuffDuration = self.ExtendBuffDuration();
      let ExtendDebuffDuration = self.ExtendDebuffDuration();
      let ExtendCrowdControlDuration = self.ExtendCrowdControlDuration();
      let AmmoCount = self.AmmoCount();
      let AmmoCost = self.AmmoCost();
      let IgnoreDelayCount = self.IgnoreDelayCount();
      let NormalAttackSpeed = self.NormalAttackSpeed();
      let Range = self.Range();
      let InitialRangeRate = self.InitialRangeRate();
      let MoveSpeed = self.MoveSpeed();
      let SightPoint = self.SightPoint();
      let ActiveGauge = self.ActiveGauge();
      let GroggyGauge = self.GroggyGauge();
      let GroggyTime = self.GroggyTime();
      let StrategyMobility = self.StrategyMobility();
      let ActionCount = self.ActionCount();
      let StrategySightRange = self.StrategySightRange();
      let DamageRatio = self.DamageRatio();
      let DamagedRatio = self.DamagedRatio();
      let DamageRatio2Increase = self.DamageRatio2Increase();
      let DamageRatio2Decrease = self.DamageRatio2Decrease();
      let DamagedRatio2Increase = self.DamagedRatio2Increase();
      let DamagedRatio2Decrease = self.DamagedRatio2Decrease();
      let ExDamagedRatioIncrease = self.ExDamagedRatioIncrease();
      let ExDamagedRatioDecrease = self.ExDamagedRatioDecrease();
      let EnhanceExDamageRate = self.EnhanceExDamageRate();
      let ReduceExDamagedRate = self.ReduceExDamagedRate();
      let EnhanceBasicsDamageRate = self.EnhanceBasicsDamageRate();
      let ReduceBasicsDamagedRate = self.ReduceBasicsDamagedRate();
      let HealRate = self.HealRate();
      let HealLightArmorRate = self.HealLightArmorRate();
      let HealHeavyArmorRate = self.HealHeavyArmorRate();
      let HealUnarmedRate = self.HealUnarmedRate();
      let HealElasticArmorRate = self.HealElasticArmorRate();
      let HealNormalArmorRate = self.HealNormalArmorRate();
      let HealedExplosionRate = self.HealedExplosionRate();
      let HealedPierceRate = self.HealedPierceRate();
      let HealedMysticRate = self.HealedMysticRate();
      let HealedSonicRate = self.HealedSonicRate();
      let HealedNormalRate = self.HealedNormalRate();
      let StreetBattleAdaptation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StreetBattleAdaptation(), &key)
      } else {
        self.StreetBattleAdaptation()
      };
      let OutdoorBattleAdaptation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OutdoorBattleAdaptation(), &key)
      } else {
        self.OutdoorBattleAdaptation()
      };
      let IndoorBattleAdaptation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.IndoorBattleAdaptation(), &key)
      } else {
        self.IndoorBattleAdaptation()
      };
      let RegenCost = self.RegenCost();
    CharacterStatExcelT {
      CharacterId,
      StabilityRate,
      StabilityPoint,
      AttackPower1,
      AttackPower100,
      MaxHP1,
      MaxHP100,
      DefensePower1,
      DefensePower100,
      HealPower1,
      HealPower100,
      DodgePoint,
      AccuracyPoint,
      CriticalPoint,
      CriticalResistPoint,
      CriticalDamageRate,
      CriticalDamageResistRate,
      BlockRate,
      HealEffectivenessRate,
      OppressionPower,
      OppressionResist,
      DefensePenetration1,
      DefensePenetration100,
      DefensePenetrationResist1,
      DefensePenetrationResist100,
      EnhanceExplosionRate,
      EnhancePierceRate,
      EnhanceMysticRate,
      EnhanceSonicRate,
      EnhanceSiegeRate,
      EnhanceNormalRate,
      EnhanceLightArmorRate,
      EnhanceHeavyArmorRate,
      EnhanceUnarmedRate,
      EnhanceElasticArmorRate,
      EnhanceStructureRate,
      EnhanceNormalArmorRate,
      ExtendBuffDuration,
      ExtendDebuffDuration,
      ExtendCrowdControlDuration,
      AmmoCount,
      AmmoCost,
      IgnoreDelayCount,
      NormalAttackSpeed,
      Range,
      InitialRangeRate,
      MoveSpeed,
      SightPoint,
      ActiveGauge,
      GroggyGauge,
      GroggyTime,
      StrategyMobility,
      ActionCount,
      StrategySightRange,
      DamageRatio,
      DamagedRatio,
      DamageRatio2Increase,
      DamageRatio2Decrease,
      DamagedRatio2Increase,
      DamagedRatio2Decrease,
      ExDamagedRatioIncrease,
      ExDamagedRatioDecrease,
      EnhanceExDamageRate,
      ReduceExDamagedRate,
      EnhanceBasicsDamageRate,
      ReduceBasicsDamagedRate,
      HealRate,
      HealLightArmorRate,
      HealHeavyArmorRate,
      HealUnarmedRate,
      HealElasticArmorRate,
      HealNormalArmorRate,
      HealedExplosionRate,
      HealedPierceRate,
      HealedMysticRate,
      HealedSonicRate,
      HealedNormalRate,
      StreetBattleAdaptation,
      OutdoorBattleAdaptation,
      IndoorBattleAdaptation,
      RegenCost,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StabilityRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_STABILITYRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StabilityPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_STABILITYPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackPower1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ATTACKPOWER1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackPower100(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ATTACKPOWER100, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxHP1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_MAXHP1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxHP100(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_MAXHP100, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefensePower1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DEFENSEPOWER1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefensePower100(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DEFENSEPOWER100, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealPower1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALPOWER1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealPower100(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALPOWER100, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DodgePoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DODGEPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AccuracyPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ACCURACYPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CriticalPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_CRITICALPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CriticalResistPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_CRITICALRESISTPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CriticalDamageRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_CRITICALDAMAGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CriticalDamageResistRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_CRITICALDAMAGERESISTRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BlockRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_BLOCKRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealEffectivenessRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALEFFECTIVENESSRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OppressionPower(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_OPPRESSIONPOWER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OppressionResist(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_OPPRESSIONRESIST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefensePenetration1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATION1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefensePenetration100(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATION100, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefensePenetrationResist1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATIONRESIST1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefensePenetrationResist100(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATIONRESIST100, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceExplosionRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEEXPLOSIONRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhancePierceRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEPIERCERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceMysticRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEMYSTICRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceSonicRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCESONICRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceSiegeRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCESIEGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceNormalRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCENORMALRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceLightArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCELIGHTARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceHeavyArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEHEAVYARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceUnarmedRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEUNARMEDRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceElasticArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEELASTICARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceStructureRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCESTRUCTURERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceNormalArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCENORMALARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtendBuffDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_EXTENDBUFFDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtendDebuffDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_EXTENDDEBUFFDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtendCrowdControlDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_EXTENDCROWDCONTROLDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AmmoCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_AMMOCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AmmoCost(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_AMMOCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IgnoreDelayCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_IGNOREDELAYCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NormalAttackSpeed(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_NORMALATTACKSPEED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Range(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_RANGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InitialRangeRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_INITIALRANGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MoveSpeed(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_MOVESPEED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SightPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_SIGHTPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ActiveGauge(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ACTIVEGAUGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroggyGauge(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterStatExcel::VT_GROGGYGAUGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroggyTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterStatExcel::VT_GROGGYTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrategyMobility(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_STRATEGYMOBILITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ActionCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ACTIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrategySightRange(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_STRATEGYSIGHTRANGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamageRatio(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DAMAGERATIO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamagedRatio(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DAMAGEDRATIO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamageRatio2Increase(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DAMAGERATIO2INCREASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamageRatio2Decrease(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DAMAGERATIO2DECREASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamagedRatio2Increase(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DAMAGEDRATIO2INCREASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamagedRatio2Decrease(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_DAMAGEDRATIO2DECREASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExDamagedRatioIncrease(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_EXDAMAGEDRATIOINCREASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExDamagedRatioDecrease(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_EXDAMAGEDRATIODECREASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceExDamageRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEEXDAMAGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReduceExDamagedRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_REDUCEEXDAMAGEDRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceBasicsDamageRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_ENHANCEBASICSDAMAGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReduceBasicsDamagedRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_REDUCEBASICSDAMAGEDRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealLightArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALLIGHTARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealHeavyArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALHEAVYARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealUnarmedRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALUNARMEDRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealElasticArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALELASTICARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealNormalArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALNORMALARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealedExplosionRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALEDEXPLOSIONRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealedPierceRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALEDPIERCERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealedMysticRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALEDMYSTICRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealedSonicRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALEDSONICRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HealedNormalRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_HEALEDNORMALRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StreetBattleAdaptation(&self) -> TerrainAdaptationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerrainAdaptationStat>(CharacterStatExcel::VT_STREETBATTLEADAPTATION, Some(TerrainAdaptationStat::D)).unwrap()}
  }
  #[inline]
  pub fn OutdoorBattleAdaptation(&self) -> TerrainAdaptationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerrainAdaptationStat>(CharacterStatExcel::VT_OUTDOORBATTLEADAPTATION, Some(TerrainAdaptationStat::D)).unwrap()}
  }
  #[inline]
  pub fn IndoorBattleAdaptation(&self) -> TerrainAdaptationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerrainAdaptationStat>(CharacterStatExcel::VT_INDOORBATTLEADAPTATION, Some(TerrainAdaptationStat::D)).unwrap()}
  }
  #[inline]
  pub fn RegenCost(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatExcel::VT_REGENCOST, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterStatExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<i64>("StabilityRate", Self::VT_STABILITYRATE, false)?
     .visit_field::<i64>("StabilityPoint", Self::VT_STABILITYPOINT, false)?
     .visit_field::<i64>("AttackPower1", Self::VT_ATTACKPOWER1, false)?
     .visit_field::<i64>("AttackPower100", Self::VT_ATTACKPOWER100, false)?
     .visit_field::<i64>("MaxHP1", Self::VT_MAXHP1, false)?
     .visit_field::<i64>("MaxHP100", Self::VT_MAXHP100, false)?
     .visit_field::<i64>("DefensePower1", Self::VT_DEFENSEPOWER1, false)?
     .visit_field::<i64>("DefensePower100", Self::VT_DEFENSEPOWER100, false)?
     .visit_field::<i64>("HealPower1", Self::VT_HEALPOWER1, false)?
     .visit_field::<i64>("HealPower100", Self::VT_HEALPOWER100, false)?
     .visit_field::<i64>("DodgePoint", Self::VT_DODGEPOINT, false)?
     .visit_field::<i64>("AccuracyPoint", Self::VT_ACCURACYPOINT, false)?
     .visit_field::<i64>("CriticalPoint", Self::VT_CRITICALPOINT, false)?
     .visit_field::<i64>("CriticalResistPoint", Self::VT_CRITICALRESISTPOINT, false)?
     .visit_field::<i64>("CriticalDamageRate", Self::VT_CRITICALDAMAGERATE, false)?
     .visit_field::<i64>("CriticalDamageResistRate", Self::VT_CRITICALDAMAGERESISTRATE, false)?
     .visit_field::<i64>("BlockRate", Self::VT_BLOCKRATE, false)?
     .visit_field::<i64>("HealEffectivenessRate", Self::VT_HEALEFFECTIVENESSRATE, false)?
     .visit_field::<i64>("OppressionPower", Self::VT_OPPRESSIONPOWER, false)?
     .visit_field::<i64>("OppressionResist", Self::VT_OPPRESSIONRESIST, false)?
     .visit_field::<i64>("DefensePenetration1", Self::VT_DEFENSEPENETRATION1, false)?
     .visit_field::<i64>("DefensePenetration100", Self::VT_DEFENSEPENETRATION100, false)?
     .visit_field::<i64>("DefensePenetrationResist1", Self::VT_DEFENSEPENETRATIONRESIST1, false)?
     .visit_field::<i64>("DefensePenetrationResist100", Self::VT_DEFENSEPENETRATIONRESIST100, false)?
     .visit_field::<i64>("EnhanceExplosionRate", Self::VT_ENHANCEEXPLOSIONRATE, false)?
     .visit_field::<i64>("EnhancePierceRate", Self::VT_ENHANCEPIERCERATE, false)?
     .visit_field::<i64>("EnhanceMysticRate", Self::VT_ENHANCEMYSTICRATE, false)?
     .visit_field::<i64>("EnhanceSonicRate", Self::VT_ENHANCESONICRATE, false)?
     .visit_field::<i64>("EnhanceSiegeRate", Self::VT_ENHANCESIEGERATE, false)?
     .visit_field::<i64>("EnhanceNormalRate", Self::VT_ENHANCENORMALRATE, false)?
     .visit_field::<i64>("EnhanceLightArmorRate", Self::VT_ENHANCELIGHTARMORRATE, false)?
     .visit_field::<i64>("EnhanceHeavyArmorRate", Self::VT_ENHANCEHEAVYARMORRATE, false)?
     .visit_field::<i64>("EnhanceUnarmedRate", Self::VT_ENHANCEUNARMEDRATE, false)?
     .visit_field::<i64>("EnhanceElasticArmorRate", Self::VT_ENHANCEELASTICARMORRATE, false)?
     .visit_field::<i64>("EnhanceStructureRate", Self::VT_ENHANCESTRUCTURERATE, false)?
     .visit_field::<i64>("EnhanceNormalArmorRate", Self::VT_ENHANCENORMALARMORRATE, false)?
     .visit_field::<i64>("ExtendBuffDuration", Self::VT_EXTENDBUFFDURATION, false)?
     .visit_field::<i64>("ExtendDebuffDuration", Self::VT_EXTENDDEBUFFDURATION, false)?
     .visit_field::<i64>("ExtendCrowdControlDuration", Self::VT_EXTENDCROWDCONTROLDURATION, false)?
     .visit_field::<i64>("AmmoCount", Self::VT_AMMOCOUNT, false)?
     .visit_field::<i64>("AmmoCost", Self::VT_AMMOCOST, false)?
     .visit_field::<i64>("IgnoreDelayCount", Self::VT_IGNOREDELAYCOUNT, false)?
     .visit_field::<i64>("NormalAttackSpeed", Self::VT_NORMALATTACKSPEED, false)?
     .visit_field::<i64>("Range", Self::VT_RANGE, false)?
     .visit_field::<i64>("InitialRangeRate", Self::VT_INITIALRANGERATE, false)?
     .visit_field::<i64>("MoveSpeed", Self::VT_MOVESPEED, false)?
     .visit_field::<i64>("SightPoint", Self::VT_SIGHTPOINT, false)?
     .visit_field::<i64>("ActiveGauge", Self::VT_ACTIVEGAUGE, false)?
     .visit_field::<i32>("GroggyGauge", Self::VT_GROGGYGAUGE, false)?
     .visit_field::<i32>("GroggyTime", Self::VT_GROGGYTIME, false)?
     .visit_field::<i64>("StrategyMobility", Self::VT_STRATEGYMOBILITY, false)?
     .visit_field::<i64>("ActionCount", Self::VT_ACTIONCOUNT, false)?
     .visit_field::<i64>("StrategySightRange", Self::VT_STRATEGYSIGHTRANGE, false)?
     .visit_field::<i64>("DamageRatio", Self::VT_DAMAGERATIO, false)?
     .visit_field::<i64>("DamagedRatio", Self::VT_DAMAGEDRATIO, false)?
     .visit_field::<i64>("DamageRatio2Increase", Self::VT_DAMAGERATIO2INCREASE, false)?
     .visit_field::<i64>("DamageRatio2Decrease", Self::VT_DAMAGERATIO2DECREASE, false)?
     .visit_field::<i64>("DamagedRatio2Increase", Self::VT_DAMAGEDRATIO2INCREASE, false)?
     .visit_field::<i64>("DamagedRatio2Decrease", Self::VT_DAMAGEDRATIO2DECREASE, false)?
     .visit_field::<i64>("ExDamagedRatioIncrease", Self::VT_EXDAMAGEDRATIOINCREASE, false)?
     .visit_field::<i64>("ExDamagedRatioDecrease", Self::VT_EXDAMAGEDRATIODECREASE, false)?
     .visit_field::<i64>("EnhanceExDamageRate", Self::VT_ENHANCEEXDAMAGERATE, false)?
     .visit_field::<i64>("ReduceExDamagedRate", Self::VT_REDUCEEXDAMAGEDRATE, false)?
     .visit_field::<i64>("EnhanceBasicsDamageRate", Self::VT_ENHANCEBASICSDAMAGERATE, false)?
     .visit_field::<i64>("ReduceBasicsDamagedRate", Self::VT_REDUCEBASICSDAMAGEDRATE, false)?
     .visit_field::<i64>("HealRate", Self::VT_HEALRATE, false)?
     .visit_field::<i64>("HealLightArmorRate", Self::VT_HEALLIGHTARMORRATE, false)?
     .visit_field::<i64>("HealHeavyArmorRate", Self::VT_HEALHEAVYARMORRATE, false)?
     .visit_field::<i64>("HealUnarmedRate", Self::VT_HEALUNARMEDRATE, false)?
     .visit_field::<i64>("HealElasticArmorRate", Self::VT_HEALELASTICARMORRATE, false)?
     .visit_field::<i64>("HealNormalArmorRate", Self::VT_HEALNORMALARMORRATE, false)?
     .visit_field::<i64>("HealedExplosionRate", Self::VT_HEALEDEXPLOSIONRATE, false)?
     .visit_field::<i64>("HealedPierceRate", Self::VT_HEALEDPIERCERATE, false)?
     .visit_field::<i64>("HealedMysticRate", Self::VT_HEALEDMYSTICRATE, false)?
     .visit_field::<i64>("HealedSonicRate", Self::VT_HEALEDSONICRATE, false)?
     .visit_field::<i64>("HealedNormalRate", Self::VT_HEALEDNORMALRATE, false)?
     .visit_field::<TerrainAdaptationStat>("StreetBattleAdaptation", Self::VT_STREETBATTLEADAPTATION, false)?
     .visit_field::<TerrainAdaptationStat>("OutdoorBattleAdaptation", Self::VT_OUTDOORBATTLEADAPTATION, false)?
     .visit_field::<TerrainAdaptationStat>("IndoorBattleAdaptation", Self::VT_INDOORBATTLEADAPTATION, false)?
     .visit_field::<i64>("RegenCost", Self::VT_REGENCOST, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterStatExcelArgs {
    pub CharacterId: i64,
    pub StabilityRate: i64,
    pub StabilityPoint: i64,
    pub AttackPower1: i64,
    pub AttackPower100: i64,
    pub MaxHP1: i64,
    pub MaxHP100: i64,
    pub DefensePower1: i64,
    pub DefensePower100: i64,
    pub HealPower1: i64,
    pub HealPower100: i64,
    pub DodgePoint: i64,
    pub AccuracyPoint: i64,
    pub CriticalPoint: i64,
    pub CriticalResistPoint: i64,
    pub CriticalDamageRate: i64,
    pub CriticalDamageResistRate: i64,
    pub BlockRate: i64,
    pub HealEffectivenessRate: i64,
    pub OppressionPower: i64,
    pub OppressionResist: i64,
    pub DefensePenetration1: i64,
    pub DefensePenetration100: i64,
    pub DefensePenetrationResist1: i64,
    pub DefensePenetrationResist100: i64,
    pub EnhanceExplosionRate: i64,
    pub EnhancePierceRate: i64,
    pub EnhanceMysticRate: i64,
    pub EnhanceSonicRate: i64,
    pub EnhanceSiegeRate: i64,
    pub EnhanceNormalRate: i64,
    pub EnhanceLightArmorRate: i64,
    pub EnhanceHeavyArmorRate: i64,
    pub EnhanceUnarmedRate: i64,
    pub EnhanceElasticArmorRate: i64,
    pub EnhanceStructureRate: i64,
    pub EnhanceNormalArmorRate: i64,
    pub ExtendBuffDuration: i64,
    pub ExtendDebuffDuration: i64,
    pub ExtendCrowdControlDuration: i64,
    pub AmmoCount: i64,
    pub AmmoCost: i64,
    pub IgnoreDelayCount: i64,
    pub NormalAttackSpeed: i64,
    pub Range: i64,
    pub InitialRangeRate: i64,
    pub MoveSpeed: i64,
    pub SightPoint: i64,
    pub ActiveGauge: i64,
    pub GroggyGauge: i32,
    pub GroggyTime: i32,
    pub StrategyMobility: i64,
    pub ActionCount: i64,
    pub StrategySightRange: i64,
    pub DamageRatio: i64,
    pub DamagedRatio: i64,
    pub DamageRatio2Increase: i64,
    pub DamageRatio2Decrease: i64,
    pub DamagedRatio2Increase: i64,
    pub DamagedRatio2Decrease: i64,
    pub ExDamagedRatioIncrease: i64,
    pub ExDamagedRatioDecrease: i64,
    pub EnhanceExDamageRate: i64,
    pub ReduceExDamagedRate: i64,
    pub EnhanceBasicsDamageRate: i64,
    pub ReduceBasicsDamagedRate: i64,
    pub HealRate: i64,
    pub HealLightArmorRate: i64,
    pub HealHeavyArmorRate: i64,
    pub HealUnarmedRate: i64,
    pub HealElasticArmorRate: i64,
    pub HealNormalArmorRate: i64,
    pub HealedExplosionRate: i64,
    pub HealedPierceRate: i64,
    pub HealedMysticRate: i64,
    pub HealedSonicRate: i64,
    pub HealedNormalRate: i64,
    pub StreetBattleAdaptation: TerrainAdaptationStat,
    pub OutdoorBattleAdaptation: TerrainAdaptationStat,
    pub IndoorBattleAdaptation: TerrainAdaptationStat,
    pub RegenCost: i64,
}
impl<'a> Default for CharacterStatExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterStatExcelArgs {
      CharacterId: 0,
      StabilityRate: 0,
      StabilityPoint: 0,
      AttackPower1: 0,
      AttackPower100: 0,
      MaxHP1: 0,
      MaxHP100: 0,
      DefensePower1: 0,
      DefensePower100: 0,
      HealPower1: 0,
      HealPower100: 0,
      DodgePoint: 0,
      AccuracyPoint: 0,
      CriticalPoint: 0,
      CriticalResistPoint: 0,
      CriticalDamageRate: 0,
      CriticalDamageResistRate: 0,
      BlockRate: 0,
      HealEffectivenessRate: 0,
      OppressionPower: 0,
      OppressionResist: 0,
      DefensePenetration1: 0,
      DefensePenetration100: 0,
      DefensePenetrationResist1: 0,
      DefensePenetrationResist100: 0,
      EnhanceExplosionRate: 0,
      EnhancePierceRate: 0,
      EnhanceMysticRate: 0,
      EnhanceSonicRate: 0,
      EnhanceSiegeRate: 0,
      EnhanceNormalRate: 0,
      EnhanceLightArmorRate: 0,
      EnhanceHeavyArmorRate: 0,
      EnhanceUnarmedRate: 0,
      EnhanceElasticArmorRate: 0,
      EnhanceStructureRate: 0,
      EnhanceNormalArmorRate: 0,
      ExtendBuffDuration: 0,
      ExtendDebuffDuration: 0,
      ExtendCrowdControlDuration: 0,
      AmmoCount: 0,
      AmmoCost: 0,
      IgnoreDelayCount: 0,
      NormalAttackSpeed: 0,
      Range: 0,
      InitialRangeRate: 0,
      MoveSpeed: 0,
      SightPoint: 0,
      ActiveGauge: 0,
      GroggyGauge: 0,
      GroggyTime: 0,
      StrategyMobility: 0,
      ActionCount: 0,
      StrategySightRange: 0,
      DamageRatio: 0,
      DamagedRatio: 0,
      DamageRatio2Increase: 0,
      DamageRatio2Decrease: 0,
      DamagedRatio2Increase: 0,
      DamagedRatio2Decrease: 0,
      ExDamagedRatioIncrease: 0,
      ExDamagedRatioDecrease: 0,
      EnhanceExDamageRate: 0,
      ReduceExDamagedRate: 0,
      EnhanceBasicsDamageRate: 0,
      ReduceBasicsDamagedRate: 0,
      HealRate: 0,
      HealLightArmorRate: 0,
      HealHeavyArmorRate: 0,
      HealUnarmedRate: 0,
      HealElasticArmorRate: 0,
      HealNormalArmorRate: 0,
      HealedExplosionRate: 0,
      HealedPierceRate: 0,
      HealedMysticRate: 0,
      HealedSonicRate: 0,
      HealedNormalRate: 0,
      StreetBattleAdaptation: TerrainAdaptationStat::D,
      OutdoorBattleAdaptation: TerrainAdaptationStat::D,
      IndoorBattleAdaptation: TerrainAdaptationStat::D,
      RegenCost: 0,
    }
  }
}

impl Serialize for CharacterStatExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterStatExcel", 81)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("StabilityRate", &self.StabilityRate())?;
      s.serialize_field("StabilityPoint", &self.StabilityPoint())?;
      s.serialize_field("AttackPower1", &self.AttackPower1())?;
      s.serialize_field("AttackPower100", &self.AttackPower100())?;
      s.serialize_field("MaxHP1", &self.MaxHP1())?;
      s.serialize_field("MaxHP100", &self.MaxHP100())?;
      s.serialize_field("DefensePower1", &self.DefensePower1())?;
      s.serialize_field("DefensePower100", &self.DefensePower100())?;
      s.serialize_field("HealPower1", &self.HealPower1())?;
      s.serialize_field("HealPower100", &self.HealPower100())?;
      s.serialize_field("DodgePoint", &self.DodgePoint())?;
      s.serialize_field("AccuracyPoint", &self.AccuracyPoint())?;
      s.serialize_field("CriticalPoint", &self.CriticalPoint())?;
      s.serialize_field("CriticalResistPoint", &self.CriticalResistPoint())?;
      s.serialize_field("CriticalDamageRate", &self.CriticalDamageRate())?;
      s.serialize_field("CriticalDamageResistRate", &self.CriticalDamageResistRate())?;
      s.serialize_field("BlockRate", &self.BlockRate())?;
      s.serialize_field("HealEffectivenessRate", &self.HealEffectivenessRate())?;
      s.serialize_field("OppressionPower", &self.OppressionPower())?;
      s.serialize_field("OppressionResist", &self.OppressionResist())?;
      s.serialize_field("DefensePenetration1", &self.DefensePenetration1())?;
      s.serialize_field("DefensePenetration100", &self.DefensePenetration100())?;
      s.serialize_field("DefensePenetrationResist1", &self.DefensePenetrationResist1())?;
      s.serialize_field("DefensePenetrationResist100", &self.DefensePenetrationResist100())?;
      s.serialize_field("EnhanceExplosionRate", &self.EnhanceExplosionRate())?;
      s.serialize_field("EnhancePierceRate", &self.EnhancePierceRate())?;
      s.serialize_field("EnhanceMysticRate", &self.EnhanceMysticRate())?;
      s.serialize_field("EnhanceSonicRate", &self.EnhanceSonicRate())?;
      s.serialize_field("EnhanceSiegeRate", &self.EnhanceSiegeRate())?;
      s.serialize_field("EnhanceNormalRate", &self.EnhanceNormalRate())?;
      s.serialize_field("EnhanceLightArmorRate", &self.EnhanceLightArmorRate())?;
      s.serialize_field("EnhanceHeavyArmorRate", &self.EnhanceHeavyArmorRate())?;
      s.serialize_field("EnhanceUnarmedRate", &self.EnhanceUnarmedRate())?;
      s.serialize_field("EnhanceElasticArmorRate", &self.EnhanceElasticArmorRate())?;
      s.serialize_field("EnhanceStructureRate", &self.EnhanceStructureRate())?;
      s.serialize_field("EnhanceNormalArmorRate", &self.EnhanceNormalArmorRate())?;
      s.serialize_field("ExtendBuffDuration", &self.ExtendBuffDuration())?;
      s.serialize_field("ExtendDebuffDuration", &self.ExtendDebuffDuration())?;
      s.serialize_field("ExtendCrowdControlDuration", &self.ExtendCrowdControlDuration())?;
      s.serialize_field("AmmoCount", &self.AmmoCount())?;
      s.serialize_field("AmmoCost", &self.AmmoCost())?;
      s.serialize_field("IgnoreDelayCount", &self.IgnoreDelayCount())?;
      s.serialize_field("NormalAttackSpeed", &self.NormalAttackSpeed())?;
      s.serialize_field("Range", &self.Range())?;
      s.serialize_field("InitialRangeRate", &self.InitialRangeRate())?;
      s.serialize_field("MoveSpeed", &self.MoveSpeed())?;
      s.serialize_field("SightPoint", &self.SightPoint())?;
      s.serialize_field("ActiveGauge", &self.ActiveGauge())?;
      s.serialize_field("GroggyGauge", &self.GroggyGauge())?;
      s.serialize_field("GroggyTime", &self.GroggyTime())?;
      s.serialize_field("StrategyMobility", &self.StrategyMobility())?;
      s.serialize_field("ActionCount", &self.ActionCount())?;
      s.serialize_field("StrategySightRange", &self.StrategySightRange())?;
      s.serialize_field("DamageRatio", &self.DamageRatio())?;
      s.serialize_field("DamagedRatio", &self.DamagedRatio())?;
      s.serialize_field("DamageRatio2Increase", &self.DamageRatio2Increase())?;
      s.serialize_field("DamageRatio2Decrease", &self.DamageRatio2Decrease())?;
      s.serialize_field("DamagedRatio2Increase", &self.DamagedRatio2Increase())?;
      s.serialize_field("DamagedRatio2Decrease", &self.DamagedRatio2Decrease())?;
      s.serialize_field("ExDamagedRatioIncrease", &self.ExDamagedRatioIncrease())?;
      s.serialize_field("ExDamagedRatioDecrease", &self.ExDamagedRatioDecrease())?;
      s.serialize_field("EnhanceExDamageRate", &self.EnhanceExDamageRate())?;
      s.serialize_field("ReduceExDamagedRate", &self.ReduceExDamagedRate())?;
      s.serialize_field("EnhanceBasicsDamageRate", &self.EnhanceBasicsDamageRate())?;
      s.serialize_field("ReduceBasicsDamagedRate", &self.ReduceBasicsDamagedRate())?;
      s.serialize_field("HealRate", &self.HealRate())?;
      s.serialize_field("HealLightArmorRate", &self.HealLightArmorRate())?;
      s.serialize_field("HealHeavyArmorRate", &self.HealHeavyArmorRate())?;
      s.serialize_field("HealUnarmedRate", &self.HealUnarmedRate())?;
      s.serialize_field("HealElasticArmorRate", &self.HealElasticArmorRate())?;
      s.serialize_field("HealNormalArmorRate", &self.HealNormalArmorRate())?;
      s.serialize_field("HealedExplosionRate", &self.HealedExplosionRate())?;
      s.serialize_field("HealedPierceRate", &self.HealedPierceRate())?;
      s.serialize_field("HealedMysticRate", &self.HealedMysticRate())?;
      s.serialize_field("HealedSonicRate", &self.HealedSonicRate())?;
      s.serialize_field("HealedNormalRate", &self.HealedNormalRate())?;
      s.serialize_field("StreetBattleAdaptation", &self.StreetBattleAdaptation())?;
      s.serialize_field("OutdoorBattleAdaptation", &self.OutdoorBattleAdaptation())?;
      s.serialize_field("IndoorBattleAdaptation", &self.IndoorBattleAdaptation())?;
      s.serialize_field("RegenCost", &self.RegenCost())?;
    s.end()
  }
}

pub struct CharacterStatExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterStatExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_StabilityRate(&mut self, StabilityRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_STABILITYRATE, StabilityRate, 0);
  }
  #[inline]
  pub fn add_StabilityPoint(&mut self, StabilityPoint: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_STABILITYPOINT, StabilityPoint, 0);
  }
  #[inline]
  pub fn add_AttackPower1(&mut self, AttackPower1: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ATTACKPOWER1, AttackPower1, 0);
  }
  #[inline]
  pub fn add_AttackPower100(&mut self, AttackPower100: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ATTACKPOWER100, AttackPower100, 0);
  }
  #[inline]
  pub fn add_MaxHP1(&mut self, MaxHP1: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_MAXHP1, MaxHP1, 0);
  }
  #[inline]
  pub fn add_MaxHP100(&mut self, MaxHP100: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_MAXHP100, MaxHP100, 0);
  }
  #[inline]
  pub fn add_DefensePower1(&mut self, DefensePower1: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DEFENSEPOWER1, DefensePower1, 0);
  }
  #[inline]
  pub fn add_DefensePower100(&mut self, DefensePower100: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DEFENSEPOWER100, DefensePower100, 0);
  }
  #[inline]
  pub fn add_HealPower1(&mut self, HealPower1: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALPOWER1, HealPower1, 0);
  }
  #[inline]
  pub fn add_HealPower100(&mut self, HealPower100: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALPOWER100, HealPower100, 0);
  }
  #[inline]
  pub fn add_DodgePoint(&mut self, DodgePoint: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DODGEPOINT, DodgePoint, 0);
  }
  #[inline]
  pub fn add_AccuracyPoint(&mut self, AccuracyPoint: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ACCURACYPOINT, AccuracyPoint, 0);
  }
  #[inline]
  pub fn add_CriticalPoint(&mut self, CriticalPoint: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_CRITICALPOINT, CriticalPoint, 0);
  }
  #[inline]
  pub fn add_CriticalResistPoint(&mut self, CriticalResistPoint: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_CRITICALRESISTPOINT, CriticalResistPoint, 0);
  }
  #[inline]
  pub fn add_CriticalDamageRate(&mut self, CriticalDamageRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_CRITICALDAMAGERATE, CriticalDamageRate, 0);
  }
  #[inline]
  pub fn add_CriticalDamageResistRate(&mut self, CriticalDamageResistRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_CRITICALDAMAGERESISTRATE, CriticalDamageResistRate, 0);
  }
  #[inline]
  pub fn add_BlockRate(&mut self, BlockRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_BLOCKRATE, BlockRate, 0);
  }
  #[inline]
  pub fn add_HealEffectivenessRate(&mut self, HealEffectivenessRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALEFFECTIVENESSRATE, HealEffectivenessRate, 0);
  }
  #[inline]
  pub fn add_OppressionPower(&mut self, OppressionPower: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_OPPRESSIONPOWER, OppressionPower, 0);
  }
  #[inline]
  pub fn add_OppressionResist(&mut self, OppressionResist: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_OPPRESSIONRESIST, OppressionResist, 0);
  }
  #[inline]
  pub fn add_DefensePenetration1(&mut self, DefensePenetration1: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATION1, DefensePenetration1, 0);
  }
  #[inline]
  pub fn add_DefensePenetration100(&mut self, DefensePenetration100: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATION100, DefensePenetration100, 0);
  }
  #[inline]
  pub fn add_DefensePenetrationResist1(&mut self, DefensePenetrationResist1: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATIONRESIST1, DefensePenetrationResist1, 0);
  }
  #[inline]
  pub fn add_DefensePenetrationResist100(&mut self, DefensePenetrationResist100: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DEFENSEPENETRATIONRESIST100, DefensePenetrationResist100, 0);
  }
  #[inline]
  pub fn add_EnhanceExplosionRate(&mut self, EnhanceExplosionRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEEXPLOSIONRATE, EnhanceExplosionRate, 0);
  }
  #[inline]
  pub fn add_EnhancePierceRate(&mut self, EnhancePierceRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEPIERCERATE, EnhancePierceRate, 0);
  }
  #[inline]
  pub fn add_EnhanceMysticRate(&mut self, EnhanceMysticRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEMYSTICRATE, EnhanceMysticRate, 0);
  }
  #[inline]
  pub fn add_EnhanceSonicRate(&mut self, EnhanceSonicRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCESONICRATE, EnhanceSonicRate, 0);
  }
  #[inline]
  pub fn add_EnhanceSiegeRate(&mut self, EnhanceSiegeRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCESIEGERATE, EnhanceSiegeRate, 0);
  }
  #[inline]
  pub fn add_EnhanceNormalRate(&mut self, EnhanceNormalRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCENORMALRATE, EnhanceNormalRate, 0);
  }
  #[inline]
  pub fn add_EnhanceLightArmorRate(&mut self, EnhanceLightArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCELIGHTARMORRATE, EnhanceLightArmorRate, 0);
  }
  #[inline]
  pub fn add_EnhanceHeavyArmorRate(&mut self, EnhanceHeavyArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEHEAVYARMORRATE, EnhanceHeavyArmorRate, 0);
  }
  #[inline]
  pub fn add_EnhanceUnarmedRate(&mut self, EnhanceUnarmedRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEUNARMEDRATE, EnhanceUnarmedRate, 0);
  }
  #[inline]
  pub fn add_EnhanceElasticArmorRate(&mut self, EnhanceElasticArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEELASTICARMORRATE, EnhanceElasticArmorRate, 0);
  }
  #[inline]
  pub fn add_EnhanceStructureRate(&mut self, EnhanceStructureRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCESTRUCTURERATE, EnhanceStructureRate, 0);
  }
  #[inline]
  pub fn add_EnhanceNormalArmorRate(&mut self, EnhanceNormalArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCENORMALARMORRATE, EnhanceNormalArmorRate, 0);
  }
  #[inline]
  pub fn add_ExtendBuffDuration(&mut self, ExtendBuffDuration: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_EXTENDBUFFDURATION, ExtendBuffDuration, 0);
  }
  #[inline]
  pub fn add_ExtendDebuffDuration(&mut self, ExtendDebuffDuration: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_EXTENDDEBUFFDURATION, ExtendDebuffDuration, 0);
  }
  #[inline]
  pub fn add_ExtendCrowdControlDuration(&mut self, ExtendCrowdControlDuration: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_EXTENDCROWDCONTROLDURATION, ExtendCrowdControlDuration, 0);
  }
  #[inline]
  pub fn add_AmmoCount(&mut self, AmmoCount: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_AMMOCOUNT, AmmoCount, 0);
  }
  #[inline]
  pub fn add_AmmoCost(&mut self, AmmoCost: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_AMMOCOST, AmmoCost, 0);
  }
  #[inline]
  pub fn add_IgnoreDelayCount(&mut self, IgnoreDelayCount: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_IGNOREDELAYCOUNT, IgnoreDelayCount, 0);
  }
  #[inline]
  pub fn add_NormalAttackSpeed(&mut self, NormalAttackSpeed: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_NORMALATTACKSPEED, NormalAttackSpeed, 0);
  }
  #[inline]
  pub fn add_Range(&mut self, Range: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_RANGE, Range, 0);
  }
  #[inline]
  pub fn add_InitialRangeRate(&mut self, InitialRangeRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_INITIALRANGERATE, InitialRangeRate, 0);
  }
  #[inline]
  pub fn add_MoveSpeed(&mut self, MoveSpeed: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_MOVESPEED, MoveSpeed, 0);
  }
  #[inline]
  pub fn add_SightPoint(&mut self, SightPoint: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_SIGHTPOINT, SightPoint, 0);
  }
  #[inline]
  pub fn add_ActiveGauge(&mut self, ActiveGauge: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ACTIVEGAUGE, ActiveGauge, 0);
  }
  #[inline]
  pub fn add_GroggyGauge(&mut self, GroggyGauge: i32) {
    self.fbb_.push_slot::<i32>(CharacterStatExcel::VT_GROGGYGAUGE, GroggyGauge, 0);
  }
  #[inline]
  pub fn add_GroggyTime(&mut self, GroggyTime: i32) {
    self.fbb_.push_slot::<i32>(CharacterStatExcel::VT_GROGGYTIME, GroggyTime, 0);
  }
  #[inline]
  pub fn add_StrategyMobility(&mut self, StrategyMobility: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_STRATEGYMOBILITY, StrategyMobility, 0);
  }
  #[inline]
  pub fn add_ActionCount(&mut self, ActionCount: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ACTIONCOUNT, ActionCount, 0);
  }
  #[inline]
  pub fn add_StrategySightRange(&mut self, StrategySightRange: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_STRATEGYSIGHTRANGE, StrategySightRange, 0);
  }
  #[inline]
  pub fn add_DamageRatio(&mut self, DamageRatio: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DAMAGERATIO, DamageRatio, 0);
  }
  #[inline]
  pub fn add_DamagedRatio(&mut self, DamagedRatio: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DAMAGEDRATIO, DamagedRatio, 0);
  }
  #[inline]
  pub fn add_DamageRatio2Increase(&mut self, DamageRatio2Increase: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DAMAGERATIO2INCREASE, DamageRatio2Increase, 0);
  }
  #[inline]
  pub fn add_DamageRatio2Decrease(&mut self, DamageRatio2Decrease: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DAMAGERATIO2DECREASE, DamageRatio2Decrease, 0);
  }
  #[inline]
  pub fn add_DamagedRatio2Increase(&mut self, DamagedRatio2Increase: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DAMAGEDRATIO2INCREASE, DamagedRatio2Increase, 0);
  }
  #[inline]
  pub fn add_DamagedRatio2Decrease(&mut self, DamagedRatio2Decrease: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_DAMAGEDRATIO2DECREASE, DamagedRatio2Decrease, 0);
  }
  #[inline]
  pub fn add_ExDamagedRatioIncrease(&mut self, ExDamagedRatioIncrease: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_EXDAMAGEDRATIOINCREASE, ExDamagedRatioIncrease, 0);
  }
  #[inline]
  pub fn add_ExDamagedRatioDecrease(&mut self, ExDamagedRatioDecrease: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_EXDAMAGEDRATIODECREASE, ExDamagedRatioDecrease, 0);
  }
  #[inline]
  pub fn add_EnhanceExDamageRate(&mut self, EnhanceExDamageRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEEXDAMAGERATE, EnhanceExDamageRate, 0);
  }
  #[inline]
  pub fn add_ReduceExDamagedRate(&mut self, ReduceExDamagedRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_REDUCEEXDAMAGEDRATE, ReduceExDamagedRate, 0);
  }
  #[inline]
  pub fn add_EnhanceBasicsDamageRate(&mut self, EnhanceBasicsDamageRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_ENHANCEBASICSDAMAGERATE, EnhanceBasicsDamageRate, 0);
  }
  #[inline]
  pub fn add_ReduceBasicsDamagedRate(&mut self, ReduceBasicsDamagedRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_REDUCEBASICSDAMAGEDRATE, ReduceBasicsDamagedRate, 0);
  }
  #[inline]
  pub fn add_HealRate(&mut self, HealRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALRATE, HealRate, 0);
  }
  #[inline]
  pub fn add_HealLightArmorRate(&mut self, HealLightArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALLIGHTARMORRATE, HealLightArmorRate, 0);
  }
  #[inline]
  pub fn add_HealHeavyArmorRate(&mut self, HealHeavyArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALHEAVYARMORRATE, HealHeavyArmorRate, 0);
  }
  #[inline]
  pub fn add_HealUnarmedRate(&mut self, HealUnarmedRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALUNARMEDRATE, HealUnarmedRate, 0);
  }
  #[inline]
  pub fn add_HealElasticArmorRate(&mut self, HealElasticArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALELASTICARMORRATE, HealElasticArmorRate, 0);
  }
  #[inline]
  pub fn add_HealNormalArmorRate(&mut self, HealNormalArmorRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALNORMALARMORRATE, HealNormalArmorRate, 0);
  }
  #[inline]
  pub fn add_HealedExplosionRate(&mut self, HealedExplosionRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALEDEXPLOSIONRATE, HealedExplosionRate, 0);
  }
  #[inline]
  pub fn add_HealedPierceRate(&mut self, HealedPierceRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALEDPIERCERATE, HealedPierceRate, 0);
  }
  #[inline]
  pub fn add_HealedMysticRate(&mut self, HealedMysticRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALEDMYSTICRATE, HealedMysticRate, 0);
  }
  #[inline]
  pub fn add_HealedSonicRate(&mut self, HealedSonicRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALEDSONICRATE, HealedSonicRate, 0);
  }
  #[inline]
  pub fn add_HealedNormalRate(&mut self, HealedNormalRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_HEALEDNORMALRATE, HealedNormalRate, 0);
  }
  #[inline]
  pub fn add_StreetBattleAdaptation(&mut self, StreetBattleAdaptation: TerrainAdaptationStat) {
    self.fbb_.push_slot::<TerrainAdaptationStat>(CharacterStatExcel::VT_STREETBATTLEADAPTATION, StreetBattleAdaptation, TerrainAdaptationStat::D);
  }
  #[inline]
  pub fn add_OutdoorBattleAdaptation(&mut self, OutdoorBattleAdaptation: TerrainAdaptationStat) {
    self.fbb_.push_slot::<TerrainAdaptationStat>(CharacterStatExcel::VT_OUTDOORBATTLEADAPTATION, OutdoorBattleAdaptation, TerrainAdaptationStat::D);
  }
  #[inline]
  pub fn add_IndoorBattleAdaptation(&mut self, IndoorBattleAdaptation: TerrainAdaptationStat) {
    self.fbb_.push_slot::<TerrainAdaptationStat>(CharacterStatExcel::VT_INDOORBATTLEADAPTATION, IndoorBattleAdaptation, TerrainAdaptationStat::D);
  }
  #[inline]
  pub fn add_RegenCost(&mut self, RegenCost: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatExcel::VT_REGENCOST, RegenCost, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterStatExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterStatExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterStatExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterStatExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterStatExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("StabilityRate", &self.StabilityRate());
      ds.field("StabilityPoint", &self.StabilityPoint());
      ds.field("AttackPower1", &self.AttackPower1());
      ds.field("AttackPower100", &self.AttackPower100());
      ds.field("MaxHP1", &self.MaxHP1());
      ds.field("MaxHP100", &self.MaxHP100());
      ds.field("DefensePower1", &self.DefensePower1());
      ds.field("DefensePower100", &self.DefensePower100());
      ds.field("HealPower1", &self.HealPower1());
      ds.field("HealPower100", &self.HealPower100());
      ds.field("DodgePoint", &self.DodgePoint());
      ds.field("AccuracyPoint", &self.AccuracyPoint());
      ds.field("CriticalPoint", &self.CriticalPoint());
      ds.field("CriticalResistPoint", &self.CriticalResistPoint());
      ds.field("CriticalDamageRate", &self.CriticalDamageRate());
      ds.field("CriticalDamageResistRate", &self.CriticalDamageResistRate());
      ds.field("BlockRate", &self.BlockRate());
      ds.field("HealEffectivenessRate", &self.HealEffectivenessRate());
      ds.field("OppressionPower", &self.OppressionPower());
      ds.field("OppressionResist", &self.OppressionResist());
      ds.field("DefensePenetration1", &self.DefensePenetration1());
      ds.field("DefensePenetration100", &self.DefensePenetration100());
      ds.field("DefensePenetrationResist1", &self.DefensePenetrationResist1());
      ds.field("DefensePenetrationResist100", &self.DefensePenetrationResist100());
      ds.field("EnhanceExplosionRate", &self.EnhanceExplosionRate());
      ds.field("EnhancePierceRate", &self.EnhancePierceRate());
      ds.field("EnhanceMysticRate", &self.EnhanceMysticRate());
      ds.field("EnhanceSonicRate", &self.EnhanceSonicRate());
      ds.field("EnhanceSiegeRate", &self.EnhanceSiegeRate());
      ds.field("EnhanceNormalRate", &self.EnhanceNormalRate());
      ds.field("EnhanceLightArmorRate", &self.EnhanceLightArmorRate());
      ds.field("EnhanceHeavyArmorRate", &self.EnhanceHeavyArmorRate());
      ds.field("EnhanceUnarmedRate", &self.EnhanceUnarmedRate());
      ds.field("EnhanceElasticArmorRate", &self.EnhanceElasticArmorRate());
      ds.field("EnhanceStructureRate", &self.EnhanceStructureRate());
      ds.field("EnhanceNormalArmorRate", &self.EnhanceNormalArmorRate());
      ds.field("ExtendBuffDuration", &self.ExtendBuffDuration());
      ds.field("ExtendDebuffDuration", &self.ExtendDebuffDuration());
      ds.field("ExtendCrowdControlDuration", &self.ExtendCrowdControlDuration());
      ds.field("AmmoCount", &self.AmmoCount());
      ds.field("AmmoCost", &self.AmmoCost());
      ds.field("IgnoreDelayCount", &self.IgnoreDelayCount());
      ds.field("NormalAttackSpeed", &self.NormalAttackSpeed());
      ds.field("Range", &self.Range());
      ds.field("InitialRangeRate", &self.InitialRangeRate());
      ds.field("MoveSpeed", &self.MoveSpeed());
      ds.field("SightPoint", &self.SightPoint());
      ds.field("ActiveGauge", &self.ActiveGauge());
      ds.field("GroggyGauge", &self.GroggyGauge());
      ds.field("GroggyTime", &self.GroggyTime());
      ds.field("StrategyMobility", &self.StrategyMobility());
      ds.field("ActionCount", &self.ActionCount());
      ds.field("StrategySightRange", &self.StrategySightRange());
      ds.field("DamageRatio", &self.DamageRatio());
      ds.field("DamagedRatio", &self.DamagedRatio());
      ds.field("DamageRatio2Increase", &self.DamageRatio2Increase());
      ds.field("DamageRatio2Decrease", &self.DamageRatio2Decrease());
      ds.field("DamagedRatio2Increase", &self.DamagedRatio2Increase());
      ds.field("DamagedRatio2Decrease", &self.DamagedRatio2Decrease());
      ds.field("ExDamagedRatioIncrease", &self.ExDamagedRatioIncrease());
      ds.field("ExDamagedRatioDecrease", &self.ExDamagedRatioDecrease());
      ds.field("EnhanceExDamageRate", &self.EnhanceExDamageRate());
      ds.field("ReduceExDamagedRate", &self.ReduceExDamagedRate());
      ds.field("EnhanceBasicsDamageRate", &self.EnhanceBasicsDamageRate());
      ds.field("ReduceBasicsDamagedRate", &self.ReduceBasicsDamagedRate());
      ds.field("HealRate", &self.HealRate());
      ds.field("HealLightArmorRate", &self.HealLightArmorRate());
      ds.field("HealHeavyArmorRate", &self.HealHeavyArmorRate());
      ds.field("HealUnarmedRate", &self.HealUnarmedRate());
      ds.field("HealElasticArmorRate", &self.HealElasticArmorRate());
      ds.field("HealNormalArmorRate", &self.HealNormalArmorRate());
      ds.field("HealedExplosionRate", &self.HealedExplosionRate());
      ds.field("HealedPierceRate", &self.HealedPierceRate());
      ds.field("HealedMysticRate", &self.HealedMysticRate());
      ds.field("HealedSonicRate", &self.HealedSonicRate());
      ds.field("HealedNormalRate", &self.HealedNormalRate());
      ds.field("StreetBattleAdaptation", &self.StreetBattleAdaptation());
      ds.field("OutdoorBattleAdaptation", &self.OutdoorBattleAdaptation());
      ds.field("IndoorBattleAdaptation", &self.IndoorBattleAdaptation());
      ds.field("RegenCost", &self.RegenCost());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterStatExcelT {
  pub CharacterId: i64,
  pub StabilityRate: i64,
  pub StabilityPoint: i64,
  pub AttackPower1: i64,
  pub AttackPower100: i64,
  pub MaxHP1: i64,
  pub MaxHP100: i64,
  pub DefensePower1: i64,
  pub DefensePower100: i64,
  pub HealPower1: i64,
  pub HealPower100: i64,
  pub DodgePoint: i64,
  pub AccuracyPoint: i64,
  pub CriticalPoint: i64,
  pub CriticalResistPoint: i64,
  pub CriticalDamageRate: i64,
  pub CriticalDamageResistRate: i64,
  pub BlockRate: i64,
  pub HealEffectivenessRate: i64,
  pub OppressionPower: i64,
  pub OppressionResist: i64,
  pub DefensePenetration1: i64,
  pub DefensePenetration100: i64,
  pub DefensePenetrationResist1: i64,
  pub DefensePenetrationResist100: i64,
  pub EnhanceExplosionRate: i64,
  pub EnhancePierceRate: i64,
  pub EnhanceMysticRate: i64,
  pub EnhanceSonicRate: i64,
  pub EnhanceSiegeRate: i64,
  pub EnhanceNormalRate: i64,
  pub EnhanceLightArmorRate: i64,
  pub EnhanceHeavyArmorRate: i64,
  pub EnhanceUnarmedRate: i64,
  pub EnhanceElasticArmorRate: i64,
  pub EnhanceStructureRate: i64,
  pub EnhanceNormalArmorRate: i64,
  pub ExtendBuffDuration: i64,
  pub ExtendDebuffDuration: i64,
  pub ExtendCrowdControlDuration: i64,
  pub AmmoCount: i64,
  pub AmmoCost: i64,
  pub IgnoreDelayCount: i64,
  pub NormalAttackSpeed: i64,
  pub Range: i64,
  pub InitialRangeRate: i64,
  pub MoveSpeed: i64,
  pub SightPoint: i64,
  pub ActiveGauge: i64,
  pub GroggyGauge: i32,
  pub GroggyTime: i32,
  pub StrategyMobility: i64,
  pub ActionCount: i64,
  pub StrategySightRange: i64,
  pub DamageRatio: i64,
  pub DamagedRatio: i64,
  pub DamageRatio2Increase: i64,
  pub DamageRatio2Decrease: i64,
  pub DamagedRatio2Increase: i64,
  pub DamagedRatio2Decrease: i64,
  pub ExDamagedRatioIncrease: i64,
  pub ExDamagedRatioDecrease: i64,
  pub EnhanceExDamageRate: i64,
  pub ReduceExDamagedRate: i64,
  pub EnhanceBasicsDamageRate: i64,
  pub ReduceBasicsDamagedRate: i64,
  pub HealRate: i64,
  pub HealLightArmorRate: i64,
  pub HealHeavyArmorRate: i64,
  pub HealUnarmedRate: i64,
  pub HealElasticArmorRate: i64,
  pub HealNormalArmorRate: i64,
  pub HealedExplosionRate: i64,
  pub HealedPierceRate: i64,
  pub HealedMysticRate: i64,
  pub HealedSonicRate: i64,
  pub HealedNormalRate: i64,
  pub StreetBattleAdaptation: TerrainAdaptationStat,
  pub OutdoorBattleAdaptation: TerrainAdaptationStat,
  pub IndoorBattleAdaptation: TerrainAdaptationStat,
  pub RegenCost: i64,
}
impl Default for CharacterStatExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      StabilityRate: 0,
      StabilityPoint: 0,
      AttackPower1: 0,
      AttackPower100: 0,
      MaxHP1: 0,
      MaxHP100: 0,
      DefensePower1: 0,
      DefensePower100: 0,
      HealPower1: 0,
      HealPower100: 0,
      DodgePoint: 0,
      AccuracyPoint: 0,
      CriticalPoint: 0,
      CriticalResistPoint: 0,
      CriticalDamageRate: 0,
      CriticalDamageResistRate: 0,
      BlockRate: 0,
      HealEffectivenessRate: 0,
      OppressionPower: 0,
      OppressionResist: 0,
      DefensePenetration1: 0,
      DefensePenetration100: 0,
      DefensePenetrationResist1: 0,
      DefensePenetrationResist100: 0,
      EnhanceExplosionRate: 0,
      EnhancePierceRate: 0,
      EnhanceMysticRate: 0,
      EnhanceSonicRate: 0,
      EnhanceSiegeRate: 0,
      EnhanceNormalRate: 0,
      EnhanceLightArmorRate: 0,
      EnhanceHeavyArmorRate: 0,
      EnhanceUnarmedRate: 0,
      EnhanceElasticArmorRate: 0,
      EnhanceStructureRate: 0,
      EnhanceNormalArmorRate: 0,
      ExtendBuffDuration: 0,
      ExtendDebuffDuration: 0,
      ExtendCrowdControlDuration: 0,
      AmmoCount: 0,
      AmmoCost: 0,
      IgnoreDelayCount: 0,
      NormalAttackSpeed: 0,
      Range: 0,
      InitialRangeRate: 0,
      MoveSpeed: 0,
      SightPoint: 0,
      ActiveGauge: 0,
      GroggyGauge: 0,
      GroggyTime: 0,
      StrategyMobility: 0,
      ActionCount: 0,
      StrategySightRange: 0,
      DamageRatio: 0,
      DamagedRatio: 0,
      DamageRatio2Increase: 0,
      DamageRatio2Decrease: 0,
      DamagedRatio2Increase: 0,
      DamagedRatio2Decrease: 0,
      ExDamagedRatioIncrease: 0,
      ExDamagedRatioDecrease: 0,
      EnhanceExDamageRate: 0,
      ReduceExDamagedRate: 0,
      EnhanceBasicsDamageRate: 0,
      ReduceBasicsDamagedRate: 0,
      HealRate: 0,
      HealLightArmorRate: 0,
      HealHeavyArmorRate: 0,
      HealUnarmedRate: 0,
      HealElasticArmorRate: 0,
      HealNormalArmorRate: 0,
      HealedExplosionRate: 0,
      HealedPierceRate: 0,
      HealedMysticRate: 0,
      HealedSonicRate: 0,
      HealedNormalRate: 0,
      StreetBattleAdaptation: TerrainAdaptationStat::D,
      OutdoorBattleAdaptation: TerrainAdaptationStat::D,
      IndoorBattleAdaptation: TerrainAdaptationStat::D,
      RegenCost: 0,
    }
  }
}
impl CharacterStatExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterStatExcel<'b>> {
    let CharacterId = self.CharacterId;
    let StabilityRate = self.StabilityRate;
    let StabilityPoint = self.StabilityPoint;
    let AttackPower1 = self.AttackPower1;
    let AttackPower100 = self.AttackPower100;
    let MaxHP1 = self.MaxHP1;
    let MaxHP100 = self.MaxHP100;
    let DefensePower1 = self.DefensePower1;
    let DefensePower100 = self.DefensePower100;
    let HealPower1 = self.HealPower1;
    let HealPower100 = self.HealPower100;
    let DodgePoint = self.DodgePoint;
    let AccuracyPoint = self.AccuracyPoint;
    let CriticalPoint = self.CriticalPoint;
    let CriticalResistPoint = self.CriticalResistPoint;
    let CriticalDamageRate = self.CriticalDamageRate;
    let CriticalDamageResistRate = self.CriticalDamageResistRate;
    let BlockRate = self.BlockRate;
    let HealEffectivenessRate = self.HealEffectivenessRate;
    let OppressionPower = self.OppressionPower;
    let OppressionResist = self.OppressionResist;
    let DefensePenetration1 = self.DefensePenetration1;
    let DefensePenetration100 = self.DefensePenetration100;
    let DefensePenetrationResist1 = self.DefensePenetrationResist1;
    let DefensePenetrationResist100 = self.DefensePenetrationResist100;
    let EnhanceExplosionRate = self.EnhanceExplosionRate;
    let EnhancePierceRate = self.EnhancePierceRate;
    let EnhanceMysticRate = self.EnhanceMysticRate;
    let EnhanceSonicRate = self.EnhanceSonicRate;
    let EnhanceSiegeRate = self.EnhanceSiegeRate;
    let EnhanceNormalRate = self.EnhanceNormalRate;
    let EnhanceLightArmorRate = self.EnhanceLightArmorRate;
    let EnhanceHeavyArmorRate = self.EnhanceHeavyArmorRate;
    let EnhanceUnarmedRate = self.EnhanceUnarmedRate;
    let EnhanceElasticArmorRate = self.EnhanceElasticArmorRate;
    let EnhanceStructureRate = self.EnhanceStructureRate;
    let EnhanceNormalArmorRate = self.EnhanceNormalArmorRate;
    let ExtendBuffDuration = self.ExtendBuffDuration;
    let ExtendDebuffDuration = self.ExtendDebuffDuration;
    let ExtendCrowdControlDuration = self.ExtendCrowdControlDuration;
    let AmmoCount = self.AmmoCount;
    let AmmoCost = self.AmmoCost;
    let IgnoreDelayCount = self.IgnoreDelayCount;
    let NormalAttackSpeed = self.NormalAttackSpeed;
    let Range = self.Range;
    let InitialRangeRate = self.InitialRangeRate;
    let MoveSpeed = self.MoveSpeed;
    let SightPoint = self.SightPoint;
    let ActiveGauge = self.ActiveGauge;
    let GroggyGauge = self.GroggyGauge;
    let GroggyTime = self.GroggyTime;
    let StrategyMobility = self.StrategyMobility;
    let ActionCount = self.ActionCount;
    let StrategySightRange = self.StrategySightRange;
    let DamageRatio = self.DamageRatio;
    let DamagedRatio = self.DamagedRatio;
    let DamageRatio2Increase = self.DamageRatio2Increase;
    let DamageRatio2Decrease = self.DamageRatio2Decrease;
    let DamagedRatio2Increase = self.DamagedRatio2Increase;
    let DamagedRatio2Decrease = self.DamagedRatio2Decrease;
    let ExDamagedRatioIncrease = self.ExDamagedRatioIncrease;
    let ExDamagedRatioDecrease = self.ExDamagedRatioDecrease;
    let EnhanceExDamageRate = self.EnhanceExDamageRate;
    let ReduceExDamagedRate = self.ReduceExDamagedRate;
    let EnhanceBasicsDamageRate = self.EnhanceBasicsDamageRate;
    let ReduceBasicsDamagedRate = self.ReduceBasicsDamagedRate;
    let HealRate = self.HealRate;
    let HealLightArmorRate = self.HealLightArmorRate;
    let HealHeavyArmorRate = self.HealHeavyArmorRate;
    let HealUnarmedRate = self.HealUnarmedRate;
    let HealElasticArmorRate = self.HealElasticArmorRate;
    let HealNormalArmorRate = self.HealNormalArmorRate;
    let HealedExplosionRate = self.HealedExplosionRate;
    let HealedPierceRate = self.HealedPierceRate;
    let HealedMysticRate = self.HealedMysticRate;
    let HealedSonicRate = self.HealedSonicRate;
    let HealedNormalRate = self.HealedNormalRate;
    let StreetBattleAdaptation = self.StreetBattleAdaptation;
    let OutdoorBattleAdaptation = self.OutdoorBattleAdaptation;
    let IndoorBattleAdaptation = self.IndoorBattleAdaptation;
    let RegenCost = self.RegenCost;
    CharacterStatExcel::create(_fbb, &CharacterStatExcelArgs{
      CharacterId,
      StabilityRate,
      StabilityPoint,
      AttackPower1,
      AttackPower100,
      MaxHP1,
      MaxHP100,
      DefensePower1,
      DefensePower100,
      HealPower1,
      HealPower100,
      DodgePoint,
      AccuracyPoint,
      CriticalPoint,
      CriticalResistPoint,
      CriticalDamageRate,
      CriticalDamageResistRate,
      BlockRate,
      HealEffectivenessRate,
      OppressionPower,
      OppressionResist,
      DefensePenetration1,
      DefensePenetration100,
      DefensePenetrationResist1,
      DefensePenetrationResist100,
      EnhanceExplosionRate,
      EnhancePierceRate,
      EnhanceMysticRate,
      EnhanceSonicRate,
      EnhanceSiegeRate,
      EnhanceNormalRate,
      EnhanceLightArmorRate,
      EnhanceHeavyArmorRate,
      EnhanceUnarmedRate,
      EnhanceElasticArmorRate,
      EnhanceStructureRate,
      EnhanceNormalArmorRate,
      ExtendBuffDuration,
      ExtendDebuffDuration,
      ExtendCrowdControlDuration,
      AmmoCount,
      AmmoCost,
      IgnoreDelayCount,
      NormalAttackSpeed,
      Range,
      InitialRangeRate,
      MoveSpeed,
      SightPoint,
      ActiveGauge,
      GroggyGauge,
      GroggyTime,
      StrategyMobility,
      ActionCount,
      StrategySightRange,
      DamageRatio,
      DamagedRatio,
      DamageRatio2Increase,
      DamageRatio2Decrease,
      DamagedRatio2Increase,
      DamagedRatio2Decrease,
      ExDamagedRatioIncrease,
      ExDamagedRatioDecrease,
      EnhanceExDamageRate,
      ReduceExDamagedRate,
      EnhanceBasicsDamageRate,
      ReduceBasicsDamagedRate,
      HealRate,
      HealLightArmorRate,
      HealHeavyArmorRate,
      HealUnarmedRate,
      HealElasticArmorRate,
      HealNormalArmorRate,
      HealedExplosionRate,
      HealedPierceRate,
      HealedMysticRate,
      HealedSonicRate,
      HealedNormalRate,
      StreetBattleAdaptation,
      OutdoorBattleAdaptation,
      IndoorBattleAdaptation,
      RegenCost,
    })
  }
}
