// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGStartDeckCharacterExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGStartDeckCharacterExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGStartDeckCharacterExcel<'a> {
  type Inner = MinigameCCGStartDeckCharacterExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGStartDeckCharacterExcel<'a> {
  pub const VT_CCGID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGStartDeckCharacterExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGStartDeckCharacterExcelArgs
  ) -> flatbuffers::WIPOffset<MinigameCCGStartDeckCharacterExcel<'bldr>> {
    let mut builder = MinigameCCGStartDeckCharacterExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGStartDeckCharacter");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.CCGId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CCGId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGStartDeckCharacterExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGStartDeckCharacter");
      let CCGId = self.CCGId();
      let CharacterId = self.CharacterId();
    MinigameCCGStartDeckCharacterExcelT {
      CCGId,
      CharacterId,
    }
  }

  #[inline]
  pub fn CCGId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGStartDeckCharacterExcel::VT_CCGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGStartDeckCharacterExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGStartDeckCharacterExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CCGId", Self::VT_CCGID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGStartDeckCharacterExcelArgs {
    pub CCGId: i64,
    pub CharacterId: i64,
}
impl<'a> Default for MinigameCCGStartDeckCharacterExcelArgs {
  #[inline]
  fn default() -> Self {
    MinigameCCGStartDeckCharacterExcelArgs {
      CCGId: 0,
      CharacterId: 0,
    }
  }
}

impl Serialize for MinigameCCGStartDeckCharacterExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGStartDeckCharacterExcel", 2)?;
      s.serialize_field("CCGId", &self.CCGId())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
    s.end()
  }
}

pub struct MinigameCCGStartDeckCharacterExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGStartDeckCharacterExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CCGId(&mut self, CCGId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGStartDeckCharacterExcel::VT_CCGID, CCGId, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGStartDeckCharacterExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGStartDeckCharacterExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGStartDeckCharacterExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGStartDeckCharacterExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGStartDeckCharacterExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGStartDeckCharacterExcel");
      ds.field("CCGId", &self.CCGId());
      ds.field("CharacterId", &self.CharacterId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGStartDeckCharacterExcelT {
  pub CCGId: i64,
  pub CharacterId: i64,
}
impl Default for MinigameCCGStartDeckCharacterExcelT {
  fn default() -> Self {
    Self {
      CCGId: 0,
      CharacterId: 0,
    }
  }
}
impl MinigameCCGStartDeckCharacterExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGStartDeckCharacterExcel<'b>> {
    let CCGId = self.CCGId;
    let CharacterId = self.CharacterId;
    MinigameCCGStartDeckCharacterExcel::create(_fbb, &MinigameCCGStartDeckCharacterExcelArgs{
      CCGId,
      CharacterId,
    })
  }
}
