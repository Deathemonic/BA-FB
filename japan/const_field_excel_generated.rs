// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstFieldExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstFieldExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstFieldExcel<'a> {
  type Inner = ConstFieldExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstFieldExcel<'a> {
  pub const VT_DIALOGSMOOTHTIME: flatbuffers::VOffsetT = 4;
  pub const VT_TALKDIALOGDURATIONDEFAULT: flatbuffers::VOffsetT = 6;
  pub const VT_THINKDIALOGDURATIONDEFAULT: flatbuffers::VOffsetT = 8;
  pub const VT_IDLETHINKDELAYMIN: flatbuffers::VOffsetT = 10;
  pub const VT_IDLETHINKDELAYMAX: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstFieldExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstFieldExcelArgs
  ) -> flatbuffers::WIPOffset<ConstFieldExcel<'bldr>> {
    let mut builder = ConstFieldExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstField");
      let x = args.IdleThinkDelayMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_IdleThinkDelayMax(x);
      let x = args.IdleThinkDelayMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_IdleThinkDelayMin(x);
      let x = args.ThinkDialogDurationDefault;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ThinkDialogDurationDefault(x);
      let x = args.TalkDialogDurationDefault;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TalkDialogDurationDefault(x);
      let x = args.DialogSmoothTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DialogSmoothTime(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConstFieldExcelT {
    let key = table_encryption_service::create_key(b"ConstField");
      let DialogSmoothTime = self.DialogSmoothTime();
      let TalkDialogDurationDefault = self.TalkDialogDurationDefault();
      let ThinkDialogDurationDefault = self.ThinkDialogDurationDefault();
      let IdleThinkDelayMin = self.IdleThinkDelayMin();
      let IdleThinkDelayMax = self.IdleThinkDelayMax();
    ConstFieldExcelT {
      DialogSmoothTime,
      TalkDialogDurationDefault,
      ThinkDialogDurationDefault,
      IdleThinkDelayMin,
      IdleThinkDelayMax,
    }
  }

  #[inline]
  pub fn DialogSmoothTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstFieldExcel::VT_DIALOGSMOOTHTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TalkDialogDurationDefault(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstFieldExcel::VT_TALKDIALOGDURATIONDEFAULT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ThinkDialogDurationDefault(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstFieldExcel::VT_THINKDIALOGDURATIONDEFAULT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IdleThinkDelayMin(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstFieldExcel::VT_IDLETHINKDELAYMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IdleThinkDelayMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstFieldExcel::VT_IDLETHINKDELAYMAX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConstFieldExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("DialogSmoothTime", Self::VT_DIALOGSMOOTHTIME, false)?
     .visit_field::<i32>("TalkDialogDurationDefault", Self::VT_TALKDIALOGDURATIONDEFAULT, false)?
     .visit_field::<i32>("ThinkDialogDurationDefault", Self::VT_THINKDIALOGDURATIONDEFAULT, false)?
     .visit_field::<i32>("IdleThinkDelayMin", Self::VT_IDLETHINKDELAYMIN, false)?
     .visit_field::<i32>("IdleThinkDelayMax", Self::VT_IDLETHINKDELAYMAX, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstFieldExcelArgs {
    pub DialogSmoothTime: i32,
    pub TalkDialogDurationDefault: i32,
    pub ThinkDialogDurationDefault: i32,
    pub IdleThinkDelayMin: i32,
    pub IdleThinkDelayMax: i32,
}
impl<'a> Default for ConstFieldExcelArgs {
  #[inline]
  fn default() -> Self {
    ConstFieldExcelArgs {
      DialogSmoothTime: 0,
      TalkDialogDurationDefault: 0,
      ThinkDialogDurationDefault: 0,
      IdleThinkDelayMin: 0,
      IdleThinkDelayMax: 0,
    }
  }
}

impl Serialize for ConstFieldExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstFieldExcel", 5)?;
      s.serialize_field("DialogSmoothTime", &self.DialogSmoothTime())?;
      s.serialize_field("TalkDialogDurationDefault", &self.TalkDialogDurationDefault())?;
      s.serialize_field("ThinkDialogDurationDefault", &self.ThinkDialogDurationDefault())?;
      s.serialize_field("IdleThinkDelayMin", &self.IdleThinkDelayMin())?;
      s.serialize_field("IdleThinkDelayMax", &self.IdleThinkDelayMax())?;
    s.end()
  }
}

pub struct ConstFieldExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstFieldExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_DialogSmoothTime(&mut self, DialogSmoothTime: i32) {
    self.fbb_.push_slot::<i32>(ConstFieldExcel::VT_DIALOGSMOOTHTIME, DialogSmoothTime, 0);
  }
  #[inline]
  pub fn add_TalkDialogDurationDefault(&mut self, TalkDialogDurationDefault: i32) {
    self.fbb_.push_slot::<i32>(ConstFieldExcel::VT_TALKDIALOGDURATIONDEFAULT, TalkDialogDurationDefault, 0);
  }
  #[inline]
  pub fn add_ThinkDialogDurationDefault(&mut self, ThinkDialogDurationDefault: i32) {
    self.fbb_.push_slot::<i32>(ConstFieldExcel::VT_THINKDIALOGDURATIONDEFAULT, ThinkDialogDurationDefault, 0);
  }
  #[inline]
  pub fn add_IdleThinkDelayMin(&mut self, IdleThinkDelayMin: i32) {
    self.fbb_.push_slot::<i32>(ConstFieldExcel::VT_IDLETHINKDELAYMIN, IdleThinkDelayMin, 0);
  }
  #[inline]
  pub fn add_IdleThinkDelayMax(&mut self, IdleThinkDelayMax: i32) {
    self.fbb_.push_slot::<i32>(ConstFieldExcel::VT_IDLETHINKDELAYMAX, IdleThinkDelayMax, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstFieldExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstFieldExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstFieldExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstFieldExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstFieldExcel");
      ds.field("DialogSmoothTime", &self.DialogSmoothTime());
      ds.field("TalkDialogDurationDefault", &self.TalkDialogDurationDefault());
      ds.field("ThinkDialogDurationDefault", &self.ThinkDialogDurationDefault());
      ds.field("IdleThinkDelayMin", &self.IdleThinkDelayMin());
      ds.field("IdleThinkDelayMax", &self.IdleThinkDelayMax());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstFieldExcelT {
  pub DialogSmoothTime: i32,
  pub TalkDialogDurationDefault: i32,
  pub ThinkDialogDurationDefault: i32,
  pub IdleThinkDelayMin: i32,
  pub IdleThinkDelayMax: i32,
}
impl Default for ConstFieldExcelT {
  fn default() -> Self {
    Self {
      DialogSmoothTime: 0,
      TalkDialogDurationDefault: 0,
      ThinkDialogDurationDefault: 0,
      IdleThinkDelayMin: 0,
      IdleThinkDelayMax: 0,
    }
  }
}
impl ConstFieldExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstFieldExcel<'b>> {
    let DialogSmoothTime = self.DialogSmoothTime;
    let TalkDialogDurationDefault = self.TalkDialogDurationDefault;
    let ThinkDialogDurationDefault = self.ThinkDialogDurationDefault;
    let IdleThinkDelayMin = self.IdleThinkDelayMin;
    let IdleThinkDelayMax = self.IdleThinkDelayMax;
    ConstFieldExcel::create(_fbb, &ConstFieldExcelArgs{
      DialogSmoothTime,
      TalkDialogDurationDefault,
      ThinkDialogDurationDefault,
      IdleThinkDelayMin,
      IdleThinkDelayMax,
    })
  }
}
