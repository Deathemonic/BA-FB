// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FurnitureExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FurnitureExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FurnitureExcel<'a> {
  type Inner = FurnitureExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FurnitureExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTIONSTEP: flatbuffers::VOffsetT = 6;
  pub const VT_RARITY: flatbuffers::VOffsetT = 8;
  pub const VT_CATEGORY: flatbuffers::VOffsetT = 10;
  pub const VT_SUBCATEGORY: flatbuffers::VOffsetT = 12;
  pub const VT_CHECKFLOORDECORATION: flatbuffers::VOffsetT = 14;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 16;
  pub const VT_STARGRADEINIT: flatbuffers::VOffsetT = 18;
  pub const VT_TIER: flatbuffers::VOffsetT = 20;
  pub const VT_ICON: flatbuffers::VOffsetT = 22;
  pub const VT_SIZEWIDTH: flatbuffers::VOffsetT = 24;
  pub const VT_SIZEHEIGHT: flatbuffers::VOffsetT = 26;
  pub const VT_OTHERSIZE: flatbuffers::VOffsetT = 28;
  pub const VT_EXPANDWIDTH: flatbuffers::VOffsetT = 30;
  pub const VT_ENABLE: flatbuffers::VOffsetT = 32;
  pub const VT_REVERSEROTATION: flatbuffers::VOffsetT = 34;
  pub const VT_PREFAB: flatbuffers::VOffsetT = 36;
  pub const VT_PREFABEXPAND: flatbuffers::VOffsetT = 38;
  pub const VT_SUBPREFAB: flatbuffers::VOffsetT = 40;
  pub const VT_SUBEXPANDPREFAB: flatbuffers::VOffsetT = 42;
  pub const VT_CORNERPREFAB: flatbuffers::VOffsetT = 44;
  pub const VT_STACKABLEMAX: flatbuffers::VOffsetT = 46;
  pub const VT_RECIPECRAFTID: flatbuffers::VOffsetT = 48;
  pub const VT_SETGROUDPID: flatbuffers::VOffsetT = 50;
  pub const VT_COMFORTBONUS: flatbuffers::VOffsetT = 52;
  pub const VT_VISITOPERATIONTYPE: flatbuffers::VOffsetT = 54;
  pub const VT_VISITBONUSOPERATIONTYPE: flatbuffers::VOffsetT = 56;
  pub const VT_TAGS: flatbuffers::VOffsetT = 58;
  pub const VT_CRAFTQUALITYTIER0: flatbuffers::VOffsetT = 60;
  pub const VT_CRAFTQUALITYTIER1: flatbuffers::VOffsetT = 62;
  pub const VT_CRAFTQUALITYTIER2: flatbuffers::VOffsetT = 64;
  pub const VT_SHIFTINGCRAFTQUALITY: flatbuffers::VOffsetT = 66;
  pub const VT_FURNITUREFUNCTIONTYPE: flatbuffers::VOffsetT = 68;
  pub const VT_FURNITUREFUNCTIONPARAMETER: flatbuffers::VOffsetT = 70;
  pub const VT_VIDEOID: flatbuffers::VOffsetT = 72;
  pub const VT_EVENTCOLLECTIONID: flatbuffers::VOffsetT = 74;
  pub const VT_FURNITUREBUBBLEOFFSETX: flatbuffers::VOffsetT = 76;
  pub const VT_FURNITUREBUBBLEOFFSETY: flatbuffers::VOffsetT = 78;
  pub const VT_CAFECHARACTERSTATEREQ: flatbuffers::VOffsetT = 80;
  pub const VT_CAFECHARACTERSTATEADD: flatbuffers::VOffsetT = 82;
  pub const VT_CAFECHARACTERSTATEMAKE: flatbuffers::VOffsetT = 84;
  pub const VT_CAFECHARACTERSTATEONLY: flatbuffers::VOffsetT = 86;
  pub const VT_HIDECRAFTSHORTCUT: flatbuffers::VOffsetT = 88;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FurnitureExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FurnitureExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FurnitureExcel<'bldr>> {
    let mut builder = FurnitureExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Furniture");
      let x = args.FurnitureBubbleOffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FurnitureBubbleOffsetY(x);
      let x = args.FurnitureBubbleOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FurnitureBubbleOffsetX(x);
      let x = args.EventCollectionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventCollectionId(x);
      let x = args.VideoId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_VideoId(x);
      let x = args.ShiftingCraftQuality;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShiftingCraftQuality(x);
      let x = args.CraftQualityTier2;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier2(x);
      let x = args.CraftQualityTier1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier1(x);
      let x = args.CraftQualityTier0;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier0(x);
      let x = args.VisitBonusOperationType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_VisitBonusOperationType(x);
      let x = args.VisitOperationType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_VisitOperationType(x);
      let x = args.ComfortBonus;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ComfortBonus(x);
      let x = args.SetGroudpId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SetGroudpId(x);
      let x = args.RecipeCraftId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecipeCraftId(x);
      let x = args.StackableMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StackableMax(x);
      let x = args.Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Tier(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.CafeCharacterStateOnly {
        builder.add_CafeCharacterStateOnly(x);
      }
      if let Some(x) = args.CafeCharacterStateMake {
        builder.add_CafeCharacterStateMake(x);
      }
      if let Some(x) = args.CafeCharacterStateAdd {
        builder.add_CafeCharacterStateAdd(x);
      }
      if let Some(x) = args.CafeCharacterStateReq {
        builder.add_CafeCharacterStateReq(x);
      }
      if let Some(x) = args.FurnitureFunctionParameter {
        builder.add_FurnitureFunctionParameter(x);
      }
      let x = args.FurnitureFunctionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_FurnitureFunctionType(x);
      if let Some(x) = args.Tags {
        builder.add_Tags(x);
      }
      if let Some(x) = args.CornerPrefab {
        builder.add_CornerPrefab(x);
      }
      if let Some(x) = args.SubExpandPrefab {
        builder.add_SubExpandPrefab(x);
      }
      if let Some(x) = args.SubPrefab {
        builder.add_SubPrefab(x);
      }
      if let Some(x) = args.PrefabExpand {
        builder.add_PrefabExpand(x);
      }
      if let Some(x) = args.Prefab {
        builder.add_Prefab(x);
      }
      let x = args.ExpandWidth;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExpandWidth(x);
      let x = args.OtherSize;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_OtherSize(x);
      let x = args.SizeHeight;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SizeHeight(x);
      let x = args.SizeWidth;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SizeWidth(x);
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      let x = args.StarGradeInit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StarGradeInit(x);
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.SubCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_SubCategory(x);
      let x = args.Category;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Category(x);
      let x = args.Rarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Rarity(x);
      let x = args.ProductionStep;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ProductionStep(x);
      builder.add_HideCraftShortcut(args.HideCraftShortcut);
      builder.add_ReverseRotation(args.ReverseRotation);
      builder.add_Enable(args.Enable);
      builder.add_CheckFloorDecoration(args.CheckFloorDecoration);
    builder.finish()
  }

  pub fn unpack(&self) -> FurnitureExcelT {
    let key = table_encryption_service::create_key(b"Furniture");
      let Id = self.Id();
      let ProductionStep = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ProductionStep(), &key)
      } else {
        self.ProductionStep()
      };
      let Rarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Rarity(), &key)
      } else {
        self.Rarity()
      };
      let Category = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Category(), &key)
      } else {
        self.Category()
      };
      let SubCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.SubCategory(), &key)
      } else {
        self.SubCategory()
      };
      let CheckFloorDecoration = self.CheckFloorDecoration();
      let LocalizeEtcId = self.LocalizeEtcId();
      let StarGradeInit = self.StarGradeInit();
      let Tier = self.Tier();
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let SizeWidth = self.SizeWidth();
      let SizeHeight = self.SizeHeight();
      let OtherSize = self.OtherSize();
      let ExpandWidth = self.ExpandWidth();
      let Enable = self.Enable();
      let ReverseRotation = self.ReverseRotation();
    let Prefab = self.Prefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabExpand = self.PrefabExpand().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubPrefab = self.SubPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubExpandPrefab = self.SubExpandPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CornerPrefab = self.CornerPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StackableMax = self.StackableMax();
      let RecipeCraftId = self.RecipeCraftId();
      let SetGroudpId = self.SetGroudpId();
      let ComfortBonus = self.ComfortBonus();
      let VisitOperationType = self.VisitOperationType();
      let VisitBonusOperationType = self.VisitBonusOperationType();
    let Tags = self.Tags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let CraftQualityTier0 = self.CraftQualityTier0();
      let CraftQualityTier1 = self.CraftQualityTier1();
      let CraftQualityTier2 = self.CraftQualityTier2();
      let ShiftingCraftQuality = self.ShiftingCraftQuality();
      let FurnitureFunctionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.FurnitureFunctionType(), &key)
      } else {
        self.FurnitureFunctionType()
      };
    let FurnitureFunctionParameter = self.FurnitureFunctionParameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let VideoId = self.VideoId();
      let EventCollectionId = self.EventCollectionId();
      let FurnitureBubbleOffsetX = self.FurnitureBubbleOffsetX();
      let FurnitureBubbleOffsetY = self.FurnitureBubbleOffsetY();
    let CafeCharacterStateReq = self.CafeCharacterStateReq().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let CafeCharacterStateAdd = self.CafeCharacterStateAdd().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let CafeCharacterStateMake = self.CafeCharacterStateMake().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let CafeCharacterStateOnly = self.CafeCharacterStateOnly().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
      let HideCraftShortcut = self.HideCraftShortcut();
    FurnitureExcelT {
      Id,
      ProductionStep,
      Rarity,
      Category,
      SubCategory,
      CheckFloorDecoration,
      LocalizeEtcId,
      StarGradeInit,
      Tier,
      Icon,
      SizeWidth,
      SizeHeight,
      OtherSize,
      ExpandWidth,
      Enable,
      ReverseRotation,
      Prefab,
      PrefabExpand,
      SubPrefab,
      SubExpandPrefab,
      CornerPrefab,
      StackableMax,
      RecipeCraftId,
      SetGroudpId,
      ComfortBonus,
      VisitOperationType,
      VisitBonusOperationType,
      Tags,
      CraftQualityTier0,
      CraftQualityTier1,
      CraftQualityTier2,
      ShiftingCraftQuality,
      FurnitureFunctionType,
      FurnitureFunctionParameter,
      VideoId,
      EventCollectionId,
      FurnitureBubbleOffsetX,
      FurnitureBubbleOffsetY,
      CafeCharacterStateReq,
      CafeCharacterStateAdd,
      CafeCharacterStateMake,
      CafeCharacterStateOnly,
      HideCraftShortcut,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductionStep(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(FurnitureExcel::VT_PRODUCTIONSTEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn Rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(FurnitureExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn Category(&self) -> FurnitureCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FurnitureCategory>(FurnitureExcel::VT_CATEGORY, Some(FurnitureCategory::Furnitures)).unwrap()}
  }
  #[inline]
  pub fn SubCategory(&self) -> FurnitureSubCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FurnitureSubCategory>(FurnitureExcel::VT_SUBCATEGORY, Some(FurnitureSubCategory::Table)).unwrap()}
  }
  #[inline]
  pub fn CheckFloorDecoration(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FurnitureExcel::VT_CHECKFLOORDECORATION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FurnitureExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarGradeInit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FurnitureExcel::VT_STARGRADEINIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tier(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureExcel::VT_ICON, None)}
  }
  #[inline]
  pub fn SizeWidth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FurnitureExcel::VT_SIZEWIDTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SizeHeight(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FurnitureExcel::VT_SIZEHEIGHT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OtherSize(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FurnitureExcel::VT_OTHERSIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExpandWidth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FurnitureExcel::VT_EXPANDWIDTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Enable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FurnitureExcel::VT_ENABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ReverseRotation(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FurnitureExcel::VT_REVERSEROTATION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Prefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureExcel::VT_PREFAB, None)}
  }
  #[inline]
  pub fn PrefabExpand(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureExcel::VT_PREFABEXPAND, None)}
  }
  #[inline]
  pub fn SubPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureExcel::VT_SUBPREFAB, None)}
  }
  #[inline]
  pub fn SubExpandPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureExcel::VT_SUBEXPANDPREFAB, None)}
  }
  #[inline]
  pub fn CornerPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureExcel::VT_CORNERPREFAB, None)}
  }
  #[inline]
  pub fn StackableMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_STACKABLEMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeCraftId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_RECIPECRAFTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SetGroudpId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_SETGROUDPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ComfortBonus(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_COMFORTBONUS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VisitOperationType(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_VISITOPERATIONTYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VisitBonusOperationType(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_VISITBONUSOPERATIONTYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(FurnitureExcel::VT_TAGS, None)}
  }
  #[inline]
  pub fn CraftQualityTier0(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_CRAFTQUALITYTIER0, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CraftQualityTier1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_CRAFTQUALITYTIER1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CraftQualityTier2(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_CRAFTQUALITYTIER2, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShiftingCraftQuality(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_SHIFTINGCRAFTQUALITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FurnitureFunctionType(&self) -> FurnitureFunctionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FurnitureFunctionType>(FurnitureExcel::VT_FURNITUREFUNCTIONTYPE, Some(FurnitureFunctionType::None)).unwrap()}
  }
  #[inline]
  pub fn FurnitureFunctionParameter(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FurnitureExcel::VT_FURNITUREFUNCTIONPARAMETER, None)}
  }
  #[inline]
  pub fn VideoId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_VIDEOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventCollectionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_EVENTCOLLECTIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FurnitureBubbleOffsetX(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_FURNITUREBUBBLEOFFSETX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FurnitureBubbleOffsetY(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureExcel::VT_FURNITUREBUBBLEOFFSETY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CafeCharacterStateReq(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FurnitureExcel::VT_CAFECHARACTERSTATEREQ, None)}
  }
  #[inline]
  pub fn CafeCharacterStateAdd(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FurnitureExcel::VT_CAFECHARACTERSTATEADD, None)}
  }
  #[inline]
  pub fn CafeCharacterStateMake(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FurnitureExcel::VT_CAFECHARACTERSTATEMAKE, None)}
  }
  #[inline]
  pub fn CafeCharacterStateOnly(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FurnitureExcel::VT_CAFECHARACTERSTATEONLY, None)}
  }
  #[inline]
  pub fn HideCraftShortcut(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FurnitureExcel::VT_HIDECRAFTSHORTCUT, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FurnitureExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ProductionStep>("ProductionStep", Self::VT_PRODUCTIONSTEP, false)?
     .visit_field::<Rarity>("Rarity", Self::VT_RARITY, false)?
     .visit_field::<FurnitureCategory>("Category", Self::VT_CATEGORY, false)?
     .visit_field::<FurnitureSubCategory>("SubCategory", Self::VT_SUBCATEGORY, false)?
     .visit_field::<bool>("CheckFloorDecoration", Self::VT_CHECKFLOORDECORATION, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<i32>("StarGradeInit", Self::VT_STARGRADEINIT, false)?
     .visit_field::<i64>("Tier", Self::VT_TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .visit_field::<i32>("SizeWidth", Self::VT_SIZEWIDTH, false)?
     .visit_field::<i32>("SizeHeight", Self::VT_SIZEHEIGHT, false)?
     .visit_field::<i32>("OtherSize", Self::VT_OTHERSIZE, false)?
     .visit_field::<i32>("ExpandWidth", Self::VT_EXPANDWIDTH, false)?
     .visit_field::<bool>("Enable", Self::VT_ENABLE, false)?
     .visit_field::<bool>("ReverseRotation", Self::VT_REVERSEROTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Prefab", Self::VT_PREFAB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabExpand", Self::VT_PREFABEXPAND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubPrefab", Self::VT_SUBPREFAB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubExpandPrefab", Self::VT_SUBEXPANDPREFAB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CornerPrefab", Self::VT_CORNERPREFAB, false)?
     .visit_field::<i64>("StackableMax", Self::VT_STACKABLEMAX, false)?
     .visit_field::<i64>("RecipeCraftId", Self::VT_RECIPECRAFTID, false)?
     .visit_field::<i64>("SetGroudpId", Self::VT_SETGROUDPID, false)?
     .visit_field::<i64>("ComfortBonus", Self::VT_COMFORTBONUS, false)?
     .visit_field::<i64>("VisitOperationType", Self::VT_VISITOPERATIONTYPE, false)?
     .visit_field::<i64>("VisitBonusOperationType", Self::VT_VISITBONUSOPERATIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("Tags", Self::VT_TAGS, false)?
     .visit_field::<i64>("CraftQualityTier0", Self::VT_CRAFTQUALITYTIER0, false)?
     .visit_field::<i64>("CraftQualityTier1", Self::VT_CRAFTQUALITYTIER1, false)?
     .visit_field::<i64>("CraftQualityTier2", Self::VT_CRAFTQUALITYTIER2, false)?
     .visit_field::<i64>("ShiftingCraftQuality", Self::VT_SHIFTINGCRAFTQUALITY, false)?
     .visit_field::<FurnitureFunctionType>("FurnitureFunctionType", Self::VT_FURNITUREFUNCTIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("FurnitureFunctionParameter", Self::VT_FURNITUREFUNCTIONPARAMETER, false)?
     .visit_field::<i64>("VideoId", Self::VT_VIDEOID, false)?
     .visit_field::<i64>("EventCollectionId", Self::VT_EVENTCOLLECTIONID, false)?
     .visit_field::<i64>("FurnitureBubbleOffsetX", Self::VT_FURNITUREBUBBLEOFFSETX, false)?
     .visit_field::<i64>("FurnitureBubbleOffsetY", Self::VT_FURNITUREBUBBLEOFFSETY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("CafeCharacterStateReq", Self::VT_CAFECHARACTERSTATEREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("CafeCharacterStateAdd", Self::VT_CAFECHARACTERSTATEADD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("CafeCharacterStateMake", Self::VT_CAFECHARACTERSTATEMAKE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("CafeCharacterStateOnly", Self::VT_CAFECHARACTERSTATEONLY, false)?
     .visit_field::<bool>("HideCraftShortcut", Self::VT_HIDECRAFTSHORTCUT, false)?
     .finish();
    Ok(())
  }
}
pub struct FurnitureExcelArgs<'a> {
    pub Id: i64,
    pub ProductionStep: ProductionStep,
    pub Rarity: Rarity,
    pub Category: FurnitureCategory,
    pub SubCategory: FurnitureSubCategory,
    pub CheckFloorDecoration: bool,
    pub LocalizeEtcId: u32,
    pub StarGradeInit: i32,
    pub Tier: i64,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SizeWidth: i32,
    pub SizeHeight: i32,
    pub OtherSize: i32,
    pub ExpandWidth: i32,
    pub Enable: bool,
    pub ReverseRotation: bool,
    pub Prefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabExpand: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubExpandPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CornerPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StackableMax: i64,
    pub RecipeCraftId: i64,
    pub SetGroudpId: i64,
    pub ComfortBonus: i64,
    pub VisitOperationType: i64,
    pub VisitBonusOperationType: i64,
    pub Tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub CraftQualityTier0: i64,
    pub CraftQualityTier1: i64,
    pub CraftQualityTier2: i64,
    pub ShiftingCraftQuality: i64,
    pub FurnitureFunctionType: FurnitureFunctionType,
    pub FurnitureFunctionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub VideoId: i64,
    pub EventCollectionId: i64,
    pub FurnitureBubbleOffsetX: i64,
    pub FurnitureBubbleOffsetY: i64,
    pub CafeCharacterStateReq: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub CafeCharacterStateAdd: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub CafeCharacterStateMake: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub CafeCharacterStateOnly: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub HideCraftShortcut: bool,
}
impl<'a> Default for FurnitureExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FurnitureExcelArgs {
      Id: 0,
      ProductionStep: ProductionStep::ToDo,
      Rarity: Rarity::N,
      Category: FurnitureCategory::Furnitures,
      SubCategory: FurnitureSubCategory::Table,
      CheckFloorDecoration: false,
      LocalizeEtcId: 0,
      StarGradeInit: 0,
      Tier: 0,
      Icon: None,
      SizeWidth: 0,
      SizeHeight: 0,
      OtherSize: 0,
      ExpandWidth: 0,
      Enable: false,
      ReverseRotation: false,
      Prefab: None,
      PrefabExpand: None,
      SubPrefab: None,
      SubExpandPrefab: None,
      CornerPrefab: None,
      StackableMax: 0,
      RecipeCraftId: 0,
      SetGroudpId: 0,
      ComfortBonus: 0,
      VisitOperationType: 0,
      VisitBonusOperationType: 0,
      Tags: None,
      CraftQualityTier0: 0,
      CraftQualityTier1: 0,
      CraftQualityTier2: 0,
      ShiftingCraftQuality: 0,
      FurnitureFunctionType: FurnitureFunctionType::None,
      FurnitureFunctionParameter: None,
      VideoId: 0,
      EventCollectionId: 0,
      FurnitureBubbleOffsetX: 0,
      FurnitureBubbleOffsetY: 0,
      CafeCharacterStateReq: None,
      CafeCharacterStateAdd: None,
      CafeCharacterStateMake: None,
      CafeCharacterStateOnly: None,
      HideCraftShortcut: false,
    }
  }
}

impl Serialize for FurnitureExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FurnitureExcel", 43)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ProductionStep", &self.ProductionStep())?;
      s.serialize_field("Rarity", &self.Rarity())?;
      s.serialize_field("Category", &self.Category())?;
      s.serialize_field("SubCategory", &self.SubCategory())?;
      s.serialize_field("CheckFloorDecoration", &self.CheckFloorDecoration())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("StarGradeInit", &self.StarGradeInit())?;
      s.serialize_field("Tier", &self.Tier())?;
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
      s.serialize_field("SizeWidth", &self.SizeWidth())?;
      s.serialize_field("SizeHeight", &self.SizeHeight())?;
      s.serialize_field("OtherSize", &self.OtherSize())?;
      s.serialize_field("ExpandWidth", &self.ExpandWidth())?;
      s.serialize_field("Enable", &self.Enable())?;
      s.serialize_field("ReverseRotation", &self.ReverseRotation())?;
      if let Some(f) = self.Prefab() {
        s.serialize_field("Prefab", &f)?;
      } else {
        s.skip_field("Prefab")?;
      }
      if let Some(f) = self.PrefabExpand() {
        s.serialize_field("PrefabExpand", &f)?;
      } else {
        s.skip_field("PrefabExpand")?;
      }
      if let Some(f) = self.SubPrefab() {
        s.serialize_field("SubPrefab", &f)?;
      } else {
        s.skip_field("SubPrefab")?;
      }
      if let Some(f) = self.SubExpandPrefab() {
        s.serialize_field("SubExpandPrefab", &f)?;
      } else {
        s.skip_field("SubExpandPrefab")?;
      }
      if let Some(f) = self.CornerPrefab() {
        s.serialize_field("CornerPrefab", &f)?;
      } else {
        s.skip_field("CornerPrefab")?;
      }
      s.serialize_field("StackableMax", &self.StackableMax())?;
      s.serialize_field("RecipeCraftId", &self.RecipeCraftId())?;
      s.serialize_field("SetGroudpId", &self.SetGroudpId())?;
      s.serialize_field("ComfortBonus", &self.ComfortBonus())?;
      s.serialize_field("VisitOperationType", &self.VisitOperationType())?;
      s.serialize_field("VisitBonusOperationType", &self.VisitBonusOperationType())?;
      if let Some(f) = self.Tags() {
        s.serialize_field("Tags", &f)?;
      } else {
        s.skip_field("Tags")?;
      }
      s.serialize_field("CraftQualityTier0", &self.CraftQualityTier0())?;
      s.serialize_field("CraftQualityTier1", &self.CraftQualityTier1())?;
      s.serialize_field("CraftQualityTier2", &self.CraftQualityTier2())?;
      s.serialize_field("ShiftingCraftQuality", &self.ShiftingCraftQuality())?;
      s.serialize_field("FurnitureFunctionType", &self.FurnitureFunctionType())?;
      if let Some(f) = self.FurnitureFunctionParameter() {
        s.serialize_field("FurnitureFunctionParameter", &f)?;
      } else {
        s.skip_field("FurnitureFunctionParameter")?;
      }
      s.serialize_field("VideoId", &self.VideoId())?;
      s.serialize_field("EventCollectionId", &self.EventCollectionId())?;
      s.serialize_field("FurnitureBubbleOffsetX", &self.FurnitureBubbleOffsetX())?;
      s.serialize_field("FurnitureBubbleOffsetY", &self.FurnitureBubbleOffsetY())?;
      if let Some(f) = self.CafeCharacterStateReq() {
        s.serialize_field("CafeCharacterStateReq", &f)?;
      } else {
        s.skip_field("CafeCharacterStateReq")?;
      }
      if let Some(f) = self.CafeCharacterStateAdd() {
        s.serialize_field("CafeCharacterStateAdd", &f)?;
      } else {
        s.skip_field("CafeCharacterStateAdd")?;
      }
      if let Some(f) = self.CafeCharacterStateMake() {
        s.serialize_field("CafeCharacterStateMake", &f)?;
      } else {
        s.skip_field("CafeCharacterStateMake")?;
      }
      if let Some(f) = self.CafeCharacterStateOnly() {
        s.serialize_field("CafeCharacterStateOnly", &f)?;
      } else {
        s.skip_field("CafeCharacterStateOnly")?;
      }
      s.serialize_field("HideCraftShortcut", &self.HideCraftShortcut())?;
    s.end()
  }
}

pub struct FurnitureExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FurnitureExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ProductionStep(&mut self, ProductionStep: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(FurnitureExcel::VT_PRODUCTIONSTEP, ProductionStep, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_Rarity(&mut self, Rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(FurnitureExcel::VT_RARITY, Rarity, Rarity::N);
  }
  #[inline]
  pub fn add_Category(&mut self, Category: FurnitureCategory) {
    self.fbb_.push_slot::<FurnitureCategory>(FurnitureExcel::VT_CATEGORY, Category, FurnitureCategory::Furnitures);
  }
  #[inline]
  pub fn add_SubCategory(&mut self, SubCategory: FurnitureSubCategory) {
    self.fbb_.push_slot::<FurnitureSubCategory>(FurnitureExcel::VT_SUBCATEGORY, SubCategory, FurnitureSubCategory::Table);
  }
  #[inline]
  pub fn add_CheckFloorDecoration(&mut self, CheckFloorDecoration: bool) {
    self.fbb_.push_slot::<bool>(FurnitureExcel::VT_CHECKFLOORDECORATION, CheckFloorDecoration, false);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(FurnitureExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_StarGradeInit(&mut self, StarGradeInit: i32) {
    self.fbb_.push_slot::<i32>(FurnitureExcel::VT_STARGRADEINIT, StarGradeInit, 0);
  }
  #[inline]
  pub fn add_Tier(&mut self, Tier: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_TIER, Tier, 0);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn add_SizeWidth(&mut self, SizeWidth: i32) {
    self.fbb_.push_slot::<i32>(FurnitureExcel::VT_SIZEWIDTH, SizeWidth, 0);
  }
  #[inline]
  pub fn add_SizeHeight(&mut self, SizeHeight: i32) {
    self.fbb_.push_slot::<i32>(FurnitureExcel::VT_SIZEHEIGHT, SizeHeight, 0);
  }
  #[inline]
  pub fn add_OtherSize(&mut self, OtherSize: i32) {
    self.fbb_.push_slot::<i32>(FurnitureExcel::VT_OTHERSIZE, OtherSize, 0);
  }
  #[inline]
  pub fn add_ExpandWidth(&mut self, ExpandWidth: i32) {
    self.fbb_.push_slot::<i32>(FurnitureExcel::VT_EXPANDWIDTH, ExpandWidth, 0);
  }
  #[inline]
  pub fn add_Enable(&mut self, Enable: bool) {
    self.fbb_.push_slot::<bool>(FurnitureExcel::VT_ENABLE, Enable, false);
  }
  #[inline]
  pub fn add_ReverseRotation(&mut self, ReverseRotation: bool) {
    self.fbb_.push_slot::<bool>(FurnitureExcel::VT_REVERSEROTATION, ReverseRotation, false);
  }
  #[inline]
  pub fn add_Prefab(&mut self, Prefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_PREFAB, Prefab);
  }
  #[inline]
  pub fn add_PrefabExpand(&mut self, PrefabExpand: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_PREFABEXPAND, PrefabExpand);
  }
  #[inline]
  pub fn add_SubPrefab(&mut self, SubPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_SUBPREFAB, SubPrefab);
  }
  #[inline]
  pub fn add_SubExpandPrefab(&mut self, SubExpandPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_SUBEXPANDPREFAB, SubExpandPrefab);
  }
  #[inline]
  pub fn add_CornerPrefab(&mut self, CornerPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_CORNERPREFAB, CornerPrefab);
  }
  #[inline]
  pub fn add_StackableMax(&mut self, StackableMax: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_STACKABLEMAX, StackableMax, 0);
  }
  #[inline]
  pub fn add_RecipeCraftId(&mut self, RecipeCraftId: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_RECIPECRAFTID, RecipeCraftId, 0);
  }
  #[inline]
  pub fn add_SetGroudpId(&mut self, SetGroudpId: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_SETGROUDPID, SetGroudpId, 0);
  }
  #[inline]
  pub fn add_ComfortBonus(&mut self, ComfortBonus: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_COMFORTBONUS, ComfortBonus, 0);
  }
  #[inline]
  pub fn add_VisitOperationType(&mut self, VisitOperationType: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_VISITOPERATIONTYPE, VisitOperationType, 0);
  }
  #[inline]
  pub fn add_VisitBonusOperationType(&mut self, VisitBonusOperationType: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_VISITBONUSOPERATIONTYPE, VisitBonusOperationType, 0);
  }
  #[inline]
  pub fn add_Tags(&mut self, Tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_TAGS, Tags);
  }
  #[inline]
  pub fn add_CraftQualityTier0(&mut self, CraftQualityTier0: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_CRAFTQUALITYTIER0, CraftQualityTier0, 0);
  }
  #[inline]
  pub fn add_CraftQualityTier1(&mut self, CraftQualityTier1: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_CRAFTQUALITYTIER1, CraftQualityTier1, 0);
  }
  #[inline]
  pub fn add_CraftQualityTier2(&mut self, CraftQualityTier2: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_CRAFTQUALITYTIER2, CraftQualityTier2, 0);
  }
  #[inline]
  pub fn add_ShiftingCraftQuality(&mut self, ShiftingCraftQuality: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_SHIFTINGCRAFTQUALITY, ShiftingCraftQuality, 0);
  }
  #[inline]
  pub fn add_FurnitureFunctionType(&mut self, FurnitureFunctionType: FurnitureFunctionType) {
    self.fbb_.push_slot::<FurnitureFunctionType>(FurnitureExcel::VT_FURNITUREFUNCTIONTYPE, FurnitureFunctionType, FurnitureFunctionType::None);
  }
  #[inline]
  pub fn add_FurnitureFunctionParameter(&mut self, FurnitureFunctionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_FURNITUREFUNCTIONPARAMETER, FurnitureFunctionParameter);
  }
  #[inline]
  pub fn add_VideoId(&mut self, VideoId: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_VIDEOID, VideoId, 0);
  }
  #[inline]
  pub fn add_EventCollectionId(&mut self, EventCollectionId: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_EVENTCOLLECTIONID, EventCollectionId, 0);
  }
  #[inline]
  pub fn add_FurnitureBubbleOffsetX(&mut self, FurnitureBubbleOffsetX: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_FURNITUREBUBBLEOFFSETX, FurnitureBubbleOffsetX, 0);
  }
  #[inline]
  pub fn add_FurnitureBubbleOffsetY(&mut self, FurnitureBubbleOffsetY: i64) {
    self.fbb_.push_slot::<i64>(FurnitureExcel::VT_FURNITUREBUBBLEOFFSETY, FurnitureBubbleOffsetY, 0);
  }
  #[inline]
  pub fn add_CafeCharacterStateReq(&mut self, CafeCharacterStateReq: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_CAFECHARACTERSTATEREQ, CafeCharacterStateReq);
  }
  #[inline]
  pub fn add_CafeCharacterStateAdd(&mut self, CafeCharacterStateAdd: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_CAFECHARACTERSTATEADD, CafeCharacterStateAdd);
  }
  #[inline]
  pub fn add_CafeCharacterStateMake(&mut self, CafeCharacterStateMake: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_CAFECHARACTERSTATEMAKE, CafeCharacterStateMake);
  }
  #[inline]
  pub fn add_CafeCharacterStateOnly(&mut self, CafeCharacterStateOnly: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureExcel::VT_CAFECHARACTERSTATEONLY, CafeCharacterStateOnly);
  }
  #[inline]
  pub fn add_HideCraftShortcut(&mut self, HideCraftShortcut: bool) {
    self.fbb_.push_slot::<bool>(FurnitureExcel::VT_HIDECRAFTSHORTCUT, HideCraftShortcut, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FurnitureExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FurnitureExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FurnitureExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FurnitureExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FurnitureExcel");
      ds.field("Id", &self.Id());
      ds.field("ProductionStep", &self.ProductionStep());
      ds.field("Rarity", &self.Rarity());
      ds.field("Category", &self.Category());
      ds.field("SubCategory", &self.SubCategory());
      ds.field("CheckFloorDecoration", &self.CheckFloorDecoration());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("StarGradeInit", &self.StarGradeInit());
      ds.field("Tier", &self.Tier());
      ds.field("Icon", &self.Icon());
      ds.field("SizeWidth", &self.SizeWidth());
      ds.field("SizeHeight", &self.SizeHeight());
      ds.field("OtherSize", &self.OtherSize());
      ds.field("ExpandWidth", &self.ExpandWidth());
      ds.field("Enable", &self.Enable());
      ds.field("ReverseRotation", &self.ReverseRotation());
      ds.field("Prefab", &self.Prefab());
      ds.field("PrefabExpand", &self.PrefabExpand());
      ds.field("SubPrefab", &self.SubPrefab());
      ds.field("SubExpandPrefab", &self.SubExpandPrefab());
      ds.field("CornerPrefab", &self.CornerPrefab());
      ds.field("StackableMax", &self.StackableMax());
      ds.field("RecipeCraftId", &self.RecipeCraftId());
      ds.field("SetGroudpId", &self.SetGroudpId());
      ds.field("ComfortBonus", &self.ComfortBonus());
      ds.field("VisitOperationType", &self.VisitOperationType());
      ds.field("VisitBonusOperationType", &self.VisitBonusOperationType());
      ds.field("Tags", &self.Tags());
      ds.field("CraftQualityTier0", &self.CraftQualityTier0());
      ds.field("CraftQualityTier1", &self.CraftQualityTier1());
      ds.field("CraftQualityTier2", &self.CraftQualityTier2());
      ds.field("ShiftingCraftQuality", &self.ShiftingCraftQuality());
      ds.field("FurnitureFunctionType", &self.FurnitureFunctionType());
      ds.field("FurnitureFunctionParameter", &self.FurnitureFunctionParameter());
      ds.field("VideoId", &self.VideoId());
      ds.field("EventCollectionId", &self.EventCollectionId());
      ds.field("FurnitureBubbleOffsetX", &self.FurnitureBubbleOffsetX());
      ds.field("FurnitureBubbleOffsetY", &self.FurnitureBubbleOffsetY());
      ds.field("CafeCharacterStateReq", &self.CafeCharacterStateReq());
      ds.field("CafeCharacterStateAdd", &self.CafeCharacterStateAdd());
      ds.field("CafeCharacterStateMake", &self.CafeCharacterStateMake());
      ds.field("CafeCharacterStateOnly", &self.CafeCharacterStateOnly());
      ds.field("HideCraftShortcut", &self.HideCraftShortcut());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FurnitureExcelT {
  pub Id: i64,
  pub ProductionStep: ProductionStep,
  pub Rarity: Rarity,
  pub Category: FurnitureCategory,
  pub SubCategory: FurnitureSubCategory,
  pub CheckFloorDecoration: bool,
  pub LocalizeEtcId: u32,
  pub StarGradeInit: i32,
  pub Tier: i64,
  pub Icon: Option<String>,
  pub SizeWidth: i32,
  pub SizeHeight: i32,
  pub OtherSize: i32,
  pub ExpandWidth: i32,
  pub Enable: bool,
  pub ReverseRotation: bool,
  pub Prefab: Option<String>,
  pub PrefabExpand: Option<String>,
  pub SubPrefab: Option<String>,
  pub SubExpandPrefab: Option<String>,
  pub CornerPrefab: Option<String>,
  pub StackableMax: i64,
  pub RecipeCraftId: i64,
  pub SetGroudpId: i64,
  pub ComfortBonus: i64,
  pub VisitOperationType: i64,
  pub VisitBonusOperationType: i64,
  pub Tags: Option<Vec<Tag>>,
  pub CraftQualityTier0: i64,
  pub CraftQualityTier1: i64,
  pub CraftQualityTier2: i64,
  pub ShiftingCraftQuality: i64,
  pub FurnitureFunctionType: FurnitureFunctionType,
  pub FurnitureFunctionParameter: Option<Vec<i64>>,
  pub VideoId: i64,
  pub EventCollectionId: i64,
  pub FurnitureBubbleOffsetX: i64,
  pub FurnitureBubbleOffsetY: i64,
  pub CafeCharacterStateReq: Option<Vec<String>>,
  pub CafeCharacterStateAdd: Option<Vec<String>>,
  pub CafeCharacterStateMake: Option<Vec<String>>,
  pub CafeCharacterStateOnly: Option<Vec<String>>,
  pub HideCraftShortcut: bool,
}
impl Default for FurnitureExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ProductionStep: ProductionStep::ToDo,
      Rarity: Rarity::N,
      Category: FurnitureCategory::Furnitures,
      SubCategory: FurnitureSubCategory::Table,
      CheckFloorDecoration: false,
      LocalizeEtcId: 0,
      StarGradeInit: 0,
      Tier: 0,
      Icon: None,
      SizeWidth: 0,
      SizeHeight: 0,
      OtherSize: 0,
      ExpandWidth: 0,
      Enable: false,
      ReverseRotation: false,
      Prefab: None,
      PrefabExpand: None,
      SubPrefab: None,
      SubExpandPrefab: None,
      CornerPrefab: None,
      StackableMax: 0,
      RecipeCraftId: 0,
      SetGroudpId: 0,
      ComfortBonus: 0,
      VisitOperationType: 0,
      VisitBonusOperationType: 0,
      Tags: None,
      CraftQualityTier0: 0,
      CraftQualityTier1: 0,
      CraftQualityTier2: 0,
      ShiftingCraftQuality: 0,
      FurnitureFunctionType: FurnitureFunctionType::None,
      FurnitureFunctionParameter: None,
      VideoId: 0,
      EventCollectionId: 0,
      FurnitureBubbleOffsetX: 0,
      FurnitureBubbleOffsetY: 0,
      CafeCharacterStateReq: None,
      CafeCharacterStateAdd: None,
      CafeCharacterStateMake: None,
      CafeCharacterStateOnly: None,
      HideCraftShortcut: false,
    }
  }
}
impl FurnitureExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FurnitureExcel<'b>> {
    let Id = self.Id;
    let ProductionStep = self.ProductionStep;
    let Rarity = self.Rarity;
    let Category = self.Category;
    let SubCategory = self.SubCategory;
    let CheckFloorDecoration = self.CheckFloorDecoration;
    let LocalizeEtcId = self.LocalizeEtcId;
    let StarGradeInit = self.StarGradeInit;
    let Tier = self.Tier;
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SizeWidth = self.SizeWidth;
    let SizeHeight = self.SizeHeight;
    let OtherSize = self.OtherSize;
    let ExpandWidth = self.ExpandWidth;
    let Enable = self.Enable;
    let ReverseRotation = self.ReverseRotation;
    let Prefab = self.Prefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabExpand = self.PrefabExpand.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubPrefab = self.SubPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubExpandPrefab = self.SubExpandPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CornerPrefab = self.CornerPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StackableMax = self.StackableMax;
    let RecipeCraftId = self.RecipeCraftId;
    let SetGroudpId = self.SetGroudpId;
    let ComfortBonus = self.ComfortBonus;
    let VisitOperationType = self.VisitOperationType;
    let VisitBonusOperationType = self.VisitBonusOperationType;
    let Tags = self.Tags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CraftQualityTier0 = self.CraftQualityTier0;
    let CraftQualityTier1 = self.CraftQualityTier1;
    let CraftQualityTier2 = self.CraftQualityTier2;
    let ShiftingCraftQuality = self.ShiftingCraftQuality;
    let FurnitureFunctionType = self.FurnitureFunctionType;
    let FurnitureFunctionParameter = self.FurnitureFunctionParameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let VideoId = self.VideoId;
    let EventCollectionId = self.EventCollectionId;
    let FurnitureBubbleOffsetX = self.FurnitureBubbleOffsetX;
    let FurnitureBubbleOffsetY = self.FurnitureBubbleOffsetY;
    let CafeCharacterStateReq = self.CafeCharacterStateReq.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let CafeCharacterStateAdd = self.CafeCharacterStateAdd.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let CafeCharacterStateMake = self.CafeCharacterStateMake.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let CafeCharacterStateOnly = self.CafeCharacterStateOnly.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let HideCraftShortcut = self.HideCraftShortcut;
    FurnitureExcel::create(_fbb, &FurnitureExcelArgs{
      Id,
      ProductionStep,
      Rarity,
      Category,
      SubCategory,
      CheckFloorDecoration,
      LocalizeEtcId,
      StarGradeInit,
      Tier,
      Icon,
      SizeWidth,
      SizeHeight,
      OtherSize,
      ExpandWidth,
      Enable,
      ReverseRotation,
      Prefab,
      PrefabExpand,
      SubPrefab,
      SubExpandPrefab,
      CornerPrefab,
      StackableMax,
      RecipeCraftId,
      SetGroudpId,
      ComfortBonus,
      VisitOperationType,
      VisitBonusOperationType,
      Tags,
      CraftQualityTier0,
      CraftQualityTier1,
      CraftQualityTier2,
      ShiftingCraftQuality,
      FurnitureFunctionType,
      FurnitureFunctionParameter,
      VideoId,
      EventCollectionId,
      FurnitureBubbleOffsetX,
      FurnitureBubbleOffsetY,
      CafeCharacterStateReq,
      CafeCharacterStateAdd,
      CafeCharacterStateMake,
      CafeCharacterStateOnly,
      HideCraftShortcut,
    })
  }
}
