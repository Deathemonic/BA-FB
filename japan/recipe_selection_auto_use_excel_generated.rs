// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RecipeSelectionAutoUseExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RecipeSelectionAutoUseExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RecipeSelectionAutoUseExcel<'a> {
  type Inner = RecipeSelectionAutoUseExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RecipeSelectionAutoUseExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_TARGETITEMID: flatbuffers::VOffsetT = 8;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RecipeSelectionAutoUseExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RecipeSelectionAutoUseExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<RecipeSelectionAutoUseExcel<'bldr>> {
    let mut builder = RecipeSelectionAutoUseExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"RecipeSelectionAutoUse");
      let x = args.TargetItemId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TargetItemId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.Priority {
        builder.add_Priority(x);
      }
      let x = args.ParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> RecipeSelectionAutoUseExcelT {
    let key = table_encryption_service::create_key(b"RecipeSelectionAutoUse");
      let Id = self.Id();
      let ParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParcelType(), &key)
      } else {
        self.ParcelType()
      };
      let TargetItemId = self.TargetItemId();
    let Priority = self.Priority().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    RecipeSelectionAutoUseExcelT {
      Id,
      ParcelType,
      TargetItemId,
      Priority,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeSelectionAutoUseExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(RecipeSelectionAutoUseExcel::VT_PARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn TargetItemId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeSelectionAutoUseExcel::VT_TARGETITEMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Priority(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeSelectionAutoUseExcel::VT_PRIORITY, None)}
  }
}

impl flatbuffers::Verifiable for RecipeSelectionAutoUseExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ParcelType>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<i64>("TargetItemId", Self::VT_TARGETITEMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("Priority", Self::VT_PRIORITY, false)?
     .finish();
    Ok(())
  }
}
pub struct RecipeSelectionAutoUseExcelArgs<'a> {
    pub Id: i64,
    pub ParcelType: ParcelType,
    pub TargetItemId: i64,
    pub Priority: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for RecipeSelectionAutoUseExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    RecipeSelectionAutoUseExcelArgs {
      Id: 0,
      ParcelType: ParcelType::None,
      TargetItemId: 0,
      Priority: None,
    }
  }
}

impl Serialize for RecipeSelectionAutoUseExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RecipeSelectionAutoUseExcel", 4)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ParcelType", &self.ParcelType())?;
      s.serialize_field("TargetItemId", &self.TargetItemId())?;
      if let Some(f) = self.Priority() {
        s.serialize_field("Priority", &f)?;
      } else {
        s.skip_field("Priority")?;
      }
    s.end()
  }
}

pub struct RecipeSelectionAutoUseExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RecipeSelectionAutoUseExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(RecipeSelectionAutoUseExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(RecipeSelectionAutoUseExcel::VT_PARCELTYPE, ParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_TargetItemId(&mut self, TargetItemId: i64) {
    self.fbb_.push_slot::<i64>(RecipeSelectionAutoUseExcel::VT_TARGETITEMID, TargetItemId, 0);
  }
  #[inline]
  pub fn add_Priority(&mut self, Priority: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeSelectionAutoUseExcel::VT_PRIORITY, Priority);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RecipeSelectionAutoUseExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RecipeSelectionAutoUseExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RecipeSelectionAutoUseExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RecipeSelectionAutoUseExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RecipeSelectionAutoUseExcel");
      ds.field("Id", &self.Id());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("TargetItemId", &self.TargetItemId());
      ds.field("Priority", &self.Priority());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RecipeSelectionAutoUseExcelT {
  pub Id: i64,
  pub ParcelType: ParcelType,
  pub TargetItemId: i64,
  pub Priority: Option<Vec<i64>>,
}
impl Default for RecipeSelectionAutoUseExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ParcelType: ParcelType::None,
      TargetItemId: 0,
      Priority: None,
    }
  }
}
impl RecipeSelectionAutoUseExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RecipeSelectionAutoUseExcel<'b>> {
    let Id = self.Id;
    let ParcelType = self.ParcelType;
    let TargetItemId = self.TargetItemId;
    let Priority = self.Priority.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    RecipeSelectionAutoUseExcel::create(_fbb, &RecipeSelectionAutoUseExcelArgs{
      Id,
      ParcelType,
      TargetItemId,
      Priority,
    })
  }
}
