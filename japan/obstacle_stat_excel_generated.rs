// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ObstacleStatExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ObstacleStatExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ObstacleStatExcel<'a> {
  type Inner = ObstacleStatExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ObstacleStatExcel<'a> {
  pub const VT_STRINGID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_MAXHP1: flatbuffers::VOffsetT = 8;
  pub const VT_MAXHP100: flatbuffers::VOffsetT = 10;
  pub const VT_BLOCKRATE: flatbuffers::VOffsetT = 12;
  pub const VT_DODGE: flatbuffers::VOffsetT = 14;
  pub const VT_CANNOTSTANDRANGE: flatbuffers::VOffsetT = 16;
  pub const VT_HIGHLIGHTFLOATERHEIGHT: flatbuffers::VOffsetT = 18;
  pub const VT_ENHANCELIGHTARMORRATE: flatbuffers::VOffsetT = 20;
  pub const VT_ENHANCEHEAVYARMORRATE: flatbuffers::VOffsetT = 22;
  pub const VT_ENHANCEUNARMEDRATE: flatbuffers::VOffsetT = 24;
  pub const VT_ENHANCEELASTICARMORRATE: flatbuffers::VOffsetT = 26;
  pub const VT_ENHANCESTRUCTURERATE: flatbuffers::VOffsetT = 28;
  pub const VT_ENHANCENORMALARMORRATE: flatbuffers::VOffsetT = 30;
  pub const VT_REDUCEEXDAMAGEDRATE: flatbuffers::VOffsetT = 32;
  pub const VT_REDUCEBASICSDAMAGEDRATE: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ObstacleStatExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ObstacleStatExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ObstacleStatExcel<'bldr>> {
    let mut builder = ObstacleStatExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ObstacleStat");
      let x = args.ReduceBasicsDamagedRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ReduceBasicsDamagedRate(x);
      let x = args.ReduceExDamagedRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ReduceExDamagedRate(x);
      let x = args.EnhanceNormalArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceNormalArmorRate(x);
      let x = args.EnhanceStructureRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceStructureRate(x);
      let x = args.EnhanceElasticArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceElasticArmorRate(x);
      let x = args.EnhanceUnarmedRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceUnarmedRate(x);
      let x = args.EnhanceHeavyArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceHeavyArmorRate(x);
      let x = args.EnhanceLightArmorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnhanceLightArmorRate(x);
      let x = args.CanNotStandRange;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CanNotStandRange(x);
      let x = args.Dodge;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Dodge(x);
      let x = args.BlockRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BlockRate(x);
      let x = args.MaxHP100;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxHP100(x);
      let x = args.MaxHP1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxHP1(x);
      let x = args.HighlightFloaterHeight;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_HighlightFloaterHeight(x);
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      let x = args.StringID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StringID(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ObstacleStatExcelT {
    let key = table_encryption_service::create_key(b"ObstacleStat");
      let StringID = self.StringID();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let MaxHP1 = self.MaxHP1();
      let MaxHP100 = self.MaxHP100();
      let BlockRate = self.BlockRate();
      let Dodge = self.Dodge();
      let CanNotStandRange = self.CanNotStandRange();
      let HighlightFloaterHeight = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.HighlightFloaterHeight(), &key)
      } else {
        self.HighlightFloaterHeight()
      };
      let EnhanceLightArmorRate = self.EnhanceLightArmorRate();
      let EnhanceHeavyArmorRate = self.EnhanceHeavyArmorRate();
      let EnhanceUnarmedRate = self.EnhanceUnarmedRate();
      let EnhanceElasticArmorRate = self.EnhanceElasticArmorRate();
      let EnhanceStructureRate = self.EnhanceStructureRate();
      let EnhanceNormalArmorRate = self.EnhanceNormalArmorRate();
      let ReduceExDamagedRate = self.ReduceExDamagedRate();
      let ReduceBasicsDamagedRate = self.ReduceBasicsDamagedRate();
    ObstacleStatExcelT {
      StringID,
      Name,
      MaxHP1,
      MaxHP100,
      BlockRate,
      Dodge,
      CanNotStandRange,
      HighlightFloaterHeight,
      EnhanceLightArmorRate,
      EnhanceHeavyArmorRate,
      EnhanceUnarmedRate,
      EnhanceElasticArmorRate,
      EnhanceStructureRate,
      EnhanceNormalArmorRate,
      ReduceExDamagedRate,
      ReduceBasicsDamagedRate,
    }
  }

  #[inline]
  pub fn StringID(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ObstacleStatExcel::VT_STRINGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObstacleStatExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn MaxHP1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_MAXHP1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxHP100(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_MAXHP100, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BlockRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_BLOCKRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Dodge(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_DODGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CanNotStandRange(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_CANNOTSTANDRANGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HighlightFloaterHeight(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ObstacleStatExcel::VT_HIGHLIGHTFLOATERHEIGHT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceLightArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_ENHANCELIGHTARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceHeavyArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_ENHANCEHEAVYARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceUnarmedRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_ENHANCEUNARMEDRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceElasticArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_ENHANCEELASTICARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceStructureRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_ENHANCESTRUCTURERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnhanceNormalArmorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_ENHANCENORMALARMORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReduceExDamagedRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_REDUCEEXDAMAGEDRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReduceBasicsDamagedRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObstacleStatExcel::VT_REDUCEBASICSDAMAGEDRATE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ObstacleStatExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("StringID", Self::VT_STRINGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<i64>("MaxHP1", Self::VT_MAXHP1, false)?
     .visit_field::<i64>("MaxHP100", Self::VT_MAXHP100, false)?
     .visit_field::<i64>("BlockRate", Self::VT_BLOCKRATE, false)?
     .visit_field::<i64>("Dodge", Self::VT_DODGE, false)?
     .visit_field::<i64>("CanNotStandRange", Self::VT_CANNOTSTANDRANGE, false)?
     .visit_field::<f32>("HighlightFloaterHeight", Self::VT_HIGHLIGHTFLOATERHEIGHT, false)?
     .visit_field::<i64>("EnhanceLightArmorRate", Self::VT_ENHANCELIGHTARMORRATE, false)?
     .visit_field::<i64>("EnhanceHeavyArmorRate", Self::VT_ENHANCEHEAVYARMORRATE, false)?
     .visit_field::<i64>("EnhanceUnarmedRate", Self::VT_ENHANCEUNARMEDRATE, false)?
     .visit_field::<i64>("EnhanceElasticArmorRate", Self::VT_ENHANCEELASTICARMORRATE, false)?
     .visit_field::<i64>("EnhanceStructureRate", Self::VT_ENHANCESTRUCTURERATE, false)?
     .visit_field::<i64>("EnhanceNormalArmorRate", Self::VT_ENHANCENORMALARMORRATE, false)?
     .visit_field::<i64>("ReduceExDamagedRate", Self::VT_REDUCEEXDAMAGEDRATE, false)?
     .visit_field::<i64>("ReduceBasicsDamagedRate", Self::VT_REDUCEBASICSDAMAGEDRATE, false)?
     .finish();
    Ok(())
  }
}
pub struct ObstacleStatExcelArgs<'a> {
    pub StringID: u32,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MaxHP1: i64,
    pub MaxHP100: i64,
    pub BlockRate: i64,
    pub Dodge: i64,
    pub CanNotStandRange: i64,
    pub HighlightFloaterHeight: f32,
    pub EnhanceLightArmorRate: i64,
    pub EnhanceHeavyArmorRate: i64,
    pub EnhanceUnarmedRate: i64,
    pub EnhanceElasticArmorRate: i64,
    pub EnhanceStructureRate: i64,
    pub EnhanceNormalArmorRate: i64,
    pub ReduceExDamagedRate: i64,
    pub ReduceBasicsDamagedRate: i64,
}
impl<'a> Default for ObstacleStatExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ObstacleStatExcelArgs {
      StringID: 0,
      Name: None,
      MaxHP1: 0,
      MaxHP100: 0,
      BlockRate: 0,
      Dodge: 0,
      CanNotStandRange: 0,
      HighlightFloaterHeight: 0.0,
      EnhanceLightArmorRate: 0,
      EnhanceHeavyArmorRate: 0,
      EnhanceUnarmedRate: 0,
      EnhanceElasticArmorRate: 0,
      EnhanceStructureRate: 0,
      EnhanceNormalArmorRate: 0,
      ReduceExDamagedRate: 0,
      ReduceBasicsDamagedRate: 0,
    }
  }
}

impl Serialize for ObstacleStatExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ObstacleStatExcel", 16)?;
      s.serialize_field("StringID", &self.StringID())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      s.serialize_field("MaxHP1", &self.MaxHP1())?;
      s.serialize_field("MaxHP100", &self.MaxHP100())?;
      s.serialize_field("BlockRate", &self.BlockRate())?;
      s.serialize_field("Dodge", &self.Dodge())?;
      s.serialize_field("CanNotStandRange", &self.CanNotStandRange())?;
      s.serialize_field("HighlightFloaterHeight", &self.HighlightFloaterHeight())?;
      s.serialize_field("EnhanceLightArmorRate", &self.EnhanceLightArmorRate())?;
      s.serialize_field("EnhanceHeavyArmorRate", &self.EnhanceHeavyArmorRate())?;
      s.serialize_field("EnhanceUnarmedRate", &self.EnhanceUnarmedRate())?;
      s.serialize_field("EnhanceElasticArmorRate", &self.EnhanceElasticArmorRate())?;
      s.serialize_field("EnhanceStructureRate", &self.EnhanceStructureRate())?;
      s.serialize_field("EnhanceNormalArmorRate", &self.EnhanceNormalArmorRate())?;
      s.serialize_field("ReduceExDamagedRate", &self.ReduceExDamagedRate())?;
      s.serialize_field("ReduceBasicsDamagedRate", &self.ReduceBasicsDamagedRate())?;
    s.end()
  }
}

pub struct ObstacleStatExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ObstacleStatExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StringID(&mut self, StringID: u32) {
    self.fbb_.push_slot::<u32>(ObstacleStatExcel::VT_STRINGID, StringID, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObstacleStatExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_MaxHP1(&mut self, MaxHP1: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_MAXHP1, MaxHP1, 0);
  }
  #[inline]
  pub fn add_MaxHP100(&mut self, MaxHP100: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_MAXHP100, MaxHP100, 0);
  }
  #[inline]
  pub fn add_BlockRate(&mut self, BlockRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_BLOCKRATE, BlockRate, 0);
  }
  #[inline]
  pub fn add_Dodge(&mut self, Dodge: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_DODGE, Dodge, 0);
  }
  #[inline]
  pub fn add_CanNotStandRange(&mut self, CanNotStandRange: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_CANNOTSTANDRANGE, CanNotStandRange, 0);
  }
  #[inline]
  pub fn add_HighlightFloaterHeight(&mut self, HighlightFloaterHeight: f32) {
    self.fbb_.push_slot::<f32>(ObstacleStatExcel::VT_HIGHLIGHTFLOATERHEIGHT, HighlightFloaterHeight, 0.0);
  }
  #[inline]
  pub fn add_EnhanceLightArmorRate(&mut self, EnhanceLightArmorRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_ENHANCELIGHTARMORRATE, EnhanceLightArmorRate, 0);
  }
  #[inline]
  pub fn add_EnhanceHeavyArmorRate(&mut self, EnhanceHeavyArmorRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_ENHANCEHEAVYARMORRATE, EnhanceHeavyArmorRate, 0);
  }
  #[inline]
  pub fn add_EnhanceUnarmedRate(&mut self, EnhanceUnarmedRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_ENHANCEUNARMEDRATE, EnhanceUnarmedRate, 0);
  }
  #[inline]
  pub fn add_EnhanceElasticArmorRate(&mut self, EnhanceElasticArmorRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_ENHANCEELASTICARMORRATE, EnhanceElasticArmorRate, 0);
  }
  #[inline]
  pub fn add_EnhanceStructureRate(&mut self, EnhanceStructureRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_ENHANCESTRUCTURERATE, EnhanceStructureRate, 0);
  }
  #[inline]
  pub fn add_EnhanceNormalArmorRate(&mut self, EnhanceNormalArmorRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_ENHANCENORMALARMORRATE, EnhanceNormalArmorRate, 0);
  }
  #[inline]
  pub fn add_ReduceExDamagedRate(&mut self, ReduceExDamagedRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_REDUCEEXDAMAGEDRATE, ReduceExDamagedRate, 0);
  }
  #[inline]
  pub fn add_ReduceBasicsDamagedRate(&mut self, ReduceBasicsDamagedRate: i64) {
    self.fbb_.push_slot::<i64>(ObstacleStatExcel::VT_REDUCEBASICSDAMAGEDRATE, ReduceBasicsDamagedRate, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ObstacleStatExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ObstacleStatExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ObstacleStatExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ObstacleStatExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ObstacleStatExcel");
      ds.field("StringID", &self.StringID());
      ds.field("Name", &self.Name());
      ds.field("MaxHP1", &self.MaxHP1());
      ds.field("MaxHP100", &self.MaxHP100());
      ds.field("BlockRate", &self.BlockRate());
      ds.field("Dodge", &self.Dodge());
      ds.field("CanNotStandRange", &self.CanNotStandRange());
      ds.field("HighlightFloaterHeight", &self.HighlightFloaterHeight());
      ds.field("EnhanceLightArmorRate", &self.EnhanceLightArmorRate());
      ds.field("EnhanceHeavyArmorRate", &self.EnhanceHeavyArmorRate());
      ds.field("EnhanceUnarmedRate", &self.EnhanceUnarmedRate());
      ds.field("EnhanceElasticArmorRate", &self.EnhanceElasticArmorRate());
      ds.field("EnhanceStructureRate", &self.EnhanceStructureRate());
      ds.field("EnhanceNormalArmorRate", &self.EnhanceNormalArmorRate());
      ds.field("ReduceExDamagedRate", &self.ReduceExDamagedRate());
      ds.field("ReduceBasicsDamagedRate", &self.ReduceBasicsDamagedRate());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ObstacleStatExcelT {
  pub StringID: u32,
  pub Name: Option<String>,
  pub MaxHP1: i64,
  pub MaxHP100: i64,
  pub BlockRate: i64,
  pub Dodge: i64,
  pub CanNotStandRange: i64,
  pub HighlightFloaterHeight: f32,
  pub EnhanceLightArmorRate: i64,
  pub EnhanceHeavyArmorRate: i64,
  pub EnhanceUnarmedRate: i64,
  pub EnhanceElasticArmorRate: i64,
  pub EnhanceStructureRate: i64,
  pub EnhanceNormalArmorRate: i64,
  pub ReduceExDamagedRate: i64,
  pub ReduceBasicsDamagedRate: i64,
}
impl Default for ObstacleStatExcelT {
  fn default() -> Self {
    Self {
      StringID: 0,
      Name: None,
      MaxHP1: 0,
      MaxHP100: 0,
      BlockRate: 0,
      Dodge: 0,
      CanNotStandRange: 0,
      HighlightFloaterHeight: 0.0,
      EnhanceLightArmorRate: 0,
      EnhanceHeavyArmorRate: 0,
      EnhanceUnarmedRate: 0,
      EnhanceElasticArmorRate: 0,
      EnhanceStructureRate: 0,
      EnhanceNormalArmorRate: 0,
      ReduceExDamagedRate: 0,
      ReduceBasicsDamagedRate: 0,
    }
  }
}
impl ObstacleStatExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ObstacleStatExcel<'b>> {
    let StringID = self.StringID;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MaxHP1 = self.MaxHP1;
    let MaxHP100 = self.MaxHP100;
    let BlockRate = self.BlockRate;
    let Dodge = self.Dodge;
    let CanNotStandRange = self.CanNotStandRange;
    let HighlightFloaterHeight = self.HighlightFloaterHeight;
    let EnhanceLightArmorRate = self.EnhanceLightArmorRate;
    let EnhanceHeavyArmorRate = self.EnhanceHeavyArmorRate;
    let EnhanceUnarmedRate = self.EnhanceUnarmedRate;
    let EnhanceElasticArmorRate = self.EnhanceElasticArmorRate;
    let EnhanceStructureRate = self.EnhanceStructureRate;
    let EnhanceNormalArmorRate = self.EnhanceNormalArmorRate;
    let ReduceExDamagedRate = self.ReduceExDamagedRate;
    let ReduceBasicsDamagedRate = self.ReduceBasicsDamagedRate;
    ObstacleStatExcel::create(_fbb, &ObstacleStatExcelArgs{
      StringID,
      Name,
      MaxHP1,
      MaxHP100,
      BlockRate,
      Dodge,
      CanNotStandRange,
      HighlightFloaterHeight,
      EnhanceLightArmorRate,
      EnhanceHeavyArmorRate,
      EnhanceUnarmedRate,
      EnhanceElasticArmorRate,
      EnhanceStructureRate,
      EnhanceNormalArmorRate,
      ReduceExDamagedRate,
      ReduceBasicsDamagedRate,
    })
  }
}
