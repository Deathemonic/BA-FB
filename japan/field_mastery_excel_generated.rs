// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldMasteryExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldMasteryExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldMasteryExcel<'a> {
  type Inner = FieldMasteryExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldMasteryExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_SEASONID: flatbuffers::VOffsetT = 6;
  pub const VT_ORDER: flatbuffers::VOffsetT = 8;
  pub const VT_EXPAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_TOKENTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_TOKENID: flatbuffers::VOffsetT = 14;
  pub const VT_TOKENREQUIREMENT: flatbuffers::VOffsetT = 16;
  pub const VT_ACCOMPLISHMENTCONDITIONTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_ACCOMPLISHMENTCONDITIONID: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldMasteryExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldMasteryExcelArgs
  ) -> flatbuffers::WIPOffset<FieldMasteryExcel<'bldr>> {
    let mut builder = FieldMasteryExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldMastery");
      let x = args.AccomplishmentConditionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccomplishmentConditionId(x);
      let x = args.TokenRequirement;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TokenRequirement(x);
      let x = args.TokenId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TokenId(x);
      let x = args.ExpAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExpAmount(x);
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.AccomplishmentConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_AccomplishmentConditionType(x);
      let x = args.TokenType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TokenType(x);
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Order(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldMasteryExcelT {
    let key = table_encryption_service::create_key(b"FieldMastery");
      let UniqueId = self.UniqueId();
      let SeasonId = self.SeasonId();
      let Order = self.Order();
      let ExpAmount = self.ExpAmount();
      let TokenType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TokenType(), &key)
      } else {
        self.TokenType()
      };
      let TokenId = self.TokenId();
      let TokenRequirement = self.TokenRequirement();
      let AccomplishmentConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.AccomplishmentConditionType(), &key)
      } else {
        self.AccomplishmentConditionType()
      };
      let AccomplishmentConditionId = self.AccomplishmentConditionId();
    FieldMasteryExcelT {
      UniqueId,
      SeasonId,
      Order,
      ExpAmount,
      TokenType,
      TokenId,
      TokenRequirement,
      AccomplishmentConditionType,
      AccomplishmentConditionId,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Order(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FieldMasteryExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExpAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryExcel::VT_EXPAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TokenType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(FieldMasteryExcel::VT_TOKENTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn TokenId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryExcel::VT_TOKENID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TokenRequirement(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryExcel::VT_TOKENREQUIREMENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AccomplishmentConditionType(&self) -> FieldConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldConditionType>(FieldMasteryExcel::VT_ACCOMPLISHMENTCONDITIONTYPE, Some(FieldConditionType::Invalid)).unwrap()}
  }
  #[inline]
  pub fn AccomplishmentConditionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryExcel::VT_ACCOMPLISHMENTCONDITIONID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FieldMasteryExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<i32>("Order", Self::VT_ORDER, false)?
     .visit_field::<i64>("ExpAmount", Self::VT_EXPAMOUNT, false)?
     .visit_field::<ParcelType>("TokenType", Self::VT_TOKENTYPE, false)?
     .visit_field::<i64>("TokenId", Self::VT_TOKENID, false)?
     .visit_field::<i64>("TokenRequirement", Self::VT_TOKENREQUIREMENT, false)?
     .visit_field::<FieldConditionType>("AccomplishmentConditionType", Self::VT_ACCOMPLISHMENTCONDITIONTYPE, false)?
     .visit_field::<i64>("AccomplishmentConditionId", Self::VT_ACCOMPLISHMENTCONDITIONID, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldMasteryExcelArgs {
    pub UniqueId: i64,
    pub SeasonId: i64,
    pub Order: i32,
    pub ExpAmount: i64,
    pub TokenType: ParcelType,
    pub TokenId: i64,
    pub TokenRequirement: i64,
    pub AccomplishmentConditionType: FieldConditionType,
    pub AccomplishmentConditionId: i64,
}
impl<'a> Default for FieldMasteryExcelArgs {
  #[inline]
  fn default() -> Self {
    FieldMasteryExcelArgs {
      UniqueId: 0,
      SeasonId: 0,
      Order: 0,
      ExpAmount: 0,
      TokenType: ParcelType::None,
      TokenId: 0,
      TokenRequirement: 0,
      AccomplishmentConditionType: FieldConditionType::Invalid,
      AccomplishmentConditionId: 0,
    }
  }
}

impl Serialize for FieldMasteryExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldMasteryExcel", 9)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      s.serialize_field("Order", &self.Order())?;
      s.serialize_field("ExpAmount", &self.ExpAmount())?;
      s.serialize_field("TokenType", &self.TokenType())?;
      s.serialize_field("TokenId", &self.TokenId())?;
      s.serialize_field("TokenRequirement", &self.TokenRequirement())?;
      s.serialize_field("AccomplishmentConditionType", &self.AccomplishmentConditionType())?;
      s.serialize_field("AccomplishmentConditionId", &self.AccomplishmentConditionId())?;
    s.end()
  }
}

pub struct FieldMasteryExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldMasteryExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_Order(&mut self, Order: i32) {
    self.fbb_.push_slot::<i32>(FieldMasteryExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_ExpAmount(&mut self, ExpAmount: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryExcel::VT_EXPAMOUNT, ExpAmount, 0);
  }
  #[inline]
  pub fn add_TokenType(&mut self, TokenType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(FieldMasteryExcel::VT_TOKENTYPE, TokenType, ParcelType::None);
  }
  #[inline]
  pub fn add_TokenId(&mut self, TokenId: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryExcel::VT_TOKENID, TokenId, 0);
  }
  #[inline]
  pub fn add_TokenRequirement(&mut self, TokenRequirement: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryExcel::VT_TOKENREQUIREMENT, TokenRequirement, 0);
  }
  #[inline]
  pub fn add_AccomplishmentConditionType(&mut self, AccomplishmentConditionType: FieldConditionType) {
    self.fbb_.push_slot::<FieldConditionType>(FieldMasteryExcel::VT_ACCOMPLISHMENTCONDITIONTYPE, AccomplishmentConditionType, FieldConditionType::Invalid);
  }
  #[inline]
  pub fn add_AccomplishmentConditionId(&mut self, AccomplishmentConditionId: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryExcel::VT_ACCOMPLISHMENTCONDITIONID, AccomplishmentConditionId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldMasteryExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldMasteryExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldMasteryExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldMasteryExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldMasteryExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("SeasonId", &self.SeasonId());
      ds.field("Order", &self.Order());
      ds.field("ExpAmount", &self.ExpAmount());
      ds.field("TokenType", &self.TokenType());
      ds.field("TokenId", &self.TokenId());
      ds.field("TokenRequirement", &self.TokenRequirement());
      ds.field("AccomplishmentConditionType", &self.AccomplishmentConditionType());
      ds.field("AccomplishmentConditionId", &self.AccomplishmentConditionId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldMasteryExcelT {
  pub UniqueId: i64,
  pub SeasonId: i64,
  pub Order: i32,
  pub ExpAmount: i64,
  pub TokenType: ParcelType,
  pub TokenId: i64,
  pub TokenRequirement: i64,
  pub AccomplishmentConditionType: FieldConditionType,
  pub AccomplishmentConditionId: i64,
}
impl Default for FieldMasteryExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      SeasonId: 0,
      Order: 0,
      ExpAmount: 0,
      TokenType: ParcelType::None,
      TokenId: 0,
      TokenRequirement: 0,
      AccomplishmentConditionType: FieldConditionType::Invalid,
      AccomplishmentConditionId: 0,
    }
  }
}
impl FieldMasteryExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldMasteryExcel<'b>> {
    let UniqueId = self.UniqueId;
    let SeasonId = self.SeasonId;
    let Order = self.Order;
    let ExpAmount = self.ExpAmount;
    let TokenType = self.TokenType;
    let TokenId = self.TokenId;
    let TokenRequirement = self.TokenRequirement;
    let AccomplishmentConditionType = self.AccomplishmentConditionType;
    let AccomplishmentConditionId = self.AccomplishmentConditionId;
    FieldMasteryExcel::create(_fbb, &FieldMasteryExcelArgs{
      UniqueId,
      SeasonId,
      Order,
      ExpAmount,
      TokenType,
      TokenId,
      TokenRequirement,
      AccomplishmentConditionType,
      AccomplishmentConditionId,
    })
  }
}
