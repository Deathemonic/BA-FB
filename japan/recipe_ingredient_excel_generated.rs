// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RecipeIngredientExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RecipeIngredientExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RecipeIngredientExcel<'a> {
  type Inner = RecipeIngredientExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RecipeIngredientExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_RECIPETYPE: flatbuffers::VOffsetT = 6;
  pub const VT_COSTPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_COSTID: flatbuffers::VOffsetT = 10;
  pub const VT_COSTAMOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_INGREDIENTPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_INGREDIENTID: flatbuffers::VOffsetT = 16;
  pub const VT_INGREDIENTAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_COSTTIMEINSECOND: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RecipeIngredientExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RecipeIngredientExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<RecipeIngredientExcel<'bldr>> {
    let mut builder = RecipeIngredientExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"RecipeIngredient");
      let x = args.CostTimeInSecond;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostTimeInSecond(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.IngredientAmount {
        builder.add_IngredientAmount(x);
      }
      if let Some(x) = args.IngredientId {
        builder.add_IngredientId(x);
      }
      if let Some(x) = args.IngredientParcelType {
        builder.add_IngredientParcelType(x);
      }
      if let Some(x) = args.CostAmount {
        builder.add_CostAmount(x);
      }
      if let Some(x) = args.CostId {
        builder.add_CostId(x);
      }
      if let Some(x) = args.CostParcelType {
        builder.add_CostParcelType(x);
      }
      let x = args.RecipeType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RecipeType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> RecipeIngredientExcelT {
    let key = table_encryption_service::create_key(b"RecipeIngredient");
      let Id = self.Id();
      let RecipeType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RecipeType(), &key)
      } else {
        self.RecipeType()
      };
    let CostParcelType = self.CostParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let CostId = self.CostId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let CostAmount = self.CostAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let IngredientParcelType = self.IngredientParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let IngredientId = self.IngredientId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let IngredientAmount = self.IngredientAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let CostTimeInSecond = self.CostTimeInSecond();
    RecipeIngredientExcelT {
      Id,
      RecipeType,
      CostParcelType,
      CostId,
      CostAmount,
      IngredientParcelType,
      IngredientId,
      IngredientAmount,
      CostTimeInSecond,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeIngredientExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeType(&self) -> RecipeType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RecipeType>(RecipeIngredientExcel::VT_RECIPETYPE, Some(RecipeType::None)).unwrap()}
  }
  #[inline]
  pub fn CostParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(RecipeIngredientExcel::VT_COSTPARCELTYPE, None)}
  }
  #[inline]
  pub fn CostId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeIngredientExcel::VT_COSTID, None)}
  }
  #[inline]
  pub fn CostAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeIngredientExcel::VT_COSTAMOUNT, None)}
  }
  #[inline]
  pub fn IngredientParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(RecipeIngredientExcel::VT_INGREDIENTPARCELTYPE, None)}
  }
  #[inline]
  pub fn IngredientId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeIngredientExcel::VT_INGREDIENTID, None)}
  }
  #[inline]
  pub fn IngredientAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeIngredientExcel::VT_INGREDIENTAMOUNT, None)}
  }
  #[inline]
  pub fn CostTimeInSecond(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeIngredientExcel::VT_COSTTIMEINSECOND, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for RecipeIngredientExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<RecipeType>("RecipeType", Self::VT_RECIPETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("CostParcelType", Self::VT_COSTPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("CostId", Self::VT_COSTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("CostAmount", Self::VT_COSTAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("IngredientParcelType", Self::VT_INGREDIENTPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("IngredientId", Self::VT_INGREDIENTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("IngredientAmount", Self::VT_INGREDIENTAMOUNT, false)?
     .visit_field::<i64>("CostTimeInSecond", Self::VT_COSTTIMEINSECOND, false)?
     .finish();
    Ok(())
  }
}
pub struct RecipeIngredientExcelArgs<'a> {
    pub Id: i64,
    pub RecipeType: RecipeType,
    pub CostParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub CostId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub CostAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub IngredientParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub IngredientId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub IngredientAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub CostTimeInSecond: i64,
}
impl<'a> Default for RecipeIngredientExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    RecipeIngredientExcelArgs {
      Id: 0,
      RecipeType: RecipeType::None,
      CostParcelType: None,
      CostId: None,
      CostAmount: None,
      IngredientParcelType: None,
      IngredientId: None,
      IngredientAmount: None,
      CostTimeInSecond: 0,
    }
  }
}

impl Serialize for RecipeIngredientExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RecipeIngredientExcel", 9)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("RecipeType", &self.RecipeType())?;
      if let Some(f) = self.CostParcelType() {
        s.serialize_field("CostParcelType", &f)?;
      } else {
        s.skip_field("CostParcelType")?;
      }
      if let Some(f) = self.CostId() {
        s.serialize_field("CostId", &f)?;
      } else {
        s.skip_field("CostId")?;
      }
      if let Some(f) = self.CostAmount() {
        s.serialize_field("CostAmount", &f)?;
      } else {
        s.skip_field("CostAmount")?;
      }
      if let Some(f) = self.IngredientParcelType() {
        s.serialize_field("IngredientParcelType", &f)?;
      } else {
        s.skip_field("IngredientParcelType")?;
      }
      if let Some(f) = self.IngredientId() {
        s.serialize_field("IngredientId", &f)?;
      } else {
        s.skip_field("IngredientId")?;
      }
      if let Some(f) = self.IngredientAmount() {
        s.serialize_field("IngredientAmount", &f)?;
      } else {
        s.skip_field("IngredientAmount")?;
      }
      s.serialize_field("CostTimeInSecond", &self.CostTimeInSecond())?;
    s.end()
  }
}

pub struct RecipeIngredientExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RecipeIngredientExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(RecipeIngredientExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_RecipeType(&mut self, RecipeType: RecipeType) {
    self.fbb_.push_slot::<RecipeType>(RecipeIngredientExcel::VT_RECIPETYPE, RecipeType, RecipeType::None);
  }
  #[inline]
  pub fn add_CostParcelType(&mut self, CostParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeIngredientExcel::VT_COSTPARCELTYPE, CostParcelType);
  }
  #[inline]
  pub fn add_CostId(&mut self, CostId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeIngredientExcel::VT_COSTID, CostId);
  }
  #[inline]
  pub fn add_CostAmount(&mut self, CostAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeIngredientExcel::VT_COSTAMOUNT, CostAmount);
  }
  #[inline]
  pub fn add_IngredientParcelType(&mut self, IngredientParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeIngredientExcel::VT_INGREDIENTPARCELTYPE, IngredientParcelType);
  }
  #[inline]
  pub fn add_IngredientId(&mut self, IngredientId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeIngredientExcel::VT_INGREDIENTID, IngredientId);
  }
  #[inline]
  pub fn add_IngredientAmount(&mut self, IngredientAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeIngredientExcel::VT_INGREDIENTAMOUNT, IngredientAmount);
  }
  #[inline]
  pub fn add_CostTimeInSecond(&mut self, CostTimeInSecond: i64) {
    self.fbb_.push_slot::<i64>(RecipeIngredientExcel::VT_COSTTIMEINSECOND, CostTimeInSecond, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RecipeIngredientExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RecipeIngredientExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RecipeIngredientExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RecipeIngredientExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RecipeIngredientExcel");
      ds.field("Id", &self.Id());
      ds.field("RecipeType", &self.RecipeType());
      ds.field("CostParcelType", &self.CostParcelType());
      ds.field("CostId", &self.CostId());
      ds.field("CostAmount", &self.CostAmount());
      ds.field("IngredientParcelType", &self.IngredientParcelType());
      ds.field("IngredientId", &self.IngredientId());
      ds.field("IngredientAmount", &self.IngredientAmount());
      ds.field("CostTimeInSecond", &self.CostTimeInSecond());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RecipeIngredientExcelT {
  pub Id: i64,
  pub RecipeType: RecipeType,
  pub CostParcelType: Option<Vec<ParcelType>>,
  pub CostId: Option<Vec<i64>>,
  pub CostAmount: Option<Vec<i64>>,
  pub IngredientParcelType: Option<Vec<ParcelType>>,
  pub IngredientId: Option<Vec<i64>>,
  pub IngredientAmount: Option<Vec<i64>>,
  pub CostTimeInSecond: i64,
}
impl Default for RecipeIngredientExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      RecipeType: RecipeType::None,
      CostParcelType: None,
      CostId: None,
      CostAmount: None,
      IngredientParcelType: None,
      IngredientId: None,
      IngredientAmount: None,
      CostTimeInSecond: 0,
    }
  }
}
impl RecipeIngredientExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RecipeIngredientExcel<'b>> {
    let Id = self.Id;
    let RecipeType = self.RecipeType;
    let CostParcelType = self.CostParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CostId = self.CostId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CostAmount = self.CostAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IngredientParcelType = self.IngredientParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IngredientId = self.IngredientId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IngredientAmount = self.IngredientAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CostTimeInSecond = self.CostTimeInSecond;
    RecipeIngredientExcel::create(_fbb, &RecipeIngredientExcelArgs{
      Id,
      RecipeType,
      CostParcelType,
      CostId,
      CostAmount,
      IngredientParcelType,
      IngredientId,
      IngredientAmount,
      CostTimeInSecond,
    })
  }
}
