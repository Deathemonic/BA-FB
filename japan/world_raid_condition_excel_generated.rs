// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WorldRaidConditionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WorldRaidConditionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WorldRaidConditionExcel<'a> {
  type Inner = WorldRaidConditionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WorldRaidConditionExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCKUI: flatbuffers::VOffsetT = 6;
  pub const VT_HIDEWHENLOCKED: flatbuffers::VOffsetT = 8;
  pub const VT_ACCOUNTLEVEL: flatbuffers::VOffsetT = 10;
  pub const VT_SCENARIOMODEID: flatbuffers::VOffsetT = 12;
  pub const VT_CAMPAIGNSTAGEID: flatbuffers::VOffsetT = 14;
  pub const VT_MULTIPLECONDITIONCHECKTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_AFTERWHENDATE: flatbuffers::VOffsetT = 18;
  pub const VT_WORLDRAIDBOSSKILL: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WorldRaidConditionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WorldRaidConditionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<WorldRaidConditionExcel<'bldr>> {
    let mut builder = WorldRaidConditionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"WorldRaidCondition");
      let x = args.AccountLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccountLevel(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.WorldRaidBossKill {
        builder.add_WorldRaidBossKill(x);
      }
      if let Some(x) = args.AfterWhenDate {
        builder.add_AfterWhenDate(x);
      }
      let x = args.MultipleConditionCheckType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MultipleConditionCheckType(x);
      if let Some(x) = args.CampaignStageID {
        builder.add_CampaignStageID(x);
      }
      if let Some(x) = args.ScenarioModeId {
        builder.add_ScenarioModeId(x);
      }
      if let Some(x) = args.LockUI {
        builder.add_LockUI(x);
      }
      builder.add_HideWhenLocked(args.HideWhenLocked);
    builder.finish()
  }

  pub fn unpack(&self) -> WorldRaidConditionExcelT {
    let key = table_encryption_service::create_key(b"WorldRaidCondition");
      let Id = self.Id();
    let LockUI = self.LockUI().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
      let HideWhenLocked = self.HideWhenLocked();
      let AccountLevel = self.AccountLevel();
    let ScenarioModeId = self.ScenarioModeId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let CampaignStageID = self.CampaignStageID().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let MultipleConditionCheckType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MultipleConditionCheckType(), &key)
      } else {
        self.MultipleConditionCheckType()
      };
    let AfterWhenDate = self.AfterWhenDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WorldRaidBossKill = self.WorldRaidBossKill().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    WorldRaidConditionExcelT {
      Id,
      LockUI,
      HideWhenLocked,
      AccountLevel,
      ScenarioModeId,
      CampaignStageID,
      MultipleConditionCheckType,
      AfterWhenDate,
      WorldRaidBossKill,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WorldRaidConditionExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LockUI(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WorldRaidConditionExcel::VT_LOCKUI, None)}
  }
  #[inline]
  pub fn HideWhenLocked(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(WorldRaidConditionExcel::VT_HIDEWHENLOCKED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn AccountLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WorldRaidConditionExcel::VT_ACCOUNTLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioModeId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(WorldRaidConditionExcel::VT_SCENARIOMODEID, None)}
  }
  #[inline]
  pub fn CampaignStageID(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(WorldRaidConditionExcel::VT_CAMPAIGNSTAGEID, None)}
  }
  #[inline]
  pub fn MultipleConditionCheckType(&self) -> MultipleConditionCheckType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MultipleConditionCheckType>(WorldRaidConditionExcel::VT_MULTIPLECONDITIONCHECKTYPE, Some(MultipleConditionCheckType::And)).unwrap()}
  }
  #[inline]
  pub fn AfterWhenDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WorldRaidConditionExcel::VT_AFTERWHENDATE, None)}
  }
  #[inline]
  pub fn WorldRaidBossKill(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(WorldRaidConditionExcel::VT_WORLDRAIDBOSSKILL, None)}
  }
}

impl flatbuffers::Verifiable for WorldRaidConditionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("LockUI", Self::VT_LOCKUI, false)?
     .visit_field::<bool>("HideWhenLocked", Self::VT_HIDEWHENLOCKED, false)?
     .visit_field::<i64>("AccountLevel", Self::VT_ACCOUNTLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ScenarioModeId", Self::VT_SCENARIOMODEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("CampaignStageID", Self::VT_CAMPAIGNSTAGEID, false)?
     .visit_field::<MultipleConditionCheckType>("MultipleConditionCheckType", Self::VT_MULTIPLECONDITIONCHECKTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AfterWhenDate", Self::VT_AFTERWHENDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("WorldRaidBossKill", Self::VT_WORLDRAIDBOSSKILL, false)?
     .finish();
    Ok(())
  }
}
pub struct WorldRaidConditionExcelArgs<'a> {
    pub Id: i64,
    pub LockUI: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub HideWhenLocked: bool,
    pub AccountLevel: i64,
    pub ScenarioModeId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub CampaignStageID: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub MultipleConditionCheckType: MultipleConditionCheckType,
    pub AfterWhenDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WorldRaidBossKill: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for WorldRaidConditionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    WorldRaidConditionExcelArgs {
      Id: 0,
      LockUI: None,
      HideWhenLocked: false,
      AccountLevel: 0,
      ScenarioModeId: None,
      CampaignStageID: None,
      MultipleConditionCheckType: MultipleConditionCheckType::And,
      AfterWhenDate: None,
      WorldRaidBossKill: None,
    }
  }
}

impl Serialize for WorldRaidConditionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WorldRaidConditionExcel", 9)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.LockUI() {
        s.serialize_field("LockUI", &f)?;
      } else {
        s.skip_field("LockUI")?;
      }
      s.serialize_field("HideWhenLocked", &self.HideWhenLocked())?;
      s.serialize_field("AccountLevel", &self.AccountLevel())?;
      if let Some(f) = self.ScenarioModeId() {
        s.serialize_field("ScenarioModeId", &f)?;
      } else {
        s.skip_field("ScenarioModeId")?;
      }
      if let Some(f) = self.CampaignStageID() {
        s.serialize_field("CampaignStageID", &f)?;
      } else {
        s.skip_field("CampaignStageID")?;
      }
      s.serialize_field("MultipleConditionCheckType", &self.MultipleConditionCheckType())?;
      if let Some(f) = self.AfterWhenDate() {
        s.serialize_field("AfterWhenDate", &f)?;
      } else {
        s.skip_field("AfterWhenDate")?;
      }
      if let Some(f) = self.WorldRaidBossKill() {
        s.serialize_field("WorldRaidBossKill", &f)?;
      } else {
        s.skip_field("WorldRaidBossKill")?;
      }
    s.end()
  }
}

pub struct WorldRaidConditionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WorldRaidConditionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(WorldRaidConditionExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LockUI(&mut self, LockUI: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldRaidConditionExcel::VT_LOCKUI, LockUI);
  }
  #[inline]
  pub fn add_HideWhenLocked(&mut self, HideWhenLocked: bool) {
    self.fbb_.push_slot::<bool>(WorldRaidConditionExcel::VT_HIDEWHENLOCKED, HideWhenLocked, false);
  }
  #[inline]
  pub fn add_AccountLevel(&mut self, AccountLevel: i64) {
    self.fbb_.push_slot::<i64>(WorldRaidConditionExcel::VT_ACCOUNTLEVEL, AccountLevel, 0);
  }
  #[inline]
  pub fn add_ScenarioModeId(&mut self, ScenarioModeId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldRaidConditionExcel::VT_SCENARIOMODEID, ScenarioModeId);
  }
  #[inline]
  pub fn add_CampaignStageID(&mut self, CampaignStageID: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldRaidConditionExcel::VT_CAMPAIGNSTAGEID, CampaignStageID);
  }
  #[inline]
  pub fn add_MultipleConditionCheckType(&mut self, MultipleConditionCheckType: MultipleConditionCheckType) {
    self.fbb_.push_slot::<MultipleConditionCheckType>(WorldRaidConditionExcel::VT_MULTIPLECONDITIONCHECKTYPE, MultipleConditionCheckType, MultipleConditionCheckType::And);
  }
  #[inline]
  pub fn add_AfterWhenDate(&mut self, AfterWhenDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldRaidConditionExcel::VT_AFTERWHENDATE, AfterWhenDate);
  }
  #[inline]
  pub fn add_WorldRaidBossKill(&mut self, WorldRaidBossKill: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldRaidConditionExcel::VT_WORLDRAIDBOSSKILL, WorldRaidBossKill);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WorldRaidConditionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WorldRaidConditionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WorldRaidConditionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WorldRaidConditionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WorldRaidConditionExcel");
      ds.field("Id", &self.Id());
      ds.field("LockUI", &self.LockUI());
      ds.field("HideWhenLocked", &self.HideWhenLocked());
      ds.field("AccountLevel", &self.AccountLevel());
      ds.field("ScenarioModeId", &self.ScenarioModeId());
      ds.field("CampaignStageID", &self.CampaignStageID());
      ds.field("MultipleConditionCheckType", &self.MultipleConditionCheckType());
      ds.field("AfterWhenDate", &self.AfterWhenDate());
      ds.field("WorldRaidBossKill", &self.WorldRaidBossKill());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WorldRaidConditionExcelT {
  pub Id: i64,
  pub LockUI: Option<Vec<String>>,
  pub HideWhenLocked: bool,
  pub AccountLevel: i64,
  pub ScenarioModeId: Option<Vec<i64>>,
  pub CampaignStageID: Option<Vec<i64>>,
  pub MultipleConditionCheckType: MultipleConditionCheckType,
  pub AfterWhenDate: Option<String>,
  pub WorldRaidBossKill: Option<Vec<i64>>,
}
impl Default for WorldRaidConditionExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LockUI: None,
      HideWhenLocked: false,
      AccountLevel: 0,
      ScenarioModeId: None,
      CampaignStageID: None,
      MultipleConditionCheckType: MultipleConditionCheckType::And,
      AfterWhenDate: None,
      WorldRaidBossKill: None,
    }
  }
}
impl WorldRaidConditionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WorldRaidConditionExcel<'b>> {
    let Id = self.Id;
    let LockUI = self.LockUI.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let HideWhenLocked = self.HideWhenLocked;
    let AccountLevel = self.AccountLevel;
    let ScenarioModeId = self.ScenarioModeId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CampaignStageID = self.CampaignStageID.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MultipleConditionCheckType = self.MultipleConditionCheckType;
    let AfterWhenDate = self.AfterWhenDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WorldRaidBossKill = self.WorldRaidBossKill.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    WorldRaidConditionExcel::create(_fbb, &WorldRaidConditionExcelArgs{
      Id,
      LockUI,
      HideWhenLocked,
      AccountLevel,
      ScenarioModeId,
      CampaignStageID,
      MultipleConditionCheckType,
      AfterWhenDate,
      WorldRaidBossKill,
    })
  }
}
