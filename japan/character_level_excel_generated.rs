// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterLevelExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterLevelExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterLevelExcel<'a> {
  type Inner = CharacterLevelExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterLevelExcel<'a> {
  pub const VT_LEVEL: flatbuffers::VOffsetT = 4;
  pub const VT_EXP: flatbuffers::VOffsetT = 6;
  pub const VT_TOTALEXP: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterLevelExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterLevelExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterLevelExcel<'bldr>> {
    let mut builder = CharacterLevelExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterLevel");
      let x = args.TotalExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TotalExp(x);
      let x = args.Exp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Exp(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Level(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterLevelExcelT {
    let key = table_encryption_service::create_key(b"CharacterLevel");
      let Level = self.Level();
      let Exp = self.Exp();
      let TotalExp = self.TotalExp();
    CharacterLevelExcelT {
      Level,
      Exp,
      TotalExp,
    }
  }

  #[inline]
  pub fn Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterLevelExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Exp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterLevelExcel::VT_EXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TotalExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterLevelExcel::VT_TOTALEXP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterLevelExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("Level", Self::VT_LEVEL, false)?
     .visit_field::<i64>("Exp", Self::VT_EXP, false)?
     .visit_field::<i64>("TotalExp", Self::VT_TOTALEXP, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterLevelExcelArgs {
    pub Level: i32,
    pub Exp: i64,
    pub TotalExp: i64,
}
impl<'a> Default for CharacterLevelExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterLevelExcelArgs {
      Level: 0,
      Exp: 0,
      TotalExp: 0,
    }
  }
}

impl Serialize for CharacterLevelExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterLevelExcel", 3)?;
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("Exp", &self.Exp())?;
      s.serialize_field("TotalExp", &self.TotalExp())?;
    s.end()
  }
}

pub struct CharacterLevelExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterLevelExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Level(&mut self, Level: i32) {
    self.fbb_.push_slot::<i32>(CharacterLevelExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_Exp(&mut self, Exp: i64) {
    self.fbb_.push_slot::<i64>(CharacterLevelExcel::VT_EXP, Exp, 0);
  }
  #[inline]
  pub fn add_TotalExp(&mut self, TotalExp: i64) {
    self.fbb_.push_slot::<i64>(CharacterLevelExcel::VT_TOTALEXP, TotalExp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterLevelExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterLevelExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterLevelExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterLevelExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterLevelExcel");
      ds.field("Level", &self.Level());
      ds.field("Exp", &self.Exp());
      ds.field("TotalExp", &self.TotalExp());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterLevelExcelT {
  pub Level: i32,
  pub Exp: i64,
  pub TotalExp: i64,
}
impl Default for CharacterLevelExcelT {
  fn default() -> Self {
    Self {
      Level: 0,
      Exp: 0,
      TotalExp: 0,
    }
  }
}
impl CharacterLevelExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterLevelExcel<'b>> {
    let Level = self.Level;
    let Exp = self.Exp;
    let TotalExp = self.TotalExp;
    CharacterLevelExcel::create(_fbb, &CharacterLevelExcelArgs{
      Level,
      Exp,
      TotalExp,
    })
  }
}
