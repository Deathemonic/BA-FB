// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PickupDuplicateBonusExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PickupDuplicateBonusExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PickupDuplicateBonusExcel<'a> {
  type Inner = PickupDuplicateBonusExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PickupDuplicateBonusExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SHOPCATEGORYTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_SHOPID: flatbuffers::VOffsetT = 8;
  pub const VT_PICKUPCHARACTERID: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PickupDuplicateBonusExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PickupDuplicateBonusExcelArgs
  ) -> flatbuffers::WIPOffset<PickupDuplicateBonusExcel<'bldr>> {
    let mut builder = PickupDuplicateBonusExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"PickupDuplicateBonus");
      let x = args.RewardParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelAmount(x);
      let x = args.RewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelId(x);
      let x = args.PickupCharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PickupCharacterId(x);
      let x = args.ShopId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShopId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      let x = args.ShopCategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ShopCategoryType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> PickupDuplicateBonusExcelT {
    let key = table_encryption_service::create_key(b"PickupDuplicateBonus");
      let Id = self.Id();
      let ShopCategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ShopCategoryType(), &key)
      } else {
        self.ShopCategoryType()
      };
      let ShopId = self.ShopId();
      let PickupCharacterId = self.PickupCharacterId();
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelId = self.RewardParcelId();
      let RewardParcelAmount = self.RewardParcelAmount();
    PickupDuplicateBonusExcelT {
      Id,
      ShopCategoryType,
      ShopId,
      PickupCharacterId,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupDuplicateBonusExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopCategoryType(&self) -> ShopCategoryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopCategoryType>(PickupDuplicateBonusExcel::VT_SHOPCATEGORYTYPE, Some(ShopCategoryType::General)).unwrap()}
  }
  #[inline]
  pub fn ShopId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupDuplicateBonusExcel::VT_SHOPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PickupCharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupDuplicateBonusExcel::VT_PICKUPCHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(PickupDuplicateBonusExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupDuplicateBonusExcel::VT_REWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupDuplicateBonusExcel::VT_REWARDPARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PickupDuplicateBonusExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ShopCategoryType>("ShopCategoryType", Self::VT_SHOPCATEGORYTYPE, false)?
     .visit_field::<i64>("ShopId", Self::VT_SHOPID, false)?
     .visit_field::<i64>("PickupCharacterId", Self::VT_PICKUPCHARACTERID, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<i64>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct PickupDuplicateBonusExcelArgs {
    pub Id: i64,
    pub ShopCategoryType: ShopCategoryType,
    pub ShopId: i64,
    pub PickupCharacterId: i64,
    pub RewardParcelType: ParcelType,
    pub RewardParcelId: i64,
    pub RewardParcelAmount: i64,
}
impl<'a> Default for PickupDuplicateBonusExcelArgs {
  #[inline]
  fn default() -> Self {
    PickupDuplicateBonusExcelArgs {
      Id: 0,
      ShopCategoryType: ShopCategoryType::General,
      ShopId: 0,
      PickupCharacterId: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
    }
  }
}

impl Serialize for PickupDuplicateBonusExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PickupDuplicateBonusExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ShopCategoryType", &self.ShopCategoryType())?;
      s.serialize_field("ShopId", &self.ShopId())?;
      s.serialize_field("PickupCharacterId", &self.PickupCharacterId())?;
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelId", &self.RewardParcelId())?;
      s.serialize_field("RewardParcelAmount", &self.RewardParcelAmount())?;
    s.end()
  }
}

pub struct PickupDuplicateBonusExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PickupDuplicateBonusExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(PickupDuplicateBonusExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ShopCategoryType(&mut self, ShopCategoryType: ShopCategoryType) {
    self.fbb_.push_slot::<ShopCategoryType>(PickupDuplicateBonusExcel::VT_SHOPCATEGORYTYPE, ShopCategoryType, ShopCategoryType::General);
  }
  #[inline]
  pub fn add_ShopId(&mut self, ShopId: i64) {
    self.fbb_.push_slot::<i64>(PickupDuplicateBonusExcel::VT_SHOPID, ShopId, 0);
  }
  #[inline]
  pub fn add_PickupCharacterId(&mut self, PickupCharacterId: i64) {
    self.fbb_.push_slot::<i64>(PickupDuplicateBonusExcel::VT_PICKUPCHARACTERID, PickupCharacterId, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(PickupDuplicateBonusExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(PickupDuplicateBonusExcel::VT_REWARDPARCELID, RewardParcelId, 0);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(PickupDuplicateBonusExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PickupDuplicateBonusExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PickupDuplicateBonusExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PickupDuplicateBonusExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PickupDuplicateBonusExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PickupDuplicateBonusExcel");
      ds.field("Id", &self.Id());
      ds.field("ShopCategoryType", &self.ShopCategoryType());
      ds.field("ShopId", &self.ShopId());
      ds.field("PickupCharacterId", &self.PickupCharacterId());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PickupDuplicateBonusExcelT {
  pub Id: i64,
  pub ShopCategoryType: ShopCategoryType,
  pub ShopId: i64,
  pub PickupCharacterId: i64,
  pub RewardParcelType: ParcelType,
  pub RewardParcelId: i64,
  pub RewardParcelAmount: i64,
}
impl Default for PickupDuplicateBonusExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ShopCategoryType: ShopCategoryType::General,
      ShopId: 0,
      PickupCharacterId: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
    }
  }
}
impl PickupDuplicateBonusExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PickupDuplicateBonusExcel<'b>> {
    let Id = self.Id;
    let ShopCategoryType = self.ShopCategoryType;
    let ShopId = self.ShopId;
    let PickupCharacterId = self.PickupCharacterId;
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelId = self.RewardParcelId;
    let RewardParcelAmount = self.RewardParcelAmount;
    PickupDuplicateBonusExcel::create(_fbb, &PickupDuplicateBonusExcelArgs{
      Id,
      ShopCategoryType,
      ShopId,
      PickupCharacterId,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    })
  }
}
