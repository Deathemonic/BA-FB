// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StickerGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StickerGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StickerGroupExcel<'a> {
  type Inner = StickerGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StickerGroupExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LAYOUT: flatbuffers::VOffsetT = 6;
  pub const VT_UNIQUELAYOUTPATH: flatbuffers::VOffsetT = 8;
  pub const VT_STICKERGROUPICONPATH: flatbuffers::VOffsetT = 10;
  pub const VT_PAGECOMPLETESLOT: flatbuffers::VOffsetT = 12;
  pub const VT_PAGECOMPLETEREWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_PAGECOMPLETEREWARDPARCELID: flatbuffers::VOffsetT = 16;
  pub const VT_PAGECOMPLETEREWARDAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_LOCALIZETITLE: flatbuffers::VOffsetT = 20;
  pub const VT_LOCALIZEDESCRIPTION: flatbuffers::VOffsetT = 22;
  pub const VT_STICKERGROUPCOVERPATH: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StickerGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StickerGroupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<StickerGroupExcel<'bldr>> {
    let mut builder = StickerGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"StickerGroup");
      let x = args.PageCompleteRewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PageCompleteRewardParcelId(x);
      let x = args.PageCompleteSlot;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PageCompleteSlot(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.StickerGroupCoverpath {
        builder.add_StickerGroupCoverpath(x);
      }
      let x = args.LocalizeDescription;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeDescription(x);
      let x = args.LocalizeTitle;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeTitle(x);
      let x = args.PageCompleteRewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PageCompleteRewardAmount(x);
      let x = args.PageCompleteRewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PageCompleteRewardParcelType(x);
      if let Some(x) = args.StickerGroupIconpath {
        builder.add_StickerGroupIconpath(x);
      }
      if let Some(x) = args.UniqueLayoutPath {
        builder.add_UniqueLayoutPath(x);
      }
      if let Some(x) = args.Layout {
        builder.add_Layout(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> StickerGroupExcelT {
    let key = table_encryption_service::create_key(b"StickerGroup");
      let Id = self.Id();
    let Layout = self.Layout().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let UniqueLayoutPath = self.UniqueLayoutPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StickerGroupIconpath = self.StickerGroupIconpath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let PageCompleteSlot = self.PageCompleteSlot();
      let PageCompleteRewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PageCompleteRewardParcelType(), &key)
      } else {
        self.PageCompleteRewardParcelType()
      };
      let PageCompleteRewardParcelId = self.PageCompleteRewardParcelId();
      let PageCompleteRewardAmount = self.PageCompleteRewardAmount();
      let LocalizeTitle = self.LocalizeTitle();
      let LocalizeDescription = self.LocalizeDescription();
    let StickerGroupCoverpath = self.StickerGroupCoverpath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    StickerGroupExcelT {
      Id,
      Layout,
      UniqueLayoutPath,
      StickerGroupIconpath,
      PageCompleteSlot,
      PageCompleteRewardParcelType,
      PageCompleteRewardParcelId,
      PageCompleteRewardAmount,
      LocalizeTitle,
      LocalizeDescription,
      StickerGroupCoverpath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerGroupExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Layout(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StickerGroupExcel::VT_LAYOUT, None)}
  }
  #[inline]
  pub fn UniqueLayoutPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StickerGroupExcel::VT_UNIQUELAYOUTPATH, None)}
  }
  #[inline]
  pub fn StickerGroupIconpath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StickerGroupExcel::VT_STICKERGROUPICONPATH, None)}
  }
  #[inline]
  pub fn PageCompleteSlot(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerGroupExcel::VT_PAGECOMPLETESLOT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PageCompleteRewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(StickerGroupExcel::VT_PAGECOMPLETEREWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn PageCompleteRewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerGroupExcel::VT_PAGECOMPLETEREWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PageCompleteRewardAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StickerGroupExcel::VT_PAGECOMPLETEREWARDAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeTitle(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(StickerGroupExcel::VT_LOCALIZETITLE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeDescription(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(StickerGroupExcel::VT_LOCALIZEDESCRIPTION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StickerGroupCoverpath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StickerGroupExcel::VT_STICKERGROUPCOVERPATH, None)}
  }
}

impl flatbuffers::Verifiable for StickerGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Layout", Self::VT_LAYOUT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("UniqueLayoutPath", Self::VT_UNIQUELAYOUTPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StickerGroupIconpath", Self::VT_STICKERGROUPICONPATH, false)?
     .visit_field::<i64>("PageCompleteSlot", Self::VT_PAGECOMPLETESLOT, false)?
     .visit_field::<ParcelType>("PageCompleteRewardParcelType", Self::VT_PAGECOMPLETEREWARDPARCELTYPE, false)?
     .visit_field::<i64>("PageCompleteRewardParcelId", Self::VT_PAGECOMPLETEREWARDPARCELID, false)?
     .visit_field::<i32>("PageCompleteRewardAmount", Self::VT_PAGECOMPLETEREWARDAMOUNT, false)?
     .visit_field::<u32>("LocalizeTitle", Self::VT_LOCALIZETITLE, false)?
     .visit_field::<u32>("LocalizeDescription", Self::VT_LOCALIZEDESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StickerGroupCoverpath", Self::VT_STICKERGROUPCOVERPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct StickerGroupExcelArgs<'a> {
    pub Id: i64,
    pub Layout: Option<flatbuffers::WIPOffset<&'a str>>,
    pub UniqueLayoutPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StickerGroupIconpath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PageCompleteSlot: i64,
    pub PageCompleteRewardParcelType: ParcelType,
    pub PageCompleteRewardParcelId: i64,
    pub PageCompleteRewardAmount: i32,
    pub LocalizeTitle: u32,
    pub LocalizeDescription: u32,
    pub StickerGroupCoverpath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for StickerGroupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    StickerGroupExcelArgs {
      Id: 0,
      Layout: None,
      UniqueLayoutPath: None,
      StickerGroupIconpath: None,
      PageCompleteSlot: 0,
      PageCompleteRewardParcelType: ParcelType::None,
      PageCompleteRewardParcelId: 0,
      PageCompleteRewardAmount: 0,
      LocalizeTitle: 0,
      LocalizeDescription: 0,
      StickerGroupCoverpath: None,
    }
  }
}

impl Serialize for StickerGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StickerGroupExcel", 11)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Layout() {
        s.serialize_field("Layout", &f)?;
      } else {
        s.skip_field("Layout")?;
      }
      if let Some(f) = self.UniqueLayoutPath() {
        s.serialize_field("UniqueLayoutPath", &f)?;
      } else {
        s.skip_field("UniqueLayoutPath")?;
      }
      if let Some(f) = self.StickerGroupIconpath() {
        s.serialize_field("StickerGroupIconpath", &f)?;
      } else {
        s.skip_field("StickerGroupIconpath")?;
      }
      s.serialize_field("PageCompleteSlot", &self.PageCompleteSlot())?;
      s.serialize_field("PageCompleteRewardParcelType", &self.PageCompleteRewardParcelType())?;
      s.serialize_field("PageCompleteRewardParcelId", &self.PageCompleteRewardParcelId())?;
      s.serialize_field("PageCompleteRewardAmount", &self.PageCompleteRewardAmount())?;
      s.serialize_field("LocalizeTitle", &self.LocalizeTitle())?;
      s.serialize_field("LocalizeDescription", &self.LocalizeDescription())?;
      if let Some(f) = self.StickerGroupCoverpath() {
        s.serialize_field("StickerGroupCoverpath", &f)?;
      } else {
        s.skip_field("StickerGroupCoverpath")?;
      }
    s.end()
  }
}

pub struct StickerGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StickerGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(StickerGroupExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Layout(&mut self, Layout: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerGroupExcel::VT_LAYOUT, Layout);
  }
  #[inline]
  pub fn add_UniqueLayoutPath(&mut self, UniqueLayoutPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerGroupExcel::VT_UNIQUELAYOUTPATH, UniqueLayoutPath);
  }
  #[inline]
  pub fn add_StickerGroupIconpath(&mut self, StickerGroupIconpath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerGroupExcel::VT_STICKERGROUPICONPATH, StickerGroupIconpath);
  }
  #[inline]
  pub fn add_PageCompleteSlot(&mut self, PageCompleteSlot: i64) {
    self.fbb_.push_slot::<i64>(StickerGroupExcel::VT_PAGECOMPLETESLOT, PageCompleteSlot, 0);
  }
  #[inline]
  pub fn add_PageCompleteRewardParcelType(&mut self, PageCompleteRewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(StickerGroupExcel::VT_PAGECOMPLETEREWARDPARCELTYPE, PageCompleteRewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_PageCompleteRewardParcelId(&mut self, PageCompleteRewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(StickerGroupExcel::VT_PAGECOMPLETEREWARDPARCELID, PageCompleteRewardParcelId, 0);
  }
  #[inline]
  pub fn add_PageCompleteRewardAmount(&mut self, PageCompleteRewardAmount: i32) {
    self.fbb_.push_slot::<i32>(StickerGroupExcel::VT_PAGECOMPLETEREWARDAMOUNT, PageCompleteRewardAmount, 0);
  }
  #[inline]
  pub fn add_LocalizeTitle(&mut self, LocalizeTitle: u32) {
    self.fbb_.push_slot::<u32>(StickerGroupExcel::VT_LOCALIZETITLE, LocalizeTitle, 0);
  }
  #[inline]
  pub fn add_LocalizeDescription(&mut self, LocalizeDescription: u32) {
    self.fbb_.push_slot::<u32>(StickerGroupExcel::VT_LOCALIZEDESCRIPTION, LocalizeDescription, 0);
  }
  #[inline]
  pub fn add_StickerGroupCoverpath(&mut self, StickerGroupCoverpath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerGroupExcel::VT_STICKERGROUPCOVERPATH, StickerGroupCoverpath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StickerGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StickerGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StickerGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StickerGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StickerGroupExcel");
      ds.field("Id", &self.Id());
      ds.field("Layout", &self.Layout());
      ds.field("UniqueLayoutPath", &self.UniqueLayoutPath());
      ds.field("StickerGroupIconpath", &self.StickerGroupIconpath());
      ds.field("PageCompleteSlot", &self.PageCompleteSlot());
      ds.field("PageCompleteRewardParcelType", &self.PageCompleteRewardParcelType());
      ds.field("PageCompleteRewardParcelId", &self.PageCompleteRewardParcelId());
      ds.field("PageCompleteRewardAmount", &self.PageCompleteRewardAmount());
      ds.field("LocalizeTitle", &self.LocalizeTitle());
      ds.field("LocalizeDescription", &self.LocalizeDescription());
      ds.field("StickerGroupCoverpath", &self.StickerGroupCoverpath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StickerGroupExcelT {
  pub Id: i64,
  pub Layout: Option<String>,
  pub UniqueLayoutPath: Option<String>,
  pub StickerGroupIconpath: Option<String>,
  pub PageCompleteSlot: i64,
  pub PageCompleteRewardParcelType: ParcelType,
  pub PageCompleteRewardParcelId: i64,
  pub PageCompleteRewardAmount: i32,
  pub LocalizeTitle: u32,
  pub LocalizeDescription: u32,
  pub StickerGroupCoverpath: Option<String>,
}
impl Default for StickerGroupExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Layout: None,
      UniqueLayoutPath: None,
      StickerGroupIconpath: None,
      PageCompleteSlot: 0,
      PageCompleteRewardParcelType: ParcelType::None,
      PageCompleteRewardParcelId: 0,
      PageCompleteRewardAmount: 0,
      LocalizeTitle: 0,
      LocalizeDescription: 0,
      StickerGroupCoverpath: None,
    }
  }
}
impl StickerGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<StickerGroupExcel<'b>> {
    let Id = self.Id;
    let Layout = self.Layout.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let UniqueLayoutPath = self.UniqueLayoutPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StickerGroupIconpath = self.StickerGroupIconpath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PageCompleteSlot = self.PageCompleteSlot;
    let PageCompleteRewardParcelType = self.PageCompleteRewardParcelType;
    let PageCompleteRewardParcelId = self.PageCompleteRewardParcelId;
    let PageCompleteRewardAmount = self.PageCompleteRewardAmount;
    let LocalizeTitle = self.LocalizeTitle;
    let LocalizeDescription = self.LocalizeDescription;
    let StickerGroupCoverpath = self.StickerGroupCoverpath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    StickerGroupExcel::create(_fbb, &StickerGroupExcelArgs{
      Id,
      Layout,
      UniqueLayoutPath,
      StickerGroupIconpath,
      PageCompleteSlot,
      PageCompleteRewardParcelType,
      PageCompleteRewardParcelId,
      PageCompleteRewardAmount,
      LocalizeTitle,
      LocalizeDescription,
      StickerGroupCoverpath,
    })
  }
}
