// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGDiceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGDiceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGDiceExcel<'a> {
  type Inner = MinigameTBGDiceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGDiceExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_DICEGROUP: flatbuffers::VOffsetT = 8;
  pub const VT_DICERESULT: flatbuffers::VOffsetT = 10;
  pub const VT_PROB: flatbuffers::VOffsetT = 12;
  pub const VT_PROBMODIFYCONDITION: flatbuffers::VOffsetT = 14;
  pub const VT_PROBMODIFYVALUE: flatbuffers::VOffsetT = 16;
  pub const VT_PROBMODIFYLIMIT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGDiceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGDiceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameTBGDiceExcel<'bldr>> {
    let mut builder = MinigameTBGDiceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGDice");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.ProbModifyLimit {
        builder.add_ProbModifyLimit(x);
      }
      if let Some(x) = args.ProbModifyValue {
        builder.add_ProbModifyValue(x);
      }
      if let Some(x) = args.ProbModifyCondition {
        builder.add_ProbModifyCondition(x);
      }
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      let x = args.DiceResult;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DiceResult(x);
      let x = args.DiceGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DiceGroup(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGDiceExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGDice");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let DiceGroup = self.DiceGroup();
      let DiceResult = self.DiceResult();
      let Prob = self.Prob();
    let ProbModifyCondition = self.ProbModifyCondition().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ProbModifyValue = self.ProbModifyValue().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let ProbModifyLimit = self.ProbModifyLimit().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    MinigameTBGDiceExcelT {
      EventContentId,
      UniqueId,
      DiceGroup,
      DiceResult,
      Prob,
      ProbModifyCondition,
      ProbModifyValue,
      ProbModifyLimit,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGDiceExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGDiceExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiceGroup(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGDiceExcel::VT_DICEGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiceResult(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGDiceExcel::VT_DICERESULT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGDiceExcel::VT_PROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProbModifyCondition(&self) -> Option<flatbuffers::Vector<'a, TBGProbModifyCondition>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, TBGProbModifyCondition>>>(MinigameTBGDiceExcel::VT_PROBMODIFYCONDITION, None)}
  }
  #[inline]
  pub fn ProbModifyValue(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(MinigameTBGDiceExcel::VT_PROBMODIFYVALUE, None)}
  }
  #[inline]
  pub fn ProbModifyLimit(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(MinigameTBGDiceExcel::VT_PROBMODIFYLIMIT, None)}
  }
}

impl flatbuffers::Verifiable for MinigameTBGDiceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i32>("DiceGroup", Self::VT_DICEGROUP, false)?
     .visit_field::<i32>("DiceResult", Self::VT_DICERESULT, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, TBGProbModifyCondition>>>("ProbModifyCondition", Self::VT_PROBMODIFYCONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("ProbModifyValue", Self::VT_PROBMODIFYVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("ProbModifyLimit", Self::VT_PROBMODIFYLIMIT, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGDiceExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub DiceGroup: i32,
    pub DiceResult: i32,
    pub Prob: i32,
    pub ProbModifyCondition: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, TBGProbModifyCondition>>>,
    pub ProbModifyValue: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub ProbModifyLimit: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for MinigameTBGDiceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameTBGDiceExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      DiceGroup: 0,
      DiceResult: 0,
      Prob: 0,
      ProbModifyCondition: None,
      ProbModifyValue: None,
      ProbModifyLimit: None,
    }
  }
}

impl Serialize for MinigameTBGDiceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGDiceExcel", 8)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("DiceGroup", &self.DiceGroup())?;
      s.serialize_field("DiceResult", &self.DiceResult())?;
      s.serialize_field("Prob", &self.Prob())?;
      if let Some(f) = self.ProbModifyCondition() {
        s.serialize_field("ProbModifyCondition", &f)?;
      } else {
        s.skip_field("ProbModifyCondition")?;
      }
      if let Some(f) = self.ProbModifyValue() {
        s.serialize_field("ProbModifyValue", &f)?;
      } else {
        s.skip_field("ProbModifyValue")?;
      }
      if let Some(f) = self.ProbModifyLimit() {
        s.serialize_field("ProbModifyLimit", &f)?;
      } else {
        s.skip_field("ProbModifyLimit")?;
      }
    s.end()
  }
}

pub struct MinigameTBGDiceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGDiceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGDiceExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGDiceExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_DiceGroup(&mut self, DiceGroup: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGDiceExcel::VT_DICEGROUP, DiceGroup, 0);
  }
  #[inline]
  pub fn add_DiceResult(&mut self, DiceResult: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGDiceExcel::VT_DICERESULT, DiceResult, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGDiceExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn add_ProbModifyCondition(&mut self, ProbModifyCondition: flatbuffers::WIPOffset<flatbuffers::Vector<'b , TBGProbModifyCondition>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGDiceExcel::VT_PROBMODIFYCONDITION, ProbModifyCondition);
  }
  #[inline]
  pub fn add_ProbModifyValue(&mut self, ProbModifyValue: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGDiceExcel::VT_PROBMODIFYVALUE, ProbModifyValue);
  }
  #[inline]
  pub fn add_ProbModifyLimit(&mut self, ProbModifyLimit: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGDiceExcel::VT_PROBMODIFYLIMIT, ProbModifyLimit);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGDiceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGDiceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGDiceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGDiceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGDiceExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("DiceGroup", &self.DiceGroup());
      ds.field("DiceResult", &self.DiceResult());
      ds.field("Prob", &self.Prob());
      ds.field("ProbModifyCondition", &self.ProbModifyCondition());
      ds.field("ProbModifyValue", &self.ProbModifyValue());
      ds.field("ProbModifyLimit", &self.ProbModifyLimit());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGDiceExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub DiceGroup: i32,
  pub DiceResult: i32,
  pub Prob: i32,
  pub ProbModifyCondition: Option<Vec<TBGProbModifyCondition>>,
  pub ProbModifyValue: Option<Vec<i32>>,
  pub ProbModifyLimit: Option<Vec<i32>>,
}
impl Default for MinigameTBGDiceExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      DiceGroup: 0,
      DiceResult: 0,
      Prob: 0,
      ProbModifyCondition: None,
      ProbModifyValue: None,
      ProbModifyLimit: None,
    }
  }
}
impl MinigameTBGDiceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGDiceExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let DiceGroup = self.DiceGroup;
    let DiceResult = self.DiceResult;
    let Prob = self.Prob;
    let ProbModifyCondition = self.ProbModifyCondition.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ProbModifyValue = self.ProbModifyValue.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ProbModifyLimit = self.ProbModifyLimit.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MinigameTBGDiceExcel::create(_fbb, &MinigameTBGDiceExcelArgs{
      EventContentId,
      UniqueId,
      DiceGroup,
      DiceResult,
      Prob,
      ProbModifyCondition,
      ProbModifyValue,
      ProbModifyLimit,
    })
  }
}
