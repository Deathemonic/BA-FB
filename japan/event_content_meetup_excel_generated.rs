// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentMeetupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentMeetupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentMeetupExcel<'a> {
  type Inner = EventContentMeetupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentMeetupExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 8;
  pub const VT_CONDITIONSCENARIOGROUPID: flatbuffers::VOffsetT = 10;
  pub const VT_CONDITIONTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_CONDITIONPARAMETER: flatbuffers::VOffsetT = 14;
  pub const VT_CONDITIONPRINTTYPE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentMeetupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentMeetupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentMeetupExcel<'bldr>> {
    let mut builder = EventContentMeetupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentMeetup");
      let x = args.ConditionScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionScenarioGroupId(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.ConditionPrintType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConditionPrintType(x);
      if let Some(x) = args.ConditionParameter {
        builder.add_ConditionParameter(x);
      }
      let x = args.ConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConditionType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentMeetupExcelT {
    let key = table_encryption_service::create_key(b"EventContentMeetup");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let CharacterId = self.CharacterId();
      let ConditionScenarioGroupId = self.ConditionScenarioGroupId();
      let ConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConditionType(), &key)
      } else {
        self.ConditionType()
      };
    let ConditionParameter = self.ConditionParameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let ConditionPrintType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConditionPrintType(), &key)
      } else {
        self.ConditionPrintType()
      };
    EventContentMeetupExcelT {
      Id,
      EventContentId,
      CharacterId,
      ConditionScenarioGroupId,
      ConditionType,
      ConditionParameter,
      ConditionPrintType,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMeetupExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMeetupExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMeetupExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConditionScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMeetupExcel::VT_CONDITIONSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConditionType(&self) -> MeetupConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MeetupConditionType>(EventContentMeetupExcel::VT_CONDITIONTYPE, Some(MeetupConditionType::None)).unwrap()}
  }
  #[inline]
  pub fn ConditionParameter(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentMeetupExcel::VT_CONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn ConditionPrintType(&self) -> MeetupConditionPrintType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MeetupConditionPrintType>(EventContentMeetupExcel::VT_CONDITIONPRINTTYPE, Some(MeetupConditionPrintType::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentMeetupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<i64>("ConditionScenarioGroupId", Self::VT_CONDITIONSCENARIOGROUPID, false)?
     .visit_field::<MeetupConditionType>("ConditionType", Self::VT_CONDITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ConditionParameter", Self::VT_CONDITIONPARAMETER, false)?
     .visit_field::<MeetupConditionPrintType>("ConditionPrintType", Self::VT_CONDITIONPRINTTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentMeetupExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub CharacterId: i64,
    pub ConditionScenarioGroupId: i64,
    pub ConditionType: MeetupConditionType,
    pub ConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ConditionPrintType: MeetupConditionPrintType,
}
impl<'a> Default for EventContentMeetupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentMeetupExcelArgs {
      Id: 0,
      EventContentId: 0,
      CharacterId: 0,
      ConditionScenarioGroupId: 0,
      ConditionType: MeetupConditionType::None,
      ConditionParameter: None,
      ConditionPrintType: MeetupConditionPrintType::None,
    }
  }
}

impl Serialize for EventContentMeetupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentMeetupExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("ConditionScenarioGroupId", &self.ConditionScenarioGroupId())?;
      s.serialize_field("ConditionType", &self.ConditionType())?;
      if let Some(f) = self.ConditionParameter() {
        s.serialize_field("ConditionParameter", &f)?;
      } else {
        s.skip_field("ConditionParameter")?;
      }
      s.serialize_field("ConditionPrintType", &self.ConditionPrintType())?;
    s.end()
  }
}

pub struct EventContentMeetupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentMeetupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentMeetupExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentMeetupExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(EventContentMeetupExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_ConditionScenarioGroupId(&mut self, ConditionScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentMeetupExcel::VT_CONDITIONSCENARIOGROUPID, ConditionScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_ConditionType(&mut self, ConditionType: MeetupConditionType) {
    self.fbb_.push_slot::<MeetupConditionType>(EventContentMeetupExcel::VT_CONDITIONTYPE, ConditionType, MeetupConditionType::None);
  }
  #[inline]
  pub fn add_ConditionParameter(&mut self, ConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMeetupExcel::VT_CONDITIONPARAMETER, ConditionParameter);
  }
  #[inline]
  pub fn add_ConditionPrintType(&mut self, ConditionPrintType: MeetupConditionPrintType) {
    self.fbb_.push_slot::<MeetupConditionPrintType>(EventContentMeetupExcel::VT_CONDITIONPRINTTYPE, ConditionPrintType, MeetupConditionPrintType::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentMeetupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentMeetupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentMeetupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentMeetupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentMeetupExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("ConditionScenarioGroupId", &self.ConditionScenarioGroupId());
      ds.field("ConditionType", &self.ConditionType());
      ds.field("ConditionParameter", &self.ConditionParameter());
      ds.field("ConditionPrintType", &self.ConditionPrintType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentMeetupExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub CharacterId: i64,
  pub ConditionScenarioGroupId: i64,
  pub ConditionType: MeetupConditionType,
  pub ConditionParameter: Option<Vec<i64>>,
  pub ConditionPrintType: MeetupConditionPrintType,
}
impl Default for EventContentMeetupExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      CharacterId: 0,
      ConditionScenarioGroupId: 0,
      ConditionType: MeetupConditionType::None,
      ConditionParameter: None,
      ConditionPrintType: MeetupConditionPrintType::None,
    }
  }
}
impl EventContentMeetupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentMeetupExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let CharacterId = self.CharacterId;
    let ConditionScenarioGroupId = self.ConditionScenarioGroupId;
    let ConditionType = self.ConditionType;
    let ConditionParameter = self.ConditionParameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ConditionPrintType = self.ConditionPrintType;
    EventContentMeetupExcel::create(_fbb, &EventContentMeetupExcelArgs{
      Id,
      EventContentId,
      CharacterId,
      ConditionScenarioGroupId,
      ConditionType,
      ConditionParameter,
      ConditionPrintType,
    })
  }
}
