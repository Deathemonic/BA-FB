// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AcademyFavorScheduleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AcademyFavorScheduleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AcademyFavorScheduleExcel<'a> {
  type Inner = AcademyFavorScheduleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AcademyFavorScheduleExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 6;
  pub const VT_SCHEDULEGROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_ORDERINGROUP: flatbuffers::VOffsetT = 10;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 12;
  pub const VT_LOCALIZESCENARIOID: flatbuffers::VOffsetT = 14;
  pub const VT_FAVORRANK: flatbuffers::VOffsetT = 16;
  pub const VT_SECRETSTONEAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_SCENARIOSRIPTGROUPID: flatbuffers::VOffsetT = 20;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 24;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AcademyFavorScheduleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AcademyFavorScheduleExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AcademyFavorScheduleExcel<'bldr>> {
    let mut builder = AcademyFavorScheduleExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AcademyFavorSchedule");
      let x = args.ScenarioSriptGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioSriptGroupId(x);
      let x = args.SecretStoneAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SecretStoneAmount(x);
      let x = args.FavorRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FavorRank(x);
      let x = args.OrderInGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OrderInGroup(x);
      let x = args.ScheduleGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScheduleGroupId(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.RewardAmount {
        builder.add_RewardAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      let x = args.LocalizeScenarioId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeScenarioId(x);
      if let Some(x) = args.Location {
        builder.add_Location(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> AcademyFavorScheduleExcelT {
    let key = table_encryption_service::create_key(b"AcademyFavorSchedule");
      let Id = self.Id();
      let CharacterId = self.CharacterId();
      let ScheduleGroupId = self.ScheduleGroupId();
      let OrderInGroup = self.OrderInGroup();
    let Location = self.Location().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeScenarioId = self.LocalizeScenarioId();
      let FavorRank = self.FavorRank();
      let SecretStoneAmount = self.SecretStoneAmount();
      let ScenarioSriptGroupId = self.ScenarioSriptGroupId();
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardAmount = self.RewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    AcademyFavorScheduleExcelT {
      Id,
      CharacterId,
      ScheduleGroupId,
      OrderInGroup,
      Location,
      LocalizeScenarioId,
      FavorRank,
      SecretStoneAmount,
      ScenarioSriptGroupId,
      RewardParcelType,
      RewardParcelId,
      RewardAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScheduleGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_SCHEDULEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OrderInGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_ORDERINGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Location(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyFavorScheduleExcel::VT_LOCATION, None)}
  }
  #[inline]
  pub fn LocalizeScenarioId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AcademyFavorScheduleExcel::VT_LOCALIZESCENARIOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_FAVORRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SecretStoneAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_SECRETSTONEAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioSriptGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_SCENARIOSRIPTGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(AcademyFavorScheduleExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AcademyFavorScheduleExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AcademyFavorScheduleExcel::VT_REWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for AcademyFavorScheduleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<i64>("ScheduleGroupId", Self::VT_SCHEDULEGROUPID, false)?
     .visit_field::<i64>("OrderInGroup", Self::VT_ORDERINGROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Location", Self::VT_LOCATION, false)?
     .visit_field::<u32>("LocalizeScenarioId", Self::VT_LOCALIZESCENARIOID, false)?
     .visit_field::<i64>("FavorRank", Self::VT_FAVORRANK, false)?
     .visit_field::<i64>("SecretStoneAmount", Self::VT_SECRETSTONEAMOUNT, false)?
     .visit_field::<i64>("ScenarioSriptGroupId", Self::VT_SCENARIOSRIPTGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardAmount", Self::VT_REWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct AcademyFavorScheduleExcelArgs<'a> {
    pub Id: i64,
    pub CharacterId: i64,
    pub ScheduleGroupId: i64,
    pub OrderInGroup: i64,
    pub Location: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeScenarioId: u32,
    pub FavorRank: i64,
    pub SecretStoneAmount: i64,
    pub ScenarioSriptGroupId: i64,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for AcademyFavorScheduleExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AcademyFavorScheduleExcelArgs {
      Id: 0,
      CharacterId: 0,
      ScheduleGroupId: 0,
      OrderInGroup: 0,
      Location: None,
      LocalizeScenarioId: 0,
      FavorRank: 0,
      SecretStoneAmount: 0,
      ScenarioSriptGroupId: 0,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardAmount: None,
    }
  }
}

impl Serialize for AcademyFavorScheduleExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AcademyFavorScheduleExcel", 12)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("ScheduleGroupId", &self.ScheduleGroupId())?;
      s.serialize_field("OrderInGroup", &self.OrderInGroup())?;
      if let Some(f) = self.Location() {
        s.serialize_field("Location", &f)?;
      } else {
        s.skip_field("Location")?;
      }
      s.serialize_field("LocalizeScenarioId", &self.LocalizeScenarioId())?;
      s.serialize_field("FavorRank", &self.FavorRank())?;
      s.serialize_field("SecretStoneAmount", &self.SecretStoneAmount())?;
      s.serialize_field("ScenarioSriptGroupId", &self.ScenarioSriptGroupId())?;
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardAmount() {
        s.serialize_field("RewardAmount", &f)?;
      } else {
        s.skip_field("RewardAmount")?;
      }
    s.end()
  }
}

pub struct AcademyFavorScheduleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AcademyFavorScheduleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_ScheduleGroupId(&mut self, ScheduleGroupId: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_SCHEDULEGROUPID, ScheduleGroupId, 0);
  }
  #[inline]
  pub fn add_OrderInGroup(&mut self, OrderInGroup: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_ORDERINGROUP, OrderInGroup, 0);
  }
  #[inline]
  pub fn add_Location(&mut self, Location: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_LOCATION, Location);
  }
  #[inline]
  pub fn add_LocalizeScenarioId(&mut self, LocalizeScenarioId: u32) {
    self.fbb_.push_slot::<u32>(AcademyFavorScheduleExcel::VT_LOCALIZESCENARIOID, LocalizeScenarioId, 0);
  }
  #[inline]
  pub fn add_FavorRank(&mut self, FavorRank: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_FAVORRANK, FavorRank, 0);
  }
  #[inline]
  pub fn add_SecretStoneAmount(&mut self, SecretStoneAmount: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_SECRETSTONEAMOUNT, SecretStoneAmount, 0);
  }
  #[inline]
  pub fn add_ScenarioSriptGroupId(&mut self, ScenarioSriptGroupId: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_SCENARIOSRIPTGROUPID, ScenarioSriptGroupId, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardAmount(&mut self, RewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_REWARDAMOUNT, RewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AcademyFavorScheduleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AcademyFavorScheduleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AcademyFavorScheduleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AcademyFavorScheduleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AcademyFavorScheduleExcel");
      ds.field("Id", &self.Id());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("ScheduleGroupId", &self.ScheduleGroupId());
      ds.field("OrderInGroup", &self.OrderInGroup());
      ds.field("Location", &self.Location());
      ds.field("LocalizeScenarioId", &self.LocalizeScenarioId());
      ds.field("FavorRank", &self.FavorRank());
      ds.field("SecretStoneAmount", &self.SecretStoneAmount());
      ds.field("ScenarioSriptGroupId", &self.ScenarioSriptGroupId());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardAmount", &self.RewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AcademyFavorScheduleExcelT {
  pub Id: i64,
  pub CharacterId: i64,
  pub ScheduleGroupId: i64,
  pub OrderInGroup: i64,
  pub Location: Option<String>,
  pub LocalizeScenarioId: u32,
  pub FavorRank: i64,
  pub SecretStoneAmount: i64,
  pub ScenarioSriptGroupId: i64,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardAmount: Option<Vec<i64>>,
}
impl Default for AcademyFavorScheduleExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CharacterId: 0,
      ScheduleGroupId: 0,
      OrderInGroup: 0,
      Location: None,
      LocalizeScenarioId: 0,
      FavorRank: 0,
      SecretStoneAmount: 0,
      ScenarioSriptGroupId: 0,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardAmount: None,
    }
  }
}
impl AcademyFavorScheduleExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AcademyFavorScheduleExcel<'b>> {
    let Id = self.Id;
    let CharacterId = self.CharacterId;
    let ScheduleGroupId = self.ScheduleGroupId;
    let OrderInGroup = self.OrderInGroup;
    let Location = self.Location.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeScenarioId = self.LocalizeScenarioId;
    let FavorRank = self.FavorRank;
    let SecretStoneAmount = self.SecretStoneAmount;
    let ScenarioSriptGroupId = self.ScenarioSriptGroupId;
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardAmount = self.RewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    AcademyFavorScheduleExcel::create(_fbb, &AcademyFavorScheduleExcelArgs{
      Id,
      CharacterId,
      ScheduleGroupId,
      OrderInGroup,
      Location,
      LocalizeScenarioId,
      FavorRank,
      SecretStoneAmount,
      ScenarioSriptGroupId,
      RewardParcelType,
      RewardParcelId,
      RewardAmount,
    })
  }
}
