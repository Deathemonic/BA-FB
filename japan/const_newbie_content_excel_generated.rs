// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstNewbieContentExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstNewbieContentExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstNewbieContentExcel<'a> {
  type Inner = ConstNewbieContentExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstNewbieContentExcel<'a> {
  pub const VT_NEWBIEGACHARELEASEDATE: flatbuffers::VOffsetT = 4;
  pub const VT_NEWBIEGACHACHECKDAYS: flatbuffers::VOffsetT = 6;
  pub const VT_NEWBIEGACHATOKENGRACETIME: flatbuffers::VOffsetT = 8;
  pub const VT_NEWBIEATTENDANCERELEASEDATE: flatbuffers::VOffsetT = 10;
  pub const VT_NEWBIEATTENDANCESTARTABLEENDDAY: flatbuffers::VOffsetT = 12;
  pub const VT_NEWBIEATTENDANCEENDDAY: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstNewbieContentExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstNewbieContentExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConstNewbieContentExcel<'bldr>> {
    let mut builder = ConstNewbieContentExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstNewbieContent");
      let x = args.NewbieAttendanceEndDay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NewbieAttendanceEndDay(x);
      let x = args.NewbieAttendanceStartableEndDay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NewbieAttendanceStartableEndDay(x);
      if let Some(x) = args.NewbieAttendanceReleaseDate {
        builder.add_NewbieAttendanceReleaseDate(x);
      }
      let x = args.NewbieGachaTokenGraceTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NewbieGachaTokenGraceTime(x);
      let x = args.NewbieGachaCheckDays;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NewbieGachaCheckDays(x);
      if let Some(x) = args.NewbieGachaReleaseDate {
        builder.add_NewbieGachaReleaseDate(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ConstNewbieContentExcelT {
    let key = table_encryption_service::create_key(b"ConstNewbieContent");
    let NewbieGachaReleaseDate = self.NewbieGachaReleaseDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let NewbieGachaCheckDays = self.NewbieGachaCheckDays();
      let NewbieGachaTokenGraceTime = self.NewbieGachaTokenGraceTime();
    let NewbieAttendanceReleaseDate = self.NewbieAttendanceReleaseDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let NewbieAttendanceStartableEndDay = self.NewbieAttendanceStartableEndDay();
      let NewbieAttendanceEndDay = self.NewbieAttendanceEndDay();
    ConstNewbieContentExcelT {
      NewbieGachaReleaseDate,
      NewbieGachaCheckDays,
      NewbieGachaTokenGraceTime,
      NewbieAttendanceReleaseDate,
      NewbieAttendanceStartableEndDay,
      NewbieAttendanceEndDay,
    }
  }

  #[inline]
  pub fn NewbieGachaReleaseDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstNewbieContentExcel::VT_NEWBIEGACHARELEASEDATE, None)}
  }
  #[inline]
  pub fn NewbieGachaCheckDays(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstNewbieContentExcel::VT_NEWBIEGACHACHECKDAYS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NewbieGachaTokenGraceTime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstNewbieContentExcel::VT_NEWBIEGACHATOKENGRACETIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NewbieAttendanceReleaseDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstNewbieContentExcel::VT_NEWBIEATTENDANCERELEASEDATE, None)}
  }
  #[inline]
  pub fn NewbieAttendanceStartableEndDay(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstNewbieContentExcel::VT_NEWBIEATTENDANCESTARTABLEENDDAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NewbieAttendanceEndDay(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstNewbieContentExcel::VT_NEWBIEATTENDANCEENDDAY, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConstNewbieContentExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NewbieGachaReleaseDate", Self::VT_NEWBIEGACHARELEASEDATE, false)?
     .visit_field::<i32>("NewbieGachaCheckDays", Self::VT_NEWBIEGACHACHECKDAYS, false)?
     .visit_field::<i32>("NewbieGachaTokenGraceTime", Self::VT_NEWBIEGACHATOKENGRACETIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NewbieAttendanceReleaseDate", Self::VT_NEWBIEATTENDANCERELEASEDATE, false)?
     .visit_field::<i32>("NewbieAttendanceStartableEndDay", Self::VT_NEWBIEATTENDANCESTARTABLEENDDAY, false)?
     .visit_field::<i32>("NewbieAttendanceEndDay", Self::VT_NEWBIEATTENDANCEENDDAY, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstNewbieContentExcelArgs<'a> {
    pub NewbieGachaReleaseDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NewbieGachaCheckDays: i32,
    pub NewbieGachaTokenGraceTime: i32,
    pub NewbieAttendanceReleaseDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NewbieAttendanceStartableEndDay: i32,
    pub NewbieAttendanceEndDay: i32,
}
impl<'a> Default for ConstNewbieContentExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConstNewbieContentExcelArgs {
      NewbieGachaReleaseDate: None,
      NewbieGachaCheckDays: 0,
      NewbieGachaTokenGraceTime: 0,
      NewbieAttendanceReleaseDate: None,
      NewbieAttendanceStartableEndDay: 0,
      NewbieAttendanceEndDay: 0,
    }
  }
}

impl Serialize for ConstNewbieContentExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstNewbieContentExcel", 6)?;
      if let Some(f) = self.NewbieGachaReleaseDate() {
        s.serialize_field("NewbieGachaReleaseDate", &f)?;
      } else {
        s.skip_field("NewbieGachaReleaseDate")?;
      }
      s.serialize_field("NewbieGachaCheckDays", &self.NewbieGachaCheckDays())?;
      s.serialize_field("NewbieGachaTokenGraceTime", &self.NewbieGachaTokenGraceTime())?;
      if let Some(f) = self.NewbieAttendanceReleaseDate() {
        s.serialize_field("NewbieAttendanceReleaseDate", &f)?;
      } else {
        s.skip_field("NewbieAttendanceReleaseDate")?;
      }
      s.serialize_field("NewbieAttendanceStartableEndDay", &self.NewbieAttendanceStartableEndDay())?;
      s.serialize_field("NewbieAttendanceEndDay", &self.NewbieAttendanceEndDay())?;
    s.end()
  }
}

pub struct ConstNewbieContentExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstNewbieContentExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_NewbieGachaReleaseDate(&mut self, NewbieGachaReleaseDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstNewbieContentExcel::VT_NEWBIEGACHARELEASEDATE, NewbieGachaReleaseDate);
  }
  #[inline]
  pub fn add_NewbieGachaCheckDays(&mut self, NewbieGachaCheckDays: i32) {
    self.fbb_.push_slot::<i32>(ConstNewbieContentExcel::VT_NEWBIEGACHACHECKDAYS, NewbieGachaCheckDays, 0);
  }
  #[inline]
  pub fn add_NewbieGachaTokenGraceTime(&mut self, NewbieGachaTokenGraceTime: i32) {
    self.fbb_.push_slot::<i32>(ConstNewbieContentExcel::VT_NEWBIEGACHATOKENGRACETIME, NewbieGachaTokenGraceTime, 0);
  }
  #[inline]
  pub fn add_NewbieAttendanceReleaseDate(&mut self, NewbieAttendanceReleaseDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstNewbieContentExcel::VT_NEWBIEATTENDANCERELEASEDATE, NewbieAttendanceReleaseDate);
  }
  #[inline]
  pub fn add_NewbieAttendanceStartableEndDay(&mut self, NewbieAttendanceStartableEndDay: i32) {
    self.fbb_.push_slot::<i32>(ConstNewbieContentExcel::VT_NEWBIEATTENDANCESTARTABLEENDDAY, NewbieAttendanceStartableEndDay, 0);
  }
  #[inline]
  pub fn add_NewbieAttendanceEndDay(&mut self, NewbieAttendanceEndDay: i32) {
    self.fbb_.push_slot::<i32>(ConstNewbieContentExcel::VT_NEWBIEATTENDANCEENDDAY, NewbieAttendanceEndDay, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstNewbieContentExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstNewbieContentExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstNewbieContentExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstNewbieContentExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstNewbieContentExcel");
      ds.field("NewbieGachaReleaseDate", &self.NewbieGachaReleaseDate());
      ds.field("NewbieGachaCheckDays", &self.NewbieGachaCheckDays());
      ds.field("NewbieGachaTokenGraceTime", &self.NewbieGachaTokenGraceTime());
      ds.field("NewbieAttendanceReleaseDate", &self.NewbieAttendanceReleaseDate());
      ds.field("NewbieAttendanceStartableEndDay", &self.NewbieAttendanceStartableEndDay());
      ds.field("NewbieAttendanceEndDay", &self.NewbieAttendanceEndDay());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstNewbieContentExcelT {
  pub NewbieGachaReleaseDate: Option<String>,
  pub NewbieGachaCheckDays: i32,
  pub NewbieGachaTokenGraceTime: i32,
  pub NewbieAttendanceReleaseDate: Option<String>,
  pub NewbieAttendanceStartableEndDay: i32,
  pub NewbieAttendanceEndDay: i32,
}
impl Default for ConstNewbieContentExcelT {
  fn default() -> Self {
    Self {
      NewbieGachaReleaseDate: None,
      NewbieGachaCheckDays: 0,
      NewbieGachaTokenGraceTime: 0,
      NewbieAttendanceReleaseDate: None,
      NewbieAttendanceStartableEndDay: 0,
      NewbieAttendanceEndDay: 0,
    }
  }
}
impl ConstNewbieContentExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstNewbieContentExcel<'b>> {
    let NewbieGachaReleaseDate = self.NewbieGachaReleaseDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NewbieGachaCheckDays = self.NewbieGachaCheckDays;
    let NewbieGachaTokenGraceTime = self.NewbieGachaTokenGraceTime;
    let NewbieAttendanceReleaseDate = self.NewbieAttendanceReleaseDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NewbieAttendanceStartableEndDay = self.NewbieAttendanceStartableEndDay;
    let NewbieAttendanceEndDay = self.NewbieAttendanceEndDay;
    ConstNewbieContentExcel::create(_fbb, &ConstNewbieContentExcelArgs{
      NewbieGachaReleaseDate,
      NewbieGachaCheckDays,
      NewbieGachaTokenGraceTime,
      NewbieAttendanceReleaseDate,
      NewbieAttendanceStartableEndDay,
      NewbieAttendanceEndDay,
    })
  }
}
