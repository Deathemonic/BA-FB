// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TrophyCollectionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TrophyCollectionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrophyCollectionExcel<'a> {
  type Inner = TrophyCollectionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TrophyCollectionExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZECODEID: flatbuffers::VOffsetT = 6;
  pub const VT_FURNITUREID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrophyCollectionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TrophyCollectionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TrophyCollectionExcel<'bldr>> {
    let mut builder = TrophyCollectionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TrophyCollection");
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      if let Some(x) = args.FurnitureId {
        builder.add_FurnitureId(x);
      }
      let x = args.LocalizeCodeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeCodeId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TrophyCollectionExcelT {
    let key = table_encryption_service::create_key(b"TrophyCollection");
      let GroupId = self.GroupId();
      let LocalizeCodeId = self.LocalizeCodeId();
    let FurnitureId = self.FurnitureId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    TrophyCollectionExcelT {
      GroupId,
      LocalizeCodeId,
      FurnitureId,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TrophyCollectionExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCodeId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TrophyCollectionExcel::VT_LOCALIZECODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FurnitureId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TrophyCollectionExcel::VT_FURNITUREID, None)}
  }
}

impl flatbuffers::Verifiable for TrophyCollectionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<u32>("LocalizeCodeId", Self::VT_LOCALIZECODEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("FurnitureId", Self::VT_FURNITUREID, false)?
     .finish();
    Ok(())
  }
}
pub struct TrophyCollectionExcelArgs<'a> {
    pub GroupId: i64,
    pub LocalizeCodeId: u32,
    pub FurnitureId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for TrophyCollectionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrophyCollectionExcelArgs {
      GroupId: 0,
      LocalizeCodeId: 0,
      FurnitureId: None,
    }
  }
}

impl Serialize for TrophyCollectionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TrophyCollectionExcel", 3)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("LocalizeCodeId", &self.LocalizeCodeId())?;
      if let Some(f) = self.FurnitureId() {
        s.serialize_field("FurnitureId", &f)?;
      } else {
        s.skip_field("FurnitureId")?;
      }
    s.end()
  }
}

pub struct TrophyCollectionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TrophyCollectionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(TrophyCollectionExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_LocalizeCodeId(&mut self, LocalizeCodeId: u32) {
    self.fbb_.push_slot::<u32>(TrophyCollectionExcel::VT_LOCALIZECODEID, LocalizeCodeId, 0);
  }
  #[inline]
  pub fn add_FurnitureId(&mut self, FurnitureId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrophyCollectionExcel::VT_FURNITUREID, FurnitureId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TrophyCollectionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TrophyCollectionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrophyCollectionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrophyCollectionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrophyCollectionExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("LocalizeCodeId", &self.LocalizeCodeId());
      ds.field("FurnitureId", &self.FurnitureId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TrophyCollectionExcelT {
  pub GroupId: i64,
  pub LocalizeCodeId: u32,
  pub FurnitureId: Option<Vec<i64>>,
}
impl Default for TrophyCollectionExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      LocalizeCodeId: 0,
      FurnitureId: None,
    }
  }
}
impl TrophyCollectionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TrophyCollectionExcel<'b>> {
    let GroupId = self.GroupId;
    let LocalizeCodeId = self.LocalizeCodeId;
    let FurnitureId = self.FurnitureId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    TrophyCollectionExcel::create(_fbb, &TrophyCollectionExcelArgs{
      GroupId,
      LocalizeCodeId,
      FurnitureId,
    })
  }
}
