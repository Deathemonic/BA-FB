// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VoiceRoomExceptionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VoiceRoomExceptionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VoiceRoomExceptionExcel<'a> {
  type Inner = VoiceRoomExceptionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VoiceRoomExceptionExcel<'a> {
  pub const VT_COSTUMEUNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_LINKEDCHARACTERVOICEPRINTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_LINKEDCOSTUMEUNIQUEID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VoiceRoomExceptionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VoiceRoomExceptionExcelArgs
  ) -> flatbuffers::WIPOffset<VoiceRoomExceptionExcel<'bldr>> {
    let mut builder = VoiceRoomExceptionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"VoiceRoomException");
      let x = args.LinkedCostumeUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LinkedCostumeUniqueId(x);
      let x = args.CostumeUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeUniqueId(x);
      let x = args.LinkedCharacterVoicePrintType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_LinkedCharacterVoicePrintType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> VoiceRoomExceptionExcelT {
    let key = table_encryption_service::create_key(b"VoiceRoomException");
      let CostumeUniqueId = self.CostumeUniqueId();
      let LinkedCharacterVoicePrintType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.LinkedCharacterVoicePrintType(), &key)
      } else {
        self.LinkedCharacterVoicePrintType()
      };
      let LinkedCostumeUniqueId = self.LinkedCostumeUniqueId();
    VoiceRoomExceptionExcelT {
      CostumeUniqueId,
      LinkedCharacterVoicePrintType,
      LinkedCostumeUniqueId,
    }
  }

  #[inline]
  pub fn CostumeUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(VoiceRoomExceptionExcel::VT_COSTUMEUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LinkedCharacterVoicePrintType(&self) -> CVPrintType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CVPrintType>(VoiceRoomExceptionExcel::VT_LINKEDCHARACTERVOICEPRINTTYPE, Some(CVPrintType::CharacterOverwrite)).unwrap()}
  }
  #[inline]
  pub fn LinkedCostumeUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(VoiceRoomExceptionExcel::VT_LINKEDCOSTUMEUNIQUEID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for VoiceRoomExceptionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CostumeUniqueId", Self::VT_COSTUMEUNIQUEID, false)?
     .visit_field::<CVPrintType>("LinkedCharacterVoicePrintType", Self::VT_LINKEDCHARACTERVOICEPRINTTYPE, false)?
     .visit_field::<i64>("LinkedCostumeUniqueId", Self::VT_LINKEDCOSTUMEUNIQUEID, false)?
     .finish();
    Ok(())
  }
}
pub struct VoiceRoomExceptionExcelArgs {
    pub CostumeUniqueId: i64,
    pub LinkedCharacterVoicePrintType: CVPrintType,
    pub LinkedCostumeUniqueId: i64,
}
impl<'a> Default for VoiceRoomExceptionExcelArgs {
  #[inline]
  fn default() -> Self {
    VoiceRoomExceptionExcelArgs {
      CostumeUniqueId: 0,
      LinkedCharacterVoicePrintType: CVPrintType::CharacterOverwrite,
      LinkedCostumeUniqueId: 0,
    }
  }
}

impl Serialize for VoiceRoomExceptionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VoiceRoomExceptionExcel", 3)?;
      s.serialize_field("CostumeUniqueId", &self.CostumeUniqueId())?;
      s.serialize_field("LinkedCharacterVoicePrintType", &self.LinkedCharacterVoicePrintType())?;
      s.serialize_field("LinkedCostumeUniqueId", &self.LinkedCostumeUniqueId())?;
    s.end()
  }
}

pub struct VoiceRoomExceptionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VoiceRoomExceptionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CostumeUniqueId(&mut self, CostumeUniqueId: i64) {
    self.fbb_.push_slot::<i64>(VoiceRoomExceptionExcel::VT_COSTUMEUNIQUEID, CostumeUniqueId, 0);
  }
  #[inline]
  pub fn add_LinkedCharacterVoicePrintType(&mut self, LinkedCharacterVoicePrintType: CVPrintType) {
    self.fbb_.push_slot::<CVPrintType>(VoiceRoomExceptionExcel::VT_LINKEDCHARACTERVOICEPRINTTYPE, LinkedCharacterVoicePrintType, CVPrintType::CharacterOverwrite);
  }
  #[inline]
  pub fn add_LinkedCostumeUniqueId(&mut self, LinkedCostumeUniqueId: i64) {
    self.fbb_.push_slot::<i64>(VoiceRoomExceptionExcel::VT_LINKEDCOSTUMEUNIQUEID, LinkedCostumeUniqueId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VoiceRoomExceptionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VoiceRoomExceptionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VoiceRoomExceptionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VoiceRoomExceptionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VoiceRoomExceptionExcel");
      ds.field("CostumeUniqueId", &self.CostumeUniqueId());
      ds.field("LinkedCharacterVoicePrintType", &self.LinkedCharacterVoicePrintType());
      ds.field("LinkedCostumeUniqueId", &self.LinkedCostumeUniqueId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VoiceRoomExceptionExcelT {
  pub CostumeUniqueId: i64,
  pub LinkedCharacterVoicePrintType: CVPrintType,
  pub LinkedCostumeUniqueId: i64,
}
impl Default for VoiceRoomExceptionExcelT {
  fn default() -> Self {
    Self {
      CostumeUniqueId: 0,
      LinkedCharacterVoicePrintType: CVPrintType::CharacterOverwrite,
      LinkedCostumeUniqueId: 0,
    }
  }
}
impl VoiceRoomExceptionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<VoiceRoomExceptionExcel<'b>> {
    let CostumeUniqueId = self.CostumeUniqueId;
    let LinkedCharacterVoicePrintType = self.LinkedCharacterVoicePrintType;
    let LinkedCostumeUniqueId = self.LinkedCostumeUniqueId;
    VoiceRoomExceptionExcel::create(_fbb, &VoiceRoomExceptionExcelArgs{
      CostumeUniqueId,
      LinkedCharacterVoicePrintType,
      LinkedCostumeUniqueId,
    })
  }
}
