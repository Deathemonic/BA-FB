// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TimeAttackDungeonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TimeAttackDungeonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TimeAttackDungeonExcel<'a> {
  type Inner = TimeAttackDungeonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TimeAttackDungeonExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TIMEATTACKDUNGEONTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEETCKEY: flatbuffers::VOffsetT = 8;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 10;
  pub const VT_INFORMATIONGROUPID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TimeAttackDungeonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TimeAttackDungeonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonExcel<'bldr>> {
    let mut builder = TimeAttackDungeonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TimeAttackDungeon");
      let x = args.InformationGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_InformationGroupID(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      let x = args.LocalizeEtcKey;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcKey(x);
      let x = args.TimeAttackDungeonType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TimeAttackDungeonType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TimeAttackDungeonExcelT {
    let key = table_encryption_service::create_key(b"TimeAttackDungeon");
      let Id = self.Id();
      let TimeAttackDungeonType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TimeAttackDungeonType(), &key)
      } else {
        self.TimeAttackDungeonType()
      };
      let LocalizeEtcKey = self.LocalizeEtcKey();
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let InformationGroupID = self.InformationGroupID();
    TimeAttackDungeonExcelT {
      Id,
      TimeAttackDungeonType,
      LocalizeEtcKey,
      IconPath,
      InformationGroupID,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TimeAttackDungeonType(&self) -> TimeAttackDungeonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TimeAttackDungeonType>(TimeAttackDungeonExcel::VT_TIMEATTACKDUNGEONTYPE, Some(TimeAttackDungeonType::None)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcKey(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TimeAttackDungeonExcel::VT_LOCALIZEETCKEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TimeAttackDungeonExcel::VT_ICONPATH, None)}
  }
  #[inline]
  pub fn InformationGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonExcel::VT_INFORMATIONGROUPID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TimeAttackDungeonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<TimeAttackDungeonType>("TimeAttackDungeonType", Self::VT_TIMEATTACKDUNGEONTYPE, false)?
     .visit_field::<u32>("LocalizeEtcKey", Self::VT_LOCALIZEETCKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .visit_field::<i64>("InformationGroupID", Self::VT_INFORMATIONGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct TimeAttackDungeonExcelArgs<'a> {
    pub Id: i64,
    pub TimeAttackDungeonType: TimeAttackDungeonType,
    pub LocalizeEtcKey: u32,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub InformationGroupID: i64,
}
impl<'a> Default for TimeAttackDungeonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TimeAttackDungeonExcelArgs {
      Id: 0,
      TimeAttackDungeonType: TimeAttackDungeonType::None,
      LocalizeEtcKey: 0,
      IconPath: None,
      InformationGroupID: 0,
    }
  }
}

impl Serialize for TimeAttackDungeonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TimeAttackDungeonExcel", 5)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("TimeAttackDungeonType", &self.TimeAttackDungeonType())?;
      s.serialize_field("LocalizeEtcKey", &self.LocalizeEtcKey())?;
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
      s.serialize_field("InformationGroupID", &self.InformationGroupID())?;
    s.end()
  }
}

pub struct TimeAttackDungeonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TimeAttackDungeonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_TimeAttackDungeonType(&mut self, TimeAttackDungeonType: TimeAttackDungeonType) {
    self.fbb_.push_slot::<TimeAttackDungeonType>(TimeAttackDungeonExcel::VT_TIMEATTACKDUNGEONTYPE, TimeAttackDungeonType, TimeAttackDungeonType::None);
  }
  #[inline]
  pub fn add_LocalizeEtcKey(&mut self, LocalizeEtcKey: u32) {
    self.fbb_.push_slot::<u32>(TimeAttackDungeonExcel::VT_LOCALIZEETCKEY, LocalizeEtcKey, 0);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn add_InformationGroupID(&mut self, InformationGroupID: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonExcel::VT_INFORMATIONGROUPID, InformationGroupID, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TimeAttackDungeonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TimeAttackDungeonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TimeAttackDungeonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TimeAttackDungeonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TimeAttackDungeonExcel");
      ds.field("Id", &self.Id());
      ds.field("TimeAttackDungeonType", &self.TimeAttackDungeonType());
      ds.field("LocalizeEtcKey", &self.LocalizeEtcKey());
      ds.field("IconPath", &self.IconPath());
      ds.field("InformationGroupID", &self.InformationGroupID());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TimeAttackDungeonExcelT {
  pub Id: i64,
  pub TimeAttackDungeonType: TimeAttackDungeonType,
  pub LocalizeEtcKey: u32,
  pub IconPath: Option<String>,
  pub InformationGroupID: i64,
}
impl Default for TimeAttackDungeonExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      TimeAttackDungeonType: TimeAttackDungeonType::None,
      LocalizeEtcKey: 0,
      IconPath: None,
      InformationGroupID: 0,
    }
  }
}
impl TimeAttackDungeonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonExcel<'b>> {
    let Id = self.Id;
    let TimeAttackDungeonType = self.TimeAttackDungeonType;
    let LocalizeEtcKey = self.LocalizeEtcKey;
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let InformationGroupID = self.InformationGroupID;
    TimeAttackDungeonExcel::create(_fbb, &TimeAttackDungeonExcelArgs{
      Id,
      TimeAttackDungeonType,
      LocalizeEtcKey,
      IconPath,
      InformationGroupID,
    })
  }
}
