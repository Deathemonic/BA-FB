// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocalizeCCGExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeCCGExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeCCGExcel<'a> {
  type Inner = LocalizeCCGExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeCCGExcel<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_KR: flatbuffers::VOffsetT = 6;
  pub const VT_JP: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeCCGExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeCCGExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeCCGExcel<'bldr>> {
    let mut builder = LocalizeCCGExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LocalizeCCG");
      if let Some(x) = args.Jp {
        builder.add_Jp(x);
      }
      if let Some(x) = args.kr {
        builder.add_kr(x);
      }
      let x = args.Key;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Key(x);
    builder.finish()
  }

  pub fn unpack(&self) -> LocalizeCCGExcelT {
    let key = table_encryption_service::create_key(b"LocalizeCCG");
      let Key = self.Key();
    let kr = self.kr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Jp = self.Jp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    LocalizeCCGExcelT {
      Key,
      kr,
      Jp,
    }
  }

  #[inline]
  pub fn Key(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(LocalizeCCGExcel::VT_KEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCCGExcel::VT_KR, None)}
  }
  #[inline]
  pub fn Jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCCGExcel::VT_JP, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeCCGExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("kr", Self::VT_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Jp", Self::VT_JP, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeCCGExcelArgs<'a> {
    pub Key: u32,
    pub kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Jp: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocalizeCCGExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeCCGExcelArgs {
      Key: 0,
      kr: None,
      Jp: None,
    }
  }
}

impl Serialize for LocalizeCCGExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LocalizeCCGExcel", 3)?;
      s.serialize_field("Key", &self.Key())?;
      if let Some(f) = self.kr() {
        s.serialize_field("kr", &f)?;
      } else {
        s.skip_field("kr")?;
      }
      if let Some(f) = self.Jp() {
        s.serialize_field("Jp", &f)?;
      } else {
        s.skip_field("Jp")?;
      }
    s.end()
  }
}

pub struct LocalizeCCGExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeCCGExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Key(&mut self, Key: u32) {
    self.fbb_.push_slot::<u32>(LocalizeCCGExcel::VT_KEY, Key, 0);
  }
  #[inline]
  pub fn add_kr(&mut self, kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCCGExcel::VT_KR, kr);
  }
  #[inline]
  pub fn add_Jp(&mut self, Jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCCGExcel::VT_JP, Jp);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeCCGExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeCCGExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeCCGExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeCCGExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeCCGExcel");
      ds.field("Key", &self.Key());
      ds.field("kr", &self.kr());
      ds.field("Jp", &self.Jp());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LocalizeCCGExcelT {
  pub Key: u32,
  pub kr: Option<String>,
  pub Jp: Option<String>,
}
impl Default for LocalizeCCGExcelT {
  fn default() -> Self {
    Self {
      Key: 0,
      kr: None,
      Jp: None,
    }
  }
}
impl LocalizeCCGExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LocalizeCCGExcel<'b>> {
    let Key = self.Key;
    let kr = self.kr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Jp = self.Jp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LocalizeCCGExcel::create(_fbb, &LocalizeCCGExcelArgs{
      Key,
      kr,
      Jp,
    })
  }
}
