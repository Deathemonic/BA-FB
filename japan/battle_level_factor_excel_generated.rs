// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BattleLevelFactorExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BattleLevelFactorExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BattleLevelFactorExcel<'a> {
  type Inner = BattleLevelFactorExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BattleLevelFactorExcel<'a> {
  pub const VT_LEVELDIFF: flatbuffers::VOffsetT = 4;
  pub const VT_DAMAGERATE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BattleLevelFactorExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BattleLevelFactorExcelArgs
  ) -> flatbuffers::WIPOffset<BattleLevelFactorExcel<'bldr>> {
    let mut builder = BattleLevelFactorExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BattleLevelFactor");
      let x = args.DamageRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamageRate(x);
      let x = args.LevelDiff;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_LevelDiff(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BattleLevelFactorExcelT {
    let key = table_encryption_service::create_key(b"BattleLevelFactor");
      let LevelDiff = self.LevelDiff();
      let DamageRate = self.DamageRate();
    BattleLevelFactorExcelT {
      LevelDiff,
      DamageRate,
    }
  }

  #[inline]
  pub fn LevelDiff(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattleLevelFactorExcel::VT_LEVELDIFF, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamageRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattleLevelFactorExcel::VT_DAMAGERATE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BattleLevelFactorExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("LevelDiff", Self::VT_LEVELDIFF, false)?
     .visit_field::<i64>("DamageRate", Self::VT_DAMAGERATE, false)?
     .finish();
    Ok(())
  }
}
pub struct BattleLevelFactorExcelArgs {
    pub LevelDiff: i32,
    pub DamageRate: i64,
}
impl<'a> Default for BattleLevelFactorExcelArgs {
  #[inline]
  fn default() -> Self {
    BattleLevelFactorExcelArgs {
      LevelDiff: 0,
      DamageRate: 0,
    }
  }
}

impl Serialize for BattleLevelFactorExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BattleLevelFactorExcel", 2)?;
      s.serialize_field("LevelDiff", &self.LevelDiff())?;
      s.serialize_field("DamageRate", &self.DamageRate())?;
    s.end()
  }
}

pub struct BattleLevelFactorExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BattleLevelFactorExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LevelDiff(&mut self, LevelDiff: i32) {
    self.fbb_.push_slot::<i32>(BattleLevelFactorExcel::VT_LEVELDIFF, LevelDiff, 0);
  }
  #[inline]
  pub fn add_DamageRate(&mut self, DamageRate: i64) {
    self.fbb_.push_slot::<i64>(BattleLevelFactorExcel::VT_DAMAGERATE, DamageRate, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BattleLevelFactorExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BattleLevelFactorExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BattleLevelFactorExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BattleLevelFactorExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BattleLevelFactorExcel");
      ds.field("LevelDiff", &self.LevelDiff());
      ds.field("DamageRate", &self.DamageRate());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BattleLevelFactorExcelT {
  pub LevelDiff: i32,
  pub DamageRate: i64,
}
impl Default for BattleLevelFactorExcelT {
  fn default() -> Self {
    Self {
      LevelDiff: 0,
      DamageRate: 0,
    }
  }
}
impl BattleLevelFactorExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BattleLevelFactorExcel<'b>> {
    let LevelDiff = self.LevelDiff;
    let DamageRate = self.DamageRate;
    BattleLevelFactorExcel::create(_fbb, &BattleLevelFactorExcelArgs{
      LevelDiff,
      DamageRate,
    })
  }
}
