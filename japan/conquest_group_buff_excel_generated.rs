// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestGroupBuffExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestGroupBuffExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestGroupBuffExcel<'a> {
  type Inner = ConquestGroupBuffExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestGroupBuffExcel<'a> {
  pub const VT_CONQUESTBUFFID: flatbuffers::VOffsetT = 4;
  pub const VT_SCHOOL: flatbuffers::VOffsetT = 6;
  pub const VT_RECOMMANDLOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_SKILLGROUPID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestGroupBuffExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestGroupBuffExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestGroupBuffExcel<'bldr>> {
    let mut builder = ConquestGroupBuffExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestGroupBuff");
      let x = args.ConquestBuffId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConquestBuffId(x);
      if let Some(x) = args.SkillGroupId {
        builder.add_SkillGroupId(x);
      }
      let x = args.RecommandLocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_RecommandLocalizeEtcId(x);
      if let Some(x) = args.School {
        builder.add_School(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestGroupBuffExcelT {
    let key = table_encryption_service::create_key(b"ConquestGroupBuff");
      let ConquestBuffId = self.ConquestBuffId();
    let School = self.School().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let RecommandLocalizeEtcId = self.RecommandLocalizeEtcId();
    let SkillGroupId = self.SkillGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ConquestGroupBuffExcelT {
      ConquestBuffId,
      School,
      RecommandLocalizeEtcId,
      SkillGroupId,
    }
  }

  #[inline]
  pub fn ConquestBuffId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestGroupBuffExcel::VT_CONQUESTBUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn School(&self) -> Option<flatbuffers::Vector<'a, School>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, School>>>(ConquestGroupBuffExcel::VT_SCHOOL, None)}
  }
  #[inline]
  pub fn RecommandLocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ConquestGroupBuffExcel::VT_RECOMMANDLOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkillGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestGroupBuffExcel::VT_SKILLGROUPID, None)}
  }
}

impl flatbuffers::Verifiable for ConquestGroupBuffExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ConquestBuffId", Self::VT_CONQUESTBUFFID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, School>>>("School", Self::VT_SCHOOL, false)?
     .visit_field::<u32>("RecommandLocalizeEtcId", Self::VT_RECOMMANDLOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillGroupId", Self::VT_SKILLGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestGroupBuffExcelArgs<'a> {
    pub ConquestBuffId: i64,
    pub School: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, School>>>,
    pub RecommandLocalizeEtcId: u32,
    pub SkillGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ConquestGroupBuffExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestGroupBuffExcelArgs {
      ConquestBuffId: 0,
      School: None,
      RecommandLocalizeEtcId: 0,
      SkillGroupId: None,
    }
  }
}

impl Serialize for ConquestGroupBuffExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestGroupBuffExcel", 4)?;
      s.serialize_field("ConquestBuffId", &self.ConquestBuffId())?;
      if let Some(f) = self.School() {
        s.serialize_field("School", &f)?;
      } else {
        s.skip_field("School")?;
      }
      s.serialize_field("RecommandLocalizeEtcId", &self.RecommandLocalizeEtcId())?;
      if let Some(f) = self.SkillGroupId() {
        s.serialize_field("SkillGroupId", &f)?;
      } else {
        s.skip_field("SkillGroupId")?;
      }
    s.end()
  }
}

pub struct ConquestGroupBuffExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestGroupBuffExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ConquestBuffId(&mut self, ConquestBuffId: i64) {
    self.fbb_.push_slot::<i64>(ConquestGroupBuffExcel::VT_CONQUESTBUFFID, ConquestBuffId, 0);
  }
  #[inline]
  pub fn add_School(&mut self, School: flatbuffers::WIPOffset<flatbuffers::Vector<'b , School>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBuffExcel::VT_SCHOOL, School);
  }
  #[inline]
  pub fn add_RecommandLocalizeEtcId(&mut self, RecommandLocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(ConquestGroupBuffExcel::VT_RECOMMANDLOCALIZEETCID, RecommandLocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_SkillGroupId(&mut self, SkillGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBuffExcel::VT_SKILLGROUPID, SkillGroupId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestGroupBuffExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestGroupBuffExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestGroupBuffExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestGroupBuffExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestGroupBuffExcel");
      ds.field("ConquestBuffId", &self.ConquestBuffId());
      ds.field("School", &self.School());
      ds.field("RecommandLocalizeEtcId", &self.RecommandLocalizeEtcId());
      ds.field("SkillGroupId", &self.SkillGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestGroupBuffExcelT {
  pub ConquestBuffId: i64,
  pub School: Option<Vec<School>>,
  pub RecommandLocalizeEtcId: u32,
  pub SkillGroupId: Option<String>,
}
impl Default for ConquestGroupBuffExcelT {
  fn default() -> Self {
    Self {
      ConquestBuffId: 0,
      School: None,
      RecommandLocalizeEtcId: 0,
      SkillGroupId: None,
    }
  }
}
impl ConquestGroupBuffExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestGroupBuffExcel<'b>> {
    let ConquestBuffId = self.ConquestBuffId;
    let School = self.School.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RecommandLocalizeEtcId = self.RecommandLocalizeEtcId;
    let SkillGroupId = self.SkillGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ConquestGroupBuffExcel::create(_fbb, &ConquestGroupBuffExcelArgs{
      ConquestBuffId,
      School,
      RecommandLocalizeEtcId,
      SkillGroupId,
    })
  }
}
