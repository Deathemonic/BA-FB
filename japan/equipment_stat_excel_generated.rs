// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EquipmentStatExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EquipmentStatExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EquipmentStatExcel<'a> {
  type Inner = EquipmentStatExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EquipmentStatExcel<'a> {
  pub const VT_EQUIPMENTID: flatbuffers::VOffsetT = 4;
  pub const VT_STATLEVELUPTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_STATTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_MINSTAT: flatbuffers::VOffsetT = 10;
  pub const VT_MAXSTAT: flatbuffers::VOffsetT = 12;
  pub const VT_LEVELUPINSERTLIMIT: flatbuffers::VOffsetT = 14;
  pub const VT_LEVELUPFEEDEXP: flatbuffers::VOffsetT = 16;
  pub const VT_LEVELUPFEEDCOSTCURRENCY: flatbuffers::VOffsetT = 18;
  pub const VT_LEVELUPFEEDCOSTAMOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_EQUIPMENTCATEGORY: flatbuffers::VOffsetT = 22;
  pub const VT_LEVELUPFEEDADDEXP: flatbuffers::VOffsetT = 24;
  pub const VT_DEFAULTMAXLEVEL: flatbuffers::VOffsetT = 26;
  pub const VT_TRANSCENDENCEMAX: flatbuffers::VOffsetT = 28;
  pub const VT_DAMAGEFACTORGROUPID: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EquipmentStatExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EquipmentStatExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EquipmentStatExcel<'bldr>> {
    let mut builder = EquipmentStatExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EquipmentStat");
      let x = args.LevelUpFeedAddExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LevelUpFeedAddExp(x);
      let x = args.LevelUpFeedCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LevelUpFeedCostAmount(x);
      let x = args.LevelUpFeedExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LevelUpFeedExp(x);
      let x = args.EquipmentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EquipmentId(x);
      if let Some(x) = args.DamageFactorGroupId {
        builder.add_DamageFactorGroupId(x);
      }
      let x = args.TranscendenceMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TranscendenceMax(x);
      let x = args.DefaultMaxLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DefaultMaxLevel(x);
      let x = args.EquipmentCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EquipmentCategory(x);
      let x = args.LevelUpFeedCostCurrency;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_LevelUpFeedCostCurrency(x);
      let x = args.LevelUpInsertLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_LevelUpInsertLimit(x);
      if let Some(x) = args.MaxStat {
        builder.add_MaxStat(x);
      }
      if let Some(x) = args.MinStat {
        builder.add_MinStat(x);
      }
      if let Some(x) = args.StatType {
        builder.add_StatType(x);
      }
      let x = args.StatLevelUpType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StatLevelUpType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EquipmentStatExcelT {
    let key = table_encryption_service::create_key(b"EquipmentStat");
      let EquipmentId = self.EquipmentId();
      let StatLevelUpType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StatLevelUpType(), &key)
      } else {
        self.StatLevelUpType()
      };
    let StatType = self.StatType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let MinStat = self.MinStat().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let MaxStat = self.MaxStat().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let LevelUpInsertLimit = self.LevelUpInsertLimit();
      let LevelUpFeedExp = self.LevelUpFeedExp();
      let LevelUpFeedCostCurrency = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.LevelUpFeedCostCurrency(), &key)
      } else {
        self.LevelUpFeedCostCurrency()
      };
      let LevelUpFeedCostAmount = self.LevelUpFeedCostAmount();
      let EquipmentCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EquipmentCategory(), &key)
      } else {
        self.EquipmentCategory()
      };
      let LevelUpFeedAddExp = self.LevelUpFeedAddExp();
      let DefaultMaxLevel = self.DefaultMaxLevel();
      let TranscendenceMax = self.TranscendenceMax();
    let DamageFactorGroupId = self.DamageFactorGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EquipmentStatExcelT {
      EquipmentId,
      StatLevelUpType,
      StatType,
      MinStat,
      MaxStat,
      LevelUpInsertLimit,
      LevelUpFeedExp,
      LevelUpFeedCostCurrency,
      LevelUpFeedCostAmount,
      EquipmentCategory,
      LevelUpFeedAddExp,
      DefaultMaxLevel,
      TranscendenceMax,
      DamageFactorGroupId,
    }
  }

  #[inline]
  pub fn EquipmentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentStatExcel::VT_EQUIPMENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatLevelUpType(&self) -> StatLevelUpType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StatLevelUpType>(EquipmentStatExcel::VT_STATLEVELUPTYPE, Some(StatLevelUpType::Standard)).unwrap()}
  }
  #[inline]
  pub fn StatType(&self) -> Option<flatbuffers::Vector<'a, EquipmentOptionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, EquipmentOptionType>>>(EquipmentStatExcel::VT_STATTYPE, None)}
  }
  #[inline]
  pub fn MinStat(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EquipmentStatExcel::VT_MINSTAT, None)}
  }
  #[inline]
  pub fn MaxStat(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EquipmentStatExcel::VT_MAXSTAT, None)}
  }
  #[inline]
  pub fn LevelUpInsertLimit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EquipmentStatExcel::VT_LEVELUPINSERTLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LevelUpFeedExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentStatExcel::VT_LEVELUPFEEDEXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LevelUpFeedCostCurrency(&self) -> CurrencyTypes {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CurrencyTypes>(EquipmentStatExcel::VT_LEVELUPFEEDCOSTCURRENCY, Some(CurrencyTypes::Invalid)).unwrap()}
  }
  #[inline]
  pub fn LevelUpFeedCostAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentStatExcel::VT_LEVELUPFEEDCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipmentCategory(&self) -> EquipmentCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EquipmentCategory>(EquipmentStatExcel::VT_EQUIPMENTCATEGORY, Some(EquipmentCategory::Unable)).unwrap()}
  }
  #[inline]
  pub fn LevelUpFeedAddExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentStatExcel::VT_LEVELUPFEEDADDEXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefaultMaxLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EquipmentStatExcel::VT_DEFAULTMAXLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TranscendenceMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EquipmentStatExcel::VT_TRANSCENDENCEMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamageFactorGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EquipmentStatExcel::VT_DAMAGEFACTORGROUPID, None)}
  }
}

impl flatbuffers::Verifiable for EquipmentStatExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EquipmentId", Self::VT_EQUIPMENTID, false)?
     .visit_field::<StatLevelUpType>("StatLevelUpType", Self::VT_STATLEVELUPTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, EquipmentOptionType>>>("StatType", Self::VT_STATTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MinStat", Self::VT_MINSTAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MaxStat", Self::VT_MAXSTAT, false)?
     .visit_field::<i32>("LevelUpInsertLimit", Self::VT_LEVELUPINSERTLIMIT, false)?
     .visit_field::<i64>("LevelUpFeedExp", Self::VT_LEVELUPFEEDEXP, false)?
     .visit_field::<CurrencyTypes>("LevelUpFeedCostCurrency", Self::VT_LEVELUPFEEDCOSTCURRENCY, false)?
     .visit_field::<i64>("LevelUpFeedCostAmount", Self::VT_LEVELUPFEEDCOSTAMOUNT, false)?
     .visit_field::<EquipmentCategory>("EquipmentCategory", Self::VT_EQUIPMENTCATEGORY, false)?
     .visit_field::<i64>("LevelUpFeedAddExp", Self::VT_LEVELUPFEEDADDEXP, false)?
     .visit_field::<i32>("DefaultMaxLevel", Self::VT_DEFAULTMAXLEVEL, false)?
     .visit_field::<i32>("TranscendenceMax", Self::VT_TRANSCENDENCEMAX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DamageFactorGroupId", Self::VT_DAMAGEFACTORGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct EquipmentStatExcelArgs<'a> {
    pub EquipmentId: i64,
    pub StatLevelUpType: StatLevelUpType,
    pub StatType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, EquipmentOptionType>>>,
    pub MinStat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub MaxStat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub LevelUpInsertLimit: i32,
    pub LevelUpFeedExp: i64,
    pub LevelUpFeedCostCurrency: CurrencyTypes,
    pub LevelUpFeedCostAmount: i64,
    pub EquipmentCategory: EquipmentCategory,
    pub LevelUpFeedAddExp: i64,
    pub DefaultMaxLevel: i32,
    pub TranscendenceMax: i32,
    pub DamageFactorGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EquipmentStatExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EquipmentStatExcelArgs {
      EquipmentId: 0,
      StatLevelUpType: StatLevelUpType::Standard,
      StatType: None,
      MinStat: None,
      MaxStat: None,
      LevelUpInsertLimit: 0,
      LevelUpFeedExp: 0,
      LevelUpFeedCostCurrency: CurrencyTypes::Invalid,
      LevelUpFeedCostAmount: 0,
      EquipmentCategory: EquipmentCategory::Unable,
      LevelUpFeedAddExp: 0,
      DefaultMaxLevel: 0,
      TranscendenceMax: 0,
      DamageFactorGroupId: None,
    }
  }
}

impl Serialize for EquipmentStatExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EquipmentStatExcel", 14)?;
      s.serialize_field("EquipmentId", &self.EquipmentId())?;
      s.serialize_field("StatLevelUpType", &self.StatLevelUpType())?;
      if let Some(f) = self.StatType() {
        s.serialize_field("StatType", &f)?;
      } else {
        s.skip_field("StatType")?;
      }
      if let Some(f) = self.MinStat() {
        s.serialize_field("MinStat", &f)?;
      } else {
        s.skip_field("MinStat")?;
      }
      if let Some(f) = self.MaxStat() {
        s.serialize_field("MaxStat", &f)?;
      } else {
        s.skip_field("MaxStat")?;
      }
      s.serialize_field("LevelUpInsertLimit", &self.LevelUpInsertLimit())?;
      s.serialize_field("LevelUpFeedExp", &self.LevelUpFeedExp())?;
      s.serialize_field("LevelUpFeedCostCurrency", &self.LevelUpFeedCostCurrency())?;
      s.serialize_field("LevelUpFeedCostAmount", &self.LevelUpFeedCostAmount())?;
      s.serialize_field("EquipmentCategory", &self.EquipmentCategory())?;
      s.serialize_field("LevelUpFeedAddExp", &self.LevelUpFeedAddExp())?;
      s.serialize_field("DefaultMaxLevel", &self.DefaultMaxLevel())?;
      s.serialize_field("TranscendenceMax", &self.TranscendenceMax())?;
      if let Some(f) = self.DamageFactorGroupId() {
        s.serialize_field("DamageFactorGroupId", &f)?;
      } else {
        s.skip_field("DamageFactorGroupId")?;
      }
    s.end()
  }
}

pub struct EquipmentStatExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EquipmentStatExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EquipmentId(&mut self, EquipmentId: i64) {
    self.fbb_.push_slot::<i64>(EquipmentStatExcel::VT_EQUIPMENTID, EquipmentId, 0);
  }
  #[inline]
  pub fn add_StatLevelUpType(&mut self, StatLevelUpType: StatLevelUpType) {
    self.fbb_.push_slot::<StatLevelUpType>(EquipmentStatExcel::VT_STATLEVELUPTYPE, StatLevelUpType, StatLevelUpType::Standard);
  }
  #[inline]
  pub fn add_StatType(&mut self, StatType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , EquipmentOptionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentStatExcel::VT_STATTYPE, StatType);
  }
  #[inline]
  pub fn add_MinStat(&mut self, MinStat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentStatExcel::VT_MINSTAT, MinStat);
  }
  #[inline]
  pub fn add_MaxStat(&mut self, MaxStat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentStatExcel::VT_MAXSTAT, MaxStat);
  }
  #[inline]
  pub fn add_LevelUpInsertLimit(&mut self, LevelUpInsertLimit: i32) {
    self.fbb_.push_slot::<i32>(EquipmentStatExcel::VT_LEVELUPINSERTLIMIT, LevelUpInsertLimit, 0);
  }
  #[inline]
  pub fn add_LevelUpFeedExp(&mut self, LevelUpFeedExp: i64) {
    self.fbb_.push_slot::<i64>(EquipmentStatExcel::VT_LEVELUPFEEDEXP, LevelUpFeedExp, 0);
  }
  #[inline]
  pub fn add_LevelUpFeedCostCurrency(&mut self, LevelUpFeedCostCurrency: CurrencyTypes) {
    self.fbb_.push_slot::<CurrencyTypes>(EquipmentStatExcel::VT_LEVELUPFEEDCOSTCURRENCY, LevelUpFeedCostCurrency, CurrencyTypes::Invalid);
  }
  #[inline]
  pub fn add_LevelUpFeedCostAmount(&mut self, LevelUpFeedCostAmount: i64) {
    self.fbb_.push_slot::<i64>(EquipmentStatExcel::VT_LEVELUPFEEDCOSTAMOUNT, LevelUpFeedCostAmount, 0);
  }
  #[inline]
  pub fn add_EquipmentCategory(&mut self, EquipmentCategory: EquipmentCategory) {
    self.fbb_.push_slot::<EquipmentCategory>(EquipmentStatExcel::VT_EQUIPMENTCATEGORY, EquipmentCategory, EquipmentCategory::Unable);
  }
  #[inline]
  pub fn add_LevelUpFeedAddExp(&mut self, LevelUpFeedAddExp: i64) {
    self.fbb_.push_slot::<i64>(EquipmentStatExcel::VT_LEVELUPFEEDADDEXP, LevelUpFeedAddExp, 0);
  }
  #[inline]
  pub fn add_DefaultMaxLevel(&mut self, DefaultMaxLevel: i32) {
    self.fbb_.push_slot::<i32>(EquipmentStatExcel::VT_DEFAULTMAXLEVEL, DefaultMaxLevel, 0);
  }
  #[inline]
  pub fn add_TranscendenceMax(&mut self, TranscendenceMax: i32) {
    self.fbb_.push_slot::<i32>(EquipmentStatExcel::VT_TRANSCENDENCEMAX, TranscendenceMax, 0);
  }
  #[inline]
  pub fn add_DamageFactorGroupId(&mut self, DamageFactorGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentStatExcel::VT_DAMAGEFACTORGROUPID, DamageFactorGroupId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EquipmentStatExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EquipmentStatExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EquipmentStatExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EquipmentStatExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EquipmentStatExcel");
      ds.field("EquipmentId", &self.EquipmentId());
      ds.field("StatLevelUpType", &self.StatLevelUpType());
      ds.field("StatType", &self.StatType());
      ds.field("MinStat", &self.MinStat());
      ds.field("MaxStat", &self.MaxStat());
      ds.field("LevelUpInsertLimit", &self.LevelUpInsertLimit());
      ds.field("LevelUpFeedExp", &self.LevelUpFeedExp());
      ds.field("LevelUpFeedCostCurrency", &self.LevelUpFeedCostCurrency());
      ds.field("LevelUpFeedCostAmount", &self.LevelUpFeedCostAmount());
      ds.field("EquipmentCategory", &self.EquipmentCategory());
      ds.field("LevelUpFeedAddExp", &self.LevelUpFeedAddExp());
      ds.field("DefaultMaxLevel", &self.DefaultMaxLevel());
      ds.field("TranscendenceMax", &self.TranscendenceMax());
      ds.field("DamageFactorGroupId", &self.DamageFactorGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EquipmentStatExcelT {
  pub EquipmentId: i64,
  pub StatLevelUpType: StatLevelUpType,
  pub StatType: Option<Vec<EquipmentOptionType>>,
  pub MinStat: Option<Vec<i64>>,
  pub MaxStat: Option<Vec<i64>>,
  pub LevelUpInsertLimit: i32,
  pub LevelUpFeedExp: i64,
  pub LevelUpFeedCostCurrency: CurrencyTypes,
  pub LevelUpFeedCostAmount: i64,
  pub EquipmentCategory: EquipmentCategory,
  pub LevelUpFeedAddExp: i64,
  pub DefaultMaxLevel: i32,
  pub TranscendenceMax: i32,
  pub DamageFactorGroupId: Option<String>,
}
impl Default for EquipmentStatExcelT {
  fn default() -> Self {
    Self {
      EquipmentId: 0,
      StatLevelUpType: StatLevelUpType::Standard,
      StatType: None,
      MinStat: None,
      MaxStat: None,
      LevelUpInsertLimit: 0,
      LevelUpFeedExp: 0,
      LevelUpFeedCostCurrency: CurrencyTypes::Invalid,
      LevelUpFeedCostAmount: 0,
      EquipmentCategory: EquipmentCategory::Unable,
      LevelUpFeedAddExp: 0,
      DefaultMaxLevel: 0,
      TranscendenceMax: 0,
      DamageFactorGroupId: None,
    }
  }
}
impl EquipmentStatExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EquipmentStatExcel<'b>> {
    let EquipmentId = self.EquipmentId;
    let StatLevelUpType = self.StatLevelUpType;
    let StatType = self.StatType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MinStat = self.MinStat.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MaxStat = self.MaxStat.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LevelUpInsertLimit = self.LevelUpInsertLimit;
    let LevelUpFeedExp = self.LevelUpFeedExp;
    let LevelUpFeedCostCurrency = self.LevelUpFeedCostCurrency;
    let LevelUpFeedCostAmount = self.LevelUpFeedCostAmount;
    let EquipmentCategory = self.EquipmentCategory;
    let LevelUpFeedAddExp = self.LevelUpFeedAddExp;
    let DefaultMaxLevel = self.DefaultMaxLevel;
    let TranscendenceMax = self.TranscendenceMax;
    let DamageFactorGroupId = self.DamageFactorGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EquipmentStatExcel::create(_fbb, &EquipmentStatExcelArgs{
      EquipmentId,
      StatLevelUpType,
      StatType,
      MinStat,
      MaxStat,
      LevelUpInsertLimit,
      LevelUpFeedExp,
      LevelUpFeedCostCurrency,
      LevelUpFeedCostAmount,
      EquipmentCategory,
      LevelUpFeedAddExp,
      DefaultMaxLevel,
      TranscendenceMax,
      DamageFactorGroupId,
    })
  }
}
