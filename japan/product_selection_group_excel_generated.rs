// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProductSelectionGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ProductSelectionGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProductSelectionGroupExcel<'a> {
  type Inner = ProductSelectionGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProductSelectionGroupExcel<'a> {
  pub const VT_PRODUCTSELECTIONGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTSELECTIONGROUPCOMPONENTID: flatbuffers::VOffsetT = 6;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 12;
  pub const VT_RESULTAMOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_CONDITIONPARCELTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_CONDITIONPARCELID: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProductSelectionGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ProductSelectionGroupExcelArgs
  ) -> flatbuffers::WIPOffset<ProductSelectionGroupExcel<'bldr>> {
    let mut builder = ProductSelectionGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ProductSelectionGroup");
      let x = args.ConditionParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionParcelId(x);
      let x = args.ResultAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultAmount(x);
      let x = args.ParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelId(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.ProductSelectionGroupComponentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ProductSelectionGroupComponentId(x);
      let x = args.ProductSelectionGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ProductSelectionGroupId(x);
      let x = args.ConditionParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConditionParcelType(x);
      let x = args.ParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ProductSelectionGroupExcelT {
    let key = table_encryption_service::create_key(b"ProductSelectionGroup");
      let ProductSelectionGroupId = self.ProductSelectionGroupId();
      let ProductSelectionGroupComponentId = self.ProductSelectionGroupComponentId();
      let DisplayOrder = self.DisplayOrder();
      let ParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParcelType(), &key)
      } else {
        self.ParcelType()
      };
      let ParcelId = self.ParcelId();
      let ResultAmount = self.ResultAmount();
      let ConditionParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConditionParcelType(), &key)
      } else {
        self.ConditionParcelType()
      };
      let ConditionParcelId = self.ConditionParcelId();
    ProductSelectionGroupExcelT {
      ProductSelectionGroupId,
      ProductSelectionGroupComponentId,
      DisplayOrder,
      ParcelType,
      ParcelId,
      ResultAmount,
      ConditionParcelType,
      ConditionParcelId,
    }
  }

  #[inline]
  pub fn ProductSelectionGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectionGroupExcel::VT_PRODUCTSELECTIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductSelectionGroupComponentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectionGroupExcel::VT_PRODUCTSELECTIONGROUPCOMPONENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectionGroupExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ProductSelectionGroupExcel::VT_PARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectionGroupExcel::VT_PARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResultAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectionGroupExcel::VT_RESULTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConditionParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ProductSelectionGroupExcel::VT_CONDITIONPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ConditionParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectionGroupExcel::VT_CONDITIONPARCELID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ProductSelectionGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ProductSelectionGroupId", Self::VT_PRODUCTSELECTIONGROUPID, false)?
     .visit_field::<i64>("ProductSelectionGroupComponentId", Self::VT_PRODUCTSELECTIONGROUPCOMPONENTID, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<ParcelType>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<i64>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<i64>("ResultAmount", Self::VT_RESULTAMOUNT, false)?
     .visit_field::<ParcelType>("ConditionParcelType", Self::VT_CONDITIONPARCELTYPE, false)?
     .visit_field::<i64>("ConditionParcelId", Self::VT_CONDITIONPARCELID, false)?
     .finish();
    Ok(())
  }
}
pub struct ProductSelectionGroupExcelArgs {
    pub ProductSelectionGroupId: i64,
    pub ProductSelectionGroupComponentId: i64,
    pub DisplayOrder: i64,
    pub ParcelType: ParcelType,
    pub ParcelId: i64,
    pub ResultAmount: i64,
    pub ConditionParcelType: ParcelType,
    pub ConditionParcelId: i64,
}
impl<'a> Default for ProductSelectionGroupExcelArgs {
  #[inline]
  fn default() -> Self {
    ProductSelectionGroupExcelArgs {
      ProductSelectionGroupId: 0,
      ProductSelectionGroupComponentId: 0,
      DisplayOrder: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      ResultAmount: 0,
      ConditionParcelType: ParcelType::None,
      ConditionParcelId: 0,
    }
  }
}

impl Serialize for ProductSelectionGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProductSelectionGroupExcel", 8)?;
      s.serialize_field("ProductSelectionGroupId", &self.ProductSelectionGroupId())?;
      s.serialize_field("ProductSelectionGroupComponentId", &self.ProductSelectionGroupComponentId())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("ParcelType", &self.ParcelType())?;
      s.serialize_field("ParcelId", &self.ParcelId())?;
      s.serialize_field("ResultAmount", &self.ResultAmount())?;
      s.serialize_field("ConditionParcelType", &self.ConditionParcelType())?;
      s.serialize_field("ConditionParcelId", &self.ConditionParcelId())?;
    s.end()
  }
}

pub struct ProductSelectionGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ProductSelectionGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ProductSelectionGroupId(&mut self, ProductSelectionGroupId: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectionGroupExcel::VT_PRODUCTSELECTIONGROUPID, ProductSelectionGroupId, 0);
  }
  #[inline]
  pub fn add_ProductSelectionGroupComponentId(&mut self, ProductSelectionGroupComponentId: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectionGroupExcel::VT_PRODUCTSELECTIONGROUPCOMPONENTID, ProductSelectionGroupComponentId, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectionGroupExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ProductSelectionGroupExcel::VT_PARCELTYPE, ParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectionGroupExcel::VT_PARCELID, ParcelId, 0);
  }
  #[inline]
  pub fn add_ResultAmount(&mut self, ResultAmount: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectionGroupExcel::VT_RESULTAMOUNT, ResultAmount, 0);
  }
  #[inline]
  pub fn add_ConditionParcelType(&mut self, ConditionParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ProductSelectionGroupExcel::VT_CONDITIONPARCELTYPE, ConditionParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ConditionParcelId(&mut self, ConditionParcelId: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectionGroupExcel::VT_CONDITIONPARCELID, ConditionParcelId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ProductSelectionGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ProductSelectionGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProductSelectionGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProductSelectionGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProductSelectionGroupExcel");
      ds.field("ProductSelectionGroupId", &self.ProductSelectionGroupId());
      ds.field("ProductSelectionGroupComponentId", &self.ProductSelectionGroupComponentId());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("ResultAmount", &self.ResultAmount());
      ds.field("ConditionParcelType", &self.ConditionParcelType());
      ds.field("ConditionParcelId", &self.ConditionParcelId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ProductSelectionGroupExcelT {
  pub ProductSelectionGroupId: i64,
  pub ProductSelectionGroupComponentId: i64,
  pub DisplayOrder: i64,
  pub ParcelType: ParcelType,
  pub ParcelId: i64,
  pub ResultAmount: i64,
  pub ConditionParcelType: ParcelType,
  pub ConditionParcelId: i64,
}
impl Default for ProductSelectionGroupExcelT {
  fn default() -> Self {
    Self {
      ProductSelectionGroupId: 0,
      ProductSelectionGroupComponentId: 0,
      DisplayOrder: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      ResultAmount: 0,
      ConditionParcelType: ParcelType::None,
      ConditionParcelId: 0,
    }
  }
}
impl ProductSelectionGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ProductSelectionGroupExcel<'b>> {
    let ProductSelectionGroupId = self.ProductSelectionGroupId;
    let ProductSelectionGroupComponentId = self.ProductSelectionGroupComponentId;
    let DisplayOrder = self.DisplayOrder;
    let ParcelType = self.ParcelType;
    let ParcelId = self.ParcelId;
    let ResultAmount = self.ResultAmount;
    let ConditionParcelType = self.ConditionParcelType;
    let ConditionParcelId = self.ConditionParcelId;
    ProductSelectionGroupExcel::create(_fbb, &ProductSelectionGroupExcelArgs{
      ProductSelectionGroupId,
      ProductSelectionGroupComponentId,
      DisplayOrder,
      ParcelType,
      ParcelId,
      ResultAmount,
      ConditionParcelType,
      ConditionParcelId,
    })
  }
}
