// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstConquestExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstConquestExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstConquestExcel<'a> {
  type Inner = ConstConquestExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstConquestExcel<'a> {
  pub const VT_MANAGEUNITCHANGE: flatbuffers::VOffsetT = 4;
  pub const VT_ASSISTCOUNT: flatbuffers::VOffsetT = 6;
  pub const VT_PLAYTIMELIMITINSECONDS: flatbuffers::VOffsetT = 8;
  pub const VT_ANIMATIONUNITAMOUNTMIN: flatbuffers::VOffsetT = 10;
  pub const VT_ANIMATIONUNITAMOUNTMAX: flatbuffers::VOffsetT = 12;
  pub const VT_ANIMATIONUNITDELAY: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstConquestExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstConquestExcelArgs
  ) -> flatbuffers::WIPOffset<ConstConquestExcel<'bldr>> {
    let mut builder = ConstConquestExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstConquest");
      let x = args.AnimationUnitDelay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_AnimationUnitDelay(x);
      let x = args.AnimationUnitAmountMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AnimationUnitAmountMax(x);
      let x = args.AnimationUnitAmountMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AnimationUnitAmountMin(x);
      let x = args.PlayTimeLimitInSeconds;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PlayTimeLimitInSeconds(x);
      let x = args.AssistCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AssistCount(x);
      let x = args.ManageUnitChange;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ManageUnitChange(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConstConquestExcelT {
    let key = table_encryption_service::create_key(b"ConstConquest");
      let ManageUnitChange = self.ManageUnitChange();
      let AssistCount = self.AssistCount();
      let PlayTimeLimitInSeconds = self.PlayTimeLimitInSeconds();
      let AnimationUnitAmountMin = self.AnimationUnitAmountMin();
      let AnimationUnitAmountMax = self.AnimationUnitAmountMax();
      let AnimationUnitDelay = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.AnimationUnitDelay(), &key)
      } else {
        self.AnimationUnitDelay()
      };
    ConstConquestExcelT {
      ManageUnitChange,
      AssistCount,
      PlayTimeLimitInSeconds,
      AnimationUnitAmountMin,
      AnimationUnitAmountMax,
      AnimationUnitDelay,
    }
  }

  #[inline]
  pub fn ManageUnitChange(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstConquestExcel::VT_MANAGEUNITCHANGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AssistCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstConquestExcel::VT_ASSISTCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PlayTimeLimitInSeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstConquestExcel::VT_PLAYTIMELIMITINSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationUnitAmountMin(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstConquestExcel::VT_ANIMATIONUNITAMOUNTMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationUnitAmountMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstConquestExcel::VT_ANIMATIONUNITAMOUNTMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationUnitDelay(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstConquestExcel::VT_ANIMATIONUNITDELAY, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConstConquestExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("ManageUnitChange", Self::VT_MANAGEUNITCHANGE, false)?
     .visit_field::<i32>("AssistCount", Self::VT_ASSISTCOUNT, false)?
     .visit_field::<i32>("PlayTimeLimitInSeconds", Self::VT_PLAYTIMELIMITINSECONDS, false)?
     .visit_field::<i32>("AnimationUnitAmountMin", Self::VT_ANIMATIONUNITAMOUNTMIN, false)?
     .visit_field::<i32>("AnimationUnitAmountMax", Self::VT_ANIMATIONUNITAMOUNTMAX, false)?
     .visit_field::<f32>("AnimationUnitDelay", Self::VT_ANIMATIONUNITDELAY, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstConquestExcelArgs {
    pub ManageUnitChange: i32,
    pub AssistCount: i32,
    pub PlayTimeLimitInSeconds: i32,
    pub AnimationUnitAmountMin: i32,
    pub AnimationUnitAmountMax: i32,
    pub AnimationUnitDelay: f32,
}
impl<'a> Default for ConstConquestExcelArgs {
  #[inline]
  fn default() -> Self {
    ConstConquestExcelArgs {
      ManageUnitChange: 0,
      AssistCount: 0,
      PlayTimeLimitInSeconds: 0,
      AnimationUnitAmountMin: 0,
      AnimationUnitAmountMax: 0,
      AnimationUnitDelay: 0.0,
    }
  }
}

impl Serialize for ConstConquestExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstConquestExcel", 6)?;
      s.serialize_field("ManageUnitChange", &self.ManageUnitChange())?;
      s.serialize_field("AssistCount", &self.AssistCount())?;
      s.serialize_field("PlayTimeLimitInSeconds", &self.PlayTimeLimitInSeconds())?;
      s.serialize_field("AnimationUnitAmountMin", &self.AnimationUnitAmountMin())?;
      s.serialize_field("AnimationUnitAmountMax", &self.AnimationUnitAmountMax())?;
      s.serialize_field("AnimationUnitDelay", &self.AnimationUnitDelay())?;
    s.end()
  }
}

pub struct ConstConquestExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstConquestExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ManageUnitChange(&mut self, ManageUnitChange: i32) {
    self.fbb_.push_slot::<i32>(ConstConquestExcel::VT_MANAGEUNITCHANGE, ManageUnitChange, 0);
  }
  #[inline]
  pub fn add_AssistCount(&mut self, AssistCount: i32) {
    self.fbb_.push_slot::<i32>(ConstConquestExcel::VT_ASSISTCOUNT, AssistCount, 0);
  }
  #[inline]
  pub fn add_PlayTimeLimitInSeconds(&mut self, PlayTimeLimitInSeconds: i32) {
    self.fbb_.push_slot::<i32>(ConstConquestExcel::VT_PLAYTIMELIMITINSECONDS, PlayTimeLimitInSeconds, 0);
  }
  #[inline]
  pub fn add_AnimationUnitAmountMin(&mut self, AnimationUnitAmountMin: i32) {
    self.fbb_.push_slot::<i32>(ConstConquestExcel::VT_ANIMATIONUNITAMOUNTMIN, AnimationUnitAmountMin, 0);
  }
  #[inline]
  pub fn add_AnimationUnitAmountMax(&mut self, AnimationUnitAmountMax: i32) {
    self.fbb_.push_slot::<i32>(ConstConquestExcel::VT_ANIMATIONUNITAMOUNTMAX, AnimationUnitAmountMax, 0);
  }
  #[inline]
  pub fn add_AnimationUnitDelay(&mut self, AnimationUnitDelay: f32) {
    self.fbb_.push_slot::<f32>(ConstConquestExcel::VT_ANIMATIONUNITDELAY, AnimationUnitDelay, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstConquestExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstConquestExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstConquestExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstConquestExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstConquestExcel");
      ds.field("ManageUnitChange", &self.ManageUnitChange());
      ds.field("AssistCount", &self.AssistCount());
      ds.field("PlayTimeLimitInSeconds", &self.PlayTimeLimitInSeconds());
      ds.field("AnimationUnitAmountMin", &self.AnimationUnitAmountMin());
      ds.field("AnimationUnitAmountMax", &self.AnimationUnitAmountMax());
      ds.field("AnimationUnitDelay", &self.AnimationUnitDelay());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstConquestExcelT {
  pub ManageUnitChange: i32,
  pub AssistCount: i32,
  pub PlayTimeLimitInSeconds: i32,
  pub AnimationUnitAmountMin: i32,
  pub AnimationUnitAmountMax: i32,
  pub AnimationUnitDelay: f32,
}
impl Default for ConstConquestExcelT {
  fn default() -> Self {
    Self {
      ManageUnitChange: 0,
      AssistCount: 0,
      PlayTimeLimitInSeconds: 0,
      AnimationUnitAmountMin: 0,
      AnimationUnitAmountMax: 0,
      AnimationUnitDelay: 0.0,
    }
  }
}
impl ConstConquestExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstConquestExcel<'b>> {
    let ManageUnitChange = self.ManageUnitChange;
    let AssistCount = self.AssistCount;
    let PlayTimeLimitInSeconds = self.PlayTimeLimitInSeconds;
    let AnimationUnitAmountMin = self.AnimationUnitAmountMin;
    let AnimationUnitAmountMax = self.AnimationUnitAmountMax;
    let AnimationUnitDelay = self.AnimationUnitDelay;
    ConstConquestExcel::create(_fbb, &ConstConquestExcelArgs{
      ManageUnitChange,
      AssistCount,
      PlayTimeLimitInSeconds,
      AnimationUnitAmountMin,
      AnimationUnitAmountMax,
      AnimationUnitDelay,
    })
  }
}
