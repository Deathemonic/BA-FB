// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GroundGridFlatOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GroundGridFlat<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GroundGridFlat<'a> {
  type Inner = GroundGridFlat<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GroundGridFlat<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_STARTX: flatbuffers::VOffsetT = 8;
  pub const VT_STARTY: flatbuffers::VOffsetT = 10;
  pub const VT_GAP: flatbuffers::VOffsetT = 12;
  pub const VT_NODES: flatbuffers::VOffsetT = 14;
  pub const VT_VERSION: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GroundGridFlat { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GroundGridFlatArgs<'args>
  ) -> flatbuffers::WIPOffset<GroundGridFlat<'bldr>> {
    let mut builder = GroundGridFlatBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GroundGri");
      if let Some(x) = args.Version {
        builder.add_Version(x);
      }
      if let Some(x) = args.Nodes {
        builder.add_Nodes(x);
      }
      let x = args.Gap;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Gap(x);
      let x = args.StartY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_StartY(x);
      let x = args.StartX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_StartX(x);
      let x = args.Y;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Y(x);
      let x = args.X;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_X(x);
    builder.finish()
  }

  pub fn unpack(&self) -> GroundGridFlatT {
    let key = table_encryption_service::create_key(b"GroundGri");
      let X = self.X();
      let Y = self.Y();
      let StartX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.StartX(), &key)
      } else {
        self.StartX()
      };
      let StartY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.StartY(), &key)
      } else {
        self.StartY()
      };
      let Gap = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Gap(), &key)
      } else {
        self.Gap()
      };
    let Nodes = self.Nodes().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let Version = self.Version().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    GroundGridFlatT {
      X,
      Y,
      StartX,
      StartY,
      Gap,
      Nodes,
      Version,
    }
  }

  #[inline]
  pub fn X(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GroundGridFlat::VT_X, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Y(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GroundGridFlat::VT_Y, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GroundGridFlat::VT_STARTX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn StartY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GroundGridFlat::VT_STARTY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Gap(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GroundGridFlat::VT_GAP, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Nodes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GroundNodeFlat<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GroundNodeFlat>>>>(GroundGridFlat::VT_NODES, None)}
  }
  #[inline]
  pub fn Version(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundGridFlat::VT_VERSION, None)}
  }
}

impl flatbuffers::Verifiable for GroundGridFlat<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("X", Self::VT_X, false)?
     .visit_field::<i32>("Y", Self::VT_Y, false)?
     .visit_field::<f32>("StartX", Self::VT_STARTX, false)?
     .visit_field::<f32>("StartY", Self::VT_STARTY, false)?
     .visit_field::<f32>("Gap", Self::VT_GAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<GroundNodeFlat>>>>("Nodes", Self::VT_NODES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Version", Self::VT_VERSION, false)?
     .finish();
    Ok(())
  }
}
pub struct GroundGridFlatArgs<'a> {
    pub X: i32,
    pub Y: i32,
    pub StartX: f32,
    pub StartY: f32,
    pub Gap: f32,
    pub Nodes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GroundNodeFlat<'a>>>>>,
    pub Version: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for GroundGridFlatArgs<'a> {
  #[inline]
  fn default() -> Self {
    GroundGridFlatArgs {
      X: 0,
      Y: 0,
      StartX: 0.0,
      StartY: 0.0,
      Gap: 0.0,
      Nodes: None,
      Version: None,
    }
  }
}

impl Serialize for GroundGridFlat<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GroundGridFlat", 7)?;
      s.serialize_field("X", &self.X())?;
      s.serialize_field("Y", &self.Y())?;
      s.serialize_field("StartX", &self.StartX())?;
      s.serialize_field("StartY", &self.StartY())?;
      s.serialize_field("Gap", &self.Gap())?;
      if let Some(f) = self.Nodes() {
        s.serialize_field("Nodes", &f)?;
      } else {
        s.skip_field("Nodes")?;
      }
      if let Some(f) = self.Version() {
        s.serialize_field("Version", &f)?;
      } else {
        s.skip_field("Version")?;
      }
    s.end()
  }
}

pub struct GroundGridFlatBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GroundGridFlatBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_X(&mut self, X: i32) {
    self.fbb_.push_slot::<i32>(GroundGridFlat::VT_X, X, 0);
  }
  #[inline]
  pub fn add_Y(&mut self, Y: i32) {
    self.fbb_.push_slot::<i32>(GroundGridFlat::VT_Y, Y, 0);
  }
  #[inline]
  pub fn add_StartX(&mut self, StartX: f32) {
    self.fbb_.push_slot::<f32>(GroundGridFlat::VT_STARTX, StartX, 0.0);
  }
  #[inline]
  pub fn add_StartY(&mut self, StartY: f32) {
    self.fbb_.push_slot::<f32>(GroundGridFlat::VT_STARTY, StartY, 0.0);
  }
  #[inline]
  pub fn add_Gap(&mut self, Gap: f32) {
    self.fbb_.push_slot::<f32>(GroundGridFlat::VT_GAP, Gap, 0.0);
  }
  #[inline]
  pub fn add_Nodes(&mut self, Nodes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<GroundNodeFlat<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundGridFlat::VT_NODES, Nodes);
  }
  #[inline]
  pub fn add_Version(&mut self, Version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundGridFlat::VT_VERSION, Version);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GroundGridFlatBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GroundGridFlatBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GroundGridFlat<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GroundGridFlat<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GroundGridFlat");
      ds.field("X", &self.X());
      ds.field("Y", &self.Y());
      ds.field("StartX", &self.StartX());
      ds.field("StartY", &self.StartY());
      ds.field("Gap", &self.Gap());
      ds.field("Nodes", &self.Nodes());
      ds.field("Version", &self.Version());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GroundGridFlatT {
  pub X: i32,
  pub Y: i32,
  pub StartX: f32,
  pub StartY: f32,
  pub Gap: f32,
  pub Nodes: Option<Vec<GroundNodeFlatT>>,
  pub Version: Option<String>,
}
impl Default for GroundGridFlatT {
  fn default() -> Self {
    Self {
      X: 0,
      Y: 0,
      StartX: 0.0,
      StartY: 0.0,
      Gap: 0.0,
      Nodes: None,
      Version: None,
    }
  }
}
impl GroundGridFlatT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GroundGridFlat<'b>> {
    let X = self.X;
    let Y = self.Y;
    let StartX = self.StartX;
    let StartY = self.StartY;
    let Gap = self.Gap;
    let Nodes = self.Nodes.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let Version = self.Version.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    GroundGridFlat::create(_fbb, &GroundGridFlatArgs{
      X,
      Y,
      StartX,
      StartY,
      Gap,
      Nodes,
      Version,
    })
  }
}
