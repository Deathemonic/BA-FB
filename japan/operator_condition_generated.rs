// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_OPERATOR_CONDITION: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_OPERATOR_CONDITION: i32 = 27;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_OPERATOR_CONDITION: [OperatorCondition; 28] = [
  OperatorCondition::None,
  OperatorCondition::StrategyStart,
  OperatorCondition::StrategyVictory,
  OperatorCondition::StrategyDefeat,
  OperatorCondition::AdventureCombatStart,
  OperatorCondition::AdventureCombatVictory,
  OperatorCondition::AdventureCombatDefeat,
  OperatorCondition::ArenaCombatStart,
  OperatorCondition::ArenaCombatVictory,
  OperatorCondition::ArenaCombatDefeat,
  OperatorCondition::WeekDungeonCombatStart,
  OperatorCondition::WeekDungeonCombatVictory,
  OperatorCondition::WeekDungeonCombatDefeat,
  OperatorCondition::SchoolDungeonCombatStart,
  OperatorCondition::SchoolDungeonCombatVictory,
  OperatorCondition::SchoolDungeonCombatDefeat,
  OperatorCondition::StrategyWarpUnitFromHideTile,
  OperatorCondition::TimeAttackDungeonStart,
  OperatorCondition::TimeAttackDungeonVictory,
  OperatorCondition::TimeAttackDungeonDefeat,
  OperatorCondition::WorldRaidBossSpawn,
  OperatorCondition::WorldRaidBossKill,
  OperatorCondition::WorldRaidBossDamaged,
  OperatorCondition::WorldRaidScenarioBattle,
  OperatorCondition::MinigameTBGThemaOpen,
  OperatorCondition::MinigameTBGThemaComeback,
  OperatorCondition::MinigameTBGAllyRevive,
  OperatorCondition::MinigameTBGItemUse,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OperatorCondition(pub i32);
#[allow(non_upper_case_globals)]
impl OperatorCondition {
  pub const None: Self = Self(0);
  pub const StrategyStart: Self = Self(1);
  pub const StrategyVictory: Self = Self(2);
  pub const StrategyDefeat: Self = Self(3);
  pub const AdventureCombatStart: Self = Self(4);
  pub const AdventureCombatVictory: Self = Self(5);
  pub const AdventureCombatDefeat: Self = Self(6);
  pub const ArenaCombatStart: Self = Self(7);
  pub const ArenaCombatVictory: Self = Self(8);
  pub const ArenaCombatDefeat: Self = Self(9);
  pub const WeekDungeonCombatStart: Self = Self(10);
  pub const WeekDungeonCombatVictory: Self = Self(11);
  pub const WeekDungeonCombatDefeat: Self = Self(12);
  pub const SchoolDungeonCombatStart: Self = Self(13);
  pub const SchoolDungeonCombatVictory: Self = Self(14);
  pub const SchoolDungeonCombatDefeat: Self = Self(15);
  pub const StrategyWarpUnitFromHideTile: Self = Self(16);
  pub const TimeAttackDungeonStart: Self = Self(17);
  pub const TimeAttackDungeonVictory: Self = Self(18);
  pub const TimeAttackDungeonDefeat: Self = Self(19);
  pub const WorldRaidBossSpawn: Self = Self(20);
  pub const WorldRaidBossKill: Self = Self(21);
  pub const WorldRaidBossDamaged: Self = Self(22);
  pub const WorldRaidScenarioBattle: Self = Self(23);
  pub const MinigameTBGThemaOpen: Self = Self(24);
  pub const MinigameTBGThemaComeback: Self = Self(25);
  pub const MinigameTBGAllyRevive: Self = Self(26);
  pub const MinigameTBGItemUse: Self = Self(27);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 27;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::StrategyStart,
    Self::StrategyVictory,
    Self::StrategyDefeat,
    Self::AdventureCombatStart,
    Self::AdventureCombatVictory,
    Self::AdventureCombatDefeat,
    Self::ArenaCombatStart,
    Self::ArenaCombatVictory,
    Self::ArenaCombatDefeat,
    Self::WeekDungeonCombatStart,
    Self::WeekDungeonCombatVictory,
    Self::WeekDungeonCombatDefeat,
    Self::SchoolDungeonCombatStart,
    Self::SchoolDungeonCombatVictory,
    Self::SchoolDungeonCombatDefeat,
    Self::StrategyWarpUnitFromHideTile,
    Self::TimeAttackDungeonStart,
    Self::TimeAttackDungeonVictory,
    Self::TimeAttackDungeonDefeat,
    Self::WorldRaidBossSpawn,
    Self::WorldRaidBossKill,
    Self::WorldRaidBossDamaged,
    Self::WorldRaidScenarioBattle,
    Self::MinigameTBGThemaOpen,
    Self::MinigameTBGThemaComeback,
    Self::MinigameTBGAllyRevive,
    Self::MinigameTBGItemUse,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::StrategyStart => Some("StrategyStart"),
      Self::StrategyVictory => Some("StrategyVictory"),
      Self::StrategyDefeat => Some("StrategyDefeat"),
      Self::AdventureCombatStart => Some("AdventureCombatStart"),
      Self::AdventureCombatVictory => Some("AdventureCombatVictory"),
      Self::AdventureCombatDefeat => Some("AdventureCombatDefeat"),
      Self::ArenaCombatStart => Some("ArenaCombatStart"),
      Self::ArenaCombatVictory => Some("ArenaCombatVictory"),
      Self::ArenaCombatDefeat => Some("ArenaCombatDefeat"),
      Self::WeekDungeonCombatStart => Some("WeekDungeonCombatStart"),
      Self::WeekDungeonCombatVictory => Some("WeekDungeonCombatVictory"),
      Self::WeekDungeonCombatDefeat => Some("WeekDungeonCombatDefeat"),
      Self::SchoolDungeonCombatStart => Some("SchoolDungeonCombatStart"),
      Self::SchoolDungeonCombatVictory => Some("SchoolDungeonCombatVictory"),
      Self::SchoolDungeonCombatDefeat => Some("SchoolDungeonCombatDefeat"),
      Self::StrategyWarpUnitFromHideTile => Some("StrategyWarpUnitFromHideTile"),
      Self::TimeAttackDungeonStart => Some("TimeAttackDungeonStart"),
      Self::TimeAttackDungeonVictory => Some("TimeAttackDungeonVictory"),
      Self::TimeAttackDungeonDefeat => Some("TimeAttackDungeonDefeat"),
      Self::WorldRaidBossSpawn => Some("WorldRaidBossSpawn"),
      Self::WorldRaidBossKill => Some("WorldRaidBossKill"),
      Self::WorldRaidBossDamaged => Some("WorldRaidBossDamaged"),
      Self::WorldRaidScenarioBattle => Some("WorldRaidScenarioBattle"),
      Self::MinigameTBGThemaOpen => Some("MinigameTBGThemaOpen"),
      Self::MinigameTBGThemaComeback => Some("MinigameTBGThemaComeback"),
      Self::MinigameTBGAllyRevive => Some("MinigameTBGAllyRevive"),
      Self::MinigameTBGItemUse => Some("MinigameTBGItemUse"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OperatorCondition {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for OperatorCondition {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("OperatorCondition", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for OperatorCondition {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OperatorCondition {
    type Output = OperatorCondition;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OperatorCondition {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OperatorCondition {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OperatorCondition {}
