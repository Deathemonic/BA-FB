// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentConcentrationExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentConcentrationExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentConcentrationExcel<'a> {
  type Inner = EventContentConcentrationExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentConcentrationExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_COSTGOODSID: flatbuffers::VOffsetT = 6;
  pub const VT_MAXCARDPAIRCOUNT: flatbuffers::VOffsetT = 8;
  pub const VT_MAXCARDOPENCOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_INSTANTCLEARROUND: flatbuffers::VOffsetT = 12;
  pub const VT_CARDBOARDPREFABS: flatbuffers::VOffsetT = 14;
  pub const VT_BACKIMAGEPATH: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentConcentrationExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentConcentrationExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentConcentrationExcel<'bldr>> {
    let mut builder = EventContentConcentrationExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentConcentration");
      let x = args.CostGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostGoodsId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.BackImagePath {
        builder.add_BackImagePath(x);
      }
      if let Some(x) = args.CardBoardPrefabs {
        builder.add_CardBoardPrefabs(x);
      }
      let x = args.InstantClearRound;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_InstantClearRound(x);
      let x = args.MaxCardOpenCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxCardOpenCount(x);
      let x = args.MaxCardPairCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxCardPairCount(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentConcentrationExcelT {
    let key = table_encryption_service::create_key(b"EventContentConcentration");
      let EventContentId = self.EventContentId();
      let CostGoodsId = self.CostGoodsId();
      let MaxCardPairCount = self.MaxCardPairCount();
      let MaxCardOpenCount = self.MaxCardOpenCount();
      let InstantClearRound = self.InstantClearRound();
    let CardBoardPrefabs = self.CardBoardPrefabs().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BackImagePath = self.BackImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentConcentrationExcelT {
      EventContentId,
      CostGoodsId,
      MaxCardPairCount,
      MaxCardOpenCount,
      InstantClearRound,
      CardBoardPrefabs,
      BackImagePath,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentConcentrationExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentConcentrationExcel::VT_COSTGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxCardPairCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentConcentrationExcel::VT_MAXCARDPAIRCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxCardOpenCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentConcentrationExcel::VT_MAXCARDOPENCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InstantClearRound(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentConcentrationExcel::VT_INSTANTCLEARROUND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CardBoardPrefabs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentConcentrationExcel::VT_CARDBOARDPREFABS, None)}
  }
  #[inline]
  pub fn BackImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentConcentrationExcel::VT_BACKIMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for EventContentConcentrationExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("CostGoodsId", Self::VT_COSTGOODSID, false)?
     .visit_field::<i32>("MaxCardPairCount", Self::VT_MAXCARDPAIRCOUNT, false)?
     .visit_field::<i32>("MaxCardOpenCount", Self::VT_MAXCARDOPENCOUNT, false)?
     .visit_field::<i32>("InstantClearRound", Self::VT_INSTANTCLEARROUND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CardBoardPrefabs", Self::VT_CARDBOARDPREFABS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BackImagePath", Self::VT_BACKIMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentConcentrationExcelArgs<'a> {
    pub EventContentId: i64,
    pub CostGoodsId: i64,
    pub MaxCardPairCount: i32,
    pub MaxCardOpenCount: i32,
    pub InstantClearRound: i32,
    pub CardBoardPrefabs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BackImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentConcentrationExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentConcentrationExcelArgs {
      EventContentId: 0,
      CostGoodsId: 0,
      MaxCardPairCount: 0,
      MaxCardOpenCount: 0,
      InstantClearRound: 0,
      CardBoardPrefabs: None,
      BackImagePath: None,
    }
  }
}

impl Serialize for EventContentConcentrationExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentConcentrationExcel", 7)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("CostGoodsId", &self.CostGoodsId())?;
      s.serialize_field("MaxCardPairCount", &self.MaxCardPairCount())?;
      s.serialize_field("MaxCardOpenCount", &self.MaxCardOpenCount())?;
      s.serialize_field("InstantClearRound", &self.InstantClearRound())?;
      if let Some(f) = self.CardBoardPrefabs() {
        s.serialize_field("CardBoardPrefabs", &f)?;
      } else {
        s.skip_field("CardBoardPrefabs")?;
      }
      if let Some(f) = self.BackImagePath() {
        s.serialize_field("BackImagePath", &f)?;
      } else {
        s.skip_field("BackImagePath")?;
      }
    s.end()
  }
}

pub struct EventContentConcentrationExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentConcentrationExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentConcentrationExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_CostGoodsId(&mut self, CostGoodsId: i64) {
    self.fbb_.push_slot::<i64>(EventContentConcentrationExcel::VT_COSTGOODSID, CostGoodsId, 0);
  }
  #[inline]
  pub fn add_MaxCardPairCount(&mut self, MaxCardPairCount: i32) {
    self.fbb_.push_slot::<i32>(EventContentConcentrationExcel::VT_MAXCARDPAIRCOUNT, MaxCardPairCount, 0);
  }
  #[inline]
  pub fn add_MaxCardOpenCount(&mut self, MaxCardOpenCount: i32) {
    self.fbb_.push_slot::<i32>(EventContentConcentrationExcel::VT_MAXCARDOPENCOUNT, MaxCardOpenCount, 0);
  }
  #[inline]
  pub fn add_InstantClearRound(&mut self, InstantClearRound: i32) {
    self.fbb_.push_slot::<i32>(EventContentConcentrationExcel::VT_INSTANTCLEARROUND, InstantClearRound, 0);
  }
  #[inline]
  pub fn add_CardBoardPrefabs(&mut self, CardBoardPrefabs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentConcentrationExcel::VT_CARDBOARDPREFABS, CardBoardPrefabs);
  }
  #[inline]
  pub fn add_BackImagePath(&mut self, BackImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentConcentrationExcel::VT_BACKIMAGEPATH, BackImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentConcentrationExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentConcentrationExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentConcentrationExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentConcentrationExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentConcentrationExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("CostGoodsId", &self.CostGoodsId());
      ds.field("MaxCardPairCount", &self.MaxCardPairCount());
      ds.field("MaxCardOpenCount", &self.MaxCardOpenCount());
      ds.field("InstantClearRound", &self.InstantClearRound());
      ds.field("CardBoardPrefabs", &self.CardBoardPrefabs());
      ds.field("BackImagePath", &self.BackImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentConcentrationExcelT {
  pub EventContentId: i64,
  pub CostGoodsId: i64,
  pub MaxCardPairCount: i32,
  pub MaxCardOpenCount: i32,
  pub InstantClearRound: i32,
  pub CardBoardPrefabs: Option<String>,
  pub BackImagePath: Option<String>,
}
impl Default for EventContentConcentrationExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      CostGoodsId: 0,
      MaxCardPairCount: 0,
      MaxCardOpenCount: 0,
      InstantClearRound: 0,
      CardBoardPrefabs: None,
      BackImagePath: None,
    }
  }
}
impl EventContentConcentrationExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentConcentrationExcel<'b>> {
    let EventContentId = self.EventContentId;
    let CostGoodsId = self.CostGoodsId;
    let MaxCardPairCount = self.MaxCardPairCount;
    let MaxCardOpenCount = self.MaxCardOpenCount;
    let InstantClearRound = self.InstantClearRound;
    let CardBoardPrefabs = self.CardBoardPrefabs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BackImagePath = self.BackImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentConcentrationExcel::create(_fbb, &EventContentConcentrationExcelArgs{
      EventContentId,
      CostGoodsId,
      MaxCardPairCount,
      MaxCardOpenCount,
      InstantClearRound,
      CardBoardPrefabs,
      BackImagePath,
    })
  }
}
