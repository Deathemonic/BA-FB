// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterDialogExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterDialogExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterDialogExcel<'a> {
  type Inner = CharacterDialogExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterDialogExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_COSTUMEUNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_PRODUCTIONSTEP: flatbuffers::VOffsetT = 10;
  pub const VT_DIALOGCATEGORY: flatbuffers::VOffsetT = 12;
  pub const VT_DIALOGCONDITION: flatbuffers::VOffsetT = 14;
  pub const VT_ANNIVERSARY: flatbuffers::VOffsetT = 16;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 18;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 20;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 22;
  pub const VT_DIALOGTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_ACTIONNAME: flatbuffers::VOffsetT = 26;
  pub const VT_DURATION: flatbuffers::VOffsetT = 28;
  pub const VT_ANIMATIONNAME: flatbuffers::VOffsetT = 30;
  pub const VT_LOCALIZEKR: flatbuffers::VOffsetT = 32;
  pub const VT_LOCALIZEJP: flatbuffers::VOffsetT = 34;
  pub const VT_VOICEID: flatbuffers::VOffsetT = 36;
  pub const VT_APPLYPOSITION: flatbuffers::VOffsetT = 38;
  pub const VT_POSX: flatbuffers::VOffsetT = 40;
  pub const VT_POSY: flatbuffers::VOffsetT = 42;
  pub const VT_COLLECTIONVISIBLE: flatbuffers::VOffsetT = 44;
  pub const VT_CVCOLLECTIONTYPE: flatbuffers::VOffsetT = 46;
  pub const VT_UNLOCKFAVORRANK: flatbuffers::VOffsetT = 48;
  pub const VT_UNLOCKEQUIPWEAPON: flatbuffers::VOffsetT = 50;
  pub const VT_LOCALIZECVGROUP: flatbuffers::VOffsetT = 52;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterDialogExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterDialogExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterDialogExcel<'bldr>> {
    let mut builder = CharacterDialogExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterDialog");
      let x = args.UnlockFavorRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UnlockFavorRank(x);
      let x = args.Duration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Duration(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.CostumeUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeUniqueId(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.LocalizeCVGroup {
        builder.add_LocalizeCVGroup(x);
      }
      let x = args.CVCollectionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CVCollectionType(x);
      let x = args.PosY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_PosY(x);
      let x = args.PosX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_PosX(x);
      if let Some(x) = args.VoiceId {
        builder.add_VoiceId(x);
      }
      if let Some(x) = args.LocalizeJP {
        builder.add_LocalizeJP(x);
      }
      if let Some(x) = args.LocalizeKR {
        builder.add_LocalizeKR(x);
      }
      if let Some(x) = args.AnimationName {
        builder.add_AnimationName(x);
      }
      if let Some(x) = args.ActionName {
        builder.add_ActionName(x);
      }
      let x = args.DialogType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DialogType(x);
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
      let x = args.Anniversary;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Anniversary(x);
      let x = args.DialogCondition;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DialogCondition(x);
      let x = args.DialogCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DialogCategory(x);
      let x = args.ProductionStep;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ProductionStep(x);
      builder.add_UnlockEquipWeapon(args.UnlockEquipWeapon);
      builder.add_CollectionVisible(args.CollectionVisible);
      builder.add_ApplyPosition(args.ApplyPosition);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterDialogExcelT {
    let key = table_encryption_service::create_key(b"CharacterDialog");
      let CharacterId = self.CharacterId();
      let CostumeUniqueId = self.CostumeUniqueId();
      let DisplayOrder = self.DisplayOrder();
      let ProductionStep = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ProductionStep(), &key)
      } else {
        self.ProductionStep()
      };
      let DialogCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DialogCategory(), &key)
      } else {
        self.DialogCategory()
      };
      let DialogCondition = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DialogCondition(), &key)
      } else {
        self.DialogCondition()
      };
      let Anniversary = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Anniversary(), &key)
      } else {
        self.Anniversary()
      };
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let GroupId = self.GroupId();
      let DialogType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DialogType(), &key)
      } else {
        self.DialogType()
      };
    let ActionName = self.ActionName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Duration = self.Duration();
    let AnimationName = self.AnimationName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeKR = self.LocalizeKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeJP = self.LocalizeJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VoiceId = self.VoiceId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
      let ApplyPosition = self.ApplyPosition();
      let PosX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.PosX(), &key)
      } else {
        self.PosX()
      };
      let PosY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.PosY(), &key)
      } else {
        self.PosY()
      };
      let CollectionVisible = self.CollectionVisible();
      let CVCollectionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CVCollectionType(), &key)
      } else {
        self.CVCollectionType()
      };
      let UnlockFavorRank = self.UnlockFavorRank();
      let UnlockEquipWeapon = self.UnlockEquipWeapon();
    let LocalizeCVGroup = self.LocalizeCVGroup().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CharacterDialogExcelT {
      CharacterId,
      CostumeUniqueId,
      DisplayOrder,
      ProductionStep,
      DialogCategory,
      DialogCondition,
      Anniversary,
      StartDate,
      EndDate,
      GroupId,
      DialogType,
      ActionName,
      Duration,
      AnimationName,
      LocalizeKR,
      LocalizeJP,
      VoiceId,
      ApplyPosition,
      PosX,
      PosY,
      CollectionVisible,
      CVCollectionType,
      UnlockFavorRank,
      UnlockEquipWeapon,
      LocalizeCVGroup,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostumeUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_COSTUMEUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductionStep(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(CharacterDialogExcel::VT_PRODUCTIONSTEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn DialogCategory(&self) -> DialogCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogCategory>(CharacterDialogExcel::VT_DIALOGCATEGORY, Some(DialogCategory::Cafe)).unwrap()}
  }
  #[inline]
  pub fn DialogCondition(&self) -> DialogCondition {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogCondition>(CharacterDialogExcel::VT_DIALOGCONDITION, Some(DialogCondition::Idle)).unwrap()}
  }
  #[inline]
  pub fn Anniversary(&self) -> Anniversary {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Anniversary>(CharacterDialogExcel::VT_ANNIVERSARY, Some(Anniversary::None)).unwrap()}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DialogType(&self) -> DialogType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogType>(CharacterDialogExcel::VT_DIALOGTYPE, Some(DialogType::Talk)).unwrap()}
  }
  #[inline]
  pub fn ActionName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_ACTIONNAME, None)}
  }
  #[inline]
  pub fn Duration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_DURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimationName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_ANIMATIONNAME, None)}
  }
  #[inline]
  pub fn LocalizeKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_LOCALIZEKR, None)}
  }
  #[inline]
  pub fn LocalizeJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_LOCALIZEJP, None)}
  }
  #[inline]
  pub fn VoiceId(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(CharacterDialogExcel::VT_VOICEID, None)}
  }
  #[inline]
  pub fn ApplyPosition(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogExcel::VT_APPLYPOSITION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn PosX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterDialogExcel::VT_POSX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn PosY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterDialogExcel::VT_POSY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CollectionVisible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogExcel::VT_COLLECTIONVISIBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn CVCollectionType(&self) -> CVCollectionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CVCollectionType>(CharacterDialogExcel::VT_CVCOLLECTIONTYPE, Some(CVCollectionType::CVNormal)).unwrap()}
  }
  #[inline]
  pub fn UnlockFavorRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_UNLOCKFAVORRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UnlockEquipWeapon(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogExcel::VT_UNLOCKEQUIPWEAPON, Some(false)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCVGroup(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_LOCALIZECVGROUP, None)}
  }
}

impl flatbuffers::Verifiable for CharacterDialogExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<i64>("CostumeUniqueId", Self::VT_COSTUMEUNIQUEID, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<ProductionStep>("ProductionStep", Self::VT_PRODUCTIONSTEP, false)?
     .visit_field::<DialogCategory>("DialogCategory", Self::VT_DIALOGCATEGORY, false)?
     .visit_field::<DialogCondition>("DialogCondition", Self::VT_DIALOGCONDITION, false)?
     .visit_field::<Anniversary>("Anniversary", Self::VT_ANNIVERSARY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<DialogType>("DialogType", Self::VT_DIALOGTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ActionName", Self::VT_ACTIONNAME, false)?
     .visit_field::<i64>("Duration", Self::VT_DURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AnimationName", Self::VT_ANIMATIONNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeKR", Self::VT_LOCALIZEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeJP", Self::VT_LOCALIZEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("VoiceId", Self::VT_VOICEID, false)?
     .visit_field::<bool>("ApplyPosition", Self::VT_APPLYPOSITION, false)?
     .visit_field::<f32>("PosX", Self::VT_POSX, false)?
     .visit_field::<f32>("PosY", Self::VT_POSY, false)?
     .visit_field::<bool>("CollectionVisible", Self::VT_COLLECTIONVISIBLE, false)?
     .visit_field::<CVCollectionType>("CVCollectionType", Self::VT_CVCOLLECTIONTYPE, false)?
     .visit_field::<i64>("UnlockFavorRank", Self::VT_UNLOCKFAVORRANK, false)?
     .visit_field::<bool>("UnlockEquipWeapon", Self::VT_UNLOCKEQUIPWEAPON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeCVGroup", Self::VT_LOCALIZECVGROUP, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterDialogExcelArgs<'a> {
    pub CharacterId: i64,
    pub CostumeUniqueId: i64,
    pub DisplayOrder: i64,
    pub ProductionStep: ProductionStep,
    pub DialogCategory: DialogCategory,
    pub DialogCondition: DialogCondition,
    pub Anniversary: Anniversary,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GroupId: i64,
    pub DialogType: DialogType,
    pub ActionName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Duration: i64,
    pub AnimationName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeJP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub ApplyPosition: bool,
    pub PosX: f32,
    pub PosY: f32,
    pub CollectionVisible: bool,
    pub CVCollectionType: CVCollectionType,
    pub UnlockFavorRank: i64,
    pub UnlockEquipWeapon: bool,
    pub LocalizeCVGroup: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CharacterDialogExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterDialogExcelArgs {
      CharacterId: 0,
      CostumeUniqueId: 0,
      DisplayOrder: 0,
      ProductionStep: ProductionStep::ToDo,
      DialogCategory: DialogCategory::Cafe,
      DialogCondition: DialogCondition::Idle,
      Anniversary: Anniversary::None,
      StartDate: None,
      EndDate: None,
      GroupId: 0,
      DialogType: DialogType::Talk,
      ActionName: None,
      Duration: 0,
      AnimationName: None,
      LocalizeKR: None,
      LocalizeJP: None,
      VoiceId: None,
      ApplyPosition: false,
      PosX: 0.0,
      PosY: 0.0,
      CollectionVisible: false,
      CVCollectionType: CVCollectionType::CVNormal,
      UnlockFavorRank: 0,
      UnlockEquipWeapon: false,
      LocalizeCVGroup: None,
    }
  }
}

impl Serialize for CharacterDialogExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterDialogExcel", 25)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("CostumeUniqueId", &self.CostumeUniqueId())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("ProductionStep", &self.ProductionStep())?;
      s.serialize_field("DialogCategory", &self.DialogCategory())?;
      s.serialize_field("DialogCondition", &self.DialogCondition())?;
      s.serialize_field("Anniversary", &self.Anniversary())?;
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("DialogType", &self.DialogType())?;
      if let Some(f) = self.ActionName() {
        s.serialize_field("ActionName", &f)?;
      } else {
        s.skip_field("ActionName")?;
      }
      s.serialize_field("Duration", &self.Duration())?;
      if let Some(f) = self.AnimationName() {
        s.serialize_field("AnimationName", &f)?;
      } else {
        s.skip_field("AnimationName")?;
      }
      if let Some(f) = self.LocalizeKR() {
        s.serialize_field("LocalizeKR", &f)?;
      } else {
        s.skip_field("LocalizeKR")?;
      }
      if let Some(f) = self.LocalizeJP() {
        s.serialize_field("LocalizeJP", &f)?;
      } else {
        s.skip_field("LocalizeJP")?;
      }
      if let Some(f) = self.VoiceId() {
        s.serialize_field("VoiceId", &f)?;
      } else {
        s.skip_field("VoiceId")?;
      }
      s.serialize_field("ApplyPosition", &self.ApplyPosition())?;
      s.serialize_field("PosX", &self.PosX())?;
      s.serialize_field("PosY", &self.PosY())?;
      s.serialize_field("CollectionVisible", &self.CollectionVisible())?;
      s.serialize_field("CVCollectionType", &self.CVCollectionType())?;
      s.serialize_field("UnlockFavorRank", &self.UnlockFavorRank())?;
      s.serialize_field("UnlockEquipWeapon", &self.UnlockEquipWeapon())?;
      if let Some(f) = self.LocalizeCVGroup() {
        s.serialize_field("LocalizeCVGroup", &f)?;
      } else {
        s.skip_field("LocalizeCVGroup")?;
      }
    s.end()
  }
}

pub struct CharacterDialogExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterDialogExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_CostumeUniqueId(&mut self, CostumeUniqueId: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_COSTUMEUNIQUEID, CostumeUniqueId, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_ProductionStep(&mut self, ProductionStep: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(CharacterDialogExcel::VT_PRODUCTIONSTEP, ProductionStep, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_DialogCategory(&mut self, DialogCategory: DialogCategory) {
    self.fbb_.push_slot::<DialogCategory>(CharacterDialogExcel::VT_DIALOGCATEGORY, DialogCategory, DialogCategory::Cafe);
  }
  #[inline]
  pub fn add_DialogCondition(&mut self, DialogCondition: DialogCondition) {
    self.fbb_.push_slot::<DialogCondition>(CharacterDialogExcel::VT_DIALOGCONDITION, DialogCondition, DialogCondition::Idle);
  }
  #[inline]
  pub fn add_Anniversary(&mut self, Anniversary: Anniversary) {
    self.fbb_.push_slot::<Anniversary>(CharacterDialogExcel::VT_ANNIVERSARY, Anniversary, Anniversary::None);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_DialogType(&mut self, DialogType: DialogType) {
    self.fbb_.push_slot::<DialogType>(CharacterDialogExcel::VT_DIALOGTYPE, DialogType, DialogType::Talk);
  }
  #[inline]
  pub fn add_ActionName(&mut self, ActionName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_ACTIONNAME, ActionName);
  }
  #[inline]
  pub fn add_Duration(&mut self, Duration: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_DURATION, Duration, 0);
  }
  #[inline]
  pub fn add_AnimationName(&mut self, AnimationName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_ANIMATIONNAME, AnimationName);
  }
  #[inline]
  pub fn add_LocalizeKR(&mut self, LocalizeKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_LOCALIZEKR, LocalizeKR);
  }
  #[inline]
  pub fn add_LocalizeJP(&mut self, LocalizeJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_LOCALIZEJP, LocalizeJP);
  }
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_VOICEID, VoiceId);
  }
  #[inline]
  pub fn add_ApplyPosition(&mut self, ApplyPosition: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogExcel::VT_APPLYPOSITION, ApplyPosition, false);
  }
  #[inline]
  pub fn add_PosX(&mut self, PosX: f32) {
    self.fbb_.push_slot::<f32>(CharacterDialogExcel::VT_POSX, PosX, 0.0);
  }
  #[inline]
  pub fn add_PosY(&mut self, PosY: f32) {
    self.fbb_.push_slot::<f32>(CharacterDialogExcel::VT_POSY, PosY, 0.0);
  }
  #[inline]
  pub fn add_CollectionVisible(&mut self, CollectionVisible: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogExcel::VT_COLLECTIONVISIBLE, CollectionVisible, false);
  }
  #[inline]
  pub fn add_CVCollectionType(&mut self, CVCollectionType: CVCollectionType) {
    self.fbb_.push_slot::<CVCollectionType>(CharacterDialogExcel::VT_CVCOLLECTIONTYPE, CVCollectionType, CVCollectionType::CVNormal);
  }
  #[inline]
  pub fn add_UnlockFavorRank(&mut self, UnlockFavorRank: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_UNLOCKFAVORRANK, UnlockFavorRank, 0);
  }
  #[inline]
  pub fn add_UnlockEquipWeapon(&mut self, UnlockEquipWeapon: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogExcel::VT_UNLOCKEQUIPWEAPON, UnlockEquipWeapon, false);
  }
  #[inline]
  pub fn add_LocalizeCVGroup(&mut self, LocalizeCVGroup: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_LOCALIZECVGROUP, LocalizeCVGroup);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterDialogExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterDialogExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterDialogExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterDialogExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterDialogExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("CostumeUniqueId", &self.CostumeUniqueId());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("ProductionStep", &self.ProductionStep());
      ds.field("DialogCategory", &self.DialogCategory());
      ds.field("DialogCondition", &self.DialogCondition());
      ds.field("Anniversary", &self.Anniversary());
      ds.field("StartDate", &self.StartDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("GroupId", &self.GroupId());
      ds.field("DialogType", &self.DialogType());
      ds.field("ActionName", &self.ActionName());
      ds.field("Duration", &self.Duration());
      ds.field("AnimationName", &self.AnimationName());
      ds.field("LocalizeKR", &self.LocalizeKR());
      ds.field("LocalizeJP", &self.LocalizeJP());
      ds.field("VoiceId", &self.VoiceId());
      ds.field("ApplyPosition", &self.ApplyPosition());
      ds.field("PosX", &self.PosX());
      ds.field("PosY", &self.PosY());
      ds.field("CollectionVisible", &self.CollectionVisible());
      ds.field("CVCollectionType", &self.CVCollectionType());
      ds.field("UnlockFavorRank", &self.UnlockFavorRank());
      ds.field("UnlockEquipWeapon", &self.UnlockEquipWeapon());
      ds.field("LocalizeCVGroup", &self.LocalizeCVGroup());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterDialogExcelT {
  pub CharacterId: i64,
  pub CostumeUniqueId: i64,
  pub DisplayOrder: i64,
  pub ProductionStep: ProductionStep,
  pub DialogCategory: DialogCategory,
  pub DialogCondition: DialogCondition,
  pub Anniversary: Anniversary,
  pub StartDate: Option<String>,
  pub EndDate: Option<String>,
  pub GroupId: i64,
  pub DialogType: DialogType,
  pub ActionName: Option<String>,
  pub Duration: i64,
  pub AnimationName: Option<String>,
  pub LocalizeKR: Option<String>,
  pub LocalizeJP: Option<String>,
  pub VoiceId: Option<Vec<u32>>,
  pub ApplyPosition: bool,
  pub PosX: f32,
  pub PosY: f32,
  pub CollectionVisible: bool,
  pub CVCollectionType: CVCollectionType,
  pub UnlockFavorRank: i64,
  pub UnlockEquipWeapon: bool,
  pub LocalizeCVGroup: Option<String>,
}
impl Default for CharacterDialogExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      CostumeUniqueId: 0,
      DisplayOrder: 0,
      ProductionStep: ProductionStep::ToDo,
      DialogCategory: DialogCategory::Cafe,
      DialogCondition: DialogCondition::Idle,
      Anniversary: Anniversary::None,
      StartDate: None,
      EndDate: None,
      GroupId: 0,
      DialogType: DialogType::Talk,
      ActionName: None,
      Duration: 0,
      AnimationName: None,
      LocalizeKR: None,
      LocalizeJP: None,
      VoiceId: None,
      ApplyPosition: false,
      PosX: 0.0,
      PosY: 0.0,
      CollectionVisible: false,
      CVCollectionType: CVCollectionType::CVNormal,
      UnlockFavorRank: 0,
      UnlockEquipWeapon: false,
      LocalizeCVGroup: None,
    }
  }
}
impl CharacterDialogExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterDialogExcel<'b>> {
    let CharacterId = self.CharacterId;
    let CostumeUniqueId = self.CostumeUniqueId;
    let DisplayOrder = self.DisplayOrder;
    let ProductionStep = self.ProductionStep;
    let DialogCategory = self.DialogCategory;
    let DialogCondition = self.DialogCondition;
    let Anniversary = self.Anniversary;
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GroupId = self.GroupId;
    let DialogType = self.DialogType;
    let ActionName = self.ActionName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Duration = self.Duration;
    let AnimationName = self.AnimationName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeKR = self.LocalizeKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeJP = self.LocalizeJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceId = self.VoiceId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ApplyPosition = self.ApplyPosition;
    let PosX = self.PosX;
    let PosY = self.PosY;
    let CollectionVisible = self.CollectionVisible;
    let CVCollectionType = self.CVCollectionType;
    let UnlockFavorRank = self.UnlockFavorRank;
    let UnlockEquipWeapon = self.UnlockEquipWeapon;
    let LocalizeCVGroup = self.LocalizeCVGroup.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CharacterDialogExcel::create(_fbb, &CharacterDialogExcelArgs{
      CharacterId,
      CostumeUniqueId,
      DisplayOrder,
      ProductionStep,
      DialogCategory,
      DialogCondition,
      Anniversary,
      StartDate,
      EndDate,
      GroupId,
      DialogType,
      ActionName,
      Duration,
      AnimationName,
      LocalizeKR,
      LocalizeJP,
      VoiceId,
      ApplyPosition,
      PosX,
      PosY,
      CollectionVisible,
      CVCollectionType,
      UnlockFavorRank,
      UnlockEquipWeapon,
      LocalizeCVGroup,
    })
  }
}
