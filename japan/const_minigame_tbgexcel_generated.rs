// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstMinigameTBGExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstMinigameTBGExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstMinigameTBGExcel<'a> {
  type Inner = ConstMinigameTBGExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstMinigameTBGExcel<'a> {
  pub const VT_CONQUESTMAPBOUNDARYOFFSETLEFT: flatbuffers::VOffsetT = 4;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETRIGHT: flatbuffers::VOffsetT = 6;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETTOP: flatbuffers::VOffsetT = 8;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM: flatbuffers::VOffsetT = 10;
  pub const VT_CONQUESTMAPCENTEROFFSETX: flatbuffers::VOffsetT = 12;
  pub const VT_CONQUESTMAPCENTEROFFSETY: flatbuffers::VOffsetT = 14;
  pub const VT_CAMERAANGLE: flatbuffers::VOffsetT = 16;
  pub const VT_CAMERAZOOMMAX: flatbuffers::VOffsetT = 18;
  pub const VT_CAMERAZOOMMIN: flatbuffers::VOffsetT = 20;
  pub const VT_CAMERAZOOMDEFAULT: flatbuffers::VOffsetT = 22;
  pub const VT_THEMALOADINGPROGRESSTIME: flatbuffers::VOffsetT = 24;
  pub const VT_MAPALLYROTATION: flatbuffers::VOffsetT = 26;
  pub const VT_ANIALLYBATTLEATTACK: flatbuffers::VOffsetT = 28;
  pub const VT_EFFECTALLYBATTLEATTACK: flatbuffers::VOffsetT = 30;
  pub const VT_EFFECTALLYBATTLEDAMAGE: flatbuffers::VOffsetT = 32;
  pub const VT_ANIENEMYBATTLEATTACK: flatbuffers::VOffsetT = 34;
  pub const VT_EFFECTENEMYBATTLEATTACK: flatbuffers::VOffsetT = 36;
  pub const VT_EFFECTENEMYBATTLEDAMAGE: flatbuffers::VOffsetT = 38;
  pub const VT_ENCOUNTERALLYROTATION: flatbuffers::VOffsetT = 40;
  pub const VT_ENCOUNTERENEMYROTATION: flatbuffers::VOffsetT = 42;
  pub const VT_ENCOUNTERREWARDRECEIVEINDEX: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstMinigameTBGExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstMinigameTBGExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConstMinigameTBGExcel<'bldr>> {
    let mut builder = ConstMinigameTBGExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstMinigameTBG");
      let x = args.EncounterRewardReceiveIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EncounterRewardReceiveIndex(x);
      let x = args.EncounterEnemyRotation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_EncounterEnemyRotation(x);
      let x = args.EncounterAllyRotation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_EncounterAllyRotation(x);
      if let Some(x) = args.EffectEnemyBattleDamage {
        builder.add_EffectEnemyBattleDamage(x);
      }
      if let Some(x) = args.EffectEnemyBattleAttack {
        builder.add_EffectEnemyBattleAttack(x);
      }
      if let Some(x) = args.AniEnemyBattleAttack {
        builder.add_AniEnemyBattleAttack(x);
      }
      if let Some(x) = args.EffectAllyBattleDamage {
        builder.add_EffectAllyBattleDamage(x);
      }
      if let Some(x) = args.EffectAllyBattleAttack {
        builder.add_EffectAllyBattleAttack(x);
      }
      if let Some(x) = args.AniAllyBattleAttack {
        builder.add_AniAllyBattleAttack(x);
      }
      let x = args.MapAllyRotation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_MapAllyRotation(x);
      let x = args.ThemaLoadingProgressTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ThemaLoadingProgressTime(x);
      let x = args.CameraZoomDefault;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomDefault(x);
      let x = args.CameraZoomMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomMin(x);
      let x = args.CameraZoomMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomMax(x);
      let x = args.CameraAngle;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraAngle(x);
      let x = args.ConquestMapCenterOffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapCenterOffsetY(x);
      let x = args.ConquestMapCenterOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapCenterOffsetX(x);
      let x = args.ConquestMapBoundaryOffsetBottom;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetBottom(x);
      let x = args.ConquestMapBoundaryOffsetTop;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetTop(x);
      let x = args.ConquestMapBoundaryOffsetRight;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetRight(x);
      let x = args.ConquestMapBoundaryOffsetLeft;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetLeft(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConstMinigameTBGExcelT {
    let key = table_encryption_service::create_key(b"ConstMinigameTBG");
      let ConquestMapBoundaryOffsetLeft = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetLeft(), &key)
      } else {
        self.ConquestMapBoundaryOffsetLeft()
      };
      let ConquestMapBoundaryOffsetRight = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetRight(), &key)
      } else {
        self.ConquestMapBoundaryOffsetRight()
      };
      let ConquestMapBoundaryOffsetTop = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetTop(), &key)
      } else {
        self.ConquestMapBoundaryOffsetTop()
      };
      let ConquestMapBoundaryOffsetBottom = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetBottom(), &key)
      } else {
        self.ConquestMapBoundaryOffsetBottom()
      };
      let ConquestMapCenterOffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapCenterOffsetX(), &key)
      } else {
        self.ConquestMapCenterOffsetX()
      };
      let ConquestMapCenterOffsetY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapCenterOffsetY(), &key)
      } else {
        self.ConquestMapCenterOffsetY()
      };
      let CameraAngle = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraAngle(), &key)
      } else {
        self.CameraAngle()
      };
      let CameraZoomMax = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomMax(), &key)
      } else {
        self.CameraZoomMax()
      };
      let CameraZoomMin = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomMin(), &key)
      } else {
        self.CameraZoomMin()
      };
      let CameraZoomDefault = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomDefault(), &key)
      } else {
        self.CameraZoomDefault()
      };
      let ThemaLoadingProgressTime = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ThemaLoadingProgressTime(), &key)
      } else {
        self.ThemaLoadingProgressTime()
      };
      let MapAllyRotation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.MapAllyRotation(), &key)
      } else {
        self.MapAllyRotation()
      };
    let AniAllyBattleAttack = self.AniAllyBattleAttack().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EffectAllyBattleAttack = self.EffectAllyBattleAttack().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EffectAllyBattleDamage = self.EffectAllyBattleDamage().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AniEnemyBattleAttack = self.AniEnemyBattleAttack().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EffectEnemyBattleAttack = self.EffectEnemyBattleAttack().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EffectEnemyBattleDamage = self.EffectEnemyBattleDamage().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EncounterAllyRotation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.EncounterAllyRotation(), &key)
      } else {
        self.EncounterAllyRotation()
      };
      let EncounterEnemyRotation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.EncounterEnemyRotation(), &key)
      } else {
        self.EncounterEnemyRotation()
      };
      let EncounterRewardReceiveIndex = self.EncounterRewardReceiveIndex();
    ConstMinigameTBGExcelT {
      ConquestMapBoundaryOffsetLeft,
      ConquestMapBoundaryOffsetRight,
      ConquestMapBoundaryOffsetTop,
      ConquestMapBoundaryOffsetBottom,
      ConquestMapCenterOffsetX,
      ConquestMapCenterOffsetY,
      CameraAngle,
      CameraZoomMax,
      CameraZoomMin,
      CameraZoomDefault,
      ThemaLoadingProgressTime,
      MapAllyRotation,
      AniAllyBattleAttack,
      EffectAllyBattleAttack,
      EffectAllyBattleDamage,
      AniEnemyBattleAttack,
      EffectEnemyBattleAttack,
      EffectEnemyBattleDamage,
      EncounterAllyRotation,
      EncounterEnemyRotation,
      EncounterRewardReceiveIndex,
    }
  }

  #[inline]
  pub fn ConquestMapBoundaryOffsetLeft(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETLEFT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetRight(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetTop(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETTOP, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetBottom(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapCenterOffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPCENTEROFFSETX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapCenterOffsetY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPCENTEROFFSETY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraAngle(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CAMERAANGLE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomMax(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CAMERAZOOMMAX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomMin(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CAMERAZOOMMIN, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomDefault(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_CAMERAZOOMDEFAULT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ThemaLoadingProgressTime(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_THEMALOADINGPROGRESSTIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn MapAllyRotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_MAPALLYROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn AniAllyBattleAttack(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameTBGExcel::VT_ANIALLYBATTLEATTACK, None)}
  }
  #[inline]
  pub fn EffectAllyBattleAttack(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameTBGExcel::VT_EFFECTALLYBATTLEATTACK, None)}
  }
  #[inline]
  pub fn EffectAllyBattleDamage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameTBGExcel::VT_EFFECTALLYBATTLEDAMAGE, None)}
  }
  #[inline]
  pub fn AniEnemyBattleAttack(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameTBGExcel::VT_ANIENEMYBATTLEATTACK, None)}
  }
  #[inline]
  pub fn EffectEnemyBattleAttack(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameTBGExcel::VT_EFFECTENEMYBATTLEATTACK, None)}
  }
  #[inline]
  pub fn EffectEnemyBattleDamage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameTBGExcel::VT_EFFECTENEMYBATTLEDAMAGE, None)}
  }
  #[inline]
  pub fn EncounterAllyRotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_ENCOUNTERALLYROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn EncounterEnemyRotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameTBGExcel::VT_ENCOUNTERENEMYROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn EncounterRewardReceiveIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameTBGExcel::VT_ENCOUNTERREWARDRECEIVEINDEX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConstMinigameTBGExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetLeft", Self::VT_CONQUESTMAPBOUNDARYOFFSETLEFT, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetRight", Self::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetTop", Self::VT_CONQUESTMAPBOUNDARYOFFSETTOP, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetBottom", Self::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, false)?
     .visit_field::<f32>("ConquestMapCenterOffsetX", Self::VT_CONQUESTMAPCENTEROFFSETX, false)?
     .visit_field::<f32>("ConquestMapCenterOffsetY", Self::VT_CONQUESTMAPCENTEROFFSETY, false)?
     .visit_field::<f32>("CameraAngle", Self::VT_CAMERAANGLE, false)?
     .visit_field::<f32>("CameraZoomMax", Self::VT_CAMERAZOOMMAX, false)?
     .visit_field::<f32>("CameraZoomMin", Self::VT_CAMERAZOOMMIN, false)?
     .visit_field::<f32>("CameraZoomDefault", Self::VT_CAMERAZOOMDEFAULT, false)?
     .visit_field::<f32>("ThemaLoadingProgressTime", Self::VT_THEMALOADINGPROGRESSTIME, false)?
     .visit_field::<f32>("MapAllyRotation", Self::VT_MAPALLYROTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AniAllyBattleAttack", Self::VT_ANIALLYBATTLEATTACK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EffectAllyBattleAttack", Self::VT_EFFECTALLYBATTLEATTACK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EffectAllyBattleDamage", Self::VT_EFFECTALLYBATTLEDAMAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AniEnemyBattleAttack", Self::VT_ANIENEMYBATTLEATTACK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EffectEnemyBattleAttack", Self::VT_EFFECTENEMYBATTLEATTACK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EffectEnemyBattleDamage", Self::VT_EFFECTENEMYBATTLEDAMAGE, false)?
     .visit_field::<f32>("EncounterAllyRotation", Self::VT_ENCOUNTERALLYROTATION, false)?
     .visit_field::<f32>("EncounterEnemyRotation", Self::VT_ENCOUNTERENEMYROTATION, false)?
     .visit_field::<i32>("EncounterRewardReceiveIndex", Self::VT_ENCOUNTERREWARDRECEIVEINDEX, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstMinigameTBGExcelArgs<'a> {
    pub ConquestMapBoundaryOffsetLeft: f32,
    pub ConquestMapBoundaryOffsetRight: f32,
    pub ConquestMapBoundaryOffsetTop: f32,
    pub ConquestMapBoundaryOffsetBottom: f32,
    pub ConquestMapCenterOffsetX: f32,
    pub ConquestMapCenterOffsetY: f32,
    pub CameraAngle: f32,
    pub CameraZoomMax: f32,
    pub CameraZoomMin: f32,
    pub CameraZoomDefault: f32,
    pub ThemaLoadingProgressTime: f32,
    pub MapAllyRotation: f32,
    pub AniAllyBattleAttack: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EffectAllyBattleAttack: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EffectAllyBattleDamage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AniEnemyBattleAttack: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EffectEnemyBattleAttack: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EffectEnemyBattleDamage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EncounterAllyRotation: f32,
    pub EncounterEnemyRotation: f32,
    pub EncounterRewardReceiveIndex: i32,
}
impl<'a> Default for ConstMinigameTBGExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConstMinigameTBGExcelArgs {
      ConquestMapBoundaryOffsetLeft: 0.0,
      ConquestMapBoundaryOffsetRight: 0.0,
      ConquestMapBoundaryOffsetTop: 0.0,
      ConquestMapBoundaryOffsetBottom: 0.0,
      ConquestMapCenterOffsetX: 0.0,
      ConquestMapCenterOffsetY: 0.0,
      CameraAngle: 0.0,
      CameraZoomMax: 0.0,
      CameraZoomMin: 0.0,
      CameraZoomDefault: 0.0,
      ThemaLoadingProgressTime: 0.0,
      MapAllyRotation: 0.0,
      AniAllyBattleAttack: None,
      EffectAllyBattleAttack: None,
      EffectAllyBattleDamage: None,
      AniEnemyBattleAttack: None,
      EffectEnemyBattleAttack: None,
      EffectEnemyBattleDamage: None,
      EncounterAllyRotation: 0.0,
      EncounterEnemyRotation: 0.0,
      EncounterRewardReceiveIndex: 0,
    }
  }
}

impl Serialize for ConstMinigameTBGExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstMinigameTBGExcel", 21)?;
      s.serialize_field("ConquestMapBoundaryOffsetLeft", &self.ConquestMapBoundaryOffsetLeft())?;
      s.serialize_field("ConquestMapBoundaryOffsetRight", &self.ConquestMapBoundaryOffsetRight())?;
      s.serialize_field("ConquestMapBoundaryOffsetTop", &self.ConquestMapBoundaryOffsetTop())?;
      s.serialize_field("ConquestMapBoundaryOffsetBottom", &self.ConquestMapBoundaryOffsetBottom())?;
      s.serialize_field("ConquestMapCenterOffsetX", &self.ConquestMapCenterOffsetX())?;
      s.serialize_field("ConquestMapCenterOffsetY", &self.ConquestMapCenterOffsetY())?;
      s.serialize_field("CameraAngle", &self.CameraAngle())?;
      s.serialize_field("CameraZoomMax", &self.CameraZoomMax())?;
      s.serialize_field("CameraZoomMin", &self.CameraZoomMin())?;
      s.serialize_field("CameraZoomDefault", &self.CameraZoomDefault())?;
      s.serialize_field("ThemaLoadingProgressTime", &self.ThemaLoadingProgressTime())?;
      s.serialize_field("MapAllyRotation", &self.MapAllyRotation())?;
      if let Some(f) = self.AniAllyBattleAttack() {
        s.serialize_field("AniAllyBattleAttack", &f)?;
      } else {
        s.skip_field("AniAllyBattleAttack")?;
      }
      if let Some(f) = self.EffectAllyBattleAttack() {
        s.serialize_field("EffectAllyBattleAttack", &f)?;
      } else {
        s.skip_field("EffectAllyBattleAttack")?;
      }
      if let Some(f) = self.EffectAllyBattleDamage() {
        s.serialize_field("EffectAllyBattleDamage", &f)?;
      } else {
        s.skip_field("EffectAllyBattleDamage")?;
      }
      if let Some(f) = self.AniEnemyBattleAttack() {
        s.serialize_field("AniEnemyBattleAttack", &f)?;
      } else {
        s.skip_field("AniEnemyBattleAttack")?;
      }
      if let Some(f) = self.EffectEnemyBattleAttack() {
        s.serialize_field("EffectEnemyBattleAttack", &f)?;
      } else {
        s.skip_field("EffectEnemyBattleAttack")?;
      }
      if let Some(f) = self.EffectEnemyBattleDamage() {
        s.serialize_field("EffectEnemyBattleDamage", &f)?;
      } else {
        s.skip_field("EffectEnemyBattleDamage")?;
      }
      s.serialize_field("EncounterAllyRotation", &self.EncounterAllyRotation())?;
      s.serialize_field("EncounterEnemyRotation", &self.EncounterEnemyRotation())?;
      s.serialize_field("EncounterRewardReceiveIndex", &self.EncounterRewardReceiveIndex())?;
    s.end()
  }
}

pub struct ConstMinigameTBGExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstMinigameTBGExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetLeft(&mut self, ConquestMapBoundaryOffsetLeft: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETLEFT, ConquestMapBoundaryOffsetLeft, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetRight(&mut self, ConquestMapBoundaryOffsetRight: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, ConquestMapBoundaryOffsetRight, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetTop(&mut self, ConquestMapBoundaryOffsetTop: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETTOP, ConquestMapBoundaryOffsetTop, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetBottom(&mut self, ConquestMapBoundaryOffsetBottom: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, ConquestMapBoundaryOffsetBottom, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapCenterOffsetX(&mut self, ConquestMapCenterOffsetX: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPCENTEROFFSETX, ConquestMapCenterOffsetX, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapCenterOffsetY(&mut self, ConquestMapCenterOffsetY: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CONQUESTMAPCENTEROFFSETY, ConquestMapCenterOffsetY, 0.0);
  }
  #[inline]
  pub fn add_CameraAngle(&mut self, CameraAngle: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CAMERAANGLE, CameraAngle, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomMax(&mut self, CameraZoomMax: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CAMERAZOOMMAX, CameraZoomMax, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomMin(&mut self, CameraZoomMin: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CAMERAZOOMMIN, CameraZoomMin, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomDefault(&mut self, CameraZoomDefault: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_CAMERAZOOMDEFAULT, CameraZoomDefault, 0.0);
  }
  #[inline]
  pub fn add_ThemaLoadingProgressTime(&mut self, ThemaLoadingProgressTime: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_THEMALOADINGPROGRESSTIME, ThemaLoadingProgressTime, 0.0);
  }
  #[inline]
  pub fn add_MapAllyRotation(&mut self, MapAllyRotation: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_MAPALLYROTATION, MapAllyRotation, 0.0);
  }
  #[inline]
  pub fn add_AniAllyBattleAttack(&mut self, AniAllyBattleAttack: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameTBGExcel::VT_ANIALLYBATTLEATTACK, AniAllyBattleAttack);
  }
  #[inline]
  pub fn add_EffectAllyBattleAttack(&mut self, EffectAllyBattleAttack: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameTBGExcel::VT_EFFECTALLYBATTLEATTACK, EffectAllyBattleAttack);
  }
  #[inline]
  pub fn add_EffectAllyBattleDamage(&mut self, EffectAllyBattleDamage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameTBGExcel::VT_EFFECTALLYBATTLEDAMAGE, EffectAllyBattleDamage);
  }
  #[inline]
  pub fn add_AniEnemyBattleAttack(&mut self, AniEnemyBattleAttack: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameTBGExcel::VT_ANIENEMYBATTLEATTACK, AniEnemyBattleAttack);
  }
  #[inline]
  pub fn add_EffectEnemyBattleAttack(&mut self, EffectEnemyBattleAttack: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameTBGExcel::VT_EFFECTENEMYBATTLEATTACK, EffectEnemyBattleAttack);
  }
  #[inline]
  pub fn add_EffectEnemyBattleDamage(&mut self, EffectEnemyBattleDamage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameTBGExcel::VT_EFFECTENEMYBATTLEDAMAGE, EffectEnemyBattleDamage);
  }
  #[inline]
  pub fn add_EncounterAllyRotation(&mut self, EncounterAllyRotation: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_ENCOUNTERALLYROTATION, EncounterAllyRotation, 0.0);
  }
  #[inline]
  pub fn add_EncounterEnemyRotation(&mut self, EncounterEnemyRotation: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameTBGExcel::VT_ENCOUNTERENEMYROTATION, EncounterEnemyRotation, 0.0);
  }
  #[inline]
  pub fn add_EncounterRewardReceiveIndex(&mut self, EncounterRewardReceiveIndex: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameTBGExcel::VT_ENCOUNTERREWARDRECEIVEINDEX, EncounterRewardReceiveIndex, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstMinigameTBGExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstMinigameTBGExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstMinigameTBGExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstMinigameTBGExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstMinigameTBGExcel");
      ds.field("ConquestMapBoundaryOffsetLeft", &self.ConquestMapBoundaryOffsetLeft());
      ds.field("ConquestMapBoundaryOffsetRight", &self.ConquestMapBoundaryOffsetRight());
      ds.field("ConquestMapBoundaryOffsetTop", &self.ConquestMapBoundaryOffsetTop());
      ds.field("ConquestMapBoundaryOffsetBottom", &self.ConquestMapBoundaryOffsetBottom());
      ds.field("ConquestMapCenterOffsetX", &self.ConquestMapCenterOffsetX());
      ds.field("ConquestMapCenterOffsetY", &self.ConquestMapCenterOffsetY());
      ds.field("CameraAngle", &self.CameraAngle());
      ds.field("CameraZoomMax", &self.CameraZoomMax());
      ds.field("CameraZoomMin", &self.CameraZoomMin());
      ds.field("CameraZoomDefault", &self.CameraZoomDefault());
      ds.field("ThemaLoadingProgressTime", &self.ThemaLoadingProgressTime());
      ds.field("MapAllyRotation", &self.MapAllyRotation());
      ds.field("AniAllyBattleAttack", &self.AniAllyBattleAttack());
      ds.field("EffectAllyBattleAttack", &self.EffectAllyBattleAttack());
      ds.field("EffectAllyBattleDamage", &self.EffectAllyBattleDamage());
      ds.field("AniEnemyBattleAttack", &self.AniEnemyBattleAttack());
      ds.field("EffectEnemyBattleAttack", &self.EffectEnemyBattleAttack());
      ds.field("EffectEnemyBattleDamage", &self.EffectEnemyBattleDamage());
      ds.field("EncounterAllyRotation", &self.EncounterAllyRotation());
      ds.field("EncounterEnemyRotation", &self.EncounterEnemyRotation());
      ds.field("EncounterRewardReceiveIndex", &self.EncounterRewardReceiveIndex());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstMinigameTBGExcelT {
  pub ConquestMapBoundaryOffsetLeft: f32,
  pub ConquestMapBoundaryOffsetRight: f32,
  pub ConquestMapBoundaryOffsetTop: f32,
  pub ConquestMapBoundaryOffsetBottom: f32,
  pub ConquestMapCenterOffsetX: f32,
  pub ConquestMapCenterOffsetY: f32,
  pub CameraAngle: f32,
  pub CameraZoomMax: f32,
  pub CameraZoomMin: f32,
  pub CameraZoomDefault: f32,
  pub ThemaLoadingProgressTime: f32,
  pub MapAllyRotation: f32,
  pub AniAllyBattleAttack: Option<String>,
  pub EffectAllyBattleAttack: Option<String>,
  pub EffectAllyBattleDamage: Option<String>,
  pub AniEnemyBattleAttack: Option<String>,
  pub EffectEnemyBattleAttack: Option<String>,
  pub EffectEnemyBattleDamage: Option<String>,
  pub EncounterAllyRotation: f32,
  pub EncounterEnemyRotation: f32,
  pub EncounterRewardReceiveIndex: i32,
}
impl Default for ConstMinigameTBGExcelT {
  fn default() -> Self {
    Self {
      ConquestMapBoundaryOffsetLeft: 0.0,
      ConquestMapBoundaryOffsetRight: 0.0,
      ConquestMapBoundaryOffsetTop: 0.0,
      ConquestMapBoundaryOffsetBottom: 0.0,
      ConquestMapCenterOffsetX: 0.0,
      ConquestMapCenterOffsetY: 0.0,
      CameraAngle: 0.0,
      CameraZoomMax: 0.0,
      CameraZoomMin: 0.0,
      CameraZoomDefault: 0.0,
      ThemaLoadingProgressTime: 0.0,
      MapAllyRotation: 0.0,
      AniAllyBattleAttack: None,
      EffectAllyBattleAttack: None,
      EffectAllyBattleDamage: None,
      AniEnemyBattleAttack: None,
      EffectEnemyBattleAttack: None,
      EffectEnemyBattleDamage: None,
      EncounterAllyRotation: 0.0,
      EncounterEnemyRotation: 0.0,
      EncounterRewardReceiveIndex: 0,
    }
  }
}
impl ConstMinigameTBGExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstMinigameTBGExcel<'b>> {
    let ConquestMapBoundaryOffsetLeft = self.ConquestMapBoundaryOffsetLeft;
    let ConquestMapBoundaryOffsetRight = self.ConquestMapBoundaryOffsetRight;
    let ConquestMapBoundaryOffsetTop = self.ConquestMapBoundaryOffsetTop;
    let ConquestMapBoundaryOffsetBottom = self.ConquestMapBoundaryOffsetBottom;
    let ConquestMapCenterOffsetX = self.ConquestMapCenterOffsetX;
    let ConquestMapCenterOffsetY = self.ConquestMapCenterOffsetY;
    let CameraAngle = self.CameraAngle;
    let CameraZoomMax = self.CameraZoomMax;
    let CameraZoomMin = self.CameraZoomMin;
    let CameraZoomDefault = self.CameraZoomDefault;
    let ThemaLoadingProgressTime = self.ThemaLoadingProgressTime;
    let MapAllyRotation = self.MapAllyRotation;
    let AniAllyBattleAttack = self.AniAllyBattleAttack.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EffectAllyBattleAttack = self.EffectAllyBattleAttack.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EffectAllyBattleDamage = self.EffectAllyBattleDamage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AniEnemyBattleAttack = self.AniEnemyBattleAttack.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EffectEnemyBattleAttack = self.EffectEnemyBattleAttack.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EffectEnemyBattleDamage = self.EffectEnemyBattleDamage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EncounterAllyRotation = self.EncounterAllyRotation;
    let EncounterEnemyRotation = self.EncounterEnemyRotation;
    let EncounterRewardReceiveIndex = self.EncounterRewardReceiveIndex;
    ConstMinigameTBGExcel::create(_fbb, &ConstMinigameTBGExcelArgs{
      ConquestMapBoundaryOffsetLeft,
      ConquestMapBoundaryOffsetRight,
      ConquestMapBoundaryOffsetTop,
      ConquestMapBoundaryOffsetBottom,
      ConquestMapCenterOffsetX,
      ConquestMapCenterOffsetY,
      CameraAngle,
      CameraZoomMax,
      CameraZoomMin,
      CameraZoomDefault,
      ThemaLoadingProgressTime,
      MapAllyRotation,
      AniAllyBattleAttack,
      EffectAllyBattleAttack,
      EffectAllyBattleDamage,
      AniEnemyBattleAttack,
      EffectEnemyBattleAttack,
      EffectEnemyBattleDamage,
      EncounterAllyRotation,
      EncounterEnemyRotation,
      EncounterRewardReceiveIndex,
    })
  }
}
