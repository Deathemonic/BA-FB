// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldQuestExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldQuestExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldQuestExcel<'a> {
  type Inner = FieldQuestExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldQuestExcel<'a> {
  pub const VT_FIELDSEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_ISDAILY: flatbuffers::VOffsetT = 8;
  pub const VT_FIELDDATEID: flatbuffers::VOffsetT = 10;
  pub const VT_OPENDATE: flatbuffers::VOffsetT = 12;
  pub const VT_ASSETPATH: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 16;
  pub const VT_PROB: flatbuffers::VOffsetT = 18;
  pub const VT_QUESTNAMKEY: flatbuffers::VOffsetT = 20;
  pub const VT_QUESTDESCKEY: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldQuestExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldQuestExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldQuestExcel<'bldr>> {
    let mut builder = FieldQuestExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldQuest");
      let x = args.RewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardId(x);
      let x = args.Opendate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Opendate(x);
      let x = args.FieldDateId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FieldDateId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.FieldSeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FieldSeasonId(x);
      let x = args.QuestDescKey;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_QuestDescKey(x);
      let x = args.QuestNamKey;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_QuestNamKey(x);
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      if let Some(x) = args.AssetPath {
        builder.add_AssetPath(x);
      }
      builder.add_IsDaily(args.IsDaily);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldQuestExcelT {
    let key = table_encryption_service::create_key(b"FieldQuest");
      let FieldSeasonId = self.FieldSeasonId();
      let UniqueId = self.UniqueId();
      let IsDaily = self.IsDaily();
      let FieldDateId = self.FieldDateId();
      let Opendate = self.Opendate();
    let AssetPath = self.AssetPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let RewardId = self.RewardId();
      let Prob = self.Prob();
      let QuestNamKey = self.QuestNamKey();
      let QuestDescKey = self.QuestDescKey();
    FieldQuestExcelT {
      FieldSeasonId,
      UniqueId,
      IsDaily,
      FieldDateId,
      Opendate,
      AssetPath,
      RewardId,
      Prob,
      QuestNamKey,
      QuestDescKey,
    }
  }

  #[inline]
  pub fn FieldSeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldQuestExcel::VT_FIELDSEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldQuestExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsDaily(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FieldQuestExcel::VT_ISDAILY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn FieldDateId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldQuestExcel::VT_FIELDDATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Opendate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldQuestExcel::VT_OPENDATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AssetPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldQuestExcel::VT_ASSETPATH, None)}
  }
  #[inline]
  pub fn RewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldQuestExcel::VT_REWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FieldQuestExcel::VT_PROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn QuestNamKey(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FieldQuestExcel::VT_QUESTNAMKEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn QuestDescKey(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FieldQuestExcel::VT_QUESTDESCKEY, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FieldQuestExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("FieldSeasonId", Self::VT_FIELDSEASONID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<bool>("IsDaily", Self::VT_ISDAILY, false)?
     .visit_field::<i64>("FieldDateId", Self::VT_FIELDDATEID, false)?
     .visit_field::<i64>("Opendate", Self::VT_OPENDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AssetPath", Self::VT_ASSETPATH, false)?
     .visit_field::<i64>("RewardId", Self::VT_REWARDID, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .visit_field::<u32>("QuestNamKey", Self::VT_QUESTNAMKEY, false)?
     .visit_field::<u32>("QuestDescKey", Self::VT_QUESTDESCKEY, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldQuestExcelArgs<'a> {
    pub FieldSeasonId: i64,
    pub UniqueId: i64,
    pub IsDaily: bool,
    pub FieldDateId: i64,
    pub Opendate: i64,
    pub AssetPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RewardId: i64,
    pub Prob: i32,
    pub QuestNamKey: u32,
    pub QuestDescKey: u32,
}
impl<'a> Default for FieldQuestExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldQuestExcelArgs {
      FieldSeasonId: 0,
      UniqueId: 0,
      IsDaily: false,
      FieldDateId: 0,
      Opendate: 0,
      AssetPath: None,
      RewardId: 0,
      Prob: 0,
      QuestNamKey: 0,
      QuestDescKey: 0,
    }
  }
}

impl Serialize for FieldQuestExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldQuestExcel", 10)?;
      s.serialize_field("FieldSeasonId", &self.FieldSeasonId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("IsDaily", &self.IsDaily())?;
      s.serialize_field("FieldDateId", &self.FieldDateId())?;
      s.serialize_field("Opendate", &self.Opendate())?;
      if let Some(f) = self.AssetPath() {
        s.serialize_field("AssetPath", &f)?;
      } else {
        s.skip_field("AssetPath")?;
      }
      s.serialize_field("RewardId", &self.RewardId())?;
      s.serialize_field("Prob", &self.Prob())?;
      s.serialize_field("QuestNamKey", &self.QuestNamKey())?;
      s.serialize_field("QuestDescKey", &self.QuestDescKey())?;
    s.end()
  }
}

pub struct FieldQuestExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldQuestExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FieldSeasonId(&mut self, FieldSeasonId: i64) {
    self.fbb_.push_slot::<i64>(FieldQuestExcel::VT_FIELDSEASONID, FieldSeasonId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldQuestExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_IsDaily(&mut self, IsDaily: bool) {
    self.fbb_.push_slot::<bool>(FieldQuestExcel::VT_ISDAILY, IsDaily, false);
  }
  #[inline]
  pub fn add_FieldDateId(&mut self, FieldDateId: i64) {
    self.fbb_.push_slot::<i64>(FieldQuestExcel::VT_FIELDDATEID, FieldDateId, 0);
  }
  #[inline]
  pub fn add_Opendate(&mut self, Opendate: i64) {
    self.fbb_.push_slot::<i64>(FieldQuestExcel::VT_OPENDATE, Opendate, 0);
  }
  #[inline]
  pub fn add_AssetPath(&mut self, AssetPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldQuestExcel::VT_ASSETPATH, AssetPath);
  }
  #[inline]
  pub fn add_RewardId(&mut self, RewardId: i64) {
    self.fbb_.push_slot::<i64>(FieldQuestExcel::VT_REWARDID, RewardId, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(FieldQuestExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn add_QuestNamKey(&mut self, QuestNamKey: u32) {
    self.fbb_.push_slot::<u32>(FieldQuestExcel::VT_QUESTNAMKEY, QuestNamKey, 0);
  }
  #[inline]
  pub fn add_QuestDescKey(&mut self, QuestDescKey: u32) {
    self.fbb_.push_slot::<u32>(FieldQuestExcel::VT_QUESTDESCKEY, QuestDescKey, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldQuestExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldQuestExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldQuestExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldQuestExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldQuestExcel");
      ds.field("FieldSeasonId", &self.FieldSeasonId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("IsDaily", &self.IsDaily());
      ds.field("FieldDateId", &self.FieldDateId());
      ds.field("Opendate", &self.Opendate());
      ds.field("AssetPath", &self.AssetPath());
      ds.field("RewardId", &self.RewardId());
      ds.field("Prob", &self.Prob());
      ds.field("QuestNamKey", &self.QuestNamKey());
      ds.field("QuestDescKey", &self.QuestDescKey());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldQuestExcelT {
  pub FieldSeasonId: i64,
  pub UniqueId: i64,
  pub IsDaily: bool,
  pub FieldDateId: i64,
  pub Opendate: i64,
  pub AssetPath: Option<String>,
  pub RewardId: i64,
  pub Prob: i32,
  pub QuestNamKey: u32,
  pub QuestDescKey: u32,
}
impl Default for FieldQuestExcelT {
  fn default() -> Self {
    Self {
      FieldSeasonId: 0,
      UniqueId: 0,
      IsDaily: false,
      FieldDateId: 0,
      Opendate: 0,
      AssetPath: None,
      RewardId: 0,
      Prob: 0,
      QuestNamKey: 0,
      QuestDescKey: 0,
    }
  }
}
impl FieldQuestExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldQuestExcel<'b>> {
    let FieldSeasonId = self.FieldSeasonId;
    let UniqueId = self.UniqueId;
    let IsDaily = self.IsDaily;
    let FieldDateId = self.FieldDateId;
    let Opendate = self.Opendate;
    let AssetPath = self.AssetPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RewardId = self.RewardId;
    let Prob = self.Prob;
    let QuestNamKey = self.QuestNamKey;
    let QuestDescKey = self.QuestDescKey;
    FieldQuestExcel::create(_fbb, &FieldQuestExcelArgs{
      FieldSeasonId,
      UniqueId,
      IsDaily,
      FieldDateId,
      Opendate,
      AssetPath,
      RewardId,
      Prob,
      QuestNamKey,
      QuestDescKey,
    })
  }
}
