// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SHOP_CATEGORY_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SHOP_CATEGORY_TYPE: i32 = 38;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SHOP_CATEGORY_TYPE: [ShopCategoryType; 39] = [
  ShopCategoryType::General,
  ShopCategoryType::SecretStone,
  ShopCategoryType::Raid,
  ShopCategoryType::Gold,
  ShopCategoryType::Ap,
  ShopCategoryType::PickupGacha,
  ShopCategoryType::NormalGacha,
  ShopCategoryType::PointGacha,
  ShopCategoryType::EventGacha,
  ShopCategoryType::ArenaTicket,
  ShopCategoryType::Arena,
  ShopCategoryType::TutoGacha,
  ShopCategoryType::RecruitSellection,
  ShopCategoryType::EventContent_0,
  ShopCategoryType::EventContent_1,
  ShopCategoryType::EventContent_2,
  ShopCategoryType::EventContent_3,
  ShopCategoryType::EventContent_4,
  ShopCategoryType::_Obsolete,
  ShopCategoryType::LimitedGacha,
  ShopCategoryType::MasterCoin,
  ShopCategoryType::SecretStoneGrowth,
  ShopCategoryType::TicketGacha,
  ShopCategoryType::DirectPayGacha,
  ShopCategoryType::FesGacha,
  ShopCategoryType::TimeAttack,
  ShopCategoryType::Chaser,
  ShopCategoryType::ChaserTicket,
  ShopCategoryType::SchoolDungeonTicket,
  ShopCategoryType::AcademyTicket,
  ShopCategoryType::Special,
  ShopCategoryType::Care,
  ShopCategoryType::BeforehandGacha,
  ShopCategoryType::EliminateRaid,
  ShopCategoryType::GlobalSpecialGacha,
  ShopCategoryType::SelectPickupGacha,
  ShopCategoryType::GemDaily,
  ShopCategoryType::GemWeekly,
  ShopCategoryType::CafeSummonTicket,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ShopCategoryType(pub i32);
#[allow(non_upper_case_globals)]
impl ShopCategoryType {
  pub const General: Self = Self(0);
  pub const SecretStone: Self = Self(1);
  pub const Raid: Self = Self(2);
  pub const Gold: Self = Self(3);
  pub const Ap: Self = Self(4);
  pub const PickupGacha: Self = Self(5);
  pub const NormalGacha: Self = Self(6);
  pub const PointGacha: Self = Self(7);
  pub const EventGacha: Self = Self(8);
  pub const ArenaTicket: Self = Self(9);
  pub const Arena: Self = Self(10);
  pub const TutoGacha: Self = Self(11);
  pub const RecruitSellection: Self = Self(12);
  pub const EventContent_0: Self = Self(13);
  pub const EventContent_1: Self = Self(14);
  pub const EventContent_2: Self = Self(15);
  pub const EventContent_3: Self = Self(16);
  pub const EventContent_4: Self = Self(17);
  pub const _Obsolete: Self = Self(18);
  pub const LimitedGacha: Self = Self(19);
  pub const MasterCoin: Self = Self(20);
  pub const SecretStoneGrowth: Self = Self(21);
  pub const TicketGacha: Self = Self(22);
  pub const DirectPayGacha: Self = Self(23);
  pub const FesGacha: Self = Self(24);
  pub const TimeAttack: Self = Self(25);
  pub const Chaser: Self = Self(26);
  pub const ChaserTicket: Self = Self(27);
  pub const SchoolDungeonTicket: Self = Self(28);
  pub const AcademyTicket: Self = Self(29);
  pub const Special: Self = Self(30);
  pub const Care: Self = Self(31);
  pub const BeforehandGacha: Self = Self(32);
  pub const EliminateRaid: Self = Self(33);
  pub const GlobalSpecialGacha: Self = Self(34);
  pub const SelectPickupGacha: Self = Self(35);
  pub const GemDaily: Self = Self(36);
  pub const GemWeekly: Self = Self(37);
  pub const CafeSummonTicket: Self = Self(38);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 38;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::General,
    Self::SecretStone,
    Self::Raid,
    Self::Gold,
    Self::Ap,
    Self::PickupGacha,
    Self::NormalGacha,
    Self::PointGacha,
    Self::EventGacha,
    Self::ArenaTicket,
    Self::Arena,
    Self::TutoGacha,
    Self::RecruitSellection,
    Self::EventContent_0,
    Self::EventContent_1,
    Self::EventContent_2,
    Self::EventContent_3,
    Self::EventContent_4,
    Self::_Obsolete,
    Self::LimitedGacha,
    Self::MasterCoin,
    Self::SecretStoneGrowth,
    Self::TicketGacha,
    Self::DirectPayGacha,
    Self::FesGacha,
    Self::TimeAttack,
    Self::Chaser,
    Self::ChaserTicket,
    Self::SchoolDungeonTicket,
    Self::AcademyTicket,
    Self::Special,
    Self::Care,
    Self::BeforehandGacha,
    Self::EliminateRaid,
    Self::GlobalSpecialGacha,
    Self::SelectPickupGacha,
    Self::GemDaily,
    Self::GemWeekly,
    Self::CafeSummonTicket,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::General => Some("General"),
      Self::SecretStone => Some("SecretStone"),
      Self::Raid => Some("Raid"),
      Self::Gold => Some("Gold"),
      Self::Ap => Some("Ap"),
      Self::PickupGacha => Some("PickupGacha"),
      Self::NormalGacha => Some("NormalGacha"),
      Self::PointGacha => Some("PointGacha"),
      Self::EventGacha => Some("EventGacha"),
      Self::ArenaTicket => Some("ArenaTicket"),
      Self::Arena => Some("Arena"),
      Self::TutoGacha => Some("TutoGacha"),
      Self::RecruitSellection => Some("RecruitSellection"),
      Self::EventContent_0 => Some("EventContent_0"),
      Self::EventContent_1 => Some("EventContent_1"),
      Self::EventContent_2 => Some("EventContent_2"),
      Self::EventContent_3 => Some("EventContent_3"),
      Self::EventContent_4 => Some("EventContent_4"),
      Self::_Obsolete => Some("_Obsolete"),
      Self::LimitedGacha => Some("LimitedGacha"),
      Self::MasterCoin => Some("MasterCoin"),
      Self::SecretStoneGrowth => Some("SecretStoneGrowth"),
      Self::TicketGacha => Some("TicketGacha"),
      Self::DirectPayGacha => Some("DirectPayGacha"),
      Self::FesGacha => Some("FesGacha"),
      Self::TimeAttack => Some("TimeAttack"),
      Self::Chaser => Some("Chaser"),
      Self::ChaserTicket => Some("ChaserTicket"),
      Self::SchoolDungeonTicket => Some("SchoolDungeonTicket"),
      Self::AcademyTicket => Some("AcademyTicket"),
      Self::Special => Some("Special"),
      Self::Care => Some("Care"),
      Self::BeforehandGacha => Some("BeforehandGacha"),
      Self::EliminateRaid => Some("EliminateRaid"),
      Self::GlobalSpecialGacha => Some("GlobalSpecialGacha"),
      Self::SelectPickupGacha => Some("SelectPickupGacha"),
      Self::GemDaily => Some("GemDaily"),
      Self::GemWeekly => Some("GemWeekly"),
      Self::CafeSummonTicket => Some("CafeSummonTicket"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ShopCategoryType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for ShopCategoryType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("ShopCategoryType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for ShopCategoryType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ShopCategoryType {
    type Output = ShopCategoryType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ShopCategoryType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ShopCategoryType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ShopCategoryType {}
