// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamScheduleResultExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamScheduleResultExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamScheduleResultExcel<'a> {
  type Inner = MiniGameDreamScheduleResultExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamScheduleResultExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_DREAMMAKERRESULT: flatbuffers::VOffsetT = 8;
  pub const VT_DREAMMAKERSCHEDULEGROUP: flatbuffers::VOffsetT = 10;
  pub const VT_PROB: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARAMETER: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARAMETEROPERATIONTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARAMETERAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 22;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamScheduleResultExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamScheduleResultExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamScheduleResultExcel<'bldr>> {
    let mut builder = MiniGameDreamScheduleResultExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamScheduleResult");
      let x = args.RewardParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelAmount(x);
      let x = args.RewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelId(x);
      let x = args.DreamMakerScheduleGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DreamMakerScheduleGroup(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      if let Some(x) = args.RewardParameterAmount {
        builder.add_RewardParameterAmount(x);
      }
      if let Some(x) = args.RewardParameterOperationType {
        builder.add_RewardParameterOperationType(x);
      }
      if let Some(x) = args.RewardParameter {
        builder.add_RewardParameter(x);
      }
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      let x = args.DreamMakerResult;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DreamMakerResult(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamScheduleResultExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamScheduleResult");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let DreamMakerResult = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DreamMakerResult(), &key)
      } else {
        self.DreamMakerResult()
      };
      let DreamMakerScheduleGroup = self.DreamMakerScheduleGroup();
      let Prob = self.Prob();
    let RewardParameter = self.RewardParameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParameterOperationType = self.RewardParameterOperationType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParameterAmount = self.RewardParameterAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelId = self.RewardParcelId();
      let RewardParcelAmount = self.RewardParcelAmount();
    MiniGameDreamScheduleResultExcelT {
      Id,
      EventContentId,
      DreamMakerResult,
      DreamMakerScheduleGroup,
      Prob,
      RewardParameter,
      RewardParameterOperationType,
      RewardParameterAmount,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleResultExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleResultExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerResult(&self) -> DreamMakerResult {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DreamMakerResult>(MiniGameDreamScheduleResultExcel::VT_DREAMMAKERRESULT, Some(DreamMakerResult::None)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerScheduleGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleResultExcel::VT_DREAMMAKERSCHEDULEGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDreamScheduleResultExcel::VT_PROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParameter(&self) -> Option<flatbuffers::Vector<'a, DreamMakerParameterType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, DreamMakerParameterType>>>(MiniGameDreamScheduleResultExcel::VT_REWARDPARAMETER, None)}
  }
  #[inline]
  pub fn RewardParameterOperationType(&self) -> Option<flatbuffers::Vector<'a, DreamMakerParamOperationType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, DreamMakerParamOperationType>>>(MiniGameDreamScheduleResultExcel::VT_REWARDPARAMETEROPERATIONTYPE, None)}
  }
  #[inline]
  pub fn RewardParameterAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameDreamScheduleResultExcel::VT_REWARDPARAMETERAMOUNT, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MiniGameDreamScheduleResultExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleResultExcel::VT_REWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleResultExcel::VT_REWARDPARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamScheduleResultExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<DreamMakerResult>("DreamMakerResult", Self::VT_DREAMMAKERRESULT, false)?
     .visit_field::<i64>("DreamMakerScheduleGroup", Self::VT_DREAMMAKERSCHEDULEGROUP, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, DreamMakerParameterType>>>("RewardParameter", Self::VT_REWARDPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, DreamMakerParamOperationType>>>("RewardParameterOperationType", Self::VT_REWARDPARAMETEROPERATIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParameterAmount", Self::VT_REWARDPARAMETERAMOUNT, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<i64>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamScheduleResultExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub DreamMakerResult: DreamMakerResult,
    pub DreamMakerScheduleGroup: i64,
    pub Prob: i32,
    pub RewardParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, DreamMakerParameterType>>>,
    pub RewardParameterOperationType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, DreamMakerParamOperationType>>>,
    pub RewardParameterAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelType: ParcelType,
    pub RewardParcelId: i64,
    pub RewardParcelAmount: i64,
}
impl<'a> Default for MiniGameDreamScheduleResultExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamScheduleResultExcelArgs {
      Id: 0,
      EventContentId: 0,
      DreamMakerResult: DreamMakerResult::None,
      DreamMakerScheduleGroup: 0,
      Prob: 0,
      RewardParameter: None,
      RewardParameterOperationType: None,
      RewardParameterAmount: None,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
    }
  }
}

impl Serialize for MiniGameDreamScheduleResultExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamScheduleResultExcel", 11)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("DreamMakerResult", &self.DreamMakerResult())?;
      s.serialize_field("DreamMakerScheduleGroup", &self.DreamMakerScheduleGroup())?;
      s.serialize_field("Prob", &self.Prob())?;
      if let Some(f) = self.RewardParameter() {
        s.serialize_field("RewardParameter", &f)?;
      } else {
        s.skip_field("RewardParameter")?;
      }
      if let Some(f) = self.RewardParameterOperationType() {
        s.serialize_field("RewardParameterOperationType", &f)?;
      } else {
        s.skip_field("RewardParameterOperationType")?;
      }
      if let Some(f) = self.RewardParameterAmount() {
        s.serialize_field("RewardParameterAmount", &f)?;
      } else {
        s.skip_field("RewardParameterAmount")?;
      }
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelId", &self.RewardParcelId())?;
      s.serialize_field("RewardParcelAmount", &self.RewardParcelAmount())?;
    s.end()
  }
}

pub struct MiniGameDreamScheduleResultExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamScheduleResultExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleResultExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleResultExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_DreamMakerResult(&mut self, DreamMakerResult: DreamMakerResult) {
    self.fbb_.push_slot::<DreamMakerResult>(MiniGameDreamScheduleResultExcel::VT_DREAMMAKERRESULT, DreamMakerResult, DreamMakerResult::None);
  }
  #[inline]
  pub fn add_DreamMakerScheduleGroup(&mut self, DreamMakerScheduleGroup: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleResultExcel::VT_DREAMMAKERSCHEDULEGROUP, DreamMakerScheduleGroup, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDreamScheduleResultExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn add_RewardParameter(&mut self, RewardParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , DreamMakerParameterType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamScheduleResultExcel::VT_REWARDPARAMETER, RewardParameter);
  }
  #[inline]
  pub fn add_RewardParameterOperationType(&mut self, RewardParameterOperationType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , DreamMakerParamOperationType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamScheduleResultExcel::VT_REWARDPARAMETEROPERATIONTYPE, RewardParameterOperationType);
  }
  #[inline]
  pub fn add_RewardParameterAmount(&mut self, RewardParameterAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamScheduleResultExcel::VT_REWARDPARAMETERAMOUNT, RewardParameterAmount);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MiniGameDreamScheduleResultExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleResultExcel::VT_REWARDPARCELID, RewardParcelId, 0);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleResultExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamScheduleResultExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamScheduleResultExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamScheduleResultExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamScheduleResultExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamScheduleResultExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("DreamMakerResult", &self.DreamMakerResult());
      ds.field("DreamMakerScheduleGroup", &self.DreamMakerScheduleGroup());
      ds.field("Prob", &self.Prob());
      ds.field("RewardParameter", &self.RewardParameter());
      ds.field("RewardParameterOperationType", &self.RewardParameterOperationType());
      ds.field("RewardParameterAmount", &self.RewardParameterAmount());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamScheduleResultExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub DreamMakerResult: DreamMakerResult,
  pub DreamMakerScheduleGroup: i64,
  pub Prob: i32,
  pub RewardParameter: Option<Vec<DreamMakerParameterType>>,
  pub RewardParameterOperationType: Option<Vec<DreamMakerParamOperationType>>,
  pub RewardParameterAmount: Option<Vec<i64>>,
  pub RewardParcelType: ParcelType,
  pub RewardParcelId: i64,
  pub RewardParcelAmount: i64,
}
impl Default for MiniGameDreamScheduleResultExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      DreamMakerResult: DreamMakerResult::None,
      DreamMakerScheduleGroup: 0,
      Prob: 0,
      RewardParameter: None,
      RewardParameterOperationType: None,
      RewardParameterAmount: None,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
    }
  }
}
impl MiniGameDreamScheduleResultExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamScheduleResultExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let DreamMakerResult = self.DreamMakerResult;
    let DreamMakerScheduleGroup = self.DreamMakerScheduleGroup;
    let Prob = self.Prob;
    let RewardParameter = self.RewardParameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParameterOperationType = self.RewardParameterOperationType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParameterAmount = self.RewardParameterAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelId = self.RewardParcelId;
    let RewardParcelAmount = self.RewardParcelAmount;
    MiniGameDreamScheduleResultExcel::create(_fbb, &MiniGameDreamScheduleResultExcelArgs{
      Id,
      EventContentId,
      DreamMakerResult,
      DreamMakerScheduleGroup,
      Prob,
      RewardParameter,
      RewardParameterOperationType,
      RewardParameterAmount,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    })
  }
}
