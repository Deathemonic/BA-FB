// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioCharacterNameExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioCharacterNameExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioCharacterNameExcel<'a> {
  type Inner = ScenarioCharacterNameExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioCharacterNameExcel<'a> {
  pub const VT_CHARACTERNAME: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTIONSTEP: flatbuffers::VOffsetT = 6;
  pub const VT_NAMEKR: flatbuffers::VOffsetT = 8;
  pub const VT_NICKNAMEKR: flatbuffers::VOffsetT = 10;
  pub const VT_NAMEJP: flatbuffers::VOffsetT = 12;
  pub const VT_NICKNAMEJP: flatbuffers::VOffsetT = 14;
  pub const VT_SHAPE: flatbuffers::VOffsetT = 16;
  pub const VT_SPINEPREFABNAME: flatbuffers::VOffsetT = 18;
  pub const VT_SMALLPORTRAIT: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioCharacterNameExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioCharacterNameExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioCharacterNameExcel<'bldr>> {
    let mut builder = ScenarioCharacterNameExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioCharacterName");
      if let Some(x) = args.SmallPortrait {
        builder.add_SmallPortrait(x);
      }
      if let Some(x) = args.SpinePrefabName {
        builder.add_SpinePrefabName(x);
      }
      let x = args.Shape;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Shape(x);
      if let Some(x) = args.NicknameJP {
        builder.add_NicknameJP(x);
      }
      if let Some(x) = args.NameJP {
        builder.add_NameJP(x);
      }
      if let Some(x) = args.NicknameKR {
        builder.add_NicknameKR(x);
      }
      if let Some(x) = args.NameKR {
        builder.add_NameKR(x);
      }
      let x = args.ProductionStep;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ProductionStep(x);
      let x = args.CharacterName;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_CharacterName(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioCharacterNameExcelT {
    let key = table_encryption_service::create_key(b"ScenarioCharacterName");
      let CharacterName = self.CharacterName();
      let ProductionStep = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ProductionStep(), &key)
      } else {
        self.ProductionStep()
      };
    let NameKR = self.NameKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let NicknameKR = self.NicknameKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let NameJP = self.NameJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let NicknameJP = self.NicknameJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Shape = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Shape(), &key)
      } else {
        self.Shape()
      };
    let SpinePrefabName = self.SpinePrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SmallPortrait = self.SmallPortrait().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ScenarioCharacterNameExcelT {
      CharacterName,
      ProductionStep,
      NameKR,
      NicknameKR,
      NameJP,
      NicknameJP,
      Shape,
      SpinePrefabName,
      SmallPortrait,
    }
  }

  #[inline]
  pub fn CharacterName(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioCharacterNameExcel::VT_CHARACTERNAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductionStep(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(ScenarioCharacterNameExcel::VT_PRODUCTIONSTEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn NameKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterNameExcel::VT_NAMEKR, None)}
  }
  #[inline]
  pub fn NicknameKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterNameExcel::VT_NICKNAMEKR, None)}
  }
  #[inline]
  pub fn NameJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterNameExcel::VT_NAMEJP, None)}
  }
  #[inline]
  pub fn NicknameJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterNameExcel::VT_NICKNAMEJP, None)}
  }
  #[inline]
  pub fn Shape(&self) -> ScenarioCharacterShapes {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ScenarioCharacterShapes>(ScenarioCharacterNameExcel::VT_SHAPE, Some(ScenarioCharacterShapes::None)).unwrap()}
  }
  #[inline]
  pub fn SpinePrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterNameExcel::VT_SPINEPREFABNAME, None)}
  }
  #[inline]
  pub fn SmallPortrait(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterNameExcel::VT_SMALLPORTRAIT, None)}
  }
}

impl flatbuffers::Verifiable for ScenarioCharacterNameExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("CharacterName", Self::VT_CHARACTERNAME, false)?
     .visit_field::<ProductionStep>("ProductionStep", Self::VT_PRODUCTIONSTEP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NameKR", Self::VT_NAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NicknameKR", Self::VT_NICKNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NameJP", Self::VT_NAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NicknameJP", Self::VT_NICKNAMEJP, false)?
     .visit_field::<ScenarioCharacterShapes>("Shape", Self::VT_SHAPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpinePrefabName", Self::VT_SPINEPREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SmallPortrait", Self::VT_SMALLPORTRAIT, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioCharacterNameExcelArgs<'a> {
    pub CharacterName: u32,
    pub ProductionStep: ProductionStep,
    pub NameKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NicknameKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NameJP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NicknameJP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Shape: ScenarioCharacterShapes,
    pub SpinePrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SmallPortrait: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ScenarioCharacterNameExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioCharacterNameExcelArgs {
      CharacterName: 0,
      ProductionStep: ProductionStep::ToDo,
      NameKR: None,
      NicknameKR: None,
      NameJP: None,
      NicknameJP: None,
      Shape: ScenarioCharacterShapes::None,
      SpinePrefabName: None,
      SmallPortrait: None,
    }
  }
}

impl Serialize for ScenarioCharacterNameExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioCharacterNameExcel", 9)?;
      s.serialize_field("CharacterName", &self.CharacterName())?;
      s.serialize_field("ProductionStep", &self.ProductionStep())?;
      if let Some(f) = self.NameKR() {
        s.serialize_field("NameKR", &f)?;
      } else {
        s.skip_field("NameKR")?;
      }
      if let Some(f) = self.NicknameKR() {
        s.serialize_field("NicknameKR", &f)?;
      } else {
        s.skip_field("NicknameKR")?;
      }
      if let Some(f) = self.NameJP() {
        s.serialize_field("NameJP", &f)?;
      } else {
        s.skip_field("NameJP")?;
      }
      if let Some(f) = self.NicknameJP() {
        s.serialize_field("NicknameJP", &f)?;
      } else {
        s.skip_field("NicknameJP")?;
      }
      s.serialize_field("Shape", &self.Shape())?;
      if let Some(f) = self.SpinePrefabName() {
        s.serialize_field("SpinePrefabName", &f)?;
      } else {
        s.skip_field("SpinePrefabName")?;
      }
      if let Some(f) = self.SmallPortrait() {
        s.serialize_field("SmallPortrait", &f)?;
      } else {
        s.skip_field("SmallPortrait")?;
      }
    s.end()
  }
}

pub struct ScenarioCharacterNameExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioCharacterNameExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterName(&mut self, CharacterName: u32) {
    self.fbb_.push_slot::<u32>(ScenarioCharacterNameExcel::VT_CHARACTERNAME, CharacterName, 0);
  }
  #[inline]
  pub fn add_ProductionStep(&mut self, ProductionStep: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(ScenarioCharacterNameExcel::VT_PRODUCTIONSTEP, ProductionStep, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_NameKR(&mut self, NameKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterNameExcel::VT_NAMEKR, NameKR);
  }
  #[inline]
  pub fn add_NicknameKR(&mut self, NicknameKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterNameExcel::VT_NICKNAMEKR, NicknameKR);
  }
  #[inline]
  pub fn add_NameJP(&mut self, NameJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterNameExcel::VT_NAMEJP, NameJP);
  }
  #[inline]
  pub fn add_NicknameJP(&mut self, NicknameJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterNameExcel::VT_NICKNAMEJP, NicknameJP);
  }
  #[inline]
  pub fn add_Shape(&mut self, Shape: ScenarioCharacterShapes) {
    self.fbb_.push_slot::<ScenarioCharacterShapes>(ScenarioCharacterNameExcel::VT_SHAPE, Shape, ScenarioCharacterShapes::None);
  }
  #[inline]
  pub fn add_SpinePrefabName(&mut self, SpinePrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterNameExcel::VT_SPINEPREFABNAME, SpinePrefabName);
  }
  #[inline]
  pub fn add_SmallPortrait(&mut self, SmallPortrait: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterNameExcel::VT_SMALLPORTRAIT, SmallPortrait);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioCharacterNameExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioCharacterNameExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioCharacterNameExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioCharacterNameExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioCharacterNameExcel");
      ds.field("CharacterName", &self.CharacterName());
      ds.field("ProductionStep", &self.ProductionStep());
      ds.field("NameKR", &self.NameKR());
      ds.field("NicknameKR", &self.NicknameKR());
      ds.field("NameJP", &self.NameJP());
      ds.field("NicknameJP", &self.NicknameJP());
      ds.field("Shape", &self.Shape());
      ds.field("SpinePrefabName", &self.SpinePrefabName());
      ds.field("SmallPortrait", &self.SmallPortrait());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioCharacterNameExcelT {
  pub CharacterName: u32,
  pub ProductionStep: ProductionStep,
  pub NameKR: Option<String>,
  pub NicknameKR: Option<String>,
  pub NameJP: Option<String>,
  pub NicknameJP: Option<String>,
  pub Shape: ScenarioCharacterShapes,
  pub SpinePrefabName: Option<String>,
  pub SmallPortrait: Option<String>,
}
impl Default for ScenarioCharacterNameExcelT {
  fn default() -> Self {
    Self {
      CharacterName: 0,
      ProductionStep: ProductionStep::ToDo,
      NameKR: None,
      NicknameKR: None,
      NameJP: None,
      NicknameJP: None,
      Shape: ScenarioCharacterShapes::None,
      SpinePrefabName: None,
      SmallPortrait: None,
    }
  }
}
impl ScenarioCharacterNameExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioCharacterNameExcel<'b>> {
    let CharacterName = self.CharacterName;
    let ProductionStep = self.ProductionStep;
    let NameKR = self.NameKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NicknameKR = self.NicknameKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NameJP = self.NameJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NicknameJP = self.NicknameJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Shape = self.Shape;
    let SpinePrefabName = self.SpinePrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SmallPortrait = self.SmallPortrait.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ScenarioCharacterNameExcel::create(_fbb, &ScenarioCharacterNameExcelArgs{
      CharacterName,
      ProductionStep,
      NameKR,
      NicknameKR,
      NameJP,
      NicknameJP,
      Shape,
      SpinePrefabName,
      SmallPortrait,
    })
  }
}
