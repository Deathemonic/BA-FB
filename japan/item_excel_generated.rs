// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ItemExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ItemExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemExcel<'a> {
  type Inner = ItemExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_RARITY: flatbuffers::VOffsetT = 8;
  pub const VT_PRODUCTIONSTEP: flatbuffers::VOffsetT = 10;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 12;
  pub const VT_ITEMCATEGORY: flatbuffers::VOffsetT = 14;
  pub const VT_QUALITY: flatbuffers::VOffsetT = 16;
  pub const VT_ICON: flatbuffers::VOffsetT = 18;
  pub const VT_SPRITENAME: flatbuffers::VOffsetT = 20;
  pub const VT_STACKABLEMAX: flatbuffers::VOffsetT = 22;
  pub const VT_STACKABLEFUNCTION: flatbuffers::VOffsetT = 24;
  pub const VT_IMMEDIATEUSE: flatbuffers::VOffsetT = 26;
  pub const VT_USINGRESULTPARCELTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_USINGRESULTID: flatbuffers::VOffsetT = 30;
  pub const VT_USINGRESULTAMOUNT: flatbuffers::VOffsetT = 32;
  pub const VT_MAILTYPE: flatbuffers::VOffsetT = 34;
  pub const VT_EXPIRYCHANGEPARCELTYPE: flatbuffers::VOffsetT = 36;
  pub const VT_EXPIRYCHANGEID: flatbuffers::VOffsetT = 38;
  pub const VT_EXPIRYCHANGEAMOUNT: flatbuffers::VOffsetT = 40;
  pub const VT_CANTIERUPGRADE: flatbuffers::VOffsetT = 42;
  pub const VT_TIERUPGRADERECIPECRAFTID: flatbuffers::VOffsetT = 44;
  pub const VT_TAGS: flatbuffers::VOffsetT = 46;
  pub const VT_CRAFTQUALITYTIER0: flatbuffers::VOffsetT = 48;
  pub const VT_CRAFTQUALITYTIER1: flatbuffers::VOffsetT = 50;
  pub const VT_CRAFTQUALITYTIER2: flatbuffers::VOffsetT = 52;
  pub const VT_SHIFTINGCRAFTQUALITY: flatbuffers::VOffsetT = 54;
  pub const VT_MAXGIFTTAGS: flatbuffers::VOffsetT = 56;
  pub const VT_SHOPCATEGORY: flatbuffers::VOffsetT = 58;
  pub const VT_EXPIRATIONDATETIME: flatbuffers::VOffsetT = 60;
  pub const VT_EXPIRATIONNOTIFYDATEIN: flatbuffers::VOffsetT = 62;
  pub const VT_SHORTCUTTYPEID: flatbuffers::VOffsetT = 64;
  pub const VT_GACHATICKET: flatbuffers::VOffsetT = 66;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ItemExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ItemExcel<'bldr>> {
    let mut builder = ItemExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Item");
      let x = args.ShortcutTypeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShortcutTypeId(x);
      let x = args.ShiftingCraftQuality;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShiftingCraftQuality(x);
      let x = args.CraftQualityTier2;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier2(x);
      let x = args.CraftQualityTier1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier1(x);
      let x = args.CraftQualityTier0;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier0(x);
      let x = args.TierUpgradeRecipeCraftId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TierUpgradeRecipeCraftId(x);
      let x = args.ExpiryChangeAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExpiryChangeAmount(x);
      let x = args.ExpiryChangeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExpiryChangeId(x);
      let x = args.UsingResultAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UsingResultAmount(x);
      let x = args.UsingResultId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UsingResultId(x);
      let x = args.Quality;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Quality(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.GachaTicket;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_GachaTicket(x);
      let x = args.ExpirationNotifyDateIn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExpirationNotifyDateIn(x);
      if let Some(x) = args.ExpirationDateTime {
        builder.add_ExpirationDateTime(x);
      }
      if let Some(x) = args.ShopCategory {
        builder.add_ShopCategory(x);
      }
      let x = args.MaxGiftTags;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxGiftTags(x);
      if let Some(x) = args.Tags {
        builder.add_Tags(x);
      }
      let x = args.ExpiryChangeParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ExpiryChangeParcelType(x);
      let x = args.MailType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MailType(x);
      let x = args.UsingResultParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_UsingResultParcelType(x);
      let x = args.StackableFunction;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StackableFunction(x);
      let x = args.StackableMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StackableMax(x);
      if let Some(x) = args.SpriteName {
        builder.add_SpriteName(x);
      }
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      let x = args.ItemCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ItemCategory(x);
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.ProductionStep;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ProductionStep(x);
      let x = args.Rarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Rarity(x);
      builder.add_CanTierUpgrade(args.CanTierUpgrade);
      builder.add_ImmediateUse(args.ImmediateUse);
    builder.finish()
  }

  pub fn unpack(&self) -> ItemExcelT {
    let key = table_encryption_service::create_key(b"Item");
      let Id = self.Id();
      let GroupId = self.GroupId();
      let Rarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Rarity(), &key)
      } else {
        self.Rarity()
      };
      let ProductionStep = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ProductionStep(), &key)
      } else {
        self.ProductionStep()
      };
      let LocalizeEtcId = self.LocalizeEtcId();
      let ItemCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ItemCategory(), &key)
      } else {
        self.ItemCategory()
      };
      let Quality = self.Quality();
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SpriteName = self.SpriteName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StackableMax = self.StackableMax();
      let StackableFunction = self.StackableFunction();
      let ImmediateUse = self.ImmediateUse();
      let UsingResultParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.UsingResultParcelType(), &key)
      } else {
        self.UsingResultParcelType()
      };
      let UsingResultId = self.UsingResultId();
      let UsingResultAmount = self.UsingResultAmount();
      let MailType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MailType(), &key)
      } else {
        self.MailType()
      };
      let ExpiryChangeParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ExpiryChangeParcelType(), &key)
      } else {
        self.ExpiryChangeParcelType()
      };
      let ExpiryChangeId = self.ExpiryChangeId();
      let ExpiryChangeAmount = self.ExpiryChangeAmount();
      let CanTierUpgrade = self.CanTierUpgrade();
      let TierUpgradeRecipeCraftId = self.TierUpgradeRecipeCraftId();
    let Tags = self.Tags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let CraftQualityTier0 = self.CraftQualityTier0();
      let CraftQualityTier1 = self.CraftQualityTier1();
      let CraftQualityTier2 = self.CraftQualityTier2();
      let ShiftingCraftQuality = self.ShiftingCraftQuality();
      let MaxGiftTags = self.MaxGiftTags();
    let ShopCategory = self.ShopCategory().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ExpirationDateTime = self.ExpirationDateTime().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ExpirationNotifyDateIn = self.ExpirationNotifyDateIn();
      let ShortcutTypeId = self.ShortcutTypeId();
      let GachaTicket = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.GachaTicket(), &key)
      } else {
        self.GachaTicket()
      };
    ItemExcelT {
      Id,
      GroupId,
      Rarity,
      ProductionStep,
      LocalizeEtcId,
      ItemCategory,
      Quality,
      Icon,
      SpriteName,
      StackableMax,
      StackableFunction,
      ImmediateUse,
      UsingResultParcelType,
      UsingResultId,
      UsingResultAmount,
      MailType,
      ExpiryChangeParcelType,
      ExpiryChangeId,
      ExpiryChangeAmount,
      CanTierUpgrade,
      TierUpgradeRecipeCraftId,
      Tags,
      CraftQualityTier0,
      CraftQualityTier1,
      CraftQualityTier2,
      ShiftingCraftQuality,
      MaxGiftTags,
      ShopCategory,
      ExpirationDateTime,
      ExpirationNotifyDateIn,
      ShortcutTypeId,
      GachaTicket,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(ItemExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn ProductionStep(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(ItemExcel::VT_PRODUCTIONSTEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ItemExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ItemCategory(&self) -> ItemCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ItemCategory>(ItemExcel::VT_ITEMCATEGORY, Some(ItemCategory::Coin)).unwrap()}
  }
  #[inline]
  pub fn Quality(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_QUALITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemExcel::VT_ICON, None)}
  }
  #[inline]
  pub fn SpriteName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemExcel::VT_SPRITENAME, None)}
  }
  #[inline]
  pub fn StackableMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ItemExcel::VT_STACKABLEMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StackableFunction(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ItemExcel::VT_STACKABLEFUNCTION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ImmediateUse(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ItemExcel::VT_IMMEDIATEUSE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn UsingResultParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ItemExcel::VT_USINGRESULTPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn UsingResultId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_USINGRESULTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UsingResultAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_USINGRESULTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MailType(&self) -> MailType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MailType>(ItemExcel::VT_MAILTYPE, Some(MailType::System)).unwrap()}
  }
  #[inline]
  pub fn ExpiryChangeParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ItemExcel::VT_EXPIRYCHANGEPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ExpiryChangeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_EXPIRYCHANGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExpiryChangeAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_EXPIRYCHANGEAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CanTierUpgrade(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ItemExcel::VT_CANTIERUPGRADE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn TierUpgradeRecipeCraftId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_TIERUPGRADERECIPECRAFTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(ItemExcel::VT_TAGS, None)}
  }
  #[inline]
  pub fn CraftQualityTier0(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_CRAFTQUALITYTIER0, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CraftQualityTier1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_CRAFTQUALITYTIER1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CraftQualityTier2(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_CRAFTQUALITYTIER2, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShiftingCraftQuality(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_SHIFTINGCRAFTQUALITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxGiftTags(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ItemExcel::VT_MAXGIFTTAGS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopCategory(&self) -> Option<flatbuffers::Vector<'a, ShopCategoryType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ShopCategoryType>>>(ItemExcel::VT_SHOPCATEGORY, None)}
  }
  #[inline]
  pub fn ExpirationDateTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemExcel::VT_EXPIRATIONDATETIME, None)}
  }
  #[inline]
  pub fn ExpirationNotifyDateIn(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ItemExcel::VT_EXPIRATIONNOTIFYDATEIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShortcutTypeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ItemExcel::VT_SHORTCUTTYPEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GachaTicket(&self) -> GachaTicketType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GachaTicketType>(ItemExcel::VT_GACHATICKET, Some(GachaTicketType::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ItemExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<Rarity>("Rarity", Self::VT_RARITY, false)?
     .visit_field::<ProductionStep>("ProductionStep", Self::VT_PRODUCTIONSTEP, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<ItemCategory>("ItemCategory", Self::VT_ITEMCATEGORY, false)?
     .visit_field::<i64>("Quality", Self::VT_QUALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpriteName", Self::VT_SPRITENAME, false)?
     .visit_field::<i32>("StackableMax", Self::VT_STACKABLEMAX, false)?
     .visit_field::<i32>("StackableFunction", Self::VT_STACKABLEFUNCTION, false)?
     .visit_field::<bool>("ImmediateUse", Self::VT_IMMEDIATEUSE, false)?
     .visit_field::<ParcelType>("UsingResultParcelType", Self::VT_USINGRESULTPARCELTYPE, false)?
     .visit_field::<i64>("UsingResultId", Self::VT_USINGRESULTID, false)?
     .visit_field::<i64>("UsingResultAmount", Self::VT_USINGRESULTAMOUNT, false)?
     .visit_field::<MailType>("MailType", Self::VT_MAILTYPE, false)?
     .visit_field::<ParcelType>("ExpiryChangeParcelType", Self::VT_EXPIRYCHANGEPARCELTYPE, false)?
     .visit_field::<i64>("ExpiryChangeId", Self::VT_EXPIRYCHANGEID, false)?
     .visit_field::<i64>("ExpiryChangeAmount", Self::VT_EXPIRYCHANGEAMOUNT, false)?
     .visit_field::<bool>("CanTierUpgrade", Self::VT_CANTIERUPGRADE, false)?
     .visit_field::<i64>("TierUpgradeRecipeCraftId", Self::VT_TIERUPGRADERECIPECRAFTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("Tags", Self::VT_TAGS, false)?
     .visit_field::<i64>("CraftQualityTier0", Self::VT_CRAFTQUALITYTIER0, false)?
     .visit_field::<i64>("CraftQualityTier1", Self::VT_CRAFTQUALITYTIER1, false)?
     .visit_field::<i64>("CraftQualityTier2", Self::VT_CRAFTQUALITYTIER2, false)?
     .visit_field::<i64>("ShiftingCraftQuality", Self::VT_SHIFTINGCRAFTQUALITY, false)?
     .visit_field::<i32>("MaxGiftTags", Self::VT_MAXGIFTTAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ShopCategoryType>>>("ShopCategory", Self::VT_SHOPCATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ExpirationDateTime", Self::VT_EXPIRATIONDATETIME, false)?
     .visit_field::<i32>("ExpirationNotifyDateIn", Self::VT_EXPIRATIONNOTIFYDATEIN, false)?
     .visit_field::<i64>("ShortcutTypeId", Self::VT_SHORTCUTTYPEID, false)?
     .visit_field::<GachaTicketType>("GachaTicket", Self::VT_GACHATICKET, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemExcelArgs<'a> {
    pub Id: i64,
    pub GroupId: i64,
    pub Rarity: Rarity,
    pub ProductionStep: ProductionStep,
    pub LocalizeEtcId: u32,
    pub ItemCategory: ItemCategory,
    pub Quality: i64,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpriteName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StackableMax: i32,
    pub StackableFunction: i32,
    pub ImmediateUse: bool,
    pub UsingResultParcelType: ParcelType,
    pub UsingResultId: i64,
    pub UsingResultAmount: i64,
    pub MailType: MailType,
    pub ExpiryChangeParcelType: ParcelType,
    pub ExpiryChangeId: i64,
    pub ExpiryChangeAmount: i64,
    pub CanTierUpgrade: bool,
    pub TierUpgradeRecipeCraftId: i64,
    pub Tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub CraftQualityTier0: i64,
    pub CraftQualityTier1: i64,
    pub CraftQualityTier2: i64,
    pub ShiftingCraftQuality: i64,
    pub MaxGiftTags: i32,
    pub ShopCategory: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ShopCategoryType>>>,
    pub ExpirationDateTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ExpirationNotifyDateIn: i32,
    pub ShortcutTypeId: i64,
    pub GachaTicket: GachaTicketType,
}
impl<'a> Default for ItemExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ItemExcelArgs {
      Id: 0,
      GroupId: 0,
      Rarity: Rarity::N,
      ProductionStep: ProductionStep::ToDo,
      LocalizeEtcId: 0,
      ItemCategory: ItemCategory::Coin,
      Quality: 0,
      Icon: None,
      SpriteName: None,
      StackableMax: 0,
      StackableFunction: 0,
      ImmediateUse: false,
      UsingResultParcelType: ParcelType::None,
      UsingResultId: 0,
      UsingResultAmount: 0,
      MailType: MailType::System,
      ExpiryChangeParcelType: ParcelType::None,
      ExpiryChangeId: 0,
      ExpiryChangeAmount: 0,
      CanTierUpgrade: false,
      TierUpgradeRecipeCraftId: 0,
      Tags: None,
      CraftQualityTier0: 0,
      CraftQualityTier1: 0,
      CraftQualityTier2: 0,
      ShiftingCraftQuality: 0,
      MaxGiftTags: 0,
      ShopCategory: None,
      ExpirationDateTime: None,
      ExpirationNotifyDateIn: 0,
      ShortcutTypeId: 0,
      GachaTicket: GachaTicketType::None,
    }
  }
}

impl Serialize for ItemExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ItemExcel", 32)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("Rarity", &self.Rarity())?;
      s.serialize_field("ProductionStep", &self.ProductionStep())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("ItemCategory", &self.ItemCategory())?;
      s.serialize_field("Quality", &self.Quality())?;
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
      if let Some(f) = self.SpriteName() {
        s.serialize_field("SpriteName", &f)?;
      } else {
        s.skip_field("SpriteName")?;
      }
      s.serialize_field("StackableMax", &self.StackableMax())?;
      s.serialize_field("StackableFunction", &self.StackableFunction())?;
      s.serialize_field("ImmediateUse", &self.ImmediateUse())?;
      s.serialize_field("UsingResultParcelType", &self.UsingResultParcelType())?;
      s.serialize_field("UsingResultId", &self.UsingResultId())?;
      s.serialize_field("UsingResultAmount", &self.UsingResultAmount())?;
      s.serialize_field("MailType", &self.MailType())?;
      s.serialize_field("ExpiryChangeParcelType", &self.ExpiryChangeParcelType())?;
      s.serialize_field("ExpiryChangeId", &self.ExpiryChangeId())?;
      s.serialize_field("ExpiryChangeAmount", &self.ExpiryChangeAmount())?;
      s.serialize_field("CanTierUpgrade", &self.CanTierUpgrade())?;
      s.serialize_field("TierUpgradeRecipeCraftId", &self.TierUpgradeRecipeCraftId())?;
      if let Some(f) = self.Tags() {
        s.serialize_field("Tags", &f)?;
      } else {
        s.skip_field("Tags")?;
      }
      s.serialize_field("CraftQualityTier0", &self.CraftQualityTier0())?;
      s.serialize_field("CraftQualityTier1", &self.CraftQualityTier1())?;
      s.serialize_field("CraftQualityTier2", &self.CraftQualityTier2())?;
      s.serialize_field("ShiftingCraftQuality", &self.ShiftingCraftQuality())?;
      s.serialize_field("MaxGiftTags", &self.MaxGiftTags())?;
      if let Some(f) = self.ShopCategory() {
        s.serialize_field("ShopCategory", &f)?;
      } else {
        s.skip_field("ShopCategory")?;
      }
      if let Some(f) = self.ExpirationDateTime() {
        s.serialize_field("ExpirationDateTime", &f)?;
      } else {
        s.skip_field("ExpirationDateTime")?;
      }
      s.serialize_field("ExpirationNotifyDateIn", &self.ExpirationNotifyDateIn())?;
      s.serialize_field("ShortcutTypeId", &self.ShortcutTypeId())?;
      s.serialize_field("GachaTicket", &self.GachaTicket())?;
    s.end()
  }
}

pub struct ItemExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ItemExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_Rarity(&mut self, Rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(ItemExcel::VT_RARITY, Rarity, Rarity::N);
  }
  #[inline]
  pub fn add_ProductionStep(&mut self, ProductionStep: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(ItemExcel::VT_PRODUCTIONSTEP, ProductionStep, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(ItemExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_ItemCategory(&mut self, ItemCategory: ItemCategory) {
    self.fbb_.push_slot::<ItemCategory>(ItemExcel::VT_ITEMCATEGORY, ItemCategory, ItemCategory::Coin);
  }
  #[inline]
  pub fn add_Quality(&mut self, Quality: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_QUALITY, Quality, 0);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn add_SpriteName(&mut self, SpriteName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemExcel::VT_SPRITENAME, SpriteName);
  }
  #[inline]
  pub fn add_StackableMax(&mut self, StackableMax: i32) {
    self.fbb_.push_slot::<i32>(ItemExcel::VT_STACKABLEMAX, StackableMax, 0);
  }
  #[inline]
  pub fn add_StackableFunction(&mut self, StackableFunction: i32) {
    self.fbb_.push_slot::<i32>(ItemExcel::VT_STACKABLEFUNCTION, StackableFunction, 0);
  }
  #[inline]
  pub fn add_ImmediateUse(&mut self, ImmediateUse: bool) {
    self.fbb_.push_slot::<bool>(ItemExcel::VT_IMMEDIATEUSE, ImmediateUse, false);
  }
  #[inline]
  pub fn add_UsingResultParcelType(&mut self, UsingResultParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ItemExcel::VT_USINGRESULTPARCELTYPE, UsingResultParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_UsingResultId(&mut self, UsingResultId: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_USINGRESULTID, UsingResultId, 0);
  }
  #[inline]
  pub fn add_UsingResultAmount(&mut self, UsingResultAmount: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_USINGRESULTAMOUNT, UsingResultAmount, 0);
  }
  #[inline]
  pub fn add_MailType(&mut self, MailType: MailType) {
    self.fbb_.push_slot::<MailType>(ItemExcel::VT_MAILTYPE, MailType, MailType::System);
  }
  #[inline]
  pub fn add_ExpiryChangeParcelType(&mut self, ExpiryChangeParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ItemExcel::VT_EXPIRYCHANGEPARCELTYPE, ExpiryChangeParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ExpiryChangeId(&mut self, ExpiryChangeId: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_EXPIRYCHANGEID, ExpiryChangeId, 0);
  }
  #[inline]
  pub fn add_ExpiryChangeAmount(&mut self, ExpiryChangeAmount: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_EXPIRYCHANGEAMOUNT, ExpiryChangeAmount, 0);
  }
  #[inline]
  pub fn add_CanTierUpgrade(&mut self, CanTierUpgrade: bool) {
    self.fbb_.push_slot::<bool>(ItemExcel::VT_CANTIERUPGRADE, CanTierUpgrade, false);
  }
  #[inline]
  pub fn add_TierUpgradeRecipeCraftId(&mut self, TierUpgradeRecipeCraftId: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_TIERUPGRADERECIPECRAFTID, TierUpgradeRecipeCraftId, 0);
  }
  #[inline]
  pub fn add_Tags(&mut self, Tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemExcel::VT_TAGS, Tags);
  }
  #[inline]
  pub fn add_CraftQualityTier0(&mut self, CraftQualityTier0: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_CRAFTQUALITYTIER0, CraftQualityTier0, 0);
  }
  #[inline]
  pub fn add_CraftQualityTier1(&mut self, CraftQualityTier1: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_CRAFTQUALITYTIER1, CraftQualityTier1, 0);
  }
  #[inline]
  pub fn add_CraftQualityTier2(&mut self, CraftQualityTier2: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_CRAFTQUALITYTIER2, CraftQualityTier2, 0);
  }
  #[inline]
  pub fn add_ShiftingCraftQuality(&mut self, ShiftingCraftQuality: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_SHIFTINGCRAFTQUALITY, ShiftingCraftQuality, 0);
  }
  #[inline]
  pub fn add_MaxGiftTags(&mut self, MaxGiftTags: i32) {
    self.fbb_.push_slot::<i32>(ItemExcel::VT_MAXGIFTTAGS, MaxGiftTags, 0);
  }
  #[inline]
  pub fn add_ShopCategory(&mut self, ShopCategory: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ShopCategoryType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemExcel::VT_SHOPCATEGORY, ShopCategory);
  }
  #[inline]
  pub fn add_ExpirationDateTime(&mut self, ExpirationDateTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemExcel::VT_EXPIRATIONDATETIME, ExpirationDateTime);
  }
  #[inline]
  pub fn add_ExpirationNotifyDateIn(&mut self, ExpirationNotifyDateIn: i32) {
    self.fbb_.push_slot::<i32>(ItemExcel::VT_EXPIRATIONNOTIFYDATEIN, ExpirationNotifyDateIn, 0);
  }
  #[inline]
  pub fn add_ShortcutTypeId(&mut self, ShortcutTypeId: i64) {
    self.fbb_.push_slot::<i64>(ItemExcel::VT_SHORTCUTTYPEID, ShortcutTypeId, 0);
  }
  #[inline]
  pub fn add_GachaTicket(&mut self, GachaTicket: GachaTicketType) {
    self.fbb_.push_slot::<GachaTicketType>(ItemExcel::VT_GACHATICKET, GachaTicket, GachaTicketType::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ItemExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ItemExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemExcel");
      ds.field("Id", &self.Id());
      ds.field("GroupId", &self.GroupId());
      ds.field("Rarity", &self.Rarity());
      ds.field("ProductionStep", &self.ProductionStep());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("ItemCategory", &self.ItemCategory());
      ds.field("Quality", &self.Quality());
      ds.field("Icon", &self.Icon());
      ds.field("SpriteName", &self.SpriteName());
      ds.field("StackableMax", &self.StackableMax());
      ds.field("StackableFunction", &self.StackableFunction());
      ds.field("ImmediateUse", &self.ImmediateUse());
      ds.field("UsingResultParcelType", &self.UsingResultParcelType());
      ds.field("UsingResultId", &self.UsingResultId());
      ds.field("UsingResultAmount", &self.UsingResultAmount());
      ds.field("MailType", &self.MailType());
      ds.field("ExpiryChangeParcelType", &self.ExpiryChangeParcelType());
      ds.field("ExpiryChangeId", &self.ExpiryChangeId());
      ds.field("ExpiryChangeAmount", &self.ExpiryChangeAmount());
      ds.field("CanTierUpgrade", &self.CanTierUpgrade());
      ds.field("TierUpgradeRecipeCraftId", &self.TierUpgradeRecipeCraftId());
      ds.field("Tags", &self.Tags());
      ds.field("CraftQualityTier0", &self.CraftQualityTier0());
      ds.field("CraftQualityTier1", &self.CraftQualityTier1());
      ds.field("CraftQualityTier2", &self.CraftQualityTier2());
      ds.field("ShiftingCraftQuality", &self.ShiftingCraftQuality());
      ds.field("MaxGiftTags", &self.MaxGiftTags());
      ds.field("ShopCategory", &self.ShopCategory());
      ds.field("ExpirationDateTime", &self.ExpirationDateTime());
      ds.field("ExpirationNotifyDateIn", &self.ExpirationNotifyDateIn());
      ds.field("ShortcutTypeId", &self.ShortcutTypeId());
      ds.field("GachaTicket", &self.GachaTicket());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ItemExcelT {
  pub Id: i64,
  pub GroupId: i64,
  pub Rarity: Rarity,
  pub ProductionStep: ProductionStep,
  pub LocalizeEtcId: u32,
  pub ItemCategory: ItemCategory,
  pub Quality: i64,
  pub Icon: Option<String>,
  pub SpriteName: Option<String>,
  pub StackableMax: i32,
  pub StackableFunction: i32,
  pub ImmediateUse: bool,
  pub UsingResultParcelType: ParcelType,
  pub UsingResultId: i64,
  pub UsingResultAmount: i64,
  pub MailType: MailType,
  pub ExpiryChangeParcelType: ParcelType,
  pub ExpiryChangeId: i64,
  pub ExpiryChangeAmount: i64,
  pub CanTierUpgrade: bool,
  pub TierUpgradeRecipeCraftId: i64,
  pub Tags: Option<Vec<Tag>>,
  pub CraftQualityTier0: i64,
  pub CraftQualityTier1: i64,
  pub CraftQualityTier2: i64,
  pub ShiftingCraftQuality: i64,
  pub MaxGiftTags: i32,
  pub ShopCategory: Option<Vec<ShopCategoryType>>,
  pub ExpirationDateTime: Option<String>,
  pub ExpirationNotifyDateIn: i32,
  pub ShortcutTypeId: i64,
  pub GachaTicket: GachaTicketType,
}
impl Default for ItemExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      GroupId: 0,
      Rarity: Rarity::N,
      ProductionStep: ProductionStep::ToDo,
      LocalizeEtcId: 0,
      ItemCategory: ItemCategory::Coin,
      Quality: 0,
      Icon: None,
      SpriteName: None,
      StackableMax: 0,
      StackableFunction: 0,
      ImmediateUse: false,
      UsingResultParcelType: ParcelType::None,
      UsingResultId: 0,
      UsingResultAmount: 0,
      MailType: MailType::System,
      ExpiryChangeParcelType: ParcelType::None,
      ExpiryChangeId: 0,
      ExpiryChangeAmount: 0,
      CanTierUpgrade: false,
      TierUpgradeRecipeCraftId: 0,
      Tags: None,
      CraftQualityTier0: 0,
      CraftQualityTier1: 0,
      CraftQualityTier2: 0,
      ShiftingCraftQuality: 0,
      MaxGiftTags: 0,
      ShopCategory: None,
      ExpirationDateTime: None,
      ExpirationNotifyDateIn: 0,
      ShortcutTypeId: 0,
      GachaTicket: GachaTicketType::None,
    }
  }
}
impl ItemExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ItemExcel<'b>> {
    let Id = self.Id;
    let GroupId = self.GroupId;
    let Rarity = self.Rarity;
    let ProductionStep = self.ProductionStep;
    let LocalizeEtcId = self.LocalizeEtcId;
    let ItemCategory = self.ItemCategory;
    let Quality = self.Quality;
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpriteName = self.SpriteName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StackableMax = self.StackableMax;
    let StackableFunction = self.StackableFunction;
    let ImmediateUse = self.ImmediateUse;
    let UsingResultParcelType = self.UsingResultParcelType;
    let UsingResultId = self.UsingResultId;
    let UsingResultAmount = self.UsingResultAmount;
    let MailType = self.MailType;
    let ExpiryChangeParcelType = self.ExpiryChangeParcelType;
    let ExpiryChangeId = self.ExpiryChangeId;
    let ExpiryChangeAmount = self.ExpiryChangeAmount;
    let CanTierUpgrade = self.CanTierUpgrade;
    let TierUpgradeRecipeCraftId = self.TierUpgradeRecipeCraftId;
    let Tags = self.Tags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CraftQualityTier0 = self.CraftQualityTier0;
    let CraftQualityTier1 = self.CraftQualityTier1;
    let CraftQualityTier2 = self.CraftQualityTier2;
    let ShiftingCraftQuality = self.ShiftingCraftQuality;
    let MaxGiftTags = self.MaxGiftTags;
    let ShopCategory = self.ShopCategory.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ExpirationDateTime = self.ExpirationDateTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ExpirationNotifyDateIn = self.ExpirationNotifyDateIn;
    let ShortcutTypeId = self.ShortcutTypeId;
    let GachaTicket = self.GachaTicket;
    ItemExcel::create(_fbb, &ItemExcelArgs{
      Id,
      GroupId,
      Rarity,
      ProductionStep,
      LocalizeEtcId,
      ItemCategory,
      Quality,
      Icon,
      SpriteName,
      StackableMax,
      StackableFunction,
      ImmediateUse,
      UsingResultParcelType,
      UsingResultId,
      UsingResultAmount,
      MailType,
      ExpiryChangeParcelType,
      ExpiryChangeId,
      ExpiryChangeAmount,
      CanTierUpgrade,
      TierUpgradeRecipeCraftId,
      Tags,
      CraftQualityTier0,
      CraftQualityTier1,
      CraftQualityTier2,
      ShiftingCraftQuality,
      MaxGiftTags,
      ShopCategory,
      ExpirationDateTime,
      ExpirationNotifyDateIn,
      ShortcutTypeId,
      GachaTicket,
    })
  }
}
