// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamEndingRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamEndingRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamEndingRewardExcel<'a> {
  type Inner = MiniGameDreamEndingRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamEndingRewardExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ENDINGID: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_DREAMMAKERENDINGREWARDTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_DREAMMAKERENDINGTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamEndingRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamEndingRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamEndingRewardExcel<'bldr>> {
    let mut builder = MiniGameDreamEndingRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamEndingReward");
      let x = args.EndingId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EndingId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      let x = args.DreamMakerEndingType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DreamMakerEndingType(x);
      let x = args.DreamMakerEndingRewardType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DreamMakerEndingRewardType(x);
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamEndingRewardExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamEndingReward");
      let EventContentId = self.EventContentId();
      let EndingId = self.EndingId();
      let LocalizeEtcId = self.LocalizeEtcId();
      let DreamMakerEndingRewardType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DreamMakerEndingRewardType(), &key)
      } else {
        self.DreamMakerEndingRewardType()
      };
      let DreamMakerEndingType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DreamMakerEndingType(), &key)
      } else {
        self.DreamMakerEndingType()
      };
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    MiniGameDreamEndingRewardExcelT {
      EventContentId,
      EndingId,
      LocalizeEtcId,
      DreamMakerEndingRewardType,
      DreamMakerEndingType,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamEndingRewardExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EndingId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamEndingRewardExcel::VT_ENDINGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameDreamEndingRewardExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerEndingRewardType(&self) -> DreamMakerEndingRewardType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DreamMakerEndingRewardType>(MiniGameDreamEndingRewardExcel::VT_DREAMMAKERENDINGREWARDTYPE, Some(DreamMakerEndingRewardType::None)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerEndingType(&self) -> DreamMakerEndingType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DreamMakerEndingType>(MiniGameDreamEndingRewardExcel::VT_DREAMMAKERENDINGTYPE, Some(DreamMakerEndingType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(MiniGameDreamEndingRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameDreamEndingRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameDreamEndingRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamEndingRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("EndingId", Self::VT_ENDINGID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<DreamMakerEndingRewardType>("DreamMakerEndingRewardType", Self::VT_DREAMMAKERENDINGREWARDTYPE, false)?
     .visit_field::<DreamMakerEndingType>("DreamMakerEndingType", Self::VT_DREAMMAKERENDINGTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamEndingRewardExcelArgs<'a> {
    pub EventContentId: i64,
    pub EndingId: i64,
    pub LocalizeEtcId: u32,
    pub DreamMakerEndingRewardType: DreamMakerEndingRewardType,
    pub DreamMakerEndingType: DreamMakerEndingType,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for MiniGameDreamEndingRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamEndingRewardExcelArgs {
      EventContentId: 0,
      EndingId: 0,
      LocalizeEtcId: 0,
      DreamMakerEndingRewardType: DreamMakerEndingRewardType::None,
      DreamMakerEndingType: DreamMakerEndingType::None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}

impl Serialize for MiniGameDreamEndingRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamEndingRewardExcel", 8)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EndingId", &self.EndingId())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("DreamMakerEndingRewardType", &self.DreamMakerEndingRewardType())?;
      s.serialize_field("DreamMakerEndingType", &self.DreamMakerEndingType())?;
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct MiniGameDreamEndingRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamEndingRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamEndingRewardExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EndingId(&mut self, EndingId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamEndingRewardExcel::VT_ENDINGID, EndingId, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(MiniGameDreamEndingRewardExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_DreamMakerEndingRewardType(&mut self, DreamMakerEndingRewardType: DreamMakerEndingRewardType) {
    self.fbb_.push_slot::<DreamMakerEndingRewardType>(MiniGameDreamEndingRewardExcel::VT_DREAMMAKERENDINGREWARDTYPE, DreamMakerEndingRewardType, DreamMakerEndingRewardType::None);
  }
  #[inline]
  pub fn add_DreamMakerEndingType(&mut self, DreamMakerEndingType: DreamMakerEndingType) {
    self.fbb_.push_slot::<DreamMakerEndingType>(MiniGameDreamEndingRewardExcel::VT_DREAMMAKERENDINGTYPE, DreamMakerEndingType, DreamMakerEndingType::None);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamEndingRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamEndingRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamEndingRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamEndingRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamEndingRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamEndingRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamEndingRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamEndingRewardExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EndingId", &self.EndingId());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("DreamMakerEndingRewardType", &self.DreamMakerEndingRewardType());
      ds.field("DreamMakerEndingType", &self.DreamMakerEndingType());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamEndingRewardExcelT {
  pub EventContentId: i64,
  pub EndingId: i64,
  pub LocalizeEtcId: u32,
  pub DreamMakerEndingRewardType: DreamMakerEndingRewardType,
  pub DreamMakerEndingType: DreamMakerEndingType,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
}
impl Default for MiniGameDreamEndingRewardExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EndingId: 0,
      LocalizeEtcId: 0,
      DreamMakerEndingRewardType: DreamMakerEndingRewardType::None,
      DreamMakerEndingType: DreamMakerEndingType::None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}
impl MiniGameDreamEndingRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamEndingRewardExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EndingId = self.EndingId;
    let LocalizeEtcId = self.LocalizeEtcId;
    let DreamMakerEndingRewardType = self.DreamMakerEndingRewardType;
    let DreamMakerEndingType = self.DreamMakerEndingType;
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MiniGameDreamEndingRewardExcel::create(_fbb, &MiniGameDreamEndingRewardExcelArgs{
      EventContentId,
      EndingId,
      LocalizeEtcId,
      DreamMakerEndingRewardType,
      DreamMakerEndingType,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    })
  }
}
