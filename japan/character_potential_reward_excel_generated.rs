// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterPotentialRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterPotentialRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterPotentialRewardExcel<'a> {
  type Inner = CharacterPotentialRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterPotentialRewardExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_REQUIREPOTENTIALSTATTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_REQUIREPOTENTIALSTATLEVEL: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterPotentialRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterPotentialRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterPotentialRewardExcel<'bldr>> {
    let mut builder = CharacterPotentialRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterPotentialReward");
      let x = args.RewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RewardAmount(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      if let Some(x) = args.RequirePotentialStatLevel {
        builder.add_RequirePotentialStatLevel(x);
      }
      if let Some(x) = args.RequirePotentialStatType {
        builder.add_RequirePotentialStatType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterPotentialRewardExcelT {
    let key = table_encryption_service::create_key(b"CharacterPotentialReward");
      let Id = self.Id();
    let RequirePotentialStatType = self.RequirePotentialStatType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RequirePotentialStatLevel = self.RequirePotentialStatLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardId = self.RewardId();
      let RewardAmount = self.RewardAmount();
    CharacterPotentialRewardExcelT {
      Id,
      RequirePotentialStatType,
      RequirePotentialStatLevel,
      RewardParcelType,
      RewardId,
      RewardAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterPotentialRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequirePotentialStatType(&self) -> Option<flatbuffers::Vector<'a, PotentialStatBonusRateType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, PotentialStatBonusRateType>>>(CharacterPotentialRewardExcel::VT_REQUIREPOTENTIALSTATTYPE, None)}
  }
  #[inline]
  pub fn RequirePotentialStatLevel(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterPotentialRewardExcel::VT_REQUIREPOTENTIALSTATLEVEL, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CharacterPotentialRewardExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterPotentialRewardExcel::VT_REWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterPotentialRewardExcel::VT_REWARDAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterPotentialRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, PotentialStatBonusRateType>>>("RequirePotentialStatType", Self::VT_REQUIREPOTENTIALSTATTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RequirePotentialStatLevel", Self::VT_REQUIREPOTENTIALSTATLEVEL, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardId", Self::VT_REWARDID, false)?
     .visit_field::<i32>("RewardAmount", Self::VT_REWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterPotentialRewardExcelArgs<'a> {
    pub Id: i64,
    pub RequirePotentialStatType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, PotentialStatBonusRateType>>>,
    pub RequirePotentialStatLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelType: ParcelType,
    pub RewardId: i64,
    pub RewardAmount: i32,
}
impl<'a> Default for CharacterPotentialRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterPotentialRewardExcelArgs {
      Id: 0,
      RequirePotentialStatType: None,
      RequirePotentialStatLevel: None,
      RewardParcelType: ParcelType::None,
      RewardId: 0,
      RewardAmount: 0,
    }
  }
}

impl Serialize for CharacterPotentialRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterPotentialRewardExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.RequirePotentialStatType() {
        s.serialize_field("RequirePotentialStatType", &f)?;
      } else {
        s.skip_field("RequirePotentialStatType")?;
      }
      if let Some(f) = self.RequirePotentialStatLevel() {
        s.serialize_field("RequirePotentialStatLevel", &f)?;
      } else {
        s.skip_field("RequirePotentialStatLevel")?;
      }
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardId", &self.RewardId())?;
      s.serialize_field("RewardAmount", &self.RewardAmount())?;
    s.end()
  }
}

pub struct CharacterPotentialRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterPotentialRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterPotentialRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_RequirePotentialStatType(&mut self, RequirePotentialStatType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , PotentialStatBonusRateType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterPotentialRewardExcel::VT_REQUIREPOTENTIALSTATTYPE, RequirePotentialStatType);
  }
  #[inline]
  pub fn add_RequirePotentialStatLevel(&mut self, RequirePotentialStatLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterPotentialRewardExcel::VT_REQUIREPOTENTIALSTATLEVEL, RequirePotentialStatLevel);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CharacterPotentialRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardId(&mut self, RewardId: i64) {
    self.fbb_.push_slot::<i64>(CharacterPotentialRewardExcel::VT_REWARDID, RewardId, 0);
  }
  #[inline]
  pub fn add_RewardAmount(&mut self, RewardAmount: i32) {
    self.fbb_.push_slot::<i32>(CharacterPotentialRewardExcel::VT_REWARDAMOUNT, RewardAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterPotentialRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterPotentialRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterPotentialRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterPotentialRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterPotentialRewardExcel");
      ds.field("Id", &self.Id());
      ds.field("RequirePotentialStatType", &self.RequirePotentialStatType());
      ds.field("RequirePotentialStatLevel", &self.RequirePotentialStatLevel());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardId", &self.RewardId());
      ds.field("RewardAmount", &self.RewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterPotentialRewardExcelT {
  pub Id: i64,
  pub RequirePotentialStatType: Option<Vec<PotentialStatBonusRateType>>,
  pub RequirePotentialStatLevel: Option<Vec<i64>>,
  pub RewardParcelType: ParcelType,
  pub RewardId: i64,
  pub RewardAmount: i32,
}
impl Default for CharacterPotentialRewardExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      RequirePotentialStatType: None,
      RequirePotentialStatLevel: None,
      RewardParcelType: ParcelType::None,
      RewardId: 0,
      RewardAmount: 0,
    }
  }
}
impl CharacterPotentialRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterPotentialRewardExcel<'b>> {
    let Id = self.Id;
    let RequirePotentialStatType = self.RequirePotentialStatType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RequirePotentialStatLevel = self.RequirePotentialStatLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelType = self.RewardParcelType;
    let RewardId = self.RewardId;
    let RewardAmount = self.RewardAmount;
    CharacterPotentialRewardExcel::create(_fbb, &CharacterPotentialRewardExcelArgs{
      Id,
      RequirePotentialStatType,
      RequirePotentialStatLevel,
      RewardParcelType,
      RewardId,
      RewardAmount,
    })
  }
}
