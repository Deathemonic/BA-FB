// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGInfoExcel<'a> {
  type Inner = MinigameCCGInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGInfoExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_CCGID: flatbuffers::VOffsetT = 6;
  pub const VT_COSTPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_COSTPARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_COSTPARCELAMOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_CARDBACKPATH: flatbuffers::VOffsetT = 14;
  pub const VT_PERKCOSTPARCELTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_PERKCOSTPARCELID: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGInfoExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGInfoExcel<'bldr>> {
    let mut builder = MinigameCCGInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGInfo");
      let x = args.PerkCostParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PerkCostParcelId(x);
      let x = args.CostParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostParcelId(x);
      let x = args.CCGId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CCGId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.PerkCostParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PerkCostParcelType(x);
      if let Some(x) = args.CardBackPath {
        builder.add_CardBackPath(x);
      }
      let x = args.CostParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CostParcelAmount(x);
      let x = args.CostParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CostParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGInfoExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGInfo");
      let EventContentId = self.EventContentId();
      let CCGId = self.CCGId();
      let CostParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CostParcelType(), &key)
      } else {
        self.CostParcelType()
      };
      let CostParcelId = self.CostParcelId();
      let CostParcelAmount = self.CostParcelAmount();
    let CardBackPath = self.CardBackPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let PerkCostParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PerkCostParcelType(), &key)
      } else {
        self.PerkCostParcelType()
      };
      let PerkCostParcelId = self.PerkCostParcelId();
    MinigameCCGInfoExcelT {
      EventContentId,
      CCGId,
      CostParcelType,
      CostParcelId,
      CostParcelAmount,
      CardBackPath,
      PerkCostParcelType,
      PerkCostParcelId,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGInfoExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CCGId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGInfoExcel::VT_CCGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MinigameCCGInfoExcel::VT_COSTPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn CostParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGInfoExcel::VT_COSTPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostParcelAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGInfoExcel::VT_COSTPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CardBackPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGInfoExcel::VT_CARDBACKPATH, None)}
  }
  #[inline]
  pub fn PerkCostParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MinigameCCGInfoExcel::VT_PERKCOSTPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn PerkCostParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGInfoExcel::VT_PERKCOSTPARCELID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("CCGId", Self::VT_CCGID, false)?
     .visit_field::<ParcelType>("CostParcelType", Self::VT_COSTPARCELTYPE, false)?
     .visit_field::<i64>("CostParcelId", Self::VT_COSTPARCELID, false)?
     .visit_field::<i32>("CostParcelAmount", Self::VT_COSTPARCELAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CardBackPath", Self::VT_CARDBACKPATH, false)?
     .visit_field::<ParcelType>("PerkCostParcelType", Self::VT_PERKCOSTPARCELTYPE, false)?
     .visit_field::<i64>("PerkCostParcelId", Self::VT_PERKCOSTPARCELID, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGInfoExcelArgs<'a> {
    pub EventContentId: i64,
    pub CCGId: i64,
    pub CostParcelType: ParcelType,
    pub CostParcelId: i64,
    pub CostParcelAmount: i32,
    pub CardBackPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PerkCostParcelType: ParcelType,
    pub PerkCostParcelId: i64,
}
impl<'a> Default for MinigameCCGInfoExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGInfoExcelArgs {
      EventContentId: 0,
      CCGId: 0,
      CostParcelType: ParcelType::None,
      CostParcelId: 0,
      CostParcelAmount: 0,
      CardBackPath: None,
      PerkCostParcelType: ParcelType::None,
      PerkCostParcelId: 0,
    }
  }
}

impl Serialize for MinigameCCGInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGInfoExcel", 8)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("CCGId", &self.CCGId())?;
      s.serialize_field("CostParcelType", &self.CostParcelType())?;
      s.serialize_field("CostParcelId", &self.CostParcelId())?;
      s.serialize_field("CostParcelAmount", &self.CostParcelAmount())?;
      if let Some(f) = self.CardBackPath() {
        s.serialize_field("CardBackPath", &f)?;
      } else {
        s.skip_field("CardBackPath")?;
      }
      s.serialize_field("PerkCostParcelType", &self.PerkCostParcelType())?;
      s.serialize_field("PerkCostParcelId", &self.PerkCostParcelId())?;
    s.end()
  }
}

pub struct MinigameCCGInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGInfoExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_CCGId(&mut self, CCGId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGInfoExcel::VT_CCGID, CCGId, 0);
  }
  #[inline]
  pub fn add_CostParcelType(&mut self, CostParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MinigameCCGInfoExcel::VT_COSTPARCELTYPE, CostParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_CostParcelId(&mut self, CostParcelId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGInfoExcel::VT_COSTPARCELID, CostParcelId, 0);
  }
  #[inline]
  pub fn add_CostParcelAmount(&mut self, CostParcelAmount: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGInfoExcel::VT_COSTPARCELAMOUNT, CostParcelAmount, 0);
  }
  #[inline]
  pub fn add_CardBackPath(&mut self, CardBackPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGInfoExcel::VT_CARDBACKPATH, CardBackPath);
  }
  #[inline]
  pub fn add_PerkCostParcelType(&mut self, PerkCostParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MinigameCCGInfoExcel::VT_PERKCOSTPARCELTYPE, PerkCostParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_PerkCostParcelId(&mut self, PerkCostParcelId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGInfoExcel::VT_PERKCOSTPARCELID, PerkCostParcelId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGInfoExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("CCGId", &self.CCGId());
      ds.field("CostParcelType", &self.CostParcelType());
      ds.field("CostParcelId", &self.CostParcelId());
      ds.field("CostParcelAmount", &self.CostParcelAmount());
      ds.field("CardBackPath", &self.CardBackPath());
      ds.field("PerkCostParcelType", &self.PerkCostParcelType());
      ds.field("PerkCostParcelId", &self.PerkCostParcelId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGInfoExcelT {
  pub EventContentId: i64,
  pub CCGId: i64,
  pub CostParcelType: ParcelType,
  pub CostParcelId: i64,
  pub CostParcelAmount: i32,
  pub CardBackPath: Option<String>,
  pub PerkCostParcelType: ParcelType,
  pub PerkCostParcelId: i64,
}
impl Default for MinigameCCGInfoExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      CCGId: 0,
      CostParcelType: ParcelType::None,
      CostParcelId: 0,
      CostParcelAmount: 0,
      CardBackPath: None,
      PerkCostParcelType: ParcelType::None,
      PerkCostParcelId: 0,
    }
  }
}
impl MinigameCCGInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGInfoExcel<'b>> {
    let EventContentId = self.EventContentId;
    let CCGId = self.CCGId;
    let CostParcelType = self.CostParcelType;
    let CostParcelId = self.CostParcelId;
    let CostParcelAmount = self.CostParcelAmount;
    let CardBackPath = self.CardBackPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PerkCostParcelType = self.PerkCostParcelType;
    let PerkCostParcelId = self.PerkCostParcelId;
    MinigameCCGInfoExcel::create(_fbb, &MinigameCCGInfoExcelArgs{
      EventContentId,
      CCGId,
      CostParcelType,
      CostParcelId,
      CostParcelAmount,
      CardBackPath,
      PerkCostParcelType,
      PerkCostParcelId,
    })
  }
}
