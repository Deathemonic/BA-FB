// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EliminateRaidStageLimitedRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EliminateRaidStageLimitedRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EliminateRaidStageLimitedRewardExcel<'a> {
  type Inner = EliminateRaidStageLimitedRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EliminateRaidStageLimitedRewardExcel<'a> {
  pub const VT_LIMITEDREWARDID: flatbuffers::VOffsetT = 4;
  pub const VT_LIMITEDREWARDPARCELTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_LIMITEDREWARDPARCELUNIQUEID: flatbuffers::VOffsetT = 8;
  pub const VT_LIMITEDREWARDAMOUNT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EliminateRaidStageLimitedRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EliminateRaidStageLimitedRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EliminateRaidStageLimitedRewardExcel<'bldr>> {
    let mut builder = EliminateRaidStageLimitedRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EliminateRaidStageLimitedReward");
      let x = args.LimitedRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LimitedRewardId(x);
      if let Some(x) = args.LimitedRewardAmount {
        builder.add_LimitedRewardAmount(x);
      }
      if let Some(x) = args.LimitedRewardParcelUniqueId {
        builder.add_LimitedRewardParcelUniqueId(x);
      }
      if let Some(x) = args.LimitedRewardParcelType {
        builder.add_LimitedRewardParcelType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> EliminateRaidStageLimitedRewardExcelT {
    let key = table_encryption_service::create_key(b"EliminateRaidStageLimitedReward");
      let LimitedRewardId = self.LimitedRewardId();
    let LimitedRewardParcelType = self.LimitedRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let LimitedRewardParcelUniqueId = self.LimitedRewardParcelUniqueId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let LimitedRewardAmount = self.LimitedRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EliminateRaidStageLimitedRewardExcelT {
      LimitedRewardId,
      LimitedRewardParcelType,
      LimitedRewardParcelUniqueId,
      LimitedRewardAmount,
    }
  }

  #[inline]
  pub fn LimitedRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LimitedRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn LimitedRewardParcelUniqueId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDPARCELUNIQUEID, None)}
  }
  #[inline]
  pub fn LimitedRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EliminateRaidStageLimitedRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("LimitedRewardId", Self::VT_LIMITEDREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("LimitedRewardParcelType", Self::VT_LIMITEDREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("LimitedRewardParcelUniqueId", Self::VT_LIMITEDREWARDPARCELUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("LimitedRewardAmount", Self::VT_LIMITEDREWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EliminateRaidStageLimitedRewardExcelArgs<'a> {
    pub LimitedRewardId: i64,
    pub LimitedRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub LimitedRewardParcelUniqueId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub LimitedRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EliminateRaidStageLimitedRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EliminateRaidStageLimitedRewardExcelArgs {
      LimitedRewardId: 0,
      LimitedRewardParcelType: None,
      LimitedRewardParcelUniqueId: None,
      LimitedRewardAmount: None,
    }
  }
}

impl Serialize for EliminateRaidStageLimitedRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EliminateRaidStageLimitedRewardExcel", 4)?;
      s.serialize_field("LimitedRewardId", &self.LimitedRewardId())?;
      if let Some(f) = self.LimitedRewardParcelType() {
        s.serialize_field("LimitedRewardParcelType", &f)?;
      } else {
        s.skip_field("LimitedRewardParcelType")?;
      }
      if let Some(f) = self.LimitedRewardParcelUniqueId() {
        s.serialize_field("LimitedRewardParcelUniqueId", &f)?;
      } else {
        s.skip_field("LimitedRewardParcelUniqueId")?;
      }
      if let Some(f) = self.LimitedRewardAmount() {
        s.serialize_field("LimitedRewardAmount", &f)?;
      } else {
        s.skip_field("LimitedRewardAmount")?;
      }
    s.end()
  }
}

pub struct EliminateRaidStageLimitedRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EliminateRaidStageLimitedRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LimitedRewardId(&mut self, LimitedRewardId: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDID, LimitedRewardId, 0);
  }
  #[inline]
  pub fn add_LimitedRewardParcelType(&mut self, LimitedRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDPARCELTYPE, LimitedRewardParcelType);
  }
  #[inline]
  pub fn add_LimitedRewardParcelUniqueId(&mut self, LimitedRewardParcelUniqueId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDPARCELUNIQUEID, LimitedRewardParcelUniqueId);
  }
  #[inline]
  pub fn add_LimitedRewardAmount(&mut self, LimitedRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EliminateRaidStageLimitedRewardExcel::VT_LIMITEDREWARDAMOUNT, LimitedRewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EliminateRaidStageLimitedRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EliminateRaidStageLimitedRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EliminateRaidStageLimitedRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EliminateRaidStageLimitedRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EliminateRaidStageLimitedRewardExcel");
      ds.field("LimitedRewardId", &self.LimitedRewardId());
      ds.field("LimitedRewardParcelType", &self.LimitedRewardParcelType());
      ds.field("LimitedRewardParcelUniqueId", &self.LimitedRewardParcelUniqueId());
      ds.field("LimitedRewardAmount", &self.LimitedRewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EliminateRaidStageLimitedRewardExcelT {
  pub LimitedRewardId: i64,
  pub LimitedRewardParcelType: Option<Vec<ParcelType>>,
  pub LimitedRewardParcelUniqueId: Option<Vec<i64>>,
  pub LimitedRewardAmount: Option<Vec<i64>>,
}
impl Default for EliminateRaidStageLimitedRewardExcelT {
  fn default() -> Self {
    Self {
      LimitedRewardId: 0,
      LimitedRewardParcelType: None,
      LimitedRewardParcelUniqueId: None,
      LimitedRewardAmount: None,
    }
  }
}
impl EliminateRaidStageLimitedRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EliminateRaidStageLimitedRewardExcel<'b>> {
    let LimitedRewardId = self.LimitedRewardId;
    let LimitedRewardParcelType = self.LimitedRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LimitedRewardParcelUniqueId = self.LimitedRewardParcelUniqueId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LimitedRewardAmount = self.LimitedRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EliminateRaidStageLimitedRewardExcel::create(_fbb, &EliminateRaidStageLimitedRewardExcelArgs{
      LimitedRewardId,
      LimitedRewardParcelType,
      LimitedRewardParcelUniqueId,
      LimitedRewardAmount,
    })
  }
}
