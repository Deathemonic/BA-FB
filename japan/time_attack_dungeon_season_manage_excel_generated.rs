// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TimeAttackDungeonSeasonManageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TimeAttackDungeonSeasonManageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TimeAttackDungeonSeasonManageExcel<'a> {
  type Inner = TimeAttackDungeonSeasonManageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TimeAttackDungeonSeasonManageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 6;
  pub const VT_ENDNOTELABELSTARTDATE: flatbuffers::VOffsetT = 8;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 10;
  pub const VT_UISLOT: flatbuffers::VOffsetT = 12;
  pub const VT_DUNGEONID: flatbuffers::VOffsetT = 14;
  pub const VT_DIFFICULTYGEAS: flatbuffers::VOffsetT = 16;
  pub const VT_TIMEATTACKDUNGEONREWARDID: flatbuffers::VOffsetT = 18;
  pub const VT_ROOMLIFETIMEINSECONDS: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TimeAttackDungeonSeasonManageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TimeAttackDungeonSeasonManageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonSeasonManageExcel<'bldr>> {
    let mut builder = TimeAttackDungeonSeasonManageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TimeAttackDungeonSeasonManage");
      let x = args.RoomLifeTimeInSeconds;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RoomLifeTimeInSeconds(x);
      let x = args.TimeAttackDungeonRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TimeAttackDungeonRewardId(x);
      let x = args.DungeonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DungeonId(x);
      let x = args.UISlot;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UISlot(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.DifficultyGeas {
        builder.add_DifficultyGeas(x);
      }
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.EndNoteLabelStartDate {
        builder.add_EndNoteLabelStartDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> TimeAttackDungeonSeasonManageExcelT {
    let key = table_encryption_service::create_key(b"TimeAttackDungeonSeasonManage");
      let Id = self.Id();
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndNoteLabelStartDate = self.EndNoteLabelStartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let UISlot = self.UISlot();
      let DungeonId = self.DungeonId();
    let DifficultyGeas = self.DifficultyGeas().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let TimeAttackDungeonRewardId = self.TimeAttackDungeonRewardId();
      let RoomLifeTimeInSeconds = self.RoomLifeTimeInSeconds();
    TimeAttackDungeonSeasonManageExcelT {
      Id,
      StartDate,
      EndNoteLabelStartDate,
      EndDate,
      UISlot,
      DungeonId,
      DifficultyGeas,
      TimeAttackDungeonRewardId,
      RoomLifeTimeInSeconds,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonSeasonManageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TimeAttackDungeonSeasonManageExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn EndNoteLabelStartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TimeAttackDungeonSeasonManageExcel::VT_ENDNOTELABELSTARTDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TimeAttackDungeonSeasonManageExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn UISlot(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonSeasonManageExcel::VT_UISLOT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DungeonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonSeasonManageExcel::VT_DUNGEONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DifficultyGeas(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TimeAttackDungeonSeasonManageExcel::VT_DIFFICULTYGEAS, None)}
  }
  #[inline]
  pub fn TimeAttackDungeonRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonSeasonManageExcel::VT_TIMEATTACKDUNGEONREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RoomLifeTimeInSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonSeasonManageExcel::VT_ROOMLIFETIMEINSECONDS, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TimeAttackDungeonSeasonManageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndNoteLabelStartDate", Self::VT_ENDNOTELABELSTARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<i64>("UISlot", Self::VT_UISLOT, false)?
     .visit_field::<i64>("DungeonId", Self::VT_DUNGEONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("DifficultyGeas", Self::VT_DIFFICULTYGEAS, false)?
     .visit_field::<i64>("TimeAttackDungeonRewardId", Self::VT_TIMEATTACKDUNGEONREWARDID, false)?
     .visit_field::<i64>("RoomLifeTimeInSeconds", Self::VT_ROOMLIFETIMEINSECONDS, false)?
     .finish();
    Ok(())
  }
}
pub struct TimeAttackDungeonSeasonManageExcelArgs<'a> {
    pub Id: i64,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndNoteLabelStartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub UISlot: i64,
    pub DungeonId: i64,
    pub DifficultyGeas: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub TimeAttackDungeonRewardId: i64,
    pub RoomLifeTimeInSeconds: i64,
}
impl<'a> Default for TimeAttackDungeonSeasonManageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TimeAttackDungeonSeasonManageExcelArgs {
      Id: 0,
      StartDate: None,
      EndNoteLabelStartDate: None,
      EndDate: None,
      UISlot: 0,
      DungeonId: 0,
      DifficultyGeas: None,
      TimeAttackDungeonRewardId: 0,
      RoomLifeTimeInSeconds: 0,
    }
  }
}

impl Serialize for TimeAttackDungeonSeasonManageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TimeAttackDungeonSeasonManageExcel", 9)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.EndNoteLabelStartDate() {
        s.serialize_field("EndNoteLabelStartDate", &f)?;
      } else {
        s.skip_field("EndNoteLabelStartDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      s.serialize_field("UISlot", &self.UISlot())?;
      s.serialize_field("DungeonId", &self.DungeonId())?;
      if let Some(f) = self.DifficultyGeas() {
        s.serialize_field("DifficultyGeas", &f)?;
      } else {
        s.skip_field("DifficultyGeas")?;
      }
      s.serialize_field("TimeAttackDungeonRewardId", &self.TimeAttackDungeonRewardId())?;
      s.serialize_field("RoomLifeTimeInSeconds", &self.RoomLifeTimeInSeconds())?;
    s.end()
  }
}

pub struct TimeAttackDungeonSeasonManageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TimeAttackDungeonSeasonManageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonSeasonManageExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonSeasonManageExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_EndNoteLabelStartDate(&mut self, EndNoteLabelStartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonSeasonManageExcel::VT_ENDNOTELABELSTARTDATE, EndNoteLabelStartDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonSeasonManageExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_UISlot(&mut self, UISlot: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonSeasonManageExcel::VT_UISLOT, UISlot, 0);
  }
  #[inline]
  pub fn add_DungeonId(&mut self, DungeonId: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonSeasonManageExcel::VT_DUNGEONID, DungeonId, 0);
  }
  #[inline]
  pub fn add_DifficultyGeas(&mut self, DifficultyGeas: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonSeasonManageExcel::VT_DIFFICULTYGEAS, DifficultyGeas);
  }
  #[inline]
  pub fn add_TimeAttackDungeonRewardId(&mut self, TimeAttackDungeonRewardId: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonSeasonManageExcel::VT_TIMEATTACKDUNGEONREWARDID, TimeAttackDungeonRewardId, 0);
  }
  #[inline]
  pub fn add_RoomLifeTimeInSeconds(&mut self, RoomLifeTimeInSeconds: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonSeasonManageExcel::VT_ROOMLIFETIMEINSECONDS, RoomLifeTimeInSeconds, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TimeAttackDungeonSeasonManageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TimeAttackDungeonSeasonManageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TimeAttackDungeonSeasonManageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TimeAttackDungeonSeasonManageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TimeAttackDungeonSeasonManageExcel");
      ds.field("Id", &self.Id());
      ds.field("StartDate", &self.StartDate());
      ds.field("EndNoteLabelStartDate", &self.EndNoteLabelStartDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("UISlot", &self.UISlot());
      ds.field("DungeonId", &self.DungeonId());
      ds.field("DifficultyGeas", &self.DifficultyGeas());
      ds.field("TimeAttackDungeonRewardId", &self.TimeAttackDungeonRewardId());
      ds.field("RoomLifeTimeInSeconds", &self.RoomLifeTimeInSeconds());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TimeAttackDungeonSeasonManageExcelT {
  pub Id: i64,
  pub StartDate: Option<String>,
  pub EndNoteLabelStartDate: Option<String>,
  pub EndDate: Option<String>,
  pub UISlot: i64,
  pub DungeonId: i64,
  pub DifficultyGeas: Option<Vec<i64>>,
  pub TimeAttackDungeonRewardId: i64,
  pub RoomLifeTimeInSeconds: i64,
}
impl Default for TimeAttackDungeonSeasonManageExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      StartDate: None,
      EndNoteLabelStartDate: None,
      EndDate: None,
      UISlot: 0,
      DungeonId: 0,
      DifficultyGeas: None,
      TimeAttackDungeonRewardId: 0,
      RoomLifeTimeInSeconds: 0,
    }
  }
}
impl TimeAttackDungeonSeasonManageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonSeasonManageExcel<'b>> {
    let Id = self.Id;
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndNoteLabelStartDate = self.EndNoteLabelStartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let UISlot = self.UISlot;
    let DungeonId = self.DungeonId;
    let DifficultyGeas = self.DifficultyGeas.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let TimeAttackDungeonRewardId = self.TimeAttackDungeonRewardId;
    let RoomLifeTimeInSeconds = self.RoomLifeTimeInSeconds;
    TimeAttackDungeonSeasonManageExcel::create(_fbb, &TimeAttackDungeonSeasonManageExcelArgs{
      Id,
      StartDate,
      EndNoteLabelStartDate,
      EndDate,
      UISlot,
      DungeonId,
      DifficultyGeas,
      TimeAttackDungeonRewardId,
      RoomLifeTimeInSeconds,
    })
  }
}
