// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestMapExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestMapExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestMapExcel<'a> {
  type Inner = ConquestMapExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestMapExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_DEVNAME: flatbuffers::VOffsetT = 6;
  pub const VT_MAPDIFFICULTY: flatbuffers::VOffsetT = 8;
  pub const VT_STEPINDEX: flatbuffers::VOffsetT = 10;
  pub const VT_CONQUESTMAP: flatbuffers::VOffsetT = 12;
  pub const VT_STEPENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_STEPOPENCONDITIONTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_STEPOPENCONDITIONPARAMETER: flatbuffers::VOffsetT = 18;
  pub const VT_MAPGOALLOCALIZE: flatbuffers::VOffsetT = 20;
  pub const VT_STEPGOALLOCALIZE: flatbuffers::VOffsetT = 22;
  pub const VT_STEPNAMELOCALIZE: flatbuffers::VOffsetT = 24;
  pub const VT_CONQUESTMAPBG: flatbuffers::VOffsetT = 26;
  pub const VT_CAMERASETTINGID: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestMapExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestMapExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestMapExcel<'bldr>> {
    let mut builder = ConquestMapExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestMap");
      let x = args.CameraSettingId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CameraSettingId(x);
      let x = args.StepEnterScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StepEnterScenarioGroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.ConquestMapBG {
        builder.add_ConquestMapBG(x);
      }
      if let Some(x) = args.StepNameLocalize {
        builder.add_StepNameLocalize(x);
      }
      if let Some(x) = args.StepGoalLocalize {
        builder.add_StepGoalLocalize(x);
      }
      if let Some(x) = args.MapGoalLocalize {
        builder.add_MapGoalLocalize(x);
      }
      if let Some(x) = args.StepOpenConditionParameter {
        builder.add_StepOpenConditionParameter(x);
      }
      if let Some(x) = args.StepOpenConditionType {
        builder.add_StepOpenConditionType(x);
      }
      if let Some(x) = args.ConquestMap {
        builder.add_ConquestMap(x);
      }
      let x = args.StepIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StepIndex(x);
      let x = args.MapDifficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MapDifficulty(x);
      if let Some(x) = args.DevName {
        builder.add_DevName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestMapExcelT {
    let key = table_encryption_service::create_key(b"ConquestMap");
      let EventContentId = self.EventContentId();
    let DevName = self.DevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let MapDifficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MapDifficulty(), &key)
      } else {
        self.MapDifficulty()
      };
      let StepIndex = self.StepIndex();
    let ConquestMap = self.ConquestMap().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StepEnterScenarioGroupId = self.StepEnterScenarioGroupId();
    let StepOpenConditionType = self.StepOpenConditionType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StepOpenConditionParameter = self.StepOpenConditionParameter().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let MapGoalLocalize = self.MapGoalLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StepGoalLocalize = self.StepGoalLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StepNameLocalize = self.StepNameLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ConquestMapBG = self.ConquestMapBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CameraSettingId = self.CameraSettingId();
    ConquestMapExcelT {
      EventContentId,
      DevName,
      MapDifficulty,
      StepIndex,
      ConquestMap,
      StepEnterScenarioGroupId,
      StepOpenConditionType,
      StepOpenConditionParameter,
      MapGoalLocalize,
      StepGoalLocalize,
      StepNameLocalize,
      ConquestMapBG,
      CameraSettingId,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestMapExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestMapExcel::VT_DEVNAME, None)}
  }
  #[inline]
  pub fn MapDifficulty(&self) -> StageDifficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageDifficulty>(ConquestMapExcel::VT_MAPDIFFICULTY, Some(StageDifficulty::None)).unwrap()}
  }
  #[inline]
  pub fn StepIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestMapExcel::VT_STEPINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestMapExcel::VT_CONQUESTMAP, None)}
  }
  #[inline]
  pub fn StepEnterScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestMapExcel::VT_STEPENTERSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StepOpenConditionType(&self) -> Option<flatbuffers::Vector<'a, ConquestConditionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ConquestConditionType>>>(ConquestMapExcel::VT_STEPOPENCONDITIONTYPE, None)}
  }
  #[inline]
  pub fn StepOpenConditionParameter(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ConquestMapExcel::VT_STEPOPENCONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn MapGoalLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestMapExcel::VT_MAPGOALLOCALIZE, None)}
  }
  #[inline]
  pub fn StepGoalLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestMapExcel::VT_STEPGOALLOCALIZE, None)}
  }
  #[inline]
  pub fn StepNameLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestMapExcel::VT_STEPNAMELOCALIZE, None)}
  }
  #[inline]
  pub fn ConquestMapBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestMapExcel::VT_CONQUESTMAPBG, None)}
  }
  #[inline]
  pub fn CameraSettingId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestMapExcel::VT_CAMERASETTINGID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestMapExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DevName", Self::VT_DEVNAME, false)?
     .visit_field::<StageDifficulty>("MapDifficulty", Self::VT_MAPDIFFICULTY, false)?
     .visit_field::<i32>("StepIndex", Self::VT_STEPINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ConquestMap", Self::VT_CONQUESTMAP, false)?
     .visit_field::<i64>("StepEnterScenarioGroupId", Self::VT_STEPENTERSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ConquestConditionType>>>("StepOpenConditionType", Self::VT_STEPOPENCONDITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("StepOpenConditionParameter", Self::VT_STEPOPENCONDITIONPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MapGoalLocalize", Self::VT_MAPGOALLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StepGoalLocalize", Self::VT_STEPGOALLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StepNameLocalize", Self::VT_STEPNAMELOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ConquestMapBG", Self::VT_CONQUESTMAPBG, false)?
     .visit_field::<i64>("CameraSettingId", Self::VT_CAMERASETTINGID, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestMapExcelArgs<'a> {
    pub EventContentId: i64,
    pub DevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MapDifficulty: StageDifficulty,
    pub StepIndex: i32,
    pub ConquestMap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StepEnterScenarioGroupId: i64,
    pub StepOpenConditionType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ConquestConditionType>>>,
    pub StepOpenConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub MapGoalLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StepGoalLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StepNameLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ConquestMapBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CameraSettingId: i64,
}
impl<'a> Default for ConquestMapExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestMapExcelArgs {
      EventContentId: 0,
      DevName: None,
      MapDifficulty: StageDifficulty::None,
      StepIndex: 0,
      ConquestMap: None,
      StepEnterScenarioGroupId: 0,
      StepOpenConditionType: None,
      StepOpenConditionParameter: None,
      MapGoalLocalize: None,
      StepGoalLocalize: None,
      StepNameLocalize: None,
      ConquestMapBG: None,
      CameraSettingId: 0,
    }
  }
}

impl Serialize for ConquestMapExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestMapExcel", 13)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      if let Some(f) = self.DevName() {
        s.serialize_field("DevName", &f)?;
      } else {
        s.skip_field("DevName")?;
      }
      s.serialize_field("MapDifficulty", &self.MapDifficulty())?;
      s.serialize_field("StepIndex", &self.StepIndex())?;
      if let Some(f) = self.ConquestMap() {
        s.serialize_field("ConquestMap", &f)?;
      } else {
        s.skip_field("ConquestMap")?;
      }
      s.serialize_field("StepEnterScenarioGroupId", &self.StepEnterScenarioGroupId())?;
      if let Some(f) = self.StepOpenConditionType() {
        s.serialize_field("StepOpenConditionType", &f)?;
      } else {
        s.skip_field("StepOpenConditionType")?;
      }
      if let Some(f) = self.StepOpenConditionParameter() {
        s.serialize_field("StepOpenConditionParameter", &f)?;
      } else {
        s.skip_field("StepOpenConditionParameter")?;
      }
      if let Some(f) = self.MapGoalLocalize() {
        s.serialize_field("MapGoalLocalize", &f)?;
      } else {
        s.skip_field("MapGoalLocalize")?;
      }
      if let Some(f) = self.StepGoalLocalize() {
        s.serialize_field("StepGoalLocalize", &f)?;
      } else {
        s.skip_field("StepGoalLocalize")?;
      }
      if let Some(f) = self.StepNameLocalize() {
        s.serialize_field("StepNameLocalize", &f)?;
      } else {
        s.skip_field("StepNameLocalize")?;
      }
      if let Some(f) = self.ConquestMapBG() {
        s.serialize_field("ConquestMapBG", &f)?;
      } else {
        s.skip_field("ConquestMapBG")?;
      }
      s.serialize_field("CameraSettingId", &self.CameraSettingId())?;
    s.end()
  }
}

pub struct ConquestMapExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestMapExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestMapExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_DevName(&mut self, DevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_DEVNAME, DevName);
  }
  #[inline]
  pub fn add_MapDifficulty(&mut self, MapDifficulty: StageDifficulty) {
    self.fbb_.push_slot::<StageDifficulty>(ConquestMapExcel::VT_MAPDIFFICULTY, MapDifficulty, StageDifficulty::None);
  }
  #[inline]
  pub fn add_StepIndex(&mut self, StepIndex: i32) {
    self.fbb_.push_slot::<i32>(ConquestMapExcel::VT_STEPINDEX, StepIndex, 0);
  }
  #[inline]
  pub fn add_ConquestMap(&mut self, ConquestMap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_CONQUESTMAP, ConquestMap);
  }
  #[inline]
  pub fn add_StepEnterScenarioGroupId(&mut self, StepEnterScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(ConquestMapExcel::VT_STEPENTERSCENARIOGROUPID, StepEnterScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_StepOpenConditionType(&mut self, StepOpenConditionType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ConquestConditionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_STEPOPENCONDITIONTYPE, StepOpenConditionType);
  }
  #[inline]
  pub fn add_StepOpenConditionParameter(&mut self, StepOpenConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_STEPOPENCONDITIONPARAMETER, StepOpenConditionParameter);
  }
  #[inline]
  pub fn add_MapGoalLocalize(&mut self, MapGoalLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_MAPGOALLOCALIZE, MapGoalLocalize);
  }
  #[inline]
  pub fn add_StepGoalLocalize(&mut self, StepGoalLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_STEPGOALLOCALIZE, StepGoalLocalize);
  }
  #[inline]
  pub fn add_StepNameLocalize(&mut self, StepNameLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_STEPNAMELOCALIZE, StepNameLocalize);
  }
  #[inline]
  pub fn add_ConquestMapBG(&mut self, ConquestMapBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestMapExcel::VT_CONQUESTMAPBG, ConquestMapBG);
  }
  #[inline]
  pub fn add_CameraSettingId(&mut self, CameraSettingId: i64) {
    self.fbb_.push_slot::<i64>(ConquestMapExcel::VT_CAMERASETTINGID, CameraSettingId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestMapExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestMapExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestMapExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestMapExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestMapExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("DevName", &self.DevName());
      ds.field("MapDifficulty", &self.MapDifficulty());
      ds.field("StepIndex", &self.StepIndex());
      ds.field("ConquestMap", &self.ConquestMap());
      ds.field("StepEnterScenarioGroupId", &self.StepEnterScenarioGroupId());
      ds.field("StepOpenConditionType", &self.StepOpenConditionType());
      ds.field("StepOpenConditionParameter", &self.StepOpenConditionParameter());
      ds.field("MapGoalLocalize", &self.MapGoalLocalize());
      ds.field("StepGoalLocalize", &self.StepGoalLocalize());
      ds.field("StepNameLocalize", &self.StepNameLocalize());
      ds.field("ConquestMapBG", &self.ConquestMapBG());
      ds.field("CameraSettingId", &self.CameraSettingId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestMapExcelT {
  pub EventContentId: i64,
  pub DevName: Option<String>,
  pub MapDifficulty: StageDifficulty,
  pub StepIndex: i32,
  pub ConquestMap: Option<String>,
  pub StepEnterScenarioGroupId: i64,
  pub StepOpenConditionType: Option<Vec<ConquestConditionType>>,
  pub StepOpenConditionParameter: Option<Vec<String>>,
  pub MapGoalLocalize: Option<String>,
  pub StepGoalLocalize: Option<String>,
  pub StepNameLocalize: Option<String>,
  pub ConquestMapBG: Option<String>,
  pub CameraSettingId: i64,
}
impl Default for ConquestMapExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      DevName: None,
      MapDifficulty: StageDifficulty::None,
      StepIndex: 0,
      ConquestMap: None,
      StepEnterScenarioGroupId: 0,
      StepOpenConditionType: None,
      StepOpenConditionParameter: None,
      MapGoalLocalize: None,
      StepGoalLocalize: None,
      StepNameLocalize: None,
      ConquestMapBG: None,
      CameraSettingId: 0,
    }
  }
}
impl ConquestMapExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestMapExcel<'b>> {
    let EventContentId = self.EventContentId;
    let DevName = self.DevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MapDifficulty = self.MapDifficulty;
    let StepIndex = self.StepIndex;
    let ConquestMap = self.ConquestMap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StepEnterScenarioGroupId = self.StepEnterScenarioGroupId;
    let StepOpenConditionType = self.StepOpenConditionType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StepOpenConditionParameter = self.StepOpenConditionParameter.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let MapGoalLocalize = self.MapGoalLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StepGoalLocalize = self.StepGoalLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StepNameLocalize = self.StepNameLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ConquestMapBG = self.ConquestMapBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CameraSettingId = self.CameraSettingId;
    ConquestMapExcel::create(_fbb, &ConquestMapExcelArgs{
      EventContentId,
      DevName,
      MapDifficulty,
      StepIndex,
      ConquestMap,
      StepEnterScenarioGroupId,
      StepOpenConditionType,
      StepOpenConditionParameter,
      MapGoalLocalize,
      StepGoalLocalize,
      StepNameLocalize,
      ConquestMapBG,
      CameraSettingId,
    })
  }
}
