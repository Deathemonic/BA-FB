// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldWorldMapZoneExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldWorldMapZoneExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldWorldMapZoneExcel<'a> {
  type Inner = FieldWorldMapZoneExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldWorldMapZoneExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_DATE: flatbuffers::VOffsetT = 8;
  pub const VT_OPENCONDITIONTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_OPENCONDITIONID: flatbuffers::VOffsetT = 12;
  pub const VT_CLOSECONDITIONTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_CLOSECONDITIONID: flatbuffers::VOffsetT = 16;
  pub const VT_RESULTFIELDSCENE: flatbuffers::VOffsetT = 18;
  pub const VT_FIELDSTAGEINTERACTIONID: flatbuffers::VOffsetT = 20;
  pub const VT_WORLDMAPBUTTONTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_LOCALIZECODE: flatbuffers::VOffsetT = 24;
  pub const VT_NEWTAGDISPLAY: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldWorldMapZoneExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldWorldMapZoneExcelArgs
  ) -> flatbuffers::WIPOffset<FieldWorldMapZoneExcel<'bldr>> {
    let mut builder = FieldWorldMapZoneExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldWorldMapZone");
      let x = args.FieldStageInteractionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FieldStageInteractionId(x);
      let x = args.ResultFieldScene;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultFieldScene(x);
      let x = args.CloseConditionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CloseConditionId(x);
      let x = args.OpenConditionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenConditionId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.LocalizeCode;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeCode(x);
      let x = args.WorldMapButtonType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_WorldMapButtonType(x);
      let x = args.CloseConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CloseConditionType(x);
      let x = args.OpenConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OpenConditionType(x);
      let x = args.Date;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Date(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_GroupId(x);
      builder.add_NewTagDisplay(args.NewTagDisplay);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldWorldMapZoneExcelT {
    let key = table_encryption_service::create_key(b"FieldWorldMapZone");
      let Id = self.Id();
      let GroupId = self.GroupId();
      let Date = self.Date();
      let OpenConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OpenConditionType(), &key)
      } else {
        self.OpenConditionType()
      };
      let OpenConditionId = self.OpenConditionId();
      let CloseConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CloseConditionType(), &key)
      } else {
        self.CloseConditionType()
      };
      let CloseConditionId = self.CloseConditionId();
      let ResultFieldScene = self.ResultFieldScene();
      let FieldStageInteractionId = self.FieldStageInteractionId();
      let WorldMapButtonType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.WorldMapButtonType(), &key)
      } else {
        self.WorldMapButtonType()
      };
      let LocalizeCode = self.LocalizeCode();
      let NewTagDisplay = self.NewTagDisplay();
    FieldWorldMapZoneExcelT {
      Id,
      GroupId,
      Date,
      OpenConditionType,
      OpenConditionId,
      CloseConditionType,
      CloseConditionId,
      ResultFieldScene,
      FieldStageInteractionId,
      WorldMapButtonType,
      LocalizeCode,
      NewTagDisplay,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldWorldMapZoneExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FieldWorldMapZoneExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Date(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FieldWorldMapZoneExcel::VT_DATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionType(&self) -> FieldConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldConditionType>(FieldWorldMapZoneExcel::VT_OPENCONDITIONTYPE, Some(FieldConditionType::Invalid)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldWorldMapZoneExcel::VT_OPENCONDITIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CloseConditionType(&self) -> FieldConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldConditionType>(FieldWorldMapZoneExcel::VT_CLOSECONDITIONTYPE, Some(FieldConditionType::Invalid)).unwrap()}
  }
  #[inline]
  pub fn CloseConditionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldWorldMapZoneExcel::VT_CLOSECONDITIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResultFieldScene(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldWorldMapZoneExcel::VT_RESULTFIELDSCENE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FieldStageInteractionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldWorldMapZoneExcel::VT_FIELDSTAGEINTERACTIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn WorldMapButtonType(&self) -> FieldWorldMapButtonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldWorldMapButtonType>(FieldWorldMapZoneExcel::VT_WORLDMAPBUTTONTYPE, Some(FieldWorldMapButtonType::DefaultMode)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCode(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FieldWorldMapZoneExcel::VT_LOCALIZECODE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NewTagDisplay(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FieldWorldMapZoneExcel::VT_NEWTAGDISPLAY, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FieldWorldMapZoneExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i32>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i32>("Date", Self::VT_DATE, false)?
     .visit_field::<FieldConditionType>("OpenConditionType", Self::VT_OPENCONDITIONTYPE, false)?
     .visit_field::<i64>("OpenConditionId", Self::VT_OPENCONDITIONID, false)?
     .visit_field::<FieldConditionType>("CloseConditionType", Self::VT_CLOSECONDITIONTYPE, false)?
     .visit_field::<i64>("CloseConditionId", Self::VT_CLOSECONDITIONID, false)?
     .visit_field::<i64>("ResultFieldScene", Self::VT_RESULTFIELDSCENE, false)?
     .visit_field::<i64>("FieldStageInteractionId", Self::VT_FIELDSTAGEINTERACTIONID, false)?
     .visit_field::<FieldWorldMapButtonType>("WorldMapButtonType", Self::VT_WORLDMAPBUTTONTYPE, false)?
     .visit_field::<u32>("LocalizeCode", Self::VT_LOCALIZECODE, false)?
     .visit_field::<bool>("NewTagDisplay", Self::VT_NEWTAGDISPLAY, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldWorldMapZoneExcelArgs {
    pub Id: i64,
    pub GroupId: i32,
    pub Date: i32,
    pub OpenConditionType: FieldConditionType,
    pub OpenConditionId: i64,
    pub CloseConditionType: FieldConditionType,
    pub CloseConditionId: i64,
    pub ResultFieldScene: i64,
    pub FieldStageInteractionId: i64,
    pub WorldMapButtonType: FieldWorldMapButtonType,
    pub LocalizeCode: u32,
    pub NewTagDisplay: bool,
}
impl<'a> Default for FieldWorldMapZoneExcelArgs {
  #[inline]
  fn default() -> Self {
    FieldWorldMapZoneExcelArgs {
      Id: 0,
      GroupId: 0,
      Date: 0,
      OpenConditionType: FieldConditionType::Invalid,
      OpenConditionId: 0,
      CloseConditionType: FieldConditionType::Invalid,
      CloseConditionId: 0,
      ResultFieldScene: 0,
      FieldStageInteractionId: 0,
      WorldMapButtonType: FieldWorldMapButtonType::DefaultMode,
      LocalizeCode: 0,
      NewTagDisplay: false,
    }
  }
}

impl Serialize for FieldWorldMapZoneExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldWorldMapZoneExcel", 12)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("Date", &self.Date())?;
      s.serialize_field("OpenConditionType", &self.OpenConditionType())?;
      s.serialize_field("OpenConditionId", &self.OpenConditionId())?;
      s.serialize_field("CloseConditionType", &self.CloseConditionType())?;
      s.serialize_field("CloseConditionId", &self.CloseConditionId())?;
      s.serialize_field("ResultFieldScene", &self.ResultFieldScene())?;
      s.serialize_field("FieldStageInteractionId", &self.FieldStageInteractionId())?;
      s.serialize_field("WorldMapButtonType", &self.WorldMapButtonType())?;
      s.serialize_field("LocalizeCode", &self.LocalizeCode())?;
      s.serialize_field("NewTagDisplay", &self.NewTagDisplay())?;
    s.end()
  }
}

pub struct FieldWorldMapZoneExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldWorldMapZoneExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(FieldWorldMapZoneExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i32) {
    self.fbb_.push_slot::<i32>(FieldWorldMapZoneExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_Date(&mut self, Date: i32) {
    self.fbb_.push_slot::<i32>(FieldWorldMapZoneExcel::VT_DATE, Date, 0);
  }
  #[inline]
  pub fn add_OpenConditionType(&mut self, OpenConditionType: FieldConditionType) {
    self.fbb_.push_slot::<FieldConditionType>(FieldWorldMapZoneExcel::VT_OPENCONDITIONTYPE, OpenConditionType, FieldConditionType::Invalid);
  }
  #[inline]
  pub fn add_OpenConditionId(&mut self, OpenConditionId: i64) {
    self.fbb_.push_slot::<i64>(FieldWorldMapZoneExcel::VT_OPENCONDITIONID, OpenConditionId, 0);
  }
  #[inline]
  pub fn add_CloseConditionType(&mut self, CloseConditionType: FieldConditionType) {
    self.fbb_.push_slot::<FieldConditionType>(FieldWorldMapZoneExcel::VT_CLOSECONDITIONTYPE, CloseConditionType, FieldConditionType::Invalid);
  }
  #[inline]
  pub fn add_CloseConditionId(&mut self, CloseConditionId: i64) {
    self.fbb_.push_slot::<i64>(FieldWorldMapZoneExcel::VT_CLOSECONDITIONID, CloseConditionId, 0);
  }
  #[inline]
  pub fn add_ResultFieldScene(&mut self, ResultFieldScene: i64) {
    self.fbb_.push_slot::<i64>(FieldWorldMapZoneExcel::VT_RESULTFIELDSCENE, ResultFieldScene, 0);
  }
  #[inline]
  pub fn add_FieldStageInteractionId(&mut self, FieldStageInteractionId: i64) {
    self.fbb_.push_slot::<i64>(FieldWorldMapZoneExcel::VT_FIELDSTAGEINTERACTIONID, FieldStageInteractionId, 0);
  }
  #[inline]
  pub fn add_WorldMapButtonType(&mut self, WorldMapButtonType: FieldWorldMapButtonType) {
    self.fbb_.push_slot::<FieldWorldMapButtonType>(FieldWorldMapZoneExcel::VT_WORLDMAPBUTTONTYPE, WorldMapButtonType, FieldWorldMapButtonType::DefaultMode);
  }
  #[inline]
  pub fn add_LocalizeCode(&mut self, LocalizeCode: u32) {
    self.fbb_.push_slot::<u32>(FieldWorldMapZoneExcel::VT_LOCALIZECODE, LocalizeCode, 0);
  }
  #[inline]
  pub fn add_NewTagDisplay(&mut self, NewTagDisplay: bool) {
    self.fbb_.push_slot::<bool>(FieldWorldMapZoneExcel::VT_NEWTAGDISPLAY, NewTagDisplay, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldWorldMapZoneExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldWorldMapZoneExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldWorldMapZoneExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldWorldMapZoneExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldWorldMapZoneExcel");
      ds.field("Id", &self.Id());
      ds.field("GroupId", &self.GroupId());
      ds.field("Date", &self.Date());
      ds.field("OpenConditionType", &self.OpenConditionType());
      ds.field("OpenConditionId", &self.OpenConditionId());
      ds.field("CloseConditionType", &self.CloseConditionType());
      ds.field("CloseConditionId", &self.CloseConditionId());
      ds.field("ResultFieldScene", &self.ResultFieldScene());
      ds.field("FieldStageInteractionId", &self.FieldStageInteractionId());
      ds.field("WorldMapButtonType", &self.WorldMapButtonType());
      ds.field("LocalizeCode", &self.LocalizeCode());
      ds.field("NewTagDisplay", &self.NewTagDisplay());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldWorldMapZoneExcelT {
  pub Id: i64,
  pub GroupId: i32,
  pub Date: i32,
  pub OpenConditionType: FieldConditionType,
  pub OpenConditionId: i64,
  pub CloseConditionType: FieldConditionType,
  pub CloseConditionId: i64,
  pub ResultFieldScene: i64,
  pub FieldStageInteractionId: i64,
  pub WorldMapButtonType: FieldWorldMapButtonType,
  pub LocalizeCode: u32,
  pub NewTagDisplay: bool,
}
impl Default for FieldWorldMapZoneExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      GroupId: 0,
      Date: 0,
      OpenConditionType: FieldConditionType::Invalid,
      OpenConditionId: 0,
      CloseConditionType: FieldConditionType::Invalid,
      CloseConditionId: 0,
      ResultFieldScene: 0,
      FieldStageInteractionId: 0,
      WorldMapButtonType: FieldWorldMapButtonType::DefaultMode,
      LocalizeCode: 0,
      NewTagDisplay: false,
    }
  }
}
impl FieldWorldMapZoneExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldWorldMapZoneExcel<'b>> {
    let Id = self.Id;
    let GroupId = self.GroupId;
    let Date = self.Date;
    let OpenConditionType = self.OpenConditionType;
    let OpenConditionId = self.OpenConditionId;
    let CloseConditionType = self.CloseConditionType;
    let CloseConditionId = self.CloseConditionId;
    let ResultFieldScene = self.ResultFieldScene;
    let FieldStageInteractionId = self.FieldStageInteractionId;
    let WorldMapButtonType = self.WorldMapButtonType;
    let LocalizeCode = self.LocalizeCode;
    let NewTagDisplay = self.NewTagDisplay;
    FieldWorldMapZoneExcel::create(_fbb, &FieldWorldMapZoneExcelArgs{
      Id,
      GroupId,
      Date,
      OpenConditionType,
      OpenConditionId,
      CloseConditionType,
      CloseConditionId,
      ResultFieldScene,
      FieldStageInteractionId,
      WorldMapButtonType,
      LocalizeCode,
      NewTagDisplay,
    })
  }
}
