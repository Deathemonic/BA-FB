// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FurnitureGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FurnitureGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FurnitureGroupExcel<'a> {
  type Inner = FurnitureGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FurnitureGroupExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_GROUPNAMELOCALIZE: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_REQUIREDFURNITURECOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_COMFORTBONUS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FurnitureGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FurnitureGroupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FurnitureGroupExcel<'bldr>> {
    let mut builder = FurnitureGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FurnitureGroup");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ComfortBonus {
        builder.add_ComfortBonus(x);
      }
      if let Some(x) = args.RequiredFurnitureCount {
        builder.add_RequiredFurnitureCount(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.GroupNameLocalize;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_GroupNameLocalize(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FurnitureGroupExcelT {
    let key = table_encryption_service::create_key(b"FurnitureGroup");
      let Id = self.Id();
      let GroupNameLocalize = self.GroupNameLocalize();
      let LocalizeEtcId = self.LocalizeEtcId();
    let RequiredFurnitureCount = self.RequiredFurnitureCount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let ComfortBonus = self.ComfortBonus().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    FurnitureGroupExcelT {
      Id,
      GroupNameLocalize,
      LocalizeEtcId,
      RequiredFurnitureCount,
      ComfortBonus,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureGroupExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupNameLocalize(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FurnitureGroupExcel::VT_GROUPNAMELOCALIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FurnitureGroupExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequiredFurnitureCount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FurnitureGroupExcel::VT_REQUIREDFURNITURECOUNT, None)}
  }
  #[inline]
  pub fn ComfortBonus(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FurnitureGroupExcel::VT_COMFORTBONUS, None)}
  }
}

impl flatbuffers::Verifiable for FurnitureGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("GroupNameLocalize", Self::VT_GROUPNAMELOCALIZE, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("RequiredFurnitureCount", Self::VT_REQUIREDFURNITURECOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ComfortBonus", Self::VT_COMFORTBONUS, false)?
     .finish();
    Ok(())
  }
}
pub struct FurnitureGroupExcelArgs<'a> {
    pub Id: i64,
    pub GroupNameLocalize: u32,
    pub LocalizeEtcId: u32,
    pub RequiredFurnitureCount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub ComfortBonus: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for FurnitureGroupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FurnitureGroupExcelArgs {
      Id: 0,
      GroupNameLocalize: 0,
      LocalizeEtcId: 0,
      RequiredFurnitureCount: None,
      ComfortBonus: None,
    }
  }
}

impl Serialize for FurnitureGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FurnitureGroupExcel", 5)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("GroupNameLocalize", &self.GroupNameLocalize())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.RequiredFurnitureCount() {
        s.serialize_field("RequiredFurnitureCount", &f)?;
      } else {
        s.skip_field("RequiredFurnitureCount")?;
      }
      if let Some(f) = self.ComfortBonus() {
        s.serialize_field("ComfortBonus", &f)?;
      } else {
        s.skip_field("ComfortBonus")?;
      }
    s.end()
  }
}

pub struct FurnitureGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FurnitureGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(FurnitureGroupExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_GroupNameLocalize(&mut self, GroupNameLocalize: u32) {
    self.fbb_.push_slot::<u32>(FurnitureGroupExcel::VT_GROUPNAMELOCALIZE, GroupNameLocalize, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(FurnitureGroupExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_RequiredFurnitureCount(&mut self, RequiredFurnitureCount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureGroupExcel::VT_REQUIREDFURNITURECOUNT, RequiredFurnitureCount);
  }
  #[inline]
  pub fn add_ComfortBonus(&mut self, ComfortBonus: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureGroupExcel::VT_COMFORTBONUS, ComfortBonus);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FurnitureGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FurnitureGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FurnitureGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FurnitureGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FurnitureGroupExcel");
      ds.field("Id", &self.Id());
      ds.field("GroupNameLocalize", &self.GroupNameLocalize());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("RequiredFurnitureCount", &self.RequiredFurnitureCount());
      ds.field("ComfortBonus", &self.ComfortBonus());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FurnitureGroupExcelT {
  pub Id: i64,
  pub GroupNameLocalize: u32,
  pub LocalizeEtcId: u32,
  pub RequiredFurnitureCount: Option<Vec<i32>>,
  pub ComfortBonus: Option<Vec<i64>>,
}
impl Default for FurnitureGroupExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      GroupNameLocalize: 0,
      LocalizeEtcId: 0,
      RequiredFurnitureCount: None,
      ComfortBonus: None,
    }
  }
}
impl FurnitureGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FurnitureGroupExcel<'b>> {
    let Id = self.Id;
    let GroupNameLocalize = self.GroupNameLocalize;
    let LocalizeEtcId = self.LocalizeEtcId;
    let RequiredFurnitureCount = self.RequiredFurnitureCount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ComfortBonus = self.ComfortBonus.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    FurnitureGroupExcel::create(_fbb, &FurnitureGroupExcelArgs{
      Id,
      GroupNameLocalize,
      LocalizeEtcId,
      RequiredFurnitureCount,
      ComfortBonus,
    })
  }
}
