// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDefenseFixedStatExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDefenseFixedStatExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDefenseFixedStatExcel<'a> {
  type Inner = MiniGameDefenseFixedStatExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDefenseFixedStatExcel<'a> {
  pub const VT_MINIGAMEDEFENSEFIXEDSTATID: flatbuffers::VOffsetT = 4;
  pub const VT_LEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_GRADE: flatbuffers::VOffsetT = 8;
  pub const VT_EXSKILLLEVEL: flatbuffers::VOffsetT = 10;
  pub const VT_NONEEXSKILLLEVEL: flatbuffers::VOffsetT = 12;
  pub const VT_EQUIPMENT1TIER: flatbuffers::VOffsetT = 14;
  pub const VT_EQUIPMENT1LEVEL: flatbuffers::VOffsetT = 16;
  pub const VT_EQUIPMENT2TIER: flatbuffers::VOffsetT = 18;
  pub const VT_EQUIPMENT2LEVEL: flatbuffers::VOffsetT = 20;
  pub const VT_EQUIPMENT3TIER: flatbuffers::VOffsetT = 22;
  pub const VT_EQUIPMENT3LEVEL: flatbuffers::VOffsetT = 24;
  pub const VT_CHARACTERWEAPONGRADE: flatbuffers::VOffsetT = 26;
  pub const VT_CHARACTERWEAPONLEVEL: flatbuffers::VOffsetT = 28;
  pub const VT_CHARACTERGEARTIER: flatbuffers::VOffsetT = 30;
  pub const VT_CHARACTERGEARLEVEL: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDefenseFixedStatExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDefenseFixedStatExcelArgs
  ) -> flatbuffers::WIPOffset<MiniGameDefenseFixedStatExcel<'bldr>> {
    let mut builder = MiniGameDefenseFixedStatExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDefenseFixedStat");
      let x = args.MinigameDefenseFixedStatId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MinigameDefenseFixedStatId(x);
      let x = args.CharacterGearLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CharacterGearLevel(x);
      let x = args.CharacterGearTier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CharacterGearTier(x);
      let x = args.CharacterWeaponLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CharacterWeaponLevel(x);
      let x = args.CharacterWeaponGrade;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CharacterWeaponGrade(x);
      let x = args.Equipment3Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Equipment3Level(x);
      let x = args.Equipment3Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Equipment3Tier(x);
      let x = args.Equipment2Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Equipment2Level(x);
      let x = args.Equipment2Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Equipment2Tier(x);
      let x = args.Equipment1Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Equipment1Level(x);
      let x = args.Equipment1Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Equipment1Tier(x);
      let x = args.NoneExSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NoneExSkillLevel(x);
      let x = args.ExSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExSkillLevel(x);
      let x = args.Grade;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Grade(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Level(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDefenseFixedStatExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDefenseFixedStat");
      let MinigameDefenseFixedStatId = self.MinigameDefenseFixedStatId();
      let Level = self.Level();
      let Grade = self.Grade();
      let ExSkillLevel = self.ExSkillLevel();
      let NoneExSkillLevel = self.NoneExSkillLevel();
      let Equipment1Tier = self.Equipment1Tier();
      let Equipment1Level = self.Equipment1Level();
      let Equipment2Tier = self.Equipment2Tier();
      let Equipment2Level = self.Equipment2Level();
      let Equipment3Tier = self.Equipment3Tier();
      let Equipment3Level = self.Equipment3Level();
      let CharacterWeaponGrade = self.CharacterWeaponGrade();
      let CharacterWeaponLevel = self.CharacterWeaponLevel();
      let CharacterGearTier = self.CharacterGearTier();
      let CharacterGearLevel = self.CharacterGearLevel();
    MiniGameDefenseFixedStatExcelT {
      MinigameDefenseFixedStatId,
      Level,
      Grade,
      ExSkillLevel,
      NoneExSkillLevel,
      Equipment1Tier,
      Equipment1Level,
      Equipment2Tier,
      Equipment2Level,
      Equipment3Tier,
      Equipment3Level,
      CharacterWeaponGrade,
      CharacterWeaponLevel,
      CharacterGearTier,
      CharacterGearLevel,
    }
  }

  #[inline]
  pub fn MinigameDefenseFixedStatId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDefenseFixedStatExcel::VT_MINIGAMEDEFENSEFIXEDSTATID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Grade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_GRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_EXSKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NoneExSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_NONEEXSKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Equipment1Tier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT1TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Equipment1Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT1LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Equipment2Tier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT2TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Equipment2Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT2LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Equipment3Tier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT3TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Equipment3Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT3LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterWeaponGrade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERWEAPONGRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterWeaponLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERWEAPONLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterGearTier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERGEARTIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterGearLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERGEARLEVEL, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameDefenseFixedStatExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("MinigameDefenseFixedStatId", Self::VT_MINIGAMEDEFENSEFIXEDSTATID, false)?
     .visit_field::<i32>("Level", Self::VT_LEVEL, false)?
     .visit_field::<i32>("Grade", Self::VT_GRADE, false)?
     .visit_field::<i32>("ExSkillLevel", Self::VT_EXSKILLLEVEL, false)?
     .visit_field::<i32>("NoneExSkillLevel", Self::VT_NONEEXSKILLLEVEL, false)?
     .visit_field::<i32>("Equipment1Tier", Self::VT_EQUIPMENT1TIER, false)?
     .visit_field::<i32>("Equipment1Level", Self::VT_EQUIPMENT1LEVEL, false)?
     .visit_field::<i32>("Equipment2Tier", Self::VT_EQUIPMENT2TIER, false)?
     .visit_field::<i32>("Equipment2Level", Self::VT_EQUIPMENT2LEVEL, false)?
     .visit_field::<i32>("Equipment3Tier", Self::VT_EQUIPMENT3TIER, false)?
     .visit_field::<i32>("Equipment3Level", Self::VT_EQUIPMENT3LEVEL, false)?
     .visit_field::<i32>("CharacterWeaponGrade", Self::VT_CHARACTERWEAPONGRADE, false)?
     .visit_field::<i32>("CharacterWeaponLevel", Self::VT_CHARACTERWEAPONLEVEL, false)?
     .visit_field::<i32>("CharacterGearTier", Self::VT_CHARACTERGEARTIER, false)?
     .visit_field::<i32>("CharacterGearLevel", Self::VT_CHARACTERGEARLEVEL, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDefenseFixedStatExcelArgs {
    pub MinigameDefenseFixedStatId: i64,
    pub Level: i32,
    pub Grade: i32,
    pub ExSkillLevel: i32,
    pub NoneExSkillLevel: i32,
    pub Equipment1Tier: i32,
    pub Equipment1Level: i32,
    pub Equipment2Tier: i32,
    pub Equipment2Level: i32,
    pub Equipment3Tier: i32,
    pub Equipment3Level: i32,
    pub CharacterWeaponGrade: i32,
    pub CharacterWeaponLevel: i32,
    pub CharacterGearTier: i32,
    pub CharacterGearLevel: i32,
}
impl<'a> Default for MiniGameDefenseFixedStatExcelArgs {
  #[inline]
  fn default() -> Self {
    MiniGameDefenseFixedStatExcelArgs {
      MinigameDefenseFixedStatId: 0,
      Level: 0,
      Grade: 0,
      ExSkillLevel: 0,
      NoneExSkillLevel: 0,
      Equipment1Tier: 0,
      Equipment1Level: 0,
      Equipment2Tier: 0,
      Equipment2Level: 0,
      Equipment3Tier: 0,
      Equipment3Level: 0,
      CharacterWeaponGrade: 0,
      CharacterWeaponLevel: 0,
      CharacterGearTier: 0,
      CharacterGearLevel: 0,
    }
  }
}

impl Serialize for MiniGameDefenseFixedStatExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDefenseFixedStatExcel", 15)?;
      s.serialize_field("MinigameDefenseFixedStatId", &self.MinigameDefenseFixedStatId())?;
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("Grade", &self.Grade())?;
      s.serialize_field("ExSkillLevel", &self.ExSkillLevel())?;
      s.serialize_field("NoneExSkillLevel", &self.NoneExSkillLevel())?;
      s.serialize_field("Equipment1Tier", &self.Equipment1Tier())?;
      s.serialize_field("Equipment1Level", &self.Equipment1Level())?;
      s.serialize_field("Equipment2Tier", &self.Equipment2Tier())?;
      s.serialize_field("Equipment2Level", &self.Equipment2Level())?;
      s.serialize_field("Equipment3Tier", &self.Equipment3Tier())?;
      s.serialize_field("Equipment3Level", &self.Equipment3Level())?;
      s.serialize_field("CharacterWeaponGrade", &self.CharacterWeaponGrade())?;
      s.serialize_field("CharacterWeaponLevel", &self.CharacterWeaponLevel())?;
      s.serialize_field("CharacterGearTier", &self.CharacterGearTier())?;
      s.serialize_field("CharacterGearLevel", &self.CharacterGearLevel())?;
    s.end()
  }
}

pub struct MiniGameDefenseFixedStatExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDefenseFixedStatExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_MinigameDefenseFixedStatId(&mut self, MinigameDefenseFixedStatId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDefenseFixedStatExcel::VT_MINIGAMEDEFENSEFIXEDSTATID, MinigameDefenseFixedStatId, 0);
  }
  #[inline]
  pub fn add_Level(&mut self, Level: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_Grade(&mut self, Grade: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_GRADE, Grade, 0);
  }
  #[inline]
  pub fn add_ExSkillLevel(&mut self, ExSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_EXSKILLLEVEL, ExSkillLevel, 0);
  }
  #[inline]
  pub fn add_NoneExSkillLevel(&mut self, NoneExSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_NONEEXSKILLLEVEL, NoneExSkillLevel, 0);
  }
  #[inline]
  pub fn add_Equipment1Tier(&mut self, Equipment1Tier: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT1TIER, Equipment1Tier, 0);
  }
  #[inline]
  pub fn add_Equipment1Level(&mut self, Equipment1Level: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT1LEVEL, Equipment1Level, 0);
  }
  #[inline]
  pub fn add_Equipment2Tier(&mut self, Equipment2Tier: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT2TIER, Equipment2Tier, 0);
  }
  #[inline]
  pub fn add_Equipment2Level(&mut self, Equipment2Level: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT2LEVEL, Equipment2Level, 0);
  }
  #[inline]
  pub fn add_Equipment3Tier(&mut self, Equipment3Tier: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT3TIER, Equipment3Tier, 0);
  }
  #[inline]
  pub fn add_Equipment3Level(&mut self, Equipment3Level: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_EQUIPMENT3LEVEL, Equipment3Level, 0);
  }
  #[inline]
  pub fn add_CharacterWeaponGrade(&mut self, CharacterWeaponGrade: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERWEAPONGRADE, CharacterWeaponGrade, 0);
  }
  #[inline]
  pub fn add_CharacterWeaponLevel(&mut self, CharacterWeaponLevel: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERWEAPONLEVEL, CharacterWeaponLevel, 0);
  }
  #[inline]
  pub fn add_CharacterGearTier(&mut self, CharacterGearTier: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERGEARTIER, CharacterGearTier, 0);
  }
  #[inline]
  pub fn add_CharacterGearLevel(&mut self, CharacterGearLevel: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDefenseFixedStatExcel::VT_CHARACTERGEARLEVEL, CharacterGearLevel, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDefenseFixedStatExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDefenseFixedStatExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDefenseFixedStatExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDefenseFixedStatExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDefenseFixedStatExcel");
      ds.field("MinigameDefenseFixedStatId", &self.MinigameDefenseFixedStatId());
      ds.field("Level", &self.Level());
      ds.field("Grade", &self.Grade());
      ds.field("ExSkillLevel", &self.ExSkillLevel());
      ds.field("NoneExSkillLevel", &self.NoneExSkillLevel());
      ds.field("Equipment1Tier", &self.Equipment1Tier());
      ds.field("Equipment1Level", &self.Equipment1Level());
      ds.field("Equipment2Tier", &self.Equipment2Tier());
      ds.field("Equipment2Level", &self.Equipment2Level());
      ds.field("Equipment3Tier", &self.Equipment3Tier());
      ds.field("Equipment3Level", &self.Equipment3Level());
      ds.field("CharacterWeaponGrade", &self.CharacterWeaponGrade());
      ds.field("CharacterWeaponLevel", &self.CharacterWeaponLevel());
      ds.field("CharacterGearTier", &self.CharacterGearTier());
      ds.field("CharacterGearLevel", &self.CharacterGearLevel());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDefenseFixedStatExcelT {
  pub MinigameDefenseFixedStatId: i64,
  pub Level: i32,
  pub Grade: i32,
  pub ExSkillLevel: i32,
  pub NoneExSkillLevel: i32,
  pub Equipment1Tier: i32,
  pub Equipment1Level: i32,
  pub Equipment2Tier: i32,
  pub Equipment2Level: i32,
  pub Equipment3Tier: i32,
  pub Equipment3Level: i32,
  pub CharacterWeaponGrade: i32,
  pub CharacterWeaponLevel: i32,
  pub CharacterGearTier: i32,
  pub CharacterGearLevel: i32,
}
impl Default for MiniGameDefenseFixedStatExcelT {
  fn default() -> Self {
    Self {
      MinigameDefenseFixedStatId: 0,
      Level: 0,
      Grade: 0,
      ExSkillLevel: 0,
      NoneExSkillLevel: 0,
      Equipment1Tier: 0,
      Equipment1Level: 0,
      Equipment2Tier: 0,
      Equipment2Level: 0,
      Equipment3Tier: 0,
      Equipment3Level: 0,
      CharacterWeaponGrade: 0,
      CharacterWeaponLevel: 0,
      CharacterGearTier: 0,
      CharacterGearLevel: 0,
    }
  }
}
impl MiniGameDefenseFixedStatExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDefenseFixedStatExcel<'b>> {
    let MinigameDefenseFixedStatId = self.MinigameDefenseFixedStatId;
    let Level = self.Level;
    let Grade = self.Grade;
    let ExSkillLevel = self.ExSkillLevel;
    let NoneExSkillLevel = self.NoneExSkillLevel;
    let Equipment1Tier = self.Equipment1Tier;
    let Equipment1Level = self.Equipment1Level;
    let Equipment2Tier = self.Equipment2Tier;
    let Equipment2Level = self.Equipment2Level;
    let Equipment3Tier = self.Equipment3Tier;
    let Equipment3Level = self.Equipment3Level;
    let CharacterWeaponGrade = self.CharacterWeaponGrade;
    let CharacterWeaponLevel = self.CharacterWeaponLevel;
    let CharacterGearTier = self.CharacterGearTier;
    let CharacterGearLevel = self.CharacterGearLevel;
    MiniGameDefenseFixedStatExcel::create(_fbb, &MiniGameDefenseFixedStatExcelArgs{
      MinigameDefenseFixedStatId,
      Level,
      Grade,
      ExSkillLevel,
      NoneExSkillLevel,
      Equipment1Tier,
      Equipment1Level,
      Equipment2Tier,
      Equipment2Level,
      Equipment3Tier,
      Equipment3Level,
      CharacterWeaponGrade,
      CharacterWeaponLevel,
      CharacterGearTier,
      CharacterGearLevel,
    })
  }
}
