// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentStageExcel<'a> {
  type Inner = EventContentStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentStageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 8;
  pub const VT_STAGEDIFFICULTY: flatbuffers::VOffsetT = 10;
  pub const VT_STAGENUMBER: flatbuffers::VOffsetT = 12;
  pub const VT_STAGEDISPLAY: flatbuffers::VOffsetT = 14;
  pub const VT_PREVSTAGEID: flatbuffers::VOffsetT = 16;
  pub const VT_OPENDATE: flatbuffers::VOffsetT = 18;
  pub const VT_OPENEVENTPOINT: flatbuffers::VOffsetT = 20;
  pub const VT_OPENCONDITIONSCENARIOPERMANENTSUBEVENTID: flatbuffers::VOffsetT = 22;
  pub const VT_PREVSTAGESUBEVENTID: flatbuffers::VOffsetT = 24;
  pub const VT_OPENCONDITIONSCENARIOID: flatbuffers::VOffsetT = 26;
  pub const VT_OPENCONDITIONCONTENTTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_OPENCONDITIONCONTENTID: flatbuffers::VOffsetT = 30;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 32;
  pub const VT_STAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 34;
  pub const VT_STAGEENTERCOSTID: flatbuffers::VOffsetT = 36;
  pub const VT_STAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 38;
  pub const VT_STAGEENTERECHELONCOUNT: flatbuffers::VOffsetT = 40;
  pub const VT_STARCONDITIONTACTICRANKSCOUNT: flatbuffers::VOffsetT = 42;
  pub const VT_STARCONDITIONTURNCOUNT: flatbuffers::VOffsetT = 44;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 46;
  pub const VT_CLEARSCENARIOGROUPID: flatbuffers::VOffsetT = 48;
  pub const VT_STRATEGYMAP: flatbuffers::VOffsetT = 50;
  pub const VT_STRATEGYMAPBG: flatbuffers::VOffsetT = 52;
  pub const VT_EVENTCONTENTSTAGEREWARDID: flatbuffers::VOffsetT = 54;
  pub const VT_MAXTURN: flatbuffers::VOffsetT = 56;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 58;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 60;
  pub const VT_BGMID: flatbuffers::VOffsetT = 62;
  pub const VT_STRATEGYENVIRONMENT: flatbuffers::VOffsetT = 64;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 66;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 68;
  pub const VT_BGMID: flatbuffers::VOffsetT = 70;
  pub const VT_INSTANTCLEAR: flatbuffers::VOffsetT = 72;
  pub const VT_BUFFCONTENTID: flatbuffers::VOffsetT = 74;
  pub const VT_FIXEDECHELONID: flatbuffers::VOffsetT = 76;
  pub const VT_CHALLENGEDISPLAY: flatbuffers::VOffsetT = 78;
  pub const VT_STARGOAL: flatbuffers::VOffsetT = 80;
  pub const VT_STARGOALAMOUNT: flatbuffers::VOffsetT = 82;
  pub const VT_ISDEFEATBATTLE: flatbuffers::VOffsetT = 84;
  pub const VT_STAGEHINT: flatbuffers::VOffsetT = 86;
  pub const VT_ECHELONEXTENSIONTYPE: flatbuffers::VOffsetT = 88;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentStageExcel<'bldr>> {
    let mut builder = EventContentStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentStage");
      let x = args.FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FixedEchelonId(x);
      let x = args.BuffContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BuffContentId(x);
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.GroundID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundID(x);
      let x = args.EventContentStageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentStageRewardId(x);
      let x = args.StarConditionTurnCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StarConditionTurnCount(x);
      let x = args.StarConditionTacticRankSCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StarConditionTacticRankSCount(x);
      let x = args.StageEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterCostId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.OpenConditionContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenConditionContentId(x);
      let x = args.OpenConditionScenarioId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenConditionScenarioId(x);
      let x = args.PrevStageSubEventId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevStageSubEventId(x);
      let x = args.OpenConditionScenarioPermanentSubEventId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenConditionScenarioPermanentSubEventId(x);
      let x = args.OpenEventPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenEventPoint(x);
      let x = args.OpenDate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenDate(x);
      let x = args.PrevStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevStageId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EchelonExtensionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EchelonExtensionType(x);
      let x = args.StageHint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StageHint(x);
      if let Some(x) = args.StarGoalAmount {
        builder.add_StarGoalAmount(x);
      }
      if let Some(x) = args.StarGoal {
        builder.add_StarGoal(x);
      }
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
      let x = args.StrategyEnvironment;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StrategyEnvironment(x);
      if let Some(x) = args.BgmId {
        builder.add_BgmId(x);
      }
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      let x = args.MaxTurn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxTurn(x);
      if let Some(x) = args.StrategyMapBG {
        builder.add_StrategyMapBG(x);
      }
      if let Some(x) = args.StrategyMap {
        builder.add_StrategyMap(x);
      }
      if let Some(x) = args.ClearScenarioGroupId {
        builder.add_ClearScenarioGroupId(x);
      }
      if let Some(x) = args.EnterScenarioGroupId {
        builder.add_EnterScenarioGroupId(x);
      }
      let x = args.StageEnterEchelonCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterEchelonCount(x);
      let x = args.StageEnterCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterCostAmount(x);
      let x = args.StageEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageEnterCostType(x);
      let x = args.OpenConditionContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OpenConditionContentType(x);
      let x = args.StageDisplay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageDisplay(x);
      if let Some(x) = args.StageNumber {
        builder.add_StageNumber(x);
      }
      let x = args.StageDifficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageDifficulty(x);
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      builder.add_IsDefeatBattle(args.IsDefeatBattle);
      builder.add_ChallengeDisplay(args.ChallengeDisplay);
      builder.add_InstantClear(args.InstantClear);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentStageExcelT {
    let key = table_encryption_service::create_key(b"EventContentStage");
      let Id = self.Id();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventContentId = self.EventContentId();
      let StageDifficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageDifficulty(), &key)
      } else {
        self.StageDifficulty()
      };
    let StageNumber = self.StageNumber().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StageDisplay = self.StageDisplay();
      let PrevStageId = self.PrevStageId();
      let OpenDate = self.OpenDate();
      let OpenEventPoint = self.OpenEventPoint();
      let OpenConditionScenarioPermanentSubEventId = self.OpenConditionScenarioPermanentSubEventId();
      let PrevStageSubEventId = self.PrevStageSubEventId();
      let OpenConditionScenarioId = self.OpenConditionScenarioId();
      let OpenConditionContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OpenConditionContentType(), &key)
      } else {
        self.OpenConditionContentType()
      };
      let OpenConditionContentId = self.OpenConditionContentId();
      let BattleDuration = self.BattleDuration();
      let StageEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageEnterCostType(), &key)
      } else {
        self.StageEnterCostType()
      };
      let StageEnterCostId = self.StageEnterCostId();
      let StageEnterCostAmount = self.StageEnterCostAmount();
      let StageEnterEchelonCount = self.StageEnterEchelonCount();
      let StarConditionTacticRankSCount = self.StarConditionTacticRankSCount();
      let StarConditionTurnCount = self.StarConditionTurnCount();
    let EnterScenarioGroupId = self.EnterScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StrategyMap = self.StrategyMap().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StrategyMapBG = self.StrategyMapBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventContentStageRewardId = self.EventContentStageRewardId();
      let MaxTurn = self.MaxTurn();
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let RecommandLevel = self.RecommandLevel();
    let BgmId = self.BgmId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StrategyEnvironment = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StrategyEnvironment(), &key)
      } else {
        self.StrategyEnvironment()
      };
      let GroundID = self.GroundID();
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let BGMId = self.BGMId();
      let InstantClear = self.InstantClear();
      let BuffContentId = self.BuffContentId();
      let FixedEchelonId = self.FixedEchelonId();
      let ChallengeDisplay = self.ChallengeDisplay();
    let StarGoal = self.StarGoal().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StarGoalAmount = self.StarGoalAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
      let IsDefeatBattle = self.IsDefeatBattle();
      let StageHint = self.StageHint();
      let EchelonExtensionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EchelonExtensionType(), &key)
      } else {
        self.EchelonExtensionType()
      };
    EventContentStageExcelT {
      Id,
      Name,
      EventContentId,
      StageDifficulty,
      StageNumber,
      StageDisplay,
      PrevStageId,
      OpenDate,
      OpenEventPoint,
      OpenConditionScenarioPermanentSubEventId,
      PrevStageSubEventId,
      OpenConditionScenarioId,
      OpenConditionContentType,
      OpenConditionContentId,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterEchelonCount,
      StarConditionTacticRankSCount,
      StarConditionTurnCount,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      StrategyMap,
      StrategyMapBG,
      EventContentStageRewardId,
      MaxTurn,
      StageTopography,
      RecommandLevel,
      BgmId,
      StrategyEnvironment,
      GroundID,
      ContentType,
      BGMId,
      InstantClear,
      BuffContentId,
      FixedEchelonId,
      ChallengeDisplay,
      StarGoal,
      StarGoalAmount,
      IsDefeatBattle,
      StageHint,
      EchelonExtensionType,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentStageExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageDifficulty(&self) -> StageDifficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageDifficulty>(EventContentStageExcel::VT_STAGEDIFFICULTY, Some(StageDifficulty::None)).unwrap()}
  }
  #[inline]
  pub fn StageNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentStageExcel::VT_STAGENUMBER, None)}
  }
  #[inline]
  pub fn StageDisplay(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentStageExcel::VT_STAGEDISPLAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrevStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_PREVSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenDate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_OPENDATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenEventPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_OPENEVENTPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionScenarioPermanentSubEventId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_OPENCONDITIONSCENARIOPERMANENTSUBEVENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrevStageSubEventId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_PREVSTAGESUBEVENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionScenarioId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_OPENCONDITIONSCENARIOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionContentType(&self) -> EventContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentType>(EventContentStageExcel::VT_OPENCONDITIONCONTENTTYPE, Some(EventContentType::Stage)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_OPENCONDITIONCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(EventContentStageExcel::VT_STAGEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_STAGEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentStageExcel::VT_STAGEENTERCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelonCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentStageExcel::VT_STAGEENTERECHELONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarConditionTacticRankSCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_STARCONDITIONTACTICRANKSCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarConditionTurnCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_STARCONDITIONTURNCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnterScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentStageExcel::VT_ENTERSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn ClearScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentStageExcel::VT_CLEARSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn StrategyMap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentStageExcel::VT_STRATEGYMAP, None)}
  }
  #[inline]
  pub fn StrategyMapBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentStageExcel::VT_STRATEGYMAPBG, None)}
  }
  #[inline]
  pub fn EventContentStageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_EVENTCONTENTSTAGEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxTurn(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentStageExcel::VT_MAXTURN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(EventContentStageExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentStageExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BgmId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentStageExcel::VT_BGMID, None)}
  }
  #[inline]
  pub fn StrategyEnvironment(&self) -> StrategyEnvironment {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StrategyEnvironment>(EventContentStageExcel::VT_STRATEGYENVIRONMENT, Some(StrategyEnvironment::None)).unwrap()}
  }
  #[inline]
  pub fn GroundID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(EventContentStageExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InstantClear(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentStageExcel::VT_INSTANTCLEAR, Some(false)).unwrap()}
  }
  #[inline]
  pub fn BuffContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_BUFFCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentStageExcel::VT_FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChallengeDisplay(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentStageExcel::VT_CHALLENGEDISPLAY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn StarGoal(&self) -> Option<flatbuffers::Vector<'a, StarGoalType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, StarGoalType>>>(EventContentStageExcel::VT_STARGOAL, None)}
  }
  #[inline]
  pub fn StarGoalAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(EventContentStageExcel::VT_STARGOALAMOUNT, None)}
  }
  #[inline]
  pub fn IsDefeatBattle(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentStageExcel::VT_ISDEFEATBATTLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn StageHint(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentStageExcel::VT_STAGEHINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonExtensionType(&self) -> EchelonExtensionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonExtensionType>(EventContentStageExcel::VT_ECHELONEXTENSIONTYPE, Some(EchelonExtensionType::Base)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<StageDifficulty>("StageDifficulty", Self::VT_STAGEDIFFICULTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StageNumber", Self::VT_STAGENUMBER, false)?
     .visit_field::<i32>("StageDisplay", Self::VT_STAGEDISPLAY, false)?
     .visit_field::<i64>("PrevStageId", Self::VT_PREVSTAGEID, false)?
     .visit_field::<i64>("OpenDate", Self::VT_OPENDATE, false)?
     .visit_field::<i64>("OpenEventPoint", Self::VT_OPENEVENTPOINT, false)?
     .visit_field::<i64>("OpenConditionScenarioPermanentSubEventId", Self::VT_OPENCONDITIONSCENARIOPERMANENTSUBEVENTID, false)?
     .visit_field::<i64>("PrevStageSubEventId", Self::VT_PREVSTAGESUBEVENTID, false)?
     .visit_field::<i64>("OpenConditionScenarioId", Self::VT_OPENCONDITIONSCENARIOID, false)?
     .visit_field::<EventContentType>("OpenConditionContentType", Self::VT_OPENCONDITIONCONTENTTYPE, false)?
     .visit_field::<i64>("OpenConditionContentId", Self::VT_OPENCONDITIONCONTENTID, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<ParcelType>("StageEnterCostType", Self::VT_STAGEENTERCOSTTYPE, false)?
     .visit_field::<i64>("StageEnterCostId", Self::VT_STAGEENTERCOSTID, false)?
     .visit_field::<i32>("StageEnterCostAmount", Self::VT_STAGEENTERCOSTAMOUNT, false)?
     .visit_field::<i32>("StageEnterEchelonCount", Self::VT_STAGEENTERECHELONCOUNT, false)?
     .visit_field::<i64>("StarConditionTacticRankSCount", Self::VT_STARCONDITIONTACTICRANKSCOUNT, false)?
     .visit_field::<i64>("StarConditionTurnCount", Self::VT_STARCONDITIONTURNCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("EnterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ClearScenarioGroupId", Self::VT_CLEARSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMap", Self::VT_STRATEGYMAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMapBG", Self::VT_STRATEGYMAPBG, false)?
     .visit_field::<i64>("EventContentStageRewardId", Self::VT_EVENTCONTENTSTAGEREWARDID, false)?
     .visit_field::<i32>("MaxTurn", Self::VT_MAXTURN, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<i32>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgmId", Self::VT_BGMID, false)?
     .visit_field::<StrategyEnvironment>("StrategyEnvironment", Self::VT_STRATEGYENVIRONMENT, false)?
     .visit_field::<i64>("GroundID", Self::VT_GROUNDID, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<bool>("InstantClear", Self::VT_INSTANTCLEAR, false)?
     .visit_field::<i64>("BuffContentId", Self::VT_BUFFCONTENTID, false)?
     .visit_field::<i64>("FixedEchelonId", Self::VT_FIXEDECHELONID, false)?
     .visit_field::<bool>("ChallengeDisplay", Self::VT_CHALLENGEDISPLAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, StarGoalType>>>("StarGoal", Self::VT_STARGOAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("StarGoalAmount", Self::VT_STARGOALAMOUNT, false)?
     .visit_field::<bool>("IsDefeatBattle", Self::VT_ISDEFEATBATTLE, false)?
     .visit_field::<u32>("StageHint", Self::VT_STAGEHINT, false)?
     .visit_field::<EchelonExtensionType>("EchelonExtensionType", Self::VT_ECHELONEXTENSIONTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentStageExcelArgs<'a> {
    pub Id: i64,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventContentId: i64,
    pub StageDifficulty: StageDifficulty,
    pub StageNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StageDisplay: i32,
    pub PrevStageId: i64,
    pub OpenDate: i64,
    pub OpenEventPoint: i64,
    pub OpenConditionScenarioPermanentSubEventId: i64,
    pub PrevStageSubEventId: i64,
    pub OpenConditionScenarioId: i64,
    pub OpenConditionContentType: EventContentType,
    pub OpenConditionContentId: i64,
    pub BattleDuration: i64,
    pub StageEnterCostType: ParcelType,
    pub StageEnterCostId: i64,
    pub StageEnterCostAmount: i32,
    pub StageEnterEchelonCount: i32,
    pub StarConditionTacticRankSCount: i64,
    pub StarConditionTurnCount: i64,
    pub EnterScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ClearScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StrategyMap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyMapBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventContentStageRewardId: i64,
    pub MaxTurn: i32,
    pub StageTopography: StageTopography,
    pub RecommandLevel: i32,
    pub BgmId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyEnvironment: StrategyEnvironment,
    pub GroundID: i64,
    pub ContentType: ContentType,
    pub BGMId: i64,
    pub InstantClear: bool,
    pub BuffContentId: i64,
    pub FixedEchelonId: i64,
    pub ChallengeDisplay: bool,
    pub StarGoal: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, StarGoalType>>>,
    pub StarGoalAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub IsDefeatBattle: bool,
    pub StageHint: u32,
    pub EchelonExtensionType: EchelonExtensionType,
}
impl<'a> Default for EventContentStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentStageExcelArgs {
      Id: 0,
      Name: None,
      EventContentId: 0,
      StageDifficulty: StageDifficulty::None,
      StageNumber: None,
      StageDisplay: 0,
      PrevStageId: 0,
      OpenDate: 0,
      OpenEventPoint: 0,
      OpenConditionScenarioPermanentSubEventId: 0,
      PrevStageSubEventId: 0,
      OpenConditionScenarioId: 0,
      OpenConditionContentType: EventContentType::Stage,
      OpenConditionContentId: 0,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageEnterEchelonCount: 0,
      StarConditionTacticRankSCount: 0,
      StarConditionTurnCount: 0,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      StrategyMap: None,
      StrategyMapBG: None,
      EventContentStageRewardId: 0,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      BgmId: None,
      StrategyEnvironment: StrategyEnvironment::None,
      GroundID: 0,
      ContentType: ContentType::None,
      BGMId: 0,
      InstantClear: false,
      BuffContentId: 0,
      FixedEchelonId: 0,
      ChallengeDisplay: false,
      StarGoal: None,
      StarGoalAmount: None,
      IsDefeatBattle: false,
      StageHint: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}

impl Serialize for EventContentStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentStageExcel", 43)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("StageDifficulty", &self.StageDifficulty())?;
      if let Some(f) = self.StageNumber() {
        s.serialize_field("StageNumber", &f)?;
      } else {
        s.skip_field("StageNumber")?;
      }
      s.serialize_field("StageDisplay", &self.StageDisplay())?;
      s.serialize_field("PrevStageId", &self.PrevStageId())?;
      s.serialize_field("OpenDate", &self.OpenDate())?;
      s.serialize_field("OpenEventPoint", &self.OpenEventPoint())?;
      s.serialize_field("OpenConditionScenarioPermanentSubEventId", &self.OpenConditionScenarioPermanentSubEventId())?;
      s.serialize_field("PrevStageSubEventId", &self.PrevStageSubEventId())?;
      s.serialize_field("OpenConditionScenarioId", &self.OpenConditionScenarioId())?;
      s.serialize_field("OpenConditionContentType", &self.OpenConditionContentType())?;
      s.serialize_field("OpenConditionContentId", &self.OpenConditionContentId())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("StageEnterCostType", &self.StageEnterCostType())?;
      s.serialize_field("StageEnterCostId", &self.StageEnterCostId())?;
      s.serialize_field("StageEnterCostAmount", &self.StageEnterCostAmount())?;
      s.serialize_field("StageEnterEchelonCount", &self.StageEnterEchelonCount())?;
      s.serialize_field("StarConditionTacticRankSCount", &self.StarConditionTacticRankSCount())?;
      s.serialize_field("StarConditionTurnCount", &self.StarConditionTurnCount())?;
      if let Some(f) = self.EnterScenarioGroupId() {
        s.serialize_field("EnterScenarioGroupId", &f)?;
      } else {
        s.skip_field("EnterScenarioGroupId")?;
      }
      if let Some(f) = self.ClearScenarioGroupId() {
        s.serialize_field("ClearScenarioGroupId", &f)?;
      } else {
        s.skip_field("ClearScenarioGroupId")?;
      }
      if let Some(f) = self.StrategyMap() {
        s.serialize_field("StrategyMap", &f)?;
      } else {
        s.skip_field("StrategyMap")?;
      }
      if let Some(f) = self.StrategyMapBG() {
        s.serialize_field("StrategyMapBG", &f)?;
      } else {
        s.skip_field("StrategyMapBG")?;
      }
      s.serialize_field("EventContentStageRewardId", &self.EventContentStageRewardId())?;
      s.serialize_field("MaxTurn", &self.MaxTurn())?;
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      if let Some(f) = self.BgmId() {
        s.serialize_field("BgmId", &f)?;
      } else {
        s.skip_field("BgmId")?;
      }
      s.serialize_field("StrategyEnvironment", &self.StrategyEnvironment())?;
      s.serialize_field("GroundID", &self.GroundID())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("BGMId", &self.BGMId())?;
      s.serialize_field("InstantClear", &self.InstantClear())?;
      s.serialize_field("BuffContentId", &self.BuffContentId())?;
      s.serialize_field("FixedEchelonId", &self.FixedEchelonId())?;
      s.serialize_field("ChallengeDisplay", &self.ChallengeDisplay())?;
      if let Some(f) = self.StarGoal() {
        s.serialize_field("StarGoal", &f)?;
      } else {
        s.skip_field("StarGoal")?;
      }
      if let Some(f) = self.StarGoalAmount() {
        s.serialize_field("StarGoalAmount", &f)?;
      } else {
        s.skip_field("StarGoalAmount")?;
      }
      s.serialize_field("IsDefeatBattle", &self.IsDefeatBattle())?;
      s.serialize_field("StageHint", &self.StageHint())?;
      s.serialize_field("EchelonExtensionType", &self.EchelonExtensionType())?;
    s.end()
  }
}

pub struct EventContentStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_StageDifficulty(&mut self, StageDifficulty: StageDifficulty) {
    self.fbb_.push_slot::<StageDifficulty>(EventContentStageExcel::VT_STAGEDIFFICULTY, StageDifficulty, StageDifficulty::None);
  }
  #[inline]
  pub fn add_StageNumber(&mut self, StageNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_STAGENUMBER, StageNumber);
  }
  #[inline]
  pub fn add_StageDisplay(&mut self, StageDisplay: i32) {
    self.fbb_.push_slot::<i32>(EventContentStageExcel::VT_STAGEDISPLAY, StageDisplay, 0);
  }
  #[inline]
  pub fn add_PrevStageId(&mut self, PrevStageId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_PREVSTAGEID, PrevStageId, 0);
  }
  #[inline]
  pub fn add_OpenDate(&mut self, OpenDate: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_OPENDATE, OpenDate, 0);
  }
  #[inline]
  pub fn add_OpenEventPoint(&mut self, OpenEventPoint: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_OPENEVENTPOINT, OpenEventPoint, 0);
  }
  #[inline]
  pub fn add_OpenConditionScenarioPermanentSubEventId(&mut self, OpenConditionScenarioPermanentSubEventId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_OPENCONDITIONSCENARIOPERMANENTSUBEVENTID, OpenConditionScenarioPermanentSubEventId, 0);
  }
  #[inline]
  pub fn add_PrevStageSubEventId(&mut self, PrevStageSubEventId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_PREVSTAGESUBEVENTID, PrevStageSubEventId, 0);
  }
  #[inline]
  pub fn add_OpenConditionScenarioId(&mut self, OpenConditionScenarioId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_OPENCONDITIONSCENARIOID, OpenConditionScenarioId, 0);
  }
  #[inline]
  pub fn add_OpenConditionContentType(&mut self, OpenConditionContentType: EventContentType) {
    self.fbb_.push_slot::<EventContentType>(EventContentStageExcel::VT_OPENCONDITIONCONTENTTYPE, OpenConditionContentType, EventContentType::Stage);
  }
  #[inline]
  pub fn add_OpenConditionContentId(&mut self, OpenConditionContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_OPENCONDITIONCONTENTID, OpenConditionContentId, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_StageEnterCostType(&mut self, StageEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(EventContentStageExcel::VT_STAGEENTERCOSTTYPE, StageEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_StageEnterCostId(&mut self, StageEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_STAGEENTERCOSTID, StageEnterCostId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostAmount(&mut self, StageEnterCostAmount: i32) {
    self.fbb_.push_slot::<i32>(EventContentStageExcel::VT_STAGEENTERCOSTAMOUNT, StageEnterCostAmount, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelonCount(&mut self, StageEnterEchelonCount: i32) {
    self.fbb_.push_slot::<i32>(EventContentStageExcel::VT_STAGEENTERECHELONCOUNT, StageEnterEchelonCount, 0);
  }
  #[inline]
  pub fn add_StarConditionTacticRankSCount(&mut self, StarConditionTacticRankSCount: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_STARCONDITIONTACTICRANKSCOUNT, StarConditionTacticRankSCount, 0);
  }
  #[inline]
  pub fn add_StarConditionTurnCount(&mut self, StarConditionTurnCount: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_STARCONDITIONTURNCOUNT, StarConditionTurnCount, 0);
  }
  #[inline]
  pub fn add_EnterScenarioGroupId(&mut self, EnterScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_ENTERSCENARIOGROUPID, EnterScenarioGroupId);
  }
  #[inline]
  pub fn add_ClearScenarioGroupId(&mut self, ClearScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_CLEARSCENARIOGROUPID, ClearScenarioGroupId);
  }
  #[inline]
  pub fn add_StrategyMap(&mut self, StrategyMap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_STRATEGYMAP, StrategyMap);
  }
  #[inline]
  pub fn add_StrategyMapBG(&mut self, StrategyMapBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_STRATEGYMAPBG, StrategyMapBG);
  }
  #[inline]
  pub fn add_EventContentStageRewardId(&mut self, EventContentStageRewardId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_EVENTCONTENTSTAGEREWARDID, EventContentStageRewardId, 0);
  }
  #[inline]
  pub fn add_MaxTurn(&mut self, MaxTurn: i32) {
    self.fbb_.push_slot::<i32>(EventContentStageExcel::VT_MAXTURN, MaxTurn, 0);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(EventContentStageExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i32) {
    self.fbb_.push_slot::<i32>(EventContentStageExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_BgmId(&mut self, BgmId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_BGMID, BgmId);
  }
  #[inline]
  pub fn add_StrategyEnvironment(&mut self, StrategyEnvironment: StrategyEnvironment) {
    self.fbb_.push_slot::<StrategyEnvironment>(EventContentStageExcel::VT_STRATEGYENVIRONMENT, StrategyEnvironment, StrategyEnvironment::None);
  }
  #[inline]
  pub fn add_GroundID(&mut self, GroundID: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_GROUNDID, GroundID, 0);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(EventContentStageExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_InstantClear(&mut self, InstantClear: bool) {
    self.fbb_.push_slot::<bool>(EventContentStageExcel::VT_INSTANTCLEAR, InstantClear, false);
  }
  #[inline]
  pub fn add_BuffContentId(&mut self, BuffContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_BUFFCONTENTID, BuffContentId, 0);
  }
  #[inline]
  pub fn add_FixedEchelonId(&mut self, FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(EventContentStageExcel::VT_FIXEDECHELONID, FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_ChallengeDisplay(&mut self, ChallengeDisplay: bool) {
    self.fbb_.push_slot::<bool>(EventContentStageExcel::VT_CHALLENGEDISPLAY, ChallengeDisplay, false);
  }
  #[inline]
  pub fn add_StarGoal(&mut self, StarGoal: flatbuffers::WIPOffset<flatbuffers::Vector<'b , StarGoalType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_STARGOAL, StarGoal);
  }
  #[inline]
  pub fn add_StarGoalAmount(&mut self, StarGoalAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentStageExcel::VT_STARGOALAMOUNT, StarGoalAmount);
  }
  #[inline]
  pub fn add_IsDefeatBattle(&mut self, IsDefeatBattle: bool) {
    self.fbb_.push_slot::<bool>(EventContentStageExcel::VT_ISDEFEATBATTLE, IsDefeatBattle, false);
  }
  #[inline]
  pub fn add_StageHint(&mut self, StageHint: u32) {
    self.fbb_.push_slot::<u32>(EventContentStageExcel::VT_STAGEHINT, StageHint, 0);
  }
  #[inline]
  pub fn add_EchelonExtensionType(&mut self, EchelonExtensionType: EchelonExtensionType) {
    self.fbb_.push_slot::<EchelonExtensionType>(EventContentStageExcel::VT_ECHELONEXTENSIONTYPE, EchelonExtensionType, EchelonExtensionType::Base);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentStageExcel");
      ds.field("Id", &self.Id());
      ds.field("Name", &self.Name());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("StageDifficulty", &self.StageDifficulty());
      ds.field("StageNumber", &self.StageNumber());
      ds.field("StageDisplay", &self.StageDisplay());
      ds.field("PrevStageId", &self.PrevStageId());
      ds.field("OpenDate", &self.OpenDate());
      ds.field("OpenEventPoint", &self.OpenEventPoint());
      ds.field("OpenConditionScenarioPermanentSubEventId", &self.OpenConditionScenarioPermanentSubEventId());
      ds.field("PrevStageSubEventId", &self.PrevStageSubEventId());
      ds.field("OpenConditionScenarioId", &self.OpenConditionScenarioId());
      ds.field("OpenConditionContentType", &self.OpenConditionContentType());
      ds.field("OpenConditionContentId", &self.OpenConditionContentId());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("StageEnterCostType", &self.StageEnterCostType());
      ds.field("StageEnterCostId", &self.StageEnterCostId());
      ds.field("StageEnterCostAmount", &self.StageEnterCostAmount());
      ds.field("StageEnterEchelonCount", &self.StageEnterEchelonCount());
      ds.field("StarConditionTacticRankSCount", &self.StarConditionTacticRankSCount());
      ds.field("StarConditionTurnCount", &self.StarConditionTurnCount());
      ds.field("EnterScenarioGroupId", &self.EnterScenarioGroupId());
      ds.field("ClearScenarioGroupId", &self.ClearScenarioGroupId());
      ds.field("StrategyMap", &self.StrategyMap());
      ds.field("StrategyMapBG", &self.StrategyMapBG());
      ds.field("EventContentStageRewardId", &self.EventContentStageRewardId());
      ds.field("MaxTurn", &self.MaxTurn());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("BgmId", &self.BgmId());
      ds.field("StrategyEnvironment", &self.StrategyEnvironment());
      ds.field("GroundID", &self.GroundID());
      ds.field("ContentType", &self.ContentType());
      ds.field("BGMId", &self.BGMId());
      ds.field("InstantClear", &self.InstantClear());
      ds.field("BuffContentId", &self.BuffContentId());
      ds.field("FixedEchelonId", &self.FixedEchelonId());
      ds.field("ChallengeDisplay", &self.ChallengeDisplay());
      ds.field("StarGoal", &self.StarGoal());
      ds.field("StarGoalAmount", &self.StarGoalAmount());
      ds.field("IsDefeatBattle", &self.IsDefeatBattle());
      ds.field("StageHint", &self.StageHint());
      ds.field("EchelonExtensionType", &self.EchelonExtensionType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentStageExcelT {
  pub Id: i64,
  pub Name: Option<String>,
  pub EventContentId: i64,
  pub StageDifficulty: StageDifficulty,
  pub StageNumber: Option<String>,
  pub StageDisplay: i32,
  pub PrevStageId: i64,
  pub OpenDate: i64,
  pub OpenEventPoint: i64,
  pub OpenConditionScenarioPermanentSubEventId: i64,
  pub PrevStageSubEventId: i64,
  pub OpenConditionScenarioId: i64,
  pub OpenConditionContentType: EventContentType,
  pub OpenConditionContentId: i64,
  pub BattleDuration: i64,
  pub StageEnterCostType: ParcelType,
  pub StageEnterCostId: i64,
  pub StageEnterCostAmount: i32,
  pub StageEnterEchelonCount: i32,
  pub StarConditionTacticRankSCount: i64,
  pub StarConditionTurnCount: i64,
  pub EnterScenarioGroupId: Option<Vec<i64>>,
  pub ClearScenarioGroupId: Option<Vec<i64>>,
  pub StrategyMap: Option<String>,
  pub StrategyMapBG: Option<String>,
  pub EventContentStageRewardId: i64,
  pub MaxTurn: i32,
  pub StageTopography: StageTopography,
  pub RecommandLevel: i32,
  pub BgmId: Option<String>,
  pub StrategyEnvironment: StrategyEnvironment,
  pub GroundID: i64,
  pub ContentType: ContentType,
  pub BGMId: i64,
  pub InstantClear: bool,
  pub BuffContentId: i64,
  pub FixedEchelonId: i64,
  pub ChallengeDisplay: bool,
  pub StarGoal: Option<Vec<StarGoalType>>,
  pub StarGoalAmount: Option<Vec<i32>>,
  pub IsDefeatBattle: bool,
  pub StageHint: u32,
  pub EchelonExtensionType: EchelonExtensionType,
}
impl Default for EventContentStageExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Name: None,
      EventContentId: 0,
      StageDifficulty: StageDifficulty::None,
      StageNumber: None,
      StageDisplay: 0,
      PrevStageId: 0,
      OpenDate: 0,
      OpenEventPoint: 0,
      OpenConditionScenarioPermanentSubEventId: 0,
      PrevStageSubEventId: 0,
      OpenConditionScenarioId: 0,
      OpenConditionContentType: EventContentType::Stage,
      OpenConditionContentId: 0,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageEnterEchelonCount: 0,
      StarConditionTacticRankSCount: 0,
      StarConditionTurnCount: 0,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      StrategyMap: None,
      StrategyMapBG: None,
      EventContentStageRewardId: 0,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      BgmId: None,
      StrategyEnvironment: StrategyEnvironment::None,
      GroundID: 0,
      ContentType: ContentType::None,
      BGMId: 0,
      InstantClear: false,
      BuffContentId: 0,
      FixedEchelonId: 0,
      ChallengeDisplay: false,
      StarGoal: None,
      StarGoalAmount: None,
      IsDefeatBattle: false,
      StageHint: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}
impl EventContentStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentStageExcel<'b>> {
    let Id = self.Id;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventContentId = self.EventContentId;
    let StageDifficulty = self.StageDifficulty;
    let StageNumber = self.StageNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StageDisplay = self.StageDisplay;
    let PrevStageId = self.PrevStageId;
    let OpenDate = self.OpenDate;
    let OpenEventPoint = self.OpenEventPoint;
    let OpenConditionScenarioPermanentSubEventId = self.OpenConditionScenarioPermanentSubEventId;
    let PrevStageSubEventId = self.PrevStageSubEventId;
    let OpenConditionScenarioId = self.OpenConditionScenarioId;
    let OpenConditionContentType = self.OpenConditionContentType;
    let OpenConditionContentId = self.OpenConditionContentId;
    let BattleDuration = self.BattleDuration;
    let StageEnterCostType = self.StageEnterCostType;
    let StageEnterCostId = self.StageEnterCostId;
    let StageEnterCostAmount = self.StageEnterCostAmount;
    let StageEnterEchelonCount = self.StageEnterEchelonCount;
    let StarConditionTacticRankSCount = self.StarConditionTacticRankSCount;
    let StarConditionTurnCount = self.StarConditionTurnCount;
    let EnterScenarioGroupId = self.EnterScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StrategyMap = self.StrategyMap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyMapBG = self.StrategyMapBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventContentStageRewardId = self.EventContentStageRewardId;
    let MaxTurn = self.MaxTurn;
    let StageTopography = self.StageTopography;
    let RecommandLevel = self.RecommandLevel;
    let BgmId = self.BgmId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyEnvironment = self.StrategyEnvironment;
    let GroundID = self.GroundID;
    let ContentType = self.ContentType;
    let BGMId = self.BGMId;
    let InstantClear = self.InstantClear;
    let BuffContentId = self.BuffContentId;
    let FixedEchelonId = self.FixedEchelonId;
    let ChallengeDisplay = self.ChallengeDisplay;
    let StarGoal = self.StarGoal.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StarGoalAmount = self.StarGoalAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IsDefeatBattle = self.IsDefeatBattle;
    let StageHint = self.StageHint;
    let EchelonExtensionType = self.EchelonExtensionType;
    EventContentStageExcel::create(_fbb, &EventContentStageExcelArgs{
      Id,
      Name,
      EventContentId,
      StageDifficulty,
      StageNumber,
      StageDisplay,
      PrevStageId,
      OpenDate,
      OpenEventPoint,
      OpenConditionScenarioPermanentSubEventId,
      PrevStageSubEventId,
      OpenConditionScenarioId,
      OpenConditionContentType,
      OpenConditionContentId,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterEchelonCount,
      StarConditionTacticRankSCount,
      StarConditionTurnCount,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      StrategyMap,
      StrategyMapBG,
      EventContentStageRewardId,
      MaxTurn,
      StageTopography,
      RecommandLevel,
      BgmId,
      StrategyEnvironment,
      GroundID,
      ContentType,
      BGMId,
      InstantClear,
      BuffContentId,
      FixedEchelonId,
      ChallengeDisplay,
      StarGoal,
      StarGoalAmount,
      IsDefeatBattle,
      StageHint,
      EchelonExtensionType,
    })
  }
}
