// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PickupFirstGetBonusExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PickupFirstGetBonusExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PickupFirstGetBonusExcel<'a> {
  type Inner = PickupFirstGetBonusExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PickupFirstGetBonusExcel<'a> {
  pub const VT_SHOPRECRUITID: flatbuffers::VOffsetT = 4;
  pub const VT_RECRUITSELLECTIONSHOPID: flatbuffers::VOffsetT = 6;
  pub const VT_PICKUPCHARACTERID: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PickupFirstGetBonusExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PickupFirstGetBonusExcelArgs
  ) -> flatbuffers::WIPOffset<PickupFirstGetBonusExcel<'bldr>> {
    let mut builder = PickupFirstGetBonusExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"PickupFirstGetBonus");
      let x = args.RewardParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelAmount(x);
      let x = args.RewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelId(x);
      let x = args.PickupCharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PickupCharacterId(x);
      let x = args.RecruitSellectionShopId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecruitSellectionShopId(x);
      let x = args.ShopRecruitId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShopRecruitId(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> PickupFirstGetBonusExcelT {
    let key = table_encryption_service::create_key(b"PickupFirstGetBonus");
      let ShopRecruitId = self.ShopRecruitId();
      let RecruitSellectionShopId = self.RecruitSellectionShopId();
      let PickupCharacterId = self.PickupCharacterId();
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelId = self.RewardParcelId();
      let RewardParcelAmount = self.RewardParcelAmount();
    PickupFirstGetBonusExcelT {
      ShopRecruitId,
      RecruitSellectionShopId,
      PickupCharacterId,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn ShopRecruitId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupFirstGetBonusExcel::VT_SHOPRECRUITID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecruitSellectionShopId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupFirstGetBonusExcel::VT_RECRUITSELLECTIONSHOPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PickupCharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupFirstGetBonusExcel::VT_PICKUPCHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(PickupFirstGetBonusExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupFirstGetBonusExcel::VT_REWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PickupFirstGetBonusExcel::VT_REWARDPARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PickupFirstGetBonusExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ShopRecruitId", Self::VT_SHOPRECRUITID, false)?
     .visit_field::<i64>("RecruitSellectionShopId", Self::VT_RECRUITSELLECTIONSHOPID, false)?
     .visit_field::<i64>("PickupCharacterId", Self::VT_PICKUPCHARACTERID, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<i64>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct PickupFirstGetBonusExcelArgs {
    pub ShopRecruitId: i64,
    pub RecruitSellectionShopId: i64,
    pub PickupCharacterId: i64,
    pub RewardParcelType: ParcelType,
    pub RewardParcelId: i64,
    pub RewardParcelAmount: i64,
}
impl<'a> Default for PickupFirstGetBonusExcelArgs {
  #[inline]
  fn default() -> Self {
    PickupFirstGetBonusExcelArgs {
      ShopRecruitId: 0,
      RecruitSellectionShopId: 0,
      PickupCharacterId: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
    }
  }
}

impl Serialize for PickupFirstGetBonusExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PickupFirstGetBonusExcel", 6)?;
      s.serialize_field("ShopRecruitId", &self.ShopRecruitId())?;
      s.serialize_field("RecruitSellectionShopId", &self.RecruitSellectionShopId())?;
      s.serialize_field("PickupCharacterId", &self.PickupCharacterId())?;
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelId", &self.RewardParcelId())?;
      s.serialize_field("RewardParcelAmount", &self.RewardParcelAmount())?;
    s.end()
  }
}

pub struct PickupFirstGetBonusExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PickupFirstGetBonusExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ShopRecruitId(&mut self, ShopRecruitId: i64) {
    self.fbb_.push_slot::<i64>(PickupFirstGetBonusExcel::VT_SHOPRECRUITID, ShopRecruitId, 0);
  }
  #[inline]
  pub fn add_RecruitSellectionShopId(&mut self, RecruitSellectionShopId: i64) {
    self.fbb_.push_slot::<i64>(PickupFirstGetBonusExcel::VT_RECRUITSELLECTIONSHOPID, RecruitSellectionShopId, 0);
  }
  #[inline]
  pub fn add_PickupCharacterId(&mut self, PickupCharacterId: i64) {
    self.fbb_.push_slot::<i64>(PickupFirstGetBonusExcel::VT_PICKUPCHARACTERID, PickupCharacterId, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(PickupFirstGetBonusExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(PickupFirstGetBonusExcel::VT_REWARDPARCELID, RewardParcelId, 0);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(PickupFirstGetBonusExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PickupFirstGetBonusExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PickupFirstGetBonusExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PickupFirstGetBonusExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PickupFirstGetBonusExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PickupFirstGetBonusExcel");
      ds.field("ShopRecruitId", &self.ShopRecruitId());
      ds.field("RecruitSellectionShopId", &self.RecruitSellectionShopId());
      ds.field("PickupCharacterId", &self.PickupCharacterId());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PickupFirstGetBonusExcelT {
  pub ShopRecruitId: i64,
  pub RecruitSellectionShopId: i64,
  pub PickupCharacterId: i64,
  pub RewardParcelType: ParcelType,
  pub RewardParcelId: i64,
  pub RewardParcelAmount: i64,
}
impl Default for PickupFirstGetBonusExcelT {
  fn default() -> Self {
    Self {
      ShopRecruitId: 0,
      RecruitSellectionShopId: 0,
      PickupCharacterId: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
    }
  }
}
impl PickupFirstGetBonusExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PickupFirstGetBonusExcel<'b>> {
    let ShopRecruitId = self.ShopRecruitId;
    let RecruitSellectionShopId = self.RecruitSellectionShopId;
    let PickupCharacterId = self.PickupCharacterId;
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelId = self.RewardParcelId;
    let RewardParcelAmount = self.RewardParcelAmount;
    PickupFirstGetBonusExcel::create(_fbb, &PickupFirstGetBonusExcelArgs{
      ShopRecruitId,
      RecruitSellectionShopId,
      PickupCharacterId,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    })
  }
}
