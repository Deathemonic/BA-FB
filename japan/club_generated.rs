// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CLUB: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CLUB: i32 = 55;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CLUB: [Club; 56] = [
  Club::None,
  Club::Engineer,
  Club::CleanNClearing,
  Club::KnightsHospitaller,
  Club::IndeGEHENNA,
  Club::IndeMILLENNIUM,
  Club::IndeHyakkiyako,
  Club::IndeShanhaijing,
  Club::IndeTrinity,
  Club::FoodService,
  Club::Countermeasure,
  Club::BookClub,
  Club::MatsuriOffice,
  Club::GourmetClub,
  Club::HoukagoDessert,
  Club::RedwinterSecretary,
  Club::Schale,
  Club::TheSeminar,
  Club::AriusSqud,
  Club::Justice,
  Club::Fuuki,
  Club::Kohshinjo68,
  Club::Meihuayuan,
  Club::SisterHood,
  Club::GameDev,
  Club::anzenkyoku,
  Club::RemedialClass,
  Club::SPTF,
  Club::TrinityVigilance,
  Club::Veritas,
  Club::TrainingClub,
  Club::Onmyobu,
  Club::Shugyobu,
  Club::Endanbou,
  Club::NinpoKenkyubu,
  Club::Class227,
  Club::EmptyClub,
  Club::Emergentology,
  Club::RabbitPlatoon,
  Club::PandemoniumSociety,
  Club::HotSpringsDepartment,
  Club::TeaParty,
  Club::PublicPeaceBureau,
  Club::Genryumon,
  Club::BlackTortoisePromenade,
  Club::LaborParty,
  Club::KnowledgeLiberationFront,
  Club::Hyakkayouran,
  Club::ShinySparkleSociety,
  Club::AbydosStudentCouncil,
  Club::CentralControlCenter,
  Club::FreightLogisticsDepartment,
  Club::OccultClub,
  Club::PrefectBrigade,
  Club::FreeTradeCartel,
  Club::NicomediasTroop,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Club(pub i32);
#[allow(non_upper_case_globals)]
impl Club {
  pub const None: Self = Self(0);
  pub const Engineer: Self = Self(1);
  pub const CleanNClearing: Self = Self(2);
  pub const KnightsHospitaller: Self = Self(3);
  pub const IndeGEHENNA: Self = Self(4);
  pub const IndeMILLENNIUM: Self = Self(5);
  pub const IndeHyakkiyako: Self = Self(6);
  pub const IndeShanhaijing: Self = Self(7);
  pub const IndeTrinity: Self = Self(8);
  pub const FoodService: Self = Self(9);
  pub const Countermeasure: Self = Self(10);
  pub const BookClub: Self = Self(11);
  pub const MatsuriOffice: Self = Self(12);
  pub const GourmetClub: Self = Self(13);
  pub const HoukagoDessert: Self = Self(14);
  pub const RedwinterSecretary: Self = Self(15);
  pub const Schale: Self = Self(16);
  pub const TheSeminar: Self = Self(17);
  pub const AriusSqud: Self = Self(18);
  pub const Justice: Self = Self(19);
  pub const Fuuki: Self = Self(20);
  pub const Kohshinjo68: Self = Self(21);
  pub const Meihuayuan: Self = Self(22);
  pub const SisterHood: Self = Self(23);
  pub const GameDev: Self = Self(24);
  pub const anzenkyoku: Self = Self(25);
  pub const RemedialClass: Self = Self(26);
  pub const SPTF: Self = Self(27);
  pub const TrinityVigilance: Self = Self(28);
  pub const Veritas: Self = Self(29);
  pub const TrainingClub: Self = Self(30);
  pub const Onmyobu: Self = Self(31);
  pub const Shugyobu: Self = Self(32);
  pub const Endanbou: Self = Self(33);
  pub const NinpoKenkyubu: Self = Self(34);
  pub const Class227: Self = Self(35);
  pub const EmptyClub: Self = Self(36);
  pub const Emergentology: Self = Self(37);
  pub const RabbitPlatoon: Self = Self(38);
  pub const PandemoniumSociety: Self = Self(39);
  pub const HotSpringsDepartment: Self = Self(40);
  pub const TeaParty: Self = Self(41);
  pub const PublicPeaceBureau: Self = Self(42);
  pub const Genryumon: Self = Self(43);
  pub const BlackTortoisePromenade: Self = Self(44);
  pub const LaborParty: Self = Self(45);
  pub const KnowledgeLiberationFront: Self = Self(46);
  pub const Hyakkayouran: Self = Self(47);
  pub const ShinySparkleSociety: Self = Self(48);
  pub const AbydosStudentCouncil: Self = Self(49);
  pub const CentralControlCenter: Self = Self(50);
  pub const FreightLogisticsDepartment: Self = Self(51);
  pub const OccultClub: Self = Self(52);
  pub const PrefectBrigade: Self = Self(53);
  pub const FreeTradeCartel: Self = Self(54);
  pub const NicomediasTroop: Self = Self(55);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 55;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Engineer,
    Self::CleanNClearing,
    Self::KnightsHospitaller,
    Self::IndeGEHENNA,
    Self::IndeMILLENNIUM,
    Self::IndeHyakkiyako,
    Self::IndeShanhaijing,
    Self::IndeTrinity,
    Self::FoodService,
    Self::Countermeasure,
    Self::BookClub,
    Self::MatsuriOffice,
    Self::GourmetClub,
    Self::HoukagoDessert,
    Self::RedwinterSecretary,
    Self::Schale,
    Self::TheSeminar,
    Self::AriusSqud,
    Self::Justice,
    Self::Fuuki,
    Self::Kohshinjo68,
    Self::Meihuayuan,
    Self::SisterHood,
    Self::GameDev,
    Self::anzenkyoku,
    Self::RemedialClass,
    Self::SPTF,
    Self::TrinityVigilance,
    Self::Veritas,
    Self::TrainingClub,
    Self::Onmyobu,
    Self::Shugyobu,
    Self::Endanbou,
    Self::NinpoKenkyubu,
    Self::Class227,
    Self::EmptyClub,
    Self::Emergentology,
    Self::RabbitPlatoon,
    Self::PandemoniumSociety,
    Self::HotSpringsDepartment,
    Self::TeaParty,
    Self::PublicPeaceBureau,
    Self::Genryumon,
    Self::BlackTortoisePromenade,
    Self::LaborParty,
    Self::KnowledgeLiberationFront,
    Self::Hyakkayouran,
    Self::ShinySparkleSociety,
    Self::AbydosStudentCouncil,
    Self::CentralControlCenter,
    Self::FreightLogisticsDepartment,
    Self::OccultClub,
    Self::PrefectBrigade,
    Self::FreeTradeCartel,
    Self::NicomediasTroop,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Engineer => Some("Engineer"),
      Self::CleanNClearing => Some("CleanNClearing"),
      Self::KnightsHospitaller => Some("KnightsHospitaller"),
      Self::IndeGEHENNA => Some("IndeGEHENNA"),
      Self::IndeMILLENNIUM => Some("IndeMILLENNIUM"),
      Self::IndeHyakkiyako => Some("IndeHyakkiyako"),
      Self::IndeShanhaijing => Some("IndeShanhaijing"),
      Self::IndeTrinity => Some("IndeTrinity"),
      Self::FoodService => Some("FoodService"),
      Self::Countermeasure => Some("Countermeasure"),
      Self::BookClub => Some("BookClub"),
      Self::MatsuriOffice => Some("MatsuriOffice"),
      Self::GourmetClub => Some("GourmetClub"),
      Self::HoukagoDessert => Some("HoukagoDessert"),
      Self::RedwinterSecretary => Some("RedwinterSecretary"),
      Self::Schale => Some("Schale"),
      Self::TheSeminar => Some("TheSeminar"),
      Self::AriusSqud => Some("AriusSqud"),
      Self::Justice => Some("Justice"),
      Self::Fuuki => Some("Fuuki"),
      Self::Kohshinjo68 => Some("Kohshinjo68"),
      Self::Meihuayuan => Some("Meihuayuan"),
      Self::SisterHood => Some("SisterHood"),
      Self::GameDev => Some("GameDev"),
      Self::anzenkyoku => Some("anzenkyoku"),
      Self::RemedialClass => Some("RemedialClass"),
      Self::SPTF => Some("SPTF"),
      Self::TrinityVigilance => Some("TrinityVigilance"),
      Self::Veritas => Some("Veritas"),
      Self::TrainingClub => Some("TrainingClub"),
      Self::Onmyobu => Some("Onmyobu"),
      Self::Shugyobu => Some("Shugyobu"),
      Self::Endanbou => Some("Endanbou"),
      Self::NinpoKenkyubu => Some("NinpoKenkyubu"),
      Self::Class227 => Some("Class227"),
      Self::EmptyClub => Some("EmptyClub"),
      Self::Emergentology => Some("Emergentology"),
      Self::RabbitPlatoon => Some("RabbitPlatoon"),
      Self::PandemoniumSociety => Some("PandemoniumSociety"),
      Self::HotSpringsDepartment => Some("HotSpringsDepartment"),
      Self::TeaParty => Some("TeaParty"),
      Self::PublicPeaceBureau => Some("PublicPeaceBureau"),
      Self::Genryumon => Some("Genryumon"),
      Self::BlackTortoisePromenade => Some("BlackTortoisePromenade"),
      Self::LaborParty => Some("LaborParty"),
      Self::KnowledgeLiberationFront => Some("KnowledgeLiberationFront"),
      Self::Hyakkayouran => Some("Hyakkayouran"),
      Self::ShinySparkleSociety => Some("ShinySparkleSociety"),
      Self::AbydosStudentCouncil => Some("AbydosStudentCouncil"),
      Self::CentralControlCenter => Some("CentralControlCenter"),
      Self::FreightLogisticsDepartment => Some("FreightLogisticsDepartment"),
      Self::OccultClub => Some("OccultClub"),
      Self::PrefectBrigade => Some("PrefectBrigade"),
      Self::FreeTradeCartel => Some("FreeTradeCartel"),
      Self::NicomediasTroop => Some("NicomediasTroop"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Club {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for Club {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("Club", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for Club {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Club {
    type Output = Club;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Club {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Club {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Club {}
