// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BattlePassExpLimitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BattlePassExpLimitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BattlePassExpLimitExcel<'a> {
  type Inner = BattlePassExpLimitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BattlePassExpLimitExcel<'a> {
  pub const VT_BATTLEPASSID: flatbuffers::VOffsetT = 4;
  pub const VT_LIMITSTARTTIME: flatbuffers::VOffsetT = 6;
  pub const VT_LIMITENDTIME: flatbuffers::VOffsetT = 8;
  pub const VT_EXPLIMITAMOUNT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BattlePassExpLimitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BattlePassExpLimitExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<BattlePassExpLimitExcel<'bldr>> {
    let mut builder = BattlePassExpLimitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BattlePassExpLimit");
      let x = args.ExpLimitAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExpLimitAmount(x);
      let x = args.BattlePassId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattlePassId(x);
      if let Some(x) = args.LimitEndTime {
        builder.add_LimitEndTime(x);
      }
      if let Some(x) = args.LimitStartTime {
        builder.add_LimitStartTime(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> BattlePassExpLimitExcelT {
    let key = table_encryption_service::create_key(b"BattlePassExpLimit");
      let BattlePassId = self.BattlePassId();
    let LimitStartTime = self.LimitStartTime().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LimitEndTime = self.LimitEndTime().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ExpLimitAmount = self.ExpLimitAmount();
    BattlePassExpLimitExcelT {
      BattlePassId,
      LimitStartTime,
      LimitEndTime,
      ExpLimitAmount,
    }
  }

  #[inline]
  pub fn BattlePassId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassExpLimitExcel::VT_BATTLEPASSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LimitStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassExpLimitExcel::VT_LIMITSTARTTIME, None)}
  }
  #[inline]
  pub fn LimitEndTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassExpLimitExcel::VT_LIMITENDTIME, None)}
  }
  #[inline]
  pub fn ExpLimitAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassExpLimitExcel::VT_EXPLIMITAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BattlePassExpLimitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("BattlePassId", Self::VT_BATTLEPASSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LimitStartTime", Self::VT_LIMITSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LimitEndTime", Self::VT_LIMITENDTIME, false)?
     .visit_field::<i64>("ExpLimitAmount", Self::VT_EXPLIMITAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct BattlePassExpLimitExcelArgs<'a> {
    pub BattlePassId: i64,
    pub LimitStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LimitEndTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ExpLimitAmount: i64,
}
impl<'a> Default for BattlePassExpLimitExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    BattlePassExpLimitExcelArgs {
      BattlePassId: 0,
      LimitStartTime: None,
      LimitEndTime: None,
      ExpLimitAmount: 0,
    }
  }
}

impl Serialize for BattlePassExpLimitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BattlePassExpLimitExcel", 4)?;
      s.serialize_field("BattlePassId", &self.BattlePassId())?;
      if let Some(f) = self.LimitStartTime() {
        s.serialize_field("LimitStartTime", &f)?;
      } else {
        s.skip_field("LimitStartTime")?;
      }
      if let Some(f) = self.LimitEndTime() {
        s.serialize_field("LimitEndTime", &f)?;
      } else {
        s.skip_field("LimitEndTime")?;
      }
      s.serialize_field("ExpLimitAmount", &self.ExpLimitAmount())?;
    s.end()
  }
}

pub struct BattlePassExpLimitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BattlePassExpLimitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_BattlePassId(&mut self, BattlePassId: i64) {
    self.fbb_.push_slot::<i64>(BattlePassExpLimitExcel::VT_BATTLEPASSID, BattlePassId, 0);
  }
  #[inline]
  pub fn add_LimitStartTime(&mut self, LimitStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassExpLimitExcel::VT_LIMITSTARTTIME, LimitStartTime);
  }
  #[inline]
  pub fn add_LimitEndTime(&mut self, LimitEndTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassExpLimitExcel::VT_LIMITENDTIME, LimitEndTime);
  }
  #[inline]
  pub fn add_ExpLimitAmount(&mut self, ExpLimitAmount: i64) {
    self.fbb_.push_slot::<i64>(BattlePassExpLimitExcel::VT_EXPLIMITAMOUNT, ExpLimitAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BattlePassExpLimitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BattlePassExpLimitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BattlePassExpLimitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BattlePassExpLimitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BattlePassExpLimitExcel");
      ds.field("BattlePassId", &self.BattlePassId());
      ds.field("LimitStartTime", &self.LimitStartTime());
      ds.field("LimitEndTime", &self.LimitEndTime());
      ds.field("ExpLimitAmount", &self.ExpLimitAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BattlePassExpLimitExcelT {
  pub BattlePassId: i64,
  pub LimitStartTime: Option<String>,
  pub LimitEndTime: Option<String>,
  pub ExpLimitAmount: i64,
}
impl Default for BattlePassExpLimitExcelT {
  fn default() -> Self {
    Self {
      BattlePassId: 0,
      LimitStartTime: None,
      LimitEndTime: None,
      ExpLimitAmount: 0,
    }
  }
}
impl BattlePassExpLimitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BattlePassExpLimitExcel<'b>> {
    let BattlePassId = self.BattlePassId;
    let LimitStartTime = self.LimitStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LimitEndTime = self.LimitEndTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ExpLimitAmount = self.ExpLimitAmount;
    BattlePassExpLimitExcel::create(_fbb, &BattlePassExpLimitExcelArgs{
      BattlePassId,
      LimitStartTime,
      LimitEndTime,
      ExpLimitAmount,
    })
  }
}
