// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ParcelAutoSynthExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ParcelAutoSynthExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ParcelAutoSynthExcel<'a> {
  type Inner = ParcelAutoSynthExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ParcelAutoSynthExcel<'a> {
  pub const VT_REQUIREPARCELTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_REQUIREPARCELID: flatbuffers::VOffsetT = 6;
  pub const VT_REQUIREPARCELAMOUNT: flatbuffers::VOffsetT = 8;
  pub const VT_SYNTHSTARTAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_SYNTHENDAMOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_SYNTHMAXITEM: flatbuffers::VOffsetT = 14;
  pub const VT_RESULTPARCELTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_RESULTPARCELID: flatbuffers::VOffsetT = 18;
  pub const VT_RESULTPARCELAMOUNT: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ParcelAutoSynthExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ParcelAutoSynthExcelArgs
  ) -> flatbuffers::WIPOffset<ParcelAutoSynthExcel<'bldr>> {
    let mut builder = ParcelAutoSynthExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ParcelAutoSynth");
      let x = args.ResultParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultParcelAmount(x);
      let x = args.ResultParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultParcelId(x);
      let x = args.SynthEndAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SynthEndAmount(x);
      let x = args.SynthStartAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SynthStartAmount(x);
      let x = args.RequireParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RequireParcelAmount(x);
      let x = args.RequireParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RequireParcelId(x);
      let x = args.ResultParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ResultParcelType(x);
      let x = args.RequireParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RequireParcelType(x);
      builder.add_SynthMaxItem(args.SynthMaxItem);
    builder.finish()
  }

  pub fn unpack(&self) -> ParcelAutoSynthExcelT {
    let key = table_encryption_service::create_key(b"ParcelAutoSynth");
      let RequireParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RequireParcelType(), &key)
      } else {
        self.RequireParcelType()
      };
      let RequireParcelId = self.RequireParcelId();
      let RequireParcelAmount = self.RequireParcelAmount();
      let SynthStartAmount = self.SynthStartAmount();
      let SynthEndAmount = self.SynthEndAmount();
      let SynthMaxItem = self.SynthMaxItem();
      let ResultParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ResultParcelType(), &key)
      } else {
        self.ResultParcelType()
      };
      let ResultParcelId = self.ResultParcelId();
      let ResultParcelAmount = self.ResultParcelAmount();
    ParcelAutoSynthExcelT {
      RequireParcelType,
      RequireParcelId,
      RequireParcelAmount,
      SynthStartAmount,
      SynthEndAmount,
      SynthMaxItem,
      ResultParcelType,
      ResultParcelId,
      ResultParcelAmount,
    }
  }

  #[inline]
  pub fn RequireParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ParcelAutoSynthExcel::VT_REQUIREPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RequireParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ParcelAutoSynthExcel::VT_REQUIREPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequireParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ParcelAutoSynthExcel::VT_REQUIREPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SynthStartAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ParcelAutoSynthExcel::VT_SYNTHSTARTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SynthEndAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ParcelAutoSynthExcel::VT_SYNTHENDAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SynthMaxItem(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ParcelAutoSynthExcel::VT_SYNTHMAXITEM, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ResultParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ParcelAutoSynthExcel::VT_RESULTPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ResultParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ParcelAutoSynthExcel::VT_RESULTPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResultParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ParcelAutoSynthExcel::VT_RESULTPARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ParcelAutoSynthExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ParcelType>("RequireParcelType", Self::VT_REQUIREPARCELTYPE, false)?
     .visit_field::<i64>("RequireParcelId", Self::VT_REQUIREPARCELID, false)?
     .visit_field::<i64>("RequireParcelAmount", Self::VT_REQUIREPARCELAMOUNT, false)?
     .visit_field::<i64>("SynthStartAmount", Self::VT_SYNTHSTARTAMOUNT, false)?
     .visit_field::<i64>("SynthEndAmount", Self::VT_SYNTHENDAMOUNT, false)?
     .visit_field::<bool>("SynthMaxItem", Self::VT_SYNTHMAXITEM, false)?
     .visit_field::<ParcelType>("ResultParcelType", Self::VT_RESULTPARCELTYPE, false)?
     .visit_field::<i64>("ResultParcelId", Self::VT_RESULTPARCELID, false)?
     .visit_field::<i64>("ResultParcelAmount", Self::VT_RESULTPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ParcelAutoSynthExcelArgs {
    pub RequireParcelType: ParcelType,
    pub RequireParcelId: i64,
    pub RequireParcelAmount: i64,
    pub SynthStartAmount: i64,
    pub SynthEndAmount: i64,
    pub SynthMaxItem: bool,
    pub ResultParcelType: ParcelType,
    pub ResultParcelId: i64,
    pub ResultParcelAmount: i64,
}
impl<'a> Default for ParcelAutoSynthExcelArgs {
  #[inline]
  fn default() -> Self {
    ParcelAutoSynthExcelArgs {
      RequireParcelType: ParcelType::None,
      RequireParcelId: 0,
      RequireParcelAmount: 0,
      SynthStartAmount: 0,
      SynthEndAmount: 0,
      SynthMaxItem: false,
      ResultParcelType: ParcelType::None,
      ResultParcelId: 0,
      ResultParcelAmount: 0,
    }
  }
}

impl Serialize for ParcelAutoSynthExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ParcelAutoSynthExcel", 9)?;
      s.serialize_field("RequireParcelType", &self.RequireParcelType())?;
      s.serialize_field("RequireParcelId", &self.RequireParcelId())?;
      s.serialize_field("RequireParcelAmount", &self.RequireParcelAmount())?;
      s.serialize_field("SynthStartAmount", &self.SynthStartAmount())?;
      s.serialize_field("SynthEndAmount", &self.SynthEndAmount())?;
      s.serialize_field("SynthMaxItem", &self.SynthMaxItem())?;
      s.serialize_field("ResultParcelType", &self.ResultParcelType())?;
      s.serialize_field("ResultParcelId", &self.ResultParcelId())?;
      s.serialize_field("ResultParcelAmount", &self.ResultParcelAmount())?;
    s.end()
  }
}

pub struct ParcelAutoSynthExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ParcelAutoSynthExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_RequireParcelType(&mut self, RequireParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ParcelAutoSynthExcel::VT_REQUIREPARCELTYPE, RequireParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RequireParcelId(&mut self, RequireParcelId: i64) {
    self.fbb_.push_slot::<i64>(ParcelAutoSynthExcel::VT_REQUIREPARCELID, RequireParcelId, 0);
  }
  #[inline]
  pub fn add_RequireParcelAmount(&mut self, RequireParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(ParcelAutoSynthExcel::VT_REQUIREPARCELAMOUNT, RequireParcelAmount, 0);
  }
  #[inline]
  pub fn add_SynthStartAmount(&mut self, SynthStartAmount: i64) {
    self.fbb_.push_slot::<i64>(ParcelAutoSynthExcel::VT_SYNTHSTARTAMOUNT, SynthStartAmount, 0);
  }
  #[inline]
  pub fn add_SynthEndAmount(&mut self, SynthEndAmount: i64) {
    self.fbb_.push_slot::<i64>(ParcelAutoSynthExcel::VT_SYNTHENDAMOUNT, SynthEndAmount, 0);
  }
  #[inline]
  pub fn add_SynthMaxItem(&mut self, SynthMaxItem: bool) {
    self.fbb_.push_slot::<bool>(ParcelAutoSynthExcel::VT_SYNTHMAXITEM, SynthMaxItem, false);
  }
  #[inline]
  pub fn add_ResultParcelType(&mut self, ResultParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ParcelAutoSynthExcel::VT_RESULTPARCELTYPE, ResultParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ResultParcelId(&mut self, ResultParcelId: i64) {
    self.fbb_.push_slot::<i64>(ParcelAutoSynthExcel::VT_RESULTPARCELID, ResultParcelId, 0);
  }
  #[inline]
  pub fn add_ResultParcelAmount(&mut self, ResultParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(ParcelAutoSynthExcel::VT_RESULTPARCELAMOUNT, ResultParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ParcelAutoSynthExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ParcelAutoSynthExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ParcelAutoSynthExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ParcelAutoSynthExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ParcelAutoSynthExcel");
      ds.field("RequireParcelType", &self.RequireParcelType());
      ds.field("RequireParcelId", &self.RequireParcelId());
      ds.field("RequireParcelAmount", &self.RequireParcelAmount());
      ds.field("SynthStartAmount", &self.SynthStartAmount());
      ds.field("SynthEndAmount", &self.SynthEndAmount());
      ds.field("SynthMaxItem", &self.SynthMaxItem());
      ds.field("ResultParcelType", &self.ResultParcelType());
      ds.field("ResultParcelId", &self.ResultParcelId());
      ds.field("ResultParcelAmount", &self.ResultParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ParcelAutoSynthExcelT {
  pub RequireParcelType: ParcelType,
  pub RequireParcelId: i64,
  pub RequireParcelAmount: i64,
  pub SynthStartAmount: i64,
  pub SynthEndAmount: i64,
  pub SynthMaxItem: bool,
  pub ResultParcelType: ParcelType,
  pub ResultParcelId: i64,
  pub ResultParcelAmount: i64,
}
impl Default for ParcelAutoSynthExcelT {
  fn default() -> Self {
    Self {
      RequireParcelType: ParcelType::None,
      RequireParcelId: 0,
      RequireParcelAmount: 0,
      SynthStartAmount: 0,
      SynthEndAmount: 0,
      SynthMaxItem: false,
      ResultParcelType: ParcelType::None,
      ResultParcelId: 0,
      ResultParcelAmount: 0,
    }
  }
}
impl ParcelAutoSynthExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ParcelAutoSynthExcel<'b>> {
    let RequireParcelType = self.RequireParcelType;
    let RequireParcelId = self.RequireParcelId;
    let RequireParcelAmount = self.RequireParcelAmount;
    let SynthStartAmount = self.SynthStartAmount;
    let SynthEndAmount = self.SynthEndAmount;
    let SynthMaxItem = self.SynthMaxItem;
    let ResultParcelType = self.ResultParcelType;
    let ResultParcelId = self.ResultParcelId;
    let ResultParcelAmount = self.ResultParcelAmount;
    ParcelAutoSynthExcel::create(_fbb, &ParcelAutoSynthExcelArgs{
      RequireParcelType,
      RequireParcelId,
      RequireParcelAmount,
      SynthStartAmount,
      SynthEndAmount,
      SynthMaxItem,
      ResultParcelType,
      ResultParcelId,
      ResultParcelAmount,
    })
  }
}
