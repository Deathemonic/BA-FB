// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGLevelExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGLevelExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGLevelExcel<'a> {
  type Inner = MinigameCCGLevelExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGLevelExcel<'a> {
  pub const VT_LEVELID: flatbuffers::VOffsetT = 4;
  pub const VT_CCGID: flatbuffers::VOffsetT = 6;
  pub const VT_FLOORINDEX: flatbuffers::VOffsetT = 8;
  pub const VT_BACKGROUNDPATH: flatbuffers::VOffsetT = 10;
  pub const VT_BGMID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGLevelExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGLevelExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGLevelExcel<'bldr>> {
    let mut builder = MinigameCCGLevelExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGLevel");
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.CCGId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CCGId(x);
      let x = args.LevelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LevelId(x);
      if let Some(x) = args.BackgroundPath {
        builder.add_BackgroundPath(x);
      }
      let x = args.FloorIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FloorIndex(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGLevelExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGLevel");
      let LevelId = self.LevelId();
      let CCGId = self.CCGId();
      let FloorIndex = self.FloorIndex();
    let BackgroundPath = self.BackgroundPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BGMId = self.BGMId();
    MinigameCCGLevelExcelT {
      LevelId,
      CCGId,
      FloorIndex,
      BackgroundPath,
      BGMId,
    }
  }

  #[inline]
  pub fn LevelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGLevelExcel::VT_LEVELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CCGId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGLevelExcel::VT_CCGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FloorIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGLevelExcel::VT_FLOORINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BackgroundPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGLevelExcel::VT_BACKGROUNDPATH, None)}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGLevelExcel::VT_BGMID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGLevelExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("LevelId", Self::VT_LEVELID, false)?
     .visit_field::<i64>("CCGId", Self::VT_CCGID, false)?
     .visit_field::<i32>("FloorIndex", Self::VT_FLOORINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BackgroundPath", Self::VT_BACKGROUNDPATH, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGLevelExcelArgs<'a> {
    pub LevelId: i64,
    pub CCGId: i64,
    pub FloorIndex: i32,
    pub BackgroundPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BGMId: i64,
}
impl<'a> Default for MinigameCCGLevelExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGLevelExcelArgs {
      LevelId: 0,
      CCGId: 0,
      FloorIndex: 0,
      BackgroundPath: None,
      BGMId: 0,
    }
  }
}

impl Serialize for MinigameCCGLevelExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGLevelExcel", 5)?;
      s.serialize_field("LevelId", &self.LevelId())?;
      s.serialize_field("CCGId", &self.CCGId())?;
      s.serialize_field("FloorIndex", &self.FloorIndex())?;
      if let Some(f) = self.BackgroundPath() {
        s.serialize_field("BackgroundPath", &f)?;
      } else {
        s.skip_field("BackgroundPath")?;
      }
      s.serialize_field("BGMId", &self.BGMId())?;
    s.end()
  }
}

pub struct MinigameCCGLevelExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGLevelExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LevelId(&mut self, LevelId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGLevelExcel::VT_LEVELID, LevelId, 0);
  }
  #[inline]
  pub fn add_CCGId(&mut self, CCGId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGLevelExcel::VT_CCGID, CCGId, 0);
  }
  #[inline]
  pub fn add_FloorIndex(&mut self, FloorIndex: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGLevelExcel::VT_FLOORINDEX, FloorIndex, 0);
  }
  #[inline]
  pub fn add_BackgroundPath(&mut self, BackgroundPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGLevelExcel::VT_BACKGROUNDPATH, BackgroundPath);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGLevelExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGLevelExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGLevelExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGLevelExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGLevelExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGLevelExcel");
      ds.field("LevelId", &self.LevelId());
      ds.field("CCGId", &self.CCGId());
      ds.field("FloorIndex", &self.FloorIndex());
      ds.field("BackgroundPath", &self.BackgroundPath());
      ds.field("BGMId", &self.BGMId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGLevelExcelT {
  pub LevelId: i64,
  pub CCGId: i64,
  pub FloorIndex: i32,
  pub BackgroundPath: Option<String>,
  pub BGMId: i64,
}
impl Default for MinigameCCGLevelExcelT {
  fn default() -> Self {
    Self {
      LevelId: 0,
      CCGId: 0,
      FloorIndex: 0,
      BackgroundPath: None,
      BGMId: 0,
    }
  }
}
impl MinigameCCGLevelExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGLevelExcel<'b>> {
    let LevelId = self.LevelId;
    let CCGId = self.CCGId;
    let FloorIndex = self.FloorIndex;
    let BackgroundPath = self.BackgroundPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BGMId = self.BGMId;
    MinigameCCGLevelExcel::create(_fbb, &MinigameCCGLevelExcelArgs{
      LevelId,
      CCGId,
      FloorIndex,
      BackgroundPath,
      BGMId,
    })
  }
}
