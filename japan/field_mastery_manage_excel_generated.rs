// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldMasteryManageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldMasteryManageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldMasteryManageExcel<'a> {
  type Inner = FieldMasteryManageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldMasteryManageExcel<'a> {
  pub const VT_FIELDSEASON: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZEETC: flatbuffers::VOffsetT = 6;
  pub const VT_IMAGEPATH: flatbuffers::VOffsetT = 8;
  pub const VT_LEVELID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldMasteryManageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldMasteryManageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldMasteryManageExcel<'bldr>> {
    let mut builder = FieldMasteryManageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldMasteryManage");
      let x = args.LevelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LevelId(x);
      let x = args.FieldSeason;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FieldSeason(x);
      if let Some(x) = args.ImagePath {
        builder.add_ImagePath(x);
      }
      let x = args.LocalizeEtc;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtc(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldMasteryManageExcelT {
    let key = table_encryption_service::create_key(b"FieldMasteryManage");
      let FieldSeason = self.FieldSeason();
      let LocalizeEtc = self.LocalizeEtc();
    let ImagePath = self.ImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LevelId = self.LevelId();
    FieldMasteryManageExcelT {
      FieldSeason,
      LocalizeEtc,
      ImagePath,
      LevelId,
    }
  }

  #[inline]
  pub fn FieldSeason(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryManageExcel::VT_FIELDSEASON, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtc(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FieldMasteryManageExcel::VT_LOCALIZEETC, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldMasteryManageExcel::VT_IMAGEPATH, None)}
  }
  #[inline]
  pub fn LevelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldMasteryManageExcel::VT_LEVELID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FieldMasteryManageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("FieldSeason", Self::VT_FIELDSEASON, false)?
     .visit_field::<u32>("LocalizeEtc", Self::VT_LOCALIZEETC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePath", Self::VT_IMAGEPATH, false)?
     .visit_field::<i64>("LevelId", Self::VT_LEVELID, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldMasteryManageExcelArgs<'a> {
    pub FieldSeason: i64,
    pub LocalizeEtc: u32,
    pub ImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LevelId: i64,
}
impl<'a> Default for FieldMasteryManageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldMasteryManageExcelArgs {
      FieldSeason: 0,
      LocalizeEtc: 0,
      ImagePath: None,
      LevelId: 0,
    }
  }
}

impl Serialize for FieldMasteryManageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldMasteryManageExcel", 4)?;
      s.serialize_field("FieldSeason", &self.FieldSeason())?;
      s.serialize_field("LocalizeEtc", &self.LocalizeEtc())?;
      if let Some(f) = self.ImagePath() {
        s.serialize_field("ImagePath", &f)?;
      } else {
        s.skip_field("ImagePath")?;
      }
      s.serialize_field("LevelId", &self.LevelId())?;
    s.end()
  }
}

pub struct FieldMasteryManageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldMasteryManageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FieldSeason(&mut self, FieldSeason: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryManageExcel::VT_FIELDSEASON, FieldSeason, 0);
  }
  #[inline]
  pub fn add_LocalizeEtc(&mut self, LocalizeEtc: u32) {
    self.fbb_.push_slot::<u32>(FieldMasteryManageExcel::VT_LOCALIZEETC, LocalizeEtc, 0);
  }
  #[inline]
  pub fn add_ImagePath(&mut self, ImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldMasteryManageExcel::VT_IMAGEPATH, ImagePath);
  }
  #[inline]
  pub fn add_LevelId(&mut self, LevelId: i64) {
    self.fbb_.push_slot::<i64>(FieldMasteryManageExcel::VT_LEVELID, LevelId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldMasteryManageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldMasteryManageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldMasteryManageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldMasteryManageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldMasteryManageExcel");
      ds.field("FieldSeason", &self.FieldSeason());
      ds.field("LocalizeEtc", &self.LocalizeEtc());
      ds.field("ImagePath", &self.ImagePath());
      ds.field("LevelId", &self.LevelId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldMasteryManageExcelT {
  pub FieldSeason: i64,
  pub LocalizeEtc: u32,
  pub ImagePath: Option<String>,
  pub LevelId: i64,
}
impl Default for FieldMasteryManageExcelT {
  fn default() -> Self {
    Self {
      FieldSeason: 0,
      LocalizeEtc: 0,
      ImagePath: None,
      LevelId: 0,
    }
  }
}
impl FieldMasteryManageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldMasteryManageExcel<'b>> {
    let FieldSeason = self.FieldSeason;
    let LocalizeEtc = self.LocalizeEtc;
    let ImagePath = self.ImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LevelId = self.LevelId;
    FieldMasteryManageExcel::create(_fbb, &FieldMasteryManageExcelArgs{
      FieldSeason,
      LocalizeEtc,
      ImagePath,
      LevelId,
    })
  }
}
