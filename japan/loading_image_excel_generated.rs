// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LoadingImageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LoadingImageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LoadingImageExcel<'a> {
  type Inner = LoadingImageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LoadingImageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IMAGEPATHKR: flatbuffers::VOffsetT = 6;
  pub const VT_IMAGEPATHJP: flatbuffers::VOffsetT = 8;
  pub const VT_DISPLAYWEIGHT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LoadingImageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LoadingImageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LoadingImageExcel<'bldr>> {
    let mut builder = LoadingImageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LoadingImage");
      let x = args.ID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ID(x);
      let x = args.DisplayWeight;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DisplayWeight(x);
      if let Some(x) = args.ImagePathJp {
        builder.add_ImagePathJp(x);
      }
      if let Some(x) = args.ImagePathKr {
        builder.add_ImagePathKr(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> LoadingImageExcelT {
    let key = table_encryption_service::create_key(b"LoadingImage");
      let ID = self.ID();
    let ImagePathKr = self.ImagePathKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePathJp = self.ImagePathJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DisplayWeight = self.DisplayWeight();
    LoadingImageExcelT {
      ID,
      ImagePathKr,
      ImagePathJp,
      DisplayWeight,
    }
  }

  #[inline]
  pub fn ID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LoadingImageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ImagePathKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LoadingImageExcel::VT_IMAGEPATHKR, None)}
  }
  #[inline]
  pub fn ImagePathJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LoadingImageExcel::VT_IMAGEPATHJP, None)}
  }
  #[inline]
  pub fn DisplayWeight(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LoadingImageExcel::VT_DISPLAYWEIGHT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LoadingImageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ID", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePathKr", Self::VT_IMAGEPATHKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePathJp", Self::VT_IMAGEPATHJP, false)?
     .visit_field::<i32>("DisplayWeight", Self::VT_DISPLAYWEIGHT, false)?
     .finish();
    Ok(())
  }
}
pub struct LoadingImageExcelArgs<'a> {
    pub ID: i64,
    pub ImagePathKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePathJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DisplayWeight: i32,
}
impl<'a> Default for LoadingImageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LoadingImageExcelArgs {
      ID: 0,
      ImagePathKr: None,
      ImagePathJp: None,
      DisplayWeight: 0,
    }
  }
}

impl Serialize for LoadingImageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LoadingImageExcel", 4)?;
      s.serialize_field("ID", &self.ID())?;
      if let Some(f) = self.ImagePathKr() {
        s.serialize_field("ImagePathKr", &f)?;
      } else {
        s.skip_field("ImagePathKr")?;
      }
      if let Some(f) = self.ImagePathJp() {
        s.serialize_field("ImagePathJp", &f)?;
      } else {
        s.skip_field("ImagePathJp")?;
      }
      s.serialize_field("DisplayWeight", &self.DisplayWeight())?;
    s.end()
  }
}

pub struct LoadingImageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LoadingImageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ID(&mut self, ID: i64) {
    self.fbb_.push_slot::<i64>(LoadingImageExcel::VT_ID, ID, 0);
  }
  #[inline]
  pub fn add_ImagePathKr(&mut self, ImagePathKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LoadingImageExcel::VT_IMAGEPATHKR, ImagePathKr);
  }
  #[inline]
  pub fn add_ImagePathJp(&mut self, ImagePathJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LoadingImageExcel::VT_IMAGEPATHJP, ImagePathJp);
  }
  #[inline]
  pub fn add_DisplayWeight(&mut self, DisplayWeight: i32) {
    self.fbb_.push_slot::<i32>(LoadingImageExcel::VT_DISPLAYWEIGHT, DisplayWeight, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LoadingImageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LoadingImageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LoadingImageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LoadingImageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LoadingImageExcel");
      ds.field("ID", &self.ID());
      ds.field("ImagePathKr", &self.ImagePathKr());
      ds.field("ImagePathJp", &self.ImagePathJp());
      ds.field("DisplayWeight", &self.DisplayWeight());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LoadingImageExcelT {
  pub ID: i64,
  pub ImagePathKr: Option<String>,
  pub ImagePathJp: Option<String>,
  pub DisplayWeight: i32,
}
impl Default for LoadingImageExcelT {
  fn default() -> Self {
    Self {
      ID: 0,
      ImagePathKr: None,
      ImagePathJp: None,
      DisplayWeight: 0,
    }
  }
}
impl LoadingImageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LoadingImageExcel<'b>> {
    let ID = self.ID;
    let ImagePathKr = self.ImagePathKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePathJp = self.ImagePathJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DisplayWeight = self.DisplayWeight;
    LoadingImageExcel::create(_fbb, &LoadingImageExcelArgs{
      ID,
      ImagePathKr,
      ImagePathJp,
      DisplayWeight,
    })
  }
}
