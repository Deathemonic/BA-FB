// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProtocolSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ProtocolSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProtocolSettingExcel<'a> {
  type Inner = ProtocolSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProtocolSettingExcel<'a> {
  pub const VT_PROTOCOL: flatbuffers::VOffsetT = 4;
  pub const VT_OPENCONDITIONCONTENT: flatbuffers::VOffsetT = 6;
  pub const VT_CURRENCY: flatbuffers::VOffsetT = 8;
  pub const VT_INVENTORY: flatbuffers::VOffsetT = 10;
  pub const VT_MAIL: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProtocolSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ProtocolSettingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ProtocolSettingExcel<'bldr>> {
    let mut builder = ProtocolSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ProtocolSetting");
      let x = args.OpenConditionContent;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OpenConditionContent(x);
      if let Some(x) = args.Protocol {
        builder.add_Protocol(x);
      }
      builder.add_Mail(args.Mail);
      builder.add_Inventory(args.Inventory);
      builder.add_Currency(args.Currency);
    builder.finish()
  }

  pub fn unpack(&self) -> ProtocolSettingExcelT {
    let key = table_encryption_service::create_key(b"ProtocolSetting");
    let Protocol = self.Protocol().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let OpenConditionContent = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OpenConditionContent(), &key)
      } else {
        self.OpenConditionContent()
      };
      let Currency = self.Currency();
      let Inventory = self.Inventory();
      let Mail = self.Mail();
    ProtocolSettingExcelT {
      Protocol,
      OpenConditionContent,
      Currency,
      Inventory,
      Mail,
    }
  }

  #[inline]
  pub fn Protocol(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ProtocolSettingExcel::VT_PROTOCOL, None)}
  }
  #[inline]
  pub fn OpenConditionContent(&self) -> OpenConditionContent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OpenConditionContent>(ProtocolSettingExcel::VT_OPENCONDITIONCONTENT, Some(OpenConditionContent::Shop)).unwrap()}
  }
  #[inline]
  pub fn Currency(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ProtocolSettingExcel::VT_CURRENCY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Inventory(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ProtocolSettingExcel::VT_INVENTORY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Mail(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ProtocolSettingExcel::VT_MAIL, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ProtocolSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Protocol", Self::VT_PROTOCOL, false)?
     .visit_field::<OpenConditionContent>("OpenConditionContent", Self::VT_OPENCONDITIONCONTENT, false)?
     .visit_field::<bool>("Currency", Self::VT_CURRENCY, false)?
     .visit_field::<bool>("Inventory", Self::VT_INVENTORY, false)?
     .visit_field::<bool>("Mail", Self::VT_MAIL, false)?
     .finish();
    Ok(())
  }
}
pub struct ProtocolSettingExcelArgs<'a> {
    pub Protocol: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OpenConditionContent: OpenConditionContent,
    pub Currency: bool,
    pub Inventory: bool,
    pub Mail: bool,
}
impl<'a> Default for ProtocolSettingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProtocolSettingExcelArgs {
      Protocol: None,
      OpenConditionContent: OpenConditionContent::Shop,
      Currency: false,
      Inventory: false,
      Mail: false,
    }
  }
}

impl Serialize for ProtocolSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProtocolSettingExcel", 5)?;
      if let Some(f) = self.Protocol() {
        s.serialize_field("Protocol", &f)?;
      } else {
        s.skip_field("Protocol")?;
      }
      s.serialize_field("OpenConditionContent", &self.OpenConditionContent())?;
      s.serialize_field("Currency", &self.Currency())?;
      s.serialize_field("Inventory", &self.Inventory())?;
      s.serialize_field("Mail", &self.Mail())?;
    s.end()
  }
}

pub struct ProtocolSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ProtocolSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Protocol(&mut self, Protocol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProtocolSettingExcel::VT_PROTOCOL, Protocol);
  }
  #[inline]
  pub fn add_OpenConditionContent(&mut self, OpenConditionContent: OpenConditionContent) {
    self.fbb_.push_slot::<OpenConditionContent>(ProtocolSettingExcel::VT_OPENCONDITIONCONTENT, OpenConditionContent, OpenConditionContent::Shop);
  }
  #[inline]
  pub fn add_Currency(&mut self, Currency: bool) {
    self.fbb_.push_slot::<bool>(ProtocolSettingExcel::VT_CURRENCY, Currency, false);
  }
  #[inline]
  pub fn add_Inventory(&mut self, Inventory: bool) {
    self.fbb_.push_slot::<bool>(ProtocolSettingExcel::VT_INVENTORY, Inventory, false);
  }
  #[inline]
  pub fn add_Mail(&mut self, Mail: bool) {
    self.fbb_.push_slot::<bool>(ProtocolSettingExcel::VT_MAIL, Mail, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ProtocolSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ProtocolSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProtocolSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProtocolSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProtocolSettingExcel");
      ds.field("Protocol", &self.Protocol());
      ds.field("OpenConditionContent", &self.OpenConditionContent());
      ds.field("Currency", &self.Currency());
      ds.field("Inventory", &self.Inventory());
      ds.field("Mail", &self.Mail());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ProtocolSettingExcelT {
  pub Protocol: Option<String>,
  pub OpenConditionContent: OpenConditionContent,
  pub Currency: bool,
  pub Inventory: bool,
  pub Mail: bool,
}
impl Default for ProtocolSettingExcelT {
  fn default() -> Self {
    Self {
      Protocol: None,
      OpenConditionContent: OpenConditionContent::Shop,
      Currency: false,
      Inventory: false,
      Mail: false,
    }
  }
}
impl ProtocolSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ProtocolSettingExcel<'b>> {
    let Protocol = self.Protocol.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OpenConditionContent = self.OpenConditionContent;
    let Currency = self.Currency;
    let Inventory = self.Inventory;
    let Mail = self.Mail;
    ProtocolSettingExcel::create(_fbb, &ProtocolSettingExcelArgs{
      Protocol,
      OpenConditionContent,
      Currency,
      Inventory,
      Mail,
    })
  }
}
