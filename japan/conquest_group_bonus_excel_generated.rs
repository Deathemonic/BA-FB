// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestGroupBonusExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestGroupBonusExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestGroupBonusExcel<'a> {
  type Inner = ConquestGroupBonusExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestGroupBonusExcel<'a> {
  pub const VT_CONQUESTBONUSID: flatbuffers::VOffsetT = 4;
  pub const VT_SCHOOL: flatbuffers::VOffsetT = 6;
  pub const VT_RECOMMANDLOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_BONUSPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_BONUSID: flatbuffers::VOffsetT = 12;
  pub const VT_BONUSCHARACTERCOUNT1: flatbuffers::VOffsetT = 14;
  pub const VT_BONUSPERCENTAGE1: flatbuffers::VOffsetT = 16;
  pub const VT_BONUSCHARACTERCOUNT2: flatbuffers::VOffsetT = 18;
  pub const VT_BONUSPERCENTAGE2: flatbuffers::VOffsetT = 20;
  pub const VT_BONUSCHARACTERCOUNT3: flatbuffers::VOffsetT = 22;
  pub const VT_BONUSPERCENTAGE3: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestGroupBonusExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestGroupBonusExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestGroupBonusExcel<'bldr>> {
    let mut builder = ConquestGroupBonusExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestGroupBonus");
      let x = args.ConquestBonusId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConquestBonusId(x);
      if let Some(x) = args.BonusPercentage3 {
        builder.add_BonusPercentage3(x);
      }
      if let Some(x) = args.BonusCharacterCount3 {
        builder.add_BonusCharacterCount3(x);
      }
      if let Some(x) = args.BonusPercentage2 {
        builder.add_BonusPercentage2(x);
      }
      if let Some(x) = args.BonusCharacterCount2 {
        builder.add_BonusCharacterCount2(x);
      }
      if let Some(x) = args.BonusPercentage1 {
        builder.add_BonusPercentage1(x);
      }
      if let Some(x) = args.BonusCharacterCount1 {
        builder.add_BonusCharacterCount1(x);
      }
      if let Some(x) = args.BonusId {
        builder.add_BonusId(x);
      }
      if let Some(x) = args.BonusParcelType {
        builder.add_BonusParcelType(x);
      }
      let x = args.RecommandLocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_RecommandLocalizeEtcId(x);
      if let Some(x) = args.School {
        builder.add_School(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestGroupBonusExcelT {
    let key = table_encryption_service::create_key(b"ConquestGroupBonus");
      let ConquestBonusId = self.ConquestBonusId();
    let School = self.School().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let RecommandLocalizeEtcId = self.RecommandLocalizeEtcId();
    let BonusParcelType = self.BonusParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let BonusId = self.BonusId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let BonusCharacterCount1 = self.BonusCharacterCount1().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let BonusPercentage1 = self.BonusPercentage1().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let BonusCharacterCount2 = self.BonusCharacterCount2().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let BonusPercentage2 = self.BonusPercentage2().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let BonusCharacterCount3 = self.BonusCharacterCount3().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let BonusPercentage3 = self.BonusPercentage3().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ConquestGroupBonusExcelT {
      ConquestBonusId,
      School,
      RecommandLocalizeEtcId,
      BonusParcelType,
      BonusId,
      BonusCharacterCount1,
      BonusPercentage1,
      BonusCharacterCount2,
      BonusPercentage2,
      BonusCharacterCount3,
      BonusPercentage3,
    }
  }

  #[inline]
  pub fn ConquestBonusId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestGroupBonusExcel::VT_CONQUESTBONUSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn School(&self) -> Option<flatbuffers::Vector<'a, School>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, School>>>(ConquestGroupBonusExcel::VT_SCHOOL, None)}
  }
  #[inline]
  pub fn RecommandLocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ConquestGroupBonusExcel::VT_RECOMMANDLOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BonusParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(ConquestGroupBonusExcel::VT_BONUSPARCELTYPE, None)}
  }
  #[inline]
  pub fn BonusId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ConquestGroupBonusExcel::VT_BONUSID, None)}
  }
  #[inline]
  pub fn BonusCharacterCount1(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(ConquestGroupBonusExcel::VT_BONUSCHARACTERCOUNT1, None)}
  }
  #[inline]
  pub fn BonusPercentage1(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ConquestGroupBonusExcel::VT_BONUSPERCENTAGE1, None)}
  }
  #[inline]
  pub fn BonusCharacterCount2(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(ConquestGroupBonusExcel::VT_BONUSCHARACTERCOUNT2, None)}
  }
  #[inline]
  pub fn BonusPercentage2(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ConquestGroupBonusExcel::VT_BONUSPERCENTAGE2, None)}
  }
  #[inline]
  pub fn BonusCharacterCount3(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(ConquestGroupBonusExcel::VT_BONUSCHARACTERCOUNT3, None)}
  }
  #[inline]
  pub fn BonusPercentage3(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ConquestGroupBonusExcel::VT_BONUSPERCENTAGE3, None)}
  }
}

impl flatbuffers::Verifiable for ConquestGroupBonusExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ConquestBonusId", Self::VT_CONQUESTBONUSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, School>>>("School", Self::VT_SCHOOL, false)?
     .visit_field::<u32>("RecommandLocalizeEtcId", Self::VT_RECOMMANDLOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("BonusParcelType", Self::VT_BONUSPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("BonusId", Self::VT_BONUSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("BonusCharacterCount1", Self::VT_BONUSCHARACTERCOUNT1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("BonusPercentage1", Self::VT_BONUSPERCENTAGE1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("BonusCharacterCount2", Self::VT_BONUSCHARACTERCOUNT2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("BonusPercentage2", Self::VT_BONUSPERCENTAGE2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("BonusCharacterCount3", Self::VT_BONUSCHARACTERCOUNT3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("BonusPercentage3", Self::VT_BONUSPERCENTAGE3, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestGroupBonusExcelArgs<'a> {
    pub ConquestBonusId: i64,
    pub School: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, School>>>,
    pub RecommandLocalizeEtcId: u32,
    pub BonusParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub BonusId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub BonusCharacterCount1: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub BonusPercentage1: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub BonusCharacterCount2: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub BonusPercentage2: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub BonusCharacterCount3: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub BonusPercentage3: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ConquestGroupBonusExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestGroupBonusExcelArgs {
      ConquestBonusId: 0,
      School: None,
      RecommandLocalizeEtcId: 0,
      BonusParcelType: None,
      BonusId: None,
      BonusCharacterCount1: None,
      BonusPercentage1: None,
      BonusCharacterCount2: None,
      BonusPercentage2: None,
      BonusCharacterCount3: None,
      BonusPercentage3: None,
    }
  }
}

impl Serialize for ConquestGroupBonusExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestGroupBonusExcel", 11)?;
      s.serialize_field("ConquestBonusId", &self.ConquestBonusId())?;
      if let Some(f) = self.School() {
        s.serialize_field("School", &f)?;
      } else {
        s.skip_field("School")?;
      }
      s.serialize_field("RecommandLocalizeEtcId", &self.RecommandLocalizeEtcId())?;
      if let Some(f) = self.BonusParcelType() {
        s.serialize_field("BonusParcelType", &f)?;
      } else {
        s.skip_field("BonusParcelType")?;
      }
      if let Some(f) = self.BonusId() {
        s.serialize_field("BonusId", &f)?;
      } else {
        s.skip_field("BonusId")?;
      }
      if let Some(f) = self.BonusCharacterCount1() {
        s.serialize_field("BonusCharacterCount1", &f)?;
      } else {
        s.skip_field("BonusCharacterCount1")?;
      }
      if let Some(f) = self.BonusPercentage1() {
        s.serialize_field("BonusPercentage1", &f)?;
      } else {
        s.skip_field("BonusPercentage1")?;
      }
      if let Some(f) = self.BonusCharacterCount2() {
        s.serialize_field("BonusCharacterCount2", &f)?;
      } else {
        s.skip_field("BonusCharacterCount2")?;
      }
      if let Some(f) = self.BonusPercentage2() {
        s.serialize_field("BonusPercentage2", &f)?;
      } else {
        s.skip_field("BonusPercentage2")?;
      }
      if let Some(f) = self.BonusCharacterCount3() {
        s.serialize_field("BonusCharacterCount3", &f)?;
      } else {
        s.skip_field("BonusCharacterCount3")?;
      }
      if let Some(f) = self.BonusPercentage3() {
        s.serialize_field("BonusPercentage3", &f)?;
      } else {
        s.skip_field("BonusPercentage3")?;
      }
    s.end()
  }
}

pub struct ConquestGroupBonusExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestGroupBonusExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ConquestBonusId(&mut self, ConquestBonusId: i64) {
    self.fbb_.push_slot::<i64>(ConquestGroupBonusExcel::VT_CONQUESTBONUSID, ConquestBonusId, 0);
  }
  #[inline]
  pub fn add_School(&mut self, School: flatbuffers::WIPOffset<flatbuffers::Vector<'b , School>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_SCHOOL, School);
  }
  #[inline]
  pub fn add_RecommandLocalizeEtcId(&mut self, RecommandLocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(ConquestGroupBonusExcel::VT_RECOMMANDLOCALIZEETCID, RecommandLocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_BonusParcelType(&mut self, BonusParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSPARCELTYPE, BonusParcelType);
  }
  #[inline]
  pub fn add_BonusId(&mut self, BonusId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSID, BonusId);
  }
  #[inline]
  pub fn add_BonusCharacterCount1(&mut self, BonusCharacterCount1: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSCHARACTERCOUNT1, BonusCharacterCount1);
  }
  #[inline]
  pub fn add_BonusPercentage1(&mut self, BonusPercentage1: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSPERCENTAGE1, BonusPercentage1);
  }
  #[inline]
  pub fn add_BonusCharacterCount2(&mut self, BonusCharacterCount2: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSCHARACTERCOUNT2, BonusCharacterCount2);
  }
  #[inline]
  pub fn add_BonusPercentage2(&mut self, BonusPercentage2: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSPERCENTAGE2, BonusPercentage2);
  }
  #[inline]
  pub fn add_BonusCharacterCount3(&mut self, BonusCharacterCount3: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSCHARACTERCOUNT3, BonusCharacterCount3);
  }
  #[inline]
  pub fn add_BonusPercentage3(&mut self, BonusPercentage3: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestGroupBonusExcel::VT_BONUSPERCENTAGE3, BonusPercentage3);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestGroupBonusExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestGroupBonusExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestGroupBonusExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestGroupBonusExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestGroupBonusExcel");
      ds.field("ConquestBonusId", &self.ConquestBonusId());
      ds.field("School", &self.School());
      ds.field("RecommandLocalizeEtcId", &self.RecommandLocalizeEtcId());
      ds.field("BonusParcelType", &self.BonusParcelType());
      ds.field("BonusId", &self.BonusId());
      ds.field("BonusCharacterCount1", &self.BonusCharacterCount1());
      ds.field("BonusPercentage1", &self.BonusPercentage1());
      ds.field("BonusCharacterCount2", &self.BonusCharacterCount2());
      ds.field("BonusPercentage2", &self.BonusPercentage2());
      ds.field("BonusCharacterCount3", &self.BonusCharacterCount3());
      ds.field("BonusPercentage3", &self.BonusPercentage3());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestGroupBonusExcelT {
  pub ConquestBonusId: i64,
  pub School: Option<Vec<School>>,
  pub RecommandLocalizeEtcId: u32,
  pub BonusParcelType: Option<Vec<ParcelType>>,
  pub BonusId: Option<Vec<i64>>,
  pub BonusCharacterCount1: Option<Vec<i32>>,
  pub BonusPercentage1: Option<Vec<i64>>,
  pub BonusCharacterCount2: Option<Vec<i32>>,
  pub BonusPercentage2: Option<Vec<i64>>,
  pub BonusCharacterCount3: Option<Vec<i32>>,
  pub BonusPercentage3: Option<Vec<i64>>,
}
impl Default for ConquestGroupBonusExcelT {
  fn default() -> Self {
    Self {
      ConquestBonusId: 0,
      School: None,
      RecommandLocalizeEtcId: 0,
      BonusParcelType: None,
      BonusId: None,
      BonusCharacterCount1: None,
      BonusPercentage1: None,
      BonusCharacterCount2: None,
      BonusPercentage2: None,
      BonusCharacterCount3: None,
      BonusPercentage3: None,
    }
  }
}
impl ConquestGroupBonusExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestGroupBonusExcel<'b>> {
    let ConquestBonusId = self.ConquestBonusId;
    let School = self.School.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RecommandLocalizeEtcId = self.RecommandLocalizeEtcId;
    let BonusParcelType = self.BonusParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BonusId = self.BonusId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BonusCharacterCount1 = self.BonusCharacterCount1.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BonusPercentage1 = self.BonusPercentage1.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BonusCharacterCount2 = self.BonusCharacterCount2.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BonusPercentage2 = self.BonusPercentage2.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BonusCharacterCount3 = self.BonusCharacterCount3.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BonusPercentage3 = self.BonusPercentage3.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ConquestGroupBonusExcel::create(_fbb, &ConquestGroupBonusExcelArgs{
      ConquestBonusId,
      School,
      RecommandLocalizeEtcId,
      BonusParcelType,
      BonusId,
      BonusCharacterCount1,
      BonusPercentage1,
      BonusCharacterCount2,
      BonusPercentage2,
      BonusCharacterCount3,
      BonusPercentage3,
    })
  }
}
