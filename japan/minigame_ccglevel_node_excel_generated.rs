// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGLevelNodeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGLevelNodeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGLevelNodeExcel<'a> {
  type Inner = MinigameCCGLevelNodeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGLevelNodeExcel<'a> {
  pub const VT_LEVELID: flatbuffers::VOffsetT = 4;
  pub const VT_NODEID: flatbuffers::VOffsetT = 6;
  pub const VT_NODEICON: flatbuffers::VOffsetT = 8;
  pub const VT_STAGEGROUPID: flatbuffers::VOffsetT = 10;
  pub const VT_NEXTNODEID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGLevelNodeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGLevelNodeExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGLevelNodeExcel<'bldr>> {
    let mut builder = MinigameCCGLevelNodeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGLevelNode");
      let x = args.StageGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageGroupId(x);
      let x = args.NodeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NodeId(x);
      let x = args.LevelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LevelId(x);
      if let Some(x) = args.NextNodeId {
        builder.add_NextNodeId(x);
      }
      let x = args.NodeIcon;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_NodeIcon(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGLevelNodeExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGLevelNode");
      let LevelId = self.LevelId();
      let NodeId = self.NodeId();
      let NodeIcon = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.NodeIcon(), &key)
      } else {
        self.NodeIcon()
      };
      let StageGroupId = self.StageGroupId();
    let NextNodeId = self.NextNodeId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    MinigameCCGLevelNodeExcelT {
      LevelId,
      NodeId,
      NodeIcon,
      StageGroupId,
      NextNodeId,
    }
  }

  #[inline]
  pub fn LevelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGLevelNodeExcel::VT_LEVELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NodeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGLevelNodeExcel::VT_NODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NodeIcon(&self) -> CCGLevelNodeIcon {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CCGLevelNodeIcon>(MinigameCCGLevelNodeExcel::VT_NODEICON, Some(CCGLevelNodeIcon::None)).unwrap()}
  }
  #[inline]
  pub fn StageGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGLevelNodeExcel::VT_STAGEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NextNodeId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameCCGLevelNodeExcel::VT_NEXTNODEID, None)}
  }
}

impl flatbuffers::Verifiable for MinigameCCGLevelNodeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("LevelId", Self::VT_LEVELID, false)?
     .visit_field::<i64>("NodeId", Self::VT_NODEID, false)?
     .visit_field::<CCGLevelNodeIcon>("NodeIcon", Self::VT_NODEICON, false)?
     .visit_field::<i64>("StageGroupId", Self::VT_STAGEGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("NextNodeId", Self::VT_NEXTNODEID, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGLevelNodeExcelArgs<'a> {
    pub LevelId: i64,
    pub NodeId: i64,
    pub NodeIcon: CCGLevelNodeIcon,
    pub StageGroupId: i64,
    pub NextNodeId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for MinigameCCGLevelNodeExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGLevelNodeExcelArgs {
      LevelId: 0,
      NodeId: 0,
      NodeIcon: CCGLevelNodeIcon::None,
      StageGroupId: 0,
      NextNodeId: None,
    }
  }
}

impl Serialize for MinigameCCGLevelNodeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGLevelNodeExcel", 5)?;
      s.serialize_field("LevelId", &self.LevelId())?;
      s.serialize_field("NodeId", &self.NodeId())?;
      s.serialize_field("NodeIcon", &self.NodeIcon())?;
      s.serialize_field("StageGroupId", &self.StageGroupId())?;
      if let Some(f) = self.NextNodeId() {
        s.serialize_field("NextNodeId", &f)?;
      } else {
        s.skip_field("NextNodeId")?;
      }
    s.end()
  }
}

pub struct MinigameCCGLevelNodeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGLevelNodeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LevelId(&mut self, LevelId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGLevelNodeExcel::VT_LEVELID, LevelId, 0);
  }
  #[inline]
  pub fn add_NodeId(&mut self, NodeId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGLevelNodeExcel::VT_NODEID, NodeId, 0);
  }
  #[inline]
  pub fn add_NodeIcon(&mut self, NodeIcon: CCGLevelNodeIcon) {
    self.fbb_.push_slot::<CCGLevelNodeIcon>(MinigameCCGLevelNodeExcel::VT_NODEICON, NodeIcon, CCGLevelNodeIcon::None);
  }
  #[inline]
  pub fn add_StageGroupId(&mut self, StageGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGLevelNodeExcel::VT_STAGEGROUPID, StageGroupId, 0);
  }
  #[inline]
  pub fn add_NextNodeId(&mut self, NextNodeId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGLevelNodeExcel::VT_NEXTNODEID, NextNodeId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGLevelNodeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGLevelNodeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGLevelNodeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGLevelNodeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGLevelNodeExcel");
      ds.field("LevelId", &self.LevelId());
      ds.field("NodeId", &self.NodeId());
      ds.field("NodeIcon", &self.NodeIcon());
      ds.field("StageGroupId", &self.StageGroupId());
      ds.field("NextNodeId", &self.NextNodeId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGLevelNodeExcelT {
  pub LevelId: i64,
  pub NodeId: i64,
  pub NodeIcon: CCGLevelNodeIcon,
  pub StageGroupId: i64,
  pub NextNodeId: Option<Vec<i64>>,
}
impl Default for MinigameCCGLevelNodeExcelT {
  fn default() -> Self {
    Self {
      LevelId: 0,
      NodeId: 0,
      NodeIcon: CCGLevelNodeIcon::None,
      StageGroupId: 0,
      NextNodeId: None,
    }
  }
}
impl MinigameCCGLevelNodeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGLevelNodeExcel<'b>> {
    let LevelId = self.LevelId;
    let NodeId = self.NodeId;
    let NodeIcon = self.NodeIcon;
    let StageGroupId = self.StageGroupId;
    let NextNodeId = self.NextNodeId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MinigameCCGLevelNodeExcel::create(_fbb, &MinigameCCGLevelNodeExcelArgs{
      LevelId,
      NodeId,
      NodeIcon,
      StageGroupId,
      NextNodeId,
    })
  }
}
