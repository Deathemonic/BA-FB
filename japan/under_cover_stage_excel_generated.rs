// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum UnderCoverStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UnderCoverStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UnderCoverStageExcel<'a> {
  type Inner = UnderCoverStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UnderCoverStageExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_STAGENAMEFILE: flatbuffers::VOffsetT = 6;
  pub const VT_STAGETRYCOUNT: flatbuffers::VOffsetT = 8;
  pub const VT_APPLYSKIP: flatbuffers::VOffsetT = 10;
  pub const VT_SKIPCOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_SHOWCLEARSCENE: flatbuffers::VOffsetT = 14;
  pub const VT_STAGETIPS: flatbuffers::VOffsetT = 16;
  pub const VT_STAGENAME: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UnderCoverStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args UnderCoverStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<UnderCoverStageExcel<'bldr>> {
    let mut builder = UnderCoverStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"UnderCoverStage");
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.StageName;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StageName(x);
      let x = args.StageTips;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StageTips(x);
      let x = args.SkipCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SkipCount(x);
      let x = args.StageTryCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageTryCount(x);
      if let Some(x) = args.StageNameFile {
        builder.add_StageNameFile(x);
      }
      builder.add_ShowClearScene(args.ShowClearScene);
      builder.add_ApplySkip(args.ApplySkip);
    builder.finish()
  }

  pub fn unpack(&self) -> UnderCoverStageExcelT {
    let key = table_encryption_service::create_key(b"UnderCoverStage");
      let GroupId = self.GroupId();
    let StageNameFile = self.StageNameFile().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StageTryCount = self.StageTryCount();
      let ApplySkip = self.ApplySkip();
      let SkipCount = self.SkipCount();
      let ShowClearScene = self.ShowClearScene();
      let StageTips = self.StageTips();
      let StageName = self.StageName();
    UnderCoverStageExcelT {
      GroupId,
      StageNameFile,
      StageTryCount,
      ApplySkip,
      SkipCount,
      ShowClearScene,
      StageTips,
      StageName,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(UnderCoverStageExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageNameFile(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UnderCoverStageExcel::VT_STAGENAMEFILE, None)}
  }
  #[inline]
  pub fn StageTryCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnderCoverStageExcel::VT_STAGETRYCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ApplySkip(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(UnderCoverStageExcel::VT_APPLYSKIP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn SkipCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UnderCoverStageExcel::VT_SKIPCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShowClearScene(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(UnderCoverStageExcel::VT_SHOWCLEARSCENE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn StageTips(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(UnderCoverStageExcel::VT_STAGETIPS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageName(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(UnderCoverStageExcel::VT_STAGENAME, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for UnderCoverStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StageNameFile", Self::VT_STAGENAMEFILE, false)?
     .visit_field::<i32>("StageTryCount", Self::VT_STAGETRYCOUNT, false)?
     .visit_field::<bool>("ApplySkip", Self::VT_APPLYSKIP, false)?
     .visit_field::<i32>("SkipCount", Self::VT_SKIPCOUNT, false)?
     .visit_field::<bool>("ShowClearScene", Self::VT_SHOWCLEARSCENE, false)?
     .visit_field::<u32>("StageTips", Self::VT_STAGETIPS, false)?
     .visit_field::<u32>("StageName", Self::VT_STAGENAME, false)?
     .finish();
    Ok(())
  }
}
pub struct UnderCoverStageExcelArgs<'a> {
    pub GroupId: i64,
    pub StageNameFile: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StageTryCount: i32,
    pub ApplySkip: bool,
    pub SkipCount: i32,
    pub ShowClearScene: bool,
    pub StageTips: u32,
    pub StageName: u32,
}
impl<'a> Default for UnderCoverStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    UnderCoverStageExcelArgs {
      GroupId: 0,
      StageNameFile: None,
      StageTryCount: 0,
      ApplySkip: false,
      SkipCount: 0,
      ShowClearScene: false,
      StageTips: 0,
      StageName: 0,
    }
  }
}

impl Serialize for UnderCoverStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("UnderCoverStageExcel", 8)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      if let Some(f) = self.StageNameFile() {
        s.serialize_field("StageNameFile", &f)?;
      } else {
        s.skip_field("StageNameFile")?;
      }
      s.serialize_field("StageTryCount", &self.StageTryCount())?;
      s.serialize_field("ApplySkip", &self.ApplySkip())?;
      s.serialize_field("SkipCount", &self.SkipCount())?;
      s.serialize_field("ShowClearScene", &self.ShowClearScene())?;
      s.serialize_field("StageTips", &self.StageTips())?;
      s.serialize_field("StageName", &self.StageName())?;
    s.end()
  }
}

pub struct UnderCoverStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UnderCoverStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(UnderCoverStageExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_StageNameFile(&mut self, StageNameFile: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UnderCoverStageExcel::VT_STAGENAMEFILE, StageNameFile);
  }
  #[inline]
  pub fn add_StageTryCount(&mut self, StageTryCount: i32) {
    self.fbb_.push_slot::<i32>(UnderCoverStageExcel::VT_STAGETRYCOUNT, StageTryCount, 0);
  }
  #[inline]
  pub fn add_ApplySkip(&mut self, ApplySkip: bool) {
    self.fbb_.push_slot::<bool>(UnderCoverStageExcel::VT_APPLYSKIP, ApplySkip, false);
  }
  #[inline]
  pub fn add_SkipCount(&mut self, SkipCount: i32) {
    self.fbb_.push_slot::<i32>(UnderCoverStageExcel::VT_SKIPCOUNT, SkipCount, 0);
  }
  #[inline]
  pub fn add_ShowClearScene(&mut self, ShowClearScene: bool) {
    self.fbb_.push_slot::<bool>(UnderCoverStageExcel::VT_SHOWCLEARSCENE, ShowClearScene, false);
  }
  #[inline]
  pub fn add_StageTips(&mut self, StageTips: u32) {
    self.fbb_.push_slot::<u32>(UnderCoverStageExcel::VT_STAGETIPS, StageTips, 0);
  }
  #[inline]
  pub fn add_StageName(&mut self, StageName: u32) {
    self.fbb_.push_slot::<u32>(UnderCoverStageExcel::VT_STAGENAME, StageName, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UnderCoverStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    UnderCoverStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UnderCoverStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UnderCoverStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UnderCoverStageExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("StageNameFile", &self.StageNameFile());
      ds.field("StageTryCount", &self.StageTryCount());
      ds.field("ApplySkip", &self.ApplySkip());
      ds.field("SkipCount", &self.SkipCount());
      ds.field("ShowClearScene", &self.ShowClearScene());
      ds.field("StageTips", &self.StageTips());
      ds.field("StageName", &self.StageName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct UnderCoverStageExcelT {
  pub GroupId: i64,
  pub StageNameFile: Option<String>,
  pub StageTryCount: i32,
  pub ApplySkip: bool,
  pub SkipCount: i32,
  pub ShowClearScene: bool,
  pub StageTips: u32,
  pub StageName: u32,
}
impl Default for UnderCoverStageExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      StageNameFile: None,
      StageTryCount: 0,
      ApplySkip: false,
      SkipCount: 0,
      ShowClearScene: false,
      StageTips: 0,
      StageName: 0,
    }
  }
}
impl UnderCoverStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<UnderCoverStageExcel<'b>> {
    let GroupId = self.GroupId;
    let StageNameFile = self.StageNameFile.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StageTryCount = self.StageTryCount;
    let ApplySkip = self.ApplySkip;
    let SkipCount = self.SkipCount;
    let ShowClearScene = self.ShowClearScene;
    let StageTips = self.StageTips;
    let StageName = self.StageName;
    UnderCoverStageExcel::create(_fbb, &UnderCoverStageExcelArgs{
      GroupId,
      StageNameFile,
      StageTryCount,
      ApplySkip,
      SkipCount,
      ShowClearScene,
      StageTips,
      StageName,
    })
  }
}
