// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentFortuneGachaExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentFortuneGachaExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentFortuneGachaExcel<'a> {
  type Inner = EventContentFortuneGachaExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentFortuneGachaExcel<'a> {
  pub const VT_FORTUNEGACHAGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 6;
  pub const VT_NAMEIMAGEPATH: flatbuffers::VOffsetT = 8;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentFortuneGachaExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentFortuneGachaExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentFortuneGachaExcel<'bldr>> {
    let mut builder = EventContentFortuneGachaExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentFortuneGacha");
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      if let Some(x) = args.NameImagePath {
        builder.add_NameImagePath(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.FortuneGachaGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FortuneGachaGroupId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentFortuneGachaExcelT {
    let key = table_encryption_service::create_key(b"EventContentFortuneGacha");
      let FortuneGachaGroupId = self.FortuneGachaGroupId();
      let LocalizeEtcId = self.LocalizeEtcId();
    let NameImagePath = self.NameImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentFortuneGachaExcelT {
      FortuneGachaGroupId,
      LocalizeEtcId,
      NameImagePath,
      IconPath,
    }
  }

  #[inline]
  pub fn FortuneGachaGroupId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentFortuneGachaExcel::VT_FORTUNEGACHAGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentFortuneGachaExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentFortuneGachaExcel::VT_NAMEIMAGEPATH, None)}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentFortuneGachaExcel::VT_ICONPATH, None)}
  }
}

impl flatbuffers::Verifiable for EventContentFortuneGachaExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("FortuneGachaGroupId", Self::VT_FORTUNEGACHAGROUPID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NameImagePath", Self::VT_NAMEIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentFortuneGachaExcelArgs<'a> {
    pub FortuneGachaGroupId: i32,
    pub LocalizeEtcId: u32,
    pub NameImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentFortuneGachaExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentFortuneGachaExcelArgs {
      FortuneGachaGroupId: 0,
      LocalizeEtcId: 0,
      NameImagePath: None,
      IconPath: None,
    }
  }
}

impl Serialize for EventContentFortuneGachaExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentFortuneGachaExcel", 4)?;
      s.serialize_field("FortuneGachaGroupId", &self.FortuneGachaGroupId())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.NameImagePath() {
        s.serialize_field("NameImagePath", &f)?;
      } else {
        s.skip_field("NameImagePath")?;
      }
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
    s.end()
  }
}

pub struct EventContentFortuneGachaExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentFortuneGachaExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FortuneGachaGroupId(&mut self, FortuneGachaGroupId: i32) {
    self.fbb_.push_slot::<i32>(EventContentFortuneGachaExcel::VT_FORTUNEGACHAGROUPID, FortuneGachaGroupId, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(EventContentFortuneGachaExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_NameImagePath(&mut self, NameImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentFortuneGachaExcel::VT_NAMEIMAGEPATH, NameImagePath);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentFortuneGachaExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentFortuneGachaExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentFortuneGachaExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentFortuneGachaExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentFortuneGachaExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentFortuneGachaExcel");
      ds.field("FortuneGachaGroupId", &self.FortuneGachaGroupId());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("NameImagePath", &self.NameImagePath());
      ds.field("IconPath", &self.IconPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentFortuneGachaExcelT {
  pub FortuneGachaGroupId: i32,
  pub LocalizeEtcId: u32,
  pub NameImagePath: Option<String>,
  pub IconPath: Option<String>,
}
impl Default for EventContentFortuneGachaExcelT {
  fn default() -> Self {
    Self {
      FortuneGachaGroupId: 0,
      LocalizeEtcId: 0,
      NameImagePath: None,
      IconPath: None,
    }
  }
}
impl EventContentFortuneGachaExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentFortuneGachaExcel<'b>> {
    let FortuneGachaGroupId = self.FortuneGachaGroupId;
    let LocalizeEtcId = self.LocalizeEtcId;
    let NameImagePath = self.NameImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentFortuneGachaExcel::create(_fbb, &EventContentFortuneGachaExcelArgs{
      FortuneGachaGroupId,
      LocalizeEtcId,
      NameImagePath,
      IconPath,
    })
  }
}
