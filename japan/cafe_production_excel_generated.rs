// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CafeProductionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CafeProductionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CafeProductionExcel<'a> {
  type Inner = CafeProductionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CafeProductionExcel<'a> {
  pub const VT_CAFEID: flatbuffers::VOffsetT = 4;
  pub const VT_RANK: flatbuffers::VOffsetT = 6;
  pub const VT_CAFEPRODUCTIONPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_CAFEPRODUCTIONPARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_PARCELPRODUCTIONCOEFFICIENT: flatbuffers::VOffsetT = 12;
  pub const VT_PARCELPRODUCTIONCORRECTIONVALUE: flatbuffers::VOffsetT = 14;
  pub const VT_PARCELSTORAGEMAX: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CafeProductionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CafeProductionExcelArgs
  ) -> flatbuffers::WIPOffset<CafeProductionExcel<'bldr>> {
    let mut builder = CafeProductionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CafeProduction");
      let x = args.ParcelStorageMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelStorageMax(x);
      let x = args.ParcelProductionCorrectionValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelProductionCorrectionValue(x);
      let x = args.ParcelProductionCoefficient;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelProductionCoefficient(x);
      let x = args.CafeProductionParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CafeProductionParcelId(x);
      let x = args.Rank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Rank(x);
      let x = args.CafeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CafeId(x);
      let x = args.CafeProductionParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CafeProductionParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CafeProductionExcelT {
    let key = table_encryption_service::create_key(b"CafeProduction");
      let CafeId = self.CafeId();
      let Rank = self.Rank();
      let CafeProductionParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CafeProductionParcelType(), &key)
      } else {
        self.CafeProductionParcelType()
      };
      let CafeProductionParcelId = self.CafeProductionParcelId();
      let ParcelProductionCoefficient = self.ParcelProductionCoefficient();
      let ParcelProductionCorrectionValue = self.ParcelProductionCorrectionValue();
      let ParcelStorageMax = self.ParcelStorageMax();
    CafeProductionExcelT {
      CafeId,
      Rank,
      CafeProductionParcelType,
      CafeProductionParcelId,
      ParcelProductionCoefficient,
      ParcelProductionCorrectionValue,
      ParcelStorageMax,
    }
  }

  #[inline]
  pub fn CafeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeProductionExcel::VT_CAFEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Rank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeProductionExcel::VT_RANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CafeProductionParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CafeProductionExcel::VT_CAFEPRODUCTIONPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn CafeProductionParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeProductionExcel::VT_CAFEPRODUCTIONPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelProductionCoefficient(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeProductionExcel::VT_PARCELPRODUCTIONCOEFFICIENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelProductionCorrectionValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeProductionExcel::VT_PARCELPRODUCTIONCORRECTIONVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelStorageMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeProductionExcel::VT_PARCELSTORAGEMAX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CafeProductionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CafeId", Self::VT_CAFEID, false)?
     .visit_field::<i64>("Rank", Self::VT_RANK, false)?
     .visit_field::<ParcelType>("CafeProductionParcelType", Self::VT_CAFEPRODUCTIONPARCELTYPE, false)?
     .visit_field::<i64>("CafeProductionParcelId", Self::VT_CAFEPRODUCTIONPARCELID, false)?
     .visit_field::<i64>("ParcelProductionCoefficient", Self::VT_PARCELPRODUCTIONCOEFFICIENT, false)?
     .visit_field::<i64>("ParcelProductionCorrectionValue", Self::VT_PARCELPRODUCTIONCORRECTIONVALUE, false)?
     .visit_field::<i64>("ParcelStorageMax", Self::VT_PARCELSTORAGEMAX, false)?
     .finish();
    Ok(())
  }
}
pub struct CafeProductionExcelArgs {
    pub CafeId: i64,
    pub Rank: i64,
    pub CafeProductionParcelType: ParcelType,
    pub CafeProductionParcelId: i64,
    pub ParcelProductionCoefficient: i64,
    pub ParcelProductionCorrectionValue: i64,
    pub ParcelStorageMax: i64,
}
impl<'a> Default for CafeProductionExcelArgs {
  #[inline]
  fn default() -> Self {
    CafeProductionExcelArgs {
      CafeId: 0,
      Rank: 0,
      CafeProductionParcelType: ParcelType::None,
      CafeProductionParcelId: 0,
      ParcelProductionCoefficient: 0,
      ParcelProductionCorrectionValue: 0,
      ParcelStorageMax: 0,
    }
  }
}

impl Serialize for CafeProductionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CafeProductionExcel", 7)?;
      s.serialize_field("CafeId", &self.CafeId())?;
      s.serialize_field("Rank", &self.Rank())?;
      s.serialize_field("CafeProductionParcelType", &self.CafeProductionParcelType())?;
      s.serialize_field("CafeProductionParcelId", &self.CafeProductionParcelId())?;
      s.serialize_field("ParcelProductionCoefficient", &self.ParcelProductionCoefficient())?;
      s.serialize_field("ParcelProductionCorrectionValue", &self.ParcelProductionCorrectionValue())?;
      s.serialize_field("ParcelStorageMax", &self.ParcelStorageMax())?;
    s.end()
  }
}

pub struct CafeProductionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CafeProductionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CafeId(&mut self, CafeId: i64) {
    self.fbb_.push_slot::<i64>(CafeProductionExcel::VT_CAFEID, CafeId, 0);
  }
  #[inline]
  pub fn add_Rank(&mut self, Rank: i64) {
    self.fbb_.push_slot::<i64>(CafeProductionExcel::VT_RANK, Rank, 0);
  }
  #[inline]
  pub fn add_CafeProductionParcelType(&mut self, CafeProductionParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CafeProductionExcel::VT_CAFEPRODUCTIONPARCELTYPE, CafeProductionParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_CafeProductionParcelId(&mut self, CafeProductionParcelId: i64) {
    self.fbb_.push_slot::<i64>(CafeProductionExcel::VT_CAFEPRODUCTIONPARCELID, CafeProductionParcelId, 0);
  }
  #[inline]
  pub fn add_ParcelProductionCoefficient(&mut self, ParcelProductionCoefficient: i64) {
    self.fbb_.push_slot::<i64>(CafeProductionExcel::VT_PARCELPRODUCTIONCOEFFICIENT, ParcelProductionCoefficient, 0);
  }
  #[inline]
  pub fn add_ParcelProductionCorrectionValue(&mut self, ParcelProductionCorrectionValue: i64) {
    self.fbb_.push_slot::<i64>(CafeProductionExcel::VT_PARCELPRODUCTIONCORRECTIONVALUE, ParcelProductionCorrectionValue, 0);
  }
  #[inline]
  pub fn add_ParcelStorageMax(&mut self, ParcelStorageMax: i64) {
    self.fbb_.push_slot::<i64>(CafeProductionExcel::VT_PARCELSTORAGEMAX, ParcelStorageMax, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CafeProductionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CafeProductionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CafeProductionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CafeProductionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CafeProductionExcel");
      ds.field("CafeId", &self.CafeId());
      ds.field("Rank", &self.Rank());
      ds.field("CafeProductionParcelType", &self.CafeProductionParcelType());
      ds.field("CafeProductionParcelId", &self.CafeProductionParcelId());
      ds.field("ParcelProductionCoefficient", &self.ParcelProductionCoefficient());
      ds.field("ParcelProductionCorrectionValue", &self.ParcelProductionCorrectionValue());
      ds.field("ParcelStorageMax", &self.ParcelStorageMax());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CafeProductionExcelT {
  pub CafeId: i64,
  pub Rank: i64,
  pub CafeProductionParcelType: ParcelType,
  pub CafeProductionParcelId: i64,
  pub ParcelProductionCoefficient: i64,
  pub ParcelProductionCorrectionValue: i64,
  pub ParcelStorageMax: i64,
}
impl Default for CafeProductionExcelT {
  fn default() -> Self {
    Self {
      CafeId: 0,
      Rank: 0,
      CafeProductionParcelType: ParcelType::None,
      CafeProductionParcelId: 0,
      ParcelProductionCoefficient: 0,
      ParcelProductionCorrectionValue: 0,
      ParcelStorageMax: 0,
    }
  }
}
impl CafeProductionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CafeProductionExcel<'b>> {
    let CafeId = self.CafeId;
    let Rank = self.Rank;
    let CafeProductionParcelType = self.CafeProductionParcelType;
    let CafeProductionParcelId = self.CafeProductionParcelId;
    let ParcelProductionCoefficient = self.ParcelProductionCoefficient;
    let ParcelProductionCorrectionValue = self.ParcelProductionCorrectionValue;
    let ParcelStorageMax = self.ParcelStorageMax;
    CafeProductionExcel::create(_fbb, &CafeProductionExcelArgs{
      CafeId,
      Rank,
      CafeProductionParcelType,
      CafeProductionParcelId,
      ParcelProductionCoefficient,
      ParcelProductionCorrectionValue,
      ParcelStorageMax,
    })
  }
}
