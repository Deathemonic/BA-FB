// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterWeaponExpBonusExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterWeaponExpBonusExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterWeaponExpBonusExcel<'a> {
  type Inner = CharacterWeaponExpBonusExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterWeaponExpBonusExcel<'a> {
  pub const VT_WEAPONTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_WEAPONEXPGROWTHA: flatbuffers::VOffsetT = 6;
  pub const VT_WEAPONEXPGROWTHB: flatbuffers::VOffsetT = 8;
  pub const VT_WEAPONEXPGROWTHC: flatbuffers::VOffsetT = 10;
  pub const VT_WEAPONEXPGROWTHZ: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterWeaponExpBonusExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterWeaponExpBonusExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterWeaponExpBonusExcel<'bldr>> {
    let mut builder = CharacterWeaponExpBonusExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterWeaponExpBonus");
      let x = args.WeaponExpGrowthZ;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_WeaponExpGrowthZ(x);
      let x = args.WeaponExpGrowthC;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_WeaponExpGrowthC(x);
      let x = args.WeaponExpGrowthB;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_WeaponExpGrowthB(x);
      let x = args.WeaponExpGrowthA;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_WeaponExpGrowthA(x);
      let x = args.WeaponType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_WeaponType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterWeaponExpBonusExcelT {
    let key = table_encryption_service::create_key(b"CharacterWeaponExpBonus");
      let WeaponType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.WeaponType(), &key)
      } else {
        self.WeaponType()
      };
      let WeaponExpGrowthA = self.WeaponExpGrowthA();
      let WeaponExpGrowthB = self.WeaponExpGrowthB();
      let WeaponExpGrowthC = self.WeaponExpGrowthC();
      let WeaponExpGrowthZ = self.WeaponExpGrowthZ();
    CharacterWeaponExpBonusExcelT {
      WeaponType,
      WeaponExpGrowthA,
      WeaponExpGrowthB,
      WeaponExpGrowthC,
      WeaponExpGrowthZ,
    }
  }

  #[inline]
  pub fn WeaponType(&self) -> WeaponType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WeaponType>(CharacterWeaponExpBonusExcel::VT_WEAPONTYPE, Some(WeaponType::None)).unwrap()}
  }
  #[inline]
  pub fn WeaponExpGrowthA(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn WeaponExpGrowthB(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn WeaponExpGrowthC(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHC, Some(0)).unwrap()}
  }
  #[inline]
  pub fn WeaponExpGrowthZ(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHZ, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterWeaponExpBonusExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<WeaponType>("WeaponType", Self::VT_WEAPONTYPE, false)?
     .visit_field::<i32>("WeaponExpGrowthA", Self::VT_WEAPONEXPGROWTHA, false)?
     .visit_field::<i32>("WeaponExpGrowthB", Self::VT_WEAPONEXPGROWTHB, false)?
     .visit_field::<i32>("WeaponExpGrowthC", Self::VT_WEAPONEXPGROWTHC, false)?
     .visit_field::<i32>("WeaponExpGrowthZ", Self::VT_WEAPONEXPGROWTHZ, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterWeaponExpBonusExcelArgs {
    pub WeaponType: WeaponType,
    pub WeaponExpGrowthA: i32,
    pub WeaponExpGrowthB: i32,
    pub WeaponExpGrowthC: i32,
    pub WeaponExpGrowthZ: i32,
}
impl<'a> Default for CharacterWeaponExpBonusExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterWeaponExpBonusExcelArgs {
      WeaponType: WeaponType::None,
      WeaponExpGrowthA: 0,
      WeaponExpGrowthB: 0,
      WeaponExpGrowthC: 0,
      WeaponExpGrowthZ: 0,
    }
  }
}

impl Serialize for CharacterWeaponExpBonusExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterWeaponExpBonusExcel", 5)?;
      s.serialize_field("WeaponType", &self.WeaponType())?;
      s.serialize_field("WeaponExpGrowthA", &self.WeaponExpGrowthA())?;
      s.serialize_field("WeaponExpGrowthB", &self.WeaponExpGrowthB())?;
      s.serialize_field("WeaponExpGrowthC", &self.WeaponExpGrowthC())?;
      s.serialize_field("WeaponExpGrowthZ", &self.WeaponExpGrowthZ())?;
    s.end()
  }
}

pub struct CharacterWeaponExpBonusExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterWeaponExpBonusExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_WeaponType(&mut self, WeaponType: WeaponType) {
    self.fbb_.push_slot::<WeaponType>(CharacterWeaponExpBonusExcel::VT_WEAPONTYPE, WeaponType, WeaponType::None);
  }
  #[inline]
  pub fn add_WeaponExpGrowthA(&mut self, WeaponExpGrowthA: i32) {
    self.fbb_.push_slot::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHA, WeaponExpGrowthA, 0);
  }
  #[inline]
  pub fn add_WeaponExpGrowthB(&mut self, WeaponExpGrowthB: i32) {
    self.fbb_.push_slot::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHB, WeaponExpGrowthB, 0);
  }
  #[inline]
  pub fn add_WeaponExpGrowthC(&mut self, WeaponExpGrowthC: i32) {
    self.fbb_.push_slot::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHC, WeaponExpGrowthC, 0);
  }
  #[inline]
  pub fn add_WeaponExpGrowthZ(&mut self, WeaponExpGrowthZ: i32) {
    self.fbb_.push_slot::<i32>(CharacterWeaponExpBonusExcel::VT_WEAPONEXPGROWTHZ, WeaponExpGrowthZ, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterWeaponExpBonusExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterWeaponExpBonusExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterWeaponExpBonusExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterWeaponExpBonusExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterWeaponExpBonusExcel");
      ds.field("WeaponType", &self.WeaponType());
      ds.field("WeaponExpGrowthA", &self.WeaponExpGrowthA());
      ds.field("WeaponExpGrowthB", &self.WeaponExpGrowthB());
      ds.field("WeaponExpGrowthC", &self.WeaponExpGrowthC());
      ds.field("WeaponExpGrowthZ", &self.WeaponExpGrowthZ());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterWeaponExpBonusExcelT {
  pub WeaponType: WeaponType,
  pub WeaponExpGrowthA: i32,
  pub WeaponExpGrowthB: i32,
  pub WeaponExpGrowthC: i32,
  pub WeaponExpGrowthZ: i32,
}
impl Default for CharacterWeaponExpBonusExcelT {
  fn default() -> Self {
    Self {
      WeaponType: WeaponType::None,
      WeaponExpGrowthA: 0,
      WeaponExpGrowthB: 0,
      WeaponExpGrowthC: 0,
      WeaponExpGrowthZ: 0,
    }
  }
}
impl CharacterWeaponExpBonusExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterWeaponExpBonusExcel<'b>> {
    let WeaponType = self.WeaponType;
    let WeaponExpGrowthA = self.WeaponExpGrowthA;
    let WeaponExpGrowthB = self.WeaponExpGrowthB;
    let WeaponExpGrowthC = self.WeaponExpGrowthC;
    let WeaponExpGrowthZ = self.WeaponExpGrowthZ;
    CharacterWeaponExpBonusExcel::create(_fbb, &CharacterWeaponExpBonusExcelArgs{
      WeaponType,
      WeaponExpGrowthA,
      WeaponExpGrowthB,
      WeaponExpGrowthC,
      WeaponExpGrowthZ,
    })
  }
}
