// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CafeInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CafeInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CafeInfoExcel<'a> {
  type Inner = CafeInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CafeInfoExcel<'a> {
  pub const VT_CAFEID: flatbuffers::VOffsetT = 4;
  pub const VT_ISDEFAULT: flatbuffers::VOffsetT = 6;
  pub const VT_OPENCONDITIONCAFEID: flatbuffers::VOffsetT = 8;
  pub const VT_OPENCONDITIONCAFEINVITE: flatbuffers::VOffsetT = 10;
  pub const VT_SUMMONPARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_SUMMONPARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_SUMMONPARCELAMOUNT: flatbuffers::VOffsetT = 16;
  pub const VT_CATEGORYTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_SUMMONTICKETICONPATH: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CafeInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CafeInfoExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CafeInfoExcel<'bldr>> {
    let mut builder = CafeInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CafeInfo");
      let x = args.SummonParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SummonParcelAmount(x);
      let x = args.SummonParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SummonParcelId(x);
      let x = args.CafeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CafeId(x);
      if let Some(x) = args.SummonTicketIconPath {
        builder.add_SummonTicketIconPath(x);
      }
      let x = args.CategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CategoryType(x);
      let x = args.SummonParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_SummonParcelType(x);
      let x = args.OpenConditionCafeInvite;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OpenConditionCafeInvite(x);
      let x = args.OpenConditionCafeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OpenConditionCafeId(x);
      builder.add_IsDefault(args.IsDefault);
    builder.finish()
  }

  pub fn unpack(&self) -> CafeInfoExcelT {
    let key = table_encryption_service::create_key(b"CafeInfo");
      let CafeId = self.CafeId();
      let IsDefault = self.IsDefault();
      let OpenConditionCafeId = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OpenConditionCafeId(), &key)
      } else {
        self.OpenConditionCafeId()
      };
      let OpenConditionCafeInvite = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OpenConditionCafeInvite(), &key)
      } else {
        self.OpenConditionCafeInvite()
      };
      let SummonParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.SummonParcelType(), &key)
      } else {
        self.SummonParcelType()
      };
      let SummonParcelId = self.SummonParcelId();
      let SummonParcelAmount = self.SummonParcelAmount();
      let CategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CategoryType(), &key)
      } else {
        self.CategoryType()
      };
    let SummonTicketIconPath = self.SummonTicketIconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CafeInfoExcelT {
      CafeId,
      IsDefault,
      OpenConditionCafeId,
      OpenConditionCafeInvite,
      SummonParcelType,
      SummonParcelId,
      SummonParcelAmount,
      CategoryType,
      SummonTicketIconPath,
    }
  }

  #[inline]
  pub fn CafeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeInfoExcel::VT_CAFEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsDefault(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CafeInfoExcel::VT_ISDEFAULT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionCafeId(&self) -> OpenConditionContent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OpenConditionContent>(CafeInfoExcel::VT_OPENCONDITIONCAFEID, Some(OpenConditionContent::Shop)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionCafeInvite(&self) -> OpenConditionContent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OpenConditionContent>(CafeInfoExcel::VT_OPENCONDITIONCAFEINVITE, Some(OpenConditionContent::Shop)).unwrap()}
  }
  #[inline]
  pub fn SummonParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CafeInfoExcel::VT_SUMMONPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn SummonParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeInfoExcel::VT_SUMMONPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SummonParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeInfoExcel::VT_SUMMONPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CategoryType(&self) -> ShopCategoryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopCategoryType>(CafeInfoExcel::VT_CATEGORYTYPE, Some(ShopCategoryType::General)).unwrap()}
  }
  #[inline]
  pub fn SummonTicketIconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CafeInfoExcel::VT_SUMMONTICKETICONPATH, None)}
  }
}

impl flatbuffers::Verifiable for CafeInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CafeId", Self::VT_CAFEID, false)?
     .visit_field::<bool>("IsDefault", Self::VT_ISDEFAULT, false)?
     .visit_field::<OpenConditionContent>("OpenConditionCafeId", Self::VT_OPENCONDITIONCAFEID, false)?
     .visit_field::<OpenConditionContent>("OpenConditionCafeInvite", Self::VT_OPENCONDITIONCAFEINVITE, false)?
     .visit_field::<ParcelType>("SummonParcelType", Self::VT_SUMMONPARCELTYPE, false)?
     .visit_field::<i64>("SummonParcelId", Self::VT_SUMMONPARCELID, false)?
     .visit_field::<i64>("SummonParcelAmount", Self::VT_SUMMONPARCELAMOUNT, false)?
     .visit_field::<ShopCategoryType>("CategoryType", Self::VT_CATEGORYTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SummonTicketIconPath", Self::VT_SUMMONTICKETICONPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct CafeInfoExcelArgs<'a> {
    pub CafeId: i64,
    pub IsDefault: bool,
    pub OpenConditionCafeId: OpenConditionContent,
    pub OpenConditionCafeInvite: OpenConditionContent,
    pub SummonParcelType: ParcelType,
    pub SummonParcelId: i64,
    pub SummonParcelAmount: i64,
    pub CategoryType: ShopCategoryType,
    pub SummonTicketIconPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CafeInfoExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CafeInfoExcelArgs {
      CafeId: 0,
      IsDefault: false,
      OpenConditionCafeId: OpenConditionContent::Shop,
      OpenConditionCafeInvite: OpenConditionContent::Shop,
      SummonParcelType: ParcelType::None,
      SummonParcelId: 0,
      SummonParcelAmount: 0,
      CategoryType: ShopCategoryType::General,
      SummonTicketIconPath: None,
    }
  }
}

impl Serialize for CafeInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CafeInfoExcel", 9)?;
      s.serialize_field("CafeId", &self.CafeId())?;
      s.serialize_field("IsDefault", &self.IsDefault())?;
      s.serialize_field("OpenConditionCafeId", &self.OpenConditionCafeId())?;
      s.serialize_field("OpenConditionCafeInvite", &self.OpenConditionCafeInvite())?;
      s.serialize_field("SummonParcelType", &self.SummonParcelType())?;
      s.serialize_field("SummonParcelId", &self.SummonParcelId())?;
      s.serialize_field("SummonParcelAmount", &self.SummonParcelAmount())?;
      s.serialize_field("CategoryType", &self.CategoryType())?;
      if let Some(f) = self.SummonTicketIconPath() {
        s.serialize_field("SummonTicketIconPath", &f)?;
      } else {
        s.skip_field("SummonTicketIconPath")?;
      }
    s.end()
  }
}

pub struct CafeInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CafeInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CafeId(&mut self, CafeId: i64) {
    self.fbb_.push_slot::<i64>(CafeInfoExcel::VT_CAFEID, CafeId, 0);
  }
  #[inline]
  pub fn add_IsDefault(&mut self, IsDefault: bool) {
    self.fbb_.push_slot::<bool>(CafeInfoExcel::VT_ISDEFAULT, IsDefault, false);
  }
  #[inline]
  pub fn add_OpenConditionCafeId(&mut self, OpenConditionCafeId: OpenConditionContent) {
    self.fbb_.push_slot::<OpenConditionContent>(CafeInfoExcel::VT_OPENCONDITIONCAFEID, OpenConditionCafeId, OpenConditionContent::Shop);
  }
  #[inline]
  pub fn add_OpenConditionCafeInvite(&mut self, OpenConditionCafeInvite: OpenConditionContent) {
    self.fbb_.push_slot::<OpenConditionContent>(CafeInfoExcel::VT_OPENCONDITIONCAFEINVITE, OpenConditionCafeInvite, OpenConditionContent::Shop);
  }
  #[inline]
  pub fn add_SummonParcelType(&mut self, SummonParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CafeInfoExcel::VT_SUMMONPARCELTYPE, SummonParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_SummonParcelId(&mut self, SummonParcelId: i64) {
    self.fbb_.push_slot::<i64>(CafeInfoExcel::VT_SUMMONPARCELID, SummonParcelId, 0);
  }
  #[inline]
  pub fn add_SummonParcelAmount(&mut self, SummonParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(CafeInfoExcel::VT_SUMMONPARCELAMOUNT, SummonParcelAmount, 0);
  }
  #[inline]
  pub fn add_CategoryType(&mut self, CategoryType: ShopCategoryType) {
    self.fbb_.push_slot::<ShopCategoryType>(CafeInfoExcel::VT_CATEGORYTYPE, CategoryType, ShopCategoryType::General);
  }
  #[inline]
  pub fn add_SummonTicketIconPath(&mut self, SummonTicketIconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CafeInfoExcel::VT_SUMMONTICKETICONPATH, SummonTicketIconPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CafeInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CafeInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CafeInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CafeInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CafeInfoExcel");
      ds.field("CafeId", &self.CafeId());
      ds.field("IsDefault", &self.IsDefault());
      ds.field("OpenConditionCafeId", &self.OpenConditionCafeId());
      ds.field("OpenConditionCafeInvite", &self.OpenConditionCafeInvite());
      ds.field("SummonParcelType", &self.SummonParcelType());
      ds.field("SummonParcelId", &self.SummonParcelId());
      ds.field("SummonParcelAmount", &self.SummonParcelAmount());
      ds.field("CategoryType", &self.CategoryType());
      ds.field("SummonTicketIconPath", &self.SummonTicketIconPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CafeInfoExcelT {
  pub CafeId: i64,
  pub IsDefault: bool,
  pub OpenConditionCafeId: OpenConditionContent,
  pub OpenConditionCafeInvite: OpenConditionContent,
  pub SummonParcelType: ParcelType,
  pub SummonParcelId: i64,
  pub SummonParcelAmount: i64,
  pub CategoryType: ShopCategoryType,
  pub SummonTicketIconPath: Option<String>,
}
impl Default for CafeInfoExcelT {
  fn default() -> Self {
    Self {
      CafeId: 0,
      IsDefault: false,
      OpenConditionCafeId: OpenConditionContent::Shop,
      OpenConditionCafeInvite: OpenConditionContent::Shop,
      SummonParcelType: ParcelType::None,
      SummonParcelId: 0,
      SummonParcelAmount: 0,
      CategoryType: ShopCategoryType::General,
      SummonTicketIconPath: None,
    }
  }
}
impl CafeInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CafeInfoExcel<'b>> {
    let CafeId = self.CafeId;
    let IsDefault = self.IsDefault;
    let OpenConditionCafeId = self.OpenConditionCafeId;
    let OpenConditionCafeInvite = self.OpenConditionCafeInvite;
    let SummonParcelType = self.SummonParcelType;
    let SummonParcelId = self.SummonParcelId;
    let SummonParcelAmount = self.SummonParcelAmount;
    let CategoryType = self.CategoryType;
    let SummonTicketIconPath = self.SummonTicketIconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CafeInfoExcel::create(_fbb, &CafeInfoExcelArgs{
      CafeId,
      IsDefault,
      OpenConditionCafeId,
      OpenConditionCafeInvite,
      SummonParcelType,
      SummonParcelId,
      SummonParcelAmount,
      CategoryType,
      SummonTicketIconPath,
    })
  }
}
