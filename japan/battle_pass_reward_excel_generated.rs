// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BattlePassRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BattlePassRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BattlePassRewardExcel<'a> {
  type Inner = BattlePassRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BattlePassRewardExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_REWARDGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_LEVEL: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELUNIQUEID: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BattlePassRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BattlePassRewardExcelArgs
  ) -> flatbuffers::WIPOffset<BattlePassRewardExcel<'bldr>> {
    let mut builder = BattlePassRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BattlePassReward");
      let x = args.RewardParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelAmount(x);
      let x = args.RewardParcelUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelUniqueId(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Level(x);
      let x = args.RewardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardGroupId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BattlePassRewardExcelT {
    let key = table_encryption_service::create_key(b"BattlePassReward");
      let Id = self.Id();
      let RewardGroupId = self.RewardGroupId();
      let Level = self.Level();
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelUniqueId = self.RewardParcelUniqueId();
      let RewardParcelAmount = self.RewardParcelAmount();
    BattlePassRewardExcelT {
      Id,
      RewardGroupId,
      Level,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassRewardExcel::VT_REWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Level(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassRewardExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(BattlePassRewardExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassRewardExcel::VT_REWARDPARCELUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassRewardExcel::VT_REWARDPARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BattlePassRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("RewardGroupId", Self::VT_REWARDGROUPID, false)?
     .visit_field::<i64>("Level", Self::VT_LEVEL, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelUniqueId", Self::VT_REWARDPARCELUNIQUEID, false)?
     .visit_field::<i64>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct BattlePassRewardExcelArgs {
    pub Id: i64,
    pub RewardGroupId: i64,
    pub Level: i64,
    pub RewardParcelType: ParcelType,
    pub RewardParcelUniqueId: i64,
    pub RewardParcelAmount: i64,
}
impl<'a> Default for BattlePassRewardExcelArgs {
  #[inline]
  fn default() -> Self {
    BattlePassRewardExcelArgs {
      Id: 0,
      RewardGroupId: 0,
      Level: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelUniqueId: 0,
      RewardParcelAmount: 0,
    }
  }
}

impl Serialize for BattlePassRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BattlePassRewardExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("RewardGroupId", &self.RewardGroupId())?;
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelUniqueId", &self.RewardParcelUniqueId())?;
      s.serialize_field("RewardParcelAmount", &self.RewardParcelAmount())?;
    s.end()
  }
}

pub struct BattlePassRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BattlePassRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(BattlePassRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_RewardGroupId(&mut self, RewardGroupId: i64) {
    self.fbb_.push_slot::<i64>(BattlePassRewardExcel::VT_REWARDGROUPID, RewardGroupId, 0);
  }
  #[inline]
  pub fn add_Level(&mut self, Level: i64) {
    self.fbb_.push_slot::<i64>(BattlePassRewardExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(BattlePassRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelUniqueId(&mut self, RewardParcelUniqueId: i64) {
    self.fbb_.push_slot::<i64>(BattlePassRewardExcel::VT_REWARDPARCELUNIQUEID, RewardParcelUniqueId, 0);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(BattlePassRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BattlePassRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BattlePassRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BattlePassRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BattlePassRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BattlePassRewardExcel");
      ds.field("Id", &self.Id());
      ds.field("RewardGroupId", &self.RewardGroupId());
      ds.field("Level", &self.Level());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelUniqueId", &self.RewardParcelUniqueId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BattlePassRewardExcelT {
  pub Id: i64,
  pub RewardGroupId: i64,
  pub Level: i64,
  pub RewardParcelType: ParcelType,
  pub RewardParcelUniqueId: i64,
  pub RewardParcelAmount: i64,
}
impl Default for BattlePassRewardExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      RewardGroupId: 0,
      Level: 0,
      RewardParcelType: ParcelType::None,
      RewardParcelUniqueId: 0,
      RewardParcelAmount: 0,
    }
  }
}
impl BattlePassRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BattlePassRewardExcel<'b>> {
    let Id = self.Id;
    let RewardGroupId = self.RewardGroupId;
    let Level = self.Level;
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelUniqueId = self.RewardParcelUniqueId;
    let RewardParcelAmount = self.RewardParcelAmount;
    BattlePassRewardExcel::create(_fbb, &BattlePassRewardExcelArgs{
      Id,
      RewardGroupId,
      Level,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelAmount,
    })
  }
}
