// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocalizeGachaShopExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeGachaShopExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeGachaShopExcel<'a> {
  type Inner = LocalizeGachaShopExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeGachaShopExcel<'a> {
  pub const VT_GACHASHOPID: flatbuffers::VOffsetT = 4;
  pub const VT_TABNAMEKR: flatbuffers::VOffsetT = 6;
  pub const VT_TABNAMEJP: flatbuffers::VOffsetT = 8;
  pub const VT_TITLENAMEKR: flatbuffers::VOffsetT = 10;
  pub const VT_TITLENAMEJP: flatbuffers::VOffsetT = 12;
  pub const VT_SUBTITLEKR: flatbuffers::VOffsetT = 14;
  pub const VT_SUBTITLEJP: flatbuffers::VOffsetT = 16;
  pub const VT_GACHADESCRIPTIONKR: flatbuffers::VOffsetT = 18;
  pub const VT_GACHADESCRIPTIONJP: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeGachaShopExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeGachaShopExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeGachaShopExcel<'bldr>> {
    let mut builder = LocalizeGachaShopExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LocalizeGachaShop");
      let x = args.GachaShopId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GachaShopId(x);
      if let Some(x) = args.GachaDescriptionJp {
        builder.add_GachaDescriptionJp(x);
      }
      if let Some(x) = args.GachaDescriptionKr {
        builder.add_GachaDescriptionKr(x);
      }
      if let Some(x) = args.SubTitleJp {
        builder.add_SubTitleJp(x);
      }
      if let Some(x) = args.SubTitleKr {
        builder.add_SubTitleKr(x);
      }
      if let Some(x) = args.TitleNameJp {
        builder.add_TitleNameJp(x);
      }
      if let Some(x) = args.TitleNameKr {
        builder.add_TitleNameKr(x);
      }
      if let Some(x) = args.TabNameJp {
        builder.add_TabNameJp(x);
      }
      if let Some(x) = args.TabNameKr {
        builder.add_TabNameKr(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> LocalizeGachaShopExcelT {
    let key = table_encryption_service::create_key(b"LocalizeGachaShop");
      let GachaShopId = self.GachaShopId();
    let TabNameKr = self.TabNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TabNameJp = self.TabNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleNameKr = self.TitleNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleNameJp = self.TitleNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubTitleKr = self.SubTitleKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubTitleJp = self.SubTitleJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GachaDescriptionKr = self.GachaDescriptionKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GachaDescriptionJp = self.GachaDescriptionJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    LocalizeGachaShopExcelT {
      GachaShopId,
      TabNameKr,
      TabNameJp,
      TitleNameKr,
      TitleNameJp,
      SubTitleKr,
      SubTitleJp,
      GachaDescriptionKr,
      GachaDescriptionJp,
    }
  }

  #[inline]
  pub fn GachaShopId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeGachaShopExcel::VT_GACHASHOPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TabNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TABNAMEKR, None)}
  }
  #[inline]
  pub fn TabNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TABNAMEJP, None)}
  }
  #[inline]
  pub fn TitleNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TITLENAMEKR, None)}
  }
  #[inline]
  pub fn TitleNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TITLENAMEJP, None)}
  }
  #[inline]
  pub fn SubTitleKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_SUBTITLEKR, None)}
  }
  #[inline]
  pub fn SubTitleJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_SUBTITLEJP, None)}
  }
  #[inline]
  pub fn GachaDescriptionKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONKR, None)}
  }
  #[inline]
  pub fn GachaDescriptionJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONJP, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeGachaShopExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GachaShopId", Self::VT_GACHASHOPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabNameKr", Self::VT_TABNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabNameJp", Self::VT_TABNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleNameKr", Self::VT_TITLENAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleNameJp", Self::VT_TITLENAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubTitleKr", Self::VT_SUBTITLEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubTitleJp", Self::VT_SUBTITLEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaDescriptionKr", Self::VT_GACHADESCRIPTIONKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaDescriptionJp", Self::VT_GACHADESCRIPTIONJP, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeGachaShopExcelArgs<'a> {
    pub GachaShopId: i64,
    pub TabNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TabNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubTitleKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubTitleJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GachaDescriptionKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GachaDescriptionJp: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocalizeGachaShopExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeGachaShopExcelArgs {
      GachaShopId: 0,
      TabNameKr: None,
      TabNameJp: None,
      TitleNameKr: None,
      TitleNameJp: None,
      SubTitleKr: None,
      SubTitleJp: None,
      GachaDescriptionKr: None,
      GachaDescriptionJp: None,
    }
  }
}

impl Serialize for LocalizeGachaShopExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LocalizeGachaShopExcel", 9)?;
      s.serialize_field("GachaShopId", &self.GachaShopId())?;
      if let Some(f) = self.TabNameKr() {
        s.serialize_field("TabNameKr", &f)?;
      } else {
        s.skip_field("TabNameKr")?;
      }
      if let Some(f) = self.TabNameJp() {
        s.serialize_field("TabNameJp", &f)?;
      } else {
        s.skip_field("TabNameJp")?;
      }
      if let Some(f) = self.TitleNameKr() {
        s.serialize_field("TitleNameKr", &f)?;
      } else {
        s.skip_field("TitleNameKr")?;
      }
      if let Some(f) = self.TitleNameJp() {
        s.serialize_field("TitleNameJp", &f)?;
      } else {
        s.skip_field("TitleNameJp")?;
      }
      if let Some(f) = self.SubTitleKr() {
        s.serialize_field("SubTitleKr", &f)?;
      } else {
        s.skip_field("SubTitleKr")?;
      }
      if let Some(f) = self.SubTitleJp() {
        s.serialize_field("SubTitleJp", &f)?;
      } else {
        s.skip_field("SubTitleJp")?;
      }
      if let Some(f) = self.GachaDescriptionKr() {
        s.serialize_field("GachaDescriptionKr", &f)?;
      } else {
        s.skip_field("GachaDescriptionKr")?;
      }
      if let Some(f) = self.GachaDescriptionJp() {
        s.serialize_field("GachaDescriptionJp", &f)?;
      } else {
        s.skip_field("GachaDescriptionJp")?;
      }
    s.end()
  }
}

pub struct LocalizeGachaShopExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeGachaShopExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GachaShopId(&mut self, GachaShopId: i64) {
    self.fbb_.push_slot::<i64>(LocalizeGachaShopExcel::VT_GACHASHOPID, GachaShopId, 0);
  }
  #[inline]
  pub fn add_TabNameKr(&mut self, TabNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TABNAMEKR, TabNameKr);
  }
  #[inline]
  pub fn add_TabNameJp(&mut self, TabNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TABNAMEJP, TabNameJp);
  }
  #[inline]
  pub fn add_TitleNameKr(&mut self, TitleNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TITLENAMEKR, TitleNameKr);
  }
  #[inline]
  pub fn add_TitleNameJp(&mut self, TitleNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TITLENAMEJP, TitleNameJp);
  }
  #[inline]
  pub fn add_SubTitleKr(&mut self, SubTitleKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_SUBTITLEKR, SubTitleKr);
  }
  #[inline]
  pub fn add_SubTitleJp(&mut self, SubTitleJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_SUBTITLEJP, SubTitleJp);
  }
  #[inline]
  pub fn add_GachaDescriptionKr(&mut self, GachaDescriptionKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONKR, GachaDescriptionKr);
  }
  #[inline]
  pub fn add_GachaDescriptionJp(&mut self, GachaDescriptionJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONJP, GachaDescriptionJp);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeGachaShopExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeGachaShopExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeGachaShopExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeGachaShopExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeGachaShopExcel");
      ds.field("GachaShopId", &self.GachaShopId());
      ds.field("TabNameKr", &self.TabNameKr());
      ds.field("TabNameJp", &self.TabNameJp());
      ds.field("TitleNameKr", &self.TitleNameKr());
      ds.field("TitleNameJp", &self.TitleNameJp());
      ds.field("SubTitleKr", &self.SubTitleKr());
      ds.field("SubTitleJp", &self.SubTitleJp());
      ds.field("GachaDescriptionKr", &self.GachaDescriptionKr());
      ds.field("GachaDescriptionJp", &self.GachaDescriptionJp());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LocalizeGachaShopExcelT {
  pub GachaShopId: i64,
  pub TabNameKr: Option<String>,
  pub TabNameJp: Option<String>,
  pub TitleNameKr: Option<String>,
  pub TitleNameJp: Option<String>,
  pub SubTitleKr: Option<String>,
  pub SubTitleJp: Option<String>,
  pub GachaDescriptionKr: Option<String>,
  pub GachaDescriptionJp: Option<String>,
}
impl Default for LocalizeGachaShopExcelT {
  fn default() -> Self {
    Self {
      GachaShopId: 0,
      TabNameKr: None,
      TabNameJp: None,
      TitleNameKr: None,
      TitleNameJp: None,
      SubTitleKr: None,
      SubTitleJp: None,
      GachaDescriptionKr: None,
      GachaDescriptionJp: None,
    }
  }
}
impl LocalizeGachaShopExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LocalizeGachaShopExcel<'b>> {
    let GachaShopId = self.GachaShopId;
    let TabNameKr = self.TabNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TabNameJp = self.TabNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleNameKr = self.TitleNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleNameJp = self.TitleNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubTitleKr = self.SubTitleKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubTitleJp = self.SubTitleJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GachaDescriptionKr = self.GachaDescriptionKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GachaDescriptionJp = self.GachaDescriptionJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LocalizeGachaShopExcel::create(_fbb, &LocalizeGachaShopExcelArgs{
      GachaShopId,
      TabNameKr,
      TabNameJp,
      TitleNameKr,
      TitleNameJp,
      SubTitleKr,
      SubTitleJp,
      GachaDescriptionKr,
      GachaDescriptionJp,
    })
  }
}
