// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocalizeCharProfileExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeCharProfileExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeCharProfileExcel<'a> {
  type Inner = LocalizeCharProfileExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeCharProfileExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_STATUSMESSAGEKR: flatbuffers::VOffsetT = 6;
  pub const VT_STATUSMESSAGEJP: flatbuffers::VOffsetT = 8;
  pub const VT_FULLNAMEKR: flatbuffers::VOffsetT = 10;
  pub const VT_FULLNAMEJP: flatbuffers::VOffsetT = 12;
  pub const VT_FAMILYNAMEKR: flatbuffers::VOffsetT = 14;
  pub const VT_FAMILYNAMERUBYKR: flatbuffers::VOffsetT = 16;
  pub const VT_PERSONALNAMEKR: flatbuffers::VOffsetT = 18;
  pub const VT_PERSONALNAMERUBYKR: flatbuffers::VOffsetT = 20;
  pub const VT_FAMILYNAMEJP: flatbuffers::VOffsetT = 22;
  pub const VT_FAMILYNAMERUBYJP: flatbuffers::VOffsetT = 24;
  pub const VT_PERSONALNAMEJP: flatbuffers::VOffsetT = 26;
  pub const VT_PERSONALNAMERUBYJP: flatbuffers::VOffsetT = 28;
  pub const VT_SCHOOLYEARKR: flatbuffers::VOffsetT = 30;
  pub const VT_SCHOOLYEARJP: flatbuffers::VOffsetT = 32;
  pub const VT_CHARACTERAGEKR: flatbuffers::VOffsetT = 34;
  pub const VT_CHARACTERAGEJP: flatbuffers::VOffsetT = 36;
  pub const VT_BIRTHDAY: flatbuffers::VOffsetT = 38;
  pub const VT_BIRTHDAYKR: flatbuffers::VOffsetT = 40;
  pub const VT_BIRTHDAYJP: flatbuffers::VOffsetT = 42;
  pub const VT_CHARHEIGHTKR: flatbuffers::VOffsetT = 44;
  pub const VT_CHARHEIGHTJP: flatbuffers::VOffsetT = 46;
  pub const VT_DESIGNERNAMEKR: flatbuffers::VOffsetT = 48;
  pub const VT_DESIGNERNAMEJP: flatbuffers::VOffsetT = 50;
  pub const VT_ILLUSTRATORNAMEKR: flatbuffers::VOffsetT = 52;
  pub const VT_ILLUSTRATORNAMEJP: flatbuffers::VOffsetT = 54;
  pub const VT_CHARACTERVOICEKR: flatbuffers::VOffsetT = 56;
  pub const VT_CHARACTERVOICEJP: flatbuffers::VOffsetT = 58;
  pub const VT_HOBBYKR: flatbuffers::VOffsetT = 60;
  pub const VT_HOBBYJP: flatbuffers::VOffsetT = 62;
  pub const VT_WEAPONNAMEKR: flatbuffers::VOffsetT = 64;
  pub const VT_WEAPONDESCKR: flatbuffers::VOffsetT = 66;
  pub const VT_WEAPONNAMEJP: flatbuffers::VOffsetT = 68;
  pub const VT_WEAPONDESCJP: flatbuffers::VOffsetT = 70;
  pub const VT_PROFILEINTRODUCTIONKR: flatbuffers::VOffsetT = 72;
  pub const VT_PROFILEINTRODUCTIONJP: flatbuffers::VOffsetT = 74;
  pub const VT_CHARACTERSSRNEWKR: flatbuffers::VOffsetT = 76;
  pub const VT_CHARACTERSSRNEWJP: flatbuffers::VOffsetT = 78;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeCharProfileExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeCharProfileExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'bldr>> {
    let mut builder = LocalizeCharProfileExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LocalizeCharProfile");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.CharacterSSRNewJp {
        builder.add_CharacterSSRNewJp(x);
      }
      if let Some(x) = args.CharacterSSRNewKr {
        builder.add_CharacterSSRNewKr(x);
      }
      if let Some(x) = args.ProfileIntroductionJp {
        builder.add_ProfileIntroductionJp(x);
      }
      if let Some(x) = args.ProfileIntroductionKr {
        builder.add_ProfileIntroductionKr(x);
      }
      if let Some(x) = args.WeaponDescJp {
        builder.add_WeaponDescJp(x);
      }
      if let Some(x) = args.WeaponNameJp {
        builder.add_WeaponNameJp(x);
      }
      if let Some(x) = args.WeaponDescKr {
        builder.add_WeaponDescKr(x);
      }
      if let Some(x) = args.WeaponNameKr {
        builder.add_WeaponNameKr(x);
      }
      if let Some(x) = args.HobbyJp {
        builder.add_HobbyJp(x);
      }
      if let Some(x) = args.HobbyKr {
        builder.add_HobbyKr(x);
      }
      if let Some(x) = args.CharacterVoiceJp {
        builder.add_CharacterVoiceJp(x);
      }
      if let Some(x) = args.CharacterVoiceKr {
        builder.add_CharacterVoiceKr(x);
      }
      if let Some(x) = args.IllustratorNameJp {
        builder.add_IllustratorNameJp(x);
      }
      if let Some(x) = args.IllustratorNameKr {
        builder.add_IllustratorNameKr(x);
      }
      if let Some(x) = args.DesignerNameJp {
        builder.add_DesignerNameJp(x);
      }
      if let Some(x) = args.DesignerNameKr {
        builder.add_DesignerNameKr(x);
      }
      if let Some(x) = args.CharHeightJp {
        builder.add_CharHeightJp(x);
      }
      if let Some(x) = args.CharHeightKr {
        builder.add_CharHeightKr(x);
      }
      if let Some(x) = args.BirthdayJp {
        builder.add_BirthdayJp(x);
      }
      if let Some(x) = args.BirthdayKr {
        builder.add_BirthdayKr(x);
      }
      if let Some(x) = args.BirthDay {
        builder.add_BirthDay(x);
      }
      if let Some(x) = args.CharacterAgeJp {
        builder.add_CharacterAgeJp(x);
      }
      if let Some(x) = args.CharacterAgeKr {
        builder.add_CharacterAgeKr(x);
      }
      if let Some(x) = args.SchoolYearJp {
        builder.add_SchoolYearJp(x);
      }
      if let Some(x) = args.SchoolYearKr {
        builder.add_SchoolYearKr(x);
      }
      if let Some(x) = args.PersonalNameRubyJp {
        builder.add_PersonalNameRubyJp(x);
      }
      if let Some(x) = args.PersonalNameJp {
        builder.add_PersonalNameJp(x);
      }
      if let Some(x) = args.FamilyNameRubyJp {
        builder.add_FamilyNameRubyJp(x);
      }
      if let Some(x) = args.FamilyNameJp {
        builder.add_FamilyNameJp(x);
      }
      if let Some(x) = args.PersonalNameRubyKr {
        builder.add_PersonalNameRubyKr(x);
      }
      if let Some(x) = args.PersonalNameKr {
        builder.add_PersonalNameKr(x);
      }
      if let Some(x) = args.FamilyNameRubyKr {
        builder.add_FamilyNameRubyKr(x);
      }
      if let Some(x) = args.FamilyNameKr {
        builder.add_FamilyNameKr(x);
      }
      if let Some(x) = args.FullNameJp {
        builder.add_FullNameJp(x);
      }
      if let Some(x) = args.FullNameKr {
        builder.add_FullNameKr(x);
      }
      if let Some(x) = args.StatusMessageJp {
        builder.add_StatusMessageJp(x);
      }
      if let Some(x) = args.StatusMessageKr {
        builder.add_StatusMessageKr(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> LocalizeCharProfileExcelT {
    let key = table_encryption_service::create_key(b"LocalizeCharProfile");
      let CharacterId = self.CharacterId();
    let StatusMessageKr = self.StatusMessageKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StatusMessageJp = self.StatusMessageJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullNameKr = self.FullNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullNameJp = self.FullNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameKr = self.FamilyNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameRubyKr = self.FamilyNameRubyKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameKr = self.PersonalNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameRubyKr = self.PersonalNameRubyKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameJp = self.FamilyNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameRubyJp = self.FamilyNameRubyJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameJp = self.PersonalNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameRubyJp = self.PersonalNameRubyJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SchoolYearKr = self.SchoolYearKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SchoolYearJp = self.SchoolYearJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterAgeKr = self.CharacterAgeKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterAgeJp = self.CharacterAgeJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthDay = self.BirthDay().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthdayKr = self.BirthdayKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthdayJp = self.BirthdayJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharHeightKr = self.CharHeightKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharHeightJp = self.CharHeightJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignerNameKr = self.DesignerNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignerNameJp = self.DesignerNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IllustratorNameKr = self.IllustratorNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IllustratorNameJp = self.IllustratorNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterVoiceKr = self.CharacterVoiceKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterVoiceJp = self.CharacterVoiceJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HobbyKr = self.HobbyKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HobbyJp = self.HobbyJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponNameKr = self.WeaponNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponDescKr = self.WeaponDescKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponNameJp = self.WeaponNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponDescJp = self.WeaponDescJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProfileIntroductionKr = self.ProfileIntroductionKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProfileIntroductionJp = self.ProfileIntroductionJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterSSRNewKr = self.CharacterSSRNewKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterSSRNewJp = self.CharacterSSRNewJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    LocalizeCharProfileExcelT {
      CharacterId,
      StatusMessageKr,
      StatusMessageJp,
      FullNameKr,
      FullNameJp,
      FamilyNameKr,
      FamilyNameRubyKr,
      PersonalNameKr,
      PersonalNameRubyKr,
      FamilyNameJp,
      FamilyNameRubyJp,
      PersonalNameJp,
      PersonalNameRubyJp,
      SchoolYearKr,
      SchoolYearJp,
      CharacterAgeKr,
      CharacterAgeJp,
      BirthDay,
      BirthdayKr,
      BirthdayJp,
      CharHeightKr,
      CharHeightJp,
      DesignerNameKr,
      DesignerNameJp,
      IllustratorNameKr,
      IllustratorNameJp,
      CharacterVoiceKr,
      CharacterVoiceJp,
      HobbyKr,
      HobbyJp,
      WeaponNameKr,
      WeaponDescKr,
      WeaponNameJp,
      WeaponDescJp,
      ProfileIntroductionKr,
      ProfileIntroductionJp,
      CharacterSSRNewKr,
      CharacterSSRNewJp,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeCharProfileExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatusMessageKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEKR, None)}
  }
  #[inline]
  pub fn StatusMessageJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEJP, None)}
  }
  #[inline]
  pub fn FullNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULLNAMEKR, None)}
  }
  #[inline]
  pub fn FullNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULLNAMEJP, None)}
  }
  #[inline]
  pub fn FamilyNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMEKR, None)}
  }
  #[inline]
  pub fn FamilyNameRubyKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYKR, None)}
  }
  #[inline]
  pub fn PersonalNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMEKR, None)}
  }
  #[inline]
  pub fn PersonalNameRubyKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYKR, None)}
  }
  #[inline]
  pub fn FamilyNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMEJP, None)}
  }
  #[inline]
  pub fn FamilyNameRubyJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYJP, None)}
  }
  #[inline]
  pub fn PersonalNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMEJP, None)}
  }
  #[inline]
  pub fn PersonalNameRubyJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYJP, None)}
  }
  #[inline]
  pub fn SchoolYearKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOLYEARKR, None)}
  }
  #[inline]
  pub fn SchoolYearJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOLYEARJP, None)}
  }
  #[inline]
  pub fn CharacterAgeKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERAGEKR, None)}
  }
  #[inline]
  pub fn CharacterAgeJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERAGEJP, None)}
  }
  #[inline]
  pub fn BirthDay(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAY, None)}
  }
  #[inline]
  pub fn BirthdayKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAYKR, None)}
  }
  #[inline]
  pub fn BirthdayJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAYJP, None)}
  }
  #[inline]
  pub fn CharHeightKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARHEIGHTKR, None)}
  }
  #[inline]
  pub fn CharHeightJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARHEIGHTJP, None)}
  }
  #[inline]
  pub fn DesignerNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEKR, None)}
  }
  #[inline]
  pub fn DesignerNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEJP, None)}
  }
  #[inline]
  pub fn IllustratorNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEKR, None)}
  }
  #[inline]
  pub fn IllustratorNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEJP, None)}
  }
  #[inline]
  pub fn CharacterVoiceKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEKR, None)}
  }
  #[inline]
  pub fn CharacterVoiceJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEJP, None)}
  }
  #[inline]
  pub fn HobbyKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBYKR, None)}
  }
  #[inline]
  pub fn HobbyJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBYJP, None)}
  }
  #[inline]
  pub fn WeaponNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONNAMEKR, None)}
  }
  #[inline]
  pub fn WeaponDescKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONDESCKR, None)}
  }
  #[inline]
  pub fn WeaponNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONNAMEJP, None)}
  }
  #[inline]
  pub fn WeaponDescJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONDESCJP, None)}
  }
  #[inline]
  pub fn ProfileIntroductionKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONKR, None)}
  }
  #[inline]
  pub fn ProfileIntroductionJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONJP, None)}
  }
  #[inline]
  pub fn CharacterSSRNewKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWKR, None)}
  }
  #[inline]
  pub fn CharacterSSRNewJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWJP, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeCharProfileExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatusMessageKr", Self::VT_STATUSMESSAGEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatusMessageJp", Self::VT_STATUSMESSAGEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullNameKr", Self::VT_FULLNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullNameJp", Self::VT_FULLNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameKr", Self::VT_FAMILYNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameRubyKr", Self::VT_FAMILYNAMERUBYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameKr", Self::VT_PERSONALNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameRubyKr", Self::VT_PERSONALNAMERUBYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameJp", Self::VT_FAMILYNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameRubyJp", Self::VT_FAMILYNAMERUBYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameJp", Self::VT_PERSONALNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameRubyJp", Self::VT_PERSONALNAMERUBYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SchoolYearKr", Self::VT_SCHOOLYEARKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SchoolYearJp", Self::VT_SCHOOLYEARJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterAgeKr", Self::VT_CHARACTERAGEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterAgeJp", Self::VT_CHARACTERAGEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthDay", Self::VT_BIRTHDAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthdayKr", Self::VT_BIRTHDAYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthdayJp", Self::VT_BIRTHDAYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharHeightKr", Self::VT_CHARHEIGHTKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharHeightJp", Self::VT_CHARHEIGHTJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignerNameKr", Self::VT_DESIGNERNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignerNameJp", Self::VT_DESIGNERNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IllustratorNameKr", Self::VT_ILLUSTRATORNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IllustratorNameJp", Self::VT_ILLUSTRATORNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterVoiceKr", Self::VT_CHARACTERVOICEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterVoiceJp", Self::VT_CHARACTERVOICEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HobbyKr", Self::VT_HOBBYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HobbyJp", Self::VT_HOBBYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponNameKr", Self::VT_WEAPONNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponDescKr", Self::VT_WEAPONDESCKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponNameJp", Self::VT_WEAPONNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponDescJp", Self::VT_WEAPONDESCJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProfileIntroductionKr", Self::VT_PROFILEINTRODUCTIONKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProfileIntroductionJp", Self::VT_PROFILEINTRODUCTIONJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterSSRNewKr", Self::VT_CHARACTERSSRNEWKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterSSRNewJp", Self::VT_CHARACTERSSRNEWJP, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeCharProfileExcelArgs<'a> {
    pub CharacterId: i64,
    pub StatusMessageKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StatusMessageJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameRubyKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameRubyKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameRubyJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameRubyJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SchoolYearKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SchoolYearJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterAgeKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterAgeJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthDay: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthdayKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthdayJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharHeightKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharHeightJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignerNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignerNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IllustratorNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IllustratorNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HobbyKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HobbyJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponDescKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponDescJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProfileIntroductionKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProfileIntroductionJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterSSRNewKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterSSRNewJp: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocalizeCharProfileExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeCharProfileExcelArgs {
      CharacterId: 0,
      StatusMessageKr: None,
      StatusMessageJp: None,
      FullNameKr: None,
      FullNameJp: None,
      FamilyNameKr: None,
      FamilyNameRubyKr: None,
      PersonalNameKr: None,
      PersonalNameRubyKr: None,
      FamilyNameJp: None,
      FamilyNameRubyJp: None,
      PersonalNameJp: None,
      PersonalNameRubyJp: None,
      SchoolYearKr: None,
      SchoolYearJp: None,
      CharacterAgeKr: None,
      CharacterAgeJp: None,
      BirthDay: None,
      BirthdayKr: None,
      BirthdayJp: None,
      CharHeightKr: None,
      CharHeightJp: None,
      DesignerNameKr: None,
      DesignerNameJp: None,
      IllustratorNameKr: None,
      IllustratorNameJp: None,
      CharacterVoiceKr: None,
      CharacterVoiceJp: None,
      HobbyKr: None,
      HobbyJp: None,
      WeaponNameKr: None,
      WeaponDescKr: None,
      WeaponNameJp: None,
      WeaponDescJp: None,
      ProfileIntroductionKr: None,
      ProfileIntroductionJp: None,
      CharacterSSRNewKr: None,
      CharacterSSRNewJp: None,
    }
  }
}

impl Serialize for LocalizeCharProfileExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LocalizeCharProfileExcel", 38)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.StatusMessageKr() {
        s.serialize_field("StatusMessageKr", &f)?;
      } else {
        s.skip_field("StatusMessageKr")?;
      }
      if let Some(f) = self.StatusMessageJp() {
        s.serialize_field("StatusMessageJp", &f)?;
      } else {
        s.skip_field("StatusMessageJp")?;
      }
      if let Some(f) = self.FullNameKr() {
        s.serialize_field("FullNameKr", &f)?;
      } else {
        s.skip_field("FullNameKr")?;
      }
      if let Some(f) = self.FullNameJp() {
        s.serialize_field("FullNameJp", &f)?;
      } else {
        s.skip_field("FullNameJp")?;
      }
      if let Some(f) = self.FamilyNameKr() {
        s.serialize_field("FamilyNameKr", &f)?;
      } else {
        s.skip_field("FamilyNameKr")?;
      }
      if let Some(f) = self.FamilyNameRubyKr() {
        s.serialize_field("FamilyNameRubyKr", &f)?;
      } else {
        s.skip_field("FamilyNameRubyKr")?;
      }
      if let Some(f) = self.PersonalNameKr() {
        s.serialize_field("PersonalNameKr", &f)?;
      } else {
        s.skip_field("PersonalNameKr")?;
      }
      if let Some(f) = self.PersonalNameRubyKr() {
        s.serialize_field("PersonalNameRubyKr", &f)?;
      } else {
        s.skip_field("PersonalNameRubyKr")?;
      }
      if let Some(f) = self.FamilyNameJp() {
        s.serialize_field("FamilyNameJp", &f)?;
      } else {
        s.skip_field("FamilyNameJp")?;
      }
      if let Some(f) = self.FamilyNameRubyJp() {
        s.serialize_field("FamilyNameRubyJp", &f)?;
      } else {
        s.skip_field("FamilyNameRubyJp")?;
      }
      if let Some(f) = self.PersonalNameJp() {
        s.serialize_field("PersonalNameJp", &f)?;
      } else {
        s.skip_field("PersonalNameJp")?;
      }
      if let Some(f) = self.PersonalNameRubyJp() {
        s.serialize_field("PersonalNameRubyJp", &f)?;
      } else {
        s.skip_field("PersonalNameRubyJp")?;
      }
      if let Some(f) = self.SchoolYearKr() {
        s.serialize_field("SchoolYearKr", &f)?;
      } else {
        s.skip_field("SchoolYearKr")?;
      }
      if let Some(f) = self.SchoolYearJp() {
        s.serialize_field("SchoolYearJp", &f)?;
      } else {
        s.skip_field("SchoolYearJp")?;
      }
      if let Some(f) = self.CharacterAgeKr() {
        s.serialize_field("CharacterAgeKr", &f)?;
      } else {
        s.skip_field("CharacterAgeKr")?;
      }
      if let Some(f) = self.CharacterAgeJp() {
        s.serialize_field("CharacterAgeJp", &f)?;
      } else {
        s.skip_field("CharacterAgeJp")?;
      }
      if let Some(f) = self.BirthDay() {
        s.serialize_field("BirthDay", &f)?;
      } else {
        s.skip_field("BirthDay")?;
      }
      if let Some(f) = self.BirthdayKr() {
        s.serialize_field("BirthdayKr", &f)?;
      } else {
        s.skip_field("BirthdayKr")?;
      }
      if let Some(f) = self.BirthdayJp() {
        s.serialize_field("BirthdayJp", &f)?;
      } else {
        s.skip_field("BirthdayJp")?;
      }
      if let Some(f) = self.CharHeightKr() {
        s.serialize_field("CharHeightKr", &f)?;
      } else {
        s.skip_field("CharHeightKr")?;
      }
      if let Some(f) = self.CharHeightJp() {
        s.serialize_field("CharHeightJp", &f)?;
      } else {
        s.skip_field("CharHeightJp")?;
      }
      if let Some(f) = self.DesignerNameKr() {
        s.serialize_field("DesignerNameKr", &f)?;
      } else {
        s.skip_field("DesignerNameKr")?;
      }
      if let Some(f) = self.DesignerNameJp() {
        s.serialize_field("DesignerNameJp", &f)?;
      } else {
        s.skip_field("DesignerNameJp")?;
      }
      if let Some(f) = self.IllustratorNameKr() {
        s.serialize_field("IllustratorNameKr", &f)?;
      } else {
        s.skip_field("IllustratorNameKr")?;
      }
      if let Some(f) = self.IllustratorNameJp() {
        s.serialize_field("IllustratorNameJp", &f)?;
      } else {
        s.skip_field("IllustratorNameJp")?;
      }
      if let Some(f) = self.CharacterVoiceKr() {
        s.serialize_field("CharacterVoiceKr", &f)?;
      } else {
        s.skip_field("CharacterVoiceKr")?;
      }
      if let Some(f) = self.CharacterVoiceJp() {
        s.serialize_field("CharacterVoiceJp", &f)?;
      } else {
        s.skip_field("CharacterVoiceJp")?;
      }
      if let Some(f) = self.HobbyKr() {
        s.serialize_field("HobbyKr", &f)?;
      } else {
        s.skip_field("HobbyKr")?;
      }
      if let Some(f) = self.HobbyJp() {
        s.serialize_field("HobbyJp", &f)?;
      } else {
        s.skip_field("HobbyJp")?;
      }
      if let Some(f) = self.WeaponNameKr() {
        s.serialize_field("WeaponNameKr", &f)?;
      } else {
        s.skip_field("WeaponNameKr")?;
      }
      if let Some(f) = self.WeaponDescKr() {
        s.serialize_field("WeaponDescKr", &f)?;
      } else {
        s.skip_field("WeaponDescKr")?;
      }
      if let Some(f) = self.WeaponNameJp() {
        s.serialize_field("WeaponNameJp", &f)?;
      } else {
        s.skip_field("WeaponNameJp")?;
      }
      if let Some(f) = self.WeaponDescJp() {
        s.serialize_field("WeaponDescJp", &f)?;
      } else {
        s.skip_field("WeaponDescJp")?;
      }
      if let Some(f) = self.ProfileIntroductionKr() {
        s.serialize_field("ProfileIntroductionKr", &f)?;
      } else {
        s.skip_field("ProfileIntroductionKr")?;
      }
      if let Some(f) = self.ProfileIntroductionJp() {
        s.serialize_field("ProfileIntroductionJp", &f)?;
      } else {
        s.skip_field("ProfileIntroductionJp")?;
      }
      if let Some(f) = self.CharacterSSRNewKr() {
        s.serialize_field("CharacterSSRNewKr", &f)?;
      } else {
        s.skip_field("CharacterSSRNewKr")?;
      }
      if let Some(f) = self.CharacterSSRNewJp() {
        s.serialize_field("CharacterSSRNewJp", &f)?;
      } else {
        s.skip_field("CharacterSSRNewJp")?;
      }
    s.end()
  }
}

pub struct LocalizeCharProfileExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeCharProfileExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(LocalizeCharProfileExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_StatusMessageKr(&mut self, StatusMessageKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEKR, StatusMessageKr);
  }
  #[inline]
  pub fn add_StatusMessageJp(&mut self, StatusMessageJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEJP, StatusMessageJp);
  }
  #[inline]
  pub fn add_FullNameKr(&mut self, FullNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULLNAMEKR, FullNameKr);
  }
  #[inline]
  pub fn add_FullNameJp(&mut self, FullNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULLNAMEJP, FullNameJp);
  }
  #[inline]
  pub fn add_FamilyNameKr(&mut self, FamilyNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMEKR, FamilyNameKr);
  }
  #[inline]
  pub fn add_FamilyNameRubyKr(&mut self, FamilyNameRubyKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYKR, FamilyNameRubyKr);
  }
  #[inline]
  pub fn add_PersonalNameKr(&mut self, PersonalNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMEKR, PersonalNameKr);
  }
  #[inline]
  pub fn add_PersonalNameRubyKr(&mut self, PersonalNameRubyKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYKR, PersonalNameRubyKr);
  }
  #[inline]
  pub fn add_FamilyNameJp(&mut self, FamilyNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMEJP, FamilyNameJp);
  }
  #[inline]
  pub fn add_FamilyNameRubyJp(&mut self, FamilyNameRubyJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYJP, FamilyNameRubyJp);
  }
  #[inline]
  pub fn add_PersonalNameJp(&mut self, PersonalNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMEJP, PersonalNameJp);
  }
  #[inline]
  pub fn add_PersonalNameRubyJp(&mut self, PersonalNameRubyJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYJP, PersonalNameRubyJp);
  }
  #[inline]
  pub fn add_SchoolYearKr(&mut self, SchoolYearKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOLYEARKR, SchoolYearKr);
  }
  #[inline]
  pub fn add_SchoolYearJp(&mut self, SchoolYearJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOLYEARJP, SchoolYearJp);
  }
  #[inline]
  pub fn add_CharacterAgeKr(&mut self, CharacterAgeKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERAGEKR, CharacterAgeKr);
  }
  #[inline]
  pub fn add_CharacterAgeJp(&mut self, CharacterAgeJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERAGEJP, CharacterAgeJp);
  }
  #[inline]
  pub fn add_BirthDay(&mut self, BirthDay: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAY, BirthDay);
  }
  #[inline]
  pub fn add_BirthdayKr(&mut self, BirthdayKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAYKR, BirthdayKr);
  }
  #[inline]
  pub fn add_BirthdayJp(&mut self, BirthdayJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAYJP, BirthdayJp);
  }
  #[inline]
  pub fn add_CharHeightKr(&mut self, CharHeightKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARHEIGHTKR, CharHeightKr);
  }
  #[inline]
  pub fn add_CharHeightJp(&mut self, CharHeightJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARHEIGHTJP, CharHeightJp);
  }
  #[inline]
  pub fn add_DesignerNameKr(&mut self, DesignerNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEKR, DesignerNameKr);
  }
  #[inline]
  pub fn add_DesignerNameJp(&mut self, DesignerNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEJP, DesignerNameJp);
  }
  #[inline]
  pub fn add_IllustratorNameKr(&mut self, IllustratorNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEKR, IllustratorNameKr);
  }
  #[inline]
  pub fn add_IllustratorNameJp(&mut self, IllustratorNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEJP, IllustratorNameJp);
  }
  #[inline]
  pub fn add_CharacterVoiceKr(&mut self, CharacterVoiceKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEKR, CharacterVoiceKr);
  }
  #[inline]
  pub fn add_CharacterVoiceJp(&mut self, CharacterVoiceJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEJP, CharacterVoiceJp);
  }
  #[inline]
  pub fn add_HobbyKr(&mut self, HobbyKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBYKR, HobbyKr);
  }
  #[inline]
  pub fn add_HobbyJp(&mut self, HobbyJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBYJP, HobbyJp);
  }
  #[inline]
  pub fn add_WeaponNameKr(&mut self, WeaponNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONNAMEKR, WeaponNameKr);
  }
  #[inline]
  pub fn add_WeaponDescKr(&mut self, WeaponDescKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONDESCKR, WeaponDescKr);
  }
  #[inline]
  pub fn add_WeaponNameJp(&mut self, WeaponNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONNAMEJP, WeaponNameJp);
  }
  #[inline]
  pub fn add_WeaponDescJp(&mut self, WeaponDescJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONDESCJP, WeaponDescJp);
  }
  #[inline]
  pub fn add_ProfileIntroductionKr(&mut self, ProfileIntroductionKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONKR, ProfileIntroductionKr);
  }
  #[inline]
  pub fn add_ProfileIntroductionJp(&mut self, ProfileIntroductionJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONJP, ProfileIntroductionJp);
  }
  #[inline]
  pub fn add_CharacterSSRNewKr(&mut self, CharacterSSRNewKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWKR, CharacterSSRNewKr);
  }
  #[inline]
  pub fn add_CharacterSSRNewJp(&mut self, CharacterSSRNewJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWJP, CharacterSSRNewJp);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeCharProfileExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeCharProfileExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeCharProfileExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeCharProfileExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("StatusMessageKr", &self.StatusMessageKr());
      ds.field("StatusMessageJp", &self.StatusMessageJp());
      ds.field("FullNameKr", &self.FullNameKr());
      ds.field("FullNameJp", &self.FullNameJp());
      ds.field("FamilyNameKr", &self.FamilyNameKr());
      ds.field("FamilyNameRubyKr", &self.FamilyNameRubyKr());
      ds.field("PersonalNameKr", &self.PersonalNameKr());
      ds.field("PersonalNameRubyKr", &self.PersonalNameRubyKr());
      ds.field("FamilyNameJp", &self.FamilyNameJp());
      ds.field("FamilyNameRubyJp", &self.FamilyNameRubyJp());
      ds.field("PersonalNameJp", &self.PersonalNameJp());
      ds.field("PersonalNameRubyJp", &self.PersonalNameRubyJp());
      ds.field("SchoolYearKr", &self.SchoolYearKr());
      ds.field("SchoolYearJp", &self.SchoolYearJp());
      ds.field("CharacterAgeKr", &self.CharacterAgeKr());
      ds.field("CharacterAgeJp", &self.CharacterAgeJp());
      ds.field("BirthDay", &self.BirthDay());
      ds.field("BirthdayKr", &self.BirthdayKr());
      ds.field("BirthdayJp", &self.BirthdayJp());
      ds.field("CharHeightKr", &self.CharHeightKr());
      ds.field("CharHeightJp", &self.CharHeightJp());
      ds.field("DesignerNameKr", &self.DesignerNameKr());
      ds.field("DesignerNameJp", &self.DesignerNameJp());
      ds.field("IllustratorNameKr", &self.IllustratorNameKr());
      ds.field("IllustratorNameJp", &self.IllustratorNameJp());
      ds.field("CharacterVoiceKr", &self.CharacterVoiceKr());
      ds.field("CharacterVoiceJp", &self.CharacterVoiceJp());
      ds.field("HobbyKr", &self.HobbyKr());
      ds.field("HobbyJp", &self.HobbyJp());
      ds.field("WeaponNameKr", &self.WeaponNameKr());
      ds.field("WeaponDescKr", &self.WeaponDescKr());
      ds.field("WeaponNameJp", &self.WeaponNameJp());
      ds.field("WeaponDescJp", &self.WeaponDescJp());
      ds.field("ProfileIntroductionKr", &self.ProfileIntroductionKr());
      ds.field("ProfileIntroductionJp", &self.ProfileIntroductionJp());
      ds.field("CharacterSSRNewKr", &self.CharacterSSRNewKr());
      ds.field("CharacterSSRNewJp", &self.CharacterSSRNewJp());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LocalizeCharProfileExcelT {
  pub CharacterId: i64,
  pub StatusMessageKr: Option<String>,
  pub StatusMessageJp: Option<String>,
  pub FullNameKr: Option<String>,
  pub FullNameJp: Option<String>,
  pub FamilyNameKr: Option<String>,
  pub FamilyNameRubyKr: Option<String>,
  pub PersonalNameKr: Option<String>,
  pub PersonalNameRubyKr: Option<String>,
  pub FamilyNameJp: Option<String>,
  pub FamilyNameRubyJp: Option<String>,
  pub PersonalNameJp: Option<String>,
  pub PersonalNameRubyJp: Option<String>,
  pub SchoolYearKr: Option<String>,
  pub SchoolYearJp: Option<String>,
  pub CharacterAgeKr: Option<String>,
  pub CharacterAgeJp: Option<String>,
  pub BirthDay: Option<String>,
  pub BirthdayKr: Option<String>,
  pub BirthdayJp: Option<String>,
  pub CharHeightKr: Option<String>,
  pub CharHeightJp: Option<String>,
  pub DesignerNameKr: Option<String>,
  pub DesignerNameJp: Option<String>,
  pub IllustratorNameKr: Option<String>,
  pub IllustratorNameJp: Option<String>,
  pub CharacterVoiceKr: Option<String>,
  pub CharacterVoiceJp: Option<String>,
  pub HobbyKr: Option<String>,
  pub HobbyJp: Option<String>,
  pub WeaponNameKr: Option<String>,
  pub WeaponDescKr: Option<String>,
  pub WeaponNameJp: Option<String>,
  pub WeaponDescJp: Option<String>,
  pub ProfileIntroductionKr: Option<String>,
  pub ProfileIntroductionJp: Option<String>,
  pub CharacterSSRNewKr: Option<String>,
  pub CharacterSSRNewJp: Option<String>,
}
impl Default for LocalizeCharProfileExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      StatusMessageKr: None,
      StatusMessageJp: None,
      FullNameKr: None,
      FullNameJp: None,
      FamilyNameKr: None,
      FamilyNameRubyKr: None,
      PersonalNameKr: None,
      PersonalNameRubyKr: None,
      FamilyNameJp: None,
      FamilyNameRubyJp: None,
      PersonalNameJp: None,
      PersonalNameRubyJp: None,
      SchoolYearKr: None,
      SchoolYearJp: None,
      CharacterAgeKr: None,
      CharacterAgeJp: None,
      BirthDay: None,
      BirthdayKr: None,
      BirthdayJp: None,
      CharHeightKr: None,
      CharHeightJp: None,
      DesignerNameKr: None,
      DesignerNameJp: None,
      IllustratorNameKr: None,
      IllustratorNameJp: None,
      CharacterVoiceKr: None,
      CharacterVoiceJp: None,
      HobbyKr: None,
      HobbyJp: None,
      WeaponNameKr: None,
      WeaponDescKr: None,
      WeaponNameJp: None,
      WeaponDescJp: None,
      ProfileIntroductionKr: None,
      ProfileIntroductionJp: None,
      CharacterSSRNewKr: None,
      CharacterSSRNewJp: None,
    }
  }
}
impl LocalizeCharProfileExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'b>> {
    let CharacterId = self.CharacterId;
    let StatusMessageKr = self.StatusMessageKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StatusMessageJp = self.StatusMessageJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullNameKr = self.FullNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullNameJp = self.FullNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameKr = self.FamilyNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameRubyKr = self.FamilyNameRubyKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameKr = self.PersonalNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameRubyKr = self.PersonalNameRubyKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameJp = self.FamilyNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameRubyJp = self.FamilyNameRubyJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameJp = self.PersonalNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameRubyJp = self.PersonalNameRubyJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SchoolYearKr = self.SchoolYearKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SchoolYearJp = self.SchoolYearJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterAgeKr = self.CharacterAgeKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterAgeJp = self.CharacterAgeJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthDay = self.BirthDay.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthdayKr = self.BirthdayKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthdayJp = self.BirthdayJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharHeightKr = self.CharHeightKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharHeightJp = self.CharHeightJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignerNameKr = self.DesignerNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignerNameJp = self.DesignerNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IllustratorNameKr = self.IllustratorNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IllustratorNameJp = self.IllustratorNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceKr = self.CharacterVoiceKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceJp = self.CharacterVoiceJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HobbyKr = self.HobbyKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HobbyJp = self.HobbyJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponNameKr = self.WeaponNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponDescKr = self.WeaponDescKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponNameJp = self.WeaponNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponDescJp = self.WeaponDescJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProfileIntroductionKr = self.ProfileIntroductionKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProfileIntroductionJp = self.ProfileIntroductionJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterSSRNewKr = self.CharacterSSRNewKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterSSRNewJp = self.CharacterSSRNewJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LocalizeCharProfileExcel::create(_fbb, &LocalizeCharProfileExcelArgs{
      CharacterId,
      StatusMessageKr,
      StatusMessageJp,
      FullNameKr,
      FullNameJp,
      FamilyNameKr,
      FamilyNameRubyKr,
      PersonalNameKr,
      PersonalNameRubyKr,
      FamilyNameJp,
      FamilyNameRubyJp,
      PersonalNameJp,
      PersonalNameRubyJp,
      SchoolYearKr,
      SchoolYearJp,
      CharacterAgeKr,
      CharacterAgeJp,
      BirthDay,
      BirthdayKr,
      BirthdayJp,
      CharHeightKr,
      CharHeightJp,
      DesignerNameKr,
      DesignerNameJp,
      IllustratorNameKr,
      IllustratorNameJp,
      CharacterVoiceKr,
      CharacterVoiceJp,
      HobbyKr,
      HobbyJp,
      WeaponNameKr,
      WeaponDescKr,
      WeaponNameJp,
      WeaponDescJp,
      ProfileIntroductionKr,
      ProfileIntroductionJp,
      CharacterSSRNewKr,
      CharacterSSRNewJp,
    })
  }
}
