// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContentsScenarioExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContentsScenarioExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContentsScenarioExcel<'a> {
  type Inner = ContentsScenarioExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContentsScenarioExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZEID: flatbuffers::VOffsetT = 6;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_SCENARIOCONTENTTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_SCENARIOGROUPID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContentsScenarioExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContentsScenarioExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ContentsScenarioExcel<'bldr>> {
    let mut builder = ContentsScenarioExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ContentsScenario");
      if let Some(x) = args.ScenarioGroupId {
        builder.add_ScenarioGroupId(x);
      }
      let x = args.ScenarioContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ScenarioContentType(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.LocalizeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Id(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ContentsScenarioExcelT {
    let key = table_encryption_service::create_key(b"ContentsScenario");
      let Id = self.Id();
      let LocalizeId = self.LocalizeId();
      let DisplayOrder = self.DisplayOrder();
      let ScenarioContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ScenarioContentType(), &key)
      } else {
        self.ScenarioContentType()
      };
    let ScenarioGroupId = self.ScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ContentsScenarioExcelT {
      Id,
      LocalizeId,
      DisplayOrder,
      ScenarioContentType,
      ScenarioGroupId,
    }
  }

  #[inline]
  pub fn Id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ContentsScenarioExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ContentsScenarioExcel::VT_LOCALIZEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ContentsScenarioExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioContentType(&self) -> ScenarioContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ScenarioContentType>(ContentsScenarioExcel::VT_SCENARIOCONTENTTYPE, Some(ScenarioContentType::Prologue)).unwrap()}
  }
  #[inline]
  pub fn ScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ContentsScenarioExcel::VT_SCENARIOGROUPID, None)}
  }
}

impl flatbuffers::Verifiable for ContentsScenarioExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeId", Self::VT_LOCALIZEID, false)?
     .visit_field::<i32>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<ScenarioContentType>("ScenarioContentType", Self::VT_SCENARIOCONTENTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ScenarioGroupId", Self::VT_SCENARIOGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct ContentsScenarioExcelArgs<'a> {
    pub Id: u32,
    pub LocalizeId: u32,
    pub DisplayOrder: i32,
    pub ScenarioContentType: ScenarioContentType,
    pub ScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ContentsScenarioExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContentsScenarioExcelArgs {
      Id: 0,
      LocalizeId: 0,
      DisplayOrder: 0,
      ScenarioContentType: ScenarioContentType::Prologue,
      ScenarioGroupId: None,
    }
  }
}

impl Serialize for ContentsScenarioExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ContentsScenarioExcel", 5)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeId", &self.LocalizeId())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("ScenarioContentType", &self.ScenarioContentType())?;
      if let Some(f) = self.ScenarioGroupId() {
        s.serialize_field("ScenarioGroupId", &f)?;
      } else {
        s.skip_field("ScenarioGroupId")?;
      }
    s.end()
  }
}

pub struct ContentsScenarioExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContentsScenarioExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: u32) {
    self.fbb_.push_slot::<u32>(ContentsScenarioExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeId(&mut self, LocalizeId: u32) {
    self.fbb_.push_slot::<u32>(ContentsScenarioExcel::VT_LOCALIZEID, LocalizeId, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i32) {
    self.fbb_.push_slot::<i32>(ContentsScenarioExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_ScenarioContentType(&mut self, ScenarioContentType: ScenarioContentType) {
    self.fbb_.push_slot::<ScenarioContentType>(ContentsScenarioExcel::VT_SCENARIOCONTENTTYPE, ScenarioContentType, ScenarioContentType::Prologue);
  }
  #[inline]
  pub fn add_ScenarioGroupId(&mut self, ScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContentsScenarioExcel::VT_SCENARIOGROUPID, ScenarioGroupId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContentsScenarioExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContentsScenarioExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContentsScenarioExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContentsScenarioExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContentsScenarioExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeId", &self.LocalizeId());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("ScenarioContentType", &self.ScenarioContentType());
      ds.field("ScenarioGroupId", &self.ScenarioGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ContentsScenarioExcelT {
  pub Id: u32,
  pub LocalizeId: u32,
  pub DisplayOrder: i32,
  pub ScenarioContentType: ScenarioContentType,
  pub ScenarioGroupId: Option<Vec<i64>>,
}
impl Default for ContentsScenarioExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeId: 0,
      DisplayOrder: 0,
      ScenarioContentType: ScenarioContentType::Prologue,
      ScenarioGroupId: None,
    }
  }
}
impl ContentsScenarioExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ContentsScenarioExcel<'b>> {
    let Id = self.Id;
    let LocalizeId = self.LocalizeId;
    let DisplayOrder = self.DisplayOrder;
    let ScenarioContentType = self.ScenarioContentType;
    let ScenarioGroupId = self.ScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ContentsScenarioExcel::create(_fbb, &ContentsScenarioExcelArgs{
      Id,
      LocalizeId,
      DisplayOrder,
      ScenarioContentType,
      ScenarioGroupId,
    })
  }
}
