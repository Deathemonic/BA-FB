// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocalizeSkillExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeSkillExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeSkillExcel<'a> {
  type Inner = LocalizeSkillExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeSkillExcel<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_NAMEKR: flatbuffers::VOffsetT = 6;
  pub const VT_DESCRIPTIONKR: flatbuffers::VOffsetT = 8;
  pub const VT_SKILLINVOKELOCALIZEKR: flatbuffers::VOffsetT = 10;
  pub const VT_NAMEJP: flatbuffers::VOffsetT = 12;
  pub const VT_DESCRIPTIONJP: flatbuffers::VOffsetT = 14;
  pub const VT_SKILLINVOKELOCALIZEJP: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeSkillExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeSkillExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeSkillExcel<'bldr>> {
    let mut builder = LocalizeSkillExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LocalizeSkill");
      if let Some(x) = args.SkillInvokeLocalizeJp {
        builder.add_SkillInvokeLocalizeJp(x);
      }
      if let Some(x) = args.DescriptionJp {
        builder.add_DescriptionJp(x);
      }
      if let Some(x) = args.NameJp {
        builder.add_NameJp(x);
      }
      if let Some(x) = args.SkillInvokeLocalizeKr {
        builder.add_SkillInvokeLocalizeKr(x);
      }
      if let Some(x) = args.DescriptionKr {
        builder.add_DescriptionKr(x);
      }
      if let Some(x) = args.NameKr {
        builder.add_NameKr(x);
      }
      let x = args.Key;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Key(x);
    builder.finish()
  }

  pub fn unpack(&self) -> LocalizeSkillExcelT {
    let key = table_encryption_service::create_key(b"LocalizeSkill");
      let Key = self.Key();
    let NameKr = self.NameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DescriptionKr = self.DescriptionKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SkillInvokeLocalizeKr = self.SkillInvokeLocalizeKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let NameJp = self.NameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DescriptionJp = self.DescriptionJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SkillInvokeLocalizeJp = self.SkillInvokeLocalizeJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    LocalizeSkillExcelT {
      Key,
      NameKr,
      DescriptionKr,
      SkillInvokeLocalizeKr,
      NameJp,
      DescriptionJp,
      SkillInvokeLocalizeJp,
    }
  }

  #[inline]
  pub fn Key(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(LocalizeSkillExcel::VT_KEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeSkillExcel::VT_NAMEKR, None)}
  }
  #[inline]
  pub fn DescriptionKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeSkillExcel::VT_DESCRIPTIONKR, None)}
  }
  #[inline]
  pub fn SkillInvokeLocalizeKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeSkillExcel::VT_SKILLINVOKELOCALIZEKR, None)}
  }
  #[inline]
  pub fn NameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeSkillExcel::VT_NAMEJP, None)}
  }
  #[inline]
  pub fn DescriptionJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeSkillExcel::VT_DESCRIPTIONJP, None)}
  }
  #[inline]
  pub fn SkillInvokeLocalizeJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeSkillExcel::VT_SKILLINVOKELOCALIZEJP, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeSkillExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NameKr", Self::VT_NAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DescriptionKr", Self::VT_DESCRIPTIONKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillInvokeLocalizeKr", Self::VT_SKILLINVOKELOCALIZEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NameJp", Self::VT_NAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DescriptionJp", Self::VT_DESCRIPTIONJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillInvokeLocalizeJp", Self::VT_SKILLINVOKELOCALIZEJP, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeSkillExcelArgs<'a> {
    pub Key: u32,
    pub NameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DescriptionKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SkillInvokeLocalizeKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DescriptionJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SkillInvokeLocalizeJp: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocalizeSkillExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeSkillExcelArgs {
      Key: 0,
      NameKr: None,
      DescriptionKr: None,
      SkillInvokeLocalizeKr: None,
      NameJp: None,
      DescriptionJp: None,
      SkillInvokeLocalizeJp: None,
    }
  }
}

impl Serialize for LocalizeSkillExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LocalizeSkillExcel", 7)?;
      s.serialize_field("Key", &self.Key())?;
      if let Some(f) = self.NameKr() {
        s.serialize_field("NameKr", &f)?;
      } else {
        s.skip_field("NameKr")?;
      }
      if let Some(f) = self.DescriptionKr() {
        s.serialize_field("DescriptionKr", &f)?;
      } else {
        s.skip_field("DescriptionKr")?;
      }
      if let Some(f) = self.SkillInvokeLocalizeKr() {
        s.serialize_field("SkillInvokeLocalizeKr", &f)?;
      } else {
        s.skip_field("SkillInvokeLocalizeKr")?;
      }
      if let Some(f) = self.NameJp() {
        s.serialize_field("NameJp", &f)?;
      } else {
        s.skip_field("NameJp")?;
      }
      if let Some(f) = self.DescriptionJp() {
        s.serialize_field("DescriptionJp", &f)?;
      } else {
        s.skip_field("DescriptionJp")?;
      }
      if let Some(f) = self.SkillInvokeLocalizeJp() {
        s.serialize_field("SkillInvokeLocalizeJp", &f)?;
      } else {
        s.skip_field("SkillInvokeLocalizeJp")?;
      }
    s.end()
  }
}

pub struct LocalizeSkillExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeSkillExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Key(&mut self, Key: u32) {
    self.fbb_.push_slot::<u32>(LocalizeSkillExcel::VT_KEY, Key, 0);
  }
  #[inline]
  pub fn add_NameKr(&mut self, NameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeSkillExcel::VT_NAMEKR, NameKr);
  }
  #[inline]
  pub fn add_DescriptionKr(&mut self, DescriptionKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeSkillExcel::VT_DESCRIPTIONKR, DescriptionKr);
  }
  #[inline]
  pub fn add_SkillInvokeLocalizeKr(&mut self, SkillInvokeLocalizeKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeSkillExcel::VT_SKILLINVOKELOCALIZEKR, SkillInvokeLocalizeKr);
  }
  #[inline]
  pub fn add_NameJp(&mut self, NameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeSkillExcel::VT_NAMEJP, NameJp);
  }
  #[inline]
  pub fn add_DescriptionJp(&mut self, DescriptionJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeSkillExcel::VT_DESCRIPTIONJP, DescriptionJp);
  }
  #[inline]
  pub fn add_SkillInvokeLocalizeJp(&mut self, SkillInvokeLocalizeJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeSkillExcel::VT_SKILLINVOKELOCALIZEJP, SkillInvokeLocalizeJp);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeSkillExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeSkillExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeSkillExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeSkillExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeSkillExcel");
      ds.field("Key", &self.Key());
      ds.field("NameKr", &self.NameKr());
      ds.field("DescriptionKr", &self.DescriptionKr());
      ds.field("SkillInvokeLocalizeKr", &self.SkillInvokeLocalizeKr());
      ds.field("NameJp", &self.NameJp());
      ds.field("DescriptionJp", &self.DescriptionJp());
      ds.field("SkillInvokeLocalizeJp", &self.SkillInvokeLocalizeJp());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LocalizeSkillExcelT {
  pub Key: u32,
  pub NameKr: Option<String>,
  pub DescriptionKr: Option<String>,
  pub SkillInvokeLocalizeKr: Option<String>,
  pub NameJp: Option<String>,
  pub DescriptionJp: Option<String>,
  pub SkillInvokeLocalizeJp: Option<String>,
}
impl Default for LocalizeSkillExcelT {
  fn default() -> Self {
    Self {
      Key: 0,
      NameKr: None,
      DescriptionKr: None,
      SkillInvokeLocalizeKr: None,
      NameJp: None,
      DescriptionJp: None,
      SkillInvokeLocalizeJp: None,
    }
  }
}
impl LocalizeSkillExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LocalizeSkillExcel<'b>> {
    let Key = self.Key;
    let NameKr = self.NameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DescriptionKr = self.DescriptionKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SkillInvokeLocalizeKr = self.SkillInvokeLocalizeKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NameJp = self.NameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DescriptionJp = self.DescriptionJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SkillInvokeLocalizeJp = self.SkillInvokeLocalizeJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LocalizeSkillExcel::create(_fbb, &LocalizeSkillExcelArgs{
      Key,
      NameKr,
      DescriptionKr,
      SkillInvokeLocalizeKr,
      NameJp,
      DescriptionJp,
      SkillInvokeLocalizeJp,
    })
  }
}
