// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopFreeRecruitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopFreeRecruitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopFreeRecruitExcel<'a> {
  type Inner = ShopFreeRecruitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopFreeRecruitExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_FREERECRUITPERIODFROM: flatbuffers::VOffsetT = 6;
  pub const VT_FREERECRUITPERIODTO: flatbuffers::VOffsetT = 8;
  pub const VT_FREERECRUITTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_FREERECRUITDECORATIONIMAGEPATH: flatbuffers::VOffsetT = 12;
  pub const VT_TENRECRUITCOUNTONLY: flatbuffers::VOffsetT = 14;
  pub const VT_SHOPRECRUITID: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopFreeRecruitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopFreeRecruitExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShopFreeRecruitExcel<'bldr>> {
    let mut builder = ShopFreeRecruitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShopFreeRecruit");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ShopRecruitId {
        builder.add_ShopRecruitId(x);
      }
      if let Some(x) = args.FreeRecruitDecorationImagePath {
        builder.add_FreeRecruitDecorationImagePath(x);
      }
      let x = args.FreeRecruitType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_FreeRecruitType(x);
      if let Some(x) = args.FreeRecruitPeriodTo {
        builder.add_FreeRecruitPeriodTo(x);
      }
      if let Some(x) = args.FreeRecruitPeriodFrom {
        builder.add_FreeRecruitPeriodFrom(x);
      }
      builder.add_TenRecruitCountOnly(args.TenRecruitCountOnly);
    builder.finish()
  }

  pub fn unpack(&self) -> ShopFreeRecruitExcelT {
    let key = table_encryption_service::create_key(b"ShopFreeRecruit");
      let Id = self.Id();
    let FreeRecruitPeriodFrom = self.FreeRecruitPeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FreeRecruitPeriodTo = self.FreeRecruitPeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let FreeRecruitType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.FreeRecruitType(), &key)
      } else {
        self.FreeRecruitType()
      };
    let FreeRecruitDecorationImagePath = self.FreeRecruitDecorationImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let TenRecruitCountOnly = self.TenRecruitCountOnly();
    let ShopRecruitId = self.ShopRecruitId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ShopFreeRecruitExcelT {
      Id,
      FreeRecruitPeriodFrom,
      FreeRecruitPeriodTo,
      FreeRecruitType,
      FreeRecruitDecorationImagePath,
      TenRecruitCountOnly,
      ShopRecruitId,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopFreeRecruitExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FreeRecruitPeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopFreeRecruitExcel::VT_FREERECRUITPERIODFROM, None)}
  }
  #[inline]
  pub fn FreeRecruitPeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopFreeRecruitExcel::VT_FREERECRUITPERIODTO, None)}
  }
  #[inline]
  pub fn FreeRecruitType(&self) -> ShopFreeRecruitType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopFreeRecruitType>(ShopFreeRecruitExcel::VT_FREERECRUITTYPE, Some(ShopFreeRecruitType::None)).unwrap()}
  }
  #[inline]
  pub fn FreeRecruitDecorationImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopFreeRecruitExcel::VT_FREERECRUITDECORATIONIMAGEPATH, None)}
  }
  #[inline]
  pub fn TenRecruitCountOnly(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopFreeRecruitExcel::VT_TENRECRUITCOUNTONLY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ShopRecruitId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ShopFreeRecruitExcel::VT_SHOPRECRUITID, None)}
  }
}

impl flatbuffers::Verifiable for ShopFreeRecruitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FreeRecruitPeriodFrom", Self::VT_FREERECRUITPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FreeRecruitPeriodTo", Self::VT_FREERECRUITPERIODTO, false)?
     .visit_field::<ShopFreeRecruitType>("FreeRecruitType", Self::VT_FREERECRUITTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FreeRecruitDecorationImagePath", Self::VT_FREERECRUITDECORATIONIMAGEPATH, false)?
     .visit_field::<bool>("TenRecruitCountOnly", Self::VT_TENRECRUITCOUNTONLY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ShopRecruitId", Self::VT_SHOPRECRUITID, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopFreeRecruitExcelArgs<'a> {
    pub Id: i64,
    pub FreeRecruitPeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FreeRecruitPeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FreeRecruitType: ShopFreeRecruitType,
    pub FreeRecruitDecorationImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TenRecruitCountOnly: bool,
    pub ShopRecruitId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ShopFreeRecruitExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShopFreeRecruitExcelArgs {
      Id: 0,
      FreeRecruitPeriodFrom: None,
      FreeRecruitPeriodTo: None,
      FreeRecruitType: ShopFreeRecruitType::None,
      FreeRecruitDecorationImagePath: None,
      TenRecruitCountOnly: false,
      ShopRecruitId: None,
    }
  }
}

impl Serialize for ShopFreeRecruitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopFreeRecruitExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.FreeRecruitPeriodFrom() {
        s.serialize_field("FreeRecruitPeriodFrom", &f)?;
      } else {
        s.skip_field("FreeRecruitPeriodFrom")?;
      }
      if let Some(f) = self.FreeRecruitPeriodTo() {
        s.serialize_field("FreeRecruitPeriodTo", &f)?;
      } else {
        s.skip_field("FreeRecruitPeriodTo")?;
      }
      s.serialize_field("FreeRecruitType", &self.FreeRecruitType())?;
      if let Some(f) = self.FreeRecruitDecorationImagePath() {
        s.serialize_field("FreeRecruitDecorationImagePath", &f)?;
      } else {
        s.skip_field("FreeRecruitDecorationImagePath")?;
      }
      s.serialize_field("TenRecruitCountOnly", &self.TenRecruitCountOnly())?;
      if let Some(f) = self.ShopRecruitId() {
        s.serialize_field("ShopRecruitId", &f)?;
      } else {
        s.skip_field("ShopRecruitId")?;
      }
    s.end()
  }
}

pub struct ShopFreeRecruitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopFreeRecruitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ShopFreeRecruitExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_FreeRecruitPeriodFrom(&mut self, FreeRecruitPeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopFreeRecruitExcel::VT_FREERECRUITPERIODFROM, FreeRecruitPeriodFrom);
  }
  #[inline]
  pub fn add_FreeRecruitPeriodTo(&mut self, FreeRecruitPeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopFreeRecruitExcel::VT_FREERECRUITPERIODTO, FreeRecruitPeriodTo);
  }
  #[inline]
  pub fn add_FreeRecruitType(&mut self, FreeRecruitType: ShopFreeRecruitType) {
    self.fbb_.push_slot::<ShopFreeRecruitType>(ShopFreeRecruitExcel::VT_FREERECRUITTYPE, FreeRecruitType, ShopFreeRecruitType::None);
  }
  #[inline]
  pub fn add_FreeRecruitDecorationImagePath(&mut self, FreeRecruitDecorationImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopFreeRecruitExcel::VT_FREERECRUITDECORATIONIMAGEPATH, FreeRecruitDecorationImagePath);
  }
  #[inline]
  pub fn add_TenRecruitCountOnly(&mut self, TenRecruitCountOnly: bool) {
    self.fbb_.push_slot::<bool>(ShopFreeRecruitExcel::VT_TENRECRUITCOUNTONLY, TenRecruitCountOnly, false);
  }
  #[inline]
  pub fn add_ShopRecruitId(&mut self, ShopRecruitId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopFreeRecruitExcel::VT_SHOPRECRUITID, ShopRecruitId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopFreeRecruitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopFreeRecruitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopFreeRecruitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopFreeRecruitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopFreeRecruitExcel");
      ds.field("Id", &self.Id());
      ds.field("FreeRecruitPeriodFrom", &self.FreeRecruitPeriodFrom());
      ds.field("FreeRecruitPeriodTo", &self.FreeRecruitPeriodTo());
      ds.field("FreeRecruitType", &self.FreeRecruitType());
      ds.field("FreeRecruitDecorationImagePath", &self.FreeRecruitDecorationImagePath());
      ds.field("TenRecruitCountOnly", &self.TenRecruitCountOnly());
      ds.field("ShopRecruitId", &self.ShopRecruitId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopFreeRecruitExcelT {
  pub Id: i64,
  pub FreeRecruitPeriodFrom: Option<String>,
  pub FreeRecruitPeriodTo: Option<String>,
  pub FreeRecruitType: ShopFreeRecruitType,
  pub FreeRecruitDecorationImagePath: Option<String>,
  pub TenRecruitCountOnly: bool,
  pub ShopRecruitId: Option<Vec<i64>>,
}
impl Default for ShopFreeRecruitExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      FreeRecruitPeriodFrom: None,
      FreeRecruitPeriodTo: None,
      FreeRecruitType: ShopFreeRecruitType::None,
      FreeRecruitDecorationImagePath: None,
      TenRecruitCountOnly: false,
      ShopRecruitId: None,
    }
  }
}
impl ShopFreeRecruitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopFreeRecruitExcel<'b>> {
    let Id = self.Id;
    let FreeRecruitPeriodFrom = self.FreeRecruitPeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FreeRecruitPeriodTo = self.FreeRecruitPeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FreeRecruitType = self.FreeRecruitType;
    let FreeRecruitDecorationImagePath = self.FreeRecruitDecorationImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TenRecruitCountOnly = self.TenRecruitCountOnly;
    let ShopRecruitId = self.ShopRecruitId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ShopFreeRecruitExcel::create(_fbb, &ShopFreeRecruitExcelArgs{
      Id,
      FreeRecruitPeriodFrom,
      FreeRecruitPeriodTo,
      FreeRecruitType,
      FreeRecruitDecorationImagePath,
      TenRecruitCountOnly,
      ShopRecruitId,
    })
  }
}
