// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstMiniGameShootingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstMiniGameShootingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstMiniGameShootingExcel<'a> {
  type Inner = ConstMiniGameShootingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstMiniGameShootingExcel<'a> {
  pub const VT_NORMALSTAGEID: flatbuffers::VOffsetT = 4;
  pub const VT_NORMALSECTIONCOUNT: flatbuffers::VOffsetT = 6;
  pub const VT_HARDSTAGEID: flatbuffers::VOffsetT = 8;
  pub const VT_HARDSECTIONCOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_FREESTAGEID: flatbuffers::VOffsetT = 12;
  pub const VT_FREESECTIONCOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_PLAYERCHARACTERID: flatbuffers::VOffsetT = 16;
  pub const VT_HIDDENPLAYERCHARACTERID: flatbuffers::VOffsetT = 18;
  pub const VT_CAMERASMOOTHTIME: flatbuffers::VOffsetT = 20;
  pub const VT_SPAWNEFFECTPATH: flatbuffers::VOffsetT = 22;
  pub const VT_WAITTIMEAFTERSPAWN: flatbuffers::VOffsetT = 24;
  pub const VT_FREEGEARINTERVAL: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstMiniGameShootingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstMiniGameShootingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConstMiniGameShootingExcel<'bldr>> {
    let mut builder = ConstMiniGameShootingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstMiniGameShooting");
      let x = args.HiddenPlayerCharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HiddenPlayerCharacterId(x);
      let x = args.FreeStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FreeStageId(x);
      let x = args.HardStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_HardStageId(x);
      let x = args.NormalStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NormalStageId(x);
      let x = args.FreeGearInterval;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FreeGearInterval(x);
      let x = args.WaitTimeAfterSpawn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_WaitTimeAfterSpawn(x);
      if let Some(x) = args.SpawnEffectPath {
        builder.add_SpawnEffectPath(x);
      }
      let x = args.CameraSmoothTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraSmoothTime(x);
      if let Some(x) = args.playerCharacterId {
        builder.add_playerCharacterId(x);
      }
      let x = args.FreeSectionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FreeSectionCount(x);
      let x = args.HardSectionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_HardSectionCount(x);
      let x = args.NormalSectionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NormalSectionCount(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConstMiniGameShootingExcelT {
    let key = table_encryption_service::create_key(b"ConstMiniGameShooting");
      let NormalStageId = self.NormalStageId();
      let NormalSectionCount = self.NormalSectionCount();
      let HardStageId = self.HardStageId();
      let HardSectionCount = self.HardSectionCount();
      let FreeStageId = self.FreeStageId();
      let FreeSectionCount = self.FreeSectionCount();
    let playerCharacterId = self.playerCharacterId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let HiddenPlayerCharacterId = self.HiddenPlayerCharacterId();
      let CameraSmoothTime = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraSmoothTime(), &key)
      } else {
        self.CameraSmoothTime()
      };
    let SpawnEffectPath = self.SpawnEffectPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let WaitTimeAfterSpawn = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.WaitTimeAfterSpawn(), &key)
      } else {
        self.WaitTimeAfterSpawn()
      };
      let FreeGearInterval = self.FreeGearInterval();
    ConstMiniGameShootingExcelT {
      NormalStageId,
      NormalSectionCount,
      HardStageId,
      HardSectionCount,
      FreeStageId,
      FreeSectionCount,
      playerCharacterId,
      HiddenPlayerCharacterId,
      CameraSmoothTime,
      SpawnEffectPath,
      WaitTimeAfterSpawn,
      FreeGearInterval,
    }
  }

  #[inline]
  pub fn NormalStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstMiniGameShootingExcel::VT_NORMALSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NormalSectionCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMiniGameShootingExcel::VT_NORMALSECTIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HardStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstMiniGameShootingExcel::VT_HARDSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HardSectionCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMiniGameShootingExcel::VT_HARDSECTIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FreeStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstMiniGameShootingExcel::VT_FREESTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FreeSectionCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMiniGameShootingExcel::VT_FREESECTIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn playerCharacterId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ConstMiniGameShootingExcel::VT_PLAYERCHARACTERID, None)}
  }
  #[inline]
  pub fn HiddenPlayerCharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstMiniGameShootingExcel::VT_HIDDENPLAYERCHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CameraSmoothTime(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMiniGameShootingExcel::VT_CAMERASMOOTHTIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn SpawnEffectPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMiniGameShootingExcel::VT_SPAWNEFFECTPATH, None)}
  }
  #[inline]
  pub fn WaitTimeAfterSpawn(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMiniGameShootingExcel::VT_WAITTIMEAFTERSPAWN, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn FreeGearInterval(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMiniGameShootingExcel::VT_FREEGEARINTERVAL, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConstMiniGameShootingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("NormalStageId", Self::VT_NORMALSTAGEID, false)?
     .visit_field::<i32>("NormalSectionCount", Self::VT_NORMALSECTIONCOUNT, false)?
     .visit_field::<i64>("HardStageId", Self::VT_HARDSTAGEID, false)?
     .visit_field::<i32>("HardSectionCount", Self::VT_HARDSECTIONCOUNT, false)?
     .visit_field::<i64>("FreeStageId", Self::VT_FREESTAGEID, false)?
     .visit_field::<i32>("FreeSectionCount", Self::VT_FREESECTIONCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("playerCharacterId", Self::VT_PLAYERCHARACTERID, false)?
     .visit_field::<i64>("HiddenPlayerCharacterId", Self::VT_HIDDENPLAYERCHARACTERID, false)?
     .visit_field::<f32>("CameraSmoothTime", Self::VT_CAMERASMOOTHTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpawnEffectPath", Self::VT_SPAWNEFFECTPATH, false)?
     .visit_field::<f32>("WaitTimeAfterSpawn", Self::VT_WAITTIMEAFTERSPAWN, false)?
     .visit_field::<i32>("FreeGearInterval", Self::VT_FREEGEARINTERVAL, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstMiniGameShootingExcelArgs<'a> {
    pub NormalStageId: i64,
    pub NormalSectionCount: i32,
    pub HardStageId: i64,
    pub HardSectionCount: i32,
    pub FreeStageId: i64,
    pub FreeSectionCount: i32,
    pub playerCharacterId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub HiddenPlayerCharacterId: i64,
    pub CameraSmoothTime: f32,
    pub SpawnEffectPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WaitTimeAfterSpawn: f32,
    pub FreeGearInterval: i32,
}
impl<'a> Default for ConstMiniGameShootingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConstMiniGameShootingExcelArgs {
      NormalStageId: 0,
      NormalSectionCount: 0,
      HardStageId: 0,
      HardSectionCount: 0,
      FreeStageId: 0,
      FreeSectionCount: 0,
      playerCharacterId: None,
      HiddenPlayerCharacterId: 0,
      CameraSmoothTime: 0.0,
      SpawnEffectPath: None,
      WaitTimeAfterSpawn: 0.0,
      FreeGearInterval: 0,
    }
  }
}

impl Serialize for ConstMiniGameShootingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstMiniGameShootingExcel", 12)?;
      s.serialize_field("NormalStageId", &self.NormalStageId())?;
      s.serialize_field("NormalSectionCount", &self.NormalSectionCount())?;
      s.serialize_field("HardStageId", &self.HardStageId())?;
      s.serialize_field("HardSectionCount", &self.HardSectionCount())?;
      s.serialize_field("FreeStageId", &self.FreeStageId())?;
      s.serialize_field("FreeSectionCount", &self.FreeSectionCount())?;
      if let Some(f) = self.playerCharacterId() {
        s.serialize_field("playerCharacterId", &f)?;
      } else {
        s.skip_field("playerCharacterId")?;
      }
      s.serialize_field("HiddenPlayerCharacterId", &self.HiddenPlayerCharacterId())?;
      s.serialize_field("CameraSmoothTime", &self.CameraSmoothTime())?;
      if let Some(f) = self.SpawnEffectPath() {
        s.serialize_field("SpawnEffectPath", &f)?;
      } else {
        s.skip_field("SpawnEffectPath")?;
      }
      s.serialize_field("WaitTimeAfterSpawn", &self.WaitTimeAfterSpawn())?;
      s.serialize_field("FreeGearInterval", &self.FreeGearInterval())?;
    s.end()
  }
}

pub struct ConstMiniGameShootingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstMiniGameShootingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_NormalStageId(&mut self, NormalStageId: i64) {
    self.fbb_.push_slot::<i64>(ConstMiniGameShootingExcel::VT_NORMALSTAGEID, NormalStageId, 0);
  }
  #[inline]
  pub fn add_NormalSectionCount(&mut self, NormalSectionCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMiniGameShootingExcel::VT_NORMALSECTIONCOUNT, NormalSectionCount, 0);
  }
  #[inline]
  pub fn add_HardStageId(&mut self, HardStageId: i64) {
    self.fbb_.push_slot::<i64>(ConstMiniGameShootingExcel::VT_HARDSTAGEID, HardStageId, 0);
  }
  #[inline]
  pub fn add_HardSectionCount(&mut self, HardSectionCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMiniGameShootingExcel::VT_HARDSECTIONCOUNT, HardSectionCount, 0);
  }
  #[inline]
  pub fn add_FreeStageId(&mut self, FreeStageId: i64) {
    self.fbb_.push_slot::<i64>(ConstMiniGameShootingExcel::VT_FREESTAGEID, FreeStageId, 0);
  }
  #[inline]
  pub fn add_FreeSectionCount(&mut self, FreeSectionCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMiniGameShootingExcel::VT_FREESECTIONCOUNT, FreeSectionCount, 0);
  }
  #[inline]
  pub fn add_playerCharacterId(&mut self, playerCharacterId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMiniGameShootingExcel::VT_PLAYERCHARACTERID, playerCharacterId);
  }
  #[inline]
  pub fn add_HiddenPlayerCharacterId(&mut self, HiddenPlayerCharacterId: i64) {
    self.fbb_.push_slot::<i64>(ConstMiniGameShootingExcel::VT_HIDDENPLAYERCHARACTERID, HiddenPlayerCharacterId, 0);
  }
  #[inline]
  pub fn add_CameraSmoothTime(&mut self, CameraSmoothTime: f32) {
    self.fbb_.push_slot::<f32>(ConstMiniGameShootingExcel::VT_CAMERASMOOTHTIME, CameraSmoothTime, 0.0);
  }
  #[inline]
  pub fn add_SpawnEffectPath(&mut self, SpawnEffectPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMiniGameShootingExcel::VT_SPAWNEFFECTPATH, SpawnEffectPath);
  }
  #[inline]
  pub fn add_WaitTimeAfterSpawn(&mut self, WaitTimeAfterSpawn: f32) {
    self.fbb_.push_slot::<f32>(ConstMiniGameShootingExcel::VT_WAITTIMEAFTERSPAWN, WaitTimeAfterSpawn, 0.0);
  }
  #[inline]
  pub fn add_FreeGearInterval(&mut self, FreeGearInterval: i32) {
    self.fbb_.push_slot::<i32>(ConstMiniGameShootingExcel::VT_FREEGEARINTERVAL, FreeGearInterval, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstMiniGameShootingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstMiniGameShootingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstMiniGameShootingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstMiniGameShootingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstMiniGameShootingExcel");
      ds.field("NormalStageId", &self.NormalStageId());
      ds.field("NormalSectionCount", &self.NormalSectionCount());
      ds.field("HardStageId", &self.HardStageId());
      ds.field("HardSectionCount", &self.HardSectionCount());
      ds.field("FreeStageId", &self.FreeStageId());
      ds.field("FreeSectionCount", &self.FreeSectionCount());
      ds.field("playerCharacterId", &self.playerCharacterId());
      ds.field("HiddenPlayerCharacterId", &self.HiddenPlayerCharacterId());
      ds.field("CameraSmoothTime", &self.CameraSmoothTime());
      ds.field("SpawnEffectPath", &self.SpawnEffectPath());
      ds.field("WaitTimeAfterSpawn", &self.WaitTimeAfterSpawn());
      ds.field("FreeGearInterval", &self.FreeGearInterval());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstMiniGameShootingExcelT {
  pub NormalStageId: i64,
  pub NormalSectionCount: i32,
  pub HardStageId: i64,
  pub HardSectionCount: i32,
  pub FreeStageId: i64,
  pub FreeSectionCount: i32,
  pub playerCharacterId: Option<Vec<i64>>,
  pub HiddenPlayerCharacterId: i64,
  pub CameraSmoothTime: f32,
  pub SpawnEffectPath: Option<String>,
  pub WaitTimeAfterSpawn: f32,
  pub FreeGearInterval: i32,
}
impl Default for ConstMiniGameShootingExcelT {
  fn default() -> Self {
    Self {
      NormalStageId: 0,
      NormalSectionCount: 0,
      HardStageId: 0,
      HardSectionCount: 0,
      FreeStageId: 0,
      FreeSectionCount: 0,
      playerCharacterId: None,
      HiddenPlayerCharacterId: 0,
      CameraSmoothTime: 0.0,
      SpawnEffectPath: None,
      WaitTimeAfterSpawn: 0.0,
      FreeGearInterval: 0,
    }
  }
}
impl ConstMiniGameShootingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstMiniGameShootingExcel<'b>> {
    let NormalStageId = self.NormalStageId;
    let NormalSectionCount = self.NormalSectionCount;
    let HardStageId = self.HardStageId;
    let HardSectionCount = self.HardSectionCount;
    let FreeStageId = self.FreeStageId;
    let FreeSectionCount = self.FreeSectionCount;
    let playerCharacterId = self.playerCharacterId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let HiddenPlayerCharacterId = self.HiddenPlayerCharacterId;
    let CameraSmoothTime = self.CameraSmoothTime;
    let SpawnEffectPath = self.SpawnEffectPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WaitTimeAfterSpawn = self.WaitTimeAfterSpawn;
    let FreeGearInterval = self.FreeGearInterval;
    ConstMiniGameShootingExcel::create(_fbb, &ConstMiniGameShootingExcelArgs{
      NormalStageId,
      NormalSectionCount,
      HardStageId,
      HardSectionCount,
      FreeStageId,
      FreeSectionCount,
      playerCharacterId,
      HiddenPlayerCharacterId,
      CameraSmoothTime,
      SpawnEffectPath,
      WaitTimeAfterSpawn,
      FreeGearInterval,
    })
  }
}
