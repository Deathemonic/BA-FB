// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FavorLevelRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FavorLevelRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FavorLevelRewardExcel<'a> {
  type Inner = FavorLevelRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FavorLevelRewardExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_FAVORLEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_STATTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_STATVALUE: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FavorLevelRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FavorLevelRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FavorLevelRewardExcel<'bldr>> {
    let mut builder = FavorLevelRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FavorLevelReward");
      let x = args.FavorLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FavorLevel(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.RewardAmount {
        builder.add_RewardAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      if let Some(x) = args.StatValue {
        builder.add_StatValue(x);
      }
      if let Some(x) = args.StatType {
        builder.add_StatType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> FavorLevelRewardExcelT {
    let key = table_encryption_service::create_key(b"FavorLevelReward");
      let CharacterId = self.CharacterId();
      let FavorLevel = self.FavorLevel();
    let StatType = self.StatType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StatValue = self.StatValue().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardAmount = self.RewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    FavorLevelRewardExcelT {
      CharacterId,
      FavorLevel,
      StatType,
      StatValue,
      RewardParcelType,
      RewardParcelId,
      RewardAmount,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FavorLevelRewardExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FavorLevelRewardExcel::VT_FAVORLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatType(&self) -> Option<flatbuffers::Vector<'a, EquipmentOptionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, EquipmentOptionType>>>(FavorLevelRewardExcel::VT_STATTYPE, None)}
  }
  #[inline]
  pub fn StatValue(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FavorLevelRewardExcel::VT_STATVALUE, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(FavorLevelRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FavorLevelRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FavorLevelRewardExcel::VT_REWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for FavorLevelRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<i64>("FavorLevel", Self::VT_FAVORLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, EquipmentOptionType>>>("StatType", Self::VT_STATTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StatValue", Self::VT_STATVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardAmount", Self::VT_REWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct FavorLevelRewardExcelArgs<'a> {
    pub CharacterId: i64,
    pub FavorLevel: i64,
    pub StatType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, EquipmentOptionType>>>,
    pub StatValue: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for FavorLevelRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FavorLevelRewardExcelArgs {
      CharacterId: 0,
      FavorLevel: 0,
      StatType: None,
      StatValue: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardAmount: None,
    }
  }
}

impl Serialize for FavorLevelRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FavorLevelRewardExcel", 7)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("FavorLevel", &self.FavorLevel())?;
      if let Some(f) = self.StatType() {
        s.serialize_field("StatType", &f)?;
      } else {
        s.skip_field("StatType")?;
      }
      if let Some(f) = self.StatValue() {
        s.serialize_field("StatValue", &f)?;
      } else {
        s.skip_field("StatValue")?;
      }
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardAmount() {
        s.serialize_field("RewardAmount", &f)?;
      } else {
        s.skip_field("RewardAmount")?;
      }
    s.end()
  }
}

pub struct FavorLevelRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FavorLevelRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(FavorLevelRewardExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_FavorLevel(&mut self, FavorLevel: i64) {
    self.fbb_.push_slot::<i64>(FavorLevelRewardExcel::VT_FAVORLEVEL, FavorLevel, 0);
  }
  #[inline]
  pub fn add_StatType(&mut self, StatType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , EquipmentOptionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FavorLevelRewardExcel::VT_STATTYPE, StatType);
  }
  #[inline]
  pub fn add_StatValue(&mut self, StatValue: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FavorLevelRewardExcel::VT_STATVALUE, StatValue);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FavorLevelRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FavorLevelRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardAmount(&mut self, RewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FavorLevelRewardExcel::VT_REWARDAMOUNT, RewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FavorLevelRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FavorLevelRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FavorLevelRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FavorLevelRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FavorLevelRewardExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("FavorLevel", &self.FavorLevel());
      ds.field("StatType", &self.StatType());
      ds.field("StatValue", &self.StatValue());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardAmount", &self.RewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FavorLevelRewardExcelT {
  pub CharacterId: i64,
  pub FavorLevel: i64,
  pub StatType: Option<Vec<EquipmentOptionType>>,
  pub StatValue: Option<Vec<i64>>,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardAmount: Option<Vec<i64>>,
}
impl Default for FavorLevelRewardExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      FavorLevel: 0,
      StatType: None,
      StatValue: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardAmount: None,
    }
  }
}
impl FavorLevelRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FavorLevelRewardExcel<'b>> {
    let CharacterId = self.CharacterId;
    let FavorLevel = self.FavorLevel;
    let StatType = self.StatType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StatValue = self.StatValue.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardAmount = self.RewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    FavorLevelRewardExcel::create(_fbb, &FavorLevelRewardExcelArgs{
      CharacterId,
      FavorLevel,
      StatType,
      StatValue,
      RewardParcelType,
      RewardParcelId,
      RewardAmount,
    })
  }
}
