// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VoiceCommonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VoiceCommonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VoiceCommonExcel<'a> {
  type Inner = VoiceCommonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VoiceCommonExcel<'a> {
  pub const VT_VOICEEVENT: flatbuffers::VOffsetT = 4;
  pub const VT_RATE: flatbuffers::VOffsetT = 6;
  pub const VT_VOICEHASH: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VoiceCommonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VoiceCommonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<VoiceCommonExcel<'bldr>> {
    let mut builder = VoiceCommonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"VoiceCommon");
      let x = args.Rate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Rate(x);
      if let Some(x) = args.VoiceHash {
        builder.add_VoiceHash(x);
      }
      let x = args.VoiceEvent;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceEvent(x);
    builder.finish()
  }

  pub fn unpack(&self) -> VoiceCommonExcelT {
    let key = table_encryption_service::create_key(b"VoiceCommon");
      let VoiceEvent = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceEvent(), &key)
      } else {
        self.VoiceEvent()
      };
      let Rate = self.Rate();
    let VoiceHash = self.VoiceHash().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
    VoiceCommonExcelT {
      VoiceEvent,
      Rate,
      VoiceHash,
    }
  }

  #[inline]
  pub fn VoiceEvent(&self) -> VoiceEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VoiceEvent>(VoiceCommonExcel::VT_VOICEEVENT, Some(VoiceEvent::OnTSA)).unwrap()}
  }
  #[inline]
  pub fn Rate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(VoiceCommonExcel::VT_RATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VoiceHash(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(VoiceCommonExcel::VT_VOICEHASH, None)}
  }
}

impl flatbuffers::Verifiable for VoiceCommonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<VoiceEvent>("VoiceEvent", Self::VT_VOICEEVENT, false)?
     .visit_field::<i64>("Rate", Self::VT_RATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("VoiceHash", Self::VT_VOICEHASH, false)?
     .finish();
    Ok(())
  }
}
pub struct VoiceCommonExcelArgs<'a> {
    pub VoiceEvent: VoiceEvent,
    pub Rate: i64,
    pub VoiceHash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for VoiceCommonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    VoiceCommonExcelArgs {
      VoiceEvent: VoiceEvent::OnTSA,
      Rate: 0,
      VoiceHash: None,
    }
  }
}

impl Serialize for VoiceCommonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VoiceCommonExcel", 3)?;
      s.serialize_field("VoiceEvent", &self.VoiceEvent())?;
      s.serialize_field("Rate", &self.Rate())?;
      if let Some(f) = self.VoiceHash() {
        s.serialize_field("VoiceHash", &f)?;
      } else {
        s.skip_field("VoiceHash")?;
      }
    s.end()
  }
}

pub struct VoiceCommonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VoiceCommonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_VoiceEvent(&mut self, VoiceEvent: VoiceEvent) {
    self.fbb_.push_slot::<VoiceEvent>(VoiceCommonExcel::VT_VOICEEVENT, VoiceEvent, VoiceEvent::OnTSA);
  }
  #[inline]
  pub fn add_Rate(&mut self, Rate: i64) {
    self.fbb_.push_slot::<i64>(VoiceCommonExcel::VT_RATE, Rate, 0);
  }
  #[inline]
  pub fn add_VoiceHash(&mut self, VoiceHash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VoiceCommonExcel::VT_VOICEHASH, VoiceHash);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VoiceCommonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VoiceCommonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VoiceCommonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VoiceCommonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VoiceCommonExcel");
      ds.field("VoiceEvent", &self.VoiceEvent());
      ds.field("Rate", &self.Rate());
      ds.field("VoiceHash", &self.VoiceHash());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VoiceCommonExcelT {
  pub VoiceEvent: VoiceEvent,
  pub Rate: i64,
  pub VoiceHash: Option<Vec<u32>>,
}
impl Default for VoiceCommonExcelT {
  fn default() -> Self {
    Self {
      VoiceEvent: VoiceEvent::OnTSA,
      Rate: 0,
      VoiceHash: None,
    }
  }
}
impl VoiceCommonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<VoiceCommonExcel<'b>> {
    let VoiceEvent = self.VoiceEvent;
    let Rate = self.Rate;
    let VoiceHash = self.VoiceHash.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    VoiceCommonExcel::create(_fbb, &VoiceCommonExcelArgs{
      VoiceEvent,
      Rate,
      VoiceHash,
    })
  }
}
