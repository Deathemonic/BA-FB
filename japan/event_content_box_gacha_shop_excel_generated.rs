// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentBoxGachaShopExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentBoxGachaShopExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentBoxGachaShopExcel<'a> {
  type Inner = EventContentBoxGachaShopExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentBoxGachaShopExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_GROUPELEMENTAMOUNT: flatbuffers::VOffsetT = 8;
  pub const VT_ROUND: flatbuffers::VOffsetT = 10;
  pub const VT_ISLEGACY: flatbuffers::VOffsetT = 12;
  pub const VT_ISPRIZE: flatbuffers::VOffsetT = 14;
  pub const VT_GOODSID: flatbuffers::VOffsetT = 16;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentBoxGachaShopExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentBoxGachaShopExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentBoxGachaShopExcel<'bldr>> {
    let mut builder = EventContentBoxGachaShopExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentBoxGachaShop");
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.Round;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Round(x);
      let x = args.GroupElementAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupElementAmount(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.GoodsId {
        builder.add_GoodsId(x);
      }
      builder.add_IsPrize(args.IsPrize);
      builder.add_IsLegacy(args.IsLegacy);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentBoxGachaShopExcelT {
    let key = table_encryption_service::create_key(b"EventContentBoxGachaShop");
      let EventContentId = self.EventContentId();
      let GroupId = self.GroupId();
      let GroupElementAmount = self.GroupElementAmount();
      let Round = self.Round();
      let IsLegacy = self.IsLegacy();
      let IsPrize = self.IsPrize();
    let GoodsId = self.GoodsId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let DisplayOrder = self.DisplayOrder();
    EventContentBoxGachaShopExcelT {
      EventContentId,
      GroupId,
      GroupElementAmount,
      Round,
      IsLegacy,
      IsPrize,
      GoodsId,
      DisplayOrder,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaShopExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaShopExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupElementAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaShopExcel::VT_GROUPELEMENTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Round(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaShopExcel::VT_ROUND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsLegacy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentBoxGachaShopExcel::VT_ISLEGACY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsPrize(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentBoxGachaShopExcel::VT_ISPRIZE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn GoodsId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentBoxGachaShopExcel::VT_GOODSID, None)}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaShopExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentBoxGachaShopExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i64>("GroupElementAmount", Self::VT_GROUPELEMENTAMOUNT, false)?
     .visit_field::<i64>("Round", Self::VT_ROUND, false)?
     .visit_field::<bool>("IsLegacy", Self::VT_ISLEGACY, false)?
     .visit_field::<bool>("IsPrize", Self::VT_ISPRIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("GoodsId", Self::VT_GOODSID, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentBoxGachaShopExcelArgs<'a> {
    pub EventContentId: i64,
    pub GroupId: i64,
    pub GroupElementAmount: i64,
    pub Round: i64,
    pub IsLegacy: bool,
    pub IsPrize: bool,
    pub GoodsId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub DisplayOrder: i64,
}
impl<'a> Default for EventContentBoxGachaShopExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentBoxGachaShopExcelArgs {
      EventContentId: 0,
      GroupId: 0,
      GroupElementAmount: 0,
      Round: 0,
      IsLegacy: false,
      IsPrize: false,
      GoodsId: None,
      DisplayOrder: 0,
    }
  }
}

impl Serialize for EventContentBoxGachaShopExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentBoxGachaShopExcel", 8)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("GroupElementAmount", &self.GroupElementAmount())?;
      s.serialize_field("Round", &self.Round())?;
      s.serialize_field("IsLegacy", &self.IsLegacy())?;
      s.serialize_field("IsPrize", &self.IsPrize())?;
      if let Some(f) = self.GoodsId() {
        s.serialize_field("GoodsId", &f)?;
      } else {
        s.skip_field("GoodsId")?;
      }
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
    s.end()
  }
}

pub struct EventContentBoxGachaShopExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentBoxGachaShopExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaShopExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaShopExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_GroupElementAmount(&mut self, GroupElementAmount: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaShopExcel::VT_GROUPELEMENTAMOUNT, GroupElementAmount, 0);
  }
  #[inline]
  pub fn add_Round(&mut self, Round: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaShopExcel::VT_ROUND, Round, 0);
  }
  #[inline]
  pub fn add_IsLegacy(&mut self, IsLegacy: bool) {
    self.fbb_.push_slot::<bool>(EventContentBoxGachaShopExcel::VT_ISLEGACY, IsLegacy, false);
  }
  #[inline]
  pub fn add_IsPrize(&mut self, IsPrize: bool) {
    self.fbb_.push_slot::<bool>(EventContentBoxGachaShopExcel::VT_ISPRIZE, IsPrize, false);
  }
  #[inline]
  pub fn add_GoodsId(&mut self, GoodsId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBoxGachaShopExcel::VT_GOODSID, GoodsId);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaShopExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentBoxGachaShopExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentBoxGachaShopExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentBoxGachaShopExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentBoxGachaShopExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentBoxGachaShopExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("GroupId", &self.GroupId());
      ds.field("GroupElementAmount", &self.GroupElementAmount());
      ds.field("Round", &self.Round());
      ds.field("IsLegacy", &self.IsLegacy());
      ds.field("IsPrize", &self.IsPrize());
      ds.field("GoodsId", &self.GoodsId());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentBoxGachaShopExcelT {
  pub EventContentId: i64,
  pub GroupId: i64,
  pub GroupElementAmount: i64,
  pub Round: i64,
  pub IsLegacy: bool,
  pub IsPrize: bool,
  pub GoodsId: Option<Vec<i64>>,
  pub DisplayOrder: i64,
}
impl Default for EventContentBoxGachaShopExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      GroupId: 0,
      GroupElementAmount: 0,
      Round: 0,
      IsLegacy: false,
      IsPrize: false,
      GoodsId: None,
      DisplayOrder: 0,
    }
  }
}
impl EventContentBoxGachaShopExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentBoxGachaShopExcel<'b>> {
    let EventContentId = self.EventContentId;
    let GroupId = self.GroupId;
    let GroupElementAmount = self.GroupElementAmount;
    let Round = self.Round;
    let IsLegacy = self.IsLegacy;
    let IsPrize = self.IsPrize;
    let GoodsId = self.GoodsId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let DisplayOrder = self.DisplayOrder;
    EventContentBoxGachaShopExcel::create(_fbb, &EventContentBoxGachaShopExcelArgs{
      EventContentId,
      GroupId,
      GroupElementAmount,
      Round,
      IsLegacy,
      IsPrize,
      GoodsId,
      DisplayOrder,
    })
  }
}
