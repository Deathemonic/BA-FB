// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestObjectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestObjectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestObjectExcel<'a> {
  type Inner = ConquestObjectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestObjectExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_CONQUESTOBJECTTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_KEY: flatbuffers::VOffsetT = 10;
  pub const VT_NAME: flatbuffers::VOffsetT = 12;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 14;
  pub const VT_CONQUESTREWARDPARCELTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_CONQUESTREWARDID: flatbuffers::VOffsetT = 18;
  pub const VT_CONQUESTREWARDAMOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_DISPOSABLE: flatbuffers::VOffsetT = 22;
  pub const VT_STEPINDEX: flatbuffers::VOffsetT = 24;
  pub const VT_STEPOBJECTCOUNT: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestObjectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestObjectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestObjectExcel<'bldr>> {
    let mut builder = ConquestObjectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestObject");
      let x = args.ConquestRewardID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConquestRewardID(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.StepObjectCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StepObjectCount(x);
      let x = args.StepIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StepIndex(x);
      let x = args.ConquestRewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ConquestRewardAmount(x);
      let x = args.ConquestRewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConquestRewardParcelType(x);
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      let x = args.Key;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Key(x);
      let x = args.ConquestObjectType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConquestObjectType(x);
      builder.add_Disposable(args.Disposable);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestObjectExcelT {
    let key = table_encryption_service::create_key(b"ConquestObject");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let ConquestObjectType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConquestObjectType(), &key)
      } else {
        self.ConquestObjectType()
      };
      let Key = self.Key();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ConquestRewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConquestRewardParcelType(), &key)
      } else {
        self.ConquestRewardParcelType()
      };
      let ConquestRewardID = self.ConquestRewardID();
      let ConquestRewardAmount = self.ConquestRewardAmount();
      let Disposable = self.Disposable();
      let StepIndex = self.StepIndex();
      let StepObjectCount = self.StepObjectCount();
    ConquestObjectExcelT {
      Id,
      EventContentId,
      ConquestObjectType,
      Key,
      Name,
      PrefabName,
      ConquestRewardParcelType,
      ConquestRewardID,
      ConquestRewardAmount,
      Disposable,
      StepIndex,
      StepObjectCount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestObjectExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestObjectExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestObjectType(&self) -> ConquestObjectType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConquestObjectType>(ConquestObjectExcel::VT_CONQUESTOBJECTTYPE, Some(ConquestObjectType::None)).unwrap()}
  }
  #[inline]
  pub fn Key(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ConquestObjectExcel::VT_KEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestObjectExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestObjectExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn ConquestRewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestObjectExcel::VT_CONQUESTREWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ConquestRewardID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestObjectExcel::VT_CONQUESTREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestRewardAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestObjectExcel::VT_CONQUESTREWARDAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Disposable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestObjectExcel::VT_DISPOSABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn StepIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestObjectExcel::VT_STEPINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StepObjectCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestObjectExcel::VT_STEPOBJECTCOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestObjectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<ConquestObjectType>("ConquestObjectType", Self::VT_CONQUESTOBJECTTYPE, false)?
     .visit_field::<u32>("Key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<ParcelType>("ConquestRewardParcelType", Self::VT_CONQUESTREWARDPARCELTYPE, false)?
     .visit_field::<i64>("ConquestRewardID", Self::VT_CONQUESTREWARDID, false)?
     .visit_field::<i32>("ConquestRewardAmount", Self::VT_CONQUESTREWARDAMOUNT, false)?
     .visit_field::<bool>("Disposable", Self::VT_DISPOSABLE, false)?
     .visit_field::<i32>("StepIndex", Self::VT_STEPINDEX, false)?
     .visit_field::<i32>("StepObjectCount", Self::VT_STEPOBJECTCOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestObjectExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub ConquestObjectType: ConquestObjectType,
    pub Key: u32,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ConquestRewardParcelType: ParcelType,
    pub ConquestRewardID: i64,
    pub ConquestRewardAmount: i32,
    pub Disposable: bool,
    pub StepIndex: i32,
    pub StepObjectCount: i32,
}
impl<'a> Default for ConquestObjectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestObjectExcelArgs {
      Id: 0,
      EventContentId: 0,
      ConquestObjectType: ConquestObjectType::None,
      Key: 0,
      Name: None,
      PrefabName: None,
      ConquestRewardParcelType: ParcelType::None,
      ConquestRewardID: 0,
      ConquestRewardAmount: 0,
      Disposable: false,
      StepIndex: 0,
      StepObjectCount: 0,
    }
  }
}

impl Serialize for ConquestObjectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestObjectExcel", 12)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("ConquestObjectType", &self.ConquestObjectType())?;
      s.serialize_field("Key", &self.Key())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      s.serialize_field("ConquestRewardParcelType", &self.ConquestRewardParcelType())?;
      s.serialize_field("ConquestRewardID", &self.ConquestRewardID())?;
      s.serialize_field("ConquestRewardAmount", &self.ConquestRewardAmount())?;
      s.serialize_field("Disposable", &self.Disposable())?;
      s.serialize_field("StepIndex", &self.StepIndex())?;
      s.serialize_field("StepObjectCount", &self.StepObjectCount())?;
    s.end()
  }
}

pub struct ConquestObjectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestObjectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ConquestObjectExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestObjectExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_ConquestObjectType(&mut self, ConquestObjectType: ConquestObjectType) {
    self.fbb_.push_slot::<ConquestObjectType>(ConquestObjectExcel::VT_CONQUESTOBJECTTYPE, ConquestObjectType, ConquestObjectType::None);
  }
  #[inline]
  pub fn add_Key(&mut self, Key: u32) {
    self.fbb_.push_slot::<u32>(ConquestObjectExcel::VT_KEY, Key, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestObjectExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestObjectExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_ConquestRewardParcelType(&mut self, ConquestRewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestObjectExcel::VT_CONQUESTREWARDPARCELTYPE, ConquestRewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ConquestRewardID(&mut self, ConquestRewardID: i64) {
    self.fbb_.push_slot::<i64>(ConquestObjectExcel::VT_CONQUESTREWARDID, ConquestRewardID, 0);
  }
  #[inline]
  pub fn add_ConquestRewardAmount(&mut self, ConquestRewardAmount: i32) {
    self.fbb_.push_slot::<i32>(ConquestObjectExcel::VT_CONQUESTREWARDAMOUNT, ConquestRewardAmount, 0);
  }
  #[inline]
  pub fn add_Disposable(&mut self, Disposable: bool) {
    self.fbb_.push_slot::<bool>(ConquestObjectExcel::VT_DISPOSABLE, Disposable, false);
  }
  #[inline]
  pub fn add_StepIndex(&mut self, StepIndex: i32) {
    self.fbb_.push_slot::<i32>(ConquestObjectExcel::VT_STEPINDEX, StepIndex, 0);
  }
  #[inline]
  pub fn add_StepObjectCount(&mut self, StepObjectCount: i32) {
    self.fbb_.push_slot::<i32>(ConquestObjectExcel::VT_STEPOBJECTCOUNT, StepObjectCount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestObjectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestObjectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestObjectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestObjectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestObjectExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("ConquestObjectType", &self.ConquestObjectType());
      ds.field("Key", &self.Key());
      ds.field("Name", &self.Name());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("ConquestRewardParcelType", &self.ConquestRewardParcelType());
      ds.field("ConquestRewardID", &self.ConquestRewardID());
      ds.field("ConquestRewardAmount", &self.ConquestRewardAmount());
      ds.field("Disposable", &self.Disposable());
      ds.field("StepIndex", &self.StepIndex());
      ds.field("StepObjectCount", &self.StepObjectCount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestObjectExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub ConquestObjectType: ConquestObjectType,
  pub Key: u32,
  pub Name: Option<String>,
  pub PrefabName: Option<String>,
  pub ConquestRewardParcelType: ParcelType,
  pub ConquestRewardID: i64,
  pub ConquestRewardAmount: i32,
  pub Disposable: bool,
  pub StepIndex: i32,
  pub StepObjectCount: i32,
}
impl Default for ConquestObjectExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      ConquestObjectType: ConquestObjectType::None,
      Key: 0,
      Name: None,
      PrefabName: None,
      ConquestRewardParcelType: ParcelType::None,
      ConquestRewardID: 0,
      ConquestRewardAmount: 0,
      Disposable: false,
      StepIndex: 0,
      StepObjectCount: 0,
    }
  }
}
impl ConquestObjectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestObjectExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let ConquestObjectType = self.ConquestObjectType;
    let Key = self.Key;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ConquestRewardParcelType = self.ConquestRewardParcelType;
    let ConquestRewardID = self.ConquestRewardID;
    let ConquestRewardAmount = self.ConquestRewardAmount;
    let Disposable = self.Disposable;
    let StepIndex = self.StepIndex;
    let StepObjectCount = self.StepObjectCount;
    ConquestObjectExcel::create(_fbb, &ConquestObjectExcelArgs{
      Id,
      EventContentId,
      ConquestObjectType,
      Key,
      Name,
      PrefabName,
      ConquestRewardParcelType,
      ConquestRewardID,
      ConquestRewardAmount,
      Disposable,
      StepIndex,
      StepObjectCount,
    })
  }
}
