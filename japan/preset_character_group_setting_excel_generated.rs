// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PresetCharacterGroupSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PresetCharacterGroupSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PresetCharacterGroupSettingExcel<'a> {
  type Inner = PresetCharacterGroupSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PresetCharacterGroupSettingExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_ARENASIMULATORFIXED: flatbuffers::VOffsetT = 6;
  pub const VT_PRESETTYPE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PresetCharacterGroupSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PresetCharacterGroupSettingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<PresetCharacterGroupSettingExcel<'bldr>> {
    let mut builder = PresetCharacterGroupSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"PresetCharacterGroupSetting");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.PresetType {
        builder.add_PresetType(x);
      }
      builder.add_ArenaSimulatorFixed(args.ArenaSimulatorFixed);
    builder.finish()
  }

  pub fn unpack(&self) -> PresetCharacterGroupSettingExcelT {
    let key = table_encryption_service::create_key(b"PresetCharacterGroupSetting");
      let CharacterId = self.CharacterId();
      let ArenaSimulatorFixed = self.ArenaSimulatorFixed();
    let PresetType = self.PresetType().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    PresetCharacterGroupSettingExcelT {
      CharacterId,
      ArenaSimulatorFixed,
      PresetType,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PresetCharacterGroupSettingExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ArenaSimulatorFixed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PresetCharacterGroupSettingExcel::VT_ARENASIMULATORFIXED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn PresetType(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PresetCharacterGroupSettingExcel::VT_PRESETTYPE, None)}
  }
}

impl flatbuffers::Verifiable for PresetCharacterGroupSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<bool>("ArenaSimulatorFixed", Self::VT_ARENASIMULATORFIXED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("PresetType", Self::VT_PRESETTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct PresetCharacterGroupSettingExcelArgs<'a> {
    pub CharacterId: i64,
    pub ArenaSimulatorFixed: bool,
    pub PresetType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for PresetCharacterGroupSettingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    PresetCharacterGroupSettingExcelArgs {
      CharacterId: 0,
      ArenaSimulatorFixed: false,
      PresetType: None,
    }
  }
}

impl Serialize for PresetCharacterGroupSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PresetCharacterGroupSettingExcel", 3)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("ArenaSimulatorFixed", &self.ArenaSimulatorFixed())?;
      if let Some(f) = self.PresetType() {
        s.serialize_field("PresetType", &f)?;
      } else {
        s.skip_field("PresetType")?;
      }
    s.end()
  }
}

pub struct PresetCharacterGroupSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PresetCharacterGroupSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(PresetCharacterGroupSettingExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_ArenaSimulatorFixed(&mut self, ArenaSimulatorFixed: bool) {
    self.fbb_.push_slot::<bool>(PresetCharacterGroupSettingExcel::VT_ARENASIMULATORFIXED, ArenaSimulatorFixed, false);
  }
  #[inline]
  pub fn add_PresetType(&mut self, PresetType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PresetCharacterGroupSettingExcel::VT_PRESETTYPE, PresetType);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PresetCharacterGroupSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PresetCharacterGroupSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PresetCharacterGroupSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PresetCharacterGroupSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PresetCharacterGroupSettingExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("ArenaSimulatorFixed", &self.ArenaSimulatorFixed());
      ds.field("PresetType", &self.PresetType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PresetCharacterGroupSettingExcelT {
  pub CharacterId: i64,
  pub ArenaSimulatorFixed: bool,
  pub PresetType: Option<Vec<String>>,
}
impl Default for PresetCharacterGroupSettingExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      ArenaSimulatorFixed: false,
      PresetType: None,
    }
  }
}
impl PresetCharacterGroupSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PresetCharacterGroupSettingExcel<'b>> {
    let CharacterId = self.CharacterId;
    let ArenaSimulatorFixed = self.ArenaSimulatorFixed;
    let PresetType = self.PresetType.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    PresetCharacterGroupSettingExcel::create(_fbb, &PresetCharacterGroupSettingExcelArgs{
      CharacterId,
      ArenaSimulatorFixed,
      PresetType,
    })
  }
}
