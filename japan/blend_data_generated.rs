// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BlendDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlendData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlendData<'a> {
  type Inner = BlendData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BlendData<'a> {
  pub const VT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_INFOLIST: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BlendData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BlendDataArgs<'args>
  ) -> flatbuffers::WIPOffset<BlendData<'bldr>> {
    let mut builder = BlendDataBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Blen");
      if let Some(x) = args.InfoList {
        builder.add_InfoList(x);
      }
      let x = args.Type;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Type(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BlendDataT {
    let key = table_encryption_service::create_key(b"Blen");
      let Type = self.Type();
    let InfoList = self.InfoList().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    BlendDataT {
      Type,
      InfoList,
    }
  }

  #[inline]
  pub fn Type(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BlendData::VT_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InfoList(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlendInfo<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlendInfo>>>>(BlendData::VT_INFOLIST, None)}
  }
}

impl flatbuffers::Verifiable for BlendData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("Type", Self::VT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BlendInfo>>>>("InfoList", Self::VT_INFOLIST, false)?
     .finish();
    Ok(())
  }
}
pub struct BlendDataArgs<'a> {
    pub Type: i32,
    pub InfoList: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlendInfo<'a>>>>>,
}
impl<'a> Default for BlendDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    BlendDataArgs {
      Type: 0,
      InfoList: None,
    }
  }
}

impl Serialize for BlendData<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BlendData", 2)?;
      s.serialize_field("Type", &self.Type())?;
      if let Some(f) = self.InfoList() {
        s.serialize_field("InfoList", &f)?;
      } else {
        s.skip_field("InfoList")?;
      }
    s.end()
  }
}

pub struct BlendDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlendDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Type(&mut self, Type: i32) {
    self.fbb_.push_slot::<i32>(BlendData::VT_TYPE, Type, 0);
  }
  #[inline]
  pub fn add_InfoList(&mut self, InfoList: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BlendInfo<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BlendData::VT_INFOLIST, InfoList);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlendDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BlendDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BlendData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BlendData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BlendData");
      ds.field("Type", &self.Type());
      ds.field("InfoList", &self.InfoList());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BlendDataT {
  pub Type: i32,
  pub InfoList: Option<Vec<BlendInfoT>>,
}
impl Default for BlendDataT {
  fn default() -> Self {
    Self {
      Type: 0,
      InfoList: None,
    }
  }
}
impl BlendDataT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BlendData<'b>> {
    let Type = self.Type;
    let InfoList = self.InfoList.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    BlendData::create(_fbb, &BlendDataArgs{
      Type,
      InfoList,
    })
  }
}
