// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MoveEndOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MoveEnd<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MoveEnd<'a> {
  type Inner = MoveEnd<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MoveEnd<'a> {
  pub const VT_NORMALOFFSET: flatbuffers::VOffsetT = 4;
  pub const VT_STANDOFFSET: flatbuffers::VOffsetT = 6;
  pub const VT_KNEELOFFSET: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MoveEnd { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MoveEndArgs<'args>
  ) -> flatbuffers::WIPOffset<MoveEnd<'bldr>> {
    let mut builder = MoveEndBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Mo");
      if let Some(x) = args.KneelOffset {
        builder.add_KneelOffset(x);
      }
      if let Some(x) = args.StandOffset {
        builder.add_StandOffset(x);
      }
      if let Some(x) = args.NormalOffset {
        builder.add_NormalOffset(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MoveEndT {
    let key = table_encryption_service::create_key(b"Mo");
    let NormalOffset = self.NormalOffset().map(|x| {
      Box::new(x.unpack())
    });
    let StandOffset = self.StandOffset().map(|x| {
      Box::new(x.unpack())
    });
    let KneelOffset = self.KneelOffset().map(|x| {
      Box::new(x.unpack())
    });
    MoveEndT {
      NormalOffset,
      StandOffset,
      KneelOffset,
    }
  }

  #[inline]
  pub fn NormalOffset(&self) -> Option<Motion<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Motion>>(MoveEnd::VT_NORMALOFFSET, None)}
  }
  #[inline]
  pub fn StandOffset(&self) -> Option<Motion<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Motion>>(MoveEnd::VT_STANDOFFSET, None)}
  }
  #[inline]
  pub fn KneelOffset(&self) -> Option<Motion<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Motion>>(MoveEnd::VT_KNEELOFFSET, None)}
  }
}

impl flatbuffers::Verifiable for MoveEnd<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<Motion>>("NormalOffset", Self::VT_NORMALOFFSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Motion>>("StandOffset", Self::VT_STANDOFFSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Motion>>("KneelOffset", Self::VT_KNEELOFFSET, false)?
     .finish();
    Ok(())
  }
}
pub struct MoveEndArgs<'a> {
    pub NormalOffset: Option<flatbuffers::WIPOffset<Motion<'a>>>,
    pub StandOffset: Option<flatbuffers::WIPOffset<Motion<'a>>>,
    pub KneelOffset: Option<flatbuffers::WIPOffset<Motion<'a>>>,
}
impl<'a> Default for MoveEndArgs<'a> {
  #[inline]
  fn default() -> Self {
    MoveEndArgs {
      NormalOffset: None,
      StandOffset: None,
      KneelOffset: None,
    }
  }
}

impl Serialize for MoveEnd<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MoveEnd", 3)?;
      if let Some(f) = self.NormalOffset() {
        s.serialize_field("NormalOffset", &f)?;
      } else {
        s.skip_field("NormalOffset")?;
      }
      if let Some(f) = self.StandOffset() {
        s.serialize_field("StandOffset", &f)?;
      } else {
        s.skip_field("StandOffset")?;
      }
      if let Some(f) = self.KneelOffset() {
        s.serialize_field("KneelOffset", &f)?;
      } else {
        s.skip_field("KneelOffset")?;
      }
    s.end()
  }
}

pub struct MoveEndBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MoveEndBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_NormalOffset(&mut self, NormalOffset: flatbuffers::WIPOffset<Motion<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Motion>>(MoveEnd::VT_NORMALOFFSET, NormalOffset);
  }
  #[inline]
  pub fn add_StandOffset(&mut self, StandOffset: flatbuffers::WIPOffset<Motion<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Motion>>(MoveEnd::VT_STANDOFFSET, StandOffset);
  }
  #[inline]
  pub fn add_KneelOffset(&mut self, KneelOffset: flatbuffers::WIPOffset<Motion<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Motion>>(MoveEnd::VT_KNEELOFFSET, KneelOffset);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MoveEndBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MoveEndBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MoveEnd<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MoveEnd<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MoveEnd");
      ds.field("NormalOffset", &self.NormalOffset());
      ds.field("StandOffset", &self.StandOffset());
      ds.field("KneelOffset", &self.KneelOffset());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MoveEndT {
  pub NormalOffset: Option<Box<MotionT>>,
  pub StandOffset: Option<Box<MotionT>>,
  pub KneelOffset: Option<Box<MotionT>>,
}
impl Default for MoveEndT {
  fn default() -> Self {
    Self {
      NormalOffset: None,
      StandOffset: None,
      KneelOffset: None,
    }
  }
}
impl MoveEndT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MoveEnd<'b>> {
    let NormalOffset = self.NormalOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let StandOffset = self.StandOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let KneelOffset = self.KneelOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    MoveEnd::create(_fbb, &MoveEndArgs{
      NormalOffset,
      StandOffset,
      KneelOffset,
    })
  }
}
