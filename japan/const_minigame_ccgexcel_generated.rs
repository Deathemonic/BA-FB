// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstMinigameCCGExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstMinigameCCGExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstMinigameCCGExcel<'a> {
  type Inner = ConstMinigameCCGExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstMinigameCCGExcel<'a> {
  pub const VT_TURNDRAWCOUNT: flatbuffers::VOffsetT = 4;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETRIGHT: flatbuffers::VOffsetT = 6;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETTOP: flatbuffers::VOffsetT = 8;
  pub const VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM: flatbuffers::VOffsetT = 10;
  pub const VT_CONQUESTMAPCENTEROFFSETX: flatbuffers::VOffsetT = 12;
  pub const VT_CONQUESTMAPCENTEROFFSETY: flatbuffers::VOffsetT = 14;
  pub const VT_CAMERAANGLE: flatbuffers::VOffsetT = 16;
  pub const VT_CAMERAZOOMMAX: flatbuffers::VOffsetT = 18;
  pub const VT_CAMERAZOOMMIN: flatbuffers::VOffsetT = 20;
  pub const VT_CAMERAZOOMDEFAULT: flatbuffers::VOffsetT = 22;
  pub const VT_THEMALOADINGPROGRESSTIME: flatbuffers::VOffsetT = 24;
  pub const VT_MAPALLYROTATION: flatbuffers::VOffsetT = 26;
  pub const VT_ANIALLYBATTLEATTACK: flatbuffers::VOffsetT = 28;
  pub const VT_MAXHANDCOUNT: flatbuffers::VOffsetT = 30;
  pub const VT_MAXCOST: flatbuffers::VOffsetT = 32;
  pub const VT_STARTCOST: flatbuffers::VOffsetT = 34;
  pub const VT_TURNCOST: flatbuffers::VOffsetT = 36;
  pub const VT_STRIKERSWAPFRONTCOST: flatbuffers::VOffsetT = 38;
  pub const VT_STRIKERMAXEQUIPCOUNT: flatbuffers::VOffsetT = 40;
  pub const VT_STARTDRAWCOUNT: flatbuffers::VOffsetT = 42;
  pub const VT_CAMPREVIVEHEALTHRATE: flatbuffers::VOffsetT = 44;
  pub const VT_BASEREWARDREROLLPOINT: flatbuffers::VOffsetT = 46;
  pub const VT_SELECTREWARDOPTIONCOUNT: flatbuffers::VOffsetT = 48;
  pub const VT_ALTERNATIVECARDIMAGEPATH: flatbuffers::VOffsetT = 50;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstMinigameCCGExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstMinigameCCGExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConstMinigameCCGExcel<'bldr>> {
    let mut builder = ConstMinigameCCGExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstMinigameCCG");
      if let Some(x) = args.AlternativeCardImagePath {
        builder.add_AlternativeCardImagePath(x);
      }
      let x = args.SelectRewardOptionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SelectRewardOptionCount(x);
      let x = args.BaseRewardRerollPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_BaseRewardRerollPoint(x);
      let x = args.CampReviveHealthRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CampReviveHealthRate(x);
      let x = args.StartDrawCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StartDrawCount(x);
      let x = args.StrikerMaxEquipCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StrikerMaxEquipCount(x);
      let x = args.StrikerSwapFrontCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StrikerSwapFrontCost(x);
      let x = args.TurnCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TurnCost(x);
      let x = args.StartCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StartCost(x);
      let x = args.MaxCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxCost(x);
      let x = args.MaxHandCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxHandCount(x);
      if let Some(x) = args.AniAllyBattleAttack {
        builder.add_AniAllyBattleAttack(x);
      }
      let x = args.MapAllyRotation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_MapAllyRotation(x);
      let x = args.ThemaLoadingProgressTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ThemaLoadingProgressTime(x);
      let x = args.CameraZoomDefault;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomDefault(x);
      let x = args.CameraZoomMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomMin(x);
      let x = args.CameraZoomMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraZoomMax(x);
      let x = args.CameraAngle;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CameraAngle(x);
      let x = args.ConquestMapCenterOffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapCenterOffsetY(x);
      let x = args.ConquestMapCenterOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapCenterOffsetX(x);
      let x = args.ConquestMapBoundaryOffsetBottom;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetBottom(x);
      let x = args.ConquestMapBoundaryOffsetTop;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetTop(x);
      let x = args.ConquestMapBoundaryOffsetRight;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ConquestMapBoundaryOffsetRight(x);
      let x = args.TurnDrawCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TurnDrawCount(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConstMinigameCCGExcelT {
    let key = table_encryption_service::create_key(b"ConstMinigameCCG");
      let TurnDrawCount = self.TurnDrawCount();
      let ConquestMapBoundaryOffsetRight = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetRight(), &key)
      } else {
        self.ConquestMapBoundaryOffsetRight()
      };
      let ConquestMapBoundaryOffsetTop = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetTop(), &key)
      } else {
        self.ConquestMapBoundaryOffsetTop()
      };
      let ConquestMapBoundaryOffsetBottom = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapBoundaryOffsetBottom(), &key)
      } else {
        self.ConquestMapBoundaryOffsetBottom()
      };
      let ConquestMapCenterOffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapCenterOffsetX(), &key)
      } else {
        self.ConquestMapCenterOffsetX()
      };
      let ConquestMapCenterOffsetY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ConquestMapCenterOffsetY(), &key)
      } else {
        self.ConquestMapCenterOffsetY()
      };
      let CameraAngle = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraAngle(), &key)
      } else {
        self.CameraAngle()
      };
      let CameraZoomMax = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomMax(), &key)
      } else {
        self.CameraZoomMax()
      };
      let CameraZoomMin = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomMin(), &key)
      } else {
        self.CameraZoomMin()
      };
      let CameraZoomDefault = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CameraZoomDefault(), &key)
      } else {
        self.CameraZoomDefault()
      };
      let ThemaLoadingProgressTime = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ThemaLoadingProgressTime(), &key)
      } else {
        self.ThemaLoadingProgressTime()
      };
      let MapAllyRotation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.MapAllyRotation(), &key)
      } else {
        self.MapAllyRotation()
      };
    let AniAllyBattleAttack = self.AniAllyBattleAttack().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let MaxHandCount = self.MaxHandCount();
      let MaxCost = self.MaxCost();
      let StartCost = self.StartCost();
      let TurnCost = self.TurnCost();
      let StrikerSwapFrontCost = self.StrikerSwapFrontCost();
      let StrikerMaxEquipCount = self.StrikerMaxEquipCount();
      let StartDrawCount = self.StartDrawCount();
      let CampReviveHealthRate = self.CampReviveHealthRate();
      let BaseRewardRerollPoint = self.BaseRewardRerollPoint();
      let SelectRewardOptionCount = self.SelectRewardOptionCount();
    let AlternativeCardImagePath = self.AlternativeCardImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ConstMinigameCCGExcelT {
      TurnDrawCount,
      ConquestMapBoundaryOffsetRight,
      ConquestMapBoundaryOffsetTop,
      ConquestMapBoundaryOffsetBottom,
      ConquestMapCenterOffsetX,
      ConquestMapCenterOffsetY,
      CameraAngle,
      CameraZoomMax,
      CameraZoomMin,
      CameraZoomDefault,
      ThemaLoadingProgressTime,
      MapAllyRotation,
      AniAllyBattleAttack,
      MaxHandCount,
      MaxCost,
      StartCost,
      TurnCost,
      StrikerSwapFrontCost,
      StrikerMaxEquipCount,
      StartDrawCount,
      CampReviveHealthRate,
      BaseRewardRerollPoint,
      SelectRewardOptionCount,
      AlternativeCardImagePath,
    }
  }

  #[inline]
  pub fn TurnDrawCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_TURNDRAWCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetRight(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetTop(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPBOUNDARYOFFSETTOP, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapBoundaryOffsetBottom(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapCenterOffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPCENTEROFFSETX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapCenterOffsetY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPCENTEROFFSETY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraAngle(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CAMERAANGLE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomMax(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CAMERAZOOMMAX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomMin(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CAMERAZOOMMIN, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CameraZoomDefault(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_CAMERAZOOMDEFAULT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ThemaLoadingProgressTime(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_THEMALOADINGPROGRESSTIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn MapAllyRotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstMinigameCCGExcel::VT_MAPALLYROTATION, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn AniAllyBattleAttack(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameCCGExcel::VT_ANIALLYBATTLEATTACK, None)}
  }
  #[inline]
  pub fn MaxHandCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_MAXHANDCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_MAXCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_STARTCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TurnCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_TURNCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrikerSwapFrontCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_STRIKERSWAPFRONTCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrikerMaxEquipCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_STRIKERMAXEQUIPCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartDrawCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_STARTDRAWCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CampReviveHealthRate(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_CAMPREVIVEHEALTHRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BaseRewardRerollPoint(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_BASEREWARDREROLLPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SelectRewardOptionCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstMinigameCCGExcel::VT_SELECTREWARDOPTIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AlternativeCardImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstMinigameCCGExcel::VT_ALTERNATIVECARDIMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for ConstMinigameCCGExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("TurnDrawCount", Self::VT_TURNDRAWCOUNT, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetRight", Self::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetTop", Self::VT_CONQUESTMAPBOUNDARYOFFSETTOP, false)?
     .visit_field::<f32>("ConquestMapBoundaryOffsetBottom", Self::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, false)?
     .visit_field::<f32>("ConquestMapCenterOffsetX", Self::VT_CONQUESTMAPCENTEROFFSETX, false)?
     .visit_field::<f32>("ConquestMapCenterOffsetY", Self::VT_CONQUESTMAPCENTEROFFSETY, false)?
     .visit_field::<f32>("CameraAngle", Self::VT_CAMERAANGLE, false)?
     .visit_field::<f32>("CameraZoomMax", Self::VT_CAMERAZOOMMAX, false)?
     .visit_field::<f32>("CameraZoomMin", Self::VT_CAMERAZOOMMIN, false)?
     .visit_field::<f32>("CameraZoomDefault", Self::VT_CAMERAZOOMDEFAULT, false)?
     .visit_field::<f32>("ThemaLoadingProgressTime", Self::VT_THEMALOADINGPROGRESSTIME, false)?
     .visit_field::<f32>("MapAllyRotation", Self::VT_MAPALLYROTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AniAllyBattleAttack", Self::VT_ANIALLYBATTLEATTACK, false)?
     .visit_field::<i32>("MaxHandCount", Self::VT_MAXHANDCOUNT, false)?
     .visit_field::<i32>("MaxCost", Self::VT_MAXCOST, false)?
     .visit_field::<i32>("StartCost", Self::VT_STARTCOST, false)?
     .visit_field::<i32>("TurnCost", Self::VT_TURNCOST, false)?
     .visit_field::<i32>("StrikerSwapFrontCost", Self::VT_STRIKERSWAPFRONTCOST, false)?
     .visit_field::<i32>("StrikerMaxEquipCount", Self::VT_STRIKERMAXEQUIPCOUNT, false)?
     .visit_field::<i32>("StartDrawCount", Self::VT_STARTDRAWCOUNT, false)?
     .visit_field::<i32>("CampReviveHealthRate", Self::VT_CAMPREVIVEHEALTHRATE, false)?
     .visit_field::<i32>("BaseRewardRerollPoint", Self::VT_BASEREWARDREROLLPOINT, false)?
     .visit_field::<i32>("SelectRewardOptionCount", Self::VT_SELECTREWARDOPTIONCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AlternativeCardImagePath", Self::VT_ALTERNATIVECARDIMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstMinigameCCGExcelArgs<'a> {
    pub TurnDrawCount: i32,
    pub ConquestMapBoundaryOffsetRight: f32,
    pub ConquestMapBoundaryOffsetTop: f32,
    pub ConquestMapBoundaryOffsetBottom: f32,
    pub ConquestMapCenterOffsetX: f32,
    pub ConquestMapCenterOffsetY: f32,
    pub CameraAngle: f32,
    pub CameraZoomMax: f32,
    pub CameraZoomMin: f32,
    pub CameraZoomDefault: f32,
    pub ThemaLoadingProgressTime: f32,
    pub MapAllyRotation: f32,
    pub AniAllyBattleAttack: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MaxHandCount: i32,
    pub MaxCost: i32,
    pub StartCost: i32,
    pub TurnCost: i32,
    pub StrikerSwapFrontCost: i32,
    pub StrikerMaxEquipCount: i32,
    pub StartDrawCount: i32,
    pub CampReviveHealthRate: i32,
    pub BaseRewardRerollPoint: i32,
    pub SelectRewardOptionCount: i32,
    pub AlternativeCardImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ConstMinigameCCGExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConstMinigameCCGExcelArgs {
      TurnDrawCount: 0,
      ConquestMapBoundaryOffsetRight: 0.0,
      ConquestMapBoundaryOffsetTop: 0.0,
      ConquestMapBoundaryOffsetBottom: 0.0,
      ConquestMapCenterOffsetX: 0.0,
      ConquestMapCenterOffsetY: 0.0,
      CameraAngle: 0.0,
      CameraZoomMax: 0.0,
      CameraZoomMin: 0.0,
      CameraZoomDefault: 0.0,
      ThemaLoadingProgressTime: 0.0,
      MapAllyRotation: 0.0,
      AniAllyBattleAttack: None,
      MaxHandCount: 0,
      MaxCost: 0,
      StartCost: 0,
      TurnCost: 0,
      StrikerSwapFrontCost: 0,
      StrikerMaxEquipCount: 0,
      StartDrawCount: 0,
      CampReviveHealthRate: 0,
      BaseRewardRerollPoint: 0,
      SelectRewardOptionCount: 0,
      AlternativeCardImagePath: None,
    }
  }
}

impl Serialize for ConstMinigameCCGExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstMinigameCCGExcel", 24)?;
      s.serialize_field("TurnDrawCount", &self.TurnDrawCount())?;
      s.serialize_field("ConquestMapBoundaryOffsetRight", &self.ConquestMapBoundaryOffsetRight())?;
      s.serialize_field("ConquestMapBoundaryOffsetTop", &self.ConquestMapBoundaryOffsetTop())?;
      s.serialize_field("ConquestMapBoundaryOffsetBottom", &self.ConquestMapBoundaryOffsetBottom())?;
      s.serialize_field("ConquestMapCenterOffsetX", &self.ConquestMapCenterOffsetX())?;
      s.serialize_field("ConquestMapCenterOffsetY", &self.ConquestMapCenterOffsetY())?;
      s.serialize_field("CameraAngle", &self.CameraAngle())?;
      s.serialize_field("CameraZoomMax", &self.CameraZoomMax())?;
      s.serialize_field("CameraZoomMin", &self.CameraZoomMin())?;
      s.serialize_field("CameraZoomDefault", &self.CameraZoomDefault())?;
      s.serialize_field("ThemaLoadingProgressTime", &self.ThemaLoadingProgressTime())?;
      s.serialize_field("MapAllyRotation", &self.MapAllyRotation())?;
      if let Some(f) = self.AniAllyBattleAttack() {
        s.serialize_field("AniAllyBattleAttack", &f)?;
      } else {
        s.skip_field("AniAllyBattleAttack")?;
      }
      s.serialize_field("MaxHandCount", &self.MaxHandCount())?;
      s.serialize_field("MaxCost", &self.MaxCost())?;
      s.serialize_field("StartCost", &self.StartCost())?;
      s.serialize_field("TurnCost", &self.TurnCost())?;
      s.serialize_field("StrikerSwapFrontCost", &self.StrikerSwapFrontCost())?;
      s.serialize_field("StrikerMaxEquipCount", &self.StrikerMaxEquipCount())?;
      s.serialize_field("StartDrawCount", &self.StartDrawCount())?;
      s.serialize_field("CampReviveHealthRate", &self.CampReviveHealthRate())?;
      s.serialize_field("BaseRewardRerollPoint", &self.BaseRewardRerollPoint())?;
      s.serialize_field("SelectRewardOptionCount", &self.SelectRewardOptionCount())?;
      if let Some(f) = self.AlternativeCardImagePath() {
        s.serialize_field("AlternativeCardImagePath", &f)?;
      } else {
        s.skip_field("AlternativeCardImagePath")?;
      }
    s.end()
  }
}

pub struct ConstMinigameCCGExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstMinigameCCGExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_TurnDrawCount(&mut self, TurnDrawCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_TURNDRAWCOUNT, TurnDrawCount, 0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetRight(&mut self, ConquestMapBoundaryOffsetRight: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPBOUNDARYOFFSETRIGHT, ConquestMapBoundaryOffsetRight, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetTop(&mut self, ConquestMapBoundaryOffsetTop: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPBOUNDARYOFFSETTOP, ConquestMapBoundaryOffsetTop, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapBoundaryOffsetBottom(&mut self, ConquestMapBoundaryOffsetBottom: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPBOUNDARYOFFSETBOTTOM, ConquestMapBoundaryOffsetBottom, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapCenterOffsetX(&mut self, ConquestMapCenterOffsetX: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPCENTEROFFSETX, ConquestMapCenterOffsetX, 0.0);
  }
  #[inline]
  pub fn add_ConquestMapCenterOffsetY(&mut self, ConquestMapCenterOffsetY: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CONQUESTMAPCENTEROFFSETY, ConquestMapCenterOffsetY, 0.0);
  }
  #[inline]
  pub fn add_CameraAngle(&mut self, CameraAngle: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CAMERAANGLE, CameraAngle, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomMax(&mut self, CameraZoomMax: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CAMERAZOOMMAX, CameraZoomMax, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomMin(&mut self, CameraZoomMin: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CAMERAZOOMMIN, CameraZoomMin, 0.0);
  }
  #[inline]
  pub fn add_CameraZoomDefault(&mut self, CameraZoomDefault: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_CAMERAZOOMDEFAULT, CameraZoomDefault, 0.0);
  }
  #[inline]
  pub fn add_ThemaLoadingProgressTime(&mut self, ThemaLoadingProgressTime: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_THEMALOADINGPROGRESSTIME, ThemaLoadingProgressTime, 0.0);
  }
  #[inline]
  pub fn add_MapAllyRotation(&mut self, MapAllyRotation: f32) {
    self.fbb_.push_slot::<f32>(ConstMinigameCCGExcel::VT_MAPALLYROTATION, MapAllyRotation, 0.0);
  }
  #[inline]
  pub fn add_AniAllyBattleAttack(&mut self, AniAllyBattleAttack: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameCCGExcel::VT_ANIALLYBATTLEATTACK, AniAllyBattleAttack);
  }
  #[inline]
  pub fn add_MaxHandCount(&mut self, MaxHandCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_MAXHANDCOUNT, MaxHandCount, 0);
  }
  #[inline]
  pub fn add_MaxCost(&mut self, MaxCost: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_MAXCOST, MaxCost, 0);
  }
  #[inline]
  pub fn add_StartCost(&mut self, StartCost: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_STARTCOST, StartCost, 0);
  }
  #[inline]
  pub fn add_TurnCost(&mut self, TurnCost: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_TURNCOST, TurnCost, 0);
  }
  #[inline]
  pub fn add_StrikerSwapFrontCost(&mut self, StrikerSwapFrontCost: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_STRIKERSWAPFRONTCOST, StrikerSwapFrontCost, 0);
  }
  #[inline]
  pub fn add_StrikerMaxEquipCount(&mut self, StrikerMaxEquipCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_STRIKERMAXEQUIPCOUNT, StrikerMaxEquipCount, 0);
  }
  #[inline]
  pub fn add_StartDrawCount(&mut self, StartDrawCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_STARTDRAWCOUNT, StartDrawCount, 0);
  }
  #[inline]
  pub fn add_CampReviveHealthRate(&mut self, CampReviveHealthRate: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_CAMPREVIVEHEALTHRATE, CampReviveHealthRate, 0);
  }
  #[inline]
  pub fn add_BaseRewardRerollPoint(&mut self, BaseRewardRerollPoint: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_BASEREWARDREROLLPOINT, BaseRewardRerollPoint, 0);
  }
  #[inline]
  pub fn add_SelectRewardOptionCount(&mut self, SelectRewardOptionCount: i32) {
    self.fbb_.push_slot::<i32>(ConstMinigameCCGExcel::VT_SELECTREWARDOPTIONCOUNT, SelectRewardOptionCount, 0);
  }
  #[inline]
  pub fn add_AlternativeCardImagePath(&mut self, AlternativeCardImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstMinigameCCGExcel::VT_ALTERNATIVECARDIMAGEPATH, AlternativeCardImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstMinigameCCGExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstMinigameCCGExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstMinigameCCGExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstMinigameCCGExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstMinigameCCGExcel");
      ds.field("TurnDrawCount", &self.TurnDrawCount());
      ds.field("ConquestMapBoundaryOffsetRight", &self.ConquestMapBoundaryOffsetRight());
      ds.field("ConquestMapBoundaryOffsetTop", &self.ConquestMapBoundaryOffsetTop());
      ds.field("ConquestMapBoundaryOffsetBottom", &self.ConquestMapBoundaryOffsetBottom());
      ds.field("ConquestMapCenterOffsetX", &self.ConquestMapCenterOffsetX());
      ds.field("ConquestMapCenterOffsetY", &self.ConquestMapCenterOffsetY());
      ds.field("CameraAngle", &self.CameraAngle());
      ds.field("CameraZoomMax", &self.CameraZoomMax());
      ds.field("CameraZoomMin", &self.CameraZoomMin());
      ds.field("CameraZoomDefault", &self.CameraZoomDefault());
      ds.field("ThemaLoadingProgressTime", &self.ThemaLoadingProgressTime());
      ds.field("MapAllyRotation", &self.MapAllyRotation());
      ds.field("AniAllyBattleAttack", &self.AniAllyBattleAttack());
      ds.field("MaxHandCount", &self.MaxHandCount());
      ds.field("MaxCost", &self.MaxCost());
      ds.field("StartCost", &self.StartCost());
      ds.field("TurnCost", &self.TurnCost());
      ds.field("StrikerSwapFrontCost", &self.StrikerSwapFrontCost());
      ds.field("StrikerMaxEquipCount", &self.StrikerMaxEquipCount());
      ds.field("StartDrawCount", &self.StartDrawCount());
      ds.field("CampReviveHealthRate", &self.CampReviveHealthRate());
      ds.field("BaseRewardRerollPoint", &self.BaseRewardRerollPoint());
      ds.field("SelectRewardOptionCount", &self.SelectRewardOptionCount());
      ds.field("AlternativeCardImagePath", &self.AlternativeCardImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstMinigameCCGExcelT {
  pub TurnDrawCount: i32,
  pub ConquestMapBoundaryOffsetRight: f32,
  pub ConquestMapBoundaryOffsetTop: f32,
  pub ConquestMapBoundaryOffsetBottom: f32,
  pub ConquestMapCenterOffsetX: f32,
  pub ConquestMapCenterOffsetY: f32,
  pub CameraAngle: f32,
  pub CameraZoomMax: f32,
  pub CameraZoomMin: f32,
  pub CameraZoomDefault: f32,
  pub ThemaLoadingProgressTime: f32,
  pub MapAllyRotation: f32,
  pub AniAllyBattleAttack: Option<String>,
  pub MaxHandCount: i32,
  pub MaxCost: i32,
  pub StartCost: i32,
  pub TurnCost: i32,
  pub StrikerSwapFrontCost: i32,
  pub StrikerMaxEquipCount: i32,
  pub StartDrawCount: i32,
  pub CampReviveHealthRate: i32,
  pub BaseRewardRerollPoint: i32,
  pub SelectRewardOptionCount: i32,
  pub AlternativeCardImagePath: Option<String>,
}
impl Default for ConstMinigameCCGExcelT {
  fn default() -> Self {
    Self {
      TurnDrawCount: 0,
      ConquestMapBoundaryOffsetRight: 0.0,
      ConquestMapBoundaryOffsetTop: 0.0,
      ConquestMapBoundaryOffsetBottom: 0.0,
      ConquestMapCenterOffsetX: 0.0,
      ConquestMapCenterOffsetY: 0.0,
      CameraAngle: 0.0,
      CameraZoomMax: 0.0,
      CameraZoomMin: 0.0,
      CameraZoomDefault: 0.0,
      ThemaLoadingProgressTime: 0.0,
      MapAllyRotation: 0.0,
      AniAllyBattleAttack: None,
      MaxHandCount: 0,
      MaxCost: 0,
      StartCost: 0,
      TurnCost: 0,
      StrikerSwapFrontCost: 0,
      StrikerMaxEquipCount: 0,
      StartDrawCount: 0,
      CampReviveHealthRate: 0,
      BaseRewardRerollPoint: 0,
      SelectRewardOptionCount: 0,
      AlternativeCardImagePath: None,
    }
  }
}
impl ConstMinigameCCGExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstMinigameCCGExcel<'b>> {
    let TurnDrawCount = self.TurnDrawCount;
    let ConquestMapBoundaryOffsetRight = self.ConquestMapBoundaryOffsetRight;
    let ConquestMapBoundaryOffsetTop = self.ConquestMapBoundaryOffsetTop;
    let ConquestMapBoundaryOffsetBottom = self.ConquestMapBoundaryOffsetBottom;
    let ConquestMapCenterOffsetX = self.ConquestMapCenterOffsetX;
    let ConquestMapCenterOffsetY = self.ConquestMapCenterOffsetY;
    let CameraAngle = self.CameraAngle;
    let CameraZoomMax = self.CameraZoomMax;
    let CameraZoomMin = self.CameraZoomMin;
    let CameraZoomDefault = self.CameraZoomDefault;
    let ThemaLoadingProgressTime = self.ThemaLoadingProgressTime;
    let MapAllyRotation = self.MapAllyRotation;
    let AniAllyBattleAttack = self.AniAllyBattleAttack.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MaxHandCount = self.MaxHandCount;
    let MaxCost = self.MaxCost;
    let StartCost = self.StartCost;
    let TurnCost = self.TurnCost;
    let StrikerSwapFrontCost = self.StrikerSwapFrontCost;
    let StrikerMaxEquipCount = self.StrikerMaxEquipCount;
    let StartDrawCount = self.StartDrawCount;
    let CampReviveHealthRate = self.CampReviveHealthRate;
    let BaseRewardRerollPoint = self.BaseRewardRerollPoint;
    let SelectRewardOptionCount = self.SelectRewardOptionCount;
    let AlternativeCardImagePath = self.AlternativeCardImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ConstMinigameCCGExcel::create(_fbb, &ConstMinigameCCGExcelArgs{
      TurnDrawCount,
      ConquestMapBoundaryOffsetRight,
      ConquestMapBoundaryOffsetTop,
      ConquestMapBoundaryOffsetBottom,
      ConquestMapCenterOffsetX,
      ConquestMapCenterOffsetY,
      CameraAngle,
      CameraZoomMax,
      CameraZoomMin,
      CameraZoomDefault,
      ThemaLoadingProgressTime,
      MapAllyRotation,
      AniAllyBattleAttack,
      MaxHandCount,
      MaxCost,
      StartCost,
      TurnCost,
      StrikerSwapFrontCost,
      StrikerMaxEquipCount,
      StartDrawCount,
      CampReviveHealthRate,
      BaseRewardRerollPoint,
      SelectRewardOptionCount,
      AlternativeCardImagePath,
    })
  }
}
