// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CCGTAG_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CCGTAG_TYPE: i32 = 25;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CCGTAG_TYPE: [CCGTagType; 26] = [
  CCGTagType::None,
  CCGTagType::Token,
  CCGTagType::Supply,
  CCGTagType::Trinity,
  CCGTagType::Gehenna,
  CCGTagType::Hyakkiyako,
  CCGTagType::Kronos,
  CCGTagType::Odyssey,
  CCGTagType::Justice,
  CCGTagType::TeaParty,
  CCGTagType::HotSprings,
  CCGTagType::GourmetResearch,
  CCGTagType::Helmet,
  CCGTagType::Sukeban,
  CCGTagType::Pursuer,
  CCGTagType::Kaitenger,
  CCGTagType::PrefectTeam,
  CCGTagType::MakeUpWork,
  CCGTagType::FestivalOperations,
  CCGTagType::NinjutsuResearch,
  CCGTagType::Striker,
  CCGTagType::Special,
  CCGTagType::Spell,
  CCGTagType::Equipment,
  CCGTagType::Zone,
  CCGTagType::Summoned,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct CCGTagType(pub i32);
#[allow(non_upper_case_globals)]
impl CCGTagType {
  pub const None: Self = Self(0);
  pub const Token: Self = Self(1);
  pub const Supply: Self = Self(2);
  pub const Trinity: Self = Self(3);
  pub const Gehenna: Self = Self(4);
  pub const Hyakkiyako: Self = Self(5);
  pub const Kronos: Self = Self(6);
  pub const Odyssey: Self = Self(7);
  pub const Justice: Self = Self(8);
  pub const TeaParty: Self = Self(9);
  pub const HotSprings: Self = Self(10);
  pub const GourmetResearch: Self = Self(11);
  pub const Helmet: Self = Self(12);
  pub const Sukeban: Self = Self(13);
  pub const Pursuer: Self = Self(14);
  pub const Kaitenger: Self = Self(15);
  pub const PrefectTeam: Self = Self(16);
  pub const MakeUpWork: Self = Self(17);
  pub const FestivalOperations: Self = Self(18);
  pub const NinjutsuResearch: Self = Self(19);
  pub const Striker: Self = Self(20);
  pub const Special: Self = Self(21);
  pub const Spell: Self = Self(22);
  pub const Equipment: Self = Self(23);
  pub const Zone: Self = Self(24);
  pub const Summoned: Self = Self(25);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 25;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Token,
    Self::Supply,
    Self::Trinity,
    Self::Gehenna,
    Self::Hyakkiyako,
    Self::Kronos,
    Self::Odyssey,
    Self::Justice,
    Self::TeaParty,
    Self::HotSprings,
    Self::GourmetResearch,
    Self::Helmet,
    Self::Sukeban,
    Self::Pursuer,
    Self::Kaitenger,
    Self::PrefectTeam,
    Self::MakeUpWork,
    Self::FestivalOperations,
    Self::NinjutsuResearch,
    Self::Striker,
    Self::Special,
    Self::Spell,
    Self::Equipment,
    Self::Zone,
    Self::Summoned,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Token => Some("Token"),
      Self::Supply => Some("Supply"),
      Self::Trinity => Some("Trinity"),
      Self::Gehenna => Some("Gehenna"),
      Self::Hyakkiyako => Some("Hyakkiyako"),
      Self::Kronos => Some("Kronos"),
      Self::Odyssey => Some("Odyssey"),
      Self::Justice => Some("Justice"),
      Self::TeaParty => Some("TeaParty"),
      Self::HotSprings => Some("HotSprings"),
      Self::GourmetResearch => Some("GourmetResearch"),
      Self::Helmet => Some("Helmet"),
      Self::Sukeban => Some("Sukeban"),
      Self::Pursuer => Some("Pursuer"),
      Self::Kaitenger => Some("Kaitenger"),
      Self::PrefectTeam => Some("PrefectTeam"),
      Self::MakeUpWork => Some("MakeUpWork"),
      Self::FestivalOperations => Some("FestivalOperations"),
      Self::NinjutsuResearch => Some("NinjutsuResearch"),
      Self::Striker => Some("Striker"),
      Self::Special => Some("Special"),
      Self::Spell => Some("Spell"),
      Self::Equipment => Some("Equipment"),
      Self::Zone => Some("Zone"),
      Self::Summoned => Some("Summoned"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for CCGTagType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for CCGTagType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("CCGTagType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for CCGTagType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for CCGTagType {
    type Output = CCGTagType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for CCGTagType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for CCGTagType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for CCGTagType {}
