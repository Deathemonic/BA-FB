// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StickerPageContentExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StickerPageContentExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StickerPageContentExcel<'a> {
  type Inner = StickerPageContentExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StickerPageContentExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_STICKERGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_STICKERPAGEID: flatbuffers::VOffsetT = 8;
  pub const VT_STICKERSLOT: flatbuffers::VOffsetT = 10;
  pub const VT_STICKERGETCONDITIONTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_STICKERCHECKPASSTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_GETSTICKERCONDITIONTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_STICKERGETCONDITIONCOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_STICKERGETCONDITIONPARAMETER: flatbuffers::VOffsetT = 20;
  pub const VT_STICKERGETCONDITIONPARAMETERTAG: flatbuffers::VOffsetT = 22;
  pub const VT_PACKEDSTICKERICONLOCALIZEETCID: flatbuffers::VOffsetT = 24;
  pub const VT_PACKEDSTICKERICONPATH: flatbuffers::VOffsetT = 26;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 28;
  pub const VT_STICKERDETAILPATH: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StickerPageContentExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StickerPageContentExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<StickerPageContentExcel<'bldr>> {
    let mut builder = StickerPageContentExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"StickerPageContent");
      let x = args.StickerGetConditionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StickerGetConditionCount(x);
      let x = args.StickerSlot;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StickerSlot(x);
      let x = args.StickerPageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StickerPageId(x);
      let x = args.StickerGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StickerGroupId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.StickerDetailPath {
        builder.add_StickerDetailPath(x);
      }
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      if let Some(x) = args.PackedStickerIconPath {
        builder.add_PackedStickerIconPath(x);
      }
      let x = args.PackedStickerIconLocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_PackedStickerIconLocalizeEtcId(x);
      if let Some(x) = args.StickerGetConditionParameterTag {
        builder.add_StickerGetConditionParameterTag(x);
      }
      if let Some(x) = args.StickerGetConditionParameter {
        builder.add_StickerGetConditionParameter(x);
      }
      let x = args.GetStickerConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_GetStickerConditionType(x);
      let x = args.StickerCheckPassType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StickerCheckPassType(x);
      let x = args.StickerGetConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StickerGetConditionType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> StickerPageContentExcelT {
    let key = table_encryption_service::create_key(b"StickerPageContent");
      let Id = self.Id();
      let StickerGroupId = self.StickerGroupId();
      let StickerPageId = self.StickerPageId();
      let StickerSlot = self.StickerSlot();
      let StickerGetConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StickerGetConditionType(), &key)
      } else {
        self.StickerGetConditionType()
      };
      let StickerCheckPassType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StickerCheckPassType(), &key)
      } else {
        self.StickerCheckPassType()
      };
      let GetStickerConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.GetStickerConditionType(), &key)
      } else {
        self.GetStickerConditionType()
      };
      let StickerGetConditionCount = self.StickerGetConditionCount();
    let StickerGetConditionParameter = self.StickerGetConditionParameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StickerGetConditionParameterTag = self.StickerGetConditionParameterTag().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let PackedStickerIconLocalizeEtcId = self.PackedStickerIconLocalizeEtcId();
    let PackedStickerIconPath = self.PackedStickerIconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StickerDetailPath = self.StickerDetailPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    StickerPageContentExcelT {
      Id,
      StickerGroupId,
      StickerPageId,
      StickerSlot,
      StickerGetConditionType,
      StickerCheckPassType,
      GetStickerConditionType,
      StickerGetConditionCount,
      StickerGetConditionParameter,
      StickerGetConditionParameterTag,
      PackedStickerIconLocalizeEtcId,
      PackedStickerIconPath,
      IconPath,
      StickerDetailPath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerPageContentExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StickerGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerPageContentExcel::VT_STICKERGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StickerPageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerPageContentExcel::VT_STICKERPAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StickerSlot(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerPageContentExcel::VT_STICKERSLOT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StickerGetConditionType(&self) -> StickerGetConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StickerGetConditionType>(StickerPageContentExcel::VT_STICKERGETCONDITIONTYPE, Some(StickerGetConditionType::None)).unwrap()}
  }
  #[inline]
  pub fn StickerCheckPassType(&self) -> StickerCheckPassType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StickerCheckPassType>(StickerPageContentExcel::VT_STICKERCHECKPASSTYPE, Some(StickerCheckPassType::None)).unwrap()}
  }
  #[inline]
  pub fn GetStickerConditionType(&self) -> GetStickerConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GetStickerConditionType>(StickerPageContentExcel::VT_GETSTICKERCONDITIONTYPE, Some(GetStickerConditionType::None)).unwrap()}
  }
  #[inline]
  pub fn StickerGetConditionCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StickerPageContentExcel::VT_STICKERGETCONDITIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StickerGetConditionParameter(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(StickerPageContentExcel::VT_STICKERGETCONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn StickerGetConditionParameterTag(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(StickerPageContentExcel::VT_STICKERGETCONDITIONPARAMETERTAG, None)}
  }
  #[inline]
  pub fn PackedStickerIconLocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(StickerPageContentExcel::VT_PACKEDSTICKERICONLOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PackedStickerIconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StickerPageContentExcel::VT_PACKEDSTICKERICONPATH, None)}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StickerPageContentExcel::VT_ICONPATH, None)}
  }
  #[inline]
  pub fn StickerDetailPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StickerPageContentExcel::VT_STICKERDETAILPATH, None)}
  }
}

impl flatbuffers::Verifiable for StickerPageContentExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("StickerGroupId", Self::VT_STICKERGROUPID, false)?
     .visit_field::<i64>("StickerPageId", Self::VT_STICKERPAGEID, false)?
     .visit_field::<i64>("StickerSlot", Self::VT_STICKERSLOT, false)?
     .visit_field::<StickerGetConditionType>("StickerGetConditionType", Self::VT_STICKERGETCONDITIONTYPE, false)?
     .visit_field::<StickerCheckPassType>("StickerCheckPassType", Self::VT_STICKERCHECKPASSTYPE, false)?
     .visit_field::<GetStickerConditionType>("GetStickerConditionType", Self::VT_GETSTICKERCONDITIONTYPE, false)?
     .visit_field::<i64>("StickerGetConditionCount", Self::VT_STICKERGETCONDITIONCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StickerGetConditionParameter", Self::VT_STICKERGETCONDITIONPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("StickerGetConditionParameterTag", Self::VT_STICKERGETCONDITIONPARAMETERTAG, false)?
     .visit_field::<u32>("PackedStickerIconLocalizeEtcId", Self::VT_PACKEDSTICKERICONLOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PackedStickerIconPath", Self::VT_PACKEDSTICKERICONPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StickerDetailPath", Self::VT_STICKERDETAILPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct StickerPageContentExcelArgs<'a> {
    pub Id: i64,
    pub StickerGroupId: i64,
    pub StickerPageId: i64,
    pub StickerSlot: i64,
    pub StickerGetConditionType: StickerGetConditionType,
    pub StickerCheckPassType: StickerCheckPassType,
    pub GetStickerConditionType: GetStickerConditionType,
    pub StickerGetConditionCount: i64,
    pub StickerGetConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StickerGetConditionParameterTag: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub PackedStickerIconLocalizeEtcId: u32,
    pub PackedStickerIconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StickerDetailPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for StickerPageContentExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    StickerPageContentExcelArgs {
      Id: 0,
      StickerGroupId: 0,
      StickerPageId: 0,
      StickerSlot: 0,
      StickerGetConditionType: StickerGetConditionType::None,
      StickerCheckPassType: StickerCheckPassType::None,
      GetStickerConditionType: GetStickerConditionType::None,
      StickerGetConditionCount: 0,
      StickerGetConditionParameter: None,
      StickerGetConditionParameterTag: None,
      PackedStickerIconLocalizeEtcId: 0,
      PackedStickerIconPath: None,
      IconPath: None,
      StickerDetailPath: None,
    }
  }
}

impl Serialize for StickerPageContentExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StickerPageContentExcel", 14)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("StickerGroupId", &self.StickerGroupId())?;
      s.serialize_field("StickerPageId", &self.StickerPageId())?;
      s.serialize_field("StickerSlot", &self.StickerSlot())?;
      s.serialize_field("StickerGetConditionType", &self.StickerGetConditionType())?;
      s.serialize_field("StickerCheckPassType", &self.StickerCheckPassType())?;
      s.serialize_field("GetStickerConditionType", &self.GetStickerConditionType())?;
      s.serialize_field("StickerGetConditionCount", &self.StickerGetConditionCount())?;
      if let Some(f) = self.StickerGetConditionParameter() {
        s.serialize_field("StickerGetConditionParameter", &f)?;
      } else {
        s.skip_field("StickerGetConditionParameter")?;
      }
      if let Some(f) = self.StickerGetConditionParameterTag() {
        s.serialize_field("StickerGetConditionParameterTag", &f)?;
      } else {
        s.skip_field("StickerGetConditionParameterTag")?;
      }
      s.serialize_field("PackedStickerIconLocalizeEtcId", &self.PackedStickerIconLocalizeEtcId())?;
      if let Some(f) = self.PackedStickerIconPath() {
        s.serialize_field("PackedStickerIconPath", &f)?;
      } else {
        s.skip_field("PackedStickerIconPath")?;
      }
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
      if let Some(f) = self.StickerDetailPath() {
        s.serialize_field("StickerDetailPath", &f)?;
      } else {
        s.skip_field("StickerDetailPath")?;
      }
    s.end()
  }
}

pub struct StickerPageContentExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StickerPageContentExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(StickerPageContentExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_StickerGroupId(&mut self, StickerGroupId: i64) {
    self.fbb_.push_slot::<i64>(StickerPageContentExcel::VT_STICKERGROUPID, StickerGroupId, 0);
  }
  #[inline]
  pub fn add_StickerPageId(&mut self, StickerPageId: i64) {
    self.fbb_.push_slot::<i64>(StickerPageContentExcel::VT_STICKERPAGEID, StickerPageId, 0);
  }
  #[inline]
  pub fn add_StickerSlot(&mut self, StickerSlot: i64) {
    self.fbb_.push_slot::<i64>(StickerPageContentExcel::VT_STICKERSLOT, StickerSlot, 0);
  }
  #[inline]
  pub fn add_StickerGetConditionType(&mut self, StickerGetConditionType: StickerGetConditionType) {
    self.fbb_.push_slot::<StickerGetConditionType>(StickerPageContentExcel::VT_STICKERGETCONDITIONTYPE, StickerGetConditionType, StickerGetConditionType::None);
  }
  #[inline]
  pub fn add_StickerCheckPassType(&mut self, StickerCheckPassType: StickerCheckPassType) {
    self.fbb_.push_slot::<StickerCheckPassType>(StickerPageContentExcel::VT_STICKERCHECKPASSTYPE, StickerCheckPassType, StickerCheckPassType::None);
  }
  #[inline]
  pub fn add_GetStickerConditionType(&mut self, GetStickerConditionType: GetStickerConditionType) {
    self.fbb_.push_slot::<GetStickerConditionType>(StickerPageContentExcel::VT_GETSTICKERCONDITIONTYPE, GetStickerConditionType, GetStickerConditionType::None);
  }
  #[inline]
  pub fn add_StickerGetConditionCount(&mut self, StickerGetConditionCount: i64) {
    self.fbb_.push_slot::<i64>(StickerPageContentExcel::VT_STICKERGETCONDITIONCOUNT, StickerGetConditionCount, 0);
  }
  #[inline]
  pub fn add_StickerGetConditionParameter(&mut self, StickerGetConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerPageContentExcel::VT_STICKERGETCONDITIONPARAMETER, StickerGetConditionParameter);
  }
  #[inline]
  pub fn add_StickerGetConditionParameterTag(&mut self, StickerGetConditionParameterTag: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerPageContentExcel::VT_STICKERGETCONDITIONPARAMETERTAG, StickerGetConditionParameterTag);
  }
  #[inline]
  pub fn add_PackedStickerIconLocalizeEtcId(&mut self, PackedStickerIconLocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(StickerPageContentExcel::VT_PACKEDSTICKERICONLOCALIZEETCID, PackedStickerIconLocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_PackedStickerIconPath(&mut self, PackedStickerIconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerPageContentExcel::VT_PACKEDSTICKERICONPATH, PackedStickerIconPath);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerPageContentExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn add_StickerDetailPath(&mut self, StickerDetailPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StickerPageContentExcel::VT_STICKERDETAILPATH, StickerDetailPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StickerPageContentExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StickerPageContentExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StickerPageContentExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StickerPageContentExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StickerPageContentExcel");
      ds.field("Id", &self.Id());
      ds.field("StickerGroupId", &self.StickerGroupId());
      ds.field("StickerPageId", &self.StickerPageId());
      ds.field("StickerSlot", &self.StickerSlot());
      ds.field("StickerGetConditionType", &self.StickerGetConditionType());
      ds.field("StickerCheckPassType", &self.StickerCheckPassType());
      ds.field("GetStickerConditionType", &self.GetStickerConditionType());
      ds.field("StickerGetConditionCount", &self.StickerGetConditionCount());
      ds.field("StickerGetConditionParameter", &self.StickerGetConditionParameter());
      ds.field("StickerGetConditionParameterTag", &self.StickerGetConditionParameterTag());
      ds.field("PackedStickerIconLocalizeEtcId", &self.PackedStickerIconLocalizeEtcId());
      ds.field("PackedStickerIconPath", &self.PackedStickerIconPath());
      ds.field("IconPath", &self.IconPath());
      ds.field("StickerDetailPath", &self.StickerDetailPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StickerPageContentExcelT {
  pub Id: i64,
  pub StickerGroupId: i64,
  pub StickerPageId: i64,
  pub StickerSlot: i64,
  pub StickerGetConditionType: StickerGetConditionType,
  pub StickerCheckPassType: StickerCheckPassType,
  pub GetStickerConditionType: GetStickerConditionType,
  pub StickerGetConditionCount: i64,
  pub StickerGetConditionParameter: Option<Vec<i64>>,
  pub StickerGetConditionParameterTag: Option<Vec<Tag>>,
  pub PackedStickerIconLocalizeEtcId: u32,
  pub PackedStickerIconPath: Option<String>,
  pub IconPath: Option<String>,
  pub StickerDetailPath: Option<String>,
}
impl Default for StickerPageContentExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      StickerGroupId: 0,
      StickerPageId: 0,
      StickerSlot: 0,
      StickerGetConditionType: StickerGetConditionType::None,
      StickerCheckPassType: StickerCheckPassType::None,
      GetStickerConditionType: GetStickerConditionType::None,
      StickerGetConditionCount: 0,
      StickerGetConditionParameter: None,
      StickerGetConditionParameterTag: None,
      PackedStickerIconLocalizeEtcId: 0,
      PackedStickerIconPath: None,
      IconPath: None,
      StickerDetailPath: None,
    }
  }
}
impl StickerPageContentExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<StickerPageContentExcel<'b>> {
    let Id = self.Id;
    let StickerGroupId = self.StickerGroupId;
    let StickerPageId = self.StickerPageId;
    let StickerSlot = self.StickerSlot;
    let StickerGetConditionType = self.StickerGetConditionType;
    let StickerCheckPassType = self.StickerCheckPassType;
    let GetStickerConditionType = self.GetStickerConditionType;
    let StickerGetConditionCount = self.StickerGetConditionCount;
    let StickerGetConditionParameter = self.StickerGetConditionParameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StickerGetConditionParameterTag = self.StickerGetConditionParameterTag.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let PackedStickerIconLocalizeEtcId = self.PackedStickerIconLocalizeEtcId;
    let PackedStickerIconPath = self.PackedStickerIconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StickerDetailPath = self.StickerDetailPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    StickerPageContentExcel::create(_fbb, &StickerPageContentExcelArgs{
      Id,
      StickerGroupId,
      StickerPageId,
      StickerSlot,
      StickerGetConditionType,
      StickerCheckPassType,
      GetStickerConditionType,
      StickerGetConditionCount,
      StickerGetConditionParameter,
      StickerGetConditionParameterTag,
      PackedStickerIconLocalizeEtcId,
      PackedStickerIconPath,
      IconPath,
      StickerDetailPath,
    })
  }
}
