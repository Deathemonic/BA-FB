// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WeekDungeonGroupBuffExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WeekDungeonGroupBuffExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WeekDungeonGroupBuffExcel<'a> {
  type Inner = WeekDungeonGroupBuffExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WeekDungeonGroupBuffExcel<'a> {
  pub const VT_WEEKDUNGEONBUFFID: flatbuffers::VOffsetT = 4;
  pub const VT_SCHOOL: flatbuffers::VOffsetT = 6;
  pub const VT_RECOMMANDLOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_FORMATIONLOCALIZEETCID: flatbuffers::VOffsetT = 10;
  pub const VT_SKILLGROUPID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WeekDungeonGroupBuffExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WeekDungeonGroupBuffExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<WeekDungeonGroupBuffExcel<'bldr>> {
    let mut builder = WeekDungeonGroupBuffExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"WeekDungeonGroupBuff");
      let x = args.WeekDungeonBuffId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_WeekDungeonBuffId(x);
      if let Some(x) = args.SkillGroupId {
        builder.add_SkillGroupId(x);
      }
      let x = args.FormationLocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_FormationLocalizeEtcId(x);
      let x = args.RecommandLocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_RecommandLocalizeEtcId(x);
      let x = args.School;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_School(x);
    builder.finish()
  }

  pub fn unpack(&self) -> WeekDungeonGroupBuffExcelT {
    let key = table_encryption_service::create_key(b"WeekDungeonGroupBuff");
      let WeekDungeonBuffId = self.WeekDungeonBuffId();
      let School = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.School(), &key)
      } else {
        self.School()
      };
      let RecommandLocalizeEtcId = self.RecommandLocalizeEtcId();
      let FormationLocalizeEtcId = self.FormationLocalizeEtcId();
    let SkillGroupId = self.SkillGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    WeekDungeonGroupBuffExcelT {
      WeekDungeonBuffId,
      School,
      RecommandLocalizeEtcId,
      FormationLocalizeEtcId,
      SkillGroupId,
    }
  }

  #[inline]
  pub fn WeekDungeonBuffId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WeekDungeonGroupBuffExcel::VT_WEEKDUNGEONBUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn School(&self) -> School {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<School>(WeekDungeonGroupBuffExcel::VT_SCHOOL, Some(School::None)).unwrap()}
  }
  #[inline]
  pub fn RecommandLocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(WeekDungeonGroupBuffExcel::VT_RECOMMANDLOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FormationLocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(WeekDungeonGroupBuffExcel::VT_FORMATIONLOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkillGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeekDungeonGroupBuffExcel::VT_SKILLGROUPID, None)}
  }
}

impl flatbuffers::Verifiable for WeekDungeonGroupBuffExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("WeekDungeonBuffId", Self::VT_WEEKDUNGEONBUFFID, false)?
     .visit_field::<School>("School", Self::VT_SCHOOL, false)?
     .visit_field::<u32>("RecommandLocalizeEtcId", Self::VT_RECOMMANDLOCALIZEETCID, false)?
     .visit_field::<u32>("FormationLocalizeEtcId", Self::VT_FORMATIONLOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillGroupId", Self::VT_SKILLGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct WeekDungeonGroupBuffExcelArgs<'a> {
    pub WeekDungeonBuffId: i64,
    pub School: School,
    pub RecommandLocalizeEtcId: u32,
    pub FormationLocalizeEtcId: u32,
    pub SkillGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for WeekDungeonGroupBuffExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    WeekDungeonGroupBuffExcelArgs {
      WeekDungeonBuffId: 0,
      School: School::None,
      RecommandLocalizeEtcId: 0,
      FormationLocalizeEtcId: 0,
      SkillGroupId: None,
    }
  }
}

impl Serialize for WeekDungeonGroupBuffExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WeekDungeonGroupBuffExcel", 5)?;
      s.serialize_field("WeekDungeonBuffId", &self.WeekDungeonBuffId())?;
      s.serialize_field("School", &self.School())?;
      s.serialize_field("RecommandLocalizeEtcId", &self.RecommandLocalizeEtcId())?;
      s.serialize_field("FormationLocalizeEtcId", &self.FormationLocalizeEtcId())?;
      if let Some(f) = self.SkillGroupId() {
        s.serialize_field("SkillGroupId", &f)?;
      } else {
        s.skip_field("SkillGroupId")?;
      }
    s.end()
  }
}

pub struct WeekDungeonGroupBuffExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WeekDungeonGroupBuffExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_WeekDungeonBuffId(&mut self, WeekDungeonBuffId: i64) {
    self.fbb_.push_slot::<i64>(WeekDungeonGroupBuffExcel::VT_WEEKDUNGEONBUFFID, WeekDungeonBuffId, 0);
  }
  #[inline]
  pub fn add_School(&mut self, School: School) {
    self.fbb_.push_slot::<School>(WeekDungeonGroupBuffExcel::VT_SCHOOL, School, School::None);
  }
  #[inline]
  pub fn add_RecommandLocalizeEtcId(&mut self, RecommandLocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(WeekDungeonGroupBuffExcel::VT_RECOMMANDLOCALIZEETCID, RecommandLocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_FormationLocalizeEtcId(&mut self, FormationLocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(WeekDungeonGroupBuffExcel::VT_FORMATIONLOCALIZEETCID, FormationLocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_SkillGroupId(&mut self, SkillGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonGroupBuffExcel::VT_SKILLGROUPID, SkillGroupId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WeekDungeonGroupBuffExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WeekDungeonGroupBuffExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WeekDungeonGroupBuffExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WeekDungeonGroupBuffExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WeekDungeonGroupBuffExcel");
      ds.field("WeekDungeonBuffId", &self.WeekDungeonBuffId());
      ds.field("School", &self.School());
      ds.field("RecommandLocalizeEtcId", &self.RecommandLocalizeEtcId());
      ds.field("FormationLocalizeEtcId", &self.FormationLocalizeEtcId());
      ds.field("SkillGroupId", &self.SkillGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WeekDungeonGroupBuffExcelT {
  pub WeekDungeonBuffId: i64,
  pub School: School,
  pub RecommandLocalizeEtcId: u32,
  pub FormationLocalizeEtcId: u32,
  pub SkillGroupId: Option<String>,
}
impl Default for WeekDungeonGroupBuffExcelT {
  fn default() -> Self {
    Self {
      WeekDungeonBuffId: 0,
      School: School::None,
      RecommandLocalizeEtcId: 0,
      FormationLocalizeEtcId: 0,
      SkillGroupId: None,
    }
  }
}
impl WeekDungeonGroupBuffExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WeekDungeonGroupBuffExcel<'b>> {
    let WeekDungeonBuffId = self.WeekDungeonBuffId;
    let School = self.School;
    let RecommandLocalizeEtcId = self.RecommandLocalizeEtcId;
    let FormationLocalizeEtcId = self.FormationLocalizeEtcId;
    let SkillGroupId = self.SkillGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    WeekDungeonGroupBuffExcel::create(_fbb, &WeekDungeonGroupBuffExcelArgs{
      WeekDungeonBuffId,
      School,
      RecommandLocalizeEtcId,
      FormationLocalizeEtcId,
      SkillGroupId,
    })
  }
}
