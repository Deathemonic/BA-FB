// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamEndingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamEndingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamEndingExcel<'a> {
  type Inner = MiniGameDreamEndingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamEndingExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ENDINGID: flatbuffers::VOffsetT = 6;
  pub const VT_DREAMMAKERENDINGTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_ORDER: flatbuffers::VOffsetT = 10;
  pub const VT_SCENARIOGROUPID: flatbuffers::VOffsetT = 12;
  pub const VT_ENDINGCONDITION: flatbuffers::VOffsetT = 14;
  pub const VT_ENDINGCONDITIONVALUE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamEndingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamEndingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamEndingExcel<'bldr>> {
    let mut builder = MiniGameDreamEndingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamEnding");
      let x = args.ScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioGroupId(x);
      let x = args.EndingId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EndingId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.EndingConditionValue {
        builder.add_EndingConditionValue(x);
      }
      if let Some(x) = args.EndingCondition {
        builder.add_EndingCondition(x);
      }
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Order(x);
      let x = args.DreamMakerEndingType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DreamMakerEndingType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamEndingExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamEnding");
      let EventContentId = self.EventContentId();
      let EndingId = self.EndingId();
      let DreamMakerEndingType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DreamMakerEndingType(), &key)
      } else {
        self.DreamMakerEndingType()
      };
      let Order = self.Order();
      let ScenarioGroupId = self.ScenarioGroupId();
    let EndingCondition = self.EndingCondition().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let EndingConditionValue = self.EndingConditionValue().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    MiniGameDreamEndingExcelT {
      EventContentId,
      EndingId,
      DreamMakerEndingType,
      Order,
      ScenarioGroupId,
      EndingCondition,
      EndingConditionValue,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamEndingExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EndingId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamEndingExcel::VT_ENDINGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerEndingType(&self) -> DreamMakerEndingType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DreamMakerEndingType>(MiniGameDreamEndingExcel::VT_DREAMMAKERENDINGTYPE, Some(DreamMakerEndingType::None)).unwrap()}
  }
  #[inline]
  pub fn Order(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameDreamEndingExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamEndingExcel::VT_SCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EndingCondition(&self) -> Option<flatbuffers::Vector<'a, DreamMakerEndingCondition>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, DreamMakerEndingCondition>>>(MiniGameDreamEndingExcel::VT_ENDINGCONDITION, None)}
  }
  #[inline]
  pub fn EndingConditionValue(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameDreamEndingExcel::VT_ENDINGCONDITIONVALUE, None)}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamEndingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("EndingId", Self::VT_ENDINGID, false)?
     .visit_field::<DreamMakerEndingType>("DreamMakerEndingType", Self::VT_DREAMMAKERENDINGTYPE, false)?
     .visit_field::<i32>("Order", Self::VT_ORDER, false)?
     .visit_field::<i64>("ScenarioGroupId", Self::VT_SCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, DreamMakerEndingCondition>>>("EndingCondition", Self::VT_ENDINGCONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("EndingConditionValue", Self::VT_ENDINGCONDITIONVALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamEndingExcelArgs<'a> {
    pub EventContentId: i64,
    pub EndingId: i64,
    pub DreamMakerEndingType: DreamMakerEndingType,
    pub Order: i32,
    pub ScenarioGroupId: i64,
    pub EndingCondition: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, DreamMakerEndingCondition>>>,
    pub EndingConditionValue: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for MiniGameDreamEndingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamEndingExcelArgs {
      EventContentId: 0,
      EndingId: 0,
      DreamMakerEndingType: DreamMakerEndingType::None,
      Order: 0,
      ScenarioGroupId: 0,
      EndingCondition: None,
      EndingConditionValue: None,
    }
  }
}

impl Serialize for MiniGameDreamEndingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamEndingExcel", 7)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EndingId", &self.EndingId())?;
      s.serialize_field("DreamMakerEndingType", &self.DreamMakerEndingType())?;
      s.serialize_field("Order", &self.Order())?;
      s.serialize_field("ScenarioGroupId", &self.ScenarioGroupId())?;
      if let Some(f) = self.EndingCondition() {
        s.serialize_field("EndingCondition", &f)?;
      } else {
        s.skip_field("EndingCondition")?;
      }
      if let Some(f) = self.EndingConditionValue() {
        s.serialize_field("EndingConditionValue", &f)?;
      } else {
        s.skip_field("EndingConditionValue")?;
      }
    s.end()
  }
}

pub struct MiniGameDreamEndingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamEndingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamEndingExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EndingId(&mut self, EndingId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamEndingExcel::VT_ENDINGID, EndingId, 0);
  }
  #[inline]
  pub fn add_DreamMakerEndingType(&mut self, DreamMakerEndingType: DreamMakerEndingType) {
    self.fbb_.push_slot::<DreamMakerEndingType>(MiniGameDreamEndingExcel::VT_DREAMMAKERENDINGTYPE, DreamMakerEndingType, DreamMakerEndingType::None);
  }
  #[inline]
  pub fn add_Order(&mut self, Order: i32) {
    self.fbb_.push_slot::<i32>(MiniGameDreamEndingExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_ScenarioGroupId(&mut self, ScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamEndingExcel::VT_SCENARIOGROUPID, ScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_EndingCondition(&mut self, EndingCondition: flatbuffers::WIPOffset<flatbuffers::Vector<'b , DreamMakerEndingCondition>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamEndingExcel::VT_ENDINGCONDITION, EndingCondition);
  }
  #[inline]
  pub fn add_EndingConditionValue(&mut self, EndingConditionValue: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamEndingExcel::VT_ENDINGCONDITIONVALUE, EndingConditionValue);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamEndingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamEndingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamEndingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamEndingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamEndingExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EndingId", &self.EndingId());
      ds.field("DreamMakerEndingType", &self.DreamMakerEndingType());
      ds.field("Order", &self.Order());
      ds.field("ScenarioGroupId", &self.ScenarioGroupId());
      ds.field("EndingCondition", &self.EndingCondition());
      ds.field("EndingConditionValue", &self.EndingConditionValue());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamEndingExcelT {
  pub EventContentId: i64,
  pub EndingId: i64,
  pub DreamMakerEndingType: DreamMakerEndingType,
  pub Order: i32,
  pub ScenarioGroupId: i64,
  pub EndingCondition: Option<Vec<DreamMakerEndingCondition>>,
  pub EndingConditionValue: Option<Vec<i64>>,
}
impl Default for MiniGameDreamEndingExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EndingId: 0,
      DreamMakerEndingType: DreamMakerEndingType::None,
      Order: 0,
      ScenarioGroupId: 0,
      EndingCondition: None,
      EndingConditionValue: None,
    }
  }
}
impl MiniGameDreamEndingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamEndingExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EndingId = self.EndingId;
    let DreamMakerEndingType = self.DreamMakerEndingType;
    let Order = self.Order;
    let ScenarioGroupId = self.ScenarioGroupId;
    let EndingCondition = self.EndingCondition.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let EndingConditionValue = self.EndingConditionValue.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MiniGameDreamEndingExcel::create(_fbb, &MiniGameDreamEndingExcelArgs{
      EventContentId,
      EndingId,
      DreamMakerEndingType,
      Order,
      ScenarioGroupId,
      EndingCondition,
      EndingConditionValue,
    })
  }
}
