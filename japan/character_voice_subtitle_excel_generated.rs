// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterVoiceSubtitleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterVoiceSubtitleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterVoiceSubtitleExcel<'a> {
  type Inner = CharacterVoiceSubtitleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterVoiceSubtitleExcel<'a> {
  pub const VT_LOCALIZECVGROUP: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERVOICEGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_DURATION: flatbuffers::VOffsetT = 8;
  pub const VT_SEPARATE: flatbuffers::VOffsetT = 10;
  pub const VT_LOCALIZEKR: flatbuffers::VOffsetT = 12;
  pub const VT_LOCALIZEJP: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterVoiceSubtitleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterVoiceSubtitleExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterVoiceSubtitleExcel<'bldr>> {
    let mut builder = CharacterVoiceSubtitleExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterVoiceSubtitle");
      let x = args.Duration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Duration(x);
      let x = args.CharacterVoiceGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterVoiceGroupId(x);
      if let Some(x) = args.LocalizeJP {
        builder.add_LocalizeJP(x);
      }
      if let Some(x) = args.LocalizeKR {
        builder.add_LocalizeKR(x);
      }
      if let Some(x) = args.LocalizeCVGroup {
        builder.add_LocalizeCVGroup(x);
      }
      builder.add_Separate(args.Separate);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterVoiceSubtitleExcelT {
    let key = table_encryption_service::create_key(b"CharacterVoiceSubtitle");
    let LocalizeCVGroup = self.LocalizeCVGroup().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CharacterVoiceGroupId = self.CharacterVoiceGroupId();
      let Duration = self.Duration();
      let Separate = self.Separate();
    let LocalizeKR = self.LocalizeKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeJP = self.LocalizeJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CharacterVoiceSubtitleExcelT {
      LocalizeCVGroup,
      CharacterVoiceGroupId,
      Duration,
      Separate,
      LocalizeKR,
      LocalizeJP,
    }
  }

  #[inline]
  pub fn LocalizeCVGroup(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVoiceSubtitleExcel::VT_LOCALIZECVGROUP, None)}
  }
  #[inline]
  pub fn CharacterVoiceGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVoiceSubtitleExcel::VT_CHARACTERVOICEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Duration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVoiceSubtitleExcel::VT_DURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Separate(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterVoiceSubtitleExcel::VT_SEPARATE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn LocalizeKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVoiceSubtitleExcel::VT_LOCALIZEKR, None)}
  }
  #[inline]
  pub fn LocalizeJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVoiceSubtitleExcel::VT_LOCALIZEJP, None)}
  }
}

impl flatbuffers::Verifiable for CharacterVoiceSubtitleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeCVGroup", Self::VT_LOCALIZECVGROUP, false)?
     .visit_field::<i64>("CharacterVoiceGroupId", Self::VT_CHARACTERVOICEGROUPID, false)?
     .visit_field::<i64>("Duration", Self::VT_DURATION, false)?
     .visit_field::<bool>("Separate", Self::VT_SEPARATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeKR", Self::VT_LOCALIZEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeJP", Self::VT_LOCALIZEJP, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterVoiceSubtitleExcelArgs<'a> {
    pub LocalizeCVGroup: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceGroupId: i64,
    pub Duration: i64,
    pub Separate: bool,
    pub LocalizeKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeJP: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CharacterVoiceSubtitleExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterVoiceSubtitleExcelArgs {
      LocalizeCVGroup: None,
      CharacterVoiceGroupId: 0,
      Duration: 0,
      Separate: false,
      LocalizeKR: None,
      LocalizeJP: None,
    }
  }
}

impl Serialize for CharacterVoiceSubtitleExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterVoiceSubtitleExcel", 6)?;
      if let Some(f) = self.LocalizeCVGroup() {
        s.serialize_field("LocalizeCVGroup", &f)?;
      } else {
        s.skip_field("LocalizeCVGroup")?;
      }
      s.serialize_field("CharacterVoiceGroupId", &self.CharacterVoiceGroupId())?;
      s.serialize_field("Duration", &self.Duration())?;
      s.serialize_field("Separate", &self.Separate())?;
      if let Some(f) = self.LocalizeKR() {
        s.serialize_field("LocalizeKR", &f)?;
      } else {
        s.skip_field("LocalizeKR")?;
      }
      if let Some(f) = self.LocalizeJP() {
        s.serialize_field("LocalizeJP", &f)?;
      } else {
        s.skip_field("LocalizeJP")?;
      }
    s.end()
  }
}

pub struct CharacterVoiceSubtitleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterVoiceSubtitleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LocalizeCVGroup(&mut self, LocalizeCVGroup: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceSubtitleExcel::VT_LOCALIZECVGROUP, LocalizeCVGroup);
  }
  #[inline]
  pub fn add_CharacterVoiceGroupId(&mut self, CharacterVoiceGroupId: i64) {
    self.fbb_.push_slot::<i64>(CharacterVoiceSubtitleExcel::VT_CHARACTERVOICEGROUPID, CharacterVoiceGroupId, 0);
  }
  #[inline]
  pub fn add_Duration(&mut self, Duration: i64) {
    self.fbb_.push_slot::<i64>(CharacterVoiceSubtitleExcel::VT_DURATION, Duration, 0);
  }
  #[inline]
  pub fn add_Separate(&mut self, Separate: bool) {
    self.fbb_.push_slot::<bool>(CharacterVoiceSubtitleExcel::VT_SEPARATE, Separate, false);
  }
  #[inline]
  pub fn add_LocalizeKR(&mut self, LocalizeKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceSubtitleExcel::VT_LOCALIZEKR, LocalizeKR);
  }
  #[inline]
  pub fn add_LocalizeJP(&mut self, LocalizeJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVoiceSubtitleExcel::VT_LOCALIZEJP, LocalizeJP);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterVoiceSubtitleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterVoiceSubtitleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterVoiceSubtitleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterVoiceSubtitleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterVoiceSubtitleExcel");
      ds.field("LocalizeCVGroup", &self.LocalizeCVGroup());
      ds.field("CharacterVoiceGroupId", &self.CharacterVoiceGroupId());
      ds.field("Duration", &self.Duration());
      ds.field("Separate", &self.Separate());
      ds.field("LocalizeKR", &self.LocalizeKR());
      ds.field("LocalizeJP", &self.LocalizeJP());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterVoiceSubtitleExcelT {
  pub LocalizeCVGroup: Option<String>,
  pub CharacterVoiceGroupId: i64,
  pub Duration: i64,
  pub Separate: bool,
  pub LocalizeKR: Option<String>,
  pub LocalizeJP: Option<String>,
}
impl Default for CharacterVoiceSubtitleExcelT {
  fn default() -> Self {
    Self {
      LocalizeCVGroup: None,
      CharacterVoiceGroupId: 0,
      Duration: 0,
      Separate: false,
      LocalizeKR: None,
      LocalizeJP: None,
    }
  }
}
impl CharacterVoiceSubtitleExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterVoiceSubtitleExcel<'b>> {
    let LocalizeCVGroup = self.LocalizeCVGroup.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceGroupId = self.CharacterVoiceGroupId;
    let Duration = self.Duration;
    let Separate = self.Separate;
    let LocalizeKR = self.LocalizeKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeJP = self.LocalizeJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CharacterVoiceSubtitleExcel::create(_fbb, &CharacterVoiceSubtitleExcelArgs{
      LocalizeCVGroup,
      CharacterVoiceGroupId,
      Duration,
      Separate,
      LocalizeKR,
      LocalizeJP,
    })
  }
}
