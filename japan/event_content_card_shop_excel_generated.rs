// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentCardShopExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentCardShopExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentCardShopExcel<'a> {
  type Inner = EventContentCardShopExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentCardShopExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_RARITY: flatbuffers::VOffsetT = 8;
  pub const VT_COSTGOODSID: flatbuffers::VOffsetT = 10;
  pub const VT_CARDGROUPID: flatbuffers::VOffsetT = 12;
  pub const VT_ISLEGACY: flatbuffers::VOffsetT = 14;
  pub const VT_REFRESHGROUP: flatbuffers::VOffsetT = 16;
  pub const VT_PROB: flatbuffers::VOffsetT = 18;
  pub const VT_PROBWEIGHT1: flatbuffers::VOffsetT = 20;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 24;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentCardShopExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentCardShopExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentCardShopExcel<'bldr>> {
    let mut builder = EventContentCardShopExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentCardShop");
      let x = args.CostGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostGoodsId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      let x = args.ProbWeight1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ProbWeight1(x);
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      let x = args.RefreshGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RefreshGroup(x);
      let x = args.CardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CardGroupId(x);
      let x = args.Rarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Rarity(x);
      builder.add_IsLegacy(args.IsLegacy);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentCardShopExcelT {
    let key = table_encryption_service::create_key(b"EventContentCardShop");
      let EventContentId = self.EventContentId();
      let Id = self.Id();
      let Rarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Rarity(), &key)
      } else {
        self.Rarity()
      };
      let CostGoodsId = self.CostGoodsId();
      let CardGroupId = self.CardGroupId();
      let IsLegacy = self.IsLegacy();
      let RefreshGroup = self.RefreshGroup();
      let Prob = self.Prob();
      let ProbWeight1 = self.ProbWeight1();
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EventContentCardShopExcelT {
      EventContentId,
      Id,
      Rarity,
      CostGoodsId,
      CardGroupId,
      IsLegacy,
      RefreshGroup,
      Prob,
      ProbWeight1,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentCardShopExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentCardShopExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(EventContentCardShopExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn CostGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentCardShopExcel::VT_COSTGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CardGroupId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentCardShopExcel::VT_CARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsLegacy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentCardShopExcel::VT_ISLEGACY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn RefreshGroup(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentCardShopExcel::VT_REFRESHGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentCardShopExcel::VT_PROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProbWeight1(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentCardShopExcel::VT_PROBWEIGHT1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentCardShopExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentCardShopExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentCardShopExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EventContentCardShopExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<Rarity>("Rarity", Self::VT_RARITY, false)?
     .visit_field::<i64>("CostGoodsId", Self::VT_COSTGOODSID, false)?
     .visit_field::<i32>("CardGroupId", Self::VT_CARDGROUPID, false)?
     .visit_field::<bool>("IsLegacy", Self::VT_ISLEGACY, false)?
     .visit_field::<i32>("RefreshGroup", Self::VT_REFRESHGROUP, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .visit_field::<i32>("ProbWeight1", Self::VT_PROBWEIGHT1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentCardShopExcelArgs<'a> {
    pub EventContentId: i64,
    pub Id: i64,
    pub Rarity: Rarity,
    pub CostGoodsId: i64,
    pub CardGroupId: i32,
    pub IsLegacy: bool,
    pub RefreshGroup: i32,
    pub Prob: i32,
    pub ProbWeight1: i32,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EventContentCardShopExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentCardShopExcelArgs {
      EventContentId: 0,
      Id: 0,
      Rarity: Rarity::N,
      CostGoodsId: 0,
      CardGroupId: 0,
      IsLegacy: false,
      RefreshGroup: 0,
      Prob: 0,
      ProbWeight1: 0,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}

impl Serialize for EventContentCardShopExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentCardShopExcel", 12)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Rarity", &self.Rarity())?;
      s.serialize_field("CostGoodsId", &self.CostGoodsId())?;
      s.serialize_field("CardGroupId", &self.CardGroupId())?;
      s.serialize_field("IsLegacy", &self.IsLegacy())?;
      s.serialize_field("RefreshGroup", &self.RefreshGroup())?;
      s.serialize_field("Prob", &self.Prob())?;
      s.serialize_field("ProbWeight1", &self.ProbWeight1())?;
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct EventContentCardShopExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentCardShopExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentCardShopExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentCardShopExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Rarity(&mut self, Rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(EventContentCardShopExcel::VT_RARITY, Rarity, Rarity::N);
  }
  #[inline]
  pub fn add_CostGoodsId(&mut self, CostGoodsId: i64) {
    self.fbb_.push_slot::<i64>(EventContentCardShopExcel::VT_COSTGOODSID, CostGoodsId, 0);
  }
  #[inline]
  pub fn add_CardGroupId(&mut self, CardGroupId: i32) {
    self.fbb_.push_slot::<i32>(EventContentCardShopExcel::VT_CARDGROUPID, CardGroupId, 0);
  }
  #[inline]
  pub fn add_IsLegacy(&mut self, IsLegacy: bool) {
    self.fbb_.push_slot::<bool>(EventContentCardShopExcel::VT_ISLEGACY, IsLegacy, false);
  }
  #[inline]
  pub fn add_RefreshGroup(&mut self, RefreshGroup: i32) {
    self.fbb_.push_slot::<i32>(EventContentCardShopExcel::VT_REFRESHGROUP, RefreshGroup, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(EventContentCardShopExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn add_ProbWeight1(&mut self, ProbWeight1: i32) {
    self.fbb_.push_slot::<i32>(EventContentCardShopExcel::VT_PROBWEIGHT1, ProbWeight1, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentCardShopExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentCardShopExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentCardShopExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentCardShopExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentCardShopExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentCardShopExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentCardShopExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentCardShopExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("Id", &self.Id());
      ds.field("Rarity", &self.Rarity());
      ds.field("CostGoodsId", &self.CostGoodsId());
      ds.field("CardGroupId", &self.CardGroupId());
      ds.field("IsLegacy", &self.IsLegacy());
      ds.field("RefreshGroup", &self.RefreshGroup());
      ds.field("Prob", &self.Prob());
      ds.field("ProbWeight1", &self.ProbWeight1());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentCardShopExcelT {
  pub EventContentId: i64,
  pub Id: i64,
  pub Rarity: Rarity,
  pub CostGoodsId: i64,
  pub CardGroupId: i32,
  pub IsLegacy: bool,
  pub RefreshGroup: i32,
  pub Prob: i32,
  pub ProbWeight1: i32,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
}
impl Default for EventContentCardShopExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      Id: 0,
      Rarity: Rarity::N,
      CostGoodsId: 0,
      CardGroupId: 0,
      IsLegacy: false,
      RefreshGroup: 0,
      Prob: 0,
      ProbWeight1: 0,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
    }
  }
}
impl EventContentCardShopExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentCardShopExcel<'b>> {
    let EventContentId = self.EventContentId;
    let Id = self.Id;
    let Rarity = self.Rarity;
    let CostGoodsId = self.CostGoodsId;
    let CardGroupId = self.CardGroupId;
    let IsLegacy = self.IsLegacy;
    let RefreshGroup = self.RefreshGroup;
    let Prob = self.Prob;
    let ProbWeight1 = self.ProbWeight1;
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentCardShopExcel::create(_fbb, &EventContentCardShopExcelArgs{
      EventContentId,
      Id,
      Rarity,
      CostGoodsId,
      CardGroupId,
      IsLegacy,
      RefreshGroup,
      Prob,
      ProbWeight1,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
    })
  }
}
