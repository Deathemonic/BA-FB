// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestErosionUnitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestErosionUnitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestErosionUnitExcel<'a> {
  type Inner = ConquestErosionUnitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestErosionUnitExcel<'a> {
  pub const VT_TILEPREFABID: flatbuffers::VOffsetT = 4;
  pub const VT_MASSEROSIONUNITID: flatbuffers::VOffsetT = 6;
  pub const VT_MASSEROSIONUNITROTATIONY: flatbuffers::VOffsetT = 8;
  pub const VT_INDIVIDUALEROSIONUNITID: flatbuffers::VOffsetT = 10;
  pub const VT_INDIVIDUALEROSIONUNITROTATIONY: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestErosionUnitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestErosionUnitExcelArgs
  ) -> flatbuffers::WIPOffset<ConquestErosionUnitExcel<'bldr>> {
    let mut builder = ConquestErosionUnitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestErosionUnit");
      let x = args.IndividualErosionUnitId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_IndividualErosionUnitId(x);
      let x = args.MassErosionUnitId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MassErosionUnitId(x);
      let x = args.TilePrefabId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TilePrefabId(x);
      let x = args.IndividualErosionUnitRotationY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_IndividualErosionUnitRotationY(x);
      let x = args.MassErosionUnitRotationY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_MassErosionUnitRotationY(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestErosionUnitExcelT {
    let key = table_encryption_service::create_key(b"ConquestErosionUnit");
      let TilePrefabId = self.TilePrefabId();
      let MassErosionUnitId = self.MassErosionUnitId();
      let MassErosionUnitRotationY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.MassErosionUnitRotationY(), &key)
      } else {
        self.MassErosionUnitRotationY()
      };
      let IndividualErosionUnitId = self.IndividualErosionUnitId();
      let IndividualErosionUnitRotationY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.IndividualErosionUnitRotationY(), &key)
      } else {
        self.IndividualErosionUnitRotationY()
      };
    ConquestErosionUnitExcelT {
      TilePrefabId,
      MassErosionUnitId,
      MassErosionUnitRotationY,
      IndividualErosionUnitId,
      IndividualErosionUnitRotationY,
    }
  }

  #[inline]
  pub fn TilePrefabId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionUnitExcel::VT_TILEPREFABID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MassErosionUnitId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionUnitExcel::VT_MASSEROSIONUNITID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MassErosionUnitRotationY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestErosionUnitExcel::VT_MASSEROSIONUNITROTATIONY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IndividualErosionUnitId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionUnitExcel::VT_INDIVIDUALEROSIONUNITID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IndividualErosionUnitRotationY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestErosionUnitExcel::VT_INDIVIDUALEROSIONUNITROTATIONY, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestErosionUnitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("TilePrefabId", Self::VT_TILEPREFABID, false)?
     .visit_field::<i64>("MassErosionUnitId", Self::VT_MASSEROSIONUNITID, false)?
     .visit_field::<f32>("MassErosionUnitRotationY", Self::VT_MASSEROSIONUNITROTATIONY, false)?
     .visit_field::<i64>("IndividualErosionUnitId", Self::VT_INDIVIDUALEROSIONUNITID, false)?
     .visit_field::<f32>("IndividualErosionUnitRotationY", Self::VT_INDIVIDUALEROSIONUNITROTATIONY, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestErosionUnitExcelArgs {
    pub TilePrefabId: i64,
    pub MassErosionUnitId: i64,
    pub MassErosionUnitRotationY: f32,
    pub IndividualErosionUnitId: i64,
    pub IndividualErosionUnitRotationY: f32,
}
impl<'a> Default for ConquestErosionUnitExcelArgs {
  #[inline]
  fn default() -> Self {
    ConquestErosionUnitExcelArgs {
      TilePrefabId: 0,
      MassErosionUnitId: 0,
      MassErosionUnitRotationY: 0.0,
      IndividualErosionUnitId: 0,
      IndividualErosionUnitRotationY: 0.0,
    }
  }
}

impl Serialize for ConquestErosionUnitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestErosionUnitExcel", 5)?;
      s.serialize_field("TilePrefabId", &self.TilePrefabId())?;
      s.serialize_field("MassErosionUnitId", &self.MassErosionUnitId())?;
      s.serialize_field("MassErosionUnitRotationY", &self.MassErosionUnitRotationY())?;
      s.serialize_field("IndividualErosionUnitId", &self.IndividualErosionUnitId())?;
      s.serialize_field("IndividualErosionUnitRotationY", &self.IndividualErosionUnitRotationY())?;
    s.end()
  }
}

pub struct ConquestErosionUnitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestErosionUnitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_TilePrefabId(&mut self, TilePrefabId: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionUnitExcel::VT_TILEPREFABID, TilePrefabId, 0);
  }
  #[inline]
  pub fn add_MassErosionUnitId(&mut self, MassErosionUnitId: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionUnitExcel::VT_MASSEROSIONUNITID, MassErosionUnitId, 0);
  }
  #[inline]
  pub fn add_MassErosionUnitRotationY(&mut self, MassErosionUnitRotationY: f32) {
    self.fbb_.push_slot::<f32>(ConquestErosionUnitExcel::VT_MASSEROSIONUNITROTATIONY, MassErosionUnitRotationY, 0.0);
  }
  #[inline]
  pub fn add_IndividualErosionUnitId(&mut self, IndividualErosionUnitId: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionUnitExcel::VT_INDIVIDUALEROSIONUNITID, IndividualErosionUnitId, 0);
  }
  #[inline]
  pub fn add_IndividualErosionUnitRotationY(&mut self, IndividualErosionUnitRotationY: f32) {
    self.fbb_.push_slot::<f32>(ConquestErosionUnitExcel::VT_INDIVIDUALEROSIONUNITROTATIONY, IndividualErosionUnitRotationY, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestErosionUnitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestErosionUnitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestErosionUnitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestErosionUnitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestErosionUnitExcel");
      ds.field("TilePrefabId", &self.TilePrefabId());
      ds.field("MassErosionUnitId", &self.MassErosionUnitId());
      ds.field("MassErosionUnitRotationY", &self.MassErosionUnitRotationY());
      ds.field("IndividualErosionUnitId", &self.IndividualErosionUnitId());
      ds.field("IndividualErosionUnitRotationY", &self.IndividualErosionUnitRotationY());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestErosionUnitExcelT {
  pub TilePrefabId: i64,
  pub MassErosionUnitId: i64,
  pub MassErosionUnitRotationY: f32,
  pub IndividualErosionUnitId: i64,
  pub IndividualErosionUnitRotationY: f32,
}
impl Default for ConquestErosionUnitExcelT {
  fn default() -> Self {
    Self {
      TilePrefabId: 0,
      MassErosionUnitId: 0,
      MassErosionUnitRotationY: 0.0,
      IndividualErosionUnitId: 0,
      IndividualErosionUnitRotationY: 0.0,
    }
  }
}
impl ConquestErosionUnitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestErosionUnitExcel<'b>> {
    let TilePrefabId = self.TilePrefabId;
    let MassErosionUnitId = self.MassErosionUnitId;
    let MassErosionUnitRotationY = self.MassErosionUnitRotationY;
    let IndividualErosionUnitId = self.IndividualErosionUnitId;
    let IndividualErosionUnitRotationY = self.IndividualErosionUnitRotationY;
    ConquestErosionUnitExcel::create(_fbb, &ConquestErosionUnitExcelArgs{
      TilePrefabId,
      MassErosionUnitId,
      MassErosionUnitRotationY,
      IndividualErosionUnitId,
      IndividualErosionUnitRotationY,
    })
  }
}
