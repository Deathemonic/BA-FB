// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShiftingCraftRecipeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShiftingCraftRecipeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShiftingCraftRecipeExcel<'a> {
  type Inner = ShiftingCraftRecipeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShiftingCraftRecipeExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 6;
  pub const VT_NOTIFICATIONID: flatbuffers::VOffsetT = 8;
  pub const VT_RESULTPARCEL: flatbuffers::VOffsetT = 10;
  pub const VT_RESULTID: flatbuffers::VOffsetT = 12;
  pub const VT_RESULTAMOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_REQUIREITEMID: flatbuffers::VOffsetT = 16;
  pub const VT_REQUIREITEMAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_REQUIREGOLD: flatbuffers::VOffsetT = 20;
  pub const VT_INGREDIENTTAG: flatbuffers::VOffsetT = 22;
  pub const VT_INGREDIENTEXP: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShiftingCraftRecipeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShiftingCraftRecipeExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShiftingCraftRecipeExcel<'bldr>> {
    let mut builder = ShiftingCraftRecipeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShiftingCraftRecipe");
      let x = args.IngredientExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_IngredientExp(x);
      let x = args.RequireGold;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RequireGold(x);
      let x = args.RequireItemAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RequireItemAmount(x);
      let x = args.RequireItemId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RequireItemId(x);
      let x = args.ResultAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultAmount(x);
      let x = args.ResultId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultId(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.IngredientTag {
        builder.add_IngredientTag(x);
      }
      let x = args.ResultParcel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ResultParcel(x);
      let x = args.NotificationId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NotificationId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ShiftingCraftRecipeExcelT {
    let key = table_encryption_service::create_key(b"ShiftingCraftRecipe");
      let Id = self.Id();
      let DisplayOrder = self.DisplayOrder();
      let NotificationId = self.NotificationId();
      let ResultParcel = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ResultParcel(), &key)
      } else {
        self.ResultParcel()
      };
      let ResultId = self.ResultId();
      let ResultAmount = self.ResultAmount();
      let RequireItemId = self.RequireItemId();
      let RequireItemAmount = self.RequireItemAmount();
      let RequireGold = self.RequireGold();
    let IngredientTag = self.IngredientTag().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let IngredientExp = self.IngredientExp();
    ShiftingCraftRecipeExcelT {
      Id,
      DisplayOrder,
      NotificationId,
      ResultParcel,
      ResultId,
      ResultAmount,
      RequireItemId,
      RequireItemAmount,
      RequireGold,
      IngredientTag,
      IngredientExp,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NotificationId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ShiftingCraftRecipeExcel::VT_NOTIFICATIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResultParcel(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ShiftingCraftRecipeExcel::VT_RESULTPARCEL, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ResultId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_RESULTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResultAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_RESULTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequireItemId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_REQUIREITEMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequireItemAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_REQUIREITEMAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RequireGold(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_REQUIREGOLD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IngredientTag(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(ShiftingCraftRecipeExcel::VT_INGREDIENTTAG, None)}
  }
  #[inline]
  pub fn IngredientExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShiftingCraftRecipeExcel::VT_INGREDIENTEXP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ShiftingCraftRecipeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<i32>("NotificationId", Self::VT_NOTIFICATIONID, false)?
     .visit_field::<ParcelType>("ResultParcel", Self::VT_RESULTPARCEL, false)?
     .visit_field::<i64>("ResultId", Self::VT_RESULTID, false)?
     .visit_field::<i64>("ResultAmount", Self::VT_RESULTAMOUNT, false)?
     .visit_field::<i64>("RequireItemId", Self::VT_REQUIREITEMID, false)?
     .visit_field::<i64>("RequireItemAmount", Self::VT_REQUIREITEMAMOUNT, false)?
     .visit_field::<i64>("RequireGold", Self::VT_REQUIREGOLD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("IngredientTag", Self::VT_INGREDIENTTAG, false)?
     .visit_field::<i64>("IngredientExp", Self::VT_INGREDIENTEXP, false)?
     .finish();
    Ok(())
  }
}
pub struct ShiftingCraftRecipeExcelArgs<'a> {
    pub Id: i64,
    pub DisplayOrder: i64,
    pub NotificationId: i32,
    pub ResultParcel: ParcelType,
    pub ResultId: i64,
    pub ResultAmount: i64,
    pub RequireItemId: i64,
    pub RequireItemAmount: i64,
    pub RequireGold: i64,
    pub IngredientTag: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub IngredientExp: i64,
}
impl<'a> Default for ShiftingCraftRecipeExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShiftingCraftRecipeExcelArgs {
      Id: 0,
      DisplayOrder: 0,
      NotificationId: 0,
      ResultParcel: ParcelType::None,
      ResultId: 0,
      ResultAmount: 0,
      RequireItemId: 0,
      RequireItemAmount: 0,
      RequireGold: 0,
      IngredientTag: None,
      IngredientExp: 0,
    }
  }
}

impl Serialize for ShiftingCraftRecipeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShiftingCraftRecipeExcel", 11)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("NotificationId", &self.NotificationId())?;
      s.serialize_field("ResultParcel", &self.ResultParcel())?;
      s.serialize_field("ResultId", &self.ResultId())?;
      s.serialize_field("ResultAmount", &self.ResultAmount())?;
      s.serialize_field("RequireItemId", &self.RequireItemId())?;
      s.serialize_field("RequireItemAmount", &self.RequireItemAmount())?;
      s.serialize_field("RequireGold", &self.RequireGold())?;
      if let Some(f) = self.IngredientTag() {
        s.serialize_field("IngredientTag", &f)?;
      } else {
        s.skip_field("IngredientTag")?;
      }
      s.serialize_field("IngredientExp", &self.IngredientExp())?;
    s.end()
  }
}

pub struct ShiftingCraftRecipeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShiftingCraftRecipeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_NotificationId(&mut self, NotificationId: i32) {
    self.fbb_.push_slot::<i32>(ShiftingCraftRecipeExcel::VT_NOTIFICATIONID, NotificationId, 0);
  }
  #[inline]
  pub fn add_ResultParcel(&mut self, ResultParcel: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ShiftingCraftRecipeExcel::VT_RESULTPARCEL, ResultParcel, ParcelType::None);
  }
  #[inline]
  pub fn add_ResultId(&mut self, ResultId: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_RESULTID, ResultId, 0);
  }
  #[inline]
  pub fn add_ResultAmount(&mut self, ResultAmount: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_RESULTAMOUNT, ResultAmount, 0);
  }
  #[inline]
  pub fn add_RequireItemId(&mut self, RequireItemId: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_REQUIREITEMID, RequireItemId, 0);
  }
  #[inline]
  pub fn add_RequireItemAmount(&mut self, RequireItemAmount: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_REQUIREITEMAMOUNT, RequireItemAmount, 0);
  }
  #[inline]
  pub fn add_RequireGold(&mut self, RequireGold: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_REQUIREGOLD, RequireGold, 0);
  }
  #[inline]
  pub fn add_IngredientTag(&mut self, IngredientTag: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShiftingCraftRecipeExcel::VT_INGREDIENTTAG, IngredientTag);
  }
  #[inline]
  pub fn add_IngredientExp(&mut self, IngredientExp: i64) {
    self.fbb_.push_slot::<i64>(ShiftingCraftRecipeExcel::VT_INGREDIENTEXP, IngredientExp, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShiftingCraftRecipeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShiftingCraftRecipeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShiftingCraftRecipeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShiftingCraftRecipeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShiftingCraftRecipeExcel");
      ds.field("Id", &self.Id());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("NotificationId", &self.NotificationId());
      ds.field("ResultParcel", &self.ResultParcel());
      ds.field("ResultId", &self.ResultId());
      ds.field("ResultAmount", &self.ResultAmount());
      ds.field("RequireItemId", &self.RequireItemId());
      ds.field("RequireItemAmount", &self.RequireItemAmount());
      ds.field("RequireGold", &self.RequireGold());
      ds.field("IngredientTag", &self.IngredientTag());
      ds.field("IngredientExp", &self.IngredientExp());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShiftingCraftRecipeExcelT {
  pub Id: i64,
  pub DisplayOrder: i64,
  pub NotificationId: i32,
  pub ResultParcel: ParcelType,
  pub ResultId: i64,
  pub ResultAmount: i64,
  pub RequireItemId: i64,
  pub RequireItemAmount: i64,
  pub RequireGold: i64,
  pub IngredientTag: Option<Vec<Tag>>,
  pub IngredientExp: i64,
}
impl Default for ShiftingCraftRecipeExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      DisplayOrder: 0,
      NotificationId: 0,
      ResultParcel: ParcelType::None,
      ResultId: 0,
      ResultAmount: 0,
      RequireItemId: 0,
      RequireItemAmount: 0,
      RequireGold: 0,
      IngredientTag: None,
      IngredientExp: 0,
    }
  }
}
impl ShiftingCraftRecipeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShiftingCraftRecipeExcel<'b>> {
    let Id = self.Id;
    let DisplayOrder = self.DisplayOrder;
    let NotificationId = self.NotificationId;
    let ResultParcel = self.ResultParcel;
    let ResultId = self.ResultId;
    let ResultAmount = self.ResultAmount;
    let RequireItemId = self.RequireItemId;
    let RequireItemAmount = self.RequireItemAmount;
    let RequireGold = self.RequireGold;
    let IngredientTag = self.IngredientTag.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IngredientExp = self.IngredientExp;
    ShiftingCraftRecipeExcel::create(_fbb, &ShiftingCraftRecipeExcelArgs{
      Id,
      DisplayOrder,
      NotificationId,
      ResultParcel,
      ResultId,
      ResultAmount,
      RequireItemId,
      RequireItemAmount,
      RequireGold,
      IngredientTag,
      IngredientExp,
    })
  }
}
