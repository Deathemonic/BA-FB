// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentSpineDialogOffsetExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentSpineDialogOffsetExcel GetRootAsEventContentSpineDialogOffsetExcel(ByteBuffer _bb) { return GetRootAsEventContentSpineDialogOffsetExcel(_bb, new EventContentSpineDialogOffsetExcel()); }
  public static EventContentSpineDialogOffsetExcel GetRootAsEventContentSpineDialogOffsetExcel(ByteBuffer _bb, EventContentSpineDialogOffsetExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentSpineDialogOffsetExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.EventContentType EventContentType { get { int o = __p.__offset(6); return o != 0 ? (Japan.EventContentType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EventContentType.Stage; } }
  public long CostumeUniqueId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float SpineOffsetX { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SpineOffsetY { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DialogOffsetX { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DialogOffsetY { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Japan.EventContentSpineDialogOffsetExcel> CreateEventContentSpineDialogOffsetExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Japan.EventContentType EventContentType = Japan.EventContentType.Stage,
      long CostumeUniqueId = 0,
      float SpineOffsetX = 0.0f,
      float SpineOffsetY = 0.0f,
      float DialogOffsetX = 0.0f,
      float DialogOffsetY = 0.0f) {
    builder.StartTable(7);
    EventContentSpineDialogOffsetExcel.AddCostumeUniqueId(builder, CostumeUniqueId);
    EventContentSpineDialogOffsetExcel.AddEventContentId(builder, EventContentId);
    EventContentSpineDialogOffsetExcel.AddDialogOffsetY(builder, DialogOffsetY);
    EventContentSpineDialogOffsetExcel.AddDialogOffsetX(builder, DialogOffsetX);
    EventContentSpineDialogOffsetExcel.AddSpineOffsetY(builder, SpineOffsetY);
    EventContentSpineDialogOffsetExcel.AddSpineOffsetX(builder, SpineOffsetX);
    EventContentSpineDialogOffsetExcel.AddEventContentType(builder, EventContentType);
    return EventContentSpineDialogOffsetExcel.EndEventContentSpineDialogOffsetExcel(builder);
  }

  public static void StartEventContentSpineDialogOffsetExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddEventContentType(FlatBufferBuilder builder, Japan.EventContentType eventContentType) { builder.AddInt(1, (int)eventContentType, 0); }
  public static void AddCostumeUniqueId(FlatBufferBuilder builder, long costumeUniqueId) { builder.AddLong(2, costumeUniqueId, 0); }
  public static void AddSpineOffsetX(FlatBufferBuilder builder, float spineOffsetX) { builder.AddFloat(3, spineOffsetX, 0.0f); }
  public static void AddSpineOffsetY(FlatBufferBuilder builder, float spineOffsetY) { builder.AddFloat(4, spineOffsetY, 0.0f); }
  public static void AddDialogOffsetX(FlatBufferBuilder builder, float dialogOffsetX) { builder.AddFloat(5, dialogOffsetX, 0.0f); }
  public static void AddDialogOffsetY(FlatBufferBuilder builder, float dialogOffsetY) { builder.AddFloat(6, dialogOffsetY, 0.0f); }
  public static Offset<Japan.EventContentSpineDialogOffsetExcel> EndEventContentSpineDialogOffsetExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentSpineDialogOffsetExcel>(o);
  }
  public EventContentSpineDialogOffsetExcelT UnPack() {
    var _o = new EventContentSpineDialogOffsetExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentSpineDialogOffsetExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentSpineDialogOffset");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)this.EventContentType, key) : this.EventContentType;
    _o.CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostumeUniqueId, key) : this.CostumeUniqueId;
    _o.SpineOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.SpineOffsetX, key) : this.SpineOffsetX;
    _o.SpineOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.SpineOffsetY, key) : this.SpineOffsetY;
    _o.DialogOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.DialogOffsetX, key) : this.DialogOffsetX;
    _o.DialogOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.DialogOffsetY, key) : this.DialogOffsetY;
  }
  public static Offset<Japan.EventContentSpineDialogOffsetExcel> Pack(FlatBufferBuilder builder, EventContentSpineDialogOffsetExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentSpineDialogOffsetExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentSpineDialogOffset");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)_o.EventContentType, key) : _o.EventContentType;
		var _CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostumeUniqueId, key) : _o.CostumeUniqueId;
		var _SpineOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.SpineOffsetX, key) : _o.SpineOffsetX;
		var _SpineOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.SpineOffsetY, key) : _o.SpineOffsetY;
		var _DialogOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.DialogOffsetX, key) : _o.DialogOffsetX;
		var _DialogOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.DialogOffsetY, key) : _o.DialogOffsetY;
    return CreateEventContentSpineDialogOffsetExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _EventContentType : _o.EventContentType,
      TableEncryptionService.UseEncryption ? _CostumeUniqueId : _o.CostumeUniqueId,
      TableEncryptionService.UseEncryption ? _SpineOffsetX : _o.SpineOffsetX,
      TableEncryptionService.UseEncryption ? _SpineOffsetY : _o.SpineOffsetY,
      TableEncryptionService.UseEncryption ? _DialogOffsetX : _o.DialogOffsetX,
      TableEncryptionService.UseEncryption ? _DialogOffsetY : _o.DialogOffsetY);
  }
}

public class EventContentSpineDialogOffsetExcelT
{
  public long EventContentId { get; set; }
  public Japan.EventContentType EventContentType { get; set; }
  public long CostumeUniqueId { get; set; }
  public float SpineOffsetX { get; set; }
  public float SpineOffsetY { get; set; }
  public float DialogOffsetX { get; set; }
  public float DialogOffsetY { get; set; }

  public EventContentSpineDialogOffsetExcelT() {
    this.EventContentId = 0;
    this.EventContentType = Japan.EventContentType.Stage;
    this.CostumeUniqueId = 0;
    this.SpineOffsetX = 0.0f;
    this.SpineOffsetY = 0.0f;
    this.DialogOffsetX = 0.0f;
    this.DialogOffsetY = 0.0f;
  }
}


static public class EventContentSpineDialogOffsetExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentType*/, 4 /*Japan.EventContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CostumeUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*SpineOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*SpineOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*DialogOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DialogOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
