// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentLobbyMenuExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentLobbyMenuExcel GetRootAsEventContentLobbyMenuExcel(ByteBuffer _bb) { return GetRootAsEventContentLobbyMenuExcel(_bb, new EventContentLobbyMenuExcel()); }
  public static EventContentLobbyMenuExcel GetRootAsEventContentLobbyMenuExcel(ByteBuffer _bb, EventContentLobbyMenuExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentLobbyMenuExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.EventContentType EventContentType { get { int o = __p.__offset(6); return o != 0 ? (Japan.EventContentType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EventContentType.Stage; } }
  public string IconSpriteName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconSpriteNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconSpriteNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconSpriteNameArray() { return __p.__vector_as_array<byte>(8); }
  public string ButtonText { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonTextBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetButtonTextBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetButtonTextArray() { return __p.__vector_as_array<byte>(10); }
  public int DisplayOrder { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float IconOffsetX { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float IconOffsetY { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string ReddotSpriteName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReddotSpriteNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetReddotSpriteNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetReddotSpriteNameArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<Japan.EventContentLobbyMenuExcel> CreateEventContentLobbyMenuExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Japan.EventContentType EventContentType = Japan.EventContentType.Stage,
      StringOffset IconSpriteNameOffset = default(StringOffset),
      StringOffset ButtonTextOffset = default(StringOffset),
      int DisplayOrder = 0,
      float IconOffsetX = 0.0f,
      float IconOffsetY = 0.0f,
      StringOffset ReddotSpriteNameOffset = default(StringOffset)) {
    builder.StartTable(8);
    EventContentLobbyMenuExcel.AddEventContentId(builder, EventContentId);
    EventContentLobbyMenuExcel.AddReddotSpriteName(builder, ReddotSpriteNameOffset);
    EventContentLobbyMenuExcel.AddIconOffsetY(builder, IconOffsetY);
    EventContentLobbyMenuExcel.AddIconOffsetX(builder, IconOffsetX);
    EventContentLobbyMenuExcel.AddDisplayOrder(builder, DisplayOrder);
    EventContentLobbyMenuExcel.AddButtonText(builder, ButtonTextOffset);
    EventContentLobbyMenuExcel.AddIconSpriteName(builder, IconSpriteNameOffset);
    EventContentLobbyMenuExcel.AddEventContentType(builder, EventContentType);
    return EventContentLobbyMenuExcel.EndEventContentLobbyMenuExcel(builder);
  }

  public static void StartEventContentLobbyMenuExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddEventContentType(FlatBufferBuilder builder, Japan.EventContentType eventContentType) { builder.AddInt(1, (int)eventContentType, 0); }
  public static void AddIconSpriteName(FlatBufferBuilder builder, StringOffset iconSpriteNameOffset) { builder.AddOffset(2, iconSpriteNameOffset.Value, 0); }
  public static void AddButtonText(FlatBufferBuilder builder, StringOffset buttonTextOffset) { builder.AddOffset(3, buttonTextOffset.Value, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, int displayOrder) { builder.AddInt(4, displayOrder, 0); }
  public static void AddIconOffsetX(FlatBufferBuilder builder, float iconOffsetX) { builder.AddFloat(5, iconOffsetX, 0.0f); }
  public static void AddIconOffsetY(FlatBufferBuilder builder, float iconOffsetY) { builder.AddFloat(6, iconOffsetY, 0.0f); }
  public static void AddReddotSpriteName(FlatBufferBuilder builder, StringOffset reddotSpriteNameOffset) { builder.AddOffset(7, reddotSpriteNameOffset.Value, 0); }
  public static Offset<Japan.EventContentLobbyMenuExcel> EndEventContentLobbyMenuExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentLobbyMenuExcel>(o);
  }
  public EventContentLobbyMenuExcelT UnPack() {
    var _o = new EventContentLobbyMenuExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentLobbyMenuExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentLobbyMenu");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)this.EventContentType, key) : this.EventContentType;
    _o.IconSpriteName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.IconSpriteName, key) : this.IconSpriteName;
    _o.ButtonText = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ButtonText, key) : this.ButtonText;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DisplayOrder, key) : this.DisplayOrder;
    _o.IconOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.IconOffsetX, key) : this.IconOffsetX;
    _o.IconOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.IconOffsetY, key) : this.IconOffsetY;
    _o.ReddotSpriteName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ReddotSpriteName, key) : this.ReddotSpriteName;
  }
  public static Offset<Japan.EventContentLobbyMenuExcel> Pack(FlatBufferBuilder builder, EventContentLobbyMenuExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentLobbyMenuExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentLobbyMenu");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)_o.EventContentType, key) : _o.EventContentType;
    var _IconSpriteName = _o.IconSpriteName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.IconSpriteName, key) : _o.IconSpriteName));
    var _ButtonText = _o.ButtonText == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ButtonText, key) : _o.ButtonText));
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DisplayOrder, key) : _o.DisplayOrder;
		var _IconOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.IconOffsetX, key) : _o.IconOffsetX;
		var _IconOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.IconOffsetY, key) : _o.IconOffsetY;
    var _ReddotSpriteName = _o.ReddotSpriteName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ReddotSpriteName, key) : _o.ReddotSpriteName));
    return CreateEventContentLobbyMenuExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _EventContentType : _o.EventContentType,
      _IconSpriteName,
      _ButtonText,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      TableEncryptionService.UseEncryption ? _IconOffsetX : _o.IconOffsetX,
      TableEncryptionService.UseEncryption ? _IconOffsetY : _o.IconOffsetY,
      _ReddotSpriteName);
  }
}

public class EventContentLobbyMenuExcelT
{
  public long EventContentId { get; set; }
  public Japan.EventContentType EventContentType { get; set; }
  public string IconSpriteName { get; set; }
  public string ButtonText { get; set; }
  public int DisplayOrder { get; set; }
  public float IconOffsetX { get; set; }
  public float IconOffsetY { get; set; }
  public string ReddotSpriteName { get; set; }

  public EventContentLobbyMenuExcelT() {
    this.EventContentId = 0;
    this.EventContentType = Japan.EventContentType.Stage;
    this.IconSpriteName = null;
    this.ButtonText = null;
    this.DisplayOrder = 0;
    this.IconOffsetX = 0.0f;
    this.IconOffsetY = 0.0f;
    this.ReddotSpriteName = null;
  }
}


static public class EventContentLobbyMenuExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentType*/, 4 /*Japan.EventContentType*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*IconSpriteName*/, false)
      && verifier.VerifyString(tablePos, 10 /*ButtonText*/, false)
      && verifier.VerifyField(tablePos, 12 /*DisplayOrder*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*IconOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*IconOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*ReddotSpriteName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
