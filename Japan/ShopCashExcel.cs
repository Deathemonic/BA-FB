// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ShopCashExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ShopCashExcel GetRootAsShopCashExcel(ByteBuffer _bb) { return GetRootAsShopCashExcel(_bb, new ShopCashExcel()); }
  public static ShopCashExcel GetRootAsShopCashExcel(ByteBuffer _bb, ShopCashExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShopCashExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CashProductId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.PurchaseSourceType PackageType { get { int o = __p.__offset(8); return o != 0 ? (Japan.PurchaseSourceType)__p.bb.GetInt(o + __p.bb_pos) : Japan.PurchaseSourceType.None; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string IconPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(12); }
  public long DisplayOrder { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RenewalDisplayOrder { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ProductCategory CategoryType { get { int o = __p.__offset(18); return o != 0 ? (Japan.ProductCategory)__p.bb.GetInt(o + __p.bb_pos) : Japan.ProductCategory.None; } }
  public Japan.ProductDisplayTag DisplayTag { get { int o = __p.__offset(20); return o != 0 ? (Japan.ProductDisplayTag)__p.bb.GetInt(o + __p.bb_pos) : Japan.ProductDisplayTag.None; } }
  public string SalePeriodFrom { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSalePeriodFromBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSalePeriodFromBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSalePeriodFromArray() { return __p.__vector_as_array<byte>(22); }
  public string SalePeriodTo { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSalePeriodToBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSalePeriodToBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSalePeriodToArray() { return __p.__vector_as_array<byte>(24); }
  public bool PeriodTag { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long AccountLevelLimit { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool AccountLevelHide { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long ClearMissionLimit { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ClearMissionHide { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string PurchaseReportEventName { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPurchaseReportEventNameBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetPurchaseReportEventNameBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetPurchaseReportEventNameArray() { return __p.__vector_as_array<byte>(36); }

  public static Offset<Japan.ShopCashExcel> CreateShopCashExcel(FlatBufferBuilder builder,
      long Id = 0,
      long CashProductId = 0,
      Japan.PurchaseSourceType PackageType = Japan.PurchaseSourceType.None,
      uint LocalizeEtcId = 0,
      StringOffset IconPathOffset = default(StringOffset),
      long DisplayOrder = 0,
      long RenewalDisplayOrder = 0,
      Japan.ProductCategory CategoryType = Japan.ProductCategory.None,
      Japan.ProductDisplayTag DisplayTag = Japan.ProductDisplayTag.None,
      StringOffset SalePeriodFromOffset = default(StringOffset),
      StringOffset SalePeriodToOffset = default(StringOffset),
      bool PeriodTag = false,
      long AccountLevelLimit = 0,
      bool AccountLevelHide = false,
      long ClearMissionLimit = 0,
      bool ClearMissionHide = false,
      StringOffset PurchaseReportEventNameOffset = default(StringOffset)) {
    builder.StartTable(17);
    ShopCashExcel.AddClearMissionLimit(builder, ClearMissionLimit);
    ShopCashExcel.AddAccountLevelLimit(builder, AccountLevelLimit);
    ShopCashExcel.AddRenewalDisplayOrder(builder, RenewalDisplayOrder);
    ShopCashExcel.AddDisplayOrder(builder, DisplayOrder);
    ShopCashExcel.AddCashProductId(builder, CashProductId);
    ShopCashExcel.AddId(builder, Id);
    ShopCashExcel.AddPurchaseReportEventName(builder, PurchaseReportEventNameOffset);
    ShopCashExcel.AddSalePeriodTo(builder, SalePeriodToOffset);
    ShopCashExcel.AddSalePeriodFrom(builder, SalePeriodFromOffset);
    ShopCashExcel.AddDisplayTag(builder, DisplayTag);
    ShopCashExcel.AddCategoryType(builder, CategoryType);
    ShopCashExcel.AddIconPath(builder, IconPathOffset);
    ShopCashExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    ShopCashExcel.AddPackageType(builder, PackageType);
    ShopCashExcel.AddClearMissionHide(builder, ClearMissionHide);
    ShopCashExcel.AddAccountLevelHide(builder, AccountLevelHide);
    ShopCashExcel.AddPeriodTag(builder, PeriodTag);
    return ShopCashExcel.EndShopCashExcel(builder);
  }

  public static void StartShopCashExcel(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddCashProductId(FlatBufferBuilder builder, long cashProductId) { builder.AddLong(1, cashProductId, 0); }
  public static void AddPackageType(FlatBufferBuilder builder, Japan.PurchaseSourceType packageType) { builder.AddInt(2, (int)packageType, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(3, localizeEtcId, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(4, iconPathOffset.Value, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(5, displayOrder, 0); }
  public static void AddRenewalDisplayOrder(FlatBufferBuilder builder, long renewalDisplayOrder) { builder.AddLong(6, renewalDisplayOrder, 0); }
  public static void AddCategoryType(FlatBufferBuilder builder, Japan.ProductCategory categoryType) { builder.AddInt(7, (int)categoryType, 0); }
  public static void AddDisplayTag(FlatBufferBuilder builder, Japan.ProductDisplayTag displayTag) { builder.AddInt(8, (int)displayTag, 0); }
  public static void AddSalePeriodFrom(FlatBufferBuilder builder, StringOffset salePeriodFromOffset) { builder.AddOffset(9, salePeriodFromOffset.Value, 0); }
  public static void AddSalePeriodTo(FlatBufferBuilder builder, StringOffset salePeriodToOffset) { builder.AddOffset(10, salePeriodToOffset.Value, 0); }
  public static void AddPeriodTag(FlatBufferBuilder builder, bool periodTag) { builder.AddBool(11, periodTag, false); }
  public static void AddAccountLevelLimit(FlatBufferBuilder builder, long accountLevelLimit) { builder.AddLong(12, accountLevelLimit, 0); }
  public static void AddAccountLevelHide(FlatBufferBuilder builder, bool accountLevelHide) { builder.AddBool(13, accountLevelHide, false); }
  public static void AddClearMissionLimit(FlatBufferBuilder builder, long clearMissionLimit) { builder.AddLong(14, clearMissionLimit, 0); }
  public static void AddClearMissionHide(FlatBufferBuilder builder, bool clearMissionHide) { builder.AddBool(15, clearMissionHide, false); }
  public static void AddPurchaseReportEventName(FlatBufferBuilder builder, StringOffset purchaseReportEventNameOffset) { builder.AddOffset(16, purchaseReportEventNameOffset.Value, 0); }
  public static Offset<Japan.ShopCashExcel> EndShopCashExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.ShopCashExcel>(o);
  }
  public ShopCashExcelT UnPack() {
    var _o = new ShopCashExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShopCashExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ShopCash");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.CashProductId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CashProductId, key) : this.CashProductId;
    _o.PackageType = TableEncryptionService.UseEncryption ? (Japan.PurchaseSourceType)TableEncryptionService.Convert((int)this.PackageType, key) : this.PackageType;
    _o.LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEtcId, key) : this.LocalizeEtcId;
    _o.IconPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.IconPath, key) : this.IconPath;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.RenewalDisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RenewalDisplayOrder, key) : this.RenewalDisplayOrder;
    _o.CategoryType = TableEncryptionService.UseEncryption ? (Japan.ProductCategory)TableEncryptionService.Convert((int)this.CategoryType, key) : this.CategoryType;
    _o.DisplayTag = TableEncryptionService.UseEncryption ? (Japan.ProductDisplayTag)TableEncryptionService.Convert((int)this.DisplayTag, key) : this.DisplayTag;
    _o.SalePeriodFrom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SalePeriodFrom, key) : this.SalePeriodFrom;
    _o.SalePeriodTo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SalePeriodTo, key) : this.SalePeriodTo;
    _o.PeriodTag = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.PeriodTag, key) : this.PeriodTag;
    _o.AccountLevelLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccountLevelLimit, key) : this.AccountLevelLimit;
    _o.AccountLevelHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.AccountLevelHide, key) : this.AccountLevelHide;
    _o.ClearMissionLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearMissionLimit, key) : this.ClearMissionLimit;
    _o.ClearMissionHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ClearMissionHide, key) : this.ClearMissionHide;
    _o.PurchaseReportEventName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PurchaseReportEventName, key) : this.PurchaseReportEventName;
  }
  public static Offset<Japan.ShopCashExcel> Pack(FlatBufferBuilder builder, ShopCashExcelT _o) {
    if (_o == null) return default(Offset<Japan.ShopCashExcel>);
		byte[] key = TableEncryptionService.CreateKey("ShopCash");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _CashProductId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CashProductId, key) : _o.CashProductId;
		var _PackageType = TableEncryptionService.UseEncryption ? (Japan.PurchaseSourceType)TableEncryptionService.Convert((int)_o.PackageType, key) : _o.PackageType;
		var _LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEtcId, key) : _o.LocalizeEtcId;
    var _IconPath = _o.IconPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.IconPath, key) : _o.IconPath));
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
		var _RenewalDisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RenewalDisplayOrder, key) : _o.RenewalDisplayOrder;
		var _CategoryType = TableEncryptionService.UseEncryption ? (Japan.ProductCategory)TableEncryptionService.Convert((int)_o.CategoryType, key) : _o.CategoryType;
		var _DisplayTag = TableEncryptionService.UseEncryption ? (Japan.ProductDisplayTag)TableEncryptionService.Convert((int)_o.DisplayTag, key) : _o.DisplayTag;
    var _SalePeriodFrom = _o.SalePeriodFrom == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SalePeriodFrom, key) : _o.SalePeriodFrom));
    var _SalePeriodTo = _o.SalePeriodTo == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SalePeriodTo, key) : _o.SalePeriodTo));
		var _PeriodTag = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.PeriodTag, key) : _o.PeriodTag;
		var _AccountLevelLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccountLevelLimit, key) : _o.AccountLevelLimit;
		var _AccountLevelHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.AccountLevelHide, key) : _o.AccountLevelHide;
		var _ClearMissionLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearMissionLimit, key) : _o.ClearMissionLimit;
		var _ClearMissionHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ClearMissionHide, key) : _o.ClearMissionHide;
    var _PurchaseReportEventName = _o.PurchaseReportEventName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PurchaseReportEventName, key) : _o.PurchaseReportEventName));
    return CreateShopCashExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _CashProductId : _o.CashProductId,
      TableEncryptionService.UseEncryption ? _PackageType : _o.PackageType,
      TableEncryptionService.UseEncryption ? _LocalizeEtcId : _o.LocalizeEtcId,
      _IconPath,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      TableEncryptionService.UseEncryption ? _RenewalDisplayOrder : _o.RenewalDisplayOrder,
      TableEncryptionService.UseEncryption ? _CategoryType : _o.CategoryType,
      TableEncryptionService.UseEncryption ? _DisplayTag : _o.DisplayTag,
      _SalePeriodFrom,
      _SalePeriodTo,
      TableEncryptionService.UseEncryption ? _PeriodTag : _o.PeriodTag,
      TableEncryptionService.UseEncryption ? _AccountLevelLimit : _o.AccountLevelLimit,
      TableEncryptionService.UseEncryption ? _AccountLevelHide : _o.AccountLevelHide,
      TableEncryptionService.UseEncryption ? _ClearMissionLimit : _o.ClearMissionLimit,
      TableEncryptionService.UseEncryption ? _ClearMissionHide : _o.ClearMissionHide,
      _PurchaseReportEventName);
  }
}

public class ShopCashExcelT
{
  public long Id { get; set; }
  public long CashProductId { get; set; }
  public Japan.PurchaseSourceType PackageType { get; set; }
  public uint LocalizeEtcId { get; set; }
  public string IconPath { get; set; }
  public long DisplayOrder { get; set; }
  public long RenewalDisplayOrder { get; set; }
  public Japan.ProductCategory CategoryType { get; set; }
  public Japan.ProductDisplayTag DisplayTag { get; set; }
  public string SalePeriodFrom { get; set; }
  public string SalePeriodTo { get; set; }
  public bool PeriodTag { get; set; }
  public long AccountLevelLimit { get; set; }
  public bool AccountLevelHide { get; set; }
  public long ClearMissionLimit { get; set; }
  public bool ClearMissionHide { get; set; }
  public string PurchaseReportEventName { get; set; }

  public ShopCashExcelT() {
    this.Id = 0;
    this.CashProductId = 0;
    this.PackageType = Japan.PurchaseSourceType.None;
    this.LocalizeEtcId = 0;
    this.IconPath = null;
    this.DisplayOrder = 0;
    this.RenewalDisplayOrder = 0;
    this.CategoryType = Japan.ProductCategory.None;
    this.DisplayTag = Japan.ProductDisplayTag.None;
    this.SalePeriodFrom = null;
    this.SalePeriodTo = null;
    this.PeriodTag = false;
    this.AccountLevelLimit = 0;
    this.AccountLevelHide = false;
    this.ClearMissionLimit = 0;
    this.ClearMissionHide = false;
    this.PurchaseReportEventName = null;
  }
}


static public class ShopCashExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CashProductId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PackageType*/, 4 /*Japan.PurchaseSourceType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*IconPath*/, false)
      && verifier.VerifyField(tablePos, 14 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*RenewalDisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*CategoryType*/, 4 /*Japan.ProductCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*DisplayTag*/, 4 /*Japan.ProductDisplayTag*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*SalePeriodFrom*/, false)
      && verifier.VerifyString(tablePos, 24 /*SalePeriodTo*/, false)
      && verifier.VerifyField(tablePos, 26 /*PeriodTag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*AccountLevelLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*AccountLevelHide*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*ClearMissionLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*ClearMissionHide*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 36 /*PurchaseReportEventName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
