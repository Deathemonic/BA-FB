// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGInfoExcel GetRootAsMinigameCCGInfoExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGInfoExcel(_bb, new MinigameCCGInfoExcel()); }
  public static MinigameCCGInfoExcel GetRootAsMinigameCCGInfoExcel(ByteBuffer _bb, MinigameCCGInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CCGId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType CostParcelType { get { int o = __p.__offset(8); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long CostParcelId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CostParcelAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CardBackPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCardBackPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCardBackPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCardBackPathArray() { return __p.__vector_as_array<byte>(14); }
  public Japan.ParcelType PerkCostParcelType { get { int o = __p.__offset(16); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long PerkCostParcelId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.MinigameCCGInfoExcel> CreateMinigameCCGInfoExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long CCGId = 0,
      Japan.ParcelType CostParcelType = Japan.ParcelType.None,
      long CostParcelId = 0,
      int CostParcelAmount = 0,
      StringOffset CardBackPathOffset = default(StringOffset),
      Japan.ParcelType PerkCostParcelType = Japan.ParcelType.None,
      long PerkCostParcelId = 0) {
    builder.StartTable(8);
    MinigameCCGInfoExcel.AddPerkCostParcelId(builder, PerkCostParcelId);
    MinigameCCGInfoExcel.AddCostParcelId(builder, CostParcelId);
    MinigameCCGInfoExcel.AddCCGId(builder, CCGId);
    MinigameCCGInfoExcel.AddEventContentId(builder, EventContentId);
    MinigameCCGInfoExcel.AddPerkCostParcelType(builder, PerkCostParcelType);
    MinigameCCGInfoExcel.AddCardBackPath(builder, CardBackPathOffset);
    MinigameCCGInfoExcel.AddCostParcelAmount(builder, CostParcelAmount);
    MinigameCCGInfoExcel.AddCostParcelType(builder, CostParcelType);
    return MinigameCCGInfoExcel.EndMinigameCCGInfoExcel(builder);
  }

  public static void StartMinigameCCGInfoExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddCCGId(FlatBufferBuilder builder, long cCGId) { builder.AddLong(1, cCGId, 0); }
  public static void AddCostParcelType(FlatBufferBuilder builder, Japan.ParcelType costParcelType) { builder.AddInt(2, (int)costParcelType, 0); }
  public static void AddCostParcelId(FlatBufferBuilder builder, long costParcelId) { builder.AddLong(3, costParcelId, 0); }
  public static void AddCostParcelAmount(FlatBufferBuilder builder, int costParcelAmount) { builder.AddInt(4, costParcelAmount, 0); }
  public static void AddCardBackPath(FlatBufferBuilder builder, StringOffset cardBackPathOffset) { builder.AddOffset(5, cardBackPathOffset.Value, 0); }
  public static void AddPerkCostParcelType(FlatBufferBuilder builder, Japan.ParcelType perkCostParcelType) { builder.AddInt(6, (int)perkCostParcelType, 0); }
  public static void AddPerkCostParcelId(FlatBufferBuilder builder, long perkCostParcelId) { builder.AddLong(7, perkCostParcelId, 0); }
  public static Offset<Japan.MinigameCCGInfoExcel> EndMinigameCCGInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGInfoExcel>(o);
  }
  public MinigameCCGInfoExcelT UnPack() {
    var _o = new MinigameCCGInfoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGInfoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGInfo");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CCGId, key) : this.CCGId;
    _o.CostParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.CostParcelType, key) : this.CostParcelType;
    _o.CostParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostParcelId, key) : this.CostParcelId;
    _o.CostParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CostParcelAmount, key) : this.CostParcelAmount;
    _o.CardBackPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CardBackPath, key) : this.CardBackPath;
    _o.PerkCostParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.PerkCostParcelType, key) : this.PerkCostParcelType;
    _o.PerkCostParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PerkCostParcelId, key) : this.PerkCostParcelId;
  }
  public static Offset<Japan.MinigameCCGInfoExcel> Pack(FlatBufferBuilder builder, MinigameCCGInfoExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGInfoExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGInfo");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CCGId, key) : _o.CCGId;
		var _CostParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.CostParcelType, key) : _o.CostParcelType;
		var _CostParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostParcelId, key) : _o.CostParcelId;
		var _CostParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CostParcelAmount, key) : _o.CostParcelAmount;
    var _CardBackPath = _o.CardBackPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CardBackPath, key) : _o.CardBackPath));
		var _PerkCostParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.PerkCostParcelType, key) : _o.PerkCostParcelType;
		var _PerkCostParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PerkCostParcelId, key) : _o.PerkCostParcelId;
    return CreateMinigameCCGInfoExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _CCGId : _o.CCGId,
      TableEncryptionService.UseEncryption ? _CostParcelType : _o.CostParcelType,
      TableEncryptionService.UseEncryption ? _CostParcelId : _o.CostParcelId,
      TableEncryptionService.UseEncryption ? _CostParcelAmount : _o.CostParcelAmount,
      _CardBackPath,
      TableEncryptionService.UseEncryption ? _PerkCostParcelType : _o.PerkCostParcelType,
      TableEncryptionService.UseEncryption ? _PerkCostParcelId : _o.PerkCostParcelId);
  }
}

public class MinigameCCGInfoExcelT
{
  public long EventContentId { get; set; }
  public long CCGId { get; set; }
  public Japan.ParcelType CostParcelType { get; set; }
  public long CostParcelId { get; set; }
  public int CostParcelAmount { get; set; }
  public string CardBackPath { get; set; }
  public Japan.ParcelType PerkCostParcelType { get; set; }
  public long PerkCostParcelId { get; set; }

  public MinigameCCGInfoExcelT() {
    this.EventContentId = 0;
    this.CCGId = 0;
    this.CostParcelType = Japan.ParcelType.None;
    this.CostParcelId = 0;
    this.CostParcelAmount = 0;
    this.CardBackPath = null;
    this.PerkCostParcelType = Japan.ParcelType.None;
    this.PerkCostParcelId = 0;
  }
}


static public class MinigameCCGInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CCGId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CostParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CostParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*CostParcelAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*CardBackPath*/, false)
      && verifier.VerifyField(tablePos, 16 /*PerkCostParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*PerkCostParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
