// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGCardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGCardExcel GetRootAsMinigameCCGCardExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGCardExcel(_bb, new MinigameCCGCardExcel()); }
  public static MinigameCCGCardExcel GetRootAsMinigameCCGCardExcel(ByteBuffer _bb, MinigameCCGCardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGCardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.CCGCardType Type { get { int o = __p.__offset(6); return o != 0 ? (Japan.CCGCardType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CCGCardType.None; } }
  public bool IsDisposal { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ActiveSkillId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActiveSkillCost { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ActiveSkilleCostVisible { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int PassiveSkillId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PassiveSkillIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPassiveSkillIdBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetPassiveSkillIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetPassiveSkillIdArray() { return __p.__vector_as_array<int>(16); }
  public int PassiveActivateCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint Name { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Description { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(22); }
  public string ImagePath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetImagePathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetImagePathArray() { return __p.__vector_as_array<byte>(24); }
  public string UIImagePath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUIImagePathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetUIImagePathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetUIImagePathArray() { return __p.__vector_as_array<byte>(26); }
  public Japan.CCGTagType Tags(int j) { int o = __p.__offset(28); return o != 0 ? (Japan.CCGTagType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.CCGTagType)0; }
  public int TagsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.CCGTagType> GetTagsBytes() { return __p.__vector_as_span<Japan.CCGTagType>(28, 4); }
#else
  public ArraySegment<byte>? GetTagsBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public Japan.CCGTagType[] GetTagsArray() { int o = __p.__offset(28); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.CCGTagType[] a = new Japan.CCGTagType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.CCGTagType)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<Japan.MinigameCCGCardExcel> CreateMinigameCCGCardExcel(FlatBufferBuilder builder,
      long Id = 0,
      Japan.CCGCardType Type = Japan.CCGCardType.None,
      bool IsDisposal = false,
      int ActiveSkillId = 0,
      int ActiveSkillCost = 0,
      bool ActiveSkilleCostVisible = false,
      VectorOffset PassiveSkillIdOffset = default(VectorOffset),
      int PassiveActivateCount = 0,
      uint Name = 0,
      StringOffset DescriptionOffset = default(StringOffset),
      StringOffset ImagePathOffset = default(StringOffset),
      StringOffset UIImagePathOffset = default(StringOffset),
      VectorOffset TagsOffset = default(VectorOffset)) {
    builder.StartTable(13);
    MinigameCCGCardExcel.AddId(builder, Id);
    MinigameCCGCardExcel.AddTags(builder, TagsOffset);
    MinigameCCGCardExcel.AddUIImagePath(builder, UIImagePathOffset);
    MinigameCCGCardExcel.AddImagePath(builder, ImagePathOffset);
    MinigameCCGCardExcel.AddDescription(builder, DescriptionOffset);
    MinigameCCGCardExcel.AddName(builder, Name);
    MinigameCCGCardExcel.AddPassiveActivateCount(builder, PassiveActivateCount);
    MinigameCCGCardExcel.AddPassiveSkillId(builder, PassiveSkillIdOffset);
    MinigameCCGCardExcel.AddActiveSkillCost(builder, ActiveSkillCost);
    MinigameCCGCardExcel.AddActiveSkillId(builder, ActiveSkillId);
    MinigameCCGCardExcel.AddType(builder, Type);
    MinigameCCGCardExcel.AddActiveSkilleCostVisible(builder, ActiveSkilleCostVisible);
    MinigameCCGCardExcel.AddIsDisposal(builder, IsDisposal);
    return MinigameCCGCardExcel.EndMinigameCCGCardExcel(builder);
  }

  public static void StartMinigameCCGCardExcel(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, Japan.CCGCardType type) { builder.AddInt(1, (int)type, 0); }
  public static void AddIsDisposal(FlatBufferBuilder builder, bool isDisposal) { builder.AddBool(2, isDisposal, false); }
  public static void AddActiveSkillId(FlatBufferBuilder builder, int activeSkillId) { builder.AddInt(3, activeSkillId, 0); }
  public static void AddActiveSkillCost(FlatBufferBuilder builder, int activeSkillCost) { builder.AddInt(4, activeSkillCost, 0); }
  public static void AddActiveSkilleCostVisible(FlatBufferBuilder builder, bool activeSkilleCostVisible) { builder.AddBool(5, activeSkilleCostVisible, false); }
  public static void AddPassiveSkillId(FlatBufferBuilder builder, VectorOffset passiveSkillIdOffset) { builder.AddOffset(6, passiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreatePassiveSkillIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPassiveActivateCount(FlatBufferBuilder builder, int passiveActivateCount) { builder.AddInt(7, passiveActivateCount, 0); }
  public static void AddName(FlatBufferBuilder builder, uint name) { builder.AddUint(8, name, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(9, descriptionOffset.Value, 0); }
  public static void AddImagePath(FlatBufferBuilder builder, StringOffset imagePathOffset) { builder.AddOffset(10, imagePathOffset.Value, 0); }
  public static void AddUIImagePath(FlatBufferBuilder builder, StringOffset uIImagePathOffset) { builder.AddOffset(11, uIImagePathOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(12, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, Japan.CCGTagType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, Japan.CCGTagType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.CCGTagType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.CCGTagType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Japan.MinigameCCGCardExcel> EndMinigameCCGCardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGCardExcel>(o);
  }
  public MinigameCCGCardExcelT UnPack() {
    var _o = new MinigameCCGCardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGCardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGCard");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Type = TableEncryptionService.UseEncryption ? (Japan.CCGCardType)TableEncryptionService.Convert((int)this.Type, key) : this.Type;
    _o.IsDisposal = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsDisposal, key) : this.IsDisposal;
    _o.ActiveSkillId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ActiveSkillId, key) : this.ActiveSkillId;
    _o.ActiveSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ActiveSkillCost, key) : this.ActiveSkillCost;
    _o.ActiveSkilleCostVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ActiveSkilleCostVisible, key) : this.ActiveSkilleCostVisible;
    _o.PassiveSkillId = new List<int>();
    for (var _j = 0; _j < this.PassiveSkillIdLength; ++_j) {_o.PassiveSkillId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.PassiveSkillId(_j), key) : this.PassiveSkillId(_j));}
    _o.PassiveActivateCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.PassiveActivateCount, key) : this.PassiveActivateCount;
    _o.Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Name, key) : this.Name;
    _o.Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Description, key) : this.Description;
    _o.ImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePath, key) : this.ImagePath;
    _o.UIImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.UIImagePath, key) : this.UIImagePath;
    _o.Tags = new List<Japan.CCGTagType>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(TableEncryptionService.UseEncryption ? (Japan.CCGTagType)TableEncryptionService.Convert((int)this.Tags(_j), key) : this.Tags(_j));}
  }
  public static Offset<Japan.MinigameCCGCardExcel> Pack(FlatBufferBuilder builder, MinigameCCGCardExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGCardExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGCard");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Type = TableEncryptionService.UseEncryption ? (Japan.CCGCardType)TableEncryptionService.Convert((int)_o.Type, key) : _o.Type;
		var _IsDisposal = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsDisposal, key) : _o.IsDisposal;
		var _ActiveSkillId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ActiveSkillId, key) : _o.ActiveSkillId;
		var _ActiveSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ActiveSkillCost, key) : _o.ActiveSkillCost;
		var _ActiveSkilleCostVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ActiveSkilleCostVisible, key) : _o.ActiveSkilleCostVisible;
    var _PassiveSkillId = default(VectorOffset);
    if (_o.PassiveSkillId != null) {
      var __PassiveSkillId = _o.PassiveSkillId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _PassiveSkillId = CreatePassiveSkillIdVector(builder, __PassiveSkillId);
    }
		var _PassiveActivateCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.PassiveActivateCount, key) : _o.PassiveActivateCount;
		var _Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Name, key) : _o.Name;
    var _Description = _o.Description == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Description, key) : _o.Description));
    var _ImagePath = _o.ImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePath, key) : _o.ImagePath));
    var _UIImagePath = _o.UIImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.UIImagePath, key) : _o.UIImagePath));
    var _Tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __Tags = _o.Tags.Select(x => TableEncryptionService.UseEncryption ? (Japan.CCGTagType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _Tags = CreateTagsVector(builder, __Tags);
    }
    return CreateMinigameCCGCardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Type : _o.Type,
      TableEncryptionService.UseEncryption ? _IsDisposal : _o.IsDisposal,
      TableEncryptionService.UseEncryption ? _ActiveSkillId : _o.ActiveSkillId,
      TableEncryptionService.UseEncryption ? _ActiveSkillCost : _o.ActiveSkillCost,
      TableEncryptionService.UseEncryption ? _ActiveSkilleCostVisible : _o.ActiveSkilleCostVisible,
      _PassiveSkillId,
      TableEncryptionService.UseEncryption ? _PassiveActivateCount : _o.PassiveActivateCount,
      TableEncryptionService.UseEncryption ? _Name : _o.Name,
      _Description,
      _ImagePath,
      _UIImagePath,
      _Tags);
  }
}

public class MinigameCCGCardExcelT
{
  public long Id { get; set; }
  public Japan.CCGCardType Type { get; set; }
  public bool IsDisposal { get; set; }
  public int ActiveSkillId { get; set; }
  public int ActiveSkillCost { get; set; }
  public bool ActiveSkilleCostVisible { get; set; }
  public List<int> PassiveSkillId { get; set; }
  public int PassiveActivateCount { get; set; }
  public uint Name { get; set; }
  public string Description { get; set; }
  public string ImagePath { get; set; }
  public string UIImagePath { get; set; }
  public List<Japan.CCGTagType> Tags { get; set; }

  public MinigameCCGCardExcelT() {
    this.Id = 0;
    this.Type = Japan.CCGCardType.None;
    this.IsDisposal = false;
    this.ActiveSkillId = 0;
    this.ActiveSkillCost = 0;
    this.ActiveSkilleCostVisible = false;
    this.PassiveSkillId = null;
    this.PassiveActivateCount = 0;
    this.Name = 0;
    this.Description = null;
    this.ImagePath = null;
    this.UIImagePath = null;
    this.Tags = null;
  }
}


static public class MinigameCCGCardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*Japan.CCGCardType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsDisposal*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*ActiveSkillId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ActiveSkillCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ActiveSkilleCostVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*PassiveSkillId*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 18 /*PassiveActivateCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Name*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*Description*/, false)
      && verifier.VerifyString(tablePos, 24 /*ImagePath*/, false)
      && verifier.VerifyString(tablePos, 26 /*UIImagePath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*Tags*/, 4 /*Japan.CCGTagType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
