// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct LevelExpMasterCoinExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static LevelExpMasterCoinExcel GetRootAsLevelExpMasterCoinExcel(ByteBuffer _bb) { return GetRootAsLevelExpMasterCoinExcel(_bb, new LevelExpMasterCoinExcel()); }
  public static LevelExpMasterCoinExcel GetRootAsLevelExpMasterCoinExcel(ByteBuffer _bb, LevelExpMasterCoinExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LevelExpMasterCoinExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MinLevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ratio { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Japan.LevelExpMasterCoinExcel> CreateLevelExpMasterCoinExcel(FlatBufferBuilder builder,
      long Id = 0,
      int MinLevel = 0,
      int MaxLevel = 0,
      int Ratio = 0) {
    builder.StartTable(4);
    LevelExpMasterCoinExcel.AddId(builder, Id);
    LevelExpMasterCoinExcel.AddRatio(builder, Ratio);
    LevelExpMasterCoinExcel.AddMaxLevel(builder, MaxLevel);
    LevelExpMasterCoinExcel.AddMinLevel(builder, MinLevel);
    return LevelExpMasterCoinExcel.EndLevelExpMasterCoinExcel(builder);
  }

  public static void StartLevelExpMasterCoinExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddMinLevel(FlatBufferBuilder builder, int minLevel) { builder.AddInt(1, minLevel, 0); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int maxLevel) { builder.AddInt(2, maxLevel, 0); }
  public static void AddRatio(FlatBufferBuilder builder, int ratio) { builder.AddInt(3, ratio, 0); }
  public static Offset<Japan.LevelExpMasterCoinExcel> EndLevelExpMasterCoinExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.LevelExpMasterCoinExcel>(o);
  }
  public LevelExpMasterCoinExcelT UnPack() {
    var _o = new LevelExpMasterCoinExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LevelExpMasterCoinExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("LevelExpMasterCoin");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.MinLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MinLevel, key) : this.MinLevel;
    _o.MaxLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxLevel, key) : this.MaxLevel;
    _o.Ratio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Ratio, key) : this.Ratio;
  }
  public static Offset<Japan.LevelExpMasterCoinExcel> Pack(FlatBufferBuilder builder, LevelExpMasterCoinExcelT _o) {
    if (_o == null) return default(Offset<Japan.LevelExpMasterCoinExcel>);
		byte[] key = TableEncryptionService.CreateKey("LevelExpMasterCoin");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _MinLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MinLevel, key) : _o.MinLevel;
		var _MaxLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxLevel, key) : _o.MaxLevel;
		var _Ratio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Ratio, key) : _o.Ratio;
    return CreateLevelExpMasterCoinExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _MinLevel : _o.MinLevel,
      TableEncryptionService.UseEncryption ? _MaxLevel : _o.MaxLevel,
      TableEncryptionService.UseEncryption ? _Ratio : _o.Ratio);
  }
}

public class LevelExpMasterCoinExcelT
{
  public long Id { get; set; }
  public int MinLevel { get; set; }
  public int MaxLevel { get; set; }
  public int Ratio { get; set; }

  public LevelExpMasterCoinExcelT() {
    this.Id = 0;
    this.MinLevel = 0;
    this.MaxLevel = 0;
    this.Ratio = 0;
  }
}


static public class LevelExpMasterCoinExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*MinLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MaxLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Ratio*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
