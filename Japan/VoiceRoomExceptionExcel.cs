// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct VoiceRoomExceptionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static VoiceRoomExceptionExcel GetRootAsVoiceRoomExceptionExcel(ByteBuffer _bb) { return GetRootAsVoiceRoomExceptionExcel(_bb, new VoiceRoomExceptionExcel()); }
  public static VoiceRoomExceptionExcel GetRootAsVoiceRoomExceptionExcel(ByteBuffer _bb, VoiceRoomExceptionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VoiceRoomExceptionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CostumeUniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.CVPrintType LinkedCharacterVoicePrintType { get { int o = __p.__offset(6); return o != 0 ? (Japan.CVPrintType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CVPrintType.CharacterOverwrite; } }
  public long LinkedCostumeUniqueId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.VoiceRoomExceptionExcel> CreateVoiceRoomExceptionExcel(FlatBufferBuilder builder,
      long CostumeUniqueId = 0,
      Japan.CVPrintType LinkedCharacterVoicePrintType = Japan.CVPrintType.CharacterOverwrite,
      long LinkedCostumeUniqueId = 0) {
    builder.StartTable(3);
    VoiceRoomExceptionExcel.AddLinkedCostumeUniqueId(builder, LinkedCostumeUniqueId);
    VoiceRoomExceptionExcel.AddCostumeUniqueId(builder, CostumeUniqueId);
    VoiceRoomExceptionExcel.AddLinkedCharacterVoicePrintType(builder, LinkedCharacterVoicePrintType);
    return VoiceRoomExceptionExcel.EndVoiceRoomExceptionExcel(builder);
  }

  public static void StartVoiceRoomExceptionExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCostumeUniqueId(FlatBufferBuilder builder, long costumeUniqueId) { builder.AddLong(0, costumeUniqueId, 0); }
  public static void AddLinkedCharacterVoicePrintType(FlatBufferBuilder builder, Japan.CVPrintType linkedCharacterVoicePrintType) { builder.AddInt(1, (int)linkedCharacterVoicePrintType, 0); }
  public static void AddLinkedCostumeUniqueId(FlatBufferBuilder builder, long linkedCostumeUniqueId) { builder.AddLong(2, linkedCostumeUniqueId, 0); }
  public static Offset<Japan.VoiceRoomExceptionExcel> EndVoiceRoomExceptionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.VoiceRoomExceptionExcel>(o);
  }
  public VoiceRoomExceptionExcelT UnPack() {
    var _o = new VoiceRoomExceptionExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VoiceRoomExceptionExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("VoiceRoomException");
    _o.CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostumeUniqueId, key) : this.CostumeUniqueId;
    _o.LinkedCharacterVoicePrintType = TableEncryptionService.UseEncryption ? (Japan.CVPrintType)TableEncryptionService.Convert((int)this.LinkedCharacterVoicePrintType, key) : this.LinkedCharacterVoicePrintType;
    _o.LinkedCostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LinkedCostumeUniqueId, key) : this.LinkedCostumeUniqueId;
  }
  public static Offset<Japan.VoiceRoomExceptionExcel> Pack(FlatBufferBuilder builder, VoiceRoomExceptionExcelT _o) {
    if (_o == null) return default(Offset<Japan.VoiceRoomExceptionExcel>);
		byte[] key = TableEncryptionService.CreateKey("VoiceRoomException");
		var _CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostumeUniqueId, key) : _o.CostumeUniqueId;
		var _LinkedCharacterVoicePrintType = TableEncryptionService.UseEncryption ? (Japan.CVPrintType)TableEncryptionService.Convert((int)_o.LinkedCharacterVoicePrintType, key) : _o.LinkedCharacterVoicePrintType;
		var _LinkedCostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LinkedCostumeUniqueId, key) : _o.LinkedCostumeUniqueId;
    return CreateVoiceRoomExceptionExcel(
      builder,
      TableEncryptionService.UseEncryption ? _CostumeUniqueId : _o.CostumeUniqueId,
      TableEncryptionService.UseEncryption ? _LinkedCharacterVoicePrintType : _o.LinkedCharacterVoicePrintType,
      TableEncryptionService.UseEncryption ? _LinkedCostumeUniqueId : _o.LinkedCostumeUniqueId);
  }
}

public class VoiceRoomExceptionExcelT
{
  public long CostumeUniqueId { get; set; }
  public Japan.CVPrintType LinkedCharacterVoicePrintType { get; set; }
  public long LinkedCostumeUniqueId { get; set; }

  public VoiceRoomExceptionExcelT() {
    this.CostumeUniqueId = 0;
    this.LinkedCharacterVoicePrintType = Japan.CVPrintType.CharacterOverwrite;
    this.LinkedCostumeUniqueId = 0;
  }
}


static public class VoiceRoomExceptionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CostumeUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*LinkedCharacterVoicePrintType*/, 4 /*Japan.CVPrintType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*LinkedCostumeUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
