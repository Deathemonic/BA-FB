// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattlePassExpLimitExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassExpLimitExcel GetRootAsBattlePassExpLimitExcel(ByteBuffer _bb) { return GetRootAsBattlePassExpLimitExcel(_bb, new BattlePassExpLimitExcel()); }
  public static BattlePassExpLimitExcel GetRootAsBattlePassExpLimitExcel(ByteBuffer _bb, BattlePassExpLimitExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassExpLimitExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long BattlePassId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string LimitStartTime { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLimitStartTimeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLimitStartTimeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLimitStartTimeArray() { return __p.__vector_as_array<byte>(6); }
  public string LimitEndTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLimitEndTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLimitEndTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLimitEndTimeArray() { return __p.__vector_as_array<byte>(8); }
  public long ExpLimitAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.BattlePassExpLimitExcel> CreateBattlePassExpLimitExcel(FlatBufferBuilder builder,
      long BattlePassId = 0,
      StringOffset LimitStartTimeOffset = default(StringOffset),
      StringOffset LimitEndTimeOffset = default(StringOffset),
      long ExpLimitAmount = 0) {
    builder.StartTable(4);
    BattlePassExpLimitExcel.AddExpLimitAmount(builder, ExpLimitAmount);
    BattlePassExpLimitExcel.AddBattlePassId(builder, BattlePassId);
    BattlePassExpLimitExcel.AddLimitEndTime(builder, LimitEndTimeOffset);
    BattlePassExpLimitExcel.AddLimitStartTime(builder, LimitStartTimeOffset);
    return BattlePassExpLimitExcel.EndBattlePassExpLimitExcel(builder);
  }

  public static void StartBattlePassExpLimitExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddBattlePassId(FlatBufferBuilder builder, long battlePassId) { builder.AddLong(0, battlePassId, 0); }
  public static void AddLimitStartTime(FlatBufferBuilder builder, StringOffset limitStartTimeOffset) { builder.AddOffset(1, limitStartTimeOffset.Value, 0); }
  public static void AddLimitEndTime(FlatBufferBuilder builder, StringOffset limitEndTimeOffset) { builder.AddOffset(2, limitEndTimeOffset.Value, 0); }
  public static void AddExpLimitAmount(FlatBufferBuilder builder, long expLimitAmount) { builder.AddLong(3, expLimitAmount, 0); }
  public static Offset<Japan.BattlePassExpLimitExcel> EndBattlePassExpLimitExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.BattlePassExpLimitExcel>(o);
  }
  public BattlePassExpLimitExcelT UnPack() {
    var _o = new BattlePassExpLimitExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassExpLimitExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BattlePassExpLimit");
    _o.BattlePassId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattlePassId, key) : this.BattlePassId;
    _o.LimitStartTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LimitStartTime, key) : this.LimitStartTime;
    _o.LimitEndTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LimitEndTime, key) : this.LimitEndTime;
    _o.ExpLimitAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExpLimitAmount, key) : this.ExpLimitAmount;
  }
  public static Offset<Japan.BattlePassExpLimitExcel> Pack(FlatBufferBuilder builder, BattlePassExpLimitExcelT _o) {
    if (_o == null) return default(Offset<Japan.BattlePassExpLimitExcel>);
		byte[] key = TableEncryptionService.CreateKey("BattlePassExpLimit");
		var _BattlePassId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattlePassId, key) : _o.BattlePassId;
    var _LimitStartTime = _o.LimitStartTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LimitStartTime, key) : _o.LimitStartTime));
    var _LimitEndTime = _o.LimitEndTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LimitEndTime, key) : _o.LimitEndTime));
		var _ExpLimitAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExpLimitAmount, key) : _o.ExpLimitAmount;
    return CreateBattlePassExpLimitExcel(
      builder,
      TableEncryptionService.UseEncryption ? _BattlePassId : _o.BattlePassId,
      _LimitStartTime,
      _LimitEndTime,
      TableEncryptionService.UseEncryption ? _ExpLimitAmount : _o.ExpLimitAmount);
  }
}

public class BattlePassExpLimitExcelT
{
  public long BattlePassId { get; set; }
  public string LimitStartTime { get; set; }
  public string LimitEndTime { get; set; }
  public long ExpLimitAmount { get; set; }

  public BattlePassExpLimitExcelT() {
    this.BattlePassId = 0;
    this.LimitStartTime = null;
    this.LimitEndTime = null;
    this.ExpLimitAmount = 0;
  }
}


static public class BattlePassExpLimitExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BattlePassId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*LimitStartTime*/, false)
      && verifier.VerifyString(tablePos, 8 /*LimitEndTime*/, false)
      && verifier.VerifyField(tablePos, 10 /*ExpLimitAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
