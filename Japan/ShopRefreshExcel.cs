// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ShopRefreshExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ShopRefreshExcel GetRootAsShopRefreshExcel(ByteBuffer _bb) { return GetRootAsShopRefreshExcel(_bb, new ShopRefreshExcel()); }
  public static ShopRefreshExcel GetRootAsShopRefreshExcel(ByteBuffer _bb, ShopRefreshExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShopRefreshExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool IsLegacy { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long GoodsId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsBundle { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Japan.ShopPurchasePopupType ShopPurchasePopupType { get { int o = __p.__offset(14); return o != 0 ? (Japan.ShopPurchasePopupType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ShopPurchasePopupType.None; } }
  public long VisibleAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PurchaseCountLimit { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DisplayOrder { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ShopCategoryType CategoryType { get { int o = __p.__offset(22); return o != 0 ? (Japan.ShopCategoryType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ShopCategoryType.General; } }
  public int RefreshGroup { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Prob { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuyReportEventName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuyReportEventNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetBuyReportEventNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetBuyReportEventNameArray() { return __p.__vector_as_array<byte>(28); }
  public string ProductUpdateTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductUpdateTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetProductUpdateTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetProductUpdateTimeArray() { return __p.__vector_as_array<byte>(30); }
  public Japan.ProductDisplayTag DisplayTag { get { int o = __p.__offset(32); return o != 0 ? (Japan.ProductDisplayTag)__p.bb.GetInt(o + __p.bb_pos) : Japan.ProductDisplayTag.None; } }

  public static Offset<Japan.ShopRefreshExcel> CreateShopRefreshExcel(FlatBufferBuilder builder,
      long Id = 0,
      uint LocalizeEtcId = 0,
      bool IsLegacy = false,
      long GoodsId = 0,
      bool IsBundle = false,
      Japan.ShopPurchasePopupType ShopPurchasePopupType = Japan.ShopPurchasePopupType.None,
      long VisibleAmount = 0,
      long PurchaseCountLimit = 0,
      long DisplayOrder = 0,
      Japan.ShopCategoryType CategoryType = Japan.ShopCategoryType.General,
      int RefreshGroup = 0,
      int Prob = 0,
      StringOffset BuyReportEventNameOffset = default(StringOffset),
      StringOffset ProductUpdateTimeOffset = default(StringOffset),
      Japan.ProductDisplayTag DisplayTag = Japan.ProductDisplayTag.None) {
    builder.StartTable(15);
    ShopRefreshExcel.AddDisplayOrder(builder, DisplayOrder);
    ShopRefreshExcel.AddPurchaseCountLimit(builder, PurchaseCountLimit);
    ShopRefreshExcel.AddVisibleAmount(builder, VisibleAmount);
    ShopRefreshExcel.AddGoodsId(builder, GoodsId);
    ShopRefreshExcel.AddId(builder, Id);
    ShopRefreshExcel.AddDisplayTag(builder, DisplayTag);
    ShopRefreshExcel.AddProductUpdateTime(builder, ProductUpdateTimeOffset);
    ShopRefreshExcel.AddBuyReportEventName(builder, BuyReportEventNameOffset);
    ShopRefreshExcel.AddProb(builder, Prob);
    ShopRefreshExcel.AddRefreshGroup(builder, RefreshGroup);
    ShopRefreshExcel.AddCategoryType(builder, CategoryType);
    ShopRefreshExcel.AddShopPurchasePopupType(builder, ShopPurchasePopupType);
    ShopRefreshExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    ShopRefreshExcel.AddIsBundle(builder, IsBundle);
    ShopRefreshExcel.AddIsLegacy(builder, IsLegacy);
    return ShopRefreshExcel.EndShopRefreshExcel(builder);
  }

  public static void StartShopRefreshExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(1, localizeEtcId, 0); }
  public static void AddIsLegacy(FlatBufferBuilder builder, bool isLegacy) { builder.AddBool(2, isLegacy, false); }
  public static void AddGoodsId(FlatBufferBuilder builder, long goodsId) { builder.AddLong(3, goodsId, 0); }
  public static void AddIsBundle(FlatBufferBuilder builder, bool isBundle) { builder.AddBool(4, isBundle, false); }
  public static void AddShopPurchasePopupType(FlatBufferBuilder builder, Japan.ShopPurchasePopupType shopPurchasePopupType) { builder.AddInt(5, (int)shopPurchasePopupType, 0); }
  public static void AddVisibleAmount(FlatBufferBuilder builder, long visibleAmount) { builder.AddLong(6, visibleAmount, 0); }
  public static void AddPurchaseCountLimit(FlatBufferBuilder builder, long purchaseCountLimit) { builder.AddLong(7, purchaseCountLimit, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(8, displayOrder, 0); }
  public static void AddCategoryType(FlatBufferBuilder builder, Japan.ShopCategoryType categoryType) { builder.AddInt(9, (int)categoryType, 0); }
  public static void AddRefreshGroup(FlatBufferBuilder builder, int refreshGroup) { builder.AddInt(10, refreshGroup, 0); }
  public static void AddProb(FlatBufferBuilder builder, int prob) { builder.AddInt(11, prob, 0); }
  public static void AddBuyReportEventName(FlatBufferBuilder builder, StringOffset buyReportEventNameOffset) { builder.AddOffset(12, buyReportEventNameOffset.Value, 0); }
  public static void AddProductUpdateTime(FlatBufferBuilder builder, StringOffset productUpdateTimeOffset) { builder.AddOffset(13, productUpdateTimeOffset.Value, 0); }
  public static void AddDisplayTag(FlatBufferBuilder builder, Japan.ProductDisplayTag displayTag) { builder.AddInt(14, (int)displayTag, 0); }
  public static Offset<Japan.ShopRefreshExcel> EndShopRefreshExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.ShopRefreshExcel>(o);
  }
  public ShopRefreshExcelT UnPack() {
    var _o = new ShopRefreshExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShopRefreshExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ShopRefresh");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEtcId, key) : this.LocalizeEtcId;
    _o.IsLegacy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsLegacy, key) : this.IsLegacy;
    _o.GoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GoodsId, key) : this.GoodsId;
    _o.IsBundle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsBundle, key) : this.IsBundle;
    _o.ShopPurchasePopupType = TableEncryptionService.UseEncryption ? (Japan.ShopPurchasePopupType)TableEncryptionService.Convert((int)this.ShopPurchasePopupType, key) : this.ShopPurchasePopupType;
    _o.VisibleAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.VisibleAmount, key) : this.VisibleAmount;
    _o.PurchaseCountLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PurchaseCountLimit, key) : this.PurchaseCountLimit;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.CategoryType = TableEncryptionService.UseEncryption ? (Japan.ShopCategoryType)TableEncryptionService.Convert((int)this.CategoryType, key) : this.CategoryType;
    _o.RefreshGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RefreshGroup, key) : this.RefreshGroup;
    _o.Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Prob, key) : this.Prob;
    _o.BuyReportEventName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BuyReportEventName, key) : this.BuyReportEventName;
    _o.ProductUpdateTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ProductUpdateTime, key) : this.ProductUpdateTime;
    _o.DisplayTag = TableEncryptionService.UseEncryption ? (Japan.ProductDisplayTag)TableEncryptionService.Convert((int)this.DisplayTag, key) : this.DisplayTag;
  }
  public static Offset<Japan.ShopRefreshExcel> Pack(FlatBufferBuilder builder, ShopRefreshExcelT _o) {
    if (_o == null) return default(Offset<Japan.ShopRefreshExcel>);
		byte[] key = TableEncryptionService.CreateKey("ShopRefresh");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEtcId, key) : _o.LocalizeEtcId;
		var _IsLegacy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsLegacy, key) : _o.IsLegacy;
		var _GoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GoodsId, key) : _o.GoodsId;
		var _IsBundle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsBundle, key) : _o.IsBundle;
		var _ShopPurchasePopupType = TableEncryptionService.UseEncryption ? (Japan.ShopPurchasePopupType)TableEncryptionService.Convert((int)_o.ShopPurchasePopupType, key) : _o.ShopPurchasePopupType;
		var _VisibleAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.VisibleAmount, key) : _o.VisibleAmount;
		var _PurchaseCountLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PurchaseCountLimit, key) : _o.PurchaseCountLimit;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
		var _CategoryType = TableEncryptionService.UseEncryption ? (Japan.ShopCategoryType)TableEncryptionService.Convert((int)_o.CategoryType, key) : _o.CategoryType;
		var _RefreshGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RefreshGroup, key) : _o.RefreshGroup;
		var _Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Prob, key) : _o.Prob;
    var _BuyReportEventName = _o.BuyReportEventName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BuyReportEventName, key) : _o.BuyReportEventName));
    var _ProductUpdateTime = _o.ProductUpdateTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ProductUpdateTime, key) : _o.ProductUpdateTime));
		var _DisplayTag = TableEncryptionService.UseEncryption ? (Japan.ProductDisplayTag)TableEncryptionService.Convert((int)_o.DisplayTag, key) : _o.DisplayTag;
    return CreateShopRefreshExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _LocalizeEtcId : _o.LocalizeEtcId,
      TableEncryptionService.UseEncryption ? _IsLegacy : _o.IsLegacy,
      TableEncryptionService.UseEncryption ? _GoodsId : _o.GoodsId,
      TableEncryptionService.UseEncryption ? _IsBundle : _o.IsBundle,
      TableEncryptionService.UseEncryption ? _ShopPurchasePopupType : _o.ShopPurchasePopupType,
      TableEncryptionService.UseEncryption ? _VisibleAmount : _o.VisibleAmount,
      TableEncryptionService.UseEncryption ? _PurchaseCountLimit : _o.PurchaseCountLimit,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      TableEncryptionService.UseEncryption ? _CategoryType : _o.CategoryType,
      TableEncryptionService.UseEncryption ? _RefreshGroup : _o.RefreshGroup,
      TableEncryptionService.UseEncryption ? _Prob : _o.Prob,
      _BuyReportEventName,
      _ProductUpdateTime,
      TableEncryptionService.UseEncryption ? _DisplayTag : _o.DisplayTag);
  }
}

public class ShopRefreshExcelT
{
  public long Id { get; set; }
  public uint LocalizeEtcId { get; set; }
  public bool IsLegacy { get; set; }
  public long GoodsId { get; set; }
  public bool IsBundle { get; set; }
  public Japan.ShopPurchasePopupType ShopPurchasePopupType { get; set; }
  public long VisibleAmount { get; set; }
  public long PurchaseCountLimit { get; set; }
  public long DisplayOrder { get; set; }
  public Japan.ShopCategoryType CategoryType { get; set; }
  public int RefreshGroup { get; set; }
  public int Prob { get; set; }
  public string BuyReportEventName { get; set; }
  public string ProductUpdateTime { get; set; }
  public Japan.ProductDisplayTag DisplayTag { get; set; }

  public ShopRefreshExcelT() {
    this.Id = 0;
    this.LocalizeEtcId = 0;
    this.IsLegacy = false;
    this.GoodsId = 0;
    this.IsBundle = false;
    this.ShopPurchasePopupType = Japan.ShopPurchasePopupType.None;
    this.VisibleAmount = 0;
    this.PurchaseCountLimit = 0;
    this.DisplayOrder = 0;
    this.CategoryType = Japan.ShopCategoryType.General;
    this.RefreshGroup = 0;
    this.Prob = 0;
    this.BuyReportEventName = null;
    this.ProductUpdateTime = null;
    this.DisplayTag = Japan.ProductDisplayTag.None;
  }
}


static public class ShopRefreshExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsLegacy*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*GoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*IsBundle*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*ShopPurchasePopupType*/, 4 /*Japan.ShopPurchasePopupType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*VisibleAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*PurchaseCountLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*CategoryType*/, 4 /*Japan.ShopCategoryType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*RefreshGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*Prob*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*BuyReportEventName*/, false)
      && verifier.VerifyString(tablePos, 30 /*ProductUpdateTime*/, false)
      && verifier.VerifyField(tablePos, 32 /*DisplayTag*/, 4 /*Japan.ProductDisplayTag*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
