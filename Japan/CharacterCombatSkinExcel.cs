// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterCombatSkinExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterCombatSkinExcel GetRootAsCharacterCombatSkinExcel(ByteBuffer _bb) { return GetRootAsCharacterCombatSkinExcel(_bb, new CharacterCombatSkinExcel()); }
  public static CharacterCombatSkinExcel GetRootAsCharacterCombatSkinExcel(ByteBuffer _bb, CharacterCombatSkinExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCombatSkinExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetGroupIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetGroupIdArray() { return __p.__vector_as_array<byte>(4); }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ResourcePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourcePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetResourcePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetResourcePathArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<Japan.CharacterCombatSkinExcel> CreateCharacterCombatSkinExcel(FlatBufferBuilder builder,
      StringOffset GroupIdOffset = default(StringOffset),
      long UniqueId = 0,
      StringOffset ResourcePathOffset = default(StringOffset)) {
    builder.StartTable(3);
    CharacterCombatSkinExcel.AddUniqueId(builder, UniqueId);
    CharacterCombatSkinExcel.AddResourcePath(builder, ResourcePathOffset);
    CharacterCombatSkinExcel.AddGroupId(builder, GroupIdOffset);
    return CharacterCombatSkinExcel.EndCharacterCombatSkinExcel(builder);
  }

  public static void StartCharacterCombatSkinExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddGroupId(FlatBufferBuilder builder, StringOffset groupIdOffset) { builder.AddOffset(0, groupIdOffset.Value, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddResourcePath(FlatBufferBuilder builder, StringOffset resourcePathOffset) { builder.AddOffset(2, resourcePathOffset.Value, 0); }
  public static Offset<Japan.CharacterCombatSkinExcel> EndCharacterCombatSkinExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.CharacterCombatSkinExcel>(o);
  }
  public CharacterCombatSkinExcelT UnPack() {
    var _o = new CharacterCombatSkinExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCombatSkinExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterCombatSkin");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.GroupId, key) : this.GroupId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.ResourcePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ResourcePath, key) : this.ResourcePath;
  }
  public static Offset<Japan.CharacterCombatSkinExcel> Pack(FlatBufferBuilder builder, CharacterCombatSkinExcelT _o) {
    if (_o == null) return default(Offset<Japan.CharacterCombatSkinExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterCombatSkin");
    var _GroupId = _o.GroupId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.GroupId, key) : _o.GroupId));
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
    var _ResourcePath = _o.ResourcePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ResourcePath, key) : _o.ResourcePath));
    return CreateCharacterCombatSkinExcel(
      builder,
      _GroupId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      _ResourcePath);
  }
}

public class CharacterCombatSkinExcelT
{
  public string GroupId { get; set; }
  public long UniqueId { get; set; }
  public string ResourcePath { get; set; }

  public CharacterCombatSkinExcelT() {
    this.GroupId = null;
    this.UniqueId = 0;
    this.ResourcePath = null;
  }
}


static public class CharacterCombatSkinExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*GroupId*/, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*ResourcePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
