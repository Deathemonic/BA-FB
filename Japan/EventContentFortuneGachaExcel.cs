// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentFortuneGachaExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentFortuneGachaExcel GetRootAsEventContentFortuneGachaExcel(ByteBuffer _bb) { return GetRootAsEventContentFortuneGachaExcel(_bb, new EventContentFortuneGachaExcel()); }
  public static EventContentFortuneGachaExcel GetRootAsEventContentFortuneGachaExcel(ByteBuffer _bb, EventContentFortuneGachaExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentFortuneGachaExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int FortuneGachaGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string NameImagePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameImagePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameImagePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameImagePathArray() { return __p.__vector_as_array<byte>(8); }
  public string IconPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Japan.EventContentFortuneGachaExcel> CreateEventContentFortuneGachaExcel(FlatBufferBuilder builder,
      int FortuneGachaGroupId = 0,
      uint LocalizeEtcId = 0,
      StringOffset NameImagePathOffset = default(StringOffset),
      StringOffset IconPathOffset = default(StringOffset)) {
    builder.StartTable(4);
    EventContentFortuneGachaExcel.AddIconPath(builder, IconPathOffset);
    EventContentFortuneGachaExcel.AddNameImagePath(builder, NameImagePathOffset);
    EventContentFortuneGachaExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    EventContentFortuneGachaExcel.AddFortuneGachaGroupId(builder, FortuneGachaGroupId);
    return EventContentFortuneGachaExcel.EndEventContentFortuneGachaExcel(builder);
  }

  public static void StartEventContentFortuneGachaExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddFortuneGachaGroupId(FlatBufferBuilder builder, int fortuneGachaGroupId) { builder.AddInt(0, fortuneGachaGroupId, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(1, localizeEtcId, 0); }
  public static void AddNameImagePath(FlatBufferBuilder builder, StringOffset nameImagePathOffset) { builder.AddOffset(2, nameImagePathOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(3, iconPathOffset.Value, 0); }
  public static Offset<Japan.EventContentFortuneGachaExcel> EndEventContentFortuneGachaExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentFortuneGachaExcel>(o);
  }
  public EventContentFortuneGachaExcelT UnPack() {
    var _o = new EventContentFortuneGachaExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentFortuneGachaExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentFortuneGacha");
    _o.FortuneGachaGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FortuneGachaGroupId, key) : this.FortuneGachaGroupId;
    _o.LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEtcId, key) : this.LocalizeEtcId;
    _o.NameImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.NameImagePath, key) : this.NameImagePath;
    _o.IconPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.IconPath, key) : this.IconPath;
  }
  public static Offset<Japan.EventContentFortuneGachaExcel> Pack(FlatBufferBuilder builder, EventContentFortuneGachaExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentFortuneGachaExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentFortuneGacha");
		var _FortuneGachaGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FortuneGachaGroupId, key) : _o.FortuneGachaGroupId;
		var _LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEtcId, key) : _o.LocalizeEtcId;
    var _NameImagePath = _o.NameImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.NameImagePath, key) : _o.NameImagePath));
    var _IconPath = _o.IconPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.IconPath, key) : _o.IconPath));
    return CreateEventContentFortuneGachaExcel(
      builder,
      TableEncryptionService.UseEncryption ? _FortuneGachaGroupId : _o.FortuneGachaGroupId,
      TableEncryptionService.UseEncryption ? _LocalizeEtcId : _o.LocalizeEtcId,
      _NameImagePath,
      _IconPath);
  }
}

public class EventContentFortuneGachaExcelT
{
  public int FortuneGachaGroupId { get; set; }
  public uint LocalizeEtcId { get; set; }
  public string NameImagePath { get; set; }
  public string IconPath { get; set; }

  public EventContentFortuneGachaExcelT() {
    this.FortuneGachaGroupId = 0;
    this.LocalizeEtcId = 0;
    this.NameImagePath = null;
    this.IconPath = null;
  }
}


static public class EventContentFortuneGachaExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*FortuneGachaGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*NameImagePath*/, false)
      && verifier.VerifyString(tablePos, 10 /*IconPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
