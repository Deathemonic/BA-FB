// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentDiceRaceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentDiceRaceExcel GetRootAsEventContentDiceRaceExcel(ByteBuffer _bb) { return GetRootAsEventContentDiceRaceExcel(_bb, new EventContentDiceRaceExcel()); }
  public static EventContentDiceRaceExcel GetRootAsEventContentDiceRaceExcel(ByteBuffer _bb, EventContentDiceRaceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentDiceRaceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DiceCostGoodsId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int SkipableLap { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DiceRacePawnPrefab { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiceRacePawnPrefabBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDiceRacePawnPrefabBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDiceRacePawnPrefabArray() { return __p.__vector_as_array<byte>(10); }
  public bool IsUsingFixedDice { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string FixedDiceIcon(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FixedDiceIconLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string DiceRaceEventType(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DiceRaceEventTypeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Japan.EventContentDiceRaceExcel> CreateEventContentDiceRaceExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long DiceCostGoodsId = 0,
      int SkipableLap = 0,
      StringOffset DiceRacePawnPrefabOffset = default(StringOffset),
      bool IsUsingFixedDice = false,
      VectorOffset FixedDiceIconOffset = default(VectorOffset),
      VectorOffset DiceRaceEventTypeOffset = default(VectorOffset)) {
    builder.StartTable(7);
    EventContentDiceRaceExcel.AddDiceCostGoodsId(builder, DiceCostGoodsId);
    EventContentDiceRaceExcel.AddEventContentId(builder, EventContentId);
    EventContentDiceRaceExcel.AddDiceRaceEventType(builder, DiceRaceEventTypeOffset);
    EventContentDiceRaceExcel.AddFixedDiceIcon(builder, FixedDiceIconOffset);
    EventContentDiceRaceExcel.AddDiceRacePawnPrefab(builder, DiceRacePawnPrefabOffset);
    EventContentDiceRaceExcel.AddSkipableLap(builder, SkipableLap);
    EventContentDiceRaceExcel.AddIsUsingFixedDice(builder, IsUsingFixedDice);
    return EventContentDiceRaceExcel.EndEventContentDiceRaceExcel(builder);
  }

  public static void StartEventContentDiceRaceExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddDiceCostGoodsId(FlatBufferBuilder builder, long diceCostGoodsId) { builder.AddLong(1, diceCostGoodsId, 0); }
  public static void AddSkipableLap(FlatBufferBuilder builder, int skipableLap) { builder.AddInt(2, skipableLap, 0); }
  public static void AddDiceRacePawnPrefab(FlatBufferBuilder builder, StringOffset diceRacePawnPrefabOffset) { builder.AddOffset(3, diceRacePawnPrefabOffset.Value, 0); }
  public static void AddIsUsingFixedDice(FlatBufferBuilder builder, bool isUsingFixedDice) { builder.AddBool(4, isUsingFixedDice, false); }
  public static void AddFixedDiceIcon(FlatBufferBuilder builder, VectorOffset fixedDiceIconOffset) { builder.AddOffset(5, fixedDiceIconOffset.Value, 0); }
  public static VectorOffset CreateFixedDiceIconVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFixedDiceIconVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixedDiceIconVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixedDiceIconVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFixedDiceIconVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDiceRaceEventType(FlatBufferBuilder builder, VectorOffset diceRaceEventTypeOffset) { builder.AddOffset(6, diceRaceEventTypeOffset.Value, 0); }
  public static VectorOffset CreateDiceRaceEventTypeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDiceRaceEventTypeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiceRaceEventTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiceRaceEventTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDiceRaceEventTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Japan.EventContentDiceRaceExcel> EndEventContentDiceRaceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentDiceRaceExcel>(o);
  }
  public EventContentDiceRaceExcelT UnPack() {
    var _o = new EventContentDiceRaceExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentDiceRaceExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentDiceRace");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.DiceCostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DiceCostGoodsId, key) : this.DiceCostGoodsId;
    _o.SkipableLap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.SkipableLap, key) : this.SkipableLap;
    _o.DiceRacePawnPrefab = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DiceRacePawnPrefab, key) : this.DiceRacePawnPrefab;
    _o.IsUsingFixedDice = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsUsingFixedDice, key) : this.IsUsingFixedDice;
    _o.FixedDiceIcon = new List<string>();
    for (var _j = 0; _j < this.FixedDiceIconLength; ++_j) {_o.FixedDiceIcon.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.FixedDiceIcon(_j), key) : this.FixedDiceIcon(_j));}
    _o.DiceRaceEventType = new List<string>();
    for (var _j = 0; _j < this.DiceRaceEventTypeLength; ++_j) {_o.DiceRaceEventType.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DiceRaceEventType(_j), key) : this.DiceRaceEventType(_j));}
  }
  public static Offset<Japan.EventContentDiceRaceExcel> Pack(FlatBufferBuilder builder, EventContentDiceRaceExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentDiceRaceExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentDiceRace");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _DiceCostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DiceCostGoodsId, key) : _o.DiceCostGoodsId;
		var _SkipableLap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.SkipableLap, key) : _o.SkipableLap;
    var _DiceRacePawnPrefab = _o.DiceRacePawnPrefab == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DiceRacePawnPrefab, key) : _o.DiceRacePawnPrefab));
		var _IsUsingFixedDice = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsUsingFixedDice, key) : _o.IsUsingFixedDice;
    var _FixedDiceIcon = default(VectorOffset);
    if (_o.FixedDiceIcon != null) {
      var __FixedDiceIcon = new StringOffset[_o.FixedDiceIcon.Count];
      for (var _j = 0; _j < __FixedDiceIcon.Length; ++_j) { __FixedDiceIcon[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.FixedDiceIcon[_j], key) : _o.FixedDiceIcon[_j])); }
      _FixedDiceIcon = CreateFixedDiceIconVector(builder, __FixedDiceIcon);
    }
    var _DiceRaceEventType = default(VectorOffset);
    if (_o.DiceRaceEventType != null) {
      var __DiceRaceEventType = new StringOffset[_o.DiceRaceEventType.Count];
      for (var _j = 0; _j < __DiceRaceEventType.Length; ++_j) { __DiceRaceEventType[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DiceRaceEventType[_j], key) : _o.DiceRaceEventType[_j])); }
      _DiceRaceEventType = CreateDiceRaceEventTypeVector(builder, __DiceRaceEventType);
    }
    return CreateEventContentDiceRaceExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _DiceCostGoodsId : _o.DiceCostGoodsId,
      TableEncryptionService.UseEncryption ? _SkipableLap : _o.SkipableLap,
      _DiceRacePawnPrefab,
      TableEncryptionService.UseEncryption ? _IsUsingFixedDice : _o.IsUsingFixedDice,
      _FixedDiceIcon,
      _DiceRaceEventType);
  }
}

public class EventContentDiceRaceExcelT
{
  public long EventContentId { get; set; }
  public long DiceCostGoodsId { get; set; }
  public int SkipableLap { get; set; }
  public string DiceRacePawnPrefab { get; set; }
  public bool IsUsingFixedDice { get; set; }
  public List<string> FixedDiceIcon { get; set; }
  public List<string> DiceRaceEventType { get; set; }

  public EventContentDiceRaceExcelT() {
    this.EventContentId = 0;
    this.DiceCostGoodsId = 0;
    this.SkipableLap = 0;
    this.DiceRacePawnPrefab = null;
    this.IsUsingFixedDice = false;
    this.FixedDiceIcon = null;
    this.DiceRaceEventType = null;
  }
}


static public class EventContentDiceRaceExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DiceCostGoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*SkipableLap*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*DiceRacePawnPrefab*/, false)
      && verifier.VerifyField(tablePos, 12 /*IsUsingFixedDice*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*FixedDiceIcon*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*DiceRaceEventType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
