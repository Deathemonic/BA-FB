// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct AssistSlotExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AssistSlotExcel GetRootAsAssistSlotExcel(ByteBuffer _bb) { return GetRootAsAssistSlotExcel(_bb, new AssistSlotExcel()); }
  public static AssistSlotExcel GetRootAsAssistSlotExcel(ByteBuffer _bb, AssistSlotExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AssistSlotExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long SlotId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.EchelonType EchelonType { get { int o = __p.__offset(6); return o != 0 ? (Japan.EchelonType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EchelonType.None; } }
  public long SlotNumber { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AssistTermRewardPeriodFromSec { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AssistRewardLimit { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AssistRentRewardDailyMaxCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AssistRentalFeeAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AssistRentalFeeAmountStranger { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.AssistSlotExcel> CreateAssistSlotExcel(FlatBufferBuilder builder,
      long SlotId = 0,
      Japan.EchelonType EchelonType = Japan.EchelonType.None,
      long SlotNumber = 0,
      long AssistTermRewardPeriodFromSec = 0,
      long AssistRewardLimit = 0,
      long AssistRentRewardDailyMaxCount = 0,
      long AssistRentalFeeAmount = 0,
      long AssistRentalFeeAmountStranger = 0) {
    builder.StartTable(8);
    AssistSlotExcel.AddAssistRentalFeeAmountStranger(builder, AssistRentalFeeAmountStranger);
    AssistSlotExcel.AddAssistRentalFeeAmount(builder, AssistRentalFeeAmount);
    AssistSlotExcel.AddAssistRentRewardDailyMaxCount(builder, AssistRentRewardDailyMaxCount);
    AssistSlotExcel.AddAssistRewardLimit(builder, AssistRewardLimit);
    AssistSlotExcel.AddAssistTermRewardPeriodFromSec(builder, AssistTermRewardPeriodFromSec);
    AssistSlotExcel.AddSlotNumber(builder, SlotNumber);
    AssistSlotExcel.AddSlotId(builder, SlotId);
    AssistSlotExcel.AddEchelonType(builder, EchelonType);
    return AssistSlotExcel.EndAssistSlotExcel(builder);
  }

  public static void StartAssistSlotExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddSlotId(FlatBufferBuilder builder, long slotId) { builder.AddLong(0, slotId, 0); }
  public static void AddEchelonType(FlatBufferBuilder builder, Japan.EchelonType echelonType) { builder.AddInt(1, (int)echelonType, 0); }
  public static void AddSlotNumber(FlatBufferBuilder builder, long slotNumber) { builder.AddLong(2, slotNumber, 0); }
  public static void AddAssistTermRewardPeriodFromSec(FlatBufferBuilder builder, long assistTermRewardPeriodFromSec) { builder.AddLong(3, assistTermRewardPeriodFromSec, 0); }
  public static void AddAssistRewardLimit(FlatBufferBuilder builder, long assistRewardLimit) { builder.AddLong(4, assistRewardLimit, 0); }
  public static void AddAssistRentRewardDailyMaxCount(FlatBufferBuilder builder, long assistRentRewardDailyMaxCount) { builder.AddLong(5, assistRentRewardDailyMaxCount, 0); }
  public static void AddAssistRentalFeeAmount(FlatBufferBuilder builder, long assistRentalFeeAmount) { builder.AddLong(6, assistRentalFeeAmount, 0); }
  public static void AddAssistRentalFeeAmountStranger(FlatBufferBuilder builder, long assistRentalFeeAmountStranger) { builder.AddLong(7, assistRentalFeeAmountStranger, 0); }
  public static Offset<Japan.AssistSlotExcel> EndAssistSlotExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.AssistSlotExcel>(o);
  }
  public AssistSlotExcelT UnPack() {
    var _o = new AssistSlotExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AssistSlotExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("AssistSlot");
    _o.SlotId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SlotId, key) : this.SlotId;
    _o.EchelonType = TableEncryptionService.UseEncryption ? (Japan.EchelonType)TableEncryptionService.Convert((int)this.EchelonType, key) : this.EchelonType;
    _o.SlotNumber = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SlotNumber, key) : this.SlotNumber;
    _o.AssistTermRewardPeriodFromSec = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AssistTermRewardPeriodFromSec, key) : this.AssistTermRewardPeriodFromSec;
    _o.AssistRewardLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AssistRewardLimit, key) : this.AssistRewardLimit;
    _o.AssistRentRewardDailyMaxCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AssistRentRewardDailyMaxCount, key) : this.AssistRentRewardDailyMaxCount;
    _o.AssistRentalFeeAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AssistRentalFeeAmount, key) : this.AssistRentalFeeAmount;
    _o.AssistRentalFeeAmountStranger = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AssistRentalFeeAmountStranger, key) : this.AssistRentalFeeAmountStranger;
  }
  public static Offset<Japan.AssistSlotExcel> Pack(FlatBufferBuilder builder, AssistSlotExcelT _o) {
    if (_o == null) return default(Offset<Japan.AssistSlotExcel>);
		byte[] key = TableEncryptionService.CreateKey("AssistSlot");
		var _SlotId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SlotId, key) : _o.SlotId;
		var _EchelonType = TableEncryptionService.UseEncryption ? (Japan.EchelonType)TableEncryptionService.Convert((int)_o.EchelonType, key) : _o.EchelonType;
		var _SlotNumber = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SlotNumber, key) : _o.SlotNumber;
		var _AssistTermRewardPeriodFromSec = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AssistTermRewardPeriodFromSec, key) : _o.AssistTermRewardPeriodFromSec;
		var _AssistRewardLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AssistRewardLimit, key) : _o.AssistRewardLimit;
		var _AssistRentRewardDailyMaxCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AssistRentRewardDailyMaxCount, key) : _o.AssistRentRewardDailyMaxCount;
		var _AssistRentalFeeAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AssistRentalFeeAmount, key) : _o.AssistRentalFeeAmount;
		var _AssistRentalFeeAmountStranger = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AssistRentalFeeAmountStranger, key) : _o.AssistRentalFeeAmountStranger;
    return CreateAssistSlotExcel(
      builder,
      TableEncryptionService.UseEncryption ? _SlotId : _o.SlotId,
      TableEncryptionService.UseEncryption ? _EchelonType : _o.EchelonType,
      TableEncryptionService.UseEncryption ? _SlotNumber : _o.SlotNumber,
      TableEncryptionService.UseEncryption ? _AssistTermRewardPeriodFromSec : _o.AssistTermRewardPeriodFromSec,
      TableEncryptionService.UseEncryption ? _AssistRewardLimit : _o.AssistRewardLimit,
      TableEncryptionService.UseEncryption ? _AssistRentRewardDailyMaxCount : _o.AssistRentRewardDailyMaxCount,
      TableEncryptionService.UseEncryption ? _AssistRentalFeeAmount : _o.AssistRentalFeeAmount,
      TableEncryptionService.UseEncryption ? _AssistRentalFeeAmountStranger : _o.AssistRentalFeeAmountStranger);
  }
}

public class AssistSlotExcelT
{
  public long SlotId { get; set; }
  public Japan.EchelonType EchelonType { get; set; }
  public long SlotNumber { get; set; }
  public long AssistTermRewardPeriodFromSec { get; set; }
  public long AssistRewardLimit { get; set; }
  public long AssistRentRewardDailyMaxCount { get; set; }
  public long AssistRentalFeeAmount { get; set; }
  public long AssistRentalFeeAmountStranger { get; set; }

  public AssistSlotExcelT() {
    this.SlotId = 0;
    this.EchelonType = Japan.EchelonType.None;
    this.SlotNumber = 0;
    this.AssistTermRewardPeriodFromSec = 0;
    this.AssistRewardLimit = 0;
    this.AssistRentRewardDailyMaxCount = 0;
    this.AssistRentalFeeAmount = 0;
    this.AssistRentalFeeAmountStranger = 0;
  }
}


static public class AssistSlotExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SlotId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EchelonType*/, 4 /*Japan.EchelonType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SlotNumber*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*AssistTermRewardPeriodFromSec*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*AssistRewardLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*AssistRentRewardDailyMaxCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*AssistRentalFeeAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*AssistRentalFeeAmountStranger*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
