// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ScenarioResourceInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScenarioResourceInfoExcel GetRootAsScenarioResourceInfoExcel(ByteBuffer _bb) { return GetRootAsScenarioResourceInfoExcel(_bb, new ScenarioResourceInfoExcel()); }
  public static ScenarioResourceInfoExcel GetRootAsScenarioResourceInfoExcel(ByteBuffer _bb, ScenarioResourceInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioResourceInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioModeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PriorityOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PVDisplayOrder { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long VideoId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BgmId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string AudioName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAudioNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAudioNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAudioNameArray() { return __p.__vector_as_array<byte>(16); }
  public string SpinePath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpinePathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetSpinePathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetSpinePathArray() { return __p.__vector_as_array<byte>(18); }
  public int Ratio { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LobbyAniPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyAniPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetLobbyAniPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetLobbyAniPathArray() { return __p.__vector_as_array<byte>(22); }
  public string MovieCGPath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMovieCGPathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMovieCGPathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMovieCGPathArray() { return __p.__vector_as_array<byte>(24); }
  public uint LocalizeId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Japan.ScenarioResourceInfoExcel> CreateScenarioResourceInfoExcel(FlatBufferBuilder builder,
      long Id = 0,
      long ScenarioModeId = 0,
      long PriorityOrder = 0,
      long PVDisplayOrder = 0,
      long VideoId = 0,
      long BgmId = 0,
      StringOffset AudioNameOffset = default(StringOffset),
      StringOffset SpinePathOffset = default(StringOffset),
      int Ratio = 0,
      StringOffset LobbyAniPathOffset = default(StringOffset),
      StringOffset MovieCGPathOffset = default(StringOffset),
      uint LocalizeId = 0) {
    builder.StartTable(12);
    ScenarioResourceInfoExcel.AddBgmId(builder, BgmId);
    ScenarioResourceInfoExcel.AddVideoId(builder, VideoId);
    ScenarioResourceInfoExcel.AddPVDisplayOrder(builder, PVDisplayOrder);
    ScenarioResourceInfoExcel.AddPriorityOrder(builder, PriorityOrder);
    ScenarioResourceInfoExcel.AddScenarioModeId(builder, ScenarioModeId);
    ScenarioResourceInfoExcel.AddId(builder, Id);
    ScenarioResourceInfoExcel.AddLocalizeId(builder, LocalizeId);
    ScenarioResourceInfoExcel.AddMovieCGPath(builder, MovieCGPathOffset);
    ScenarioResourceInfoExcel.AddLobbyAniPath(builder, LobbyAniPathOffset);
    ScenarioResourceInfoExcel.AddRatio(builder, Ratio);
    ScenarioResourceInfoExcel.AddSpinePath(builder, SpinePathOffset);
    ScenarioResourceInfoExcel.AddAudioName(builder, AudioNameOffset);
    return ScenarioResourceInfoExcel.EndScenarioResourceInfoExcel(builder);
  }

  public static void StartScenarioResourceInfoExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddScenarioModeId(FlatBufferBuilder builder, long scenarioModeId) { builder.AddLong(1, scenarioModeId, 0); }
  public static void AddPriorityOrder(FlatBufferBuilder builder, long priorityOrder) { builder.AddLong(2, priorityOrder, 0); }
  public static void AddPVDisplayOrder(FlatBufferBuilder builder, long pVDisplayOrder) { builder.AddLong(3, pVDisplayOrder, 0); }
  public static void AddVideoId(FlatBufferBuilder builder, long videoId) { builder.AddLong(4, videoId, 0); }
  public static void AddBgmId(FlatBufferBuilder builder, long bgmId) { builder.AddLong(5, bgmId, 0); }
  public static void AddAudioName(FlatBufferBuilder builder, StringOffset audioNameOffset) { builder.AddOffset(6, audioNameOffset.Value, 0); }
  public static void AddSpinePath(FlatBufferBuilder builder, StringOffset spinePathOffset) { builder.AddOffset(7, spinePathOffset.Value, 0); }
  public static void AddRatio(FlatBufferBuilder builder, int ratio) { builder.AddInt(8, ratio, 0); }
  public static void AddLobbyAniPath(FlatBufferBuilder builder, StringOffset lobbyAniPathOffset) { builder.AddOffset(9, lobbyAniPathOffset.Value, 0); }
  public static void AddMovieCGPath(FlatBufferBuilder builder, StringOffset movieCGPathOffset) { builder.AddOffset(10, movieCGPathOffset.Value, 0); }
  public static void AddLocalizeId(FlatBufferBuilder builder, uint localizeId) { builder.AddUint(11, localizeId, 0); }
  public static Offset<Japan.ScenarioResourceInfoExcel> EndScenarioResourceInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.ScenarioResourceInfoExcel>(o);
  }
  public ScenarioResourceInfoExcelT UnPack() {
    var _o = new ScenarioResourceInfoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioResourceInfoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ScenarioResourceInfo");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.ScenarioModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ScenarioModeId, key) : this.ScenarioModeId;
    _o.PriorityOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PriorityOrder, key) : this.PriorityOrder;
    _o.PVDisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PVDisplayOrder, key) : this.PVDisplayOrder;
    _o.VideoId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.VideoId, key) : this.VideoId;
    _o.BgmId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BgmId, key) : this.BgmId;
    _o.AudioName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.AudioName, key) : this.AudioName;
    _o.SpinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SpinePath, key) : this.SpinePath;
    _o.Ratio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Ratio, key) : this.Ratio;
    _o.LobbyAniPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LobbyAniPath, key) : this.LobbyAniPath;
    _o.MovieCGPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MovieCGPath, key) : this.MovieCGPath;
    _o.LocalizeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeId, key) : this.LocalizeId;
  }
  public static Offset<Japan.ScenarioResourceInfoExcel> Pack(FlatBufferBuilder builder, ScenarioResourceInfoExcelT _o) {
    if (_o == null) return default(Offset<Japan.ScenarioResourceInfoExcel>);
		byte[] key = TableEncryptionService.CreateKey("ScenarioResourceInfo");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _ScenarioModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ScenarioModeId, key) : _o.ScenarioModeId;
		var _PriorityOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PriorityOrder, key) : _o.PriorityOrder;
		var _PVDisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PVDisplayOrder, key) : _o.PVDisplayOrder;
		var _VideoId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.VideoId, key) : _o.VideoId;
		var _BgmId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BgmId, key) : _o.BgmId;
    var _AudioName = _o.AudioName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.AudioName, key) : _o.AudioName));
    var _SpinePath = _o.SpinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SpinePath, key) : _o.SpinePath));
		var _Ratio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Ratio, key) : _o.Ratio;
    var _LobbyAniPath = _o.LobbyAniPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LobbyAniPath, key) : _o.LobbyAniPath));
    var _MovieCGPath = _o.MovieCGPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MovieCGPath, key) : _o.MovieCGPath));
		var _LocalizeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeId, key) : _o.LocalizeId;
    return CreateScenarioResourceInfoExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _ScenarioModeId : _o.ScenarioModeId,
      TableEncryptionService.UseEncryption ? _PriorityOrder : _o.PriorityOrder,
      TableEncryptionService.UseEncryption ? _PVDisplayOrder : _o.PVDisplayOrder,
      TableEncryptionService.UseEncryption ? _VideoId : _o.VideoId,
      TableEncryptionService.UseEncryption ? _BgmId : _o.BgmId,
      _AudioName,
      _SpinePath,
      TableEncryptionService.UseEncryption ? _Ratio : _o.Ratio,
      _LobbyAniPath,
      _MovieCGPath,
      TableEncryptionService.UseEncryption ? _LocalizeId : _o.LocalizeId);
  }
}

public class ScenarioResourceInfoExcelT
{
  public long Id { get; set; }
  public long ScenarioModeId { get; set; }
  public long PriorityOrder { get; set; }
  public long PVDisplayOrder { get; set; }
  public long VideoId { get; set; }
  public long BgmId { get; set; }
  public string AudioName { get; set; }
  public string SpinePath { get; set; }
  public int Ratio { get; set; }
  public string LobbyAniPath { get; set; }
  public string MovieCGPath { get; set; }
  public uint LocalizeId { get; set; }

  public ScenarioResourceInfoExcelT() {
    this.Id = 0;
    this.ScenarioModeId = 0;
    this.PriorityOrder = 0;
    this.PVDisplayOrder = 0;
    this.VideoId = 0;
    this.BgmId = 0;
    this.AudioName = null;
    this.SpinePath = null;
    this.Ratio = 0;
    this.LobbyAniPath = null;
    this.MovieCGPath = null;
    this.LocalizeId = 0;
  }
}


static public class ScenarioResourceInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ScenarioModeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PriorityOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*PVDisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*VideoId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*BgmId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 16 /*AudioName*/, false)
      && verifier.VerifyString(tablePos, 18 /*SpinePath*/, false)
      && verifier.VerifyField(tablePos, 20 /*Ratio*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*LobbyAniPath*/, false)
      && verifier.VerifyString(tablePos, 24 /*MovieCGPath*/, false)
      && verifier.VerifyField(tablePos, 26 /*LocalizeId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
