// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentConcentrationCardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentConcentrationCardExcel GetRootAsEventContentConcentrationCardExcel(ByteBuffer _bb) { return GetRootAsEventContentConcentrationCardExcel(_bb, new EventContentConcentrationCardExcel()); }
  public static EventContentConcentrationCardExcel GetRootAsEventContentConcentrationCardExcel(ByteBuffer _bb, EventContentConcentrationCardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentConcentrationCardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CardId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.Rarity Rarity { get { int o = __p.__offset(8); return o != 0 ? (Japan.Rarity)__p.bb.GetInt(o + __p.bb_pos) : Japan.Rarity.N; } }
  public string ImagePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetImagePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetImagePathArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Japan.EventContentConcentrationCardExcel> CreateEventContentConcentrationCardExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long CardId = 0,
      Japan.Rarity Rarity = Japan.Rarity.N,
      StringOffset ImagePathOffset = default(StringOffset)) {
    builder.StartTable(4);
    EventContentConcentrationCardExcel.AddCardId(builder, CardId);
    EventContentConcentrationCardExcel.AddEventContentId(builder, EventContentId);
    EventContentConcentrationCardExcel.AddImagePath(builder, ImagePathOffset);
    EventContentConcentrationCardExcel.AddRarity(builder, Rarity);
    return EventContentConcentrationCardExcel.EndEventContentConcentrationCardExcel(builder);
  }

  public static void StartEventContentConcentrationCardExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddCardId(FlatBufferBuilder builder, long cardId) { builder.AddLong(1, cardId, 0); }
  public static void AddRarity(FlatBufferBuilder builder, Japan.Rarity rarity) { builder.AddInt(2, (int)rarity, 0); }
  public static void AddImagePath(FlatBufferBuilder builder, StringOffset imagePathOffset) { builder.AddOffset(3, imagePathOffset.Value, 0); }
  public static Offset<Japan.EventContentConcentrationCardExcel> EndEventContentConcentrationCardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentConcentrationCardExcel>(o);
  }
  public EventContentConcentrationCardExcelT UnPack() {
    var _o = new EventContentConcentrationCardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentConcentrationCardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentConcentrationCard");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.CardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CardId, key) : this.CardId;
    _o.Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)this.Rarity, key) : this.Rarity;
    _o.ImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePath, key) : this.ImagePath;
  }
  public static Offset<Japan.EventContentConcentrationCardExcel> Pack(FlatBufferBuilder builder, EventContentConcentrationCardExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentConcentrationCardExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentConcentrationCard");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _CardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CardId, key) : _o.CardId;
		var _Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)_o.Rarity, key) : _o.Rarity;
    var _ImagePath = _o.ImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePath, key) : _o.ImagePath));
    return CreateEventContentConcentrationCardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _CardId : _o.CardId,
      TableEncryptionService.UseEncryption ? _Rarity : _o.Rarity,
      _ImagePath);
  }
}

public class EventContentConcentrationCardExcelT
{
  public long EventContentId { get; set; }
  public long CardId { get; set; }
  public Japan.Rarity Rarity { get; set; }
  public string ImagePath { get; set; }

  public EventContentConcentrationCardExcelT() {
    this.EventContentId = 0;
    this.CardId = 0;
    this.Rarity = Japan.Rarity.N;
    this.ImagePath = null;
  }
}


static public class EventContentConcentrationCardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Rarity*/, 4 /*Japan.Rarity*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*ImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
