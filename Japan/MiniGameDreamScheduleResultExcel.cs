// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDreamScheduleResultExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameDreamScheduleResultExcel GetRootAsMiniGameDreamScheduleResultExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamScheduleResultExcel(_bb, new MiniGameDreamScheduleResultExcel()); }
  public static MiniGameDreamScheduleResultExcel GetRootAsMiniGameDreamScheduleResultExcel(ByteBuffer _bb, MiniGameDreamScheduleResultExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamScheduleResultExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.DreamMakerResult DreamMakerResult { get { int o = __p.__offset(8); return o != 0 ? (Japan.DreamMakerResult)__p.bb.GetInt(o + __p.bb_pos) : Japan.DreamMakerResult.None; } }
  public long DreamMakerScheduleGroup { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Prob { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.DreamMakerParameterType RewardParameter(int j) { int o = __p.__offset(14); return o != 0 ? (Japan.DreamMakerParameterType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.DreamMakerParameterType)0; }
  public int RewardParameterLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.DreamMakerParameterType> GetRewardParameterBytes() { return __p.__vector_as_span<Japan.DreamMakerParameterType>(14, 4); }
#else
  public ArraySegment<byte>? GetRewardParameterBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public Japan.DreamMakerParameterType[] GetRewardParameterArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.DreamMakerParameterType[] a = new Japan.DreamMakerParameterType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.DreamMakerParameterType)__p.bb.GetInt(p + i * 4); } return a; }
  public Japan.DreamMakerParamOperationType RewardParameterOperationType(int j) { int o = __p.__offset(16); return o != 0 ? (Japan.DreamMakerParamOperationType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.DreamMakerParamOperationType)0; }
  public int RewardParameterOperationTypeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.DreamMakerParamOperationType> GetRewardParameterOperationTypeBytes() { return __p.__vector_as_span<Japan.DreamMakerParamOperationType>(16, 4); }
#else
  public ArraySegment<byte>? GetRewardParameterOperationTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public Japan.DreamMakerParamOperationType[] GetRewardParameterOperationTypeArray() { int o = __p.__offset(16); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.DreamMakerParamOperationType[] a = new Japan.DreamMakerParamOperationType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.DreamMakerParamOperationType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParameterAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParameterAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParameterAmountBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetRewardParameterAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetRewardParameterAmountArray() { return __p.__vector_as_array<long>(18); }
  public Japan.ParcelType RewardParcelType { get { int o = __p.__offset(20); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.MiniGameDreamScheduleResultExcel> CreateMiniGameDreamScheduleResultExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      Japan.DreamMakerResult DreamMakerResult = Japan.DreamMakerResult.None,
      long DreamMakerScheduleGroup = 0,
      int Prob = 0,
      VectorOffset RewardParameterOffset = default(VectorOffset),
      VectorOffset RewardParameterOperationTypeOffset = default(VectorOffset),
      VectorOffset RewardParameterAmountOffset = default(VectorOffset),
      Japan.ParcelType RewardParcelType = Japan.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(11);
    MiniGameDreamScheduleResultExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    MiniGameDreamScheduleResultExcel.AddRewardParcelId(builder, RewardParcelId);
    MiniGameDreamScheduleResultExcel.AddDreamMakerScheduleGroup(builder, DreamMakerScheduleGroup);
    MiniGameDreamScheduleResultExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamScheduleResultExcel.AddId(builder, Id);
    MiniGameDreamScheduleResultExcel.AddRewardParcelType(builder, RewardParcelType);
    MiniGameDreamScheduleResultExcel.AddRewardParameterAmount(builder, RewardParameterAmountOffset);
    MiniGameDreamScheduleResultExcel.AddRewardParameterOperationType(builder, RewardParameterOperationTypeOffset);
    MiniGameDreamScheduleResultExcel.AddRewardParameter(builder, RewardParameterOffset);
    MiniGameDreamScheduleResultExcel.AddProb(builder, Prob);
    MiniGameDreamScheduleResultExcel.AddDreamMakerResult(builder, DreamMakerResult);
    return MiniGameDreamScheduleResultExcel.EndMiniGameDreamScheduleResultExcel(builder);
  }

  public static void StartMiniGameDreamScheduleResultExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddDreamMakerResult(FlatBufferBuilder builder, Japan.DreamMakerResult dreamMakerResult) { builder.AddInt(2, (int)dreamMakerResult, 0); }
  public static void AddDreamMakerScheduleGroup(FlatBufferBuilder builder, long dreamMakerScheduleGroup) { builder.AddLong(3, dreamMakerScheduleGroup, 0); }
  public static void AddProb(FlatBufferBuilder builder, int prob) { builder.AddInt(4, prob, 0); }
  public static void AddRewardParameter(FlatBufferBuilder builder, VectorOffset rewardParameterOffset) { builder.AddOffset(5, rewardParameterOffset.Value, 0); }
  public static VectorOffset CreateRewardParameterVector(FlatBufferBuilder builder, Japan.DreamMakerParameterType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterVectorBlock(FlatBufferBuilder builder, Japan.DreamMakerParameterType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.DreamMakerParameterType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.DreamMakerParameterType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParameterOperationType(FlatBufferBuilder builder, VectorOffset rewardParameterOperationTypeOffset) { builder.AddOffset(6, rewardParameterOperationTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParameterOperationTypeVector(FlatBufferBuilder builder, Japan.DreamMakerParamOperationType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterOperationTypeVectorBlock(FlatBufferBuilder builder, Japan.DreamMakerParamOperationType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterOperationTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.DreamMakerParamOperationType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterOperationTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.DreamMakerParamOperationType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParameterOperationTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParameterAmount(FlatBufferBuilder builder, VectorOffset rewardParameterAmountOffset) { builder.AddOffset(7, rewardParameterAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParameterAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParameterAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParameterAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, Japan.ParcelType rewardParcelType) { builder.AddInt(8, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(9, rewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long rewardParcelAmount) { builder.AddLong(10, rewardParcelAmount, 0); }
  public static Offset<Japan.MiniGameDreamScheduleResultExcel> EndMiniGameDreamScheduleResultExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MiniGameDreamScheduleResultExcel>(o);
  }
  public MiniGameDreamScheduleResultExcelT UnPack() {
    var _o = new MiniGameDreamScheduleResultExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDreamScheduleResultExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamScheduleResult");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.DreamMakerResult = TableEncryptionService.UseEncryption ? (Japan.DreamMakerResult)TableEncryptionService.Convert((int)this.DreamMakerResult, key) : this.DreamMakerResult;
    _o.DreamMakerScheduleGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerScheduleGroup, key) : this.DreamMakerScheduleGroup;
    _o.Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Prob, key) : this.Prob;
    _o.RewardParameter = new List<Japan.DreamMakerParameterType>();
    for (var _j = 0; _j < this.RewardParameterLength; ++_j) {_o.RewardParameter.Add(TableEncryptionService.UseEncryption ? (Japan.DreamMakerParameterType)TableEncryptionService.Convert((int)this.RewardParameter(_j), key) : this.RewardParameter(_j));}
    _o.RewardParameterOperationType = new List<Japan.DreamMakerParamOperationType>();
    for (var _j = 0; _j < this.RewardParameterOperationTypeLength; ++_j) {_o.RewardParameterOperationType.Add(TableEncryptionService.UseEncryption ? (Japan.DreamMakerParamOperationType)TableEncryptionService.Convert((int)this.RewardParameterOperationType(_j), key) : this.RewardParameterOperationType(_j));}
    _o.RewardParameterAmount = new List<long>();
    for (var _j = 0; _j < this.RewardParameterAmountLength; ++_j) {_o.RewardParameterAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParameterAmount(_j), key) : this.RewardParameterAmount(_j));}
    _o.RewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType, key) : this.RewardParcelType;
    _o.RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId, key) : this.RewardParcelId;
    _o.RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelAmount, key) : this.RewardParcelAmount;
  }
  public static Offset<Japan.MiniGameDreamScheduleResultExcel> Pack(FlatBufferBuilder builder, MiniGameDreamScheduleResultExcelT _o) {
    if (_o == null) return default(Offset<Japan.MiniGameDreamScheduleResultExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamScheduleResult");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _DreamMakerResult = TableEncryptionService.UseEncryption ? (Japan.DreamMakerResult)TableEncryptionService.Convert((int)_o.DreamMakerResult, key) : _o.DreamMakerResult;
		var _DreamMakerScheduleGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerScheduleGroup, key) : _o.DreamMakerScheduleGroup;
		var _Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Prob, key) : _o.Prob;
    var _RewardParameter = default(VectorOffset);
    if (_o.RewardParameter != null) {
      var __RewardParameter = _o.RewardParameter.Select(x => TableEncryptionService.UseEncryption ? (Japan.DreamMakerParameterType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _RewardParameter = CreateRewardParameterVector(builder, __RewardParameter);
    }
    var _RewardParameterOperationType = default(VectorOffset);
    if (_o.RewardParameterOperationType != null) {
      var __RewardParameterOperationType = _o.RewardParameterOperationType.Select(x => TableEncryptionService.UseEncryption ? (Japan.DreamMakerParamOperationType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _RewardParameterOperationType = CreateRewardParameterOperationTypeVector(builder, __RewardParameterOperationType);
    }
    var _RewardParameterAmount = default(VectorOffset);
    if (_o.RewardParameterAmount != null) {
      var __RewardParameterAmount = _o.RewardParameterAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _RewardParameterAmount = CreateRewardParameterAmountVector(builder, __RewardParameterAmount);
    }
		var _RewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.RewardParcelType, key) : _o.RewardParcelType;
		var _RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelId, key) : _o.RewardParcelId;
		var _RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelAmount, key) : _o.RewardParcelAmount;
    return CreateMiniGameDreamScheduleResultExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _DreamMakerResult : _o.DreamMakerResult,
      TableEncryptionService.UseEncryption ? _DreamMakerScheduleGroup : _o.DreamMakerScheduleGroup,
      TableEncryptionService.UseEncryption ? _Prob : _o.Prob,
      _RewardParameter,
      _RewardParameterOperationType,
      _RewardParameterAmount,
      TableEncryptionService.UseEncryption ? _RewardParcelType : _o.RewardParcelType,
      TableEncryptionService.UseEncryption ? _RewardParcelId : _o.RewardParcelId,
      TableEncryptionService.UseEncryption ? _RewardParcelAmount : _o.RewardParcelAmount);
  }
}

public class MiniGameDreamScheduleResultExcelT
{
  public long Id { get; set; }
  public long EventContentId { get; set; }
  public Japan.DreamMakerResult DreamMakerResult { get; set; }
  public long DreamMakerScheduleGroup { get; set; }
  public int Prob { get; set; }
  public List<Japan.DreamMakerParameterType> RewardParameter { get; set; }
  public List<Japan.DreamMakerParamOperationType> RewardParameterOperationType { get; set; }
  public List<long> RewardParameterAmount { get; set; }
  public Japan.ParcelType RewardParcelType { get; set; }
  public long RewardParcelId { get; set; }
  public long RewardParcelAmount { get; set; }

  public MiniGameDreamScheduleResultExcelT() {
    this.Id = 0;
    this.EventContentId = 0;
    this.DreamMakerResult = Japan.DreamMakerResult.None;
    this.DreamMakerScheduleGroup = 0;
    this.Prob = 0;
    this.RewardParameter = null;
    this.RewardParameterOperationType = null;
    this.RewardParameterAmount = null;
    this.RewardParcelType = Japan.ParcelType.None;
    this.RewardParcelId = 0;
    this.RewardParcelAmount = 0;
  }
}


static public class MiniGameDreamScheduleResultExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*DreamMakerResult*/, 4 /*Japan.DreamMakerResult*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DreamMakerScheduleGroup*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*Prob*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*RewardParameter*/, 4 /*Japan.DreamMakerParameterType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*RewardParameterOperationType*/, 4 /*Japan.DreamMakerParamOperationType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*RewardParameterAmount*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 20 /*RewardParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*RewardParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
