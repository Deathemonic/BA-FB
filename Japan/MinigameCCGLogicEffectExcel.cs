// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGLogicEffectExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGLogicEffectExcel GetRootAsMinigameCCGLogicEffectExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGLogicEffectExcel(_bb, new MinigameCCGLogicEffectExcel()); }
  public static MinigameCCGLogicEffectExcel GetRootAsMinigameCCGLogicEffectExcel(ByteBuffer _bb, MinigameCCGLogicEffectExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGLogicEffectExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DataLoadPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataLoadPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataLoadPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDataLoadPathArray() { return __p.__vector_as_array<byte>(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<Japan.MinigameCCGLogicEffectExcel> CreateMinigameCCGLogicEffectExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset DataLoadPathOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset)) {
    builder.StartTable(3);
    MinigameCCGLogicEffectExcel.AddId(builder, Id);
    MinigameCCGLogicEffectExcel.AddIcon(builder, IconOffset);
    MinigameCCGLogicEffectExcel.AddDataLoadPath(builder, DataLoadPathOffset);
    return MinigameCCGLogicEffectExcel.EndMinigameCCGLogicEffectExcel(builder);
  }

  public static void StartMinigameCCGLogicEffectExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddDataLoadPath(FlatBufferBuilder builder, StringOffset dataLoadPathOffset) { builder.AddOffset(1, dataLoadPathOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(2, iconOffset.Value, 0); }
  public static Offset<Japan.MinigameCCGLogicEffectExcel> EndMinigameCCGLogicEffectExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGLogicEffectExcel>(o);
  }
  public MinigameCCGLogicEffectExcelT UnPack() {
    var _o = new MinigameCCGLogicEffectExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGLogicEffectExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLogicEffect");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.DataLoadPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DataLoadPath, key) : this.DataLoadPath;
    _o.Icon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Icon, key) : this.Icon;
  }
  public static Offset<Japan.MinigameCCGLogicEffectExcel> Pack(FlatBufferBuilder builder, MinigameCCGLogicEffectExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGLogicEffectExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLogicEffect");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _DataLoadPath = _o.DataLoadPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DataLoadPath, key) : _o.DataLoadPath));
    var _Icon = _o.Icon == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Icon, key) : _o.Icon));
    return CreateMinigameCCGLogicEffectExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _DataLoadPath,
      _Icon);
  }
}

public class MinigameCCGLogicEffectExcelT
{
  public long Id { get; set; }
  public string DataLoadPath { get; set; }
  public string Icon { get; set; }

  public MinigameCCGLogicEffectExcelT() {
    this.Id = 0;
    this.DataLoadPath = null;
    this.Icon = null;
  }
}


static public class MinigameCCGLogicEffectExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*DataLoadPath*/, false)
      && verifier.VerifyString(tablePos, 8 /*Icon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
