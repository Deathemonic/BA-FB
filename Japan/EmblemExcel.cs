// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EmblemExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EmblemExcel GetRootAsEmblemExcel(ByteBuffer _bb) { return GetRootAsEmblemExcel(_bb, new EmblemExcel()); }
  public static EmblemExcel GetRootAsEmblemExcel(ByteBuffer _bb, EmblemExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmblemExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.EmblemCategory Category { get { int o = __p.__offset(6); return o != 0 ? (Japan.EmblemCategory)__p.bb.GetInt(o + __p.bb_pos) : Japan.EmblemCategory.None; } }
  public Japan.Rarity Rarity { get { int o = __p.__offset(8); return o != 0 ? (Japan.Rarity)__p.bb.GetInt(o + __p.bb_pos) : Japan.Rarity.N; } }
  public long DisplayOrder { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LocalizeCodeId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long UseAtLocalizeId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool EmblemTextVisible { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string IconPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(20); }
  public string EmblemIconPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemIconPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEmblemIconPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEmblemIconPathArray() { return __p.__vector_as_array<byte>(22); }
  public int EmblemIconNumControl { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EmblemIconBGPath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemIconBGPathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEmblemIconBGPathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEmblemIconBGPathArray() { return __p.__vector_as_array<byte>(26); }
  public string EmblemBGPathJp { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemBGPathJpBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEmblemBGPathJpBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEmblemBGPathJpArray() { return __p.__vector_as_array<byte>(28); }
  public string EmblemBGPathKr { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemBGPathKrBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetEmblemBGPathKrBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetEmblemBGPathKrArray() { return __p.__vector_as_array<byte>(30); }
  public string EmblemEffectPath { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemEffectPathBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetEmblemEffectPathBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetEmblemEffectPathArray() { return __p.__vector_as_array<byte>(32); }
  public Japan.EmblemDisplayType DisplayType { get { int o = __p.__offset(34); return o != 0 ? (Japan.EmblemDisplayType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EmblemDisplayType.Always; } }
  public string DisplayStartDate { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayStartDateBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetDisplayStartDateBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetDisplayStartDateArray() { return __p.__vector_as_array<byte>(36); }
  public string DisplayEndDate { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayEndDateBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetDisplayEndDateBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetDisplayEndDateArray() { return __p.__vector_as_array<byte>(38); }
  public int DislpayFavorLevel { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.EmblemCheckPassType CheckPassType { get { int o = __p.__offset(42); return o != 0 ? (Japan.EmblemCheckPassType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EmblemCheckPassType.None; } }
  public long EmblemParameter { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CheckPassCount { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.EmblemExcel> CreateEmblemExcel(FlatBufferBuilder builder,
      long Id = 0,
      Japan.EmblemCategory Category = Japan.EmblemCategory.None,
      Japan.Rarity Rarity = Japan.Rarity.N,
      long DisplayOrder = 0,
      uint LocalizeEtcId = 0,
      uint LocalizeCodeId = 0,
      long UseAtLocalizeId = 0,
      bool EmblemTextVisible = false,
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset EmblemIconPathOffset = default(StringOffset),
      int EmblemIconNumControl = 0,
      StringOffset EmblemIconBGPathOffset = default(StringOffset),
      StringOffset EmblemBGPathJpOffset = default(StringOffset),
      StringOffset EmblemBGPathKrOffset = default(StringOffset),
      StringOffset EmblemEffectPathOffset = default(StringOffset),
      Japan.EmblemDisplayType DisplayType = Japan.EmblemDisplayType.Always,
      StringOffset DisplayStartDateOffset = default(StringOffset),
      StringOffset DisplayEndDateOffset = default(StringOffset),
      int DislpayFavorLevel = 0,
      Japan.EmblemCheckPassType CheckPassType = Japan.EmblemCheckPassType.None,
      long EmblemParameter = 0,
      long CheckPassCount = 0) {
    builder.StartTable(22);
    EmblemExcel.AddCheckPassCount(builder, CheckPassCount);
    EmblemExcel.AddEmblemParameter(builder, EmblemParameter);
    EmblemExcel.AddUseAtLocalizeId(builder, UseAtLocalizeId);
    EmblemExcel.AddDisplayOrder(builder, DisplayOrder);
    EmblemExcel.AddId(builder, Id);
    EmblemExcel.AddCheckPassType(builder, CheckPassType);
    EmblemExcel.AddDislpayFavorLevel(builder, DislpayFavorLevel);
    EmblemExcel.AddDisplayEndDate(builder, DisplayEndDateOffset);
    EmblemExcel.AddDisplayStartDate(builder, DisplayStartDateOffset);
    EmblemExcel.AddDisplayType(builder, DisplayType);
    EmblemExcel.AddEmblemEffectPath(builder, EmblemEffectPathOffset);
    EmblemExcel.AddEmblemBGPathKr(builder, EmblemBGPathKrOffset);
    EmblemExcel.AddEmblemBGPathJp(builder, EmblemBGPathJpOffset);
    EmblemExcel.AddEmblemIconBGPath(builder, EmblemIconBGPathOffset);
    EmblemExcel.AddEmblemIconNumControl(builder, EmblemIconNumControl);
    EmblemExcel.AddEmblemIconPath(builder, EmblemIconPathOffset);
    EmblemExcel.AddIconPath(builder, IconPathOffset);
    EmblemExcel.AddLocalizeCodeId(builder, LocalizeCodeId);
    EmblemExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    EmblemExcel.AddRarity(builder, Rarity);
    EmblemExcel.AddCategory(builder, Category);
    EmblemExcel.AddEmblemTextVisible(builder, EmblemTextVisible);
    return EmblemExcel.EndEmblemExcel(builder);
  }

  public static void StartEmblemExcel(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddCategory(FlatBufferBuilder builder, Japan.EmblemCategory category) { builder.AddInt(1, (int)category, 0); }
  public static void AddRarity(FlatBufferBuilder builder, Japan.Rarity rarity) { builder.AddInt(2, (int)rarity, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(3, displayOrder, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(4, localizeEtcId, 0); }
  public static void AddLocalizeCodeId(FlatBufferBuilder builder, uint localizeCodeId) { builder.AddUint(5, localizeCodeId, 0); }
  public static void AddUseAtLocalizeId(FlatBufferBuilder builder, long useAtLocalizeId) { builder.AddLong(6, useAtLocalizeId, 0); }
  public static void AddEmblemTextVisible(FlatBufferBuilder builder, bool emblemTextVisible) { builder.AddBool(7, emblemTextVisible, false); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(8, iconPathOffset.Value, 0); }
  public static void AddEmblemIconPath(FlatBufferBuilder builder, StringOffset emblemIconPathOffset) { builder.AddOffset(9, emblemIconPathOffset.Value, 0); }
  public static void AddEmblemIconNumControl(FlatBufferBuilder builder, int emblemIconNumControl) { builder.AddInt(10, emblemIconNumControl, 0); }
  public static void AddEmblemIconBGPath(FlatBufferBuilder builder, StringOffset emblemIconBGPathOffset) { builder.AddOffset(11, emblemIconBGPathOffset.Value, 0); }
  public static void AddEmblemBGPathJp(FlatBufferBuilder builder, StringOffset emblemBGPathJpOffset) { builder.AddOffset(12, emblemBGPathJpOffset.Value, 0); }
  public static void AddEmblemBGPathKr(FlatBufferBuilder builder, StringOffset emblemBGPathKrOffset) { builder.AddOffset(13, emblemBGPathKrOffset.Value, 0); }
  public static void AddEmblemEffectPath(FlatBufferBuilder builder, StringOffset emblemEffectPathOffset) { builder.AddOffset(14, emblemEffectPathOffset.Value, 0); }
  public static void AddDisplayType(FlatBufferBuilder builder, Japan.EmblemDisplayType displayType) { builder.AddInt(15, (int)displayType, 0); }
  public static void AddDisplayStartDate(FlatBufferBuilder builder, StringOffset displayStartDateOffset) { builder.AddOffset(16, displayStartDateOffset.Value, 0); }
  public static void AddDisplayEndDate(FlatBufferBuilder builder, StringOffset displayEndDateOffset) { builder.AddOffset(17, displayEndDateOffset.Value, 0); }
  public static void AddDislpayFavorLevel(FlatBufferBuilder builder, int dislpayFavorLevel) { builder.AddInt(18, dislpayFavorLevel, 0); }
  public static void AddCheckPassType(FlatBufferBuilder builder, Japan.EmblemCheckPassType checkPassType) { builder.AddInt(19, (int)checkPassType, 0); }
  public static void AddEmblemParameter(FlatBufferBuilder builder, long emblemParameter) { builder.AddLong(20, emblemParameter, 0); }
  public static void AddCheckPassCount(FlatBufferBuilder builder, long checkPassCount) { builder.AddLong(21, checkPassCount, 0); }
  public static Offset<Japan.EmblemExcel> EndEmblemExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EmblemExcel>(o);
  }
  public EmblemExcelT UnPack() {
    var _o = new EmblemExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmblemExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Emblem");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Category = TableEncryptionService.UseEncryption ? (Japan.EmblemCategory)TableEncryptionService.Convert((int)this.Category, key) : this.Category;
    _o.Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)this.Rarity, key) : this.Rarity;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEtcId, key) : this.LocalizeEtcId;
    _o.LocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeCodeId, key) : this.LocalizeCodeId;
    _o.UseAtLocalizeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UseAtLocalizeId, key) : this.UseAtLocalizeId;
    _o.EmblemTextVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.EmblemTextVisible, key) : this.EmblemTextVisible;
    _o.IconPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.IconPath, key) : this.IconPath;
    _o.EmblemIconPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EmblemIconPath, key) : this.EmblemIconPath;
    _o.EmblemIconNumControl = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EmblemIconNumControl, key) : this.EmblemIconNumControl;
    _o.EmblemIconBGPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EmblemIconBGPath, key) : this.EmblemIconBGPath;
    _o.EmblemBGPathJp = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EmblemBGPathJp, key) : this.EmblemBGPathJp;
    _o.EmblemBGPathKr = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EmblemBGPathKr, key) : this.EmblemBGPathKr;
    _o.EmblemEffectPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EmblemEffectPath, key) : this.EmblemEffectPath;
    _o.DisplayType = TableEncryptionService.UseEncryption ? (Japan.EmblemDisplayType)TableEncryptionService.Convert((int)this.DisplayType, key) : this.DisplayType;
    _o.DisplayStartDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DisplayStartDate, key) : this.DisplayStartDate;
    _o.DisplayEndDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DisplayEndDate, key) : this.DisplayEndDate;
    _o.DislpayFavorLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DislpayFavorLevel, key) : this.DislpayFavorLevel;
    _o.CheckPassType = TableEncryptionService.UseEncryption ? (Japan.EmblemCheckPassType)TableEncryptionService.Convert((int)this.CheckPassType, key) : this.CheckPassType;
    _o.EmblemParameter = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EmblemParameter, key) : this.EmblemParameter;
    _o.CheckPassCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CheckPassCount, key) : this.CheckPassCount;
  }
  public static Offset<Japan.EmblemExcel> Pack(FlatBufferBuilder builder, EmblemExcelT _o) {
    if (_o == null) return default(Offset<Japan.EmblemExcel>);
		byte[] key = TableEncryptionService.CreateKey("Emblem");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Category = TableEncryptionService.UseEncryption ? (Japan.EmblemCategory)TableEncryptionService.Convert((int)_o.Category, key) : _o.Category;
		var _Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)_o.Rarity, key) : _o.Rarity;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
		var _LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEtcId, key) : _o.LocalizeEtcId;
		var _LocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeCodeId, key) : _o.LocalizeCodeId;
		var _UseAtLocalizeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UseAtLocalizeId, key) : _o.UseAtLocalizeId;
		var _EmblemTextVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.EmblemTextVisible, key) : _o.EmblemTextVisible;
    var _IconPath = _o.IconPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.IconPath, key) : _o.IconPath));
    var _EmblemIconPath = _o.EmblemIconPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EmblemIconPath, key) : _o.EmblemIconPath));
		var _EmblemIconNumControl = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EmblemIconNumControl, key) : _o.EmblemIconNumControl;
    var _EmblemIconBGPath = _o.EmblemIconBGPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EmblemIconBGPath, key) : _o.EmblemIconBGPath));
    var _EmblemBGPathJp = _o.EmblemBGPathJp == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EmblemBGPathJp, key) : _o.EmblemBGPathJp));
    var _EmblemBGPathKr = _o.EmblemBGPathKr == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EmblemBGPathKr, key) : _o.EmblemBGPathKr));
    var _EmblemEffectPath = _o.EmblemEffectPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EmblemEffectPath, key) : _o.EmblemEffectPath));
		var _DisplayType = TableEncryptionService.UseEncryption ? (Japan.EmblemDisplayType)TableEncryptionService.Convert((int)_o.DisplayType, key) : _o.DisplayType;
    var _DisplayStartDate = _o.DisplayStartDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DisplayStartDate, key) : _o.DisplayStartDate));
    var _DisplayEndDate = _o.DisplayEndDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DisplayEndDate, key) : _o.DisplayEndDate));
		var _DislpayFavorLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DislpayFavorLevel, key) : _o.DislpayFavorLevel;
		var _CheckPassType = TableEncryptionService.UseEncryption ? (Japan.EmblemCheckPassType)TableEncryptionService.Convert((int)_o.CheckPassType, key) : _o.CheckPassType;
		var _EmblemParameter = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EmblemParameter, key) : _o.EmblemParameter;
		var _CheckPassCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CheckPassCount, key) : _o.CheckPassCount;
    return CreateEmblemExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Category : _o.Category,
      TableEncryptionService.UseEncryption ? _Rarity : _o.Rarity,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      TableEncryptionService.UseEncryption ? _LocalizeEtcId : _o.LocalizeEtcId,
      TableEncryptionService.UseEncryption ? _LocalizeCodeId : _o.LocalizeCodeId,
      TableEncryptionService.UseEncryption ? _UseAtLocalizeId : _o.UseAtLocalizeId,
      TableEncryptionService.UseEncryption ? _EmblemTextVisible : _o.EmblemTextVisible,
      _IconPath,
      _EmblemIconPath,
      TableEncryptionService.UseEncryption ? _EmblemIconNumControl : _o.EmblemIconNumControl,
      _EmblemIconBGPath,
      _EmblemBGPathJp,
      _EmblemBGPathKr,
      _EmblemEffectPath,
      TableEncryptionService.UseEncryption ? _DisplayType : _o.DisplayType,
      _DisplayStartDate,
      _DisplayEndDate,
      TableEncryptionService.UseEncryption ? _DislpayFavorLevel : _o.DislpayFavorLevel,
      TableEncryptionService.UseEncryption ? _CheckPassType : _o.CheckPassType,
      TableEncryptionService.UseEncryption ? _EmblemParameter : _o.EmblemParameter,
      TableEncryptionService.UseEncryption ? _CheckPassCount : _o.CheckPassCount);
  }
}

public class EmblemExcelT
{
  public long Id { get; set; }
  public Japan.EmblemCategory Category { get; set; }
  public Japan.Rarity Rarity { get; set; }
  public long DisplayOrder { get; set; }
  public uint LocalizeEtcId { get; set; }
  public uint LocalizeCodeId { get; set; }
  public long UseAtLocalizeId { get; set; }
  public bool EmblemTextVisible { get; set; }
  public string IconPath { get; set; }
  public string EmblemIconPath { get; set; }
  public int EmblemIconNumControl { get; set; }
  public string EmblemIconBGPath { get; set; }
  public string EmblemBGPathJp { get; set; }
  public string EmblemBGPathKr { get; set; }
  public string EmblemEffectPath { get; set; }
  public Japan.EmblemDisplayType DisplayType { get; set; }
  public string DisplayStartDate { get; set; }
  public string DisplayEndDate { get; set; }
  public int DislpayFavorLevel { get; set; }
  public Japan.EmblemCheckPassType CheckPassType { get; set; }
  public long EmblemParameter { get; set; }
  public long CheckPassCount { get; set; }

  public EmblemExcelT() {
    this.Id = 0;
    this.Category = Japan.EmblemCategory.None;
    this.Rarity = Japan.Rarity.N;
    this.DisplayOrder = 0;
    this.LocalizeEtcId = 0;
    this.LocalizeCodeId = 0;
    this.UseAtLocalizeId = 0;
    this.EmblemTextVisible = false;
    this.IconPath = null;
    this.EmblemIconPath = null;
    this.EmblemIconNumControl = 0;
    this.EmblemIconBGPath = null;
    this.EmblemBGPathJp = null;
    this.EmblemBGPathKr = null;
    this.EmblemEffectPath = null;
    this.DisplayType = Japan.EmblemDisplayType.Always;
    this.DisplayStartDate = null;
    this.DisplayEndDate = null;
    this.DislpayFavorLevel = 0;
    this.CheckPassType = Japan.EmblemCheckPassType.None;
    this.EmblemParameter = 0;
    this.CheckPassCount = 0;
  }
}


static public class EmblemExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Category*/, 4 /*Japan.EmblemCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Rarity*/, 4 /*Japan.Rarity*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*LocalizeCodeId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*UseAtLocalizeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*EmblemTextVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 20 /*IconPath*/, false)
      && verifier.VerifyString(tablePos, 22 /*EmblemIconPath*/, false)
      && verifier.VerifyField(tablePos, 24 /*EmblemIconNumControl*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*EmblemIconBGPath*/, false)
      && verifier.VerifyString(tablePos, 28 /*EmblemBGPathJp*/, false)
      && verifier.VerifyString(tablePos, 30 /*EmblemBGPathKr*/, false)
      && verifier.VerifyString(tablePos, 32 /*EmblemEffectPath*/, false)
      && verifier.VerifyField(tablePos, 34 /*DisplayType*/, 4 /*Japan.EmblemDisplayType*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*DisplayStartDate*/, false)
      && verifier.VerifyString(tablePos, 38 /*DisplayEndDate*/, false)
      && verifier.VerifyField(tablePos, 40 /*DislpayFavorLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*CheckPassType*/, 4 /*Japan.EmblemCheckPassType*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*EmblemParameter*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*CheckPassCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
