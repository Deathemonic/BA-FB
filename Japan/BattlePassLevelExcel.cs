// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattlePassLevelExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassLevelExcel GetRootAsBattlePassLevelExcel(ByteBuffer _bb) { return GetRootAsBattlePassLevelExcel(_bb, new BattlePassLevelExcel()); }
  public static BattlePassLevelExcel GetRootAsBattlePassLevelExcel(ByteBuffer _bb, BattlePassLevelExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassLevelExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long BattlePassId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsPickUpReward { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Japan.BattlePassLevelExcel> CreateBattlePassLevelExcel(FlatBufferBuilder builder,
      long BattlePassId = 0,
      long Level = 0,
      bool IsPickUpReward = false) {
    builder.StartTable(3);
    BattlePassLevelExcel.AddLevel(builder, Level);
    BattlePassLevelExcel.AddBattlePassId(builder, BattlePassId);
    BattlePassLevelExcel.AddIsPickUpReward(builder, IsPickUpReward);
    return BattlePassLevelExcel.EndBattlePassLevelExcel(builder);
  }

  public static void StartBattlePassLevelExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBattlePassId(FlatBufferBuilder builder, long battlePassId) { builder.AddLong(0, battlePassId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, long level) { builder.AddLong(1, level, 0); }
  public static void AddIsPickUpReward(FlatBufferBuilder builder, bool isPickUpReward) { builder.AddBool(2, isPickUpReward, false); }
  public static Offset<Japan.BattlePassLevelExcel> EndBattlePassLevelExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.BattlePassLevelExcel>(o);
  }
  public BattlePassLevelExcelT UnPack() {
    var _o = new BattlePassLevelExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassLevelExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BattlePassLevel");
    _o.BattlePassId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattlePassId, key) : this.BattlePassId;
    _o.Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Level, key) : this.Level;
    _o.IsPickUpReward = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsPickUpReward, key) : this.IsPickUpReward;
  }
  public static Offset<Japan.BattlePassLevelExcel> Pack(FlatBufferBuilder builder, BattlePassLevelExcelT _o) {
    if (_o == null) return default(Offset<Japan.BattlePassLevelExcel>);
		byte[] key = TableEncryptionService.CreateKey("BattlePassLevel");
		var _BattlePassId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattlePassId, key) : _o.BattlePassId;
		var _Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Level, key) : _o.Level;
		var _IsPickUpReward = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsPickUpReward, key) : _o.IsPickUpReward;
    return CreateBattlePassLevelExcel(
      builder,
      TableEncryptionService.UseEncryption ? _BattlePassId : _o.BattlePassId,
      TableEncryptionService.UseEncryption ? _Level : _o.Level,
      TableEncryptionService.UseEncryption ? _IsPickUpReward : _o.IsPickUpReward);
  }
}

public class BattlePassLevelExcelT
{
  public long BattlePassId { get; set; }
  public long Level { get; set; }
  public bool IsPickUpReward { get; set; }

  public BattlePassLevelExcelT() {
    this.BattlePassId = 0;
    this.Level = 0;
    this.IsPickUpReward = false;
  }
}


static public class BattlePassLevelExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BattlePassId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Level*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*IsPickUpReward*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
