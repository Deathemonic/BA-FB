// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct PossessionCheckExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PossessionCheckExcel GetRootAsPossessionCheckExcel(ByteBuffer _bb) { return GetRootAsPossessionCheckExcel(_bb, new PossessionCheckExcel()); }
  public static PossessionCheckExcel GetRootAsPossessionCheckExcel(ByteBuffer _bb, PossessionCheckExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PossessionCheckExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType DefaultParcelType { get { int o = __p.__offset(6); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long DefaultParcelId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int DefaultParcelAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.ParcelType ReplaceParcelType { get { int o = __p.__offset(12); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long ReplaceParcelId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ReplaceParcelAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Japan.PossessionCheckExcel> CreatePossessionCheckExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      Japan.ParcelType DefaultParcelType = Japan.ParcelType.None,
      long DefaultParcelId = 0,
      int DefaultParcelAmount = 0,
      Japan.ParcelType ReplaceParcelType = Japan.ParcelType.None,
      long ReplaceParcelId = 0,
      int ReplaceParcelAmount = 0) {
    builder.StartTable(7);
    PossessionCheckExcel.AddReplaceParcelId(builder, ReplaceParcelId);
    PossessionCheckExcel.AddDefaultParcelId(builder, DefaultParcelId);
    PossessionCheckExcel.AddUniqueId(builder, UniqueId);
    PossessionCheckExcel.AddReplaceParcelAmount(builder, ReplaceParcelAmount);
    PossessionCheckExcel.AddReplaceParcelType(builder, ReplaceParcelType);
    PossessionCheckExcel.AddDefaultParcelAmount(builder, DefaultParcelAmount);
    PossessionCheckExcel.AddDefaultParcelType(builder, DefaultParcelType);
    return PossessionCheckExcel.EndPossessionCheckExcel(builder);
  }

  public static void StartPossessionCheckExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddDefaultParcelType(FlatBufferBuilder builder, Japan.ParcelType defaultParcelType) { builder.AddInt(1, (int)defaultParcelType, 0); }
  public static void AddDefaultParcelId(FlatBufferBuilder builder, long defaultParcelId) { builder.AddLong(2, defaultParcelId, 0); }
  public static void AddDefaultParcelAmount(FlatBufferBuilder builder, int defaultParcelAmount) { builder.AddInt(3, defaultParcelAmount, 0); }
  public static void AddReplaceParcelType(FlatBufferBuilder builder, Japan.ParcelType replaceParcelType) { builder.AddInt(4, (int)replaceParcelType, 0); }
  public static void AddReplaceParcelId(FlatBufferBuilder builder, long replaceParcelId) { builder.AddLong(5, replaceParcelId, 0); }
  public static void AddReplaceParcelAmount(FlatBufferBuilder builder, int replaceParcelAmount) { builder.AddInt(6, replaceParcelAmount, 0); }
  public static Offset<Japan.PossessionCheckExcel> EndPossessionCheckExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.PossessionCheckExcel>(o);
  }
  public PossessionCheckExcelT UnPack() {
    var _o = new PossessionCheckExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PossessionCheckExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("PossessionCheck");
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.DefaultParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.DefaultParcelType, key) : this.DefaultParcelType;
    _o.DefaultParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefaultParcelId, key) : this.DefaultParcelId;
    _o.DefaultParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DefaultParcelAmount, key) : this.DefaultParcelAmount;
    _o.ReplaceParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.ReplaceParcelType, key) : this.ReplaceParcelType;
    _o.ReplaceParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ReplaceParcelId, key) : this.ReplaceParcelId;
    _o.ReplaceParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ReplaceParcelAmount, key) : this.ReplaceParcelAmount;
  }
  public static Offset<Japan.PossessionCheckExcel> Pack(FlatBufferBuilder builder, PossessionCheckExcelT _o) {
    if (_o == null) return default(Offset<Japan.PossessionCheckExcel>);
		byte[] key = TableEncryptionService.CreateKey("PossessionCheck");
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _DefaultParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.DefaultParcelType, key) : _o.DefaultParcelType;
		var _DefaultParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefaultParcelId, key) : _o.DefaultParcelId;
		var _DefaultParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DefaultParcelAmount, key) : _o.DefaultParcelAmount;
		var _ReplaceParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.ReplaceParcelType, key) : _o.ReplaceParcelType;
		var _ReplaceParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ReplaceParcelId, key) : _o.ReplaceParcelId;
		var _ReplaceParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ReplaceParcelAmount, key) : _o.ReplaceParcelAmount;
    return CreatePossessionCheckExcel(
      builder,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _DefaultParcelType : _o.DefaultParcelType,
      TableEncryptionService.UseEncryption ? _DefaultParcelId : _o.DefaultParcelId,
      TableEncryptionService.UseEncryption ? _DefaultParcelAmount : _o.DefaultParcelAmount,
      TableEncryptionService.UseEncryption ? _ReplaceParcelType : _o.ReplaceParcelType,
      TableEncryptionService.UseEncryption ? _ReplaceParcelId : _o.ReplaceParcelId,
      TableEncryptionService.UseEncryption ? _ReplaceParcelAmount : _o.ReplaceParcelAmount);
  }
}

public class PossessionCheckExcelT
{
  public long UniqueId { get; set; }
  public Japan.ParcelType DefaultParcelType { get; set; }
  public long DefaultParcelId { get; set; }
  public int DefaultParcelAmount { get; set; }
  public Japan.ParcelType ReplaceParcelType { get; set; }
  public long ReplaceParcelId { get; set; }
  public int ReplaceParcelAmount { get; set; }

  public PossessionCheckExcelT() {
    this.UniqueId = 0;
    this.DefaultParcelType = Japan.ParcelType.None;
    this.DefaultParcelId = 0;
    this.DefaultParcelAmount = 0;
    this.ReplaceParcelType = Japan.ParcelType.None;
    this.ReplaceParcelId = 0;
    this.ReplaceParcelAmount = 0;
  }
}


static public class PossessionCheckExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DefaultParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DefaultParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*DefaultParcelAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ReplaceParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ReplaceParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*ReplaceParcelAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
