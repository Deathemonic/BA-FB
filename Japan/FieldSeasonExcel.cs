// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct FieldSeasonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FieldSeasonExcel GetRootAsFieldSeasonExcel(ByteBuffer _bb) { return GetRootAsFieldSeasonExcel(_bb, new FieldSeasonExcel()); }
  public static FieldSeasonExcel GetRootAsFieldSeasonExcel(ByteBuffer _bb, FieldSeasonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldSeasonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EntryDateId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long InstantEntryDateId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StartDate { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartDateBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStartDateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStartDateArray() { return __p.__vector_as_array<byte>(12); }
  public string EndDate { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndDateBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEndDateBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEndDateArray() { return __p.__vector_as_array<byte>(14); }
  public long LobbyBGMChangeStageId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FieldPrefabControlID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.FieldDialogType FieldGetKeywordCallDialogEnum { get { int o = __p.__offset(20); return o != 0 ? (Japan.FieldDialogType)__p.bb.GetInt(o + __p.bb_pos) : Japan.FieldDialogType.None; } }
  public string MasteryImagePath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMasteryImagePathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMasteryImagePathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMasteryImagePathArray() { return __p.__vector_as_array<byte>(22); }
  public string FieldLobbyTitleImagePath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFieldLobbyTitleImagePathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetFieldLobbyTitleImagePathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetFieldLobbyTitleImagePathArray() { return __p.__vector_as_array<byte>(24); }
  public string KeywordLogoImagePath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeywordLogoImagePathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetKeywordLogoImagePathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetKeywordLogoImagePathArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<Japan.FieldSeasonExcel> CreateFieldSeasonExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long EventContentId = 0,
      long EntryDateId = 0,
      long InstantEntryDateId = 0,
      StringOffset StartDateOffset = default(StringOffset),
      StringOffset EndDateOffset = default(StringOffset),
      long LobbyBGMChangeStageId = 0,
      long FieldPrefabControlID = 0,
      Japan.FieldDialogType FieldGetKeywordCallDialogEnum = Japan.FieldDialogType.None,
      StringOffset MasteryImagePathOffset = default(StringOffset),
      StringOffset FieldLobbyTitleImagePathOffset = default(StringOffset),
      StringOffset KeywordLogoImagePathOffset = default(StringOffset)) {
    builder.StartTable(12);
    FieldSeasonExcel.AddFieldPrefabControlID(builder, FieldPrefabControlID);
    FieldSeasonExcel.AddLobbyBGMChangeStageId(builder, LobbyBGMChangeStageId);
    FieldSeasonExcel.AddInstantEntryDateId(builder, InstantEntryDateId);
    FieldSeasonExcel.AddEntryDateId(builder, EntryDateId);
    FieldSeasonExcel.AddEventContentId(builder, EventContentId);
    FieldSeasonExcel.AddUniqueId(builder, UniqueId);
    FieldSeasonExcel.AddKeywordLogoImagePath(builder, KeywordLogoImagePathOffset);
    FieldSeasonExcel.AddFieldLobbyTitleImagePath(builder, FieldLobbyTitleImagePathOffset);
    FieldSeasonExcel.AddMasteryImagePath(builder, MasteryImagePathOffset);
    FieldSeasonExcel.AddFieldGetKeywordCallDialogEnum(builder, FieldGetKeywordCallDialogEnum);
    FieldSeasonExcel.AddEndDate(builder, EndDateOffset);
    FieldSeasonExcel.AddStartDate(builder, StartDateOffset);
    return FieldSeasonExcel.EndFieldSeasonExcel(builder);
  }

  public static void StartFieldSeasonExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddEntryDateId(FlatBufferBuilder builder, long entryDateId) { builder.AddLong(2, entryDateId, 0); }
  public static void AddInstantEntryDateId(FlatBufferBuilder builder, long instantEntryDateId) { builder.AddLong(3, instantEntryDateId, 0); }
  public static void AddStartDate(FlatBufferBuilder builder, StringOffset startDateOffset) { builder.AddOffset(4, startDateOffset.Value, 0); }
  public static void AddEndDate(FlatBufferBuilder builder, StringOffset endDateOffset) { builder.AddOffset(5, endDateOffset.Value, 0); }
  public static void AddLobbyBGMChangeStageId(FlatBufferBuilder builder, long lobbyBGMChangeStageId) { builder.AddLong(6, lobbyBGMChangeStageId, 0); }
  public static void AddFieldPrefabControlID(FlatBufferBuilder builder, long fieldPrefabControlID) { builder.AddLong(7, fieldPrefabControlID, 0); }
  public static void AddFieldGetKeywordCallDialogEnum(FlatBufferBuilder builder, Japan.FieldDialogType fieldGetKeywordCallDialogEnum) { builder.AddInt(8, (int)fieldGetKeywordCallDialogEnum, 0); }
  public static void AddMasteryImagePath(FlatBufferBuilder builder, StringOffset masteryImagePathOffset) { builder.AddOffset(9, masteryImagePathOffset.Value, 0); }
  public static void AddFieldLobbyTitleImagePath(FlatBufferBuilder builder, StringOffset fieldLobbyTitleImagePathOffset) { builder.AddOffset(10, fieldLobbyTitleImagePathOffset.Value, 0); }
  public static void AddKeywordLogoImagePath(FlatBufferBuilder builder, StringOffset keywordLogoImagePathOffset) { builder.AddOffset(11, keywordLogoImagePathOffset.Value, 0); }
  public static Offset<Japan.FieldSeasonExcel> EndFieldSeasonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.FieldSeasonExcel>(o);
  }
  public FieldSeasonExcelT UnPack() {
    var _o = new FieldSeasonExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldSeasonExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("FieldSeason");
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.EntryDateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EntryDateId, key) : this.EntryDateId;
    _o.InstantEntryDateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.InstantEntryDateId, key) : this.InstantEntryDateId;
    _o.StartDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StartDate, key) : this.StartDate;
    _o.EndDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EndDate, key) : this.EndDate;
    _o.LobbyBGMChangeStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LobbyBGMChangeStageId, key) : this.LobbyBGMChangeStageId;
    _o.FieldPrefabControlID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FieldPrefabControlID, key) : this.FieldPrefabControlID;
    _o.FieldGetKeywordCallDialogEnum = TableEncryptionService.UseEncryption ? (Japan.FieldDialogType)TableEncryptionService.Convert((int)this.FieldGetKeywordCallDialogEnum, key) : this.FieldGetKeywordCallDialogEnum;
    _o.MasteryImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MasteryImagePath, key) : this.MasteryImagePath;
    _o.FieldLobbyTitleImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.FieldLobbyTitleImagePath, key) : this.FieldLobbyTitleImagePath;
    _o.KeywordLogoImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.KeywordLogoImagePath, key) : this.KeywordLogoImagePath;
  }
  public static Offset<Japan.FieldSeasonExcel> Pack(FlatBufferBuilder builder, FieldSeasonExcelT _o) {
    if (_o == null) return default(Offset<Japan.FieldSeasonExcel>);
		byte[] key = TableEncryptionService.CreateKey("FieldSeason");
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _EntryDateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EntryDateId, key) : _o.EntryDateId;
		var _InstantEntryDateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.InstantEntryDateId, key) : _o.InstantEntryDateId;
    var _StartDate = _o.StartDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StartDate, key) : _o.StartDate));
    var _EndDate = _o.EndDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EndDate, key) : _o.EndDate));
		var _LobbyBGMChangeStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LobbyBGMChangeStageId, key) : _o.LobbyBGMChangeStageId;
		var _FieldPrefabControlID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FieldPrefabControlID, key) : _o.FieldPrefabControlID;
		var _FieldGetKeywordCallDialogEnum = TableEncryptionService.UseEncryption ? (Japan.FieldDialogType)TableEncryptionService.Convert((int)_o.FieldGetKeywordCallDialogEnum, key) : _o.FieldGetKeywordCallDialogEnum;
    var _MasteryImagePath = _o.MasteryImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MasteryImagePath, key) : _o.MasteryImagePath));
    var _FieldLobbyTitleImagePath = _o.FieldLobbyTitleImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.FieldLobbyTitleImagePath, key) : _o.FieldLobbyTitleImagePath));
    var _KeywordLogoImagePath = _o.KeywordLogoImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.KeywordLogoImagePath, key) : _o.KeywordLogoImagePath));
    return CreateFieldSeasonExcel(
      builder,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _EntryDateId : _o.EntryDateId,
      TableEncryptionService.UseEncryption ? _InstantEntryDateId : _o.InstantEntryDateId,
      _StartDate,
      _EndDate,
      TableEncryptionService.UseEncryption ? _LobbyBGMChangeStageId : _o.LobbyBGMChangeStageId,
      TableEncryptionService.UseEncryption ? _FieldPrefabControlID : _o.FieldPrefabControlID,
      TableEncryptionService.UseEncryption ? _FieldGetKeywordCallDialogEnum : _o.FieldGetKeywordCallDialogEnum,
      _MasteryImagePath,
      _FieldLobbyTitleImagePath,
      _KeywordLogoImagePath);
  }
}

public class FieldSeasonExcelT
{
  public long UniqueId { get; set; }
  public long EventContentId { get; set; }
  public long EntryDateId { get; set; }
  public long InstantEntryDateId { get; set; }
  public string StartDate { get; set; }
  public string EndDate { get; set; }
  public long LobbyBGMChangeStageId { get; set; }
  public long FieldPrefabControlID { get; set; }
  public Japan.FieldDialogType FieldGetKeywordCallDialogEnum { get; set; }
  public string MasteryImagePath { get; set; }
  public string FieldLobbyTitleImagePath { get; set; }
  public string KeywordLogoImagePath { get; set; }

  public FieldSeasonExcelT() {
    this.UniqueId = 0;
    this.EventContentId = 0;
    this.EntryDateId = 0;
    this.InstantEntryDateId = 0;
    this.StartDate = null;
    this.EndDate = null;
    this.LobbyBGMChangeStageId = 0;
    this.FieldPrefabControlID = 0;
    this.FieldGetKeywordCallDialogEnum = Japan.FieldDialogType.None;
    this.MasteryImagePath = null;
    this.FieldLobbyTitleImagePath = null;
    this.KeywordLogoImagePath = null;
  }
}


static public class FieldSeasonExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*EntryDateId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*InstantEntryDateId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 12 /*StartDate*/, false)
      && verifier.VerifyString(tablePos, 14 /*EndDate*/, false)
      && verifier.VerifyField(tablePos, 16 /*LobbyBGMChangeStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*FieldPrefabControlID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*FieldGetKeywordCallDialogEnum*/, 4 /*Japan.FieldDialogType*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*MasteryImagePath*/, false)
      && verifier.VerifyString(tablePos, 24 /*FieldLobbyTitleImagePath*/, false)
      && verifier.VerifyString(tablePos, 26 /*KeywordLogoImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
