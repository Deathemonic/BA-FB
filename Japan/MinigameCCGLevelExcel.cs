// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGLevelExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGLevelExcel GetRootAsMinigameCCGLevelExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGLevelExcel(_bb, new MinigameCCGLevelExcel()); }
  public static MinigameCCGLevelExcel GetRootAsMinigameCCGLevelExcel(ByteBuffer _bb, MinigameCCGLevelExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGLevelExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long LevelId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CCGId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int FloorIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BackgroundPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackgroundPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBackgroundPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBackgroundPathArray() { return __p.__vector_as_array<byte>(10); }
  public long BGMId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.MinigameCCGLevelExcel> CreateMinigameCCGLevelExcel(FlatBufferBuilder builder,
      long LevelId = 0,
      long CCGId = 0,
      int FloorIndex = 0,
      StringOffset BackgroundPathOffset = default(StringOffset),
      long BGMId = 0) {
    builder.StartTable(5);
    MinigameCCGLevelExcel.AddBGMId(builder, BGMId);
    MinigameCCGLevelExcel.AddCCGId(builder, CCGId);
    MinigameCCGLevelExcel.AddLevelId(builder, LevelId);
    MinigameCCGLevelExcel.AddBackgroundPath(builder, BackgroundPathOffset);
    MinigameCCGLevelExcel.AddFloorIndex(builder, FloorIndex);
    return MinigameCCGLevelExcel.EndMinigameCCGLevelExcel(builder);
  }

  public static void StartMinigameCCGLevelExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddLevelId(FlatBufferBuilder builder, long levelId) { builder.AddLong(0, levelId, 0); }
  public static void AddCCGId(FlatBufferBuilder builder, long cCGId) { builder.AddLong(1, cCGId, 0); }
  public static void AddFloorIndex(FlatBufferBuilder builder, int floorIndex) { builder.AddInt(2, floorIndex, 0); }
  public static void AddBackgroundPath(FlatBufferBuilder builder, StringOffset backgroundPathOffset) { builder.AddOffset(3, backgroundPathOffset.Value, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(4, bGMId, 0); }
  public static Offset<Japan.MinigameCCGLevelExcel> EndMinigameCCGLevelExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGLevelExcel>(o);
  }
  public MinigameCCGLevelExcelT UnPack() {
    var _o = new MinigameCCGLevelExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGLevelExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLevel");
    _o.LevelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LevelId, key) : this.LevelId;
    _o.CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CCGId, key) : this.CCGId;
    _o.FloorIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FloorIndex, key) : this.FloorIndex;
    _o.BackgroundPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BackgroundPath, key) : this.BackgroundPath;
    _o.BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BGMId, key) : this.BGMId;
  }
  public static Offset<Japan.MinigameCCGLevelExcel> Pack(FlatBufferBuilder builder, MinigameCCGLevelExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGLevelExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLevel");
		var _LevelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LevelId, key) : _o.LevelId;
		var _CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CCGId, key) : _o.CCGId;
		var _FloorIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FloorIndex, key) : _o.FloorIndex;
    var _BackgroundPath = _o.BackgroundPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BackgroundPath, key) : _o.BackgroundPath));
		var _BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BGMId, key) : _o.BGMId;
    return CreateMinigameCCGLevelExcel(
      builder,
      TableEncryptionService.UseEncryption ? _LevelId : _o.LevelId,
      TableEncryptionService.UseEncryption ? _CCGId : _o.CCGId,
      TableEncryptionService.UseEncryption ? _FloorIndex : _o.FloorIndex,
      _BackgroundPath,
      TableEncryptionService.UseEncryption ? _BGMId : _o.BGMId);
  }
}

public class MinigameCCGLevelExcelT
{
  public long LevelId { get; set; }
  public long CCGId { get; set; }
  public int FloorIndex { get; set; }
  public string BackgroundPath { get; set; }
  public long BGMId { get; set; }

  public MinigameCCGLevelExcelT() {
    this.LevelId = 0;
    this.CCGId = 0;
    this.FloorIndex = 0;
    this.BackgroundPath = null;
    this.BGMId = 0;
  }
}


static public class MinigameCCGLevelExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LevelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CCGId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*FloorIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*BackgroundPath*/, false)
      && verifier.VerifyField(tablePos, 12 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
