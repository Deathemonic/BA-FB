// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentConcentrationExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentConcentrationExcel GetRootAsEventContentConcentrationExcel(ByteBuffer _bb) { return GetRootAsEventContentConcentrationExcel(_bb, new EventContentConcentrationExcel()); }
  public static EventContentConcentrationExcel GetRootAsEventContentConcentrationExcel(ByteBuffer _bb, EventContentConcentrationExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentConcentrationExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CostGoodsId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxCardPairCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCardOpenCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InstantClearRound { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CardBoardPrefabs { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCardBoardPrefabsBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCardBoardPrefabsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCardBoardPrefabsArray() { return __p.__vector_as_array<byte>(14); }
  public string BackImagePath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackImagePathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBackImagePathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBackImagePathArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<Japan.EventContentConcentrationExcel> CreateEventContentConcentrationExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long CostGoodsId = 0,
      int MaxCardPairCount = 0,
      int MaxCardOpenCount = 0,
      int InstantClearRound = 0,
      StringOffset CardBoardPrefabsOffset = default(StringOffset),
      StringOffset BackImagePathOffset = default(StringOffset)) {
    builder.StartTable(7);
    EventContentConcentrationExcel.AddCostGoodsId(builder, CostGoodsId);
    EventContentConcentrationExcel.AddEventContentId(builder, EventContentId);
    EventContentConcentrationExcel.AddBackImagePath(builder, BackImagePathOffset);
    EventContentConcentrationExcel.AddCardBoardPrefabs(builder, CardBoardPrefabsOffset);
    EventContentConcentrationExcel.AddInstantClearRound(builder, InstantClearRound);
    EventContentConcentrationExcel.AddMaxCardOpenCount(builder, MaxCardOpenCount);
    EventContentConcentrationExcel.AddMaxCardPairCount(builder, MaxCardPairCount);
    return EventContentConcentrationExcel.EndEventContentConcentrationExcel(builder);
  }

  public static void StartEventContentConcentrationExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddCostGoodsId(FlatBufferBuilder builder, long costGoodsId) { builder.AddLong(1, costGoodsId, 0); }
  public static void AddMaxCardPairCount(FlatBufferBuilder builder, int maxCardPairCount) { builder.AddInt(2, maxCardPairCount, 0); }
  public static void AddMaxCardOpenCount(FlatBufferBuilder builder, int maxCardOpenCount) { builder.AddInt(3, maxCardOpenCount, 0); }
  public static void AddInstantClearRound(FlatBufferBuilder builder, int instantClearRound) { builder.AddInt(4, instantClearRound, 0); }
  public static void AddCardBoardPrefabs(FlatBufferBuilder builder, StringOffset cardBoardPrefabsOffset) { builder.AddOffset(5, cardBoardPrefabsOffset.Value, 0); }
  public static void AddBackImagePath(FlatBufferBuilder builder, StringOffset backImagePathOffset) { builder.AddOffset(6, backImagePathOffset.Value, 0); }
  public static Offset<Japan.EventContentConcentrationExcel> EndEventContentConcentrationExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentConcentrationExcel>(o);
  }
  public EventContentConcentrationExcelT UnPack() {
    var _o = new EventContentConcentrationExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentConcentrationExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentConcentration");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostGoodsId, key) : this.CostGoodsId;
    _o.MaxCardPairCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxCardPairCount, key) : this.MaxCardPairCount;
    _o.MaxCardOpenCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxCardOpenCount, key) : this.MaxCardOpenCount;
    _o.InstantClearRound = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.InstantClearRound, key) : this.InstantClearRound;
    _o.CardBoardPrefabs = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CardBoardPrefabs, key) : this.CardBoardPrefabs;
    _o.BackImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BackImagePath, key) : this.BackImagePath;
  }
  public static Offset<Japan.EventContentConcentrationExcel> Pack(FlatBufferBuilder builder, EventContentConcentrationExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentConcentrationExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentConcentration");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostGoodsId, key) : _o.CostGoodsId;
		var _MaxCardPairCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxCardPairCount, key) : _o.MaxCardPairCount;
		var _MaxCardOpenCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxCardOpenCount, key) : _o.MaxCardOpenCount;
		var _InstantClearRound = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.InstantClearRound, key) : _o.InstantClearRound;
    var _CardBoardPrefabs = _o.CardBoardPrefabs == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CardBoardPrefabs, key) : _o.CardBoardPrefabs));
    var _BackImagePath = _o.BackImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BackImagePath, key) : _o.BackImagePath));
    return CreateEventContentConcentrationExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _CostGoodsId : _o.CostGoodsId,
      TableEncryptionService.UseEncryption ? _MaxCardPairCount : _o.MaxCardPairCount,
      TableEncryptionService.UseEncryption ? _MaxCardOpenCount : _o.MaxCardOpenCount,
      TableEncryptionService.UseEncryption ? _InstantClearRound : _o.InstantClearRound,
      _CardBoardPrefabs,
      _BackImagePath);
  }
}

public class EventContentConcentrationExcelT
{
  public long EventContentId { get; set; }
  public long CostGoodsId { get; set; }
  public int MaxCardPairCount { get; set; }
  public int MaxCardOpenCount { get; set; }
  public int InstantClearRound { get; set; }
  public string CardBoardPrefabs { get; set; }
  public string BackImagePath { get; set; }

  public EventContentConcentrationExcelT() {
    this.EventContentId = 0;
    this.CostGoodsId = 0;
    this.MaxCardPairCount = 0;
    this.MaxCardOpenCount = 0;
    this.InstantClearRound = 0;
    this.CardBoardPrefabs = null;
    this.BackImagePath = null;
  }
}


static public class EventContentConcentrationExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CostGoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*MaxCardPairCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MaxCardOpenCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*InstantClearRound*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*CardBoardPrefabs*/, false)
      && verifier.VerifyString(tablePos, 16 /*BackImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
