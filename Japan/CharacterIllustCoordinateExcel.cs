// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterIllustCoordinateExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterIllustCoordinateExcel GetRootAsCharacterIllustCoordinateExcel(ByteBuffer _bb) { return GetRootAsCharacterIllustCoordinateExcel(_bb, new CharacterIllustCoordinateExcel()); }
  public static CharacterIllustCoordinateExcel GetRootAsCharacterIllustCoordinateExcel(ByteBuffer _bb, CharacterIllustCoordinateExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterIllustCoordinateExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float CharacterBodyCenterX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CharacterBodyCenterY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DefaultScale { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MinScale { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxScale { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Japan.CharacterIllustCoordinateExcel> CreateCharacterIllustCoordinateExcel(FlatBufferBuilder builder,
      long Id = 0,
      float CharacterBodyCenterX = 0.0f,
      float CharacterBodyCenterY = 0.0f,
      float DefaultScale = 0.0f,
      float MinScale = 0.0f,
      float MaxScale = 0.0f) {
    builder.StartTable(6);
    CharacterIllustCoordinateExcel.AddId(builder, Id);
    CharacterIllustCoordinateExcel.AddMaxScale(builder, MaxScale);
    CharacterIllustCoordinateExcel.AddMinScale(builder, MinScale);
    CharacterIllustCoordinateExcel.AddDefaultScale(builder, DefaultScale);
    CharacterIllustCoordinateExcel.AddCharacterBodyCenterY(builder, CharacterBodyCenterY);
    CharacterIllustCoordinateExcel.AddCharacterBodyCenterX(builder, CharacterBodyCenterX);
    return CharacterIllustCoordinateExcel.EndCharacterIllustCoordinateExcel(builder);
  }

  public static void StartCharacterIllustCoordinateExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddCharacterBodyCenterX(FlatBufferBuilder builder, float characterBodyCenterX) { builder.AddFloat(1, characterBodyCenterX, 0.0f); }
  public static void AddCharacterBodyCenterY(FlatBufferBuilder builder, float characterBodyCenterY) { builder.AddFloat(2, characterBodyCenterY, 0.0f); }
  public static void AddDefaultScale(FlatBufferBuilder builder, float defaultScale) { builder.AddFloat(3, defaultScale, 0.0f); }
  public static void AddMinScale(FlatBufferBuilder builder, float minScale) { builder.AddFloat(4, minScale, 0.0f); }
  public static void AddMaxScale(FlatBufferBuilder builder, float maxScale) { builder.AddFloat(5, maxScale, 0.0f); }
  public static Offset<Japan.CharacterIllustCoordinateExcel> EndCharacterIllustCoordinateExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.CharacterIllustCoordinateExcel>(o);
  }
  public CharacterIllustCoordinateExcelT UnPack() {
    var _o = new CharacterIllustCoordinateExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterIllustCoordinateExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterIllustCoordinate");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.CharacterBodyCenterX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CharacterBodyCenterX, key) : this.CharacterBodyCenterX;
    _o.CharacterBodyCenterY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CharacterBodyCenterY, key) : this.CharacterBodyCenterY;
    _o.DefaultScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.DefaultScale, key) : this.DefaultScale;
    _o.MinScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.MinScale, key) : this.MinScale;
    _o.MaxScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.MaxScale, key) : this.MaxScale;
  }
  public static Offset<Japan.CharacterIllustCoordinateExcel> Pack(FlatBufferBuilder builder, CharacterIllustCoordinateExcelT _o) {
    if (_o == null) return default(Offset<Japan.CharacterIllustCoordinateExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterIllustCoordinate");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _CharacterBodyCenterX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CharacterBodyCenterX, key) : _o.CharacterBodyCenterX;
		var _CharacterBodyCenterY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CharacterBodyCenterY, key) : _o.CharacterBodyCenterY;
		var _DefaultScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.DefaultScale, key) : _o.DefaultScale;
		var _MinScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.MinScale, key) : _o.MinScale;
		var _MaxScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.MaxScale, key) : _o.MaxScale;
    return CreateCharacterIllustCoordinateExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _CharacterBodyCenterX : _o.CharacterBodyCenterX,
      TableEncryptionService.UseEncryption ? _CharacterBodyCenterY : _o.CharacterBodyCenterY,
      TableEncryptionService.UseEncryption ? _DefaultScale : _o.DefaultScale,
      TableEncryptionService.UseEncryption ? _MinScale : _o.MinScale,
      TableEncryptionService.UseEncryption ? _MaxScale : _o.MaxScale);
  }
}

public class CharacterIllustCoordinateExcelT
{
  public long Id { get; set; }
  public float CharacterBodyCenterX { get; set; }
  public float CharacterBodyCenterY { get; set; }
  public float DefaultScale { get; set; }
  public float MinScale { get; set; }
  public float MaxScale { get; set; }

  public CharacterIllustCoordinateExcelT() {
    this.Id = 0;
    this.CharacterBodyCenterX = 0.0f;
    this.CharacterBodyCenterY = 0.0f;
    this.DefaultScale = 0.0f;
    this.MinScale = 0.0f;
    this.MaxScale = 0.0f;
  }
}


static public class CharacterIllustCoordinateExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterBodyCenterX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CharacterBodyCenterY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DefaultScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MinScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MaxScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
