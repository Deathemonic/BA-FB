// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterDialogEventExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterDialogEventExcel GetRootAsCharacterDialogEventExcel(ByteBuffer _bb) { return GetRootAsCharacterDialogEventExcel(_bb, new CharacterDialogEventExcel()); }
  public static CharacterDialogEventExcel GetRootAsCharacterDialogEventExcel(ByteBuffer _bb, CharacterDialogEventExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterDialogEventExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CostumeUniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OriginalCharacterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DisplayOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ProductionStep ProductionStep { get { int o = __p.__offset(12); return o != 0 ? (Japan.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : Japan.ProductionStep.ToDo; } }
  public Japan.DialogCategory DialogCategory { get { int o = __p.__offset(14); return o != 0 ? (Japan.DialogCategory)__p.bb.GetInt(o + __p.bb_pos) : Japan.DialogCategory.Cafe; } }
  public Japan.DialogCondition DialogCondition { get { int o = __p.__offset(16); return o != 0 ? (Japan.DialogCondition)__p.bb.GetInt(o + __p.bb_pos) : Japan.DialogCondition.Idle; } }
  public Japan.DialogConditionDetail DialogConditionDetail { get { int o = __p.__offset(18); return o != 0 ? (Japan.DialogConditionDetail)__p.bb.GetInt(o + __p.bb_pos) : Japan.DialogConditionDetail.None; } }
  public long DialogConditionDetailValue { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.DialogType DialogType { get { int o = __p.__offset(24); return o != 0 ? (Japan.DialogType)__p.bb.GetInt(o + __p.bb_pos) : Japan.DialogType.Talk; } }
  public string ActionName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetActionNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetActionNameArray() { return __p.__vector_as_array<byte>(26); }
  public long Duration { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string AnimationName { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetAnimationNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetAnimationNameArray() { return __p.__vector_as_array<byte>(30); }
  public string LocalizeKR { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeKRBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetLocalizeKRBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetLocalizeKRArray() { return __p.__vector_as_array<byte>(32); }
  public string LocalizeJP { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeJPBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetLocalizeJPBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetLocalizeJPArray() { return __p.__vector_as_array<byte>(34); }
  public uint VoiceId(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int VoiceIdLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetVoiceIdBytes() { return __p.__vector_as_span<uint>(36, 4); }
#else
  public ArraySegment<byte>? GetVoiceIdBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public uint[] GetVoiceIdArray() { return __p.__vector_as_array<uint>(36); }
  public bool CollectionVisible { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Japan.CVCollectionType CVCollectionType { get { int o = __p.__offset(40); return o != 0 ? (Japan.CVCollectionType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CVCollectionType.CVNormal; } }
  public Japan.CVUnlockScenarioType CVUnlockScenarioType { get { int o = __p.__offset(42); return o != 0 ? (Japan.CVUnlockScenarioType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CVUnlockScenarioType.Main; } }
  public long UnlockEventSeason { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioGroupId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string LocalizeCVGroup { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeCVGroupBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetLocalizeCVGroupBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetLocalizeCVGroupArray() { return __p.__vector_as_array<byte>(48); }

  public static Offset<Japan.CharacterDialogEventExcel> CreateCharacterDialogEventExcel(FlatBufferBuilder builder,
      long CostumeUniqueId = 0,
      long OriginalCharacterId = 0,
      long DisplayOrder = 0,
      long EventID = 0,
      Japan.ProductionStep ProductionStep = Japan.ProductionStep.ToDo,
      Japan.DialogCategory DialogCategory = Japan.DialogCategory.Cafe,
      Japan.DialogCondition DialogCondition = Japan.DialogCondition.Idle,
      Japan.DialogConditionDetail DialogConditionDetail = Japan.DialogConditionDetail.None,
      long DialogConditionDetailValue = 0,
      long GroupId = 0,
      Japan.DialogType DialogType = Japan.DialogType.Talk,
      StringOffset ActionNameOffset = default(StringOffset),
      long Duration = 0,
      StringOffset AnimationNameOffset = default(StringOffset),
      StringOffset LocalizeKROffset = default(StringOffset),
      StringOffset LocalizeJPOffset = default(StringOffset),
      VectorOffset VoiceIdOffset = default(VectorOffset),
      bool CollectionVisible = false,
      Japan.CVCollectionType CVCollectionType = Japan.CVCollectionType.CVNormal,
      Japan.CVUnlockScenarioType CVUnlockScenarioType = Japan.CVUnlockScenarioType.Main,
      long UnlockEventSeason = 0,
      long ScenarioGroupId = 0,
      StringOffset LocalizeCVGroupOffset = default(StringOffset)) {
    builder.StartTable(23);
    CharacterDialogEventExcel.AddScenarioGroupId(builder, ScenarioGroupId);
    CharacterDialogEventExcel.AddUnlockEventSeason(builder, UnlockEventSeason);
    CharacterDialogEventExcel.AddDuration(builder, Duration);
    CharacterDialogEventExcel.AddGroupId(builder, GroupId);
    CharacterDialogEventExcel.AddDialogConditionDetailValue(builder, DialogConditionDetailValue);
    CharacterDialogEventExcel.AddEventID(builder, EventID);
    CharacterDialogEventExcel.AddDisplayOrder(builder, DisplayOrder);
    CharacterDialogEventExcel.AddOriginalCharacterId(builder, OriginalCharacterId);
    CharacterDialogEventExcel.AddCostumeUniqueId(builder, CostumeUniqueId);
    CharacterDialogEventExcel.AddLocalizeCVGroup(builder, LocalizeCVGroupOffset);
    CharacterDialogEventExcel.AddCVUnlockScenarioType(builder, CVUnlockScenarioType);
    CharacterDialogEventExcel.AddCVCollectionType(builder, CVCollectionType);
    CharacterDialogEventExcel.AddVoiceId(builder, VoiceIdOffset);
    CharacterDialogEventExcel.AddLocalizeJP(builder, LocalizeJPOffset);
    CharacterDialogEventExcel.AddLocalizeKR(builder, LocalizeKROffset);
    CharacterDialogEventExcel.AddAnimationName(builder, AnimationNameOffset);
    CharacterDialogEventExcel.AddActionName(builder, ActionNameOffset);
    CharacterDialogEventExcel.AddDialogType(builder, DialogType);
    CharacterDialogEventExcel.AddDialogConditionDetail(builder, DialogConditionDetail);
    CharacterDialogEventExcel.AddDialogCondition(builder, DialogCondition);
    CharacterDialogEventExcel.AddDialogCategory(builder, DialogCategory);
    CharacterDialogEventExcel.AddProductionStep(builder, ProductionStep);
    CharacterDialogEventExcel.AddCollectionVisible(builder, CollectionVisible);
    return CharacterDialogEventExcel.EndCharacterDialogEventExcel(builder);
  }

  public static void StartCharacterDialogEventExcel(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddCostumeUniqueId(FlatBufferBuilder builder, long costumeUniqueId) { builder.AddLong(0, costumeUniqueId, 0); }
  public static void AddOriginalCharacterId(FlatBufferBuilder builder, long originalCharacterId) { builder.AddLong(1, originalCharacterId, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(2, displayOrder, 0); }
  public static void AddEventID(FlatBufferBuilder builder, long eventID) { builder.AddLong(3, eventID, 0); }
  public static void AddProductionStep(FlatBufferBuilder builder, Japan.ProductionStep productionStep) { builder.AddInt(4, (int)productionStep, 0); }
  public static void AddDialogCategory(FlatBufferBuilder builder, Japan.DialogCategory dialogCategory) { builder.AddInt(5, (int)dialogCategory, 0); }
  public static void AddDialogCondition(FlatBufferBuilder builder, Japan.DialogCondition dialogCondition) { builder.AddInt(6, (int)dialogCondition, 0); }
  public static void AddDialogConditionDetail(FlatBufferBuilder builder, Japan.DialogConditionDetail dialogConditionDetail) { builder.AddInt(7, (int)dialogConditionDetail, 0); }
  public static void AddDialogConditionDetailValue(FlatBufferBuilder builder, long dialogConditionDetailValue) { builder.AddLong(8, dialogConditionDetailValue, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(9, groupId, 0); }
  public static void AddDialogType(FlatBufferBuilder builder, Japan.DialogType dialogType) { builder.AddInt(10, (int)dialogType, 0); }
  public static void AddActionName(FlatBufferBuilder builder, StringOffset actionNameOffset) { builder.AddOffset(11, actionNameOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, long duration) { builder.AddLong(12, duration, 0); }
  public static void AddAnimationName(FlatBufferBuilder builder, StringOffset animationNameOffset) { builder.AddOffset(13, animationNameOffset.Value, 0); }
  public static void AddLocalizeKR(FlatBufferBuilder builder, StringOffset localizeKROffset) { builder.AddOffset(14, localizeKROffset.Value, 0); }
  public static void AddLocalizeJP(FlatBufferBuilder builder, StringOffset localizeJPOffset) { builder.AddOffset(15, localizeJPOffset.Value, 0); }
  public static void AddVoiceId(FlatBufferBuilder builder, VectorOffset voiceIdOffset) { builder.AddOffset(16, voiceIdOffset.Value, 0); }
  public static VectorOffset CreateVoiceIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVoiceIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCollectionVisible(FlatBufferBuilder builder, bool collectionVisible) { builder.AddBool(17, collectionVisible, false); }
  public static void AddCVCollectionType(FlatBufferBuilder builder, Japan.CVCollectionType cVCollectionType) { builder.AddInt(18, (int)cVCollectionType, 0); }
  public static void AddCVUnlockScenarioType(FlatBufferBuilder builder, Japan.CVUnlockScenarioType cVUnlockScenarioType) { builder.AddInt(19, (int)cVUnlockScenarioType, 0); }
  public static void AddUnlockEventSeason(FlatBufferBuilder builder, long unlockEventSeason) { builder.AddLong(20, unlockEventSeason, 0); }
  public static void AddScenarioGroupId(FlatBufferBuilder builder, long scenarioGroupId) { builder.AddLong(21, scenarioGroupId, 0); }
  public static void AddLocalizeCVGroup(FlatBufferBuilder builder, StringOffset localizeCVGroupOffset) { builder.AddOffset(22, localizeCVGroupOffset.Value, 0); }
  public static Offset<Japan.CharacterDialogEventExcel> EndCharacterDialogEventExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.CharacterDialogEventExcel>(o);
  }
  public CharacterDialogEventExcelT UnPack() {
    var _o = new CharacterDialogEventExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterDialogEventExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterDialogEvent");
    _o.CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostumeUniqueId, key) : this.CostumeUniqueId;
    _o.OriginalCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OriginalCharacterId, key) : this.OriginalCharacterId;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.EventID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventID, key) : this.EventID;
    _o.ProductionStep = TableEncryptionService.UseEncryption ? (Japan.ProductionStep)TableEncryptionService.Convert((int)this.ProductionStep, key) : this.ProductionStep;
    _o.DialogCategory = TableEncryptionService.UseEncryption ? (Japan.DialogCategory)TableEncryptionService.Convert((int)this.DialogCategory, key) : this.DialogCategory;
    _o.DialogCondition = TableEncryptionService.UseEncryption ? (Japan.DialogCondition)TableEncryptionService.Convert((int)this.DialogCondition, key) : this.DialogCondition;
    _o.DialogConditionDetail = TableEncryptionService.UseEncryption ? (Japan.DialogConditionDetail)TableEncryptionService.Convert((int)this.DialogConditionDetail, key) : this.DialogConditionDetail;
    _o.DialogConditionDetailValue = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DialogConditionDetailValue, key) : this.DialogConditionDetailValue;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.DialogType = TableEncryptionService.UseEncryption ? (Japan.DialogType)TableEncryptionService.Convert((int)this.DialogType, key) : this.DialogType;
    _o.ActionName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ActionName, key) : this.ActionName;
    _o.Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Duration, key) : this.Duration;
    _o.AnimationName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.AnimationName, key) : this.AnimationName;
    _o.LocalizeKR = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeKR, key) : this.LocalizeKR;
    _o.LocalizeJP = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeJP, key) : this.LocalizeJP;
    _o.VoiceId = new List<uint>();
    for (var _j = 0; _j < this.VoiceIdLength; ++_j) {_o.VoiceId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.VoiceId(_j), key) : this.VoiceId(_j));}
    _o.CollectionVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CollectionVisible, key) : this.CollectionVisible;
    _o.CVCollectionType = TableEncryptionService.UseEncryption ? (Japan.CVCollectionType)TableEncryptionService.Convert((int)this.CVCollectionType, key) : this.CVCollectionType;
    _o.CVUnlockScenarioType = TableEncryptionService.UseEncryption ? (Japan.CVUnlockScenarioType)TableEncryptionService.Convert((int)this.CVUnlockScenarioType, key) : this.CVUnlockScenarioType;
    _o.UnlockEventSeason = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UnlockEventSeason, key) : this.UnlockEventSeason;
    _o.ScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ScenarioGroupId, key) : this.ScenarioGroupId;
    _o.LocalizeCVGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeCVGroup, key) : this.LocalizeCVGroup;
  }
  public static Offset<Japan.CharacterDialogEventExcel> Pack(FlatBufferBuilder builder, CharacterDialogEventExcelT _o) {
    if (_o == null) return default(Offset<Japan.CharacterDialogEventExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterDialogEvent");
		var _CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostumeUniqueId, key) : _o.CostumeUniqueId;
		var _OriginalCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OriginalCharacterId, key) : _o.OriginalCharacterId;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
		var _EventID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventID, key) : _o.EventID;
		var _ProductionStep = TableEncryptionService.UseEncryption ? (Japan.ProductionStep)TableEncryptionService.Convert((int)_o.ProductionStep, key) : _o.ProductionStep;
		var _DialogCategory = TableEncryptionService.UseEncryption ? (Japan.DialogCategory)TableEncryptionService.Convert((int)_o.DialogCategory, key) : _o.DialogCategory;
		var _DialogCondition = TableEncryptionService.UseEncryption ? (Japan.DialogCondition)TableEncryptionService.Convert((int)_o.DialogCondition, key) : _o.DialogCondition;
		var _DialogConditionDetail = TableEncryptionService.UseEncryption ? (Japan.DialogConditionDetail)TableEncryptionService.Convert((int)_o.DialogConditionDetail, key) : _o.DialogConditionDetail;
		var _DialogConditionDetailValue = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DialogConditionDetailValue, key) : _o.DialogConditionDetailValue;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _DialogType = TableEncryptionService.UseEncryption ? (Japan.DialogType)TableEncryptionService.Convert((int)_o.DialogType, key) : _o.DialogType;
    var _ActionName = _o.ActionName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ActionName, key) : _o.ActionName));
		var _Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Duration, key) : _o.Duration;
    var _AnimationName = _o.AnimationName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.AnimationName, key) : _o.AnimationName));
    var _LocalizeKR = _o.LocalizeKR == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeKR, key) : _o.LocalizeKR));
    var _LocalizeJP = _o.LocalizeJP == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeJP, key) : _o.LocalizeJP));
    var _VoiceId = default(VectorOffset);
    if (_o.VoiceId != null) {
      var __VoiceId = _o.VoiceId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)x, key) : x).ToArray();
      _VoiceId = CreateVoiceIdVector(builder, __VoiceId);
    }
		var _CollectionVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CollectionVisible, key) : _o.CollectionVisible;
		var _CVCollectionType = TableEncryptionService.UseEncryption ? (Japan.CVCollectionType)TableEncryptionService.Convert((int)_o.CVCollectionType, key) : _o.CVCollectionType;
		var _CVUnlockScenarioType = TableEncryptionService.UseEncryption ? (Japan.CVUnlockScenarioType)TableEncryptionService.Convert((int)_o.CVUnlockScenarioType, key) : _o.CVUnlockScenarioType;
		var _UnlockEventSeason = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UnlockEventSeason, key) : _o.UnlockEventSeason;
		var _ScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ScenarioGroupId, key) : _o.ScenarioGroupId;
    var _LocalizeCVGroup = _o.LocalizeCVGroup == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeCVGroup, key) : _o.LocalizeCVGroup));
    return CreateCharacterDialogEventExcel(
      builder,
      TableEncryptionService.UseEncryption ? _CostumeUniqueId : _o.CostumeUniqueId,
      TableEncryptionService.UseEncryption ? _OriginalCharacterId : _o.OriginalCharacterId,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      TableEncryptionService.UseEncryption ? _EventID : _o.EventID,
      TableEncryptionService.UseEncryption ? _ProductionStep : _o.ProductionStep,
      TableEncryptionService.UseEncryption ? _DialogCategory : _o.DialogCategory,
      TableEncryptionService.UseEncryption ? _DialogCondition : _o.DialogCondition,
      TableEncryptionService.UseEncryption ? _DialogConditionDetail : _o.DialogConditionDetail,
      TableEncryptionService.UseEncryption ? _DialogConditionDetailValue : _o.DialogConditionDetailValue,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _DialogType : _o.DialogType,
      _ActionName,
      TableEncryptionService.UseEncryption ? _Duration : _o.Duration,
      _AnimationName,
      _LocalizeKR,
      _LocalizeJP,
      _VoiceId,
      TableEncryptionService.UseEncryption ? _CollectionVisible : _o.CollectionVisible,
      TableEncryptionService.UseEncryption ? _CVCollectionType : _o.CVCollectionType,
      TableEncryptionService.UseEncryption ? _CVUnlockScenarioType : _o.CVUnlockScenarioType,
      TableEncryptionService.UseEncryption ? _UnlockEventSeason : _o.UnlockEventSeason,
      TableEncryptionService.UseEncryption ? _ScenarioGroupId : _o.ScenarioGroupId,
      _LocalizeCVGroup);
  }
}

public class CharacterDialogEventExcelT
{
  public long CostumeUniqueId { get; set; }
  public long OriginalCharacterId { get; set; }
  public long DisplayOrder { get; set; }
  public long EventID { get; set; }
  public Japan.ProductionStep ProductionStep { get; set; }
  public Japan.DialogCategory DialogCategory { get; set; }
  public Japan.DialogCondition DialogCondition { get; set; }
  public Japan.DialogConditionDetail DialogConditionDetail { get; set; }
  public long DialogConditionDetailValue { get; set; }
  public long GroupId { get; set; }
  public Japan.DialogType DialogType { get; set; }
  public string ActionName { get; set; }
  public long Duration { get; set; }
  public string AnimationName { get; set; }
  public string LocalizeKR { get; set; }
  public string LocalizeJP { get; set; }
  public List<uint> VoiceId { get; set; }
  public bool CollectionVisible { get; set; }
  public Japan.CVCollectionType CVCollectionType { get; set; }
  public Japan.CVUnlockScenarioType CVUnlockScenarioType { get; set; }
  public long UnlockEventSeason { get; set; }
  public long ScenarioGroupId { get; set; }
  public string LocalizeCVGroup { get; set; }

  public CharacterDialogEventExcelT() {
    this.CostumeUniqueId = 0;
    this.OriginalCharacterId = 0;
    this.DisplayOrder = 0;
    this.EventID = 0;
    this.ProductionStep = Japan.ProductionStep.ToDo;
    this.DialogCategory = Japan.DialogCategory.Cafe;
    this.DialogCondition = Japan.DialogCondition.Idle;
    this.DialogConditionDetail = Japan.DialogConditionDetail.None;
    this.DialogConditionDetailValue = 0;
    this.GroupId = 0;
    this.DialogType = Japan.DialogType.Talk;
    this.ActionName = null;
    this.Duration = 0;
    this.AnimationName = null;
    this.LocalizeKR = null;
    this.LocalizeJP = null;
    this.VoiceId = null;
    this.CollectionVisible = false;
    this.CVCollectionType = Japan.CVCollectionType.CVNormal;
    this.CVUnlockScenarioType = Japan.CVUnlockScenarioType.Main;
    this.UnlockEventSeason = 0;
    this.ScenarioGroupId = 0;
    this.LocalizeCVGroup = null;
  }
}


static public class CharacterDialogEventExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CostumeUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*OriginalCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*EventID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ProductionStep*/, 4 /*Japan.ProductionStep*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*DialogCategory*/, 4 /*Japan.DialogCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DialogCondition*/, 4 /*Japan.DialogCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*DialogConditionDetail*/, 4 /*Japan.DialogConditionDetail*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*DialogConditionDetailValue*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*DialogType*/, 4 /*Japan.DialogType*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*ActionName*/, false)
      && verifier.VerifyField(tablePos, 28 /*Duration*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 30 /*AnimationName*/, false)
      && verifier.VerifyString(tablePos, 32 /*LocalizeKR*/, false)
      && verifier.VerifyString(tablePos, 34 /*LocalizeJP*/, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*VoiceId*/, 4 /*uint*/, false)
      && verifier.VerifyField(tablePos, 38 /*CollectionVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 40 /*CVCollectionType*/, 4 /*Japan.CVCollectionType*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*CVUnlockScenarioType*/, 4 /*Japan.CVUnlockScenarioType*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*UnlockEventSeason*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*ScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 48 /*LocalizeCVGroup*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
