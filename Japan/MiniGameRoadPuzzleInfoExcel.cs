// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameRoadPuzzleInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameRoadPuzzleInfoExcel GetRootAsMiniGameRoadPuzzleInfoExcel(ByteBuffer _bb) { return GetRootAsMiniGameRoadPuzzleInfoExcel(_bb, new MiniGameRoadPuzzleInfoExcel()); }
  public static MiniGameRoadPuzzleInfoExcel GetRootAsMiniGameRoadPuzzleInfoExcel(ByteBuffer _bb, MiniGameRoadPuzzleInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameRoadPuzzleInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType EventUseCostType { get { int o = __p.__offset(6); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long EventUseCostId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CostGoodsId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RailSetRewardId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int InstantClearRound { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Japan.MiniGameRoadPuzzleInfoExcel> CreateMiniGameRoadPuzzleInfoExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Japan.ParcelType EventUseCostType = Japan.ParcelType.None,
      long EventUseCostId = 0,
      long CostGoodsId = 0,
      long RailSetRewardId = 0,
      int InstantClearRound = 0) {
    builder.StartTable(6);
    MiniGameRoadPuzzleInfoExcel.AddRailSetRewardId(builder, RailSetRewardId);
    MiniGameRoadPuzzleInfoExcel.AddCostGoodsId(builder, CostGoodsId);
    MiniGameRoadPuzzleInfoExcel.AddEventUseCostId(builder, EventUseCostId);
    MiniGameRoadPuzzleInfoExcel.AddEventContentId(builder, EventContentId);
    MiniGameRoadPuzzleInfoExcel.AddInstantClearRound(builder, InstantClearRound);
    MiniGameRoadPuzzleInfoExcel.AddEventUseCostType(builder, EventUseCostType);
    return MiniGameRoadPuzzleInfoExcel.EndMiniGameRoadPuzzleInfoExcel(builder);
  }

  public static void StartMiniGameRoadPuzzleInfoExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddEventUseCostType(FlatBufferBuilder builder, Japan.ParcelType eventUseCostType) { builder.AddInt(1, (int)eventUseCostType, 0); }
  public static void AddEventUseCostId(FlatBufferBuilder builder, long eventUseCostId) { builder.AddLong(2, eventUseCostId, 0); }
  public static void AddCostGoodsId(FlatBufferBuilder builder, long costGoodsId) { builder.AddLong(3, costGoodsId, 0); }
  public static void AddRailSetRewardId(FlatBufferBuilder builder, long railSetRewardId) { builder.AddLong(4, railSetRewardId, 0); }
  public static void AddInstantClearRound(FlatBufferBuilder builder, int instantClearRound) { builder.AddInt(5, instantClearRound, 0); }
  public static Offset<Japan.MiniGameRoadPuzzleInfoExcel> EndMiniGameRoadPuzzleInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MiniGameRoadPuzzleInfoExcel>(o);
  }
  public MiniGameRoadPuzzleInfoExcelT UnPack() {
    var _o = new MiniGameRoadPuzzleInfoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameRoadPuzzleInfoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameRoadPuzzleInfo");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.EventUseCostType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.EventUseCostType, key) : this.EventUseCostType;
    _o.EventUseCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventUseCostId, key) : this.EventUseCostId;
    _o.CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostGoodsId, key) : this.CostGoodsId;
    _o.RailSetRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RailSetRewardId, key) : this.RailSetRewardId;
    _o.InstantClearRound = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.InstantClearRound, key) : this.InstantClearRound;
  }
  public static Offset<Japan.MiniGameRoadPuzzleInfoExcel> Pack(FlatBufferBuilder builder, MiniGameRoadPuzzleInfoExcelT _o) {
    if (_o == null) return default(Offset<Japan.MiniGameRoadPuzzleInfoExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameRoadPuzzleInfo");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _EventUseCostType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.EventUseCostType, key) : _o.EventUseCostType;
		var _EventUseCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventUseCostId, key) : _o.EventUseCostId;
		var _CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostGoodsId, key) : _o.CostGoodsId;
		var _RailSetRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RailSetRewardId, key) : _o.RailSetRewardId;
		var _InstantClearRound = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.InstantClearRound, key) : _o.InstantClearRound;
    return CreateMiniGameRoadPuzzleInfoExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _EventUseCostType : _o.EventUseCostType,
      TableEncryptionService.UseEncryption ? _EventUseCostId : _o.EventUseCostId,
      TableEncryptionService.UseEncryption ? _CostGoodsId : _o.CostGoodsId,
      TableEncryptionService.UseEncryption ? _RailSetRewardId : _o.RailSetRewardId,
      TableEncryptionService.UseEncryption ? _InstantClearRound : _o.InstantClearRound);
  }
}

public class MiniGameRoadPuzzleInfoExcelT
{
  public long EventContentId { get; set; }
  public Japan.ParcelType EventUseCostType { get; set; }
  public long EventUseCostId { get; set; }
  public long CostGoodsId { get; set; }
  public long RailSetRewardId { get; set; }
  public int InstantClearRound { get; set; }

  public MiniGameRoadPuzzleInfoExcelT() {
    this.EventContentId = 0;
    this.EventUseCostType = Japan.ParcelType.None;
    this.EventUseCostId = 0;
    this.CostGoodsId = 0;
    this.RailSetRewardId = 0;
    this.InstantClearRound = 0;
  }
}


static public class MiniGameRoadPuzzleInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventUseCostType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*EventUseCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*CostGoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*RailSetRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*InstantClearRound*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
