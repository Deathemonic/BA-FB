// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterExcel GetRootAsCharacterExcel(ByteBuffer _bb) { return GetRootAsCharacterExcel(_bb, new CharacterExcel()); }
  public static CharacterExcel GetRootAsCharacterExcel(ByteBuffer _bb, CharacterExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DevName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDevNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDevNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDevNameArray() { return __p.__vector_as_array<byte>(6); }
  public long CostumeGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsPlayable { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Japan.ProductionStep ProductionStep { get { int o = __p.__offset(12); return o != 0 ? (Japan.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : Japan.ProductionStep.ToDo; } }
  public bool CollectionVisible { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ReleaseDate { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReleaseDateBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetReleaseDateBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetReleaseDateArray() { return __p.__vector_as_array<byte>(16); }
  public string CollectionVisibleStartDate { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionVisibleStartDateBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCollectionVisibleStartDateBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCollectionVisibleStartDateArray() { return __p.__vector_as_array<byte>(18); }
  public string CollectionVisibleEndDate { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionVisibleEndDateBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCollectionVisibleEndDateBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCollectionVisibleEndDateArray() { return __p.__vector_as_array<byte>(20); }
  public bool IsPlayableCharacter { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Japan.Rarity Rarity { get { int o = __p.__offset(26); return o != 0 ? (Japan.Rarity)__p.bb.GetInt(o + __p.bb_pos) : Japan.Rarity.N; } }
  public bool IsNPC { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Japan.TacticEntityType TacticEntityType { get { int o = __p.__offset(30); return o != 0 ? (Japan.TacticEntityType)__p.bb.GetInt(o + __p.bb_pos) : Japan.TacticEntityType.None; } }
  public bool CanSurvive { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDummy { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SubPartsCount { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.TacticRole TacticRole { get { int o = __p.__offset(38); return o != 0 ? (Japan.TacticRole)__p.bb.GetInt(o + __p.bb_pos) : Japan.TacticRole.None; } }
  public Japan.WeaponType WeaponType { get { int o = __p.__offset(40); return o != 0 ? (Japan.WeaponType)__p.bb.GetInt(o + __p.bb_pos) : Japan.WeaponType.None; } }
  public Japan.TacticRange TacticRange { get { int o = __p.__offset(42); return o != 0 ? (Japan.TacticRange)__p.bb.GetInt(o + __p.bb_pos) : Japan.TacticRange.Back; } }
  public Japan.BulletType BulletType { get { int o = __p.__offset(44); return o != 0 ? (Japan.BulletType)__p.bb.GetInt(o + __p.bb_pos) : Japan.BulletType.Normal; } }
  public Japan.ArmorType ArmorType { get { int o = __p.__offset(46); return o != 0 ? (Japan.ArmorType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ArmorType.LightArmor; } }
  public Japan.AimIKType AimIKType { get { int o = __p.__offset(48); return o != 0 ? (Japan.AimIKType)__p.bb.GetInt(o + __p.bb_pos) : Japan.AimIKType.None; } }
  public Japan.School School { get { int o = __p.__offset(50); return o != 0 ? (Japan.School)__p.bb.GetInt(o + __p.bb_pos) : Japan.School.None; } }
  public Japan.Club Club { get { int o = __p.__offset(52); return o != 0 ? (Japan.Club)__p.bb.GetInt(o + __p.bb_pos) : Japan.Club.None; } }
  public int DefaultStarGrade { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxStarGrade { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.StatLevelUpType StatLevelUpType { get { int o = __p.__offset(58); return o != 0 ? (Japan.StatLevelUpType)__p.bb.GetInt(o + __p.bb_pos) : Japan.StatLevelUpType.Standard; } }
  public Japan.SquadType SquadType { get { int o = __p.__offset(60); return o != 0 ? (Japan.SquadType)__p.bb.GetInt(o + __p.bb_pos) : Japan.SquadType.None; } }
  public bool Jumpable { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long PersonalityId { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterAIId { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExternalBTId { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MainCombatStyleId { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CombatStyleIndex { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScenarioCharacter { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenarioCharacterBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetScenarioCharacterBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetScenarioCharacterArray() { return __p.__vector_as_array<byte>(74); }
  public uint SpawnTemplateId { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int FavorLevelupType { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.EquipmentCategory EquipmentSlot(int j) { int o = __p.__offset(80); return o != 0 ? (Japan.EquipmentCategory)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.EquipmentCategory)0; }
  public int EquipmentSlotLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.EquipmentCategory> GetEquipmentSlotBytes() { return __p.__vector_as_span<Japan.EquipmentCategory>(80, 4); }
#else
  public ArraySegment<byte>? GetEquipmentSlotBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public Japan.EquipmentCategory[] GetEquipmentSlotArray() { int o = __p.__offset(80); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.EquipmentCategory[] a = new Japan.EquipmentCategory[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.EquipmentCategory)__p.bb.GetInt(p + i * 4); } return a; }
  public uint WeaponLocalizeId { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool DisplayEnemyInfo { get { int o = __p.__offset(84); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long BodyRadius { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RandomEffectRadius { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool HPBarHide { get { int o = __p.__offset(90); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float HpBarHeight { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HighlightFloaterHeight { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmojiOffsetX { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmojiOffsetY { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int MoveStartFrame { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MoveEndFrame { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int JumpMotionFrame { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AppearFrame { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool CanMove { get { int o = __p.__offset(108); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanFix { get { int o = __p.__offset(110); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanCrowdControl { get { int o = __p.__offset(112); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanBattleItemMove { get { int o = __p.__offset(114); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IgnoreObstacle { get { int o = __p.__offset(116); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsAirUnit { get { int o = __p.__offset(118); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long AirUnitHeight { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.Tag Tags(int j) { int o = __p.__offset(122); return o != 0 ? (Japan.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.Tag)0; }
  public int TagsLength { get { int o = __p.__offset(122); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.Tag> GetTagsBytes() { return __p.__vector_as_span<Japan.Tag>(122, 4); }
#else
  public ArraySegment<byte>? GetTagsBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public Japan.Tag[] GetTagsArray() { int o = __p.__offset(122); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.Tag[] a = new Japan.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public long SecretStoneItemId { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int SecretStoneItemAmount { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long CharacterPieceItemId { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CharacterPieceItemAmount { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long CombineRecipeId { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.CharacterExcel> CreateCharacterExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset DevNameOffset = default(StringOffset),
      long CostumeGroupId = 0,
      bool IsPlayable = false,
      Japan.ProductionStep ProductionStep = Japan.ProductionStep.ToDo,
      bool CollectionVisible = false,
      StringOffset ReleaseDateOffset = default(StringOffset),
      StringOffset CollectionVisibleStartDateOffset = default(StringOffset),
      StringOffset CollectionVisibleEndDateOffset = default(StringOffset),
      bool isPlayableCharacter = false,
      uint LocalizeEtcId = 0,
      Japan.Rarity Rarity = Japan.Rarity.N,
      bool IsNPC = false,
      Japan.TacticEntityType TacticEntityType = Japan.TacticEntityType.None,
      bool CanSurvive = false,
      bool IsDummy = false,
      int SubPartsCount = 0,
      Japan.TacticRole TacticRole = Japan.TacticRole.None,
      Japan.WeaponType WeaponType = Japan.WeaponType.None,
      Japan.TacticRange TacticRange = Japan.TacticRange.Back,
      Japan.BulletType BulletType = Japan.BulletType.Normal,
      Japan.ArmorType ArmorType = Japan.ArmorType.LightArmor,
      Japan.AimIKType AimIKType = Japan.AimIKType.None,
      Japan.School School = Japan.School.None,
      Japan.Club Club = Japan.Club.None,
      int DefaultStarGrade = 0,
      int MaxStarGrade = 0,
      Japan.StatLevelUpType StatLevelUpType = Japan.StatLevelUpType.Standard,
      Japan.SquadType SquadType = Japan.SquadType.None,
      bool Jumpable = false,
      long PersonalityId = 0,
      long CharacterAIId = 0,
      long ExternalBTId = 0,
      long MainCombatStyleId = 0,
      int CombatStyleIndex = 0,
      StringOffset ScenarioCharacterOffset = default(StringOffset),
      uint SpawnTemplateId = 0,
      int FavorLevelupType = 0,
      VectorOffset EquipmentSlotOffset = default(VectorOffset),
      uint WeaponLocalizeId = 0,
      bool DisplayEnemyInfo = false,
      long bodyRadius = 0,
      long RandomEffectRadius = 0,
      bool HPBarHide = false,
      float HpBarHeight = 0.0f,
      float HighlightFloaterHeight = 0.0f,
      float EmojiOffsetX = 0.0f,
      float EmojiOffsetY = 0.0f,
      int MoveStartFrame = 0,
      int MoveEndFrame = 0,
      int JumpMotionFrame = 0,
      int AppearFrame = 0,
      bool CanMove = false,
      bool CanFix = false,
      bool CanCrowdControl = false,
      bool CanBattleItemMove = false,
      bool IgnoreObstacle = false,
      bool IsAirUnit = false,
      long AirUnitHeight = 0,
      VectorOffset TagsOffset = default(VectorOffset),
      long SecretStoneItemId = 0,
      int SecretStoneItemAmount = 0,
      long CharacterPieceItemId = 0,
      int CharacterPieceItemAmount = 0,
      long CombineRecipeId = 0) {
    builder.StartTable(65);
    CharacterExcel.AddCombineRecipeId(builder, CombineRecipeId);
    CharacterExcel.AddCharacterPieceItemId(builder, CharacterPieceItemId);
    CharacterExcel.AddSecretStoneItemId(builder, SecretStoneItemId);
    CharacterExcel.AddAirUnitHeight(builder, AirUnitHeight);
    CharacterExcel.AddRandomEffectRadius(builder, RandomEffectRadius);
    CharacterExcel.AddBodyRadius(builder, bodyRadius);
    CharacterExcel.AddMainCombatStyleId(builder, MainCombatStyleId);
    CharacterExcel.AddExternalBTId(builder, ExternalBTId);
    CharacterExcel.AddCharacterAIId(builder, CharacterAIId);
    CharacterExcel.AddPersonalityId(builder, PersonalityId);
    CharacterExcel.AddCostumeGroupId(builder, CostumeGroupId);
    CharacterExcel.AddId(builder, Id);
    CharacterExcel.AddCharacterPieceItemAmount(builder, CharacterPieceItemAmount);
    CharacterExcel.AddSecretStoneItemAmount(builder, SecretStoneItemAmount);
    CharacterExcel.AddTags(builder, TagsOffset);
    CharacterExcel.AddAppearFrame(builder, AppearFrame);
    CharacterExcel.AddJumpMotionFrame(builder, JumpMotionFrame);
    CharacterExcel.AddMoveEndFrame(builder, MoveEndFrame);
    CharacterExcel.AddMoveStartFrame(builder, MoveStartFrame);
    CharacterExcel.AddEmojiOffsetY(builder, EmojiOffsetY);
    CharacterExcel.AddEmojiOffsetX(builder, EmojiOffsetX);
    CharacterExcel.AddHighlightFloaterHeight(builder, HighlightFloaterHeight);
    CharacterExcel.AddHpBarHeight(builder, HpBarHeight);
    CharacterExcel.AddWeaponLocalizeId(builder, WeaponLocalizeId);
    CharacterExcel.AddEquipmentSlot(builder, EquipmentSlotOffset);
    CharacterExcel.AddFavorLevelupType(builder, FavorLevelupType);
    CharacterExcel.AddSpawnTemplateId(builder, SpawnTemplateId);
    CharacterExcel.AddScenarioCharacter(builder, ScenarioCharacterOffset);
    CharacterExcel.AddCombatStyleIndex(builder, CombatStyleIndex);
    CharacterExcel.AddSquadType(builder, SquadType);
    CharacterExcel.AddStatLevelUpType(builder, StatLevelUpType);
    CharacterExcel.AddMaxStarGrade(builder, MaxStarGrade);
    CharacterExcel.AddDefaultStarGrade(builder, DefaultStarGrade);
    CharacterExcel.AddClub(builder, Club);
    CharacterExcel.AddSchool(builder, School);
    CharacterExcel.AddAimIKType(builder, AimIKType);
    CharacterExcel.AddArmorType(builder, ArmorType);
    CharacterExcel.AddBulletType(builder, BulletType);
    CharacterExcel.AddTacticRange(builder, TacticRange);
    CharacterExcel.AddWeaponType(builder, WeaponType);
    CharacterExcel.AddTacticRole(builder, TacticRole);
    CharacterExcel.AddSubPartsCount(builder, SubPartsCount);
    CharacterExcel.AddTacticEntityType(builder, TacticEntityType);
    CharacterExcel.AddRarity(builder, Rarity);
    CharacterExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    CharacterExcel.AddCollectionVisibleEndDate(builder, CollectionVisibleEndDateOffset);
    CharacterExcel.AddCollectionVisibleStartDate(builder, CollectionVisibleStartDateOffset);
    CharacterExcel.AddReleaseDate(builder, ReleaseDateOffset);
    CharacterExcel.AddProductionStep(builder, ProductionStep);
    CharacterExcel.AddDevName(builder, DevNameOffset);
    CharacterExcel.AddIsAirUnit(builder, IsAirUnit);
    CharacterExcel.AddIgnoreObstacle(builder, IgnoreObstacle);
    CharacterExcel.AddCanBattleItemMove(builder, CanBattleItemMove);
    CharacterExcel.AddCanCrowdControl(builder, CanCrowdControl);
    CharacterExcel.AddCanFix(builder, CanFix);
    CharacterExcel.AddCanMove(builder, CanMove);
    CharacterExcel.AddHPBarHide(builder, HPBarHide);
    CharacterExcel.AddDisplayEnemyInfo(builder, DisplayEnemyInfo);
    CharacterExcel.AddJumpable(builder, Jumpable);
    CharacterExcel.AddIsDummy(builder, IsDummy);
    CharacterExcel.AddCanSurvive(builder, CanSurvive);
    CharacterExcel.AddIsNPC(builder, IsNPC);
    CharacterExcel.AddIsPlayableCharacter(builder, isPlayableCharacter);
    CharacterExcel.AddCollectionVisible(builder, CollectionVisible);
    CharacterExcel.AddIsPlayable(builder, IsPlayable);
    return CharacterExcel.EndCharacterExcel(builder);
  }

  public static void StartCharacterExcel(FlatBufferBuilder builder) { builder.StartTable(65); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddDevName(FlatBufferBuilder builder, StringOffset devNameOffset) { builder.AddOffset(1, devNameOffset.Value, 0); }
  public static void AddCostumeGroupId(FlatBufferBuilder builder, long costumeGroupId) { builder.AddLong(2, costumeGroupId, 0); }
  public static void AddIsPlayable(FlatBufferBuilder builder, bool isPlayable) { builder.AddBool(3, isPlayable, false); }
  public static void AddProductionStep(FlatBufferBuilder builder, Japan.ProductionStep productionStep) { builder.AddInt(4, (int)productionStep, 0); }
  public static void AddCollectionVisible(FlatBufferBuilder builder, bool collectionVisible) { builder.AddBool(5, collectionVisible, false); }
  public static void AddReleaseDate(FlatBufferBuilder builder, StringOffset releaseDateOffset) { builder.AddOffset(6, releaseDateOffset.Value, 0); }
  public static void AddCollectionVisibleStartDate(FlatBufferBuilder builder, StringOffset collectionVisibleStartDateOffset) { builder.AddOffset(7, collectionVisibleStartDateOffset.Value, 0); }
  public static void AddCollectionVisibleEndDate(FlatBufferBuilder builder, StringOffset collectionVisibleEndDateOffset) { builder.AddOffset(8, collectionVisibleEndDateOffset.Value, 0); }
  public static void AddIsPlayableCharacter(FlatBufferBuilder builder, bool isPlayableCharacter) { builder.AddBool(9, isPlayableCharacter, false); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(10, localizeEtcId, 0); }
  public static void AddRarity(FlatBufferBuilder builder, Japan.Rarity rarity) { builder.AddInt(11, (int)rarity, 0); }
  public static void AddIsNPC(FlatBufferBuilder builder, bool isNPC) { builder.AddBool(12, isNPC, false); }
  public static void AddTacticEntityType(FlatBufferBuilder builder, Japan.TacticEntityType tacticEntityType) { builder.AddInt(13, (int)tacticEntityType, 0); }
  public static void AddCanSurvive(FlatBufferBuilder builder, bool canSurvive) { builder.AddBool(14, canSurvive, false); }
  public static void AddIsDummy(FlatBufferBuilder builder, bool isDummy) { builder.AddBool(15, isDummy, false); }
  public static void AddSubPartsCount(FlatBufferBuilder builder, int subPartsCount) { builder.AddInt(16, subPartsCount, 0); }
  public static void AddTacticRole(FlatBufferBuilder builder, Japan.TacticRole tacticRole) { builder.AddInt(17, (int)tacticRole, 0); }
  public static void AddWeaponType(FlatBufferBuilder builder, Japan.WeaponType weaponType) { builder.AddInt(18, (int)weaponType, 0); }
  public static void AddTacticRange(FlatBufferBuilder builder, Japan.TacticRange tacticRange) { builder.AddInt(19, (int)tacticRange, 0); }
  public static void AddBulletType(FlatBufferBuilder builder, Japan.BulletType bulletType) { builder.AddInt(20, (int)bulletType, 0); }
  public static void AddArmorType(FlatBufferBuilder builder, Japan.ArmorType armorType) { builder.AddInt(21, (int)armorType, 0); }
  public static void AddAimIKType(FlatBufferBuilder builder, Japan.AimIKType aimIKType) { builder.AddInt(22, (int)aimIKType, 0); }
  public static void AddSchool(FlatBufferBuilder builder, Japan.School school) { builder.AddInt(23, (int)school, 0); }
  public static void AddClub(FlatBufferBuilder builder, Japan.Club club) { builder.AddInt(24, (int)club, 0); }
  public static void AddDefaultStarGrade(FlatBufferBuilder builder, int defaultStarGrade) { builder.AddInt(25, defaultStarGrade, 0); }
  public static void AddMaxStarGrade(FlatBufferBuilder builder, int maxStarGrade) { builder.AddInt(26, maxStarGrade, 0); }
  public static void AddStatLevelUpType(FlatBufferBuilder builder, Japan.StatLevelUpType statLevelUpType) { builder.AddInt(27, (int)statLevelUpType, 0); }
  public static void AddSquadType(FlatBufferBuilder builder, Japan.SquadType squadType) { builder.AddInt(28, (int)squadType, 0); }
  public static void AddJumpable(FlatBufferBuilder builder, bool jumpable) { builder.AddBool(29, jumpable, false); }
  public static void AddPersonalityId(FlatBufferBuilder builder, long personalityId) { builder.AddLong(30, personalityId, 0); }
  public static void AddCharacterAIId(FlatBufferBuilder builder, long characterAIId) { builder.AddLong(31, characterAIId, 0); }
  public static void AddExternalBTId(FlatBufferBuilder builder, long externalBTId) { builder.AddLong(32, externalBTId, 0); }
  public static void AddMainCombatStyleId(FlatBufferBuilder builder, long mainCombatStyleId) { builder.AddLong(33, mainCombatStyleId, 0); }
  public static void AddCombatStyleIndex(FlatBufferBuilder builder, int combatStyleIndex) { builder.AddInt(34, combatStyleIndex, 0); }
  public static void AddScenarioCharacter(FlatBufferBuilder builder, StringOffset scenarioCharacterOffset) { builder.AddOffset(35, scenarioCharacterOffset.Value, 0); }
  public static void AddSpawnTemplateId(FlatBufferBuilder builder, uint spawnTemplateId) { builder.AddUint(36, spawnTemplateId, 0); }
  public static void AddFavorLevelupType(FlatBufferBuilder builder, int favorLevelupType) { builder.AddInt(37, favorLevelupType, 0); }
  public static void AddEquipmentSlot(FlatBufferBuilder builder, VectorOffset equipmentSlotOffset) { builder.AddOffset(38, equipmentSlotOffset.Value, 0); }
  public static VectorOffset CreateEquipmentSlotVector(FlatBufferBuilder builder, Japan.EquipmentCategory[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotVectorBlock(FlatBufferBuilder builder, Japan.EquipmentCategory[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.EquipmentCategory> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEquipmentSlotVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.EquipmentCategory>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEquipmentSlotVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeaponLocalizeId(FlatBufferBuilder builder, uint weaponLocalizeId) { builder.AddUint(39, weaponLocalizeId, 0); }
  public static void AddDisplayEnemyInfo(FlatBufferBuilder builder, bool displayEnemyInfo) { builder.AddBool(40, displayEnemyInfo, false); }
  public static void AddBodyRadius(FlatBufferBuilder builder, long bodyRadius) { builder.AddLong(41, bodyRadius, 0); }
  public static void AddRandomEffectRadius(FlatBufferBuilder builder, long randomEffectRadius) { builder.AddLong(42, randomEffectRadius, 0); }
  public static void AddHPBarHide(FlatBufferBuilder builder, bool hPBarHide) { builder.AddBool(43, hPBarHide, false); }
  public static void AddHpBarHeight(FlatBufferBuilder builder, float hpBarHeight) { builder.AddFloat(44, hpBarHeight, 0.0f); }
  public static void AddHighlightFloaterHeight(FlatBufferBuilder builder, float highlightFloaterHeight) { builder.AddFloat(45, highlightFloaterHeight, 0.0f); }
  public static void AddEmojiOffsetX(FlatBufferBuilder builder, float emojiOffsetX) { builder.AddFloat(46, emojiOffsetX, 0.0f); }
  public static void AddEmojiOffsetY(FlatBufferBuilder builder, float emojiOffsetY) { builder.AddFloat(47, emojiOffsetY, 0.0f); }
  public static void AddMoveStartFrame(FlatBufferBuilder builder, int moveStartFrame) { builder.AddInt(48, moveStartFrame, 0); }
  public static void AddMoveEndFrame(FlatBufferBuilder builder, int moveEndFrame) { builder.AddInt(49, moveEndFrame, 0); }
  public static void AddJumpMotionFrame(FlatBufferBuilder builder, int jumpMotionFrame) { builder.AddInt(50, jumpMotionFrame, 0); }
  public static void AddAppearFrame(FlatBufferBuilder builder, int appearFrame) { builder.AddInt(51, appearFrame, 0); }
  public static void AddCanMove(FlatBufferBuilder builder, bool canMove) { builder.AddBool(52, canMove, false); }
  public static void AddCanFix(FlatBufferBuilder builder, bool canFix) { builder.AddBool(53, canFix, false); }
  public static void AddCanCrowdControl(FlatBufferBuilder builder, bool canCrowdControl) { builder.AddBool(54, canCrowdControl, false); }
  public static void AddCanBattleItemMove(FlatBufferBuilder builder, bool canBattleItemMove) { builder.AddBool(55, canBattleItemMove, false); }
  public static void AddIgnoreObstacle(FlatBufferBuilder builder, bool ignoreObstacle) { builder.AddBool(56, ignoreObstacle, false); }
  public static void AddIsAirUnit(FlatBufferBuilder builder, bool isAirUnit) { builder.AddBool(57, isAirUnit, false); }
  public static void AddAirUnitHeight(FlatBufferBuilder builder, long airUnitHeight) { builder.AddLong(58, airUnitHeight, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(59, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, Japan.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, Japan.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSecretStoneItemId(FlatBufferBuilder builder, long secretStoneItemId) { builder.AddLong(60, secretStoneItemId, 0); }
  public static void AddSecretStoneItemAmount(FlatBufferBuilder builder, int secretStoneItemAmount) { builder.AddInt(61, secretStoneItemAmount, 0); }
  public static void AddCharacterPieceItemId(FlatBufferBuilder builder, long characterPieceItemId) { builder.AddLong(62, characterPieceItemId, 0); }
  public static void AddCharacterPieceItemAmount(FlatBufferBuilder builder, int characterPieceItemAmount) { builder.AddInt(63, characterPieceItemAmount, 0); }
  public static void AddCombineRecipeId(FlatBufferBuilder builder, long combineRecipeId) { builder.AddLong(64, combineRecipeId, 0); }
  public static Offset<Japan.CharacterExcel> EndCharacterExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.CharacterExcel>(o);
  }
  public CharacterExcelT UnPack() {
    var _o = new CharacterExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Character");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.DevName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DevName, key) : this.DevName;
    _o.CostumeGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostumeGroupId, key) : this.CostumeGroupId;
    _o.IsPlayable = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsPlayable, key) : this.IsPlayable;
    _o.ProductionStep = TableEncryptionService.UseEncryption ? (Japan.ProductionStep)TableEncryptionService.Convert((int)this.ProductionStep, key) : this.ProductionStep;
    _o.CollectionVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CollectionVisible, key) : this.CollectionVisible;
    _o.ReleaseDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ReleaseDate, key) : this.ReleaseDate;
    _o.CollectionVisibleStartDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CollectionVisibleStartDate, key) : this.CollectionVisibleStartDate;
    _o.CollectionVisibleEndDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CollectionVisibleEndDate, key) : this.CollectionVisibleEndDate;
    _o.IsPlayableCharacter = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsPlayableCharacter, key) : this.IsPlayableCharacter;
    _o.LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEtcId, key) : this.LocalizeEtcId;
    _o.Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)this.Rarity, key) : this.Rarity;
    _o.IsNPC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsNPC, key) : this.IsNPC;
    _o.TacticEntityType = TableEncryptionService.UseEncryption ? (Japan.TacticEntityType)TableEncryptionService.Convert((int)this.TacticEntityType, key) : this.TacticEntityType;
    _o.CanSurvive = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CanSurvive, key) : this.CanSurvive;
    _o.IsDummy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsDummy, key) : this.IsDummy;
    _o.SubPartsCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.SubPartsCount, key) : this.SubPartsCount;
    _o.TacticRole = TableEncryptionService.UseEncryption ? (Japan.TacticRole)TableEncryptionService.Convert((int)this.TacticRole, key) : this.TacticRole;
    _o.WeaponType = TableEncryptionService.UseEncryption ? (Japan.WeaponType)TableEncryptionService.Convert((int)this.WeaponType, key) : this.WeaponType;
    _o.TacticRange = TableEncryptionService.UseEncryption ? (Japan.TacticRange)TableEncryptionService.Convert((int)this.TacticRange, key) : this.TacticRange;
    _o.BulletType = TableEncryptionService.UseEncryption ? (Japan.BulletType)TableEncryptionService.Convert((int)this.BulletType, key) : this.BulletType;
    _o.ArmorType = TableEncryptionService.UseEncryption ? (Japan.ArmorType)TableEncryptionService.Convert((int)this.ArmorType, key) : this.ArmorType;
    _o.AimIKType = TableEncryptionService.UseEncryption ? (Japan.AimIKType)TableEncryptionService.Convert((int)this.AimIKType, key) : this.AimIKType;
    _o.School = TableEncryptionService.UseEncryption ? (Japan.School)TableEncryptionService.Convert((int)this.School, key) : this.School;
    _o.Club = TableEncryptionService.UseEncryption ? (Japan.Club)TableEncryptionService.Convert((int)this.Club, key) : this.Club;
    _o.DefaultStarGrade = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DefaultStarGrade, key) : this.DefaultStarGrade;
    _o.MaxStarGrade = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxStarGrade, key) : this.MaxStarGrade;
    _o.StatLevelUpType = TableEncryptionService.UseEncryption ? (Japan.StatLevelUpType)TableEncryptionService.Convert((int)this.StatLevelUpType, key) : this.StatLevelUpType;
    _o.SquadType = TableEncryptionService.UseEncryption ? (Japan.SquadType)TableEncryptionService.Convert((int)this.SquadType, key) : this.SquadType;
    _o.Jumpable = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.Jumpable, key) : this.Jumpable;
    _o.PersonalityId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PersonalityId, key) : this.PersonalityId;
    _o.CharacterAIId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterAIId, key) : this.CharacterAIId;
    _o.ExternalBTId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExternalBTId, key) : this.ExternalBTId;
    _o.MainCombatStyleId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MainCombatStyleId, key) : this.MainCombatStyleId;
    _o.CombatStyleIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CombatStyleIndex, key) : this.CombatStyleIndex;
    _o.ScenarioCharacter = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ScenarioCharacter, key) : this.ScenarioCharacter;
    _o.SpawnTemplateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.SpawnTemplateId, key) : this.SpawnTemplateId;
    _o.FavorLevelupType = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FavorLevelupType, key) : this.FavorLevelupType;
    _o.EquipmentSlot = new List<Japan.EquipmentCategory>();
    for (var _j = 0; _j < this.EquipmentSlotLength; ++_j) {_o.EquipmentSlot.Add(TableEncryptionService.UseEncryption ? (Japan.EquipmentCategory)TableEncryptionService.Convert((int)this.EquipmentSlot(_j), key) : this.EquipmentSlot(_j));}
    _o.WeaponLocalizeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.WeaponLocalizeId, key) : this.WeaponLocalizeId;
    _o.DisplayEnemyInfo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.DisplayEnemyInfo, key) : this.DisplayEnemyInfo;
    _o.BodyRadius = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BodyRadius, key) : this.BodyRadius;
    _o.RandomEffectRadius = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RandomEffectRadius, key) : this.RandomEffectRadius;
    _o.HPBarHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.HPBarHide, key) : this.HPBarHide;
    _o.HpBarHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.HpBarHeight, key) : this.HpBarHeight;
    _o.HighlightFloaterHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.HighlightFloaterHeight, key) : this.HighlightFloaterHeight;
    _o.EmojiOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.EmojiOffsetX, key) : this.EmojiOffsetX;
    _o.EmojiOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.EmojiOffsetY, key) : this.EmojiOffsetY;
    _o.MoveStartFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MoveStartFrame, key) : this.MoveStartFrame;
    _o.MoveEndFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MoveEndFrame, key) : this.MoveEndFrame;
    _o.JumpMotionFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.JumpMotionFrame, key) : this.JumpMotionFrame;
    _o.AppearFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.AppearFrame, key) : this.AppearFrame;
    _o.CanMove = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CanMove, key) : this.CanMove;
    _o.CanFix = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CanFix, key) : this.CanFix;
    _o.CanCrowdControl = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CanCrowdControl, key) : this.CanCrowdControl;
    _o.CanBattleItemMove = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CanBattleItemMove, key) : this.CanBattleItemMove;
    _o.IgnoreObstacle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IgnoreObstacle, key) : this.IgnoreObstacle;
    _o.IsAirUnit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsAirUnit, key) : this.IsAirUnit;
    _o.AirUnitHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AirUnitHeight, key) : this.AirUnitHeight;
    _o.Tags = new List<Japan.Tag>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(TableEncryptionService.UseEncryption ? (Japan.Tag)TableEncryptionService.Convert((int)this.Tags(_j), key) : this.Tags(_j));}
    _o.SecretStoneItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SecretStoneItemId, key) : this.SecretStoneItemId;
    _o.SecretStoneItemAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.SecretStoneItemAmount, key) : this.SecretStoneItemAmount;
    _o.CharacterPieceItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterPieceItemId, key) : this.CharacterPieceItemId;
    _o.CharacterPieceItemAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CharacterPieceItemAmount, key) : this.CharacterPieceItemAmount;
    _o.CombineRecipeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CombineRecipeId, key) : this.CombineRecipeId;
  }
  public static Offset<Japan.CharacterExcel> Pack(FlatBufferBuilder builder, CharacterExcelT _o) {
    if (_o == null) return default(Offset<Japan.CharacterExcel>);
		byte[] key = TableEncryptionService.CreateKey("Character");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _DevName = _o.DevName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DevName, key) : _o.DevName));
		var _CostumeGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostumeGroupId, key) : _o.CostumeGroupId;
		var _IsPlayable = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsPlayable, key) : _o.IsPlayable;
		var _ProductionStep = TableEncryptionService.UseEncryption ? (Japan.ProductionStep)TableEncryptionService.Convert((int)_o.ProductionStep, key) : _o.ProductionStep;
		var _CollectionVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CollectionVisible, key) : _o.CollectionVisible;
    var _ReleaseDate = _o.ReleaseDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ReleaseDate, key) : _o.ReleaseDate));
    var _CollectionVisibleStartDate = _o.CollectionVisibleStartDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CollectionVisibleStartDate, key) : _o.CollectionVisibleStartDate));
    var _CollectionVisibleEndDate = _o.CollectionVisibleEndDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CollectionVisibleEndDate, key) : _o.CollectionVisibleEndDate));
		var _isPlayableCharacter = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsPlayableCharacter, key) : _o.IsPlayableCharacter;
		var _LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEtcId, key) : _o.LocalizeEtcId;
		var _Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)_o.Rarity, key) : _o.Rarity;
		var _IsNPC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsNPC, key) : _o.IsNPC;
		var _TacticEntityType = TableEncryptionService.UseEncryption ? (Japan.TacticEntityType)TableEncryptionService.Convert((int)_o.TacticEntityType, key) : _o.TacticEntityType;
		var _CanSurvive = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CanSurvive, key) : _o.CanSurvive;
		var _IsDummy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsDummy, key) : _o.IsDummy;
		var _SubPartsCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.SubPartsCount, key) : _o.SubPartsCount;
		var _TacticRole = TableEncryptionService.UseEncryption ? (Japan.TacticRole)TableEncryptionService.Convert((int)_o.TacticRole, key) : _o.TacticRole;
		var _WeaponType = TableEncryptionService.UseEncryption ? (Japan.WeaponType)TableEncryptionService.Convert((int)_o.WeaponType, key) : _o.WeaponType;
		var _TacticRange = TableEncryptionService.UseEncryption ? (Japan.TacticRange)TableEncryptionService.Convert((int)_o.TacticRange, key) : _o.TacticRange;
		var _BulletType = TableEncryptionService.UseEncryption ? (Japan.BulletType)TableEncryptionService.Convert((int)_o.BulletType, key) : _o.BulletType;
		var _ArmorType = TableEncryptionService.UseEncryption ? (Japan.ArmorType)TableEncryptionService.Convert((int)_o.ArmorType, key) : _o.ArmorType;
		var _AimIKType = TableEncryptionService.UseEncryption ? (Japan.AimIKType)TableEncryptionService.Convert((int)_o.AimIKType, key) : _o.AimIKType;
		var _School = TableEncryptionService.UseEncryption ? (Japan.School)TableEncryptionService.Convert((int)_o.School, key) : _o.School;
		var _Club = TableEncryptionService.UseEncryption ? (Japan.Club)TableEncryptionService.Convert((int)_o.Club, key) : _o.Club;
		var _DefaultStarGrade = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DefaultStarGrade, key) : _o.DefaultStarGrade;
		var _MaxStarGrade = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxStarGrade, key) : _o.MaxStarGrade;
		var _StatLevelUpType = TableEncryptionService.UseEncryption ? (Japan.StatLevelUpType)TableEncryptionService.Convert((int)_o.StatLevelUpType, key) : _o.StatLevelUpType;
		var _SquadType = TableEncryptionService.UseEncryption ? (Japan.SquadType)TableEncryptionService.Convert((int)_o.SquadType, key) : _o.SquadType;
		var _Jumpable = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.Jumpable, key) : _o.Jumpable;
		var _PersonalityId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PersonalityId, key) : _o.PersonalityId;
		var _CharacterAIId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterAIId, key) : _o.CharacterAIId;
		var _ExternalBTId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExternalBTId, key) : _o.ExternalBTId;
		var _MainCombatStyleId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MainCombatStyleId, key) : _o.MainCombatStyleId;
		var _CombatStyleIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CombatStyleIndex, key) : _o.CombatStyleIndex;
    var _ScenarioCharacter = _o.ScenarioCharacter == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ScenarioCharacter, key) : _o.ScenarioCharacter));
		var _SpawnTemplateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.SpawnTemplateId, key) : _o.SpawnTemplateId;
		var _FavorLevelupType = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FavorLevelupType, key) : _o.FavorLevelupType;
    var _EquipmentSlot = default(VectorOffset);
    if (_o.EquipmentSlot != null) {
      var __EquipmentSlot = _o.EquipmentSlot.Select(x => TableEncryptionService.UseEncryption ? (Japan.EquipmentCategory)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _EquipmentSlot = CreateEquipmentSlotVector(builder, __EquipmentSlot);
    }
		var _WeaponLocalizeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.WeaponLocalizeId, key) : _o.WeaponLocalizeId;
		var _DisplayEnemyInfo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.DisplayEnemyInfo, key) : _o.DisplayEnemyInfo;
		var _bodyRadius = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BodyRadius, key) : _o.BodyRadius;
		var _RandomEffectRadius = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RandomEffectRadius, key) : _o.RandomEffectRadius;
		var _HPBarHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.HPBarHide, key) : _o.HPBarHide;
		var _HpBarHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.HpBarHeight, key) : _o.HpBarHeight;
		var _HighlightFloaterHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.HighlightFloaterHeight, key) : _o.HighlightFloaterHeight;
		var _EmojiOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.EmojiOffsetX, key) : _o.EmojiOffsetX;
		var _EmojiOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.EmojiOffsetY, key) : _o.EmojiOffsetY;
		var _MoveStartFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MoveStartFrame, key) : _o.MoveStartFrame;
		var _MoveEndFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MoveEndFrame, key) : _o.MoveEndFrame;
		var _JumpMotionFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.JumpMotionFrame, key) : _o.JumpMotionFrame;
		var _AppearFrame = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.AppearFrame, key) : _o.AppearFrame;
		var _CanMove = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CanMove, key) : _o.CanMove;
		var _CanFix = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CanFix, key) : _o.CanFix;
		var _CanCrowdControl = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CanCrowdControl, key) : _o.CanCrowdControl;
		var _CanBattleItemMove = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CanBattleItemMove, key) : _o.CanBattleItemMove;
		var _IgnoreObstacle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IgnoreObstacle, key) : _o.IgnoreObstacle;
		var _IsAirUnit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsAirUnit, key) : _o.IsAirUnit;
		var _AirUnitHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AirUnitHeight, key) : _o.AirUnitHeight;
    var _Tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __Tags = _o.Tags.Select(x => TableEncryptionService.UseEncryption ? (Japan.Tag)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _Tags = CreateTagsVector(builder, __Tags);
    }
		var _SecretStoneItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SecretStoneItemId, key) : _o.SecretStoneItemId;
		var _SecretStoneItemAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.SecretStoneItemAmount, key) : _o.SecretStoneItemAmount;
		var _CharacterPieceItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterPieceItemId, key) : _o.CharacterPieceItemId;
		var _CharacterPieceItemAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CharacterPieceItemAmount, key) : _o.CharacterPieceItemAmount;
		var _CombineRecipeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CombineRecipeId, key) : _o.CombineRecipeId;
    return CreateCharacterExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _DevName,
      TableEncryptionService.UseEncryption ? _CostumeGroupId : _o.CostumeGroupId,
      TableEncryptionService.UseEncryption ? _IsPlayable : _o.IsPlayable,
      TableEncryptionService.UseEncryption ? _ProductionStep : _o.ProductionStep,
      TableEncryptionService.UseEncryption ? _CollectionVisible : _o.CollectionVisible,
      _ReleaseDate,
      _CollectionVisibleStartDate,
      _CollectionVisibleEndDate,
      TableEncryptionService.UseEncryption ? _isPlayableCharacter : _o.IsPlayableCharacter,
      TableEncryptionService.UseEncryption ? _LocalizeEtcId : _o.LocalizeEtcId,
      TableEncryptionService.UseEncryption ? _Rarity : _o.Rarity,
      TableEncryptionService.UseEncryption ? _IsNPC : _o.IsNPC,
      TableEncryptionService.UseEncryption ? _TacticEntityType : _o.TacticEntityType,
      TableEncryptionService.UseEncryption ? _CanSurvive : _o.CanSurvive,
      TableEncryptionService.UseEncryption ? _IsDummy : _o.IsDummy,
      TableEncryptionService.UseEncryption ? _SubPartsCount : _o.SubPartsCount,
      TableEncryptionService.UseEncryption ? _TacticRole : _o.TacticRole,
      TableEncryptionService.UseEncryption ? _WeaponType : _o.WeaponType,
      TableEncryptionService.UseEncryption ? _TacticRange : _o.TacticRange,
      TableEncryptionService.UseEncryption ? _BulletType : _o.BulletType,
      TableEncryptionService.UseEncryption ? _ArmorType : _o.ArmorType,
      TableEncryptionService.UseEncryption ? _AimIKType : _o.AimIKType,
      TableEncryptionService.UseEncryption ? _School : _o.School,
      TableEncryptionService.UseEncryption ? _Club : _o.Club,
      TableEncryptionService.UseEncryption ? _DefaultStarGrade : _o.DefaultStarGrade,
      TableEncryptionService.UseEncryption ? _MaxStarGrade : _o.MaxStarGrade,
      TableEncryptionService.UseEncryption ? _StatLevelUpType : _o.StatLevelUpType,
      TableEncryptionService.UseEncryption ? _SquadType : _o.SquadType,
      TableEncryptionService.UseEncryption ? _Jumpable : _o.Jumpable,
      TableEncryptionService.UseEncryption ? _PersonalityId : _o.PersonalityId,
      TableEncryptionService.UseEncryption ? _CharacterAIId : _o.CharacterAIId,
      TableEncryptionService.UseEncryption ? _ExternalBTId : _o.ExternalBTId,
      TableEncryptionService.UseEncryption ? _MainCombatStyleId : _o.MainCombatStyleId,
      TableEncryptionService.UseEncryption ? _CombatStyleIndex : _o.CombatStyleIndex,
      _ScenarioCharacter,
      TableEncryptionService.UseEncryption ? _SpawnTemplateId : _o.SpawnTemplateId,
      TableEncryptionService.UseEncryption ? _FavorLevelupType : _o.FavorLevelupType,
      _EquipmentSlot,
      TableEncryptionService.UseEncryption ? _WeaponLocalizeId : _o.WeaponLocalizeId,
      TableEncryptionService.UseEncryption ? _DisplayEnemyInfo : _o.DisplayEnemyInfo,
      TableEncryptionService.UseEncryption ? _bodyRadius : _o.BodyRadius,
      TableEncryptionService.UseEncryption ? _RandomEffectRadius : _o.RandomEffectRadius,
      TableEncryptionService.UseEncryption ? _HPBarHide : _o.HPBarHide,
      TableEncryptionService.UseEncryption ? _HpBarHeight : _o.HpBarHeight,
      TableEncryptionService.UseEncryption ? _HighlightFloaterHeight : _o.HighlightFloaterHeight,
      TableEncryptionService.UseEncryption ? _EmojiOffsetX : _o.EmojiOffsetX,
      TableEncryptionService.UseEncryption ? _EmojiOffsetY : _o.EmojiOffsetY,
      TableEncryptionService.UseEncryption ? _MoveStartFrame : _o.MoveStartFrame,
      TableEncryptionService.UseEncryption ? _MoveEndFrame : _o.MoveEndFrame,
      TableEncryptionService.UseEncryption ? _JumpMotionFrame : _o.JumpMotionFrame,
      TableEncryptionService.UseEncryption ? _AppearFrame : _o.AppearFrame,
      TableEncryptionService.UseEncryption ? _CanMove : _o.CanMove,
      TableEncryptionService.UseEncryption ? _CanFix : _o.CanFix,
      TableEncryptionService.UseEncryption ? _CanCrowdControl : _o.CanCrowdControl,
      TableEncryptionService.UseEncryption ? _CanBattleItemMove : _o.CanBattleItemMove,
      TableEncryptionService.UseEncryption ? _IgnoreObstacle : _o.IgnoreObstacle,
      TableEncryptionService.UseEncryption ? _IsAirUnit : _o.IsAirUnit,
      TableEncryptionService.UseEncryption ? _AirUnitHeight : _o.AirUnitHeight,
      _Tags,
      TableEncryptionService.UseEncryption ? _SecretStoneItemId : _o.SecretStoneItemId,
      TableEncryptionService.UseEncryption ? _SecretStoneItemAmount : _o.SecretStoneItemAmount,
      TableEncryptionService.UseEncryption ? _CharacterPieceItemId : _o.CharacterPieceItemId,
      TableEncryptionService.UseEncryption ? _CharacterPieceItemAmount : _o.CharacterPieceItemAmount,
      TableEncryptionService.UseEncryption ? _CombineRecipeId : _o.CombineRecipeId);
  }
}

public class CharacterExcelT
{
  public long Id { get; set; }
  public string DevName { get; set; }
  public long CostumeGroupId { get; set; }
  public bool IsPlayable { get; set; }
  public Japan.ProductionStep ProductionStep { get; set; }
  public bool CollectionVisible { get; set; }
  public string ReleaseDate { get; set; }
  public string CollectionVisibleStartDate { get; set; }
  public string CollectionVisibleEndDate { get; set; }
  public bool IsPlayableCharacter { get; set; }
  public uint LocalizeEtcId { get; set; }
  public Japan.Rarity Rarity { get; set; }
  public bool IsNPC { get; set; }
  public Japan.TacticEntityType TacticEntityType { get; set; }
  public bool CanSurvive { get; set; }
  public bool IsDummy { get; set; }
  public int SubPartsCount { get; set; }
  public Japan.TacticRole TacticRole { get; set; }
  public Japan.WeaponType WeaponType { get; set; }
  public Japan.TacticRange TacticRange { get; set; }
  public Japan.BulletType BulletType { get; set; }
  public Japan.ArmorType ArmorType { get; set; }
  public Japan.AimIKType AimIKType { get; set; }
  public Japan.School School { get; set; }
  public Japan.Club Club { get; set; }
  public int DefaultStarGrade { get; set; }
  public int MaxStarGrade { get; set; }
  public Japan.StatLevelUpType StatLevelUpType { get; set; }
  public Japan.SquadType SquadType { get; set; }
  public bool Jumpable { get; set; }
  public long PersonalityId { get; set; }
  public long CharacterAIId { get; set; }
  public long ExternalBTId { get; set; }
  public long MainCombatStyleId { get; set; }
  public int CombatStyleIndex { get; set; }
  public string ScenarioCharacter { get; set; }
  public uint SpawnTemplateId { get; set; }
  public int FavorLevelupType { get; set; }
  public List<Japan.EquipmentCategory> EquipmentSlot { get; set; }
  public uint WeaponLocalizeId { get; set; }
  public bool DisplayEnemyInfo { get; set; }
  public long BodyRadius { get; set; }
  public long RandomEffectRadius { get; set; }
  public bool HPBarHide { get; set; }
  public float HpBarHeight { get; set; }
  public float HighlightFloaterHeight { get; set; }
  public float EmojiOffsetX { get; set; }
  public float EmojiOffsetY { get; set; }
  public int MoveStartFrame { get; set; }
  public int MoveEndFrame { get; set; }
  public int JumpMotionFrame { get; set; }
  public int AppearFrame { get; set; }
  public bool CanMove { get; set; }
  public bool CanFix { get; set; }
  public bool CanCrowdControl { get; set; }
  public bool CanBattleItemMove { get; set; }
  public bool IgnoreObstacle { get; set; }
  public bool IsAirUnit { get; set; }
  public long AirUnitHeight { get; set; }
  public List<Japan.Tag> Tags { get; set; }
  public long SecretStoneItemId { get; set; }
  public int SecretStoneItemAmount { get; set; }
  public long CharacterPieceItemId { get; set; }
  public int CharacterPieceItemAmount { get; set; }
  public long CombineRecipeId { get; set; }

  public CharacterExcelT() {
    this.Id = 0;
    this.DevName = null;
    this.CostumeGroupId = 0;
    this.IsPlayable = false;
    this.ProductionStep = Japan.ProductionStep.ToDo;
    this.CollectionVisible = false;
    this.ReleaseDate = null;
    this.CollectionVisibleStartDate = null;
    this.CollectionVisibleEndDate = null;
    this.IsPlayableCharacter = false;
    this.LocalizeEtcId = 0;
    this.Rarity = Japan.Rarity.N;
    this.IsNPC = false;
    this.TacticEntityType = Japan.TacticEntityType.None;
    this.CanSurvive = false;
    this.IsDummy = false;
    this.SubPartsCount = 0;
    this.TacticRole = Japan.TacticRole.None;
    this.WeaponType = Japan.WeaponType.None;
    this.TacticRange = Japan.TacticRange.Back;
    this.BulletType = Japan.BulletType.Normal;
    this.ArmorType = Japan.ArmorType.LightArmor;
    this.AimIKType = Japan.AimIKType.None;
    this.School = Japan.School.None;
    this.Club = Japan.Club.None;
    this.DefaultStarGrade = 0;
    this.MaxStarGrade = 0;
    this.StatLevelUpType = Japan.StatLevelUpType.Standard;
    this.SquadType = Japan.SquadType.None;
    this.Jumpable = false;
    this.PersonalityId = 0;
    this.CharacterAIId = 0;
    this.ExternalBTId = 0;
    this.MainCombatStyleId = 0;
    this.CombatStyleIndex = 0;
    this.ScenarioCharacter = null;
    this.SpawnTemplateId = 0;
    this.FavorLevelupType = 0;
    this.EquipmentSlot = null;
    this.WeaponLocalizeId = 0;
    this.DisplayEnemyInfo = false;
    this.BodyRadius = 0;
    this.RandomEffectRadius = 0;
    this.HPBarHide = false;
    this.HpBarHeight = 0.0f;
    this.HighlightFloaterHeight = 0.0f;
    this.EmojiOffsetX = 0.0f;
    this.EmojiOffsetY = 0.0f;
    this.MoveStartFrame = 0;
    this.MoveEndFrame = 0;
    this.JumpMotionFrame = 0;
    this.AppearFrame = 0;
    this.CanMove = false;
    this.CanFix = false;
    this.CanCrowdControl = false;
    this.CanBattleItemMove = false;
    this.IgnoreObstacle = false;
    this.IsAirUnit = false;
    this.AirUnitHeight = 0;
    this.Tags = null;
    this.SecretStoneItemId = 0;
    this.SecretStoneItemAmount = 0;
    this.CharacterPieceItemId = 0;
    this.CharacterPieceItemAmount = 0;
    this.CombineRecipeId = 0;
  }
}


static public class CharacterExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*DevName*/, false)
      && verifier.VerifyField(tablePos, 8 /*CostumeGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*IsPlayable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*ProductionStep*/, 4 /*Japan.ProductionStep*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*CollectionVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*ReleaseDate*/, false)
      && verifier.VerifyString(tablePos, 18 /*CollectionVisibleStartDate*/, false)
      && verifier.VerifyString(tablePos, 20 /*CollectionVisibleEndDate*/, false)
      && verifier.VerifyField(tablePos, 22 /*IsPlayableCharacter*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*Rarity*/, 4 /*Japan.Rarity*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*IsNPC*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 30 /*TacticEntityType*/, 4 /*Japan.TacticEntityType*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*CanSurvive*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*IsDummy*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*SubPartsCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*TacticRole*/, 4 /*Japan.TacticRole*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*WeaponType*/, 4 /*Japan.WeaponType*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*TacticRange*/, 4 /*Japan.TacticRange*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*BulletType*/, 4 /*Japan.BulletType*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*ArmorType*/, 4 /*Japan.ArmorType*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*AimIKType*/, 4 /*Japan.AimIKType*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*School*/, 4 /*Japan.School*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*Club*/, 4 /*Japan.Club*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*DefaultStarGrade*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*MaxStarGrade*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*StatLevelUpType*/, 4 /*Japan.StatLevelUpType*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*SquadType*/, 4 /*Japan.SquadType*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*Jumpable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 64 /*PersonalityId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*CharacterAIId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*ExternalBTId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*MainCombatStyleId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*CombatStyleIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 74 /*ScenarioCharacter*/, false)
      && verifier.VerifyField(tablePos, 76 /*SpawnTemplateId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*FavorLevelupType*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 80 /*EquipmentSlot*/, 4 /*Japan.EquipmentCategory*/, false)
      && verifier.VerifyField(tablePos, 82 /*WeaponLocalizeId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*DisplayEnemyInfo*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 86 /*BodyRadius*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*RandomEffectRadius*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*HPBarHide*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 92 /*HpBarHeight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*HighlightFloaterHeight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*EmojiOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 98 /*EmojiOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 100 /*MoveStartFrame*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*MoveEndFrame*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 104 /*JumpMotionFrame*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*AppearFrame*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*CanMove*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 110 /*CanFix*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 112 /*CanCrowdControl*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 114 /*CanBattleItemMove*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 116 /*IgnoreObstacle*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 118 /*IsAirUnit*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 120 /*AirUnitHeight*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 122 /*Tags*/, 4 /*Japan.Tag*/, false)
      && verifier.VerifyField(tablePos, 124 /*SecretStoneItemId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*SecretStoneItemAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 128 /*CharacterPieceItemId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*CharacterPieceItemAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 132 /*CombineRecipeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
