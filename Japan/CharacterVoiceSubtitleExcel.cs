// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterVoiceSubtitleExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterVoiceSubtitleExcel GetRootAsCharacterVoiceSubtitleExcel(ByteBuffer _bb) { return GetRootAsCharacterVoiceSubtitleExcel(_bb, new CharacterVoiceSubtitleExcel()); }
  public static CharacterVoiceSubtitleExcel GetRootAsCharacterVoiceSubtitleExcel(ByteBuffer _bb, CharacterVoiceSubtitleExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterVoiceSubtitleExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LocalizeCVGroup { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeCVGroupBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLocalizeCVGroupBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLocalizeCVGroupArray() { return __p.__vector_as_array<byte>(4); }
  public long CharacterVoiceGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Duration { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool Separate { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LocalizeKR { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeKRBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLocalizeKRBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLocalizeKRArray() { return __p.__vector_as_array<byte>(12); }
  public string LocalizeJP { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeJPBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLocalizeJPBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLocalizeJPArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<Japan.CharacterVoiceSubtitleExcel> CreateCharacterVoiceSubtitleExcel(FlatBufferBuilder builder,
      StringOffset LocalizeCVGroupOffset = default(StringOffset),
      long CharacterVoiceGroupId = 0,
      long Duration = 0,
      bool Separate = false,
      StringOffset LocalizeKROffset = default(StringOffset),
      StringOffset LocalizeJPOffset = default(StringOffset)) {
    builder.StartTable(6);
    CharacterVoiceSubtitleExcel.AddDuration(builder, Duration);
    CharacterVoiceSubtitleExcel.AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId);
    CharacterVoiceSubtitleExcel.AddLocalizeJP(builder, LocalizeJPOffset);
    CharacterVoiceSubtitleExcel.AddLocalizeKR(builder, LocalizeKROffset);
    CharacterVoiceSubtitleExcel.AddLocalizeCVGroup(builder, LocalizeCVGroupOffset);
    CharacterVoiceSubtitleExcel.AddSeparate(builder, Separate);
    return CharacterVoiceSubtitleExcel.EndCharacterVoiceSubtitleExcel(builder);
  }

  public static void StartCharacterVoiceSubtitleExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddLocalizeCVGroup(FlatBufferBuilder builder, StringOffset localizeCVGroupOffset) { builder.AddOffset(0, localizeCVGroupOffset.Value, 0); }
  public static void AddCharacterVoiceGroupId(FlatBufferBuilder builder, long characterVoiceGroupId) { builder.AddLong(1, characterVoiceGroupId, 0); }
  public static void AddDuration(FlatBufferBuilder builder, long duration) { builder.AddLong(2, duration, 0); }
  public static void AddSeparate(FlatBufferBuilder builder, bool separate) { builder.AddBool(3, separate, false); }
  public static void AddLocalizeKR(FlatBufferBuilder builder, StringOffset localizeKROffset) { builder.AddOffset(4, localizeKROffset.Value, 0); }
  public static void AddLocalizeJP(FlatBufferBuilder builder, StringOffset localizeJPOffset) { builder.AddOffset(5, localizeJPOffset.Value, 0); }
  public static Offset<Japan.CharacterVoiceSubtitleExcel> EndCharacterVoiceSubtitleExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.CharacterVoiceSubtitleExcel>(o);
  }
  public CharacterVoiceSubtitleExcelT UnPack() {
    var _o = new CharacterVoiceSubtitleExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterVoiceSubtitleExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterVoiceSubtitle");
    _o.LocalizeCVGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeCVGroup, key) : this.LocalizeCVGroup;
    _o.CharacterVoiceGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterVoiceGroupId, key) : this.CharacterVoiceGroupId;
    _o.Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Duration, key) : this.Duration;
    _o.Separate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.Separate, key) : this.Separate;
    _o.LocalizeKR = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeKR, key) : this.LocalizeKR;
    _o.LocalizeJP = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeJP, key) : this.LocalizeJP;
  }
  public static Offset<Japan.CharacterVoiceSubtitleExcel> Pack(FlatBufferBuilder builder, CharacterVoiceSubtitleExcelT _o) {
    if (_o == null) return default(Offset<Japan.CharacterVoiceSubtitleExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterVoiceSubtitle");
    var _LocalizeCVGroup = _o.LocalizeCVGroup == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeCVGroup, key) : _o.LocalizeCVGroup));
		var _CharacterVoiceGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterVoiceGroupId, key) : _o.CharacterVoiceGroupId;
		var _Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Duration, key) : _o.Duration;
		var _Separate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.Separate, key) : _o.Separate;
    var _LocalizeKR = _o.LocalizeKR == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeKR, key) : _o.LocalizeKR));
    var _LocalizeJP = _o.LocalizeJP == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeJP, key) : _o.LocalizeJP));
    return CreateCharacterVoiceSubtitleExcel(
      builder,
      _LocalizeCVGroup,
      TableEncryptionService.UseEncryption ? _CharacterVoiceGroupId : _o.CharacterVoiceGroupId,
      TableEncryptionService.UseEncryption ? _Duration : _o.Duration,
      TableEncryptionService.UseEncryption ? _Separate : _o.Separate,
      _LocalizeKR,
      _LocalizeJP);
  }
}

public class CharacterVoiceSubtitleExcelT
{
  public string LocalizeCVGroup { get; set; }
  public long CharacterVoiceGroupId { get; set; }
  public long Duration { get; set; }
  public bool Separate { get; set; }
  public string LocalizeKR { get; set; }
  public string LocalizeJP { get; set; }

  public CharacterVoiceSubtitleExcelT() {
    this.LocalizeCVGroup = null;
    this.CharacterVoiceGroupId = 0;
    this.Duration = 0;
    this.Separate = false;
    this.LocalizeKR = null;
    this.LocalizeJP = null;
  }
}


static public class CharacterVoiceSubtitleExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*LocalizeCVGroup*/, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterVoiceGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Duration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*Separate*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*LocalizeKR*/, false)
      && verifier.VerifyString(tablePos, 14 /*LocalizeJP*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
