// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGEnemyGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGEnemyGroupExcel GetRootAsMinigameCCGEnemyGroupExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGEnemyGroupExcel(_bb, new MinigameCCGEnemyGroupExcel()); }
  public static MinigameCCGEnemyGroupExcel GetRootAsMinigameCCGEnemyGroupExcel(ByteBuffer _bb, MinigameCCGEnemyGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGEnemyGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string EnemyAI { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnemyAIBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEnemyAIBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEnemyAIArray() { return __p.__vector_as_array<byte>(6); }
  public long EnemyBGM { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeEnemyGroupName { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint LocalizeEnemyGroupDesc { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Japan.MinigameCCGEnemyGroupExcel> CreateMinigameCCGEnemyGroupExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      StringOffset EnemyAIOffset = default(StringOffset),
      long EnemyBGM = 0,
      uint LocalizeEnemyGroupName = 0,
      uint LocalizeEnemyGroupDesc = 0) {
    builder.StartTable(5);
    MinigameCCGEnemyGroupExcel.AddEnemyBGM(builder, EnemyBGM);
    MinigameCCGEnemyGroupExcel.AddGroupId(builder, GroupId);
    MinigameCCGEnemyGroupExcel.AddLocalizeEnemyGroupDesc(builder, LocalizeEnemyGroupDesc);
    MinigameCCGEnemyGroupExcel.AddLocalizeEnemyGroupName(builder, LocalizeEnemyGroupName);
    MinigameCCGEnemyGroupExcel.AddEnemyAI(builder, EnemyAIOffset);
    return MinigameCCGEnemyGroupExcel.EndMinigameCCGEnemyGroupExcel(builder);
  }

  public static void StartMinigameCCGEnemyGroupExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddEnemyAI(FlatBufferBuilder builder, StringOffset enemyAIOffset) { builder.AddOffset(1, enemyAIOffset.Value, 0); }
  public static void AddEnemyBGM(FlatBufferBuilder builder, long enemyBGM) { builder.AddLong(2, enemyBGM, 0); }
  public static void AddLocalizeEnemyGroupName(FlatBufferBuilder builder, uint localizeEnemyGroupName) { builder.AddUint(3, localizeEnemyGroupName, 0); }
  public static void AddLocalizeEnemyGroupDesc(FlatBufferBuilder builder, uint localizeEnemyGroupDesc) { builder.AddUint(4, localizeEnemyGroupDesc, 0); }
  public static Offset<Japan.MinigameCCGEnemyGroupExcel> EndMinigameCCGEnemyGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGEnemyGroupExcel>(o);
  }
  public MinigameCCGEnemyGroupExcelT UnPack() {
    var _o = new MinigameCCGEnemyGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGEnemyGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGEnemyGroup");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.EnemyAI = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EnemyAI, key) : this.EnemyAI;
    _o.EnemyBGM = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemyBGM, key) : this.EnemyBGM;
    _o.LocalizeEnemyGroupName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEnemyGroupName, key) : this.LocalizeEnemyGroupName;
    _o.LocalizeEnemyGroupDesc = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEnemyGroupDesc, key) : this.LocalizeEnemyGroupDesc;
  }
  public static Offset<Japan.MinigameCCGEnemyGroupExcel> Pack(FlatBufferBuilder builder, MinigameCCGEnemyGroupExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGEnemyGroupExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGEnemyGroup");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
    var _EnemyAI = _o.EnemyAI == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EnemyAI, key) : _o.EnemyAI));
		var _EnemyBGM = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemyBGM, key) : _o.EnemyBGM;
		var _LocalizeEnemyGroupName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEnemyGroupName, key) : _o.LocalizeEnemyGroupName;
		var _LocalizeEnemyGroupDesc = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEnemyGroupDesc, key) : _o.LocalizeEnemyGroupDesc;
    return CreateMinigameCCGEnemyGroupExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      _EnemyAI,
      TableEncryptionService.UseEncryption ? _EnemyBGM : _o.EnemyBGM,
      TableEncryptionService.UseEncryption ? _LocalizeEnemyGroupName : _o.LocalizeEnemyGroupName,
      TableEncryptionService.UseEncryption ? _LocalizeEnemyGroupDesc : _o.LocalizeEnemyGroupDesc);
  }
}

public class MinigameCCGEnemyGroupExcelT
{
  public long GroupId { get; set; }
  public string EnemyAI { get; set; }
  public long EnemyBGM { get; set; }
  public uint LocalizeEnemyGroupName { get; set; }
  public uint LocalizeEnemyGroupDesc { get; set; }

  public MinigameCCGEnemyGroupExcelT() {
    this.GroupId = 0;
    this.EnemyAI = null;
    this.EnemyBGM = 0;
    this.LocalizeEnemyGroupName = 0;
    this.LocalizeEnemyGroupDesc = 0;
  }
}


static public class MinigameCCGEnemyGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*EnemyAI*/, false)
      && verifier.VerifyField(tablePos, 8 /*EnemyBGM*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*LocalizeEnemyGroupName*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*LocalizeEnemyGroupDesc*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
