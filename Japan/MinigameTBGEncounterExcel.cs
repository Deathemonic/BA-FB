// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameTBGEncounterExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameTBGEncounterExcel GetRootAsMinigameTBGEncounterExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGEncounterExcel(_bb, new MinigameTBGEncounterExcel()); }
  public static MinigameTBGEncounterExcel GetRootAsMinigameTBGEncounterExcel(ByteBuffer _bb, MinigameTBGEncounterExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGEncounterExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool AllThema { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ThemaIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.TBGThemaType ThemaType { get { int o = __p.__offset(12); return o != 0 ? (Japan.TBGThemaType)__p.bb.GetInt(o + __p.bb_pos) : Japan.TBGThemaType.None; } }
  public Japan.TBGObjectType ObjectType { get { int o = __p.__offset(14); return o != 0 ? (Japan.TBGObjectType)__p.bb.GetInt(o + __p.bb_pos) : Japan.TBGObjectType.None; } }
  public string EnemyImagePath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnemyImagePathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEnemyImagePathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEnemyImagePathArray() { return __p.__vector_as_array<byte>(16); }
  public string EnemyPrefabName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnemyPrefabNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetEnemyPrefabNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetEnemyPrefabNameArray() { return __p.__vector_as_array<byte>(18); }
  public string EnemyNameLocalize { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnemyNameLocalizeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEnemyNameLocalizeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEnemyNameLocalizeArray() { return __p.__vector_as_array<byte>(20); }
  public long OptionGroupId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool RewardHide { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string EncounterTitleLocalize { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEncounterTitleLocalizeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEncounterTitleLocalizeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEncounterTitleLocalizeArray() { return __p.__vector_as_array<byte>(26); }
  public string StoryImagePath { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStoryImagePathBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetStoryImagePathBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetStoryImagePathArray() { return __p.__vector_as_array<byte>(28); }
  public string BeforeStoryLocalize { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforeStoryLocalizeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetBeforeStoryLocalizeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetBeforeStoryLocalizeArray() { return __p.__vector_as_array<byte>(30); }
  public string BeforeStoryOption1Localize { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforeStoryOption1LocalizeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetBeforeStoryOption1LocalizeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetBeforeStoryOption1LocalizeArray() { return __p.__vector_as_array<byte>(32); }
  public string BeforeStoryOption2Localize { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforeStoryOption2LocalizeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetBeforeStoryOption2LocalizeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetBeforeStoryOption2LocalizeArray() { return __p.__vector_as_array<byte>(34); }
  public string BeforeStoryOption3Localize { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforeStoryOption3LocalizeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetBeforeStoryOption3LocalizeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetBeforeStoryOption3LocalizeArray() { return __p.__vector_as_array<byte>(36); }
  public string AllyAttackLocalize { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllyAttackLocalizeBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetAllyAttackLocalizeBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetAllyAttackLocalizeArray() { return __p.__vector_as_array<byte>(38); }
  public string EnemyAttackLocalize { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnemyAttackLocalizeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetEnemyAttackLocalizeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetEnemyAttackLocalizeArray() { return __p.__vector_as_array<byte>(40); }
  public string AttackDefenceLocalize { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttackDefenceLocalizeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetAttackDefenceLocalizeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetAttackDefenceLocalizeArray() { return __p.__vector_as_array<byte>(42); }
  public string ClearStoryLocalize { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClearStoryLocalizeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetClearStoryLocalizeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetClearStoryLocalizeArray() { return __p.__vector_as_array<byte>(44); }
  public string DefeatStoryLocalize { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefeatStoryLocalizeBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetDefeatStoryLocalizeBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetDefeatStoryLocalizeArray() { return __p.__vector_as_array<byte>(46); }
  public string RunawayStoryLocalize { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRunawayStoryLocalizeBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetRunawayStoryLocalizeBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetRunawayStoryLocalizeArray() { return __p.__vector_as_array<byte>(48); }

  public static Offset<Japan.MinigameTBGEncounterExcel> CreateMinigameTBGEncounterExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      bool AllThema = false,
      int ThemaIndex = 0,
      Japan.TBGThemaType ThemaType = Japan.TBGThemaType.None,
      Japan.TBGObjectType ObjectType = Japan.TBGObjectType.None,
      StringOffset EnemyImagePathOffset = default(StringOffset),
      StringOffset EnemyPrefabNameOffset = default(StringOffset),
      StringOffset EnemyNameLocalizeOffset = default(StringOffset),
      long OptionGroupId = 0,
      bool RewardHide = false,
      StringOffset EncounterTitleLocalizeOffset = default(StringOffset),
      StringOffset StoryImagePathOffset = default(StringOffset),
      StringOffset BeforeStoryLocalizeOffset = default(StringOffset),
      StringOffset BeforeStoryOption1LocalizeOffset = default(StringOffset),
      StringOffset BeforeStoryOption2LocalizeOffset = default(StringOffset),
      StringOffset BeforeStoryOption3LocalizeOffset = default(StringOffset),
      StringOffset AllyAttackLocalizeOffset = default(StringOffset),
      StringOffset EnemyAttackLocalizeOffset = default(StringOffset),
      StringOffset AttackDefenceLocalizeOffset = default(StringOffset),
      StringOffset ClearStoryLocalizeOffset = default(StringOffset),
      StringOffset DefeatStoryLocalizeOffset = default(StringOffset),
      StringOffset RunawayStoryLocalizeOffset = default(StringOffset)) {
    builder.StartTable(23);
    MinigameTBGEncounterExcel.AddOptionGroupId(builder, OptionGroupId);
    MinigameTBGEncounterExcel.AddUniqueId(builder, UniqueId);
    MinigameTBGEncounterExcel.AddEventContentId(builder, EventContentId);
    MinigameTBGEncounterExcel.AddRunawayStoryLocalize(builder, RunawayStoryLocalizeOffset);
    MinigameTBGEncounterExcel.AddDefeatStoryLocalize(builder, DefeatStoryLocalizeOffset);
    MinigameTBGEncounterExcel.AddClearStoryLocalize(builder, ClearStoryLocalizeOffset);
    MinigameTBGEncounterExcel.AddAttackDefenceLocalize(builder, AttackDefenceLocalizeOffset);
    MinigameTBGEncounterExcel.AddEnemyAttackLocalize(builder, EnemyAttackLocalizeOffset);
    MinigameTBGEncounterExcel.AddAllyAttackLocalize(builder, AllyAttackLocalizeOffset);
    MinigameTBGEncounterExcel.AddBeforeStoryOption3Localize(builder, BeforeStoryOption3LocalizeOffset);
    MinigameTBGEncounterExcel.AddBeforeStoryOption2Localize(builder, BeforeStoryOption2LocalizeOffset);
    MinigameTBGEncounterExcel.AddBeforeStoryOption1Localize(builder, BeforeStoryOption1LocalizeOffset);
    MinigameTBGEncounterExcel.AddBeforeStoryLocalize(builder, BeforeStoryLocalizeOffset);
    MinigameTBGEncounterExcel.AddStoryImagePath(builder, StoryImagePathOffset);
    MinigameTBGEncounterExcel.AddEncounterTitleLocalize(builder, EncounterTitleLocalizeOffset);
    MinigameTBGEncounterExcel.AddEnemyNameLocalize(builder, EnemyNameLocalizeOffset);
    MinigameTBGEncounterExcel.AddEnemyPrefabName(builder, EnemyPrefabNameOffset);
    MinigameTBGEncounterExcel.AddEnemyImagePath(builder, EnemyImagePathOffset);
    MinigameTBGEncounterExcel.AddObjectType(builder, ObjectType);
    MinigameTBGEncounterExcel.AddThemaType(builder, ThemaType);
    MinigameTBGEncounterExcel.AddThemaIndex(builder, ThemaIndex);
    MinigameTBGEncounterExcel.AddRewardHide(builder, RewardHide);
    MinigameTBGEncounterExcel.AddAllThema(builder, AllThema);
    return MinigameTBGEncounterExcel.EndMinigameTBGEncounterExcel(builder);
  }

  public static void StartMinigameTBGEncounterExcel(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddAllThema(FlatBufferBuilder builder, bool allThema) { builder.AddBool(2, allThema, false); }
  public static void AddThemaIndex(FlatBufferBuilder builder, int themaIndex) { builder.AddInt(3, themaIndex, 0); }
  public static void AddThemaType(FlatBufferBuilder builder, Japan.TBGThemaType themaType) { builder.AddInt(4, (int)themaType, 0); }
  public static void AddObjectType(FlatBufferBuilder builder, Japan.TBGObjectType objectType) { builder.AddInt(5, (int)objectType, 0); }
  public static void AddEnemyImagePath(FlatBufferBuilder builder, StringOffset enemyImagePathOffset) { builder.AddOffset(6, enemyImagePathOffset.Value, 0); }
  public static void AddEnemyPrefabName(FlatBufferBuilder builder, StringOffset enemyPrefabNameOffset) { builder.AddOffset(7, enemyPrefabNameOffset.Value, 0); }
  public static void AddEnemyNameLocalize(FlatBufferBuilder builder, StringOffset enemyNameLocalizeOffset) { builder.AddOffset(8, enemyNameLocalizeOffset.Value, 0); }
  public static void AddOptionGroupId(FlatBufferBuilder builder, long optionGroupId) { builder.AddLong(9, optionGroupId, 0); }
  public static void AddRewardHide(FlatBufferBuilder builder, bool rewardHide) { builder.AddBool(10, rewardHide, false); }
  public static void AddEncounterTitleLocalize(FlatBufferBuilder builder, StringOffset encounterTitleLocalizeOffset) { builder.AddOffset(11, encounterTitleLocalizeOffset.Value, 0); }
  public static void AddStoryImagePath(FlatBufferBuilder builder, StringOffset storyImagePathOffset) { builder.AddOffset(12, storyImagePathOffset.Value, 0); }
  public static void AddBeforeStoryLocalize(FlatBufferBuilder builder, StringOffset beforeStoryLocalizeOffset) { builder.AddOffset(13, beforeStoryLocalizeOffset.Value, 0); }
  public static void AddBeforeStoryOption1Localize(FlatBufferBuilder builder, StringOffset beforeStoryOption1LocalizeOffset) { builder.AddOffset(14, beforeStoryOption1LocalizeOffset.Value, 0); }
  public static void AddBeforeStoryOption2Localize(FlatBufferBuilder builder, StringOffset beforeStoryOption2LocalizeOffset) { builder.AddOffset(15, beforeStoryOption2LocalizeOffset.Value, 0); }
  public static void AddBeforeStoryOption3Localize(FlatBufferBuilder builder, StringOffset beforeStoryOption3LocalizeOffset) { builder.AddOffset(16, beforeStoryOption3LocalizeOffset.Value, 0); }
  public static void AddAllyAttackLocalize(FlatBufferBuilder builder, StringOffset allyAttackLocalizeOffset) { builder.AddOffset(17, allyAttackLocalizeOffset.Value, 0); }
  public static void AddEnemyAttackLocalize(FlatBufferBuilder builder, StringOffset enemyAttackLocalizeOffset) { builder.AddOffset(18, enemyAttackLocalizeOffset.Value, 0); }
  public static void AddAttackDefenceLocalize(FlatBufferBuilder builder, StringOffset attackDefenceLocalizeOffset) { builder.AddOffset(19, attackDefenceLocalizeOffset.Value, 0); }
  public static void AddClearStoryLocalize(FlatBufferBuilder builder, StringOffset clearStoryLocalizeOffset) { builder.AddOffset(20, clearStoryLocalizeOffset.Value, 0); }
  public static void AddDefeatStoryLocalize(FlatBufferBuilder builder, StringOffset defeatStoryLocalizeOffset) { builder.AddOffset(21, defeatStoryLocalizeOffset.Value, 0); }
  public static void AddRunawayStoryLocalize(FlatBufferBuilder builder, StringOffset runawayStoryLocalizeOffset) { builder.AddOffset(22, runawayStoryLocalizeOffset.Value, 0); }
  public static Offset<Japan.MinigameTBGEncounterExcel> EndMinigameTBGEncounterExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameTBGEncounterExcel>(o);
  }
  public MinigameTBGEncounterExcelT UnPack() {
    var _o = new MinigameTBGEncounterExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameTBGEncounterExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameTBGEncounter");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.AllThema = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.AllThema, key) : this.AllThema;
    _o.ThemaIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ThemaIndex, key) : this.ThemaIndex;
    _o.ThemaType = TableEncryptionService.UseEncryption ? (Japan.TBGThemaType)TableEncryptionService.Convert((int)this.ThemaType, key) : this.ThemaType;
    _o.ObjectType = TableEncryptionService.UseEncryption ? (Japan.TBGObjectType)TableEncryptionService.Convert((int)this.ObjectType, key) : this.ObjectType;
    _o.EnemyImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EnemyImagePath, key) : this.EnemyImagePath;
    _o.EnemyPrefabName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EnemyPrefabName, key) : this.EnemyPrefabName;
    _o.EnemyNameLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EnemyNameLocalize, key) : this.EnemyNameLocalize;
    _o.OptionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OptionGroupId, key) : this.OptionGroupId;
    _o.RewardHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.RewardHide, key) : this.RewardHide;
    _o.EncounterTitleLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EncounterTitleLocalize, key) : this.EncounterTitleLocalize;
    _o.StoryImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StoryImagePath, key) : this.StoryImagePath;
    _o.BeforeStoryLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BeforeStoryLocalize, key) : this.BeforeStoryLocalize;
    _o.BeforeStoryOption1Localize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BeforeStoryOption1Localize, key) : this.BeforeStoryOption1Localize;
    _o.BeforeStoryOption2Localize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BeforeStoryOption2Localize, key) : this.BeforeStoryOption2Localize;
    _o.BeforeStoryOption3Localize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BeforeStoryOption3Localize, key) : this.BeforeStoryOption3Localize;
    _o.AllyAttackLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.AllyAttackLocalize, key) : this.AllyAttackLocalize;
    _o.EnemyAttackLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EnemyAttackLocalize, key) : this.EnemyAttackLocalize;
    _o.AttackDefenceLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.AttackDefenceLocalize, key) : this.AttackDefenceLocalize;
    _o.ClearStoryLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ClearStoryLocalize, key) : this.ClearStoryLocalize;
    _o.DefeatStoryLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DefeatStoryLocalize, key) : this.DefeatStoryLocalize;
    _o.RunawayStoryLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.RunawayStoryLocalize, key) : this.RunawayStoryLocalize;
  }
  public static Offset<Japan.MinigameTBGEncounterExcel> Pack(FlatBufferBuilder builder, MinigameTBGEncounterExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameTBGEncounterExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameTBGEncounter");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _AllThema = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.AllThema, key) : _o.AllThema;
		var _ThemaIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ThemaIndex, key) : _o.ThemaIndex;
		var _ThemaType = TableEncryptionService.UseEncryption ? (Japan.TBGThemaType)TableEncryptionService.Convert((int)_o.ThemaType, key) : _o.ThemaType;
		var _ObjectType = TableEncryptionService.UseEncryption ? (Japan.TBGObjectType)TableEncryptionService.Convert((int)_o.ObjectType, key) : _o.ObjectType;
    var _EnemyImagePath = _o.EnemyImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EnemyImagePath, key) : _o.EnemyImagePath));
    var _EnemyPrefabName = _o.EnemyPrefabName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EnemyPrefabName, key) : _o.EnemyPrefabName));
    var _EnemyNameLocalize = _o.EnemyNameLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EnemyNameLocalize, key) : _o.EnemyNameLocalize));
		var _OptionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OptionGroupId, key) : _o.OptionGroupId;
		var _RewardHide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.RewardHide, key) : _o.RewardHide;
    var _EncounterTitleLocalize = _o.EncounterTitleLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EncounterTitleLocalize, key) : _o.EncounterTitleLocalize));
    var _StoryImagePath = _o.StoryImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StoryImagePath, key) : _o.StoryImagePath));
    var _BeforeStoryLocalize = _o.BeforeStoryLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BeforeStoryLocalize, key) : _o.BeforeStoryLocalize));
    var _BeforeStoryOption1Localize = _o.BeforeStoryOption1Localize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BeforeStoryOption1Localize, key) : _o.BeforeStoryOption1Localize));
    var _BeforeStoryOption2Localize = _o.BeforeStoryOption2Localize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BeforeStoryOption2Localize, key) : _o.BeforeStoryOption2Localize));
    var _BeforeStoryOption3Localize = _o.BeforeStoryOption3Localize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BeforeStoryOption3Localize, key) : _o.BeforeStoryOption3Localize));
    var _AllyAttackLocalize = _o.AllyAttackLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.AllyAttackLocalize, key) : _o.AllyAttackLocalize));
    var _EnemyAttackLocalize = _o.EnemyAttackLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EnemyAttackLocalize, key) : _o.EnemyAttackLocalize));
    var _AttackDefenceLocalize = _o.AttackDefenceLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.AttackDefenceLocalize, key) : _o.AttackDefenceLocalize));
    var _ClearStoryLocalize = _o.ClearStoryLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ClearStoryLocalize, key) : _o.ClearStoryLocalize));
    var _DefeatStoryLocalize = _o.DefeatStoryLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DefeatStoryLocalize, key) : _o.DefeatStoryLocalize));
    var _RunawayStoryLocalize = _o.RunawayStoryLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.RunawayStoryLocalize, key) : _o.RunawayStoryLocalize));
    return CreateMinigameTBGEncounterExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _AllThema : _o.AllThema,
      TableEncryptionService.UseEncryption ? _ThemaIndex : _o.ThemaIndex,
      TableEncryptionService.UseEncryption ? _ThemaType : _o.ThemaType,
      TableEncryptionService.UseEncryption ? _ObjectType : _o.ObjectType,
      _EnemyImagePath,
      _EnemyPrefabName,
      _EnemyNameLocalize,
      TableEncryptionService.UseEncryption ? _OptionGroupId : _o.OptionGroupId,
      TableEncryptionService.UseEncryption ? _RewardHide : _o.RewardHide,
      _EncounterTitleLocalize,
      _StoryImagePath,
      _BeforeStoryLocalize,
      _BeforeStoryOption1Localize,
      _BeforeStoryOption2Localize,
      _BeforeStoryOption3Localize,
      _AllyAttackLocalize,
      _EnemyAttackLocalize,
      _AttackDefenceLocalize,
      _ClearStoryLocalize,
      _DefeatStoryLocalize,
      _RunawayStoryLocalize);
  }
}

public class MinigameTBGEncounterExcelT
{
  public long EventContentId { get; set; }
  public long UniqueId { get; set; }
  public bool AllThema { get; set; }
  public int ThemaIndex { get; set; }
  public Japan.TBGThemaType ThemaType { get; set; }
  public Japan.TBGObjectType ObjectType { get; set; }
  public string EnemyImagePath { get; set; }
  public string EnemyPrefabName { get; set; }
  public string EnemyNameLocalize { get; set; }
  public long OptionGroupId { get; set; }
  public bool RewardHide { get; set; }
  public string EncounterTitleLocalize { get; set; }
  public string StoryImagePath { get; set; }
  public string BeforeStoryLocalize { get; set; }
  public string BeforeStoryOption1Localize { get; set; }
  public string BeforeStoryOption2Localize { get; set; }
  public string BeforeStoryOption3Localize { get; set; }
  public string AllyAttackLocalize { get; set; }
  public string EnemyAttackLocalize { get; set; }
  public string AttackDefenceLocalize { get; set; }
  public string ClearStoryLocalize { get; set; }
  public string DefeatStoryLocalize { get; set; }
  public string RunawayStoryLocalize { get; set; }

  public MinigameTBGEncounterExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.AllThema = false;
    this.ThemaIndex = 0;
    this.ThemaType = Japan.TBGThemaType.None;
    this.ObjectType = Japan.TBGObjectType.None;
    this.EnemyImagePath = null;
    this.EnemyPrefabName = null;
    this.EnemyNameLocalize = null;
    this.OptionGroupId = 0;
    this.RewardHide = false;
    this.EncounterTitleLocalize = null;
    this.StoryImagePath = null;
    this.BeforeStoryLocalize = null;
    this.BeforeStoryOption1Localize = null;
    this.BeforeStoryOption2Localize = null;
    this.BeforeStoryOption3Localize = null;
    this.AllyAttackLocalize = null;
    this.EnemyAttackLocalize = null;
    this.AttackDefenceLocalize = null;
    this.ClearStoryLocalize = null;
    this.DefeatStoryLocalize = null;
    this.RunawayStoryLocalize = null;
  }
}


static public class MinigameTBGEncounterExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*AllThema*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*ThemaIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ThemaType*/, 4 /*Japan.TBGThemaType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ObjectType*/, 4 /*Japan.TBGObjectType*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*EnemyImagePath*/, false)
      && verifier.VerifyString(tablePos, 18 /*EnemyPrefabName*/, false)
      && verifier.VerifyString(tablePos, 20 /*EnemyNameLocalize*/, false)
      && verifier.VerifyField(tablePos, 22 /*OptionGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*RewardHide*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 26 /*EncounterTitleLocalize*/, false)
      && verifier.VerifyString(tablePos, 28 /*StoryImagePath*/, false)
      && verifier.VerifyString(tablePos, 30 /*BeforeStoryLocalize*/, false)
      && verifier.VerifyString(tablePos, 32 /*BeforeStoryOption1Localize*/, false)
      && verifier.VerifyString(tablePos, 34 /*BeforeStoryOption2Localize*/, false)
      && verifier.VerifyString(tablePos, 36 /*BeforeStoryOption3Localize*/, false)
      && verifier.VerifyString(tablePos, 38 /*AllyAttackLocalize*/, false)
      && verifier.VerifyString(tablePos, 40 /*EnemyAttackLocalize*/, false)
      && verifier.VerifyString(tablePos, 42 /*AttackDefenceLocalize*/, false)
      && verifier.VerifyString(tablePos, 44 /*ClearStoryLocalize*/, false)
      && verifier.VerifyString(tablePos, 46 /*DefeatStoryLocalize*/, false)
      && verifier.VerifyString(tablePos, 48 /*RunawayStoryLocalize*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
