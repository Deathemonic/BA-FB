// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConstCombatExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConstCombatExcel GetRootAsConstCombatExcel(ByteBuffer _bb) { return GetRootAsConstCombatExcel(_bb, new ConstCombatExcel()); }
  public static ConstCombatExcel GetRootAsConstCombatExcel(ByteBuffer _bb, ConstCombatExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstCombatExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SkillHandCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DyingTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffIconBlinkTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowBufficonEXSkill { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonPassiveSkill { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonExtraPassiveSkill { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonLeaderSkill { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonGroundPassiveSkill { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string SuppliesConditionStringId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSuppliesConditionStringIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSuppliesConditionStringIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSuppliesConditionStringIdArray() { return __p.__vector_as_array<byte>(20); }
  public float PublicSpeechBubbleOffsetX { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PublicSpeechBubbleOffsetY { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PublicSpeechBubbleOffsetZ { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int ShowRaidListCount { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long MaxRaidTicketCount { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxRaidBossSkillSlot { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string EngageTimelinePath { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEngageTimelinePathBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetEngageTimelinePathBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetEngageTimelinePathArray() { return __p.__vector_as_array<byte>(34); }
  public string EngageWithSupporterTimelinePath { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetEngageWithSupporterTimelinePathArray() { return __p.__vector_as_array<byte>(36); }
  public string VictoryTimelinePath { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(38); }
  public long TimeLimitAlarm { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int EchelonMaxCommonCost { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EchelonInitCommonCost { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long SkillSlotCoolTime { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyRegenCost { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ChampionRegenCost { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerRegenCostDelay { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CrowdControlFactor { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string RaidOpenScenarioId { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaidOpenScenarioIdBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetRaidOpenScenarioIdBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetRaidOpenScenarioIdArray() { return __p.__vector_as_array<byte>(56); }
  public string EliminateRaidOpenScenarioId { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEliminateRaidOpenScenarioIdBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetEliminateRaidOpenScenarioIdBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetEliminateRaidOpenScenarioIdArray() { return __p.__vector_as_array<byte>(58); }
  public long DefenceConstA { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenceConstB { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenceConstC { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenceConstD { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstA { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstB { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstC { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstD { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstA { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstB { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstC { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstD { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxGroupBuffLevel { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmojiDefaultTime { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long TimeLineActionRotateSpeed { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BodyRotateSpeed { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NormalTimeScale { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FastTimeScale { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BulletTimeScale { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UIDisplayDelayAfterSkillCutIn { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool UseInitialRangeForCoverMove { get { int o = __p.__offset(100); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long SlowTimeScale { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float AimIKMinDegree { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AimIKMaxDegree { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int MinimumClearTime { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinimumClearLevelGap { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CheckCheaterMaxUseCostNonArena { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CheckCheaterMaxUseCostArena { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long AllowedMaxTimeScale { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RandomAnimationOutput { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SummonedTeleportDistance { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ArenaMinimumClearTime { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long WORLDBOSSBATTLELITTLE { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEMIDDLE { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEHIGH { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEVERYHIGH { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidAutoSyncTermSecond { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidBossHpDecreaseTerm { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidBossParcelReactionDelay { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RaidRankingJumpMinimumWaitingTime { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float EffectTeleportDistance { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long AuraExitThresholdMargin { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TSAInteractionDamageFactor { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long VictoryInteractionRate { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string EchelonExtensionEngageTimelinePath { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonExtensionEngageTimelinePathBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetEchelonExtensionEngageTimelinePathBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetEchelonExtensionEngageTimelinePathArray() { return __p.__vector_as_array<byte>(148); }
  public string EchelonExtensionEngageWithSupporterTimelinePath { get { int o = __p.__offset(150); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonExtensionEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_span<byte>(150, 1); }
#else
  public ArraySegment<byte>? GetEchelonExtensionEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_arraysegment(150); }
#endif
  public byte[] GetEchelonExtensionEngageWithSupporterTimelinePathArray() { return __p.__vector_as_array<byte>(150); }
  public string EchelonExtensionVictoryTimelinePath { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonExtensionVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetEchelonExtensionVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetEchelonExtensionVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(152); }
  public int EchelonExtensionEchelonMaxCommonCost { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EchelonMaxOverloadCost { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonExtensionMaxOverloadCost { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int EchelonExtensionEchelonInitCommonCost { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EchelonExtensionCostRegenRatio { get { int o = __p.__offset(162); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonOverloadCostRegenRatio { get { int o = __p.__offset(164); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EchelonExtensionOverloadCostRegenRatio { get { int o = __p.__offset(166); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CheckCheaterMaxUseCostMultiFloorRaid { get { int o = __p.__offset(168); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float ExcessiveTouchCheckTime { get { int o = __p.__offset(170); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int ExcessiveTouchCheckCount { get { int o = __p.__offset(172); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CampaignAlertPopupLevelGap { get { int o = __p.__offset(174); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MoveCorrectionSkipRatio { get { int o = __p.__offset(176); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Japan.ConstCombatExcel> CreateConstCombatExcel(FlatBufferBuilder builder,
      int SkillHandCount = 0,
      int DyingTime = 0,
      int BuffIconBlinkTime = 0,
      bool ShowBufficonEXSkill = false,
      bool ShowBufficonPassiveSkill = false,
      bool ShowBufficonExtraPassiveSkill = false,
      bool ShowBufficonLeaderSkill = false,
      bool ShowBufficonGroundPassiveSkill = false,
      StringOffset SuppliesConditionStringIdOffset = default(StringOffset),
      float PublicSpeechBubbleOffsetX = 0.0f,
      float PublicSpeechBubbleOffsetY = 0.0f,
      float PublicSpeechBubbleOffsetZ = 0.0f,
      int ShowRaidListCount = 0,
      long MaxRaidTicketCount = 0,
      long MaxRaidBossSkillSlot = 0,
      StringOffset EngageTimelinePathOffset = default(StringOffset),
      StringOffset EngageWithSupporterTimelinePathOffset = default(StringOffset),
      StringOffset VictoryTimelinePathOffset = default(StringOffset),
      long TimeLimitAlarm = 0,
      int EchelonMaxCommonCost = 0,
      int EchelonInitCommonCost = 0,
      long SkillSlotCoolTime = 0,
      long EnemyRegenCost = 0,
      long ChampionRegenCost = 0,
      long PlayerRegenCostDelay = 0,
      long CrowdControlFactor = 0,
      StringOffset RaidOpenScenarioIdOffset = default(StringOffset),
      StringOffset EliminateRaidOpenScenarioIdOffset = default(StringOffset),
      long DefenceConstA = 0,
      long DefenceConstB = 0,
      long DefenceConstC = 0,
      long DefenceConstD = 0,
      long AccuracyConstA = 0,
      long AccuracyConstB = 0,
      long AccuracyConstC = 0,
      long AccuracyConstD = 0,
      long CriticalConstA = 0,
      long CriticalConstB = 0,
      long CriticalConstC = 0,
      long CriticalConstD = 0,
      int MaxGroupBuffLevel = 0,
      int EmojiDefaultTime = 0,
      long TimeLineActionRotateSpeed = 0,
      long BodyRotateSpeed = 0,
      long NormalTimeScale = 0,
      long FastTimeScale = 0,
      long BulletTimeScale = 0,
      long UIDisplayDelayAfterSkillCutIn = 0,
      bool UseInitialRangeForCoverMove = false,
      long SlowTimeScale = 0,
      float AimIKMinDegree = 0.0f,
      float AimIKMaxDegree = 0.0f,
      int MinimumClearTime = 0,
      int MinimumClearLevelGap = 0,
      int CheckCheaterMaxUseCostNonArena = 0,
      int CheckCheaterMaxUseCostArena = 0,
      long AllowedMaxTimeScale = 0,
      long RandomAnimationOutput = 0,
      long SummonedTeleportDistance = 0,
      int ArenaMinimumClearTime = 0,
      long WORLDBOSSBATTLELITTLE = 0,
      long WORLDBOSSBATTLEMIDDLE = 0,
      long WORLDBOSSBATTLEHIGH = 0,
      long WORLDBOSSBATTLEVERYHIGH = 0,
      long WorldRaidAutoSyncTermSecond = 0,
      long WorldRaidBossHpDecreaseTerm = 0,
      long WorldRaidBossParcelReactionDelay = 0,
      long RaidRankingJumpMinimumWaitingTime = 0,
      float EffectTeleportDistance = 0.0f,
      long AuraExitThresholdMargin = 0,
      long TSAInteractionDamageFactor = 0,
      long VictoryInteractionRate = 0,
      StringOffset EchelonExtensionEngageTimelinePathOffset = default(StringOffset),
      StringOffset EchelonExtensionEngageWithSupporterTimelinePathOffset = default(StringOffset),
      StringOffset EchelonExtensionVictoryTimelinePathOffset = default(StringOffset),
      int EchelonExtensionEchelonMaxCommonCost = 0,
      long EchelonMaxOverloadCost = 0,
      long EchelonExtensionMaxOverloadCost = 0,
      int EchelonExtensionEchelonInitCommonCost = 0,
      long EchelonExtensionCostRegenRatio = 0,
      long EchelonOverloadCostRegenRatio = 0,
      long EchelonExtensionOverloadCostRegenRatio = 0,
      int CheckCheaterMaxUseCostMultiFloorRaid = 0,
      float ExcessiveTouchCheckTime = 0.0f,
      int ExcessiveTouchCheckCount = 0,
      int CampaignAlertPopupLevelGap = 0,
      int MoveCorrectionSkipRatio = 0) {
    builder.StartTable(87);
    ConstCombatExcel.AddEchelonExtensionOverloadCostRegenRatio(builder, EchelonExtensionOverloadCostRegenRatio);
    ConstCombatExcel.AddEchelonOverloadCostRegenRatio(builder, EchelonOverloadCostRegenRatio);
    ConstCombatExcel.AddEchelonExtensionCostRegenRatio(builder, EchelonExtensionCostRegenRatio);
    ConstCombatExcel.AddEchelonExtensionMaxOverloadCost(builder, EchelonExtensionMaxOverloadCost);
    ConstCombatExcel.AddEchelonMaxOverloadCost(builder, EchelonMaxOverloadCost);
    ConstCombatExcel.AddVictoryInteractionRate(builder, VictoryInteractionRate);
    ConstCombatExcel.AddTSAInteractionDamageFactor(builder, TSAInteractionDamageFactor);
    ConstCombatExcel.AddAuraExitThresholdMargin(builder, AuraExitThresholdMargin);
    ConstCombatExcel.AddRaidRankingJumpMinimumWaitingTime(builder, RaidRankingJumpMinimumWaitingTime);
    ConstCombatExcel.AddWorldRaidBossParcelReactionDelay(builder, WorldRaidBossParcelReactionDelay);
    ConstCombatExcel.AddWorldRaidBossHpDecreaseTerm(builder, WorldRaidBossHpDecreaseTerm);
    ConstCombatExcel.AddWorldRaidAutoSyncTermSecond(builder, WorldRaidAutoSyncTermSecond);
    ConstCombatExcel.AddWORLDBOSSBATTLEVERYHIGH(builder, WORLDBOSSBATTLEVERYHIGH);
    ConstCombatExcel.AddWORLDBOSSBATTLEHIGH(builder, WORLDBOSSBATTLEHIGH);
    ConstCombatExcel.AddWORLDBOSSBATTLEMIDDLE(builder, WORLDBOSSBATTLEMIDDLE);
    ConstCombatExcel.AddWORLDBOSSBATTLELITTLE(builder, WORLDBOSSBATTLELITTLE);
    ConstCombatExcel.AddSummonedTeleportDistance(builder, SummonedTeleportDistance);
    ConstCombatExcel.AddRandomAnimationOutput(builder, RandomAnimationOutput);
    ConstCombatExcel.AddAllowedMaxTimeScale(builder, AllowedMaxTimeScale);
    ConstCombatExcel.AddSlowTimeScale(builder, SlowTimeScale);
    ConstCombatExcel.AddUIDisplayDelayAfterSkillCutIn(builder, UIDisplayDelayAfterSkillCutIn);
    ConstCombatExcel.AddBulletTimeScale(builder, BulletTimeScale);
    ConstCombatExcel.AddFastTimeScale(builder, FastTimeScale);
    ConstCombatExcel.AddNormalTimeScale(builder, NormalTimeScale);
    ConstCombatExcel.AddBodyRotateSpeed(builder, BodyRotateSpeed);
    ConstCombatExcel.AddTimeLineActionRotateSpeed(builder, TimeLineActionRotateSpeed);
    ConstCombatExcel.AddCriticalConstD(builder, CriticalConstD);
    ConstCombatExcel.AddCriticalConstC(builder, CriticalConstC);
    ConstCombatExcel.AddCriticalConstB(builder, CriticalConstB);
    ConstCombatExcel.AddCriticalConstA(builder, CriticalConstA);
    ConstCombatExcel.AddAccuracyConstD(builder, AccuracyConstD);
    ConstCombatExcel.AddAccuracyConstC(builder, AccuracyConstC);
    ConstCombatExcel.AddAccuracyConstB(builder, AccuracyConstB);
    ConstCombatExcel.AddAccuracyConstA(builder, AccuracyConstA);
    ConstCombatExcel.AddDefenceConstD(builder, DefenceConstD);
    ConstCombatExcel.AddDefenceConstC(builder, DefenceConstC);
    ConstCombatExcel.AddDefenceConstB(builder, DefenceConstB);
    ConstCombatExcel.AddDefenceConstA(builder, DefenceConstA);
    ConstCombatExcel.AddCrowdControlFactor(builder, CrowdControlFactor);
    ConstCombatExcel.AddPlayerRegenCostDelay(builder, PlayerRegenCostDelay);
    ConstCombatExcel.AddChampionRegenCost(builder, ChampionRegenCost);
    ConstCombatExcel.AddEnemyRegenCost(builder, EnemyRegenCost);
    ConstCombatExcel.AddSkillSlotCoolTime(builder, SkillSlotCoolTime);
    ConstCombatExcel.AddTimeLimitAlarm(builder, TimeLimitAlarm);
    ConstCombatExcel.AddMaxRaidBossSkillSlot(builder, MaxRaidBossSkillSlot);
    ConstCombatExcel.AddMaxRaidTicketCount(builder, MaxRaidTicketCount);
    ConstCombatExcel.AddMoveCorrectionSkipRatio(builder, MoveCorrectionSkipRatio);
    ConstCombatExcel.AddCampaignAlertPopupLevelGap(builder, CampaignAlertPopupLevelGap);
    ConstCombatExcel.AddExcessiveTouchCheckCount(builder, ExcessiveTouchCheckCount);
    ConstCombatExcel.AddExcessiveTouchCheckTime(builder, ExcessiveTouchCheckTime);
    ConstCombatExcel.AddCheckCheaterMaxUseCostMultiFloorRaid(builder, CheckCheaterMaxUseCostMultiFloorRaid);
    ConstCombatExcel.AddEchelonExtensionEchelonInitCommonCost(builder, EchelonExtensionEchelonInitCommonCost);
    ConstCombatExcel.AddEchelonExtensionEchelonMaxCommonCost(builder, EchelonExtensionEchelonMaxCommonCost);
    ConstCombatExcel.AddEchelonExtensionVictoryTimelinePath(builder, EchelonExtensionVictoryTimelinePathOffset);
    ConstCombatExcel.AddEchelonExtensionEngageWithSupporterTimelinePath(builder, EchelonExtensionEngageWithSupporterTimelinePathOffset);
    ConstCombatExcel.AddEchelonExtensionEngageTimelinePath(builder, EchelonExtensionEngageTimelinePathOffset);
    ConstCombatExcel.AddEffectTeleportDistance(builder, EffectTeleportDistance);
    ConstCombatExcel.AddArenaMinimumClearTime(builder, ArenaMinimumClearTime);
    ConstCombatExcel.AddCheckCheaterMaxUseCostArena(builder, CheckCheaterMaxUseCostArena);
    ConstCombatExcel.AddCheckCheaterMaxUseCostNonArena(builder, CheckCheaterMaxUseCostNonArena);
    ConstCombatExcel.AddMinimumClearLevelGap(builder, MinimumClearLevelGap);
    ConstCombatExcel.AddMinimumClearTime(builder, MinimumClearTime);
    ConstCombatExcel.AddAimIKMaxDegree(builder, AimIKMaxDegree);
    ConstCombatExcel.AddAimIKMinDegree(builder, AimIKMinDegree);
    ConstCombatExcel.AddEmojiDefaultTime(builder, EmojiDefaultTime);
    ConstCombatExcel.AddMaxGroupBuffLevel(builder, MaxGroupBuffLevel);
    ConstCombatExcel.AddEliminateRaidOpenScenarioId(builder, EliminateRaidOpenScenarioIdOffset);
    ConstCombatExcel.AddRaidOpenScenarioId(builder, RaidOpenScenarioIdOffset);
    ConstCombatExcel.AddEchelonInitCommonCost(builder, EchelonInitCommonCost);
    ConstCombatExcel.AddEchelonMaxCommonCost(builder, EchelonMaxCommonCost);
    ConstCombatExcel.AddVictoryTimelinePath(builder, VictoryTimelinePathOffset);
    ConstCombatExcel.AddEngageWithSupporterTimelinePath(builder, EngageWithSupporterTimelinePathOffset);
    ConstCombatExcel.AddEngageTimelinePath(builder, EngageTimelinePathOffset);
    ConstCombatExcel.AddShowRaidListCount(builder, ShowRaidListCount);
    ConstCombatExcel.AddPublicSpeechBubbleOffsetZ(builder, PublicSpeechBubbleOffsetZ);
    ConstCombatExcel.AddPublicSpeechBubbleOffsetY(builder, PublicSpeechBubbleOffsetY);
    ConstCombatExcel.AddPublicSpeechBubbleOffsetX(builder, PublicSpeechBubbleOffsetX);
    ConstCombatExcel.AddSuppliesConditionStringId(builder, SuppliesConditionStringIdOffset);
    ConstCombatExcel.AddBuffIconBlinkTime(builder, BuffIconBlinkTime);
    ConstCombatExcel.AddDyingTime(builder, DyingTime);
    ConstCombatExcel.AddSkillHandCount(builder, SkillHandCount);
    ConstCombatExcel.AddUseInitialRangeForCoverMove(builder, UseInitialRangeForCoverMove);
    ConstCombatExcel.AddShowBufficonGroundPassiveSkill(builder, ShowBufficonGroundPassiveSkill);
    ConstCombatExcel.AddShowBufficonLeaderSkill(builder, ShowBufficonLeaderSkill);
    ConstCombatExcel.AddShowBufficonExtraPassiveSkill(builder, ShowBufficonExtraPassiveSkill);
    ConstCombatExcel.AddShowBufficonPassiveSkill(builder, ShowBufficonPassiveSkill);
    ConstCombatExcel.AddShowBufficonEXSkill(builder, ShowBufficonEXSkill);
    return ConstCombatExcel.EndConstCombatExcel(builder);
  }

  public static void StartConstCombatExcel(FlatBufferBuilder builder) { builder.StartTable(87); }
  public static void AddSkillHandCount(FlatBufferBuilder builder, int skillHandCount) { builder.AddInt(0, skillHandCount, 0); }
  public static void AddDyingTime(FlatBufferBuilder builder, int dyingTime) { builder.AddInt(1, dyingTime, 0); }
  public static void AddBuffIconBlinkTime(FlatBufferBuilder builder, int buffIconBlinkTime) { builder.AddInt(2, buffIconBlinkTime, 0); }
  public static void AddShowBufficonEXSkill(FlatBufferBuilder builder, bool showBufficonEXSkill) { builder.AddBool(3, showBufficonEXSkill, false); }
  public static void AddShowBufficonPassiveSkill(FlatBufferBuilder builder, bool showBufficonPassiveSkill) { builder.AddBool(4, showBufficonPassiveSkill, false); }
  public static void AddShowBufficonExtraPassiveSkill(FlatBufferBuilder builder, bool showBufficonExtraPassiveSkill) { builder.AddBool(5, showBufficonExtraPassiveSkill, false); }
  public static void AddShowBufficonLeaderSkill(FlatBufferBuilder builder, bool showBufficonLeaderSkill) { builder.AddBool(6, showBufficonLeaderSkill, false); }
  public static void AddShowBufficonGroundPassiveSkill(FlatBufferBuilder builder, bool showBufficonGroundPassiveSkill) { builder.AddBool(7, showBufficonGroundPassiveSkill, false); }
  public static void AddSuppliesConditionStringId(FlatBufferBuilder builder, StringOffset suppliesConditionStringIdOffset) { builder.AddOffset(8, suppliesConditionStringIdOffset.Value, 0); }
  public static void AddPublicSpeechBubbleOffsetX(FlatBufferBuilder builder, float publicSpeechBubbleOffsetX) { builder.AddFloat(9, publicSpeechBubbleOffsetX, 0.0f); }
  public static void AddPublicSpeechBubbleOffsetY(FlatBufferBuilder builder, float publicSpeechBubbleOffsetY) { builder.AddFloat(10, publicSpeechBubbleOffsetY, 0.0f); }
  public static void AddPublicSpeechBubbleOffsetZ(FlatBufferBuilder builder, float publicSpeechBubbleOffsetZ) { builder.AddFloat(11, publicSpeechBubbleOffsetZ, 0.0f); }
  public static void AddShowRaidListCount(FlatBufferBuilder builder, int showRaidListCount) { builder.AddInt(12, showRaidListCount, 0); }
  public static void AddMaxRaidTicketCount(FlatBufferBuilder builder, long maxRaidTicketCount) { builder.AddLong(13, maxRaidTicketCount, 0); }
  public static void AddMaxRaidBossSkillSlot(FlatBufferBuilder builder, long maxRaidBossSkillSlot) { builder.AddLong(14, maxRaidBossSkillSlot, 0); }
  public static void AddEngageTimelinePath(FlatBufferBuilder builder, StringOffset engageTimelinePathOffset) { builder.AddOffset(15, engageTimelinePathOffset.Value, 0); }
  public static void AddEngageWithSupporterTimelinePath(FlatBufferBuilder builder, StringOffset engageWithSupporterTimelinePathOffset) { builder.AddOffset(16, engageWithSupporterTimelinePathOffset.Value, 0); }
  public static void AddVictoryTimelinePath(FlatBufferBuilder builder, StringOffset victoryTimelinePathOffset) { builder.AddOffset(17, victoryTimelinePathOffset.Value, 0); }
  public static void AddTimeLimitAlarm(FlatBufferBuilder builder, long timeLimitAlarm) { builder.AddLong(18, timeLimitAlarm, 0); }
  public static void AddEchelonMaxCommonCost(FlatBufferBuilder builder, int echelonMaxCommonCost) { builder.AddInt(19, echelonMaxCommonCost, 0); }
  public static void AddEchelonInitCommonCost(FlatBufferBuilder builder, int echelonInitCommonCost) { builder.AddInt(20, echelonInitCommonCost, 0); }
  public static void AddSkillSlotCoolTime(FlatBufferBuilder builder, long skillSlotCoolTime) { builder.AddLong(21, skillSlotCoolTime, 0); }
  public static void AddEnemyRegenCost(FlatBufferBuilder builder, long enemyRegenCost) { builder.AddLong(22, enemyRegenCost, 0); }
  public static void AddChampionRegenCost(FlatBufferBuilder builder, long championRegenCost) { builder.AddLong(23, championRegenCost, 0); }
  public static void AddPlayerRegenCostDelay(FlatBufferBuilder builder, long playerRegenCostDelay) { builder.AddLong(24, playerRegenCostDelay, 0); }
  public static void AddCrowdControlFactor(FlatBufferBuilder builder, long crowdControlFactor) { builder.AddLong(25, crowdControlFactor, 0); }
  public static void AddRaidOpenScenarioId(FlatBufferBuilder builder, StringOffset raidOpenScenarioIdOffset) { builder.AddOffset(26, raidOpenScenarioIdOffset.Value, 0); }
  public static void AddEliminateRaidOpenScenarioId(FlatBufferBuilder builder, StringOffset eliminateRaidOpenScenarioIdOffset) { builder.AddOffset(27, eliminateRaidOpenScenarioIdOffset.Value, 0); }
  public static void AddDefenceConstA(FlatBufferBuilder builder, long defenceConstA) { builder.AddLong(28, defenceConstA, 0); }
  public static void AddDefenceConstB(FlatBufferBuilder builder, long defenceConstB) { builder.AddLong(29, defenceConstB, 0); }
  public static void AddDefenceConstC(FlatBufferBuilder builder, long defenceConstC) { builder.AddLong(30, defenceConstC, 0); }
  public static void AddDefenceConstD(FlatBufferBuilder builder, long defenceConstD) { builder.AddLong(31, defenceConstD, 0); }
  public static void AddAccuracyConstA(FlatBufferBuilder builder, long accuracyConstA) { builder.AddLong(32, accuracyConstA, 0); }
  public static void AddAccuracyConstB(FlatBufferBuilder builder, long accuracyConstB) { builder.AddLong(33, accuracyConstB, 0); }
  public static void AddAccuracyConstC(FlatBufferBuilder builder, long accuracyConstC) { builder.AddLong(34, accuracyConstC, 0); }
  public static void AddAccuracyConstD(FlatBufferBuilder builder, long accuracyConstD) { builder.AddLong(35, accuracyConstD, 0); }
  public static void AddCriticalConstA(FlatBufferBuilder builder, long criticalConstA) { builder.AddLong(36, criticalConstA, 0); }
  public static void AddCriticalConstB(FlatBufferBuilder builder, long criticalConstB) { builder.AddLong(37, criticalConstB, 0); }
  public static void AddCriticalConstC(FlatBufferBuilder builder, long criticalConstC) { builder.AddLong(38, criticalConstC, 0); }
  public static void AddCriticalConstD(FlatBufferBuilder builder, long criticalConstD) { builder.AddLong(39, criticalConstD, 0); }
  public static void AddMaxGroupBuffLevel(FlatBufferBuilder builder, int maxGroupBuffLevel) { builder.AddInt(40, maxGroupBuffLevel, 0); }
  public static void AddEmojiDefaultTime(FlatBufferBuilder builder, int emojiDefaultTime) { builder.AddInt(41, emojiDefaultTime, 0); }
  public static void AddTimeLineActionRotateSpeed(FlatBufferBuilder builder, long timeLineActionRotateSpeed) { builder.AddLong(42, timeLineActionRotateSpeed, 0); }
  public static void AddBodyRotateSpeed(FlatBufferBuilder builder, long bodyRotateSpeed) { builder.AddLong(43, bodyRotateSpeed, 0); }
  public static void AddNormalTimeScale(FlatBufferBuilder builder, long normalTimeScale) { builder.AddLong(44, normalTimeScale, 0); }
  public static void AddFastTimeScale(FlatBufferBuilder builder, long fastTimeScale) { builder.AddLong(45, fastTimeScale, 0); }
  public static void AddBulletTimeScale(FlatBufferBuilder builder, long bulletTimeScale) { builder.AddLong(46, bulletTimeScale, 0); }
  public static void AddUIDisplayDelayAfterSkillCutIn(FlatBufferBuilder builder, long uIDisplayDelayAfterSkillCutIn) { builder.AddLong(47, uIDisplayDelayAfterSkillCutIn, 0); }
  public static void AddUseInitialRangeForCoverMove(FlatBufferBuilder builder, bool useInitialRangeForCoverMove) { builder.AddBool(48, useInitialRangeForCoverMove, false); }
  public static void AddSlowTimeScale(FlatBufferBuilder builder, long slowTimeScale) { builder.AddLong(49, slowTimeScale, 0); }
  public static void AddAimIKMinDegree(FlatBufferBuilder builder, float aimIKMinDegree) { builder.AddFloat(50, aimIKMinDegree, 0.0f); }
  public static void AddAimIKMaxDegree(FlatBufferBuilder builder, float aimIKMaxDegree) { builder.AddFloat(51, aimIKMaxDegree, 0.0f); }
  public static void AddMinimumClearTime(FlatBufferBuilder builder, int minimumClearTime) { builder.AddInt(52, minimumClearTime, 0); }
  public static void AddMinimumClearLevelGap(FlatBufferBuilder builder, int minimumClearLevelGap) { builder.AddInt(53, minimumClearLevelGap, 0); }
  public static void AddCheckCheaterMaxUseCostNonArena(FlatBufferBuilder builder, int checkCheaterMaxUseCostNonArena) { builder.AddInt(54, checkCheaterMaxUseCostNonArena, 0); }
  public static void AddCheckCheaterMaxUseCostArena(FlatBufferBuilder builder, int checkCheaterMaxUseCostArena) { builder.AddInt(55, checkCheaterMaxUseCostArena, 0); }
  public static void AddAllowedMaxTimeScale(FlatBufferBuilder builder, long allowedMaxTimeScale) { builder.AddLong(56, allowedMaxTimeScale, 0); }
  public static void AddRandomAnimationOutput(FlatBufferBuilder builder, long randomAnimationOutput) { builder.AddLong(57, randomAnimationOutput, 0); }
  public static void AddSummonedTeleportDistance(FlatBufferBuilder builder, long summonedTeleportDistance) { builder.AddLong(58, summonedTeleportDistance, 0); }
  public static void AddArenaMinimumClearTime(FlatBufferBuilder builder, int arenaMinimumClearTime) { builder.AddInt(59, arenaMinimumClearTime, 0); }
  public static void AddWORLDBOSSBATTLELITTLE(FlatBufferBuilder builder, long wORLDBOSSBATTLELITTLE) { builder.AddLong(60, wORLDBOSSBATTLELITTLE, 0); }
  public static void AddWORLDBOSSBATTLEMIDDLE(FlatBufferBuilder builder, long wORLDBOSSBATTLEMIDDLE) { builder.AddLong(61, wORLDBOSSBATTLEMIDDLE, 0); }
  public static void AddWORLDBOSSBATTLEHIGH(FlatBufferBuilder builder, long wORLDBOSSBATTLEHIGH) { builder.AddLong(62, wORLDBOSSBATTLEHIGH, 0); }
  public static void AddWORLDBOSSBATTLEVERYHIGH(FlatBufferBuilder builder, long wORLDBOSSBATTLEVERYHIGH) { builder.AddLong(63, wORLDBOSSBATTLEVERYHIGH, 0); }
  public static void AddWorldRaidAutoSyncTermSecond(FlatBufferBuilder builder, long worldRaidAutoSyncTermSecond) { builder.AddLong(64, worldRaidAutoSyncTermSecond, 0); }
  public static void AddWorldRaidBossHpDecreaseTerm(FlatBufferBuilder builder, long worldRaidBossHpDecreaseTerm) { builder.AddLong(65, worldRaidBossHpDecreaseTerm, 0); }
  public static void AddWorldRaidBossParcelReactionDelay(FlatBufferBuilder builder, long worldRaidBossParcelReactionDelay) { builder.AddLong(66, worldRaidBossParcelReactionDelay, 0); }
  public static void AddRaidRankingJumpMinimumWaitingTime(FlatBufferBuilder builder, long raidRankingJumpMinimumWaitingTime) { builder.AddLong(67, raidRankingJumpMinimumWaitingTime, 0); }
  public static void AddEffectTeleportDistance(FlatBufferBuilder builder, float effectTeleportDistance) { builder.AddFloat(68, effectTeleportDistance, 0.0f); }
  public static void AddAuraExitThresholdMargin(FlatBufferBuilder builder, long auraExitThresholdMargin) { builder.AddLong(69, auraExitThresholdMargin, 0); }
  public static void AddTSAInteractionDamageFactor(FlatBufferBuilder builder, long tSAInteractionDamageFactor) { builder.AddLong(70, tSAInteractionDamageFactor, 0); }
  public static void AddVictoryInteractionRate(FlatBufferBuilder builder, long victoryInteractionRate) { builder.AddLong(71, victoryInteractionRate, 0); }
  public static void AddEchelonExtensionEngageTimelinePath(FlatBufferBuilder builder, StringOffset echelonExtensionEngageTimelinePathOffset) { builder.AddOffset(72, echelonExtensionEngageTimelinePathOffset.Value, 0); }
  public static void AddEchelonExtensionEngageWithSupporterTimelinePath(FlatBufferBuilder builder, StringOffset echelonExtensionEngageWithSupporterTimelinePathOffset) { builder.AddOffset(73, echelonExtensionEngageWithSupporterTimelinePathOffset.Value, 0); }
  public static void AddEchelonExtensionVictoryTimelinePath(FlatBufferBuilder builder, StringOffset echelonExtensionVictoryTimelinePathOffset) { builder.AddOffset(74, echelonExtensionVictoryTimelinePathOffset.Value, 0); }
  public static void AddEchelonExtensionEchelonMaxCommonCost(FlatBufferBuilder builder, int echelonExtensionEchelonMaxCommonCost) { builder.AddInt(75, echelonExtensionEchelonMaxCommonCost, 0); }
  public static void AddEchelonMaxOverloadCost(FlatBufferBuilder builder, long echelonMaxOverloadCost) { builder.AddLong(76, echelonMaxOverloadCost, 0); }
  public static void AddEchelonExtensionMaxOverloadCost(FlatBufferBuilder builder, long echelonExtensionMaxOverloadCost) { builder.AddLong(77, echelonExtensionMaxOverloadCost, 0); }
  public static void AddEchelonExtensionEchelonInitCommonCost(FlatBufferBuilder builder, int echelonExtensionEchelonInitCommonCost) { builder.AddInt(78, echelonExtensionEchelonInitCommonCost, 0); }
  public static void AddEchelonExtensionCostRegenRatio(FlatBufferBuilder builder, long echelonExtensionCostRegenRatio) { builder.AddLong(79, echelonExtensionCostRegenRatio, 0); }
  public static void AddEchelonOverloadCostRegenRatio(FlatBufferBuilder builder, long echelonOverloadCostRegenRatio) { builder.AddLong(80, echelonOverloadCostRegenRatio, 0); }
  public static void AddEchelonExtensionOverloadCostRegenRatio(FlatBufferBuilder builder, long echelonExtensionOverloadCostRegenRatio) { builder.AddLong(81, echelonExtensionOverloadCostRegenRatio, 0); }
  public static void AddCheckCheaterMaxUseCostMultiFloorRaid(FlatBufferBuilder builder, int checkCheaterMaxUseCostMultiFloorRaid) { builder.AddInt(82, checkCheaterMaxUseCostMultiFloorRaid, 0); }
  public static void AddExcessiveTouchCheckTime(FlatBufferBuilder builder, float excessiveTouchCheckTime) { builder.AddFloat(83, excessiveTouchCheckTime, 0.0f); }
  public static void AddExcessiveTouchCheckCount(FlatBufferBuilder builder, int excessiveTouchCheckCount) { builder.AddInt(84, excessiveTouchCheckCount, 0); }
  public static void AddCampaignAlertPopupLevelGap(FlatBufferBuilder builder, int campaignAlertPopupLevelGap) { builder.AddInt(85, campaignAlertPopupLevelGap, 0); }
  public static void AddMoveCorrectionSkipRatio(FlatBufferBuilder builder, int moveCorrectionSkipRatio) { builder.AddInt(86, moveCorrectionSkipRatio, 0); }
  public static Offset<Japan.ConstCombatExcel> EndConstCombatExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.ConstCombatExcel>(o);
  }
  public ConstCombatExcelT UnPack() {
    var _o = new ConstCombatExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstCombatExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstCombat");
    _o.SkillHandCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.SkillHandCount, key) : this.SkillHandCount;
    _o.DyingTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DyingTime, key) : this.DyingTime;
    _o.BuffIconBlinkTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BuffIconBlinkTime, key) : this.BuffIconBlinkTime;
    _o.ShowBufficonEXSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowBufficonEXSkill, key) : this.ShowBufficonEXSkill;
    _o.ShowBufficonPassiveSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowBufficonPassiveSkill, key) : this.ShowBufficonPassiveSkill;
    _o.ShowBufficonExtraPassiveSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowBufficonExtraPassiveSkill, key) : this.ShowBufficonExtraPassiveSkill;
    _o.ShowBufficonLeaderSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowBufficonLeaderSkill, key) : this.ShowBufficonLeaderSkill;
    _o.ShowBufficonGroundPassiveSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowBufficonGroundPassiveSkill, key) : this.ShowBufficonGroundPassiveSkill;
    _o.SuppliesConditionStringId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SuppliesConditionStringId, key) : this.SuppliesConditionStringId;
    _o.PublicSpeechBubbleOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.PublicSpeechBubbleOffsetX, key) : this.PublicSpeechBubbleOffsetX;
    _o.PublicSpeechBubbleOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.PublicSpeechBubbleOffsetY, key) : this.PublicSpeechBubbleOffsetY;
    _o.PublicSpeechBubbleOffsetZ = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.PublicSpeechBubbleOffsetZ, key) : this.PublicSpeechBubbleOffsetZ;
    _o.ShowRaidListCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ShowRaidListCount, key) : this.ShowRaidListCount;
    _o.MaxRaidTicketCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaxRaidTicketCount, key) : this.MaxRaidTicketCount;
    _o.MaxRaidBossSkillSlot = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaxRaidBossSkillSlot, key) : this.MaxRaidBossSkillSlot;
    _o.EngageTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EngageTimelinePath, key) : this.EngageTimelinePath;
    _o.EngageWithSupporterTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EngageWithSupporterTimelinePath, key) : this.EngageWithSupporterTimelinePath;
    _o.VictoryTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.VictoryTimelinePath, key) : this.VictoryTimelinePath;
    _o.TimeLimitAlarm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TimeLimitAlarm, key) : this.TimeLimitAlarm;
    _o.EchelonMaxCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EchelonMaxCommonCost, key) : this.EchelonMaxCommonCost;
    _o.EchelonInitCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EchelonInitCommonCost, key) : this.EchelonInitCommonCost;
    _o.SkillSlotCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SkillSlotCoolTime, key) : this.SkillSlotCoolTime;
    _o.EnemyRegenCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemyRegenCost, key) : this.EnemyRegenCost;
    _o.ChampionRegenCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ChampionRegenCost, key) : this.ChampionRegenCost;
    _o.PlayerRegenCostDelay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerRegenCostDelay, key) : this.PlayerRegenCostDelay;
    _o.CrowdControlFactor = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CrowdControlFactor, key) : this.CrowdControlFactor;
    _o.RaidOpenScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.RaidOpenScenarioId, key) : this.RaidOpenScenarioId;
    _o.EliminateRaidOpenScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EliminateRaidOpenScenarioId, key) : this.EliminateRaidOpenScenarioId;
    _o.DefenceConstA = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefenceConstA, key) : this.DefenceConstA;
    _o.DefenceConstB = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefenceConstB, key) : this.DefenceConstB;
    _o.DefenceConstC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefenceConstC, key) : this.DefenceConstC;
    _o.DefenceConstD = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefenceConstD, key) : this.DefenceConstD;
    _o.AccuracyConstA = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccuracyConstA, key) : this.AccuracyConstA;
    _o.AccuracyConstB = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccuracyConstB, key) : this.AccuracyConstB;
    _o.AccuracyConstC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccuracyConstC, key) : this.AccuracyConstC;
    _o.AccuracyConstD = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccuracyConstD, key) : this.AccuracyConstD;
    _o.CriticalConstA = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalConstA, key) : this.CriticalConstA;
    _o.CriticalConstB = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalConstB, key) : this.CriticalConstB;
    _o.CriticalConstC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalConstC, key) : this.CriticalConstC;
    _o.CriticalConstD = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalConstD, key) : this.CriticalConstD;
    _o.MaxGroupBuffLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxGroupBuffLevel, key) : this.MaxGroupBuffLevel;
    _o.EmojiDefaultTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EmojiDefaultTime, key) : this.EmojiDefaultTime;
    _o.TimeLineActionRotateSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TimeLineActionRotateSpeed, key) : this.TimeLineActionRotateSpeed;
    _o.BodyRotateSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BodyRotateSpeed, key) : this.BodyRotateSpeed;
    _o.NormalTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.NormalTimeScale, key) : this.NormalTimeScale;
    _o.FastTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FastTimeScale, key) : this.FastTimeScale;
    _o.BulletTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BulletTimeScale, key) : this.BulletTimeScale;
    _o.UIDisplayDelayAfterSkillCutIn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UIDisplayDelayAfterSkillCutIn, key) : this.UIDisplayDelayAfterSkillCutIn;
    _o.UseInitialRangeForCoverMove = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UseInitialRangeForCoverMove, key) : this.UseInitialRangeForCoverMove;
    _o.SlowTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SlowTimeScale, key) : this.SlowTimeScale;
    _o.AimIKMinDegree = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.AimIKMinDegree, key) : this.AimIKMinDegree;
    _o.AimIKMaxDegree = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.AimIKMaxDegree, key) : this.AimIKMaxDegree;
    _o.MinimumClearTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MinimumClearTime, key) : this.MinimumClearTime;
    _o.MinimumClearLevelGap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MinimumClearLevelGap, key) : this.MinimumClearLevelGap;
    _o.CheckCheaterMaxUseCostNonArena = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CheckCheaterMaxUseCostNonArena, key) : this.CheckCheaterMaxUseCostNonArena;
    _o.CheckCheaterMaxUseCostArena = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CheckCheaterMaxUseCostArena, key) : this.CheckCheaterMaxUseCostArena;
    _o.AllowedMaxTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AllowedMaxTimeScale, key) : this.AllowedMaxTimeScale;
    _o.RandomAnimationOutput = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RandomAnimationOutput, key) : this.RandomAnimationOutput;
    _o.SummonedTeleportDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SummonedTeleportDistance, key) : this.SummonedTeleportDistance;
    _o.ArenaMinimumClearTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ArenaMinimumClearTime, key) : this.ArenaMinimumClearTime;
    _o.WORLDBOSSBATTLELITTLE = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.WORLDBOSSBATTLELITTLE, key) : this.WORLDBOSSBATTLELITTLE;
    _o.WORLDBOSSBATTLEMIDDLE = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.WORLDBOSSBATTLEMIDDLE, key) : this.WORLDBOSSBATTLEMIDDLE;
    _o.WORLDBOSSBATTLEHIGH = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.WORLDBOSSBATTLEHIGH, key) : this.WORLDBOSSBATTLEHIGH;
    _o.WORLDBOSSBATTLEVERYHIGH = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.WORLDBOSSBATTLEVERYHIGH, key) : this.WORLDBOSSBATTLEVERYHIGH;
    _o.WorldRaidAutoSyncTermSecond = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.WorldRaidAutoSyncTermSecond, key) : this.WorldRaidAutoSyncTermSecond;
    _o.WorldRaidBossHpDecreaseTerm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.WorldRaidBossHpDecreaseTerm, key) : this.WorldRaidBossHpDecreaseTerm;
    _o.WorldRaidBossParcelReactionDelay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.WorldRaidBossParcelReactionDelay, key) : this.WorldRaidBossParcelReactionDelay;
    _o.RaidRankingJumpMinimumWaitingTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RaidRankingJumpMinimumWaitingTime, key) : this.RaidRankingJumpMinimumWaitingTime;
    _o.EffectTeleportDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.EffectTeleportDistance, key) : this.EffectTeleportDistance;
    _o.AuraExitThresholdMargin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AuraExitThresholdMargin, key) : this.AuraExitThresholdMargin;
    _o.TSAInteractionDamageFactor = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TSAInteractionDamageFactor, key) : this.TSAInteractionDamageFactor;
    _o.VictoryInteractionRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.VictoryInteractionRate, key) : this.VictoryInteractionRate;
    _o.EchelonExtensionEngageTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EchelonExtensionEngageTimelinePath, key) : this.EchelonExtensionEngageTimelinePath;
    _o.EchelonExtensionEngageWithSupporterTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EchelonExtensionEngageWithSupporterTimelinePath, key) : this.EchelonExtensionEngageWithSupporterTimelinePath;
    _o.EchelonExtensionVictoryTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EchelonExtensionVictoryTimelinePath, key) : this.EchelonExtensionVictoryTimelinePath;
    _o.EchelonExtensionEchelonMaxCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EchelonExtensionEchelonMaxCommonCost, key) : this.EchelonExtensionEchelonMaxCommonCost;
    _o.EchelonMaxOverloadCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EchelonMaxOverloadCost, key) : this.EchelonMaxOverloadCost;
    _o.EchelonExtensionMaxOverloadCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EchelonExtensionMaxOverloadCost, key) : this.EchelonExtensionMaxOverloadCost;
    _o.EchelonExtensionEchelonInitCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EchelonExtensionEchelonInitCommonCost, key) : this.EchelonExtensionEchelonInitCommonCost;
    _o.EchelonExtensionCostRegenRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EchelonExtensionCostRegenRatio, key) : this.EchelonExtensionCostRegenRatio;
    _o.EchelonOverloadCostRegenRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EchelonOverloadCostRegenRatio, key) : this.EchelonOverloadCostRegenRatio;
    _o.EchelonExtensionOverloadCostRegenRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EchelonExtensionOverloadCostRegenRatio, key) : this.EchelonExtensionOverloadCostRegenRatio;
    _o.CheckCheaterMaxUseCostMultiFloorRaid = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CheckCheaterMaxUseCostMultiFloorRaid, key) : this.CheckCheaterMaxUseCostMultiFloorRaid;
    _o.ExcessiveTouchCheckTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ExcessiveTouchCheckTime, key) : this.ExcessiveTouchCheckTime;
    _o.ExcessiveTouchCheckCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ExcessiveTouchCheckCount, key) : this.ExcessiveTouchCheckCount;
    _o.CampaignAlertPopupLevelGap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CampaignAlertPopupLevelGap, key) : this.CampaignAlertPopupLevelGap;
    _o.MoveCorrectionSkipRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MoveCorrectionSkipRatio, key) : this.MoveCorrectionSkipRatio;
  }
  public static Offset<Japan.ConstCombatExcel> Pack(FlatBufferBuilder builder, ConstCombatExcelT _o) {
    if (_o == null) return default(Offset<Japan.ConstCombatExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConstCombat");
		var _SkillHandCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.SkillHandCount, key) : _o.SkillHandCount;
		var _DyingTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DyingTime, key) : _o.DyingTime;
		var _BuffIconBlinkTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.BuffIconBlinkTime, key) : _o.BuffIconBlinkTime;
		var _ShowBufficonEXSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowBufficonEXSkill, key) : _o.ShowBufficonEXSkill;
		var _ShowBufficonPassiveSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowBufficonPassiveSkill, key) : _o.ShowBufficonPassiveSkill;
		var _ShowBufficonExtraPassiveSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowBufficonExtraPassiveSkill, key) : _o.ShowBufficonExtraPassiveSkill;
		var _ShowBufficonLeaderSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowBufficonLeaderSkill, key) : _o.ShowBufficonLeaderSkill;
		var _ShowBufficonGroundPassiveSkill = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowBufficonGroundPassiveSkill, key) : _o.ShowBufficonGroundPassiveSkill;
    var _SuppliesConditionStringId = _o.SuppliesConditionStringId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SuppliesConditionStringId, key) : _o.SuppliesConditionStringId));
		var _PublicSpeechBubbleOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.PublicSpeechBubbleOffsetX, key) : _o.PublicSpeechBubbleOffsetX;
		var _PublicSpeechBubbleOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.PublicSpeechBubbleOffsetY, key) : _o.PublicSpeechBubbleOffsetY;
		var _PublicSpeechBubbleOffsetZ = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.PublicSpeechBubbleOffsetZ, key) : _o.PublicSpeechBubbleOffsetZ;
		var _ShowRaidListCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ShowRaidListCount, key) : _o.ShowRaidListCount;
		var _MaxRaidTicketCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaxRaidTicketCount, key) : _o.MaxRaidTicketCount;
		var _MaxRaidBossSkillSlot = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaxRaidBossSkillSlot, key) : _o.MaxRaidBossSkillSlot;
    var _EngageTimelinePath = _o.EngageTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EngageTimelinePath, key) : _o.EngageTimelinePath));
    var _EngageWithSupporterTimelinePath = _o.EngageWithSupporterTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EngageWithSupporterTimelinePath, key) : _o.EngageWithSupporterTimelinePath));
    var _VictoryTimelinePath = _o.VictoryTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.VictoryTimelinePath, key) : _o.VictoryTimelinePath));
		var _TimeLimitAlarm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TimeLimitAlarm, key) : _o.TimeLimitAlarm;
		var _EchelonMaxCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EchelonMaxCommonCost, key) : _o.EchelonMaxCommonCost;
		var _EchelonInitCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EchelonInitCommonCost, key) : _o.EchelonInitCommonCost;
		var _SkillSlotCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SkillSlotCoolTime, key) : _o.SkillSlotCoolTime;
		var _EnemyRegenCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemyRegenCost, key) : _o.EnemyRegenCost;
		var _ChampionRegenCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ChampionRegenCost, key) : _o.ChampionRegenCost;
		var _PlayerRegenCostDelay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerRegenCostDelay, key) : _o.PlayerRegenCostDelay;
		var _CrowdControlFactor = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CrowdControlFactor, key) : _o.CrowdControlFactor;
    var _RaidOpenScenarioId = _o.RaidOpenScenarioId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.RaidOpenScenarioId, key) : _o.RaidOpenScenarioId));
    var _EliminateRaidOpenScenarioId = _o.EliminateRaidOpenScenarioId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EliminateRaidOpenScenarioId, key) : _o.EliminateRaidOpenScenarioId));
		var _DefenceConstA = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefenceConstA, key) : _o.DefenceConstA;
		var _DefenceConstB = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefenceConstB, key) : _o.DefenceConstB;
		var _DefenceConstC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefenceConstC, key) : _o.DefenceConstC;
		var _DefenceConstD = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefenceConstD, key) : _o.DefenceConstD;
		var _AccuracyConstA = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccuracyConstA, key) : _o.AccuracyConstA;
		var _AccuracyConstB = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccuracyConstB, key) : _o.AccuracyConstB;
		var _AccuracyConstC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccuracyConstC, key) : _o.AccuracyConstC;
		var _AccuracyConstD = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccuracyConstD, key) : _o.AccuracyConstD;
		var _CriticalConstA = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalConstA, key) : _o.CriticalConstA;
		var _CriticalConstB = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalConstB, key) : _o.CriticalConstB;
		var _CriticalConstC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalConstC, key) : _o.CriticalConstC;
		var _CriticalConstD = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalConstD, key) : _o.CriticalConstD;
		var _MaxGroupBuffLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxGroupBuffLevel, key) : _o.MaxGroupBuffLevel;
		var _EmojiDefaultTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EmojiDefaultTime, key) : _o.EmojiDefaultTime;
		var _TimeLineActionRotateSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TimeLineActionRotateSpeed, key) : _o.TimeLineActionRotateSpeed;
		var _BodyRotateSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BodyRotateSpeed, key) : _o.BodyRotateSpeed;
		var _NormalTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.NormalTimeScale, key) : _o.NormalTimeScale;
		var _FastTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FastTimeScale, key) : _o.FastTimeScale;
		var _BulletTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BulletTimeScale, key) : _o.BulletTimeScale;
		var _UIDisplayDelayAfterSkillCutIn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UIDisplayDelayAfterSkillCutIn, key) : _o.UIDisplayDelayAfterSkillCutIn;
		var _UseInitialRangeForCoverMove = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UseInitialRangeForCoverMove, key) : _o.UseInitialRangeForCoverMove;
		var _SlowTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SlowTimeScale, key) : _o.SlowTimeScale;
		var _AimIKMinDegree = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.AimIKMinDegree, key) : _o.AimIKMinDegree;
		var _AimIKMaxDegree = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.AimIKMaxDegree, key) : _o.AimIKMaxDegree;
		var _MinimumClearTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MinimumClearTime, key) : _o.MinimumClearTime;
		var _MinimumClearLevelGap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MinimumClearLevelGap, key) : _o.MinimumClearLevelGap;
		var _CheckCheaterMaxUseCostNonArena = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CheckCheaterMaxUseCostNonArena, key) : _o.CheckCheaterMaxUseCostNonArena;
		var _CheckCheaterMaxUseCostArena = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CheckCheaterMaxUseCostArena, key) : _o.CheckCheaterMaxUseCostArena;
		var _AllowedMaxTimeScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AllowedMaxTimeScale, key) : _o.AllowedMaxTimeScale;
		var _RandomAnimationOutput = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RandomAnimationOutput, key) : _o.RandomAnimationOutput;
		var _SummonedTeleportDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SummonedTeleportDistance, key) : _o.SummonedTeleportDistance;
		var _ArenaMinimumClearTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ArenaMinimumClearTime, key) : _o.ArenaMinimumClearTime;
		var _WORLDBOSSBATTLELITTLE = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.WORLDBOSSBATTLELITTLE, key) : _o.WORLDBOSSBATTLELITTLE;
		var _WORLDBOSSBATTLEMIDDLE = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.WORLDBOSSBATTLEMIDDLE, key) : _o.WORLDBOSSBATTLEMIDDLE;
		var _WORLDBOSSBATTLEHIGH = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.WORLDBOSSBATTLEHIGH, key) : _o.WORLDBOSSBATTLEHIGH;
		var _WORLDBOSSBATTLEVERYHIGH = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.WORLDBOSSBATTLEVERYHIGH, key) : _o.WORLDBOSSBATTLEVERYHIGH;
		var _WorldRaidAutoSyncTermSecond = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.WorldRaidAutoSyncTermSecond, key) : _o.WorldRaidAutoSyncTermSecond;
		var _WorldRaidBossHpDecreaseTerm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.WorldRaidBossHpDecreaseTerm, key) : _o.WorldRaidBossHpDecreaseTerm;
		var _WorldRaidBossParcelReactionDelay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.WorldRaidBossParcelReactionDelay, key) : _o.WorldRaidBossParcelReactionDelay;
		var _RaidRankingJumpMinimumWaitingTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RaidRankingJumpMinimumWaitingTime, key) : _o.RaidRankingJumpMinimumWaitingTime;
		var _EffectTeleportDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.EffectTeleportDistance, key) : _o.EffectTeleportDistance;
		var _AuraExitThresholdMargin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AuraExitThresholdMargin, key) : _o.AuraExitThresholdMargin;
		var _TSAInteractionDamageFactor = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TSAInteractionDamageFactor, key) : _o.TSAInteractionDamageFactor;
		var _VictoryInteractionRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.VictoryInteractionRate, key) : _o.VictoryInteractionRate;
    var _EchelonExtensionEngageTimelinePath = _o.EchelonExtensionEngageTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EchelonExtensionEngageTimelinePath, key) : _o.EchelonExtensionEngageTimelinePath));
    var _EchelonExtensionEngageWithSupporterTimelinePath = _o.EchelonExtensionEngageWithSupporterTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EchelonExtensionEngageWithSupporterTimelinePath, key) : _o.EchelonExtensionEngageWithSupporterTimelinePath));
    var _EchelonExtensionVictoryTimelinePath = _o.EchelonExtensionVictoryTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EchelonExtensionVictoryTimelinePath, key) : _o.EchelonExtensionVictoryTimelinePath));
		var _EchelonExtensionEchelonMaxCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EchelonExtensionEchelonMaxCommonCost, key) : _o.EchelonExtensionEchelonMaxCommonCost;
		var _EchelonMaxOverloadCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EchelonMaxOverloadCost, key) : _o.EchelonMaxOverloadCost;
		var _EchelonExtensionMaxOverloadCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EchelonExtensionMaxOverloadCost, key) : _o.EchelonExtensionMaxOverloadCost;
		var _EchelonExtensionEchelonInitCommonCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EchelonExtensionEchelonInitCommonCost, key) : _o.EchelonExtensionEchelonInitCommonCost;
		var _EchelonExtensionCostRegenRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EchelonExtensionCostRegenRatio, key) : _o.EchelonExtensionCostRegenRatio;
		var _EchelonOverloadCostRegenRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EchelonOverloadCostRegenRatio, key) : _o.EchelonOverloadCostRegenRatio;
		var _EchelonExtensionOverloadCostRegenRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EchelonExtensionOverloadCostRegenRatio, key) : _o.EchelonExtensionOverloadCostRegenRatio;
		var _CheckCheaterMaxUseCostMultiFloorRaid = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CheckCheaterMaxUseCostMultiFloorRaid, key) : _o.CheckCheaterMaxUseCostMultiFloorRaid;
		var _ExcessiveTouchCheckTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ExcessiveTouchCheckTime, key) : _o.ExcessiveTouchCheckTime;
		var _ExcessiveTouchCheckCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ExcessiveTouchCheckCount, key) : _o.ExcessiveTouchCheckCount;
		var _CampaignAlertPopupLevelGap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CampaignAlertPopupLevelGap, key) : _o.CampaignAlertPopupLevelGap;
		var _MoveCorrectionSkipRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MoveCorrectionSkipRatio, key) : _o.MoveCorrectionSkipRatio;
    return CreateConstCombatExcel(
      builder,
      TableEncryptionService.UseEncryption ? _SkillHandCount : _o.SkillHandCount,
      TableEncryptionService.UseEncryption ? _DyingTime : _o.DyingTime,
      TableEncryptionService.UseEncryption ? _BuffIconBlinkTime : _o.BuffIconBlinkTime,
      TableEncryptionService.UseEncryption ? _ShowBufficonEXSkill : _o.ShowBufficonEXSkill,
      TableEncryptionService.UseEncryption ? _ShowBufficonPassiveSkill : _o.ShowBufficonPassiveSkill,
      TableEncryptionService.UseEncryption ? _ShowBufficonExtraPassiveSkill : _o.ShowBufficonExtraPassiveSkill,
      TableEncryptionService.UseEncryption ? _ShowBufficonLeaderSkill : _o.ShowBufficonLeaderSkill,
      TableEncryptionService.UseEncryption ? _ShowBufficonGroundPassiveSkill : _o.ShowBufficonGroundPassiveSkill,
      _SuppliesConditionStringId,
      TableEncryptionService.UseEncryption ? _PublicSpeechBubbleOffsetX : _o.PublicSpeechBubbleOffsetX,
      TableEncryptionService.UseEncryption ? _PublicSpeechBubbleOffsetY : _o.PublicSpeechBubbleOffsetY,
      TableEncryptionService.UseEncryption ? _PublicSpeechBubbleOffsetZ : _o.PublicSpeechBubbleOffsetZ,
      TableEncryptionService.UseEncryption ? _ShowRaidListCount : _o.ShowRaidListCount,
      TableEncryptionService.UseEncryption ? _MaxRaidTicketCount : _o.MaxRaidTicketCount,
      TableEncryptionService.UseEncryption ? _MaxRaidBossSkillSlot : _o.MaxRaidBossSkillSlot,
      _EngageTimelinePath,
      _EngageWithSupporterTimelinePath,
      _VictoryTimelinePath,
      TableEncryptionService.UseEncryption ? _TimeLimitAlarm : _o.TimeLimitAlarm,
      TableEncryptionService.UseEncryption ? _EchelonMaxCommonCost : _o.EchelonMaxCommonCost,
      TableEncryptionService.UseEncryption ? _EchelonInitCommonCost : _o.EchelonInitCommonCost,
      TableEncryptionService.UseEncryption ? _SkillSlotCoolTime : _o.SkillSlotCoolTime,
      TableEncryptionService.UseEncryption ? _EnemyRegenCost : _o.EnemyRegenCost,
      TableEncryptionService.UseEncryption ? _ChampionRegenCost : _o.ChampionRegenCost,
      TableEncryptionService.UseEncryption ? _PlayerRegenCostDelay : _o.PlayerRegenCostDelay,
      TableEncryptionService.UseEncryption ? _CrowdControlFactor : _o.CrowdControlFactor,
      _RaidOpenScenarioId,
      _EliminateRaidOpenScenarioId,
      TableEncryptionService.UseEncryption ? _DefenceConstA : _o.DefenceConstA,
      TableEncryptionService.UseEncryption ? _DefenceConstB : _o.DefenceConstB,
      TableEncryptionService.UseEncryption ? _DefenceConstC : _o.DefenceConstC,
      TableEncryptionService.UseEncryption ? _DefenceConstD : _o.DefenceConstD,
      TableEncryptionService.UseEncryption ? _AccuracyConstA : _o.AccuracyConstA,
      TableEncryptionService.UseEncryption ? _AccuracyConstB : _o.AccuracyConstB,
      TableEncryptionService.UseEncryption ? _AccuracyConstC : _o.AccuracyConstC,
      TableEncryptionService.UseEncryption ? _AccuracyConstD : _o.AccuracyConstD,
      TableEncryptionService.UseEncryption ? _CriticalConstA : _o.CriticalConstA,
      TableEncryptionService.UseEncryption ? _CriticalConstB : _o.CriticalConstB,
      TableEncryptionService.UseEncryption ? _CriticalConstC : _o.CriticalConstC,
      TableEncryptionService.UseEncryption ? _CriticalConstD : _o.CriticalConstD,
      TableEncryptionService.UseEncryption ? _MaxGroupBuffLevel : _o.MaxGroupBuffLevel,
      TableEncryptionService.UseEncryption ? _EmojiDefaultTime : _o.EmojiDefaultTime,
      TableEncryptionService.UseEncryption ? _TimeLineActionRotateSpeed : _o.TimeLineActionRotateSpeed,
      TableEncryptionService.UseEncryption ? _BodyRotateSpeed : _o.BodyRotateSpeed,
      TableEncryptionService.UseEncryption ? _NormalTimeScale : _o.NormalTimeScale,
      TableEncryptionService.UseEncryption ? _FastTimeScale : _o.FastTimeScale,
      TableEncryptionService.UseEncryption ? _BulletTimeScale : _o.BulletTimeScale,
      TableEncryptionService.UseEncryption ? _UIDisplayDelayAfterSkillCutIn : _o.UIDisplayDelayAfterSkillCutIn,
      TableEncryptionService.UseEncryption ? _UseInitialRangeForCoverMove : _o.UseInitialRangeForCoverMove,
      TableEncryptionService.UseEncryption ? _SlowTimeScale : _o.SlowTimeScale,
      TableEncryptionService.UseEncryption ? _AimIKMinDegree : _o.AimIKMinDegree,
      TableEncryptionService.UseEncryption ? _AimIKMaxDegree : _o.AimIKMaxDegree,
      TableEncryptionService.UseEncryption ? _MinimumClearTime : _o.MinimumClearTime,
      TableEncryptionService.UseEncryption ? _MinimumClearLevelGap : _o.MinimumClearLevelGap,
      TableEncryptionService.UseEncryption ? _CheckCheaterMaxUseCostNonArena : _o.CheckCheaterMaxUseCostNonArena,
      TableEncryptionService.UseEncryption ? _CheckCheaterMaxUseCostArena : _o.CheckCheaterMaxUseCostArena,
      TableEncryptionService.UseEncryption ? _AllowedMaxTimeScale : _o.AllowedMaxTimeScale,
      TableEncryptionService.UseEncryption ? _RandomAnimationOutput : _o.RandomAnimationOutput,
      TableEncryptionService.UseEncryption ? _SummonedTeleportDistance : _o.SummonedTeleportDistance,
      TableEncryptionService.UseEncryption ? _ArenaMinimumClearTime : _o.ArenaMinimumClearTime,
      TableEncryptionService.UseEncryption ? _WORLDBOSSBATTLELITTLE : _o.WORLDBOSSBATTLELITTLE,
      TableEncryptionService.UseEncryption ? _WORLDBOSSBATTLEMIDDLE : _o.WORLDBOSSBATTLEMIDDLE,
      TableEncryptionService.UseEncryption ? _WORLDBOSSBATTLEHIGH : _o.WORLDBOSSBATTLEHIGH,
      TableEncryptionService.UseEncryption ? _WORLDBOSSBATTLEVERYHIGH : _o.WORLDBOSSBATTLEVERYHIGH,
      TableEncryptionService.UseEncryption ? _WorldRaidAutoSyncTermSecond : _o.WorldRaidAutoSyncTermSecond,
      TableEncryptionService.UseEncryption ? _WorldRaidBossHpDecreaseTerm : _o.WorldRaidBossHpDecreaseTerm,
      TableEncryptionService.UseEncryption ? _WorldRaidBossParcelReactionDelay : _o.WorldRaidBossParcelReactionDelay,
      TableEncryptionService.UseEncryption ? _RaidRankingJumpMinimumWaitingTime : _o.RaidRankingJumpMinimumWaitingTime,
      TableEncryptionService.UseEncryption ? _EffectTeleportDistance : _o.EffectTeleportDistance,
      TableEncryptionService.UseEncryption ? _AuraExitThresholdMargin : _o.AuraExitThresholdMargin,
      TableEncryptionService.UseEncryption ? _TSAInteractionDamageFactor : _o.TSAInteractionDamageFactor,
      TableEncryptionService.UseEncryption ? _VictoryInteractionRate : _o.VictoryInteractionRate,
      _EchelonExtensionEngageTimelinePath,
      _EchelonExtensionEngageWithSupporterTimelinePath,
      _EchelonExtensionVictoryTimelinePath,
      TableEncryptionService.UseEncryption ? _EchelonExtensionEchelonMaxCommonCost : _o.EchelonExtensionEchelonMaxCommonCost,
      TableEncryptionService.UseEncryption ? _EchelonMaxOverloadCost : _o.EchelonMaxOverloadCost,
      TableEncryptionService.UseEncryption ? _EchelonExtensionMaxOverloadCost : _o.EchelonExtensionMaxOverloadCost,
      TableEncryptionService.UseEncryption ? _EchelonExtensionEchelonInitCommonCost : _o.EchelonExtensionEchelonInitCommonCost,
      TableEncryptionService.UseEncryption ? _EchelonExtensionCostRegenRatio : _o.EchelonExtensionCostRegenRatio,
      TableEncryptionService.UseEncryption ? _EchelonOverloadCostRegenRatio : _o.EchelonOverloadCostRegenRatio,
      TableEncryptionService.UseEncryption ? _EchelonExtensionOverloadCostRegenRatio : _o.EchelonExtensionOverloadCostRegenRatio,
      TableEncryptionService.UseEncryption ? _CheckCheaterMaxUseCostMultiFloorRaid : _o.CheckCheaterMaxUseCostMultiFloorRaid,
      TableEncryptionService.UseEncryption ? _ExcessiveTouchCheckTime : _o.ExcessiveTouchCheckTime,
      TableEncryptionService.UseEncryption ? _ExcessiveTouchCheckCount : _o.ExcessiveTouchCheckCount,
      TableEncryptionService.UseEncryption ? _CampaignAlertPopupLevelGap : _o.CampaignAlertPopupLevelGap,
      TableEncryptionService.UseEncryption ? _MoveCorrectionSkipRatio : _o.MoveCorrectionSkipRatio);
  }
}

public class ConstCombatExcelT
{
  public int SkillHandCount { get; set; }
  public int DyingTime { get; set; }
  public int BuffIconBlinkTime { get; set; }
  public bool ShowBufficonEXSkill { get; set; }
  public bool ShowBufficonPassiveSkill { get; set; }
  public bool ShowBufficonExtraPassiveSkill { get; set; }
  public bool ShowBufficonLeaderSkill { get; set; }
  public bool ShowBufficonGroundPassiveSkill { get; set; }
  public string SuppliesConditionStringId { get; set; }
  public float PublicSpeechBubbleOffsetX { get; set; }
  public float PublicSpeechBubbleOffsetY { get; set; }
  public float PublicSpeechBubbleOffsetZ { get; set; }
  public int ShowRaidListCount { get; set; }
  public long MaxRaidTicketCount { get; set; }
  public long MaxRaidBossSkillSlot { get; set; }
  public string EngageTimelinePath { get; set; }
  public string EngageWithSupporterTimelinePath { get; set; }
  public string VictoryTimelinePath { get; set; }
  public long TimeLimitAlarm { get; set; }
  public int EchelonMaxCommonCost { get; set; }
  public int EchelonInitCommonCost { get; set; }
  public long SkillSlotCoolTime { get; set; }
  public long EnemyRegenCost { get; set; }
  public long ChampionRegenCost { get; set; }
  public long PlayerRegenCostDelay { get; set; }
  public long CrowdControlFactor { get; set; }
  public string RaidOpenScenarioId { get; set; }
  public string EliminateRaidOpenScenarioId { get; set; }
  public long DefenceConstA { get; set; }
  public long DefenceConstB { get; set; }
  public long DefenceConstC { get; set; }
  public long DefenceConstD { get; set; }
  public long AccuracyConstA { get; set; }
  public long AccuracyConstB { get; set; }
  public long AccuracyConstC { get; set; }
  public long AccuracyConstD { get; set; }
  public long CriticalConstA { get; set; }
  public long CriticalConstB { get; set; }
  public long CriticalConstC { get; set; }
  public long CriticalConstD { get; set; }
  public int MaxGroupBuffLevel { get; set; }
  public int EmojiDefaultTime { get; set; }
  public long TimeLineActionRotateSpeed { get; set; }
  public long BodyRotateSpeed { get; set; }
  public long NormalTimeScale { get; set; }
  public long FastTimeScale { get; set; }
  public long BulletTimeScale { get; set; }
  public long UIDisplayDelayAfterSkillCutIn { get; set; }
  public bool UseInitialRangeForCoverMove { get; set; }
  public long SlowTimeScale { get; set; }
  public float AimIKMinDegree { get; set; }
  public float AimIKMaxDegree { get; set; }
  public int MinimumClearTime { get; set; }
  public int MinimumClearLevelGap { get; set; }
  public int CheckCheaterMaxUseCostNonArena { get; set; }
  public int CheckCheaterMaxUseCostArena { get; set; }
  public long AllowedMaxTimeScale { get; set; }
  public long RandomAnimationOutput { get; set; }
  public long SummonedTeleportDistance { get; set; }
  public int ArenaMinimumClearTime { get; set; }
  public long WORLDBOSSBATTLELITTLE { get; set; }
  public long WORLDBOSSBATTLEMIDDLE { get; set; }
  public long WORLDBOSSBATTLEHIGH { get; set; }
  public long WORLDBOSSBATTLEVERYHIGH { get; set; }
  public long WorldRaidAutoSyncTermSecond { get; set; }
  public long WorldRaidBossHpDecreaseTerm { get; set; }
  public long WorldRaidBossParcelReactionDelay { get; set; }
  public long RaidRankingJumpMinimumWaitingTime { get; set; }
  public float EffectTeleportDistance { get; set; }
  public long AuraExitThresholdMargin { get; set; }
  public long TSAInteractionDamageFactor { get; set; }
  public long VictoryInteractionRate { get; set; }
  public string EchelonExtensionEngageTimelinePath { get; set; }
  public string EchelonExtensionEngageWithSupporterTimelinePath { get; set; }
  public string EchelonExtensionVictoryTimelinePath { get; set; }
  public int EchelonExtensionEchelonMaxCommonCost { get; set; }
  public long EchelonMaxOverloadCost { get; set; }
  public long EchelonExtensionMaxOverloadCost { get; set; }
  public int EchelonExtensionEchelonInitCommonCost { get; set; }
  public long EchelonExtensionCostRegenRatio { get; set; }
  public long EchelonOverloadCostRegenRatio { get; set; }
  public long EchelonExtensionOverloadCostRegenRatio { get; set; }
  public int CheckCheaterMaxUseCostMultiFloorRaid { get; set; }
  public float ExcessiveTouchCheckTime { get; set; }
  public int ExcessiveTouchCheckCount { get; set; }
  public int CampaignAlertPopupLevelGap { get; set; }
  public int MoveCorrectionSkipRatio { get; set; }

  public ConstCombatExcelT() {
    this.SkillHandCount = 0;
    this.DyingTime = 0;
    this.BuffIconBlinkTime = 0;
    this.ShowBufficonEXSkill = false;
    this.ShowBufficonPassiveSkill = false;
    this.ShowBufficonExtraPassiveSkill = false;
    this.ShowBufficonLeaderSkill = false;
    this.ShowBufficonGroundPassiveSkill = false;
    this.SuppliesConditionStringId = null;
    this.PublicSpeechBubbleOffsetX = 0.0f;
    this.PublicSpeechBubbleOffsetY = 0.0f;
    this.PublicSpeechBubbleOffsetZ = 0.0f;
    this.ShowRaidListCount = 0;
    this.MaxRaidTicketCount = 0;
    this.MaxRaidBossSkillSlot = 0;
    this.EngageTimelinePath = null;
    this.EngageWithSupporterTimelinePath = null;
    this.VictoryTimelinePath = null;
    this.TimeLimitAlarm = 0;
    this.EchelonMaxCommonCost = 0;
    this.EchelonInitCommonCost = 0;
    this.SkillSlotCoolTime = 0;
    this.EnemyRegenCost = 0;
    this.ChampionRegenCost = 0;
    this.PlayerRegenCostDelay = 0;
    this.CrowdControlFactor = 0;
    this.RaidOpenScenarioId = null;
    this.EliminateRaidOpenScenarioId = null;
    this.DefenceConstA = 0;
    this.DefenceConstB = 0;
    this.DefenceConstC = 0;
    this.DefenceConstD = 0;
    this.AccuracyConstA = 0;
    this.AccuracyConstB = 0;
    this.AccuracyConstC = 0;
    this.AccuracyConstD = 0;
    this.CriticalConstA = 0;
    this.CriticalConstB = 0;
    this.CriticalConstC = 0;
    this.CriticalConstD = 0;
    this.MaxGroupBuffLevel = 0;
    this.EmojiDefaultTime = 0;
    this.TimeLineActionRotateSpeed = 0;
    this.BodyRotateSpeed = 0;
    this.NormalTimeScale = 0;
    this.FastTimeScale = 0;
    this.BulletTimeScale = 0;
    this.UIDisplayDelayAfterSkillCutIn = 0;
    this.UseInitialRangeForCoverMove = false;
    this.SlowTimeScale = 0;
    this.AimIKMinDegree = 0.0f;
    this.AimIKMaxDegree = 0.0f;
    this.MinimumClearTime = 0;
    this.MinimumClearLevelGap = 0;
    this.CheckCheaterMaxUseCostNonArena = 0;
    this.CheckCheaterMaxUseCostArena = 0;
    this.AllowedMaxTimeScale = 0;
    this.RandomAnimationOutput = 0;
    this.SummonedTeleportDistance = 0;
    this.ArenaMinimumClearTime = 0;
    this.WORLDBOSSBATTLELITTLE = 0;
    this.WORLDBOSSBATTLEMIDDLE = 0;
    this.WORLDBOSSBATTLEHIGH = 0;
    this.WORLDBOSSBATTLEVERYHIGH = 0;
    this.WorldRaidAutoSyncTermSecond = 0;
    this.WorldRaidBossHpDecreaseTerm = 0;
    this.WorldRaidBossParcelReactionDelay = 0;
    this.RaidRankingJumpMinimumWaitingTime = 0;
    this.EffectTeleportDistance = 0.0f;
    this.AuraExitThresholdMargin = 0;
    this.TSAInteractionDamageFactor = 0;
    this.VictoryInteractionRate = 0;
    this.EchelonExtensionEngageTimelinePath = null;
    this.EchelonExtensionEngageWithSupporterTimelinePath = null;
    this.EchelonExtensionVictoryTimelinePath = null;
    this.EchelonExtensionEchelonMaxCommonCost = 0;
    this.EchelonMaxOverloadCost = 0;
    this.EchelonExtensionMaxOverloadCost = 0;
    this.EchelonExtensionEchelonInitCommonCost = 0;
    this.EchelonExtensionCostRegenRatio = 0;
    this.EchelonOverloadCostRegenRatio = 0;
    this.EchelonExtensionOverloadCostRegenRatio = 0;
    this.CheckCheaterMaxUseCostMultiFloorRaid = 0;
    this.ExcessiveTouchCheckTime = 0.0f;
    this.ExcessiveTouchCheckCount = 0;
    this.CampaignAlertPopupLevelGap = 0;
    this.MoveCorrectionSkipRatio = 0;
  }
}


static public class ConstCombatExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SkillHandCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*DyingTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*BuffIconBlinkTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ShowBufficonEXSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*ShowBufficonPassiveSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*ShowBufficonExtraPassiveSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*ShowBufficonLeaderSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*ShowBufficonGroundPassiveSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 20 /*SuppliesConditionStringId*/, false)
      && verifier.VerifyField(tablePos, 22 /*PublicSpeechBubbleOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*PublicSpeechBubbleOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*PublicSpeechBubbleOffsetZ*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*ShowRaidListCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*MaxRaidTicketCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*MaxRaidBossSkillSlot*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 34 /*EngageTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 36 /*EngageWithSupporterTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 38 /*VictoryTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 40 /*TimeLimitAlarm*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*EchelonMaxCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*EchelonInitCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*SkillSlotCoolTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*EnemyRegenCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*ChampionRegenCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*PlayerRegenCostDelay*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*CrowdControlFactor*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*RaidOpenScenarioId*/, false)
      && verifier.VerifyString(tablePos, 58 /*EliminateRaidOpenScenarioId*/, false)
      && verifier.VerifyField(tablePos, 60 /*DefenceConstA*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*DefenceConstB*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*DefenceConstC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*DefenceConstD*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*AccuracyConstA*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*AccuracyConstB*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*AccuracyConstC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*AccuracyConstD*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*CriticalConstA*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*CriticalConstB*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*CriticalConstC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*CriticalConstD*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*MaxGroupBuffLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*EmojiDefaultTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*TimeLineActionRotateSpeed*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*BodyRotateSpeed*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*NormalTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*FastTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*BulletTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*UIDisplayDelayAfterSkillCutIn*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*UseInitialRangeForCoverMove*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 102 /*SlowTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*AimIKMinDegree*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*AimIKMaxDegree*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*MinimumClearTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 110 /*MinimumClearLevelGap*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 112 /*CheckCheaterMaxUseCostNonArena*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*CheckCheaterMaxUseCostArena*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 116 /*AllowedMaxTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*RandomAnimationOutput*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*SummonedTeleportDistance*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*ArenaMinimumClearTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 124 /*WORLDBOSSBATTLELITTLE*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*WORLDBOSSBATTLEMIDDLE*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*WORLDBOSSBATTLEHIGH*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*WORLDBOSSBATTLEVERYHIGH*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*WorldRaidAutoSyncTermSecond*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*WorldRaidBossHpDecreaseTerm*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*WorldRaidBossParcelReactionDelay*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*RaidRankingJumpMinimumWaitingTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*EffectTeleportDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 142 /*AuraExitThresholdMargin*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*TSAInteractionDamageFactor*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*VictoryInteractionRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 148 /*EchelonExtensionEngageTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 150 /*EchelonExtensionEngageWithSupporterTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 152 /*EchelonExtensionVictoryTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 154 /*EchelonExtensionEchelonMaxCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 156 /*EchelonMaxOverloadCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 158 /*EchelonExtensionMaxOverloadCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 160 /*EchelonExtensionEchelonInitCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 162 /*EchelonExtensionCostRegenRatio*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 164 /*EchelonOverloadCostRegenRatio*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 166 /*EchelonExtensionOverloadCostRegenRatio*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 168 /*CheckCheaterMaxUseCostMultiFloorRaid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 170 /*ExcessiveTouchCheckTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 172 /*ExcessiveTouchCheckCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 174 /*CampaignAlertPopupLevelGap*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 176 /*MoveCorrectionSkipRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
