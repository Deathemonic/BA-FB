// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDefenseStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameDefenseStageExcel GetRootAsMiniGameDefenseStageExcel(ByteBuffer _bb) { return GetRootAsMiniGameDefenseStageExcel(_bb, new MiniGameDefenseStageExcel()); }
  public static MiniGameDefenseStageExcel GetRootAsMiniGameDefenseStageExcel(ByteBuffer _bb, MiniGameDefenseStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDefenseStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public long EventContentId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.StageDifficulty StageDifficulty { get { int o = __p.__offset(10); return o != 0 ? (Japan.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : Japan.StageDifficulty.None; } }
  public uint StageDifficultyLocalize { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int StageNumber { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageDisplay { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PrevStageId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(20); return o != 0 ? (Japan.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EchelonExtensionType.Base; } }
  public long BattleDuration { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType StageEnterCostType { get { int o = __p.__offset(24); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EventContentStageRewardId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnterScenarioGroupId(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int EnterScenarioGroupIdLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetEnterScenarioGroupIdBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetEnterScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetEnterScenarioGroupIdArray() { return __p.__vector_as_array<long>(32); }
  public long ClearScenarioGroupId(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ClearScenarioGroupIdLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetClearScenarioGroupIdBytes() { return __p.__vector_as_span<long>(34, 8); }
#else
  public ArraySegment<byte>? GetClearScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public long[] GetClearScenarioGroupIdArray() { return __p.__vector_as_array<long>(34); }
  public Japan.StageTopography StageTopography { get { int o = __p.__offset(36); return o != 0 ? (Japan.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : Japan.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long GroundID { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ContentType ContentType { get { int o = __p.__offset(42); return o != 0 ? (Japan.ContentType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ContentType.None; } }
  public Japan.StarGoalType StarGoal(int j) { int o = __p.__offset(44); return o != 0 ? (Japan.StarGoalType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.StarGoalType)0; }
  public int StarGoalLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.StarGoalType> GetStarGoalBytes() { return __p.__vector_as_span<Japan.StarGoalType>(44, 4); }
#else
  public ArraySegment<byte>? GetStarGoalBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public Japan.StarGoalType[] GetStarGoalArray() { int o = __p.__offset(44); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.StarGoalType[] a = new Japan.StarGoalType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.StarGoalType)__p.bb.GetInt(p + i * 4); } return a; }
  public int StarGoalAmount(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StarGoalAmountLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStarGoalAmountBytes() { return __p.__vector_as_span<int>(46, 4); }
#else
  public ArraySegment<byte>? GetStarGoalAmountBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public int[] GetStarGoalAmountArray() { return __p.__vector_as_array<int>(46); }
  public string DefenseFormationBGPrefab { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefenseFormationBGPrefabBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetDefenseFormationBGPrefabBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetDefenseFormationBGPrefabArray() { return __p.__vector_as_array<byte>(48); }
  public float DefenseFormationBGPrefabScale { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long FixedEchelon { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MininageDefenseFixedStatId { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint StageHint { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Japan.MiniGameDefenseStageExcel> CreateMiniGameDefenseStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset NameOffset = default(StringOffset),
      long EventContentId = 0,
      Japan.StageDifficulty StageDifficulty = Japan.StageDifficulty.None,
      uint StageDifficultyLocalize = 0,
      int StageNumber = 0,
      int StageDisplay = 0,
      long PrevStageId = 0,
      Japan.EchelonExtensionType EchelonExtensionType = Japan.EchelonExtensionType.Base,
      long BattleDuration = 0,
      Japan.ParcelType StageEnterCostType = Japan.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      long EventContentStageRewardId = 0,
      VectorOffset EnterScenarioGroupIdOffset = default(VectorOffset),
      VectorOffset ClearScenarioGroupIdOffset = default(VectorOffset),
      Japan.StageTopography StageTopography = Japan.StageTopography.Street,
      int RecommandLevel = 0,
      long GroundID = 0,
      Japan.ContentType ContentType = Japan.ContentType.None,
      VectorOffset StarGoalOffset = default(VectorOffset),
      VectorOffset StarGoalAmountOffset = default(VectorOffset),
      StringOffset DefenseFormationBGPrefabOffset = default(StringOffset),
      float DefenseFormationBGPrefabScale = 0.0f,
      long FixedEchelon = 0,
      long MininageDefenseFixedStatId = 0,
      uint StageHint = 0) {
    builder.StartTable(27);
    MiniGameDefenseStageExcel.AddMininageDefenseFixedStatId(builder, MininageDefenseFixedStatId);
    MiniGameDefenseStageExcel.AddFixedEchelon(builder, FixedEchelon);
    MiniGameDefenseStageExcel.AddGroundID(builder, GroundID);
    MiniGameDefenseStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId);
    MiniGameDefenseStageExcel.AddStageEnterCostId(builder, StageEnterCostId);
    MiniGameDefenseStageExcel.AddBattleDuration(builder, BattleDuration);
    MiniGameDefenseStageExcel.AddPrevStageId(builder, PrevStageId);
    MiniGameDefenseStageExcel.AddEventContentId(builder, EventContentId);
    MiniGameDefenseStageExcel.AddId(builder, Id);
    MiniGameDefenseStageExcel.AddStageHint(builder, StageHint);
    MiniGameDefenseStageExcel.AddDefenseFormationBGPrefabScale(builder, DefenseFormationBGPrefabScale);
    MiniGameDefenseStageExcel.AddDefenseFormationBGPrefab(builder, DefenseFormationBGPrefabOffset);
    MiniGameDefenseStageExcel.AddStarGoalAmount(builder, StarGoalAmountOffset);
    MiniGameDefenseStageExcel.AddStarGoal(builder, StarGoalOffset);
    MiniGameDefenseStageExcel.AddContentType(builder, ContentType);
    MiniGameDefenseStageExcel.AddRecommandLevel(builder, RecommandLevel);
    MiniGameDefenseStageExcel.AddStageTopography(builder, StageTopography);
    MiniGameDefenseStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupIdOffset);
    MiniGameDefenseStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupIdOffset);
    MiniGameDefenseStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    MiniGameDefenseStageExcel.AddStageEnterCostType(builder, StageEnterCostType);
    MiniGameDefenseStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    MiniGameDefenseStageExcel.AddStageDisplay(builder, StageDisplay);
    MiniGameDefenseStageExcel.AddStageNumber(builder, StageNumber);
    MiniGameDefenseStageExcel.AddStageDifficultyLocalize(builder, StageDifficultyLocalize);
    MiniGameDefenseStageExcel.AddStageDifficulty(builder, StageDifficulty);
    MiniGameDefenseStageExcel.AddName(builder, NameOffset);
    return MiniGameDefenseStageExcel.EndMiniGameDefenseStageExcel(builder);
  }

  public static void StartMiniGameDefenseStageExcel(FlatBufferBuilder builder) { builder.StartTable(27); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(2, eventContentId, 0); }
  public static void AddStageDifficulty(FlatBufferBuilder builder, Japan.StageDifficulty stageDifficulty) { builder.AddInt(3, (int)stageDifficulty, 0); }
  public static void AddStageDifficultyLocalize(FlatBufferBuilder builder, uint stageDifficultyLocalize) { builder.AddUint(4, stageDifficultyLocalize, 0); }
  public static void AddStageNumber(FlatBufferBuilder builder, int stageNumber) { builder.AddInt(5, stageNumber, 0); }
  public static void AddStageDisplay(FlatBufferBuilder builder, int stageDisplay) { builder.AddInt(6, stageDisplay, 0); }
  public static void AddPrevStageId(FlatBufferBuilder builder, long prevStageId) { builder.AddLong(7, prevStageId, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, Japan.EchelonExtensionType echelonExtensionType) { builder.AddInt(8, (int)echelonExtensionType, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(9, battleDuration, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, Japan.ParcelType stageEnterCostType) { builder.AddInt(10, (int)stageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long stageEnterCostId) { builder.AddLong(11, stageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int stageEnterCostAmount) { builder.AddInt(12, stageEnterCostAmount, 0); }
  public static void AddEventContentStageRewardId(FlatBufferBuilder builder, long eventContentStageRewardId) { builder.AddLong(13, eventContentStageRewardId, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, VectorOffset enterScenarioGroupIdOffset) { builder.AddOffset(14, enterScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateEnterScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnterScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddClearScenarioGroupId(FlatBufferBuilder builder, VectorOffset clearScenarioGroupIdOffset) { builder.AddOffset(15, clearScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateClearScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClearScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStageTopography(FlatBufferBuilder builder, Japan.StageTopography stageTopography) { builder.AddInt(16, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int recommandLevel) { builder.AddInt(17, recommandLevel, 0); }
  public static void AddGroundID(FlatBufferBuilder builder, long groundID) { builder.AddLong(18, groundID, 0); }
  public static void AddContentType(FlatBufferBuilder builder, Japan.ContentType contentType) { builder.AddInt(19, (int)contentType, 0); }
  public static void AddStarGoal(FlatBufferBuilder builder, VectorOffset starGoalOffset) { builder.AddOffset(20, starGoalOffset.Value, 0); }
  public static VectorOffset CreateStarGoalVector(FlatBufferBuilder builder, Japan.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, Japan.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.StarGoalType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.StarGoalType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarGoalAmount(FlatBufferBuilder builder, VectorOffset starGoalAmountOffset) { builder.AddOffset(21, starGoalAmountOffset.Value, 0); }
  public static VectorOffset CreateStarGoalAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDefenseFormationBGPrefab(FlatBufferBuilder builder, StringOffset defenseFormationBGPrefabOffset) { builder.AddOffset(22, defenseFormationBGPrefabOffset.Value, 0); }
  public static void AddDefenseFormationBGPrefabScale(FlatBufferBuilder builder, float defenseFormationBGPrefabScale) { builder.AddFloat(23, defenseFormationBGPrefabScale, 0.0f); }
  public static void AddFixedEchelon(FlatBufferBuilder builder, long fixedEchelon) { builder.AddLong(24, fixedEchelon, 0); }
  public static void AddMininageDefenseFixedStatId(FlatBufferBuilder builder, long mininageDefenseFixedStatId) { builder.AddLong(25, mininageDefenseFixedStatId, 0); }
  public static void AddStageHint(FlatBufferBuilder builder, uint stageHint) { builder.AddUint(26, stageHint, 0); }
  public static Offset<Japan.MiniGameDefenseStageExcel> EndMiniGameDefenseStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MiniGameDefenseStageExcel>(o);
  }
  public MiniGameDefenseStageExcelT UnPack() {
    var _o = new MiniGameDefenseStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDefenseStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDefenseStage");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Name, key) : this.Name;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.StageDifficulty = TableEncryptionService.UseEncryption ? (Japan.StageDifficulty)TableEncryptionService.Convert((int)this.StageDifficulty, key) : this.StageDifficulty;
    _o.StageDifficultyLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.StageDifficultyLocalize, key) : this.StageDifficultyLocalize;
    _o.StageNumber = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageNumber, key) : this.StageNumber;
    _o.StageDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageDisplay, key) : this.StageDisplay;
    _o.PrevStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PrevStageId, key) : this.PrevStageId;
    _o.EchelonExtensionType = TableEncryptionService.UseEncryption ? (Japan.EchelonExtensionType)TableEncryptionService.Convert((int)this.EchelonExtensionType, key) : this.EchelonExtensionType;
    _o.BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattleDuration, key) : this.BattleDuration;
    _o.StageEnterCostType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.StageEnterCostType, key) : this.StageEnterCostType;
    _o.StageEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StageEnterCostId, key) : this.StageEnterCostId;
    _o.StageEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageEnterCostAmount, key) : this.StageEnterCostAmount;
    _o.EventContentStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentStageRewardId, key) : this.EventContentStageRewardId;
    _o.EnterScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.EnterScenarioGroupIdLength; ++_j) {_o.EnterScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnterScenarioGroupId(_j), key) : this.EnterScenarioGroupId(_j));}
    _o.ClearScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.ClearScenarioGroupIdLength; ++_j) {_o.ClearScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearScenarioGroupId(_j), key) : this.ClearScenarioGroupId(_j));}
    _o.StageTopography = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)this.StageTopography, key) : this.StageTopography;
    _o.RecommandLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RecommandLevel, key) : this.RecommandLevel;
    _o.GroundID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundID, key) : this.GroundID;
    _o.ContentType = TableEncryptionService.UseEncryption ? (Japan.ContentType)TableEncryptionService.Convert((int)this.ContentType, key) : this.ContentType;
    _o.StarGoal = new List<Japan.StarGoalType>();
    for (var _j = 0; _j < this.StarGoalLength; ++_j) {_o.StarGoal.Add(TableEncryptionService.UseEncryption ? (Japan.StarGoalType)TableEncryptionService.Convert((int)this.StarGoal(_j), key) : this.StarGoal(_j));}
    _o.StarGoalAmount = new List<int>();
    for (var _j = 0; _j < this.StarGoalAmountLength; ++_j) {_o.StarGoalAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StarGoalAmount(_j), key) : this.StarGoalAmount(_j));}
    _o.DefenseFormationBGPrefab = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DefenseFormationBGPrefab, key) : this.DefenseFormationBGPrefab;
    _o.DefenseFormationBGPrefabScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.DefenseFormationBGPrefabScale, key) : this.DefenseFormationBGPrefabScale;
    _o.FixedEchelon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FixedEchelon, key) : this.FixedEchelon;
    _o.MininageDefenseFixedStatId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MininageDefenseFixedStatId, key) : this.MininageDefenseFixedStatId;
    _o.StageHint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.StageHint, key) : this.StageHint;
  }
  public static Offset<Japan.MiniGameDefenseStageExcel> Pack(FlatBufferBuilder builder, MiniGameDefenseStageExcelT _o) {
    if (_o == null) return default(Offset<Japan.MiniGameDefenseStageExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameDefenseStage");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Name, key) : _o.Name));
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _StageDifficulty = TableEncryptionService.UseEncryption ? (Japan.StageDifficulty)TableEncryptionService.Convert((int)_o.StageDifficulty, key) : _o.StageDifficulty;
		var _StageDifficultyLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.StageDifficultyLocalize, key) : _o.StageDifficultyLocalize;
		var _StageNumber = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageNumber, key) : _o.StageNumber;
		var _StageDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageDisplay, key) : _o.StageDisplay;
		var _PrevStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PrevStageId, key) : _o.PrevStageId;
		var _EchelonExtensionType = TableEncryptionService.UseEncryption ? (Japan.EchelonExtensionType)TableEncryptionService.Convert((int)_o.EchelonExtensionType, key) : _o.EchelonExtensionType;
		var _BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattleDuration, key) : _o.BattleDuration;
		var _StageEnterCostType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.StageEnterCostType, key) : _o.StageEnterCostType;
		var _StageEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StageEnterCostId, key) : _o.StageEnterCostId;
		var _StageEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageEnterCostAmount, key) : _o.StageEnterCostAmount;
		var _EventContentStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentStageRewardId, key) : _o.EventContentStageRewardId;
    var _EnterScenarioGroupId = default(VectorOffset);
    if (_o.EnterScenarioGroupId != null) {
      var __EnterScenarioGroupId = _o.EnterScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _EnterScenarioGroupId = CreateEnterScenarioGroupIdVector(builder, __EnterScenarioGroupId);
    }
    var _ClearScenarioGroupId = default(VectorOffset);
    if (_o.ClearScenarioGroupId != null) {
      var __ClearScenarioGroupId = _o.ClearScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ClearScenarioGroupId = CreateClearScenarioGroupIdVector(builder, __ClearScenarioGroupId);
    }
		var _StageTopography = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)_o.StageTopography, key) : _o.StageTopography;
		var _RecommandLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RecommandLevel, key) : _o.RecommandLevel;
		var _GroundID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundID, key) : _o.GroundID;
		var _ContentType = TableEncryptionService.UseEncryption ? (Japan.ContentType)TableEncryptionService.Convert((int)_o.ContentType, key) : _o.ContentType;
    var _StarGoal = default(VectorOffset);
    if (_o.StarGoal != null) {
      var __StarGoal = _o.StarGoal.Select(x => TableEncryptionService.UseEncryption ? (Japan.StarGoalType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _StarGoal = CreateStarGoalVector(builder, __StarGoal);
    }
    var _StarGoalAmount = default(VectorOffset);
    if (_o.StarGoalAmount != null) {
      var __StarGoalAmount = _o.StarGoalAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _StarGoalAmount = CreateStarGoalAmountVector(builder, __StarGoalAmount);
    }
    var _DefenseFormationBGPrefab = _o.DefenseFormationBGPrefab == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DefenseFormationBGPrefab, key) : _o.DefenseFormationBGPrefab));
		var _DefenseFormationBGPrefabScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.DefenseFormationBGPrefabScale, key) : _o.DefenseFormationBGPrefabScale;
		var _FixedEchelon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FixedEchelon, key) : _o.FixedEchelon;
		var _MininageDefenseFixedStatId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MininageDefenseFixedStatId, key) : _o.MininageDefenseFixedStatId;
		var _StageHint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.StageHint, key) : _o.StageHint;
    return CreateMiniGameDefenseStageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _Name,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _StageDifficulty : _o.StageDifficulty,
      TableEncryptionService.UseEncryption ? _StageDifficultyLocalize : _o.StageDifficultyLocalize,
      TableEncryptionService.UseEncryption ? _StageNumber : _o.StageNumber,
      TableEncryptionService.UseEncryption ? _StageDisplay : _o.StageDisplay,
      TableEncryptionService.UseEncryption ? _PrevStageId : _o.PrevStageId,
      TableEncryptionService.UseEncryption ? _EchelonExtensionType : _o.EchelonExtensionType,
      TableEncryptionService.UseEncryption ? _BattleDuration : _o.BattleDuration,
      TableEncryptionService.UseEncryption ? _StageEnterCostType : _o.StageEnterCostType,
      TableEncryptionService.UseEncryption ? _StageEnterCostId : _o.StageEnterCostId,
      TableEncryptionService.UseEncryption ? _StageEnterCostAmount : _o.StageEnterCostAmount,
      TableEncryptionService.UseEncryption ? _EventContentStageRewardId : _o.EventContentStageRewardId,
      _EnterScenarioGroupId,
      _ClearScenarioGroupId,
      TableEncryptionService.UseEncryption ? _StageTopography : _o.StageTopography,
      TableEncryptionService.UseEncryption ? _RecommandLevel : _o.RecommandLevel,
      TableEncryptionService.UseEncryption ? _GroundID : _o.GroundID,
      TableEncryptionService.UseEncryption ? _ContentType : _o.ContentType,
      _StarGoal,
      _StarGoalAmount,
      _DefenseFormationBGPrefab,
      TableEncryptionService.UseEncryption ? _DefenseFormationBGPrefabScale : _o.DefenseFormationBGPrefabScale,
      TableEncryptionService.UseEncryption ? _FixedEchelon : _o.FixedEchelon,
      TableEncryptionService.UseEncryption ? _MininageDefenseFixedStatId : _o.MininageDefenseFixedStatId,
      TableEncryptionService.UseEncryption ? _StageHint : _o.StageHint);
  }
}

public class MiniGameDefenseStageExcelT
{
  public long Id { get; set; }
  public string Name { get; set; }
  public long EventContentId { get; set; }
  public Japan.StageDifficulty StageDifficulty { get; set; }
  public uint StageDifficultyLocalize { get; set; }
  public int StageNumber { get; set; }
  public int StageDisplay { get; set; }
  public long PrevStageId { get; set; }
  public Japan.EchelonExtensionType EchelonExtensionType { get; set; }
  public long BattleDuration { get; set; }
  public Japan.ParcelType StageEnterCostType { get; set; }
  public long StageEnterCostId { get; set; }
  public int StageEnterCostAmount { get; set; }
  public long EventContentStageRewardId { get; set; }
  public List<long> EnterScenarioGroupId { get; set; }
  public List<long> ClearScenarioGroupId { get; set; }
  public Japan.StageTopography StageTopography { get; set; }
  public int RecommandLevel { get; set; }
  public long GroundID { get; set; }
  public Japan.ContentType ContentType { get; set; }
  public List<Japan.StarGoalType> StarGoal { get; set; }
  public List<int> StarGoalAmount { get; set; }
  public string DefenseFormationBGPrefab { get; set; }
  public float DefenseFormationBGPrefabScale { get; set; }
  public long FixedEchelon { get; set; }
  public long MininageDefenseFixedStatId { get; set; }
  public uint StageHint { get; set; }

  public MiniGameDefenseStageExcelT() {
    this.Id = 0;
    this.Name = null;
    this.EventContentId = 0;
    this.StageDifficulty = Japan.StageDifficulty.None;
    this.StageDifficultyLocalize = 0;
    this.StageNumber = 0;
    this.StageDisplay = 0;
    this.PrevStageId = 0;
    this.EchelonExtensionType = Japan.EchelonExtensionType.Base;
    this.BattleDuration = 0;
    this.StageEnterCostType = Japan.ParcelType.None;
    this.StageEnterCostId = 0;
    this.StageEnterCostAmount = 0;
    this.EventContentStageRewardId = 0;
    this.EnterScenarioGroupId = null;
    this.ClearScenarioGroupId = null;
    this.StageTopography = Japan.StageTopography.Street;
    this.RecommandLevel = 0;
    this.GroundID = 0;
    this.ContentType = Japan.ContentType.None;
    this.StarGoal = null;
    this.StarGoalAmount = null;
    this.DefenseFormationBGPrefab = null;
    this.DefenseFormationBGPrefabScale = 0.0f;
    this.FixedEchelon = 0;
    this.MininageDefenseFixedStatId = 0;
    this.StageHint = 0;
  }
}


static public class MiniGameDefenseStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*StageDifficulty*/, 4 /*Japan.StageDifficulty*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*StageDifficultyLocalize*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*StageNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*StageDisplay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*PrevStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*EchelonExtensionType*/, 4 /*Japan.EchelonExtensionType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*StageEnterCostType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*StageEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*StageEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*EventContentStageRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*EnterScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*ClearScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 36 /*StageTopography*/, 4 /*Japan.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*RecommandLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*GroundID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*ContentType*/, 4 /*Japan.ContentType*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 44 /*StarGoal*/, 4 /*Japan.StarGoalType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*StarGoalAmount*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 48 /*DefenseFormationBGPrefab*/, false)
      && verifier.VerifyField(tablePos, 50 /*DefenseFormationBGPrefabScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*FixedEchelon*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*MininageDefenseFixedStatId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*StageHint*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
