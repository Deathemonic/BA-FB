// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameTBGVoiceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameTBGVoiceExcel GetRootAsMinigameTBGVoiceExcel(ByteBuffer _bb) { return GetRootAsMinigameTBGVoiceExcel(_bb, new MinigameTBGVoiceExcel()); }
  public static MinigameTBGVoiceExcel GetRootAsMinigameTBGVoiceExcel(ByteBuffer _bb, MinigameTBGVoiceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameTBGVoiceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.TBGVoiceCondition VoiceCondition { get { int o = __p.__offset(8); return o != 0 ? (Japan.TBGVoiceCondition)__p.bb.GetInt(o + __p.bb_pos) : Japan.TBGVoiceCondition.None; } }
  public uint VoiceId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Japan.MinigameTBGVoiceExcel> CreateMinigameTBGVoiceExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      Japan.TBGVoiceCondition VoiceCondition = Japan.TBGVoiceCondition.None,
      uint VoiceId = 0) {
    builder.StartTable(4);
    MinigameTBGVoiceExcel.AddUniqueId(builder, UniqueId);
    MinigameTBGVoiceExcel.AddEventContentId(builder, EventContentId);
    MinigameTBGVoiceExcel.AddVoiceId(builder, VoiceId);
    MinigameTBGVoiceExcel.AddVoiceCondition(builder, VoiceCondition);
    return MinigameTBGVoiceExcel.EndMinigameTBGVoiceExcel(builder);
  }

  public static void StartMinigameTBGVoiceExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddVoiceCondition(FlatBufferBuilder builder, Japan.TBGVoiceCondition voiceCondition) { builder.AddInt(2, (int)voiceCondition, 0); }
  public static void AddVoiceId(FlatBufferBuilder builder, uint voiceId) { builder.AddUint(3, voiceId, 0); }
  public static Offset<Japan.MinigameTBGVoiceExcel> EndMinigameTBGVoiceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameTBGVoiceExcel>(o);
  }
  public MinigameTBGVoiceExcelT UnPack() {
    var _o = new MinigameTBGVoiceExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameTBGVoiceExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameTBGVoice");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.VoiceCondition = TableEncryptionService.UseEncryption ? (Japan.TBGVoiceCondition)TableEncryptionService.Convert((int)this.VoiceCondition, key) : this.VoiceCondition;
    _o.VoiceId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.VoiceId, key) : this.VoiceId;
  }
  public static Offset<Japan.MinigameTBGVoiceExcel> Pack(FlatBufferBuilder builder, MinigameTBGVoiceExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameTBGVoiceExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameTBGVoice");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _VoiceCondition = TableEncryptionService.UseEncryption ? (Japan.TBGVoiceCondition)TableEncryptionService.Convert((int)_o.VoiceCondition, key) : _o.VoiceCondition;
		var _VoiceId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.VoiceId, key) : _o.VoiceId;
    return CreateMinigameTBGVoiceExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _VoiceCondition : _o.VoiceCondition,
      TableEncryptionService.UseEncryption ? _VoiceId : _o.VoiceId);
  }
}

public class MinigameTBGVoiceExcelT
{
  public long EventContentId { get; set; }
  public long UniqueId { get; set; }
  public Japan.TBGVoiceCondition VoiceCondition { get; set; }
  public uint VoiceId { get; set; }

  public MinigameTBGVoiceExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.VoiceCondition = Japan.TBGVoiceCondition.None;
    this.VoiceId = 0;
  }
}


static public class MinigameTBGVoiceExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*VoiceCondition*/, 4 /*Japan.TBGVoiceCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*VoiceId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
