// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentCardShopExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentCardShopExcel GetRootAsEventContentCardShopExcel(ByteBuffer _bb) { return GetRootAsEventContentCardShopExcel(_bb, new EventContentCardShopExcel()); }
  public static EventContentCardShopExcel GetRootAsEventContentCardShopExcel(ByteBuffer _bb, EventContentCardShopExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentCardShopExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.Rarity Rarity { get { int o = __p.__offset(8); return o != 0 ? (Japan.Rarity)__p.bb.GetInt(o + __p.bb_pos) : Japan.Rarity.N; } }
  public long CostGoodsId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CardGroupId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsLegacy { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RefreshGroup { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Prob { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ProbWeight1 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.ParcelType RewardParcelType(int j) { int o = __p.__offset(22); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<Japan.ParcelType>(22, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public Japan.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(22); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.ParcelType[] a = new Japan.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParcelId(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelIdLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelIdBytes() { return __p.__vector_as_span<long>(24, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public long[] GetRewardParcelIdArray() { return __p.__vector_as_array<long>(24); }
  public long RewardParcelAmount(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelAmountLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelAmountBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelAmountBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetRewardParcelAmountArray() { return __p.__vector_as_array<long>(26); }

  public static Offset<Japan.EventContentCardShopExcel> CreateEventContentCardShopExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long Id = 0,
      Japan.Rarity Rarity = Japan.Rarity.N,
      long CostGoodsId = 0,
      int CardGroupId = 0,
      bool IsLegacy = false,
      int RefreshGroup = 0,
      int Prob = 0,
      int ProbWeight1 = 0,
      VectorOffset RewardParcelTypeOffset = default(VectorOffset),
      VectorOffset RewardParcelIdOffset = default(VectorOffset),
      VectorOffset RewardParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(12);
    EventContentCardShopExcel.AddCostGoodsId(builder, CostGoodsId);
    EventContentCardShopExcel.AddId(builder, Id);
    EventContentCardShopExcel.AddEventContentId(builder, EventContentId);
    EventContentCardShopExcel.AddRewardParcelAmount(builder, RewardParcelAmountOffset);
    EventContentCardShopExcel.AddRewardParcelId(builder, RewardParcelIdOffset);
    EventContentCardShopExcel.AddRewardParcelType(builder, RewardParcelTypeOffset);
    EventContentCardShopExcel.AddProbWeight1(builder, ProbWeight1);
    EventContentCardShopExcel.AddProb(builder, Prob);
    EventContentCardShopExcel.AddRefreshGroup(builder, RefreshGroup);
    EventContentCardShopExcel.AddCardGroupId(builder, CardGroupId);
    EventContentCardShopExcel.AddRarity(builder, Rarity);
    EventContentCardShopExcel.AddIsLegacy(builder, IsLegacy);
    return EventContentCardShopExcel.EndEventContentCardShopExcel(builder);
  }

  public static void StartEventContentCardShopExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddRarity(FlatBufferBuilder builder, Japan.Rarity rarity) { builder.AddInt(2, (int)rarity, 0); }
  public static void AddCostGoodsId(FlatBufferBuilder builder, long costGoodsId) { builder.AddLong(3, costGoodsId, 0); }
  public static void AddCardGroupId(FlatBufferBuilder builder, int cardGroupId) { builder.AddInt(4, cardGroupId, 0); }
  public static void AddIsLegacy(FlatBufferBuilder builder, bool isLegacy) { builder.AddBool(5, isLegacy, false); }
  public static void AddRefreshGroup(FlatBufferBuilder builder, int refreshGroup) { builder.AddInt(6, refreshGroup, 0); }
  public static void AddProb(FlatBufferBuilder builder, int prob) { builder.AddInt(7, prob, 0); }
  public static void AddProbWeight1(FlatBufferBuilder builder, int probWeight1) { builder.AddInt(8, probWeight1, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(9, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, VectorOffset rewardParcelIdOffset) { builder.AddOffset(10, rewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, VectorOffset rewardParcelAmountOffset) { builder.AddOffset(11, rewardParcelAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Japan.EventContentCardShopExcel> EndEventContentCardShopExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentCardShopExcel>(o);
  }
  public EventContentCardShopExcelT UnPack() {
    var _o = new EventContentCardShopExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentCardShopExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentCardShop");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)this.Rarity, key) : this.Rarity;
    _o.CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostGoodsId, key) : this.CostGoodsId;
    _o.CardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CardGroupId, key) : this.CardGroupId;
    _o.IsLegacy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsLegacy, key) : this.IsLegacy;
    _o.RefreshGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RefreshGroup, key) : this.RefreshGroup;
    _o.Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Prob, key) : this.Prob;
    _o.ProbWeight1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ProbWeight1, key) : this.ProbWeight1;
    _o.RewardParcelType = new List<Japan.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType(_j), key) : this.RewardParcelType(_j));}
    _o.RewardParcelId = new List<long>();
    for (var _j = 0; _j < this.RewardParcelIdLength; ++_j) {_o.RewardParcelId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId(_j), key) : this.RewardParcelId(_j));}
    _o.RewardParcelAmount = new List<long>();
    for (var _j = 0; _j < this.RewardParcelAmountLength; ++_j) {_o.RewardParcelAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelAmount(_j), key) : this.RewardParcelAmount(_j));}
  }
  public static Offset<Japan.EventContentCardShopExcel> Pack(FlatBufferBuilder builder, EventContentCardShopExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentCardShopExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentCardShop");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)_o.Rarity, key) : _o.Rarity;
		var _CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostGoodsId, key) : _o.CostGoodsId;
		var _CardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CardGroupId, key) : _o.CardGroupId;
		var _IsLegacy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsLegacy, key) : _o.IsLegacy;
		var _RefreshGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RefreshGroup, key) : _o.RefreshGroup;
		var _Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Prob, key) : _o.Prob;
		var _ProbWeight1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ProbWeight1, key) : _o.ProbWeight1;
    var _RewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __RewardParcelType = _o.RewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _RewardParcelType = CreateRewardParcelTypeVector(builder, __RewardParcelType);
    }
    var _RewardParcelId = default(VectorOffset);
    if (_o.RewardParcelId != null) {
      var __RewardParcelId = _o.RewardParcelId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _RewardParcelId = CreateRewardParcelIdVector(builder, __RewardParcelId);
    }
    var _RewardParcelAmount = default(VectorOffset);
    if (_o.RewardParcelAmount != null) {
      var __RewardParcelAmount = _o.RewardParcelAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _RewardParcelAmount = CreateRewardParcelAmountVector(builder, __RewardParcelAmount);
    }
    return CreateEventContentCardShopExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Rarity : _o.Rarity,
      TableEncryptionService.UseEncryption ? _CostGoodsId : _o.CostGoodsId,
      TableEncryptionService.UseEncryption ? _CardGroupId : _o.CardGroupId,
      TableEncryptionService.UseEncryption ? _IsLegacy : _o.IsLegacy,
      TableEncryptionService.UseEncryption ? _RefreshGroup : _o.RefreshGroup,
      TableEncryptionService.UseEncryption ? _Prob : _o.Prob,
      TableEncryptionService.UseEncryption ? _ProbWeight1 : _o.ProbWeight1,
      _RewardParcelType,
      _RewardParcelId,
      _RewardParcelAmount);
  }
}

public class EventContentCardShopExcelT
{
  public long EventContentId { get; set; }
  public long Id { get; set; }
  public Japan.Rarity Rarity { get; set; }
  public long CostGoodsId { get; set; }
  public int CardGroupId { get; set; }
  public bool IsLegacy { get; set; }
  public int RefreshGroup { get; set; }
  public int Prob { get; set; }
  public int ProbWeight1 { get; set; }
  public List<Japan.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardParcelId { get; set; }
  public List<long> RewardParcelAmount { get; set; }

  public EventContentCardShopExcelT() {
    this.EventContentId = 0;
    this.Id = 0;
    this.Rarity = Japan.Rarity.N;
    this.CostGoodsId = 0;
    this.CardGroupId = 0;
    this.IsLegacy = false;
    this.RefreshGroup = 0;
    this.Prob = 0;
    this.ProbWeight1 = 0;
    this.RewardParcelType = null;
    this.RewardParcelId = null;
    this.RewardParcelAmount = null;
  }
}


static public class EventContentCardShopExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Rarity*/, 4 /*Japan.Rarity*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CostGoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*CardGroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*IsLegacy*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*RefreshGroup*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Prob*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*ProbWeight1*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*RewardParcelType*/, 4 /*Japan.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*RewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*RewardParcelAmount*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
