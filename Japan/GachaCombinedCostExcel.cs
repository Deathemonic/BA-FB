// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GachaCombinedCostExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaCombinedCostExcel GetRootAsGachaCombinedCostExcel(ByteBuffer _bb) { return GetRootAsGachaCombinedCostExcel(_bb, new GachaCombinedCostExcel()); }
  public static GachaCombinedCostExcel GetRootAsGachaCombinedCostExcel(ByteBuffer _bb, GachaCombinedCostExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaCombinedCostExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Priority { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.GachaTicketType ConsumeGachaTicketType { get { int o = __p.__offset(8); return o != 0 ? (Japan.GachaTicketType)__p.bb.GetInt(o + __p.bb_pos) : Japan.GachaTicketType.None; } }
  public long ConsumeGachaTicketTypeAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType ConsumeParcelType { get { int o = __p.__offset(12); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long ConsumeParcelId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ConsumeParcelAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.GachaCombinedCostExcel> CreateGachaCombinedCostExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      long Priority = 0,
      Japan.GachaTicketType ConsumeGachaTicketType = Japan.GachaTicketType.None,
      long ConsumeGachaTicketTypeAmount = 0,
      Japan.ParcelType ConsumeParcelType = Japan.ParcelType.None,
      long ConsumeParcelId = 0,
      long ConsumeParcelAmount = 0) {
    builder.StartTable(7);
    GachaCombinedCostExcel.AddConsumeParcelAmount(builder, ConsumeParcelAmount);
    GachaCombinedCostExcel.AddConsumeParcelId(builder, ConsumeParcelId);
    GachaCombinedCostExcel.AddConsumeGachaTicketTypeAmount(builder, ConsumeGachaTicketTypeAmount);
    GachaCombinedCostExcel.AddPriority(builder, Priority);
    GachaCombinedCostExcel.AddGroupId(builder, GroupId);
    GachaCombinedCostExcel.AddConsumeParcelType(builder, ConsumeParcelType);
    GachaCombinedCostExcel.AddConsumeGachaTicketType(builder, ConsumeGachaTicketType);
    return GachaCombinedCostExcel.EndGachaCombinedCostExcel(builder);
  }

  public static void StartGachaCombinedCostExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddPriority(FlatBufferBuilder builder, long priority) { builder.AddLong(1, priority, 0); }
  public static void AddConsumeGachaTicketType(FlatBufferBuilder builder, Japan.GachaTicketType consumeGachaTicketType) { builder.AddInt(2, (int)consumeGachaTicketType, 0); }
  public static void AddConsumeGachaTicketTypeAmount(FlatBufferBuilder builder, long consumeGachaTicketTypeAmount) { builder.AddLong(3, consumeGachaTicketTypeAmount, 0); }
  public static void AddConsumeParcelType(FlatBufferBuilder builder, Japan.ParcelType consumeParcelType) { builder.AddInt(4, (int)consumeParcelType, 0); }
  public static void AddConsumeParcelId(FlatBufferBuilder builder, long consumeParcelId) { builder.AddLong(5, consumeParcelId, 0); }
  public static void AddConsumeParcelAmount(FlatBufferBuilder builder, long consumeParcelAmount) { builder.AddLong(6, consumeParcelAmount, 0); }
  public static Offset<Japan.GachaCombinedCostExcel> EndGachaCombinedCostExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.GachaCombinedCostExcel>(o);
  }
  public GachaCombinedCostExcelT UnPack() {
    var _o = new GachaCombinedCostExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaCombinedCostExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GachaCombinedCost");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.Priority = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Priority, key) : this.Priority;
    _o.ConsumeGachaTicketType = TableEncryptionService.UseEncryption ? (Japan.GachaTicketType)TableEncryptionService.Convert((int)this.ConsumeGachaTicketType, key) : this.ConsumeGachaTicketType;
    _o.ConsumeGachaTicketTypeAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConsumeGachaTicketTypeAmount, key) : this.ConsumeGachaTicketTypeAmount;
    _o.ConsumeParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.ConsumeParcelType, key) : this.ConsumeParcelType;
    _o.ConsumeParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConsumeParcelId, key) : this.ConsumeParcelId;
    _o.ConsumeParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConsumeParcelAmount, key) : this.ConsumeParcelAmount;
  }
  public static Offset<Japan.GachaCombinedCostExcel> Pack(FlatBufferBuilder builder, GachaCombinedCostExcelT _o) {
    if (_o == null) return default(Offset<Japan.GachaCombinedCostExcel>);
		byte[] key = TableEncryptionService.CreateKey("GachaCombinedCost");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _Priority = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Priority, key) : _o.Priority;
		var _ConsumeGachaTicketType = TableEncryptionService.UseEncryption ? (Japan.GachaTicketType)TableEncryptionService.Convert((int)_o.ConsumeGachaTicketType, key) : _o.ConsumeGachaTicketType;
		var _ConsumeGachaTicketTypeAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConsumeGachaTicketTypeAmount, key) : _o.ConsumeGachaTicketTypeAmount;
		var _ConsumeParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.ConsumeParcelType, key) : _o.ConsumeParcelType;
		var _ConsumeParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConsumeParcelId, key) : _o.ConsumeParcelId;
		var _ConsumeParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConsumeParcelAmount, key) : _o.ConsumeParcelAmount;
    return CreateGachaCombinedCostExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _Priority : _o.Priority,
      TableEncryptionService.UseEncryption ? _ConsumeGachaTicketType : _o.ConsumeGachaTicketType,
      TableEncryptionService.UseEncryption ? _ConsumeGachaTicketTypeAmount : _o.ConsumeGachaTicketTypeAmount,
      TableEncryptionService.UseEncryption ? _ConsumeParcelType : _o.ConsumeParcelType,
      TableEncryptionService.UseEncryption ? _ConsumeParcelId : _o.ConsumeParcelId,
      TableEncryptionService.UseEncryption ? _ConsumeParcelAmount : _o.ConsumeParcelAmount);
  }
}

public class GachaCombinedCostExcelT
{
  public long GroupId { get; set; }
  public long Priority { get; set; }
  public Japan.GachaTicketType ConsumeGachaTicketType { get; set; }
  public long ConsumeGachaTicketTypeAmount { get; set; }
  public Japan.ParcelType ConsumeParcelType { get; set; }
  public long ConsumeParcelId { get; set; }
  public long ConsumeParcelAmount { get; set; }

  public GachaCombinedCostExcelT() {
    this.GroupId = 0;
    this.Priority = 0;
    this.ConsumeGachaTicketType = Japan.GachaTicketType.None;
    this.ConsumeGachaTicketTypeAmount = 0;
    this.ConsumeParcelType = Japan.ParcelType.None;
    this.ConsumeParcelId = 0;
    this.ConsumeParcelAmount = 0;
  }
}


static public class GachaCombinedCostExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Priority*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ConsumeGachaTicketType*/, 4 /*Japan.GachaTicketType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ConsumeGachaTicketTypeAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ConsumeParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ConsumeParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*ConsumeParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
