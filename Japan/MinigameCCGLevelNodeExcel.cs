// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGLevelNodeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGLevelNodeExcel GetRootAsMinigameCCGLevelNodeExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGLevelNodeExcel(_bb, new MinigameCCGLevelNodeExcel()); }
  public static MinigameCCGLevelNodeExcel GetRootAsMinigameCCGLevelNodeExcel(ByteBuffer _bb, MinigameCCGLevelNodeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGLevelNodeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long LevelId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NodeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.CCGLevelNodeIcon NodeIcon { get { int o = __p.__offset(8); return o != 0 ? (Japan.CCGLevelNodeIcon)__p.bb.GetInt(o + __p.bb_pos) : Japan.CCGLevelNodeIcon.None; } }
  public long StageGroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NextNodeId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int NextNodeIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetNextNodeIdBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetNextNodeIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetNextNodeIdArray() { return __p.__vector_as_array<long>(12); }

  public static Offset<Japan.MinigameCCGLevelNodeExcel> CreateMinigameCCGLevelNodeExcel(FlatBufferBuilder builder,
      long LevelId = 0,
      long NodeId = 0,
      Japan.CCGLevelNodeIcon NodeIcon = Japan.CCGLevelNodeIcon.None,
      long StageGroupId = 0,
      VectorOffset NextNodeIdOffset = default(VectorOffset)) {
    builder.StartTable(5);
    MinigameCCGLevelNodeExcel.AddStageGroupId(builder, StageGroupId);
    MinigameCCGLevelNodeExcel.AddNodeId(builder, NodeId);
    MinigameCCGLevelNodeExcel.AddLevelId(builder, LevelId);
    MinigameCCGLevelNodeExcel.AddNextNodeId(builder, NextNodeIdOffset);
    MinigameCCGLevelNodeExcel.AddNodeIcon(builder, NodeIcon);
    return MinigameCCGLevelNodeExcel.EndMinigameCCGLevelNodeExcel(builder);
  }

  public static void StartMinigameCCGLevelNodeExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddLevelId(FlatBufferBuilder builder, long levelId) { builder.AddLong(0, levelId, 0); }
  public static void AddNodeId(FlatBufferBuilder builder, long nodeId) { builder.AddLong(1, nodeId, 0); }
  public static void AddNodeIcon(FlatBufferBuilder builder, Japan.CCGLevelNodeIcon nodeIcon) { builder.AddInt(2, (int)nodeIcon, 0); }
  public static void AddStageGroupId(FlatBufferBuilder builder, long stageGroupId) { builder.AddLong(3, stageGroupId, 0); }
  public static void AddNextNodeId(FlatBufferBuilder builder, VectorOffset nextNodeIdOffset) { builder.AddOffset(4, nextNodeIdOffset.Value, 0); }
  public static VectorOffset CreateNextNodeIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNextNodeIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNextNodeIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNextNodeIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNextNodeIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Japan.MinigameCCGLevelNodeExcel> EndMinigameCCGLevelNodeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGLevelNodeExcel>(o);
  }
  public MinigameCCGLevelNodeExcelT UnPack() {
    var _o = new MinigameCCGLevelNodeExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGLevelNodeExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLevelNode");
    _o.LevelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LevelId, key) : this.LevelId;
    _o.NodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.NodeId, key) : this.NodeId;
    _o.NodeIcon = TableEncryptionService.UseEncryption ? (Japan.CCGLevelNodeIcon)TableEncryptionService.Convert((int)this.NodeIcon, key) : this.NodeIcon;
    _o.StageGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StageGroupId, key) : this.StageGroupId;
    _o.NextNodeId = new List<long>();
    for (var _j = 0; _j < this.NextNodeIdLength; ++_j) {_o.NextNodeId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.NextNodeId(_j), key) : this.NextNodeId(_j));}
  }
  public static Offset<Japan.MinigameCCGLevelNodeExcel> Pack(FlatBufferBuilder builder, MinigameCCGLevelNodeExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGLevelNodeExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLevelNode");
		var _LevelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LevelId, key) : _o.LevelId;
		var _NodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.NodeId, key) : _o.NodeId;
		var _NodeIcon = TableEncryptionService.UseEncryption ? (Japan.CCGLevelNodeIcon)TableEncryptionService.Convert((int)_o.NodeIcon, key) : _o.NodeIcon;
		var _StageGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StageGroupId, key) : _o.StageGroupId;
    var _NextNodeId = default(VectorOffset);
    if (_o.NextNodeId != null) {
      var __NextNodeId = _o.NextNodeId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _NextNodeId = CreateNextNodeIdVector(builder, __NextNodeId);
    }
    return CreateMinigameCCGLevelNodeExcel(
      builder,
      TableEncryptionService.UseEncryption ? _LevelId : _o.LevelId,
      TableEncryptionService.UseEncryption ? _NodeId : _o.NodeId,
      TableEncryptionService.UseEncryption ? _NodeIcon : _o.NodeIcon,
      TableEncryptionService.UseEncryption ? _StageGroupId : _o.StageGroupId,
      _NextNodeId);
  }
}

public class MinigameCCGLevelNodeExcelT
{
  public long LevelId { get; set; }
  public long NodeId { get; set; }
  public Japan.CCGLevelNodeIcon NodeIcon { get; set; }
  public long StageGroupId { get; set; }
  public List<long> NextNodeId { get; set; }

  public MinigameCCGLevelNodeExcelT() {
    this.LevelId = 0;
    this.NodeId = 0;
    this.NodeIcon = Japan.CCGLevelNodeIcon.None;
    this.StageGroupId = 0;
    this.NextNodeId = null;
  }
}


static public class MinigameCCGLevelNodeExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LevelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*NodeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*NodeIcon*/, 4 /*Japan.CCGLevelNodeIcon*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*StageGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*NextNodeId*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
