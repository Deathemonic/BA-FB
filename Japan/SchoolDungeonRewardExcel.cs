// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct SchoolDungeonRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SchoolDungeonRewardExcel GetRootAsSchoolDungeonRewardExcel(ByteBuffer _bb) { return GetRootAsSchoolDungeonRewardExcel(_bb, new SchoolDungeonRewardExcel()); }
  public static SchoolDungeonRewardExcel GetRootAsSchoolDungeonRewardExcel(ByteBuffer _bb, SchoolDungeonRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SchoolDungeonRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.SchoolDungeonType DungeonType { get { int o = __p.__offset(6); return o != 0 ? (Japan.SchoolDungeonType)__p.bb.GetInt(o + __p.bb_pos) : Japan.SchoolDungeonType.SchoolA; } }
  public Japan.RewardTag RewardTag { get { int o = __p.__offset(8); return o != 0 ? (Japan.RewardTag)__p.bb.GetInt(o + __p.bb_pos) : Japan.RewardTag.Default; } }
  public Japan.ParcelType RewardParcelType { get { int o = __p.__offset(10); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelProbability { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsDisplayed { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Japan.SchoolDungeonRewardExcel> CreateSchoolDungeonRewardExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      Japan.SchoolDungeonType DungeonType = Japan.SchoolDungeonType.SchoolA,
      Japan.RewardTag RewardTag = Japan.RewardTag.Default,
      Japan.ParcelType RewardParcelType = Japan.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0,
      long RewardParcelProbability = 0,
      bool IsDisplayed = false) {
    builder.StartTable(8);
    SchoolDungeonRewardExcel.AddRewardParcelProbability(builder, RewardParcelProbability);
    SchoolDungeonRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    SchoolDungeonRewardExcel.AddRewardParcelId(builder, RewardParcelId);
    SchoolDungeonRewardExcel.AddGroupId(builder, GroupId);
    SchoolDungeonRewardExcel.AddRewardParcelType(builder, RewardParcelType);
    SchoolDungeonRewardExcel.AddRewardTag(builder, RewardTag);
    SchoolDungeonRewardExcel.AddDungeonType(builder, DungeonType);
    SchoolDungeonRewardExcel.AddIsDisplayed(builder, IsDisplayed);
    return SchoolDungeonRewardExcel.EndSchoolDungeonRewardExcel(builder);
  }

  public static void StartSchoolDungeonRewardExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddDungeonType(FlatBufferBuilder builder, Japan.SchoolDungeonType dungeonType) { builder.AddInt(1, (int)dungeonType, 0); }
  public static void AddRewardTag(FlatBufferBuilder builder, Japan.RewardTag rewardTag) { builder.AddInt(2, (int)rewardTag, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, Japan.ParcelType rewardParcelType) { builder.AddInt(3, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(4, rewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long rewardParcelAmount) { builder.AddLong(5, rewardParcelAmount, 0); }
  public static void AddRewardParcelProbability(FlatBufferBuilder builder, long rewardParcelProbability) { builder.AddLong(6, rewardParcelProbability, 0); }
  public static void AddIsDisplayed(FlatBufferBuilder builder, bool isDisplayed) { builder.AddBool(7, isDisplayed, false); }
  public static Offset<Japan.SchoolDungeonRewardExcel> EndSchoolDungeonRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.SchoolDungeonRewardExcel>(o);
  }
  public SchoolDungeonRewardExcelT UnPack() {
    var _o = new SchoolDungeonRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SchoolDungeonRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("SchoolDungeonReward");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.DungeonType = TableEncryptionService.UseEncryption ? (Japan.SchoolDungeonType)TableEncryptionService.Convert((int)this.DungeonType, key) : this.DungeonType;
    _o.RewardTag = TableEncryptionService.UseEncryption ? (Japan.RewardTag)TableEncryptionService.Convert((int)this.RewardTag, key) : this.RewardTag;
    _o.RewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType, key) : this.RewardParcelType;
    _o.RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId, key) : this.RewardParcelId;
    _o.RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelAmount, key) : this.RewardParcelAmount;
    _o.RewardParcelProbability = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelProbability, key) : this.RewardParcelProbability;
    _o.IsDisplayed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsDisplayed, key) : this.IsDisplayed;
  }
  public static Offset<Japan.SchoolDungeonRewardExcel> Pack(FlatBufferBuilder builder, SchoolDungeonRewardExcelT _o) {
    if (_o == null) return default(Offset<Japan.SchoolDungeonRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("SchoolDungeonReward");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _DungeonType = TableEncryptionService.UseEncryption ? (Japan.SchoolDungeonType)TableEncryptionService.Convert((int)_o.DungeonType, key) : _o.DungeonType;
		var _RewardTag = TableEncryptionService.UseEncryption ? (Japan.RewardTag)TableEncryptionService.Convert((int)_o.RewardTag, key) : _o.RewardTag;
		var _RewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.RewardParcelType, key) : _o.RewardParcelType;
		var _RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelId, key) : _o.RewardParcelId;
		var _RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelAmount, key) : _o.RewardParcelAmount;
		var _RewardParcelProbability = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelProbability, key) : _o.RewardParcelProbability;
		var _IsDisplayed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsDisplayed, key) : _o.IsDisplayed;
    return CreateSchoolDungeonRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _DungeonType : _o.DungeonType,
      TableEncryptionService.UseEncryption ? _RewardTag : _o.RewardTag,
      TableEncryptionService.UseEncryption ? _RewardParcelType : _o.RewardParcelType,
      TableEncryptionService.UseEncryption ? _RewardParcelId : _o.RewardParcelId,
      TableEncryptionService.UseEncryption ? _RewardParcelAmount : _o.RewardParcelAmount,
      TableEncryptionService.UseEncryption ? _RewardParcelProbability : _o.RewardParcelProbability,
      TableEncryptionService.UseEncryption ? _IsDisplayed : _o.IsDisplayed);
  }
}

public class SchoolDungeonRewardExcelT
{
  public long GroupId { get; set; }
  public Japan.SchoolDungeonType DungeonType { get; set; }
  public Japan.RewardTag RewardTag { get; set; }
  public Japan.ParcelType RewardParcelType { get; set; }
  public long RewardParcelId { get; set; }
  public long RewardParcelAmount { get; set; }
  public long RewardParcelProbability { get; set; }
  public bool IsDisplayed { get; set; }

  public SchoolDungeonRewardExcelT() {
    this.GroupId = 0;
    this.DungeonType = Japan.SchoolDungeonType.SchoolA;
    this.RewardTag = Japan.RewardTag.Default;
    this.RewardParcelType = Japan.ParcelType.None;
    this.RewardParcelId = 0;
    this.RewardParcelAmount = 0;
    this.RewardParcelProbability = 0;
    this.IsDisplayed = false;
  }
}


static public class SchoolDungeonRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DungeonType*/, 4 /*Japan.SchoolDungeonType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RewardTag*/, 4 /*Japan.RewardTag*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RewardParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*RewardParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*RewardParcelProbability*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*IsDisplayed*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
