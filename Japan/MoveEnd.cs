// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MoveEnd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MoveEnd GetRootAsMoveEnd(ByteBuffer _bb) { return GetRootAsMoveEnd(_bb, new MoveEnd()); }
  public static MoveEnd GetRootAsMoveEnd(ByteBuffer _bb, MoveEnd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveEnd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Japan.Motion? NormalOffset { get { int o = __p.__offset(4); return o != 0 ? (Japan.Motion?)(new Japan.Motion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Japan.Motion? StandOffset { get { int o = __p.__offset(6); return o != 0 ? (Japan.Motion?)(new Japan.Motion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Japan.Motion? KneelOffset { get { int o = __p.__offset(8); return o != 0 ? (Japan.Motion?)(new Japan.Motion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Japan.MoveEnd> CreateMoveEnd(FlatBufferBuilder builder,
      Offset<Japan.Motion> NormalOffsetOffset = default(Offset<Japan.Motion>),
      Offset<Japan.Motion> StandOffsetOffset = default(Offset<Japan.Motion>),
      Offset<Japan.Motion> KneelOffsetOffset = default(Offset<Japan.Motion>)) {
    builder.StartTable(3);
    MoveEnd.AddKneelOffset(builder, KneelOffsetOffset);
    MoveEnd.AddStandOffset(builder, StandOffsetOffset);
    MoveEnd.AddNormalOffset(builder, NormalOffsetOffset);
    return MoveEnd.EndMoveEnd(builder);
  }

  public static void StartMoveEnd(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddNormalOffset(FlatBufferBuilder builder, Offset<Japan.Motion> normalOffsetOffset) { builder.AddOffset(0, normalOffsetOffset.Value, 0); }
  public static void AddStandOffset(FlatBufferBuilder builder, Offset<Japan.Motion> standOffsetOffset) { builder.AddOffset(1, standOffsetOffset.Value, 0); }
  public static void AddKneelOffset(FlatBufferBuilder builder, Offset<Japan.Motion> kneelOffsetOffset) { builder.AddOffset(2, kneelOffsetOffset.Value, 0); }
  public static Offset<Japan.MoveEnd> EndMoveEnd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MoveEnd>(o);
  }
  public MoveEndT UnPack() {
    var _o = new MoveEndT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MoveEndT _o) {
		byte[] key = TableEncryptionService.CreateKey("Mo");
    _o.NormalOffset = this.NormalOffset.HasValue ? this.NormalOffset.Value.UnPack() : null;
    _o.StandOffset = this.StandOffset.HasValue ? this.StandOffset.Value.UnPack() : null;
    _o.KneelOffset = this.KneelOffset.HasValue ? this.KneelOffset.Value.UnPack() : null;
  }
  public static Offset<Japan.MoveEnd> Pack(FlatBufferBuilder builder, MoveEndT _o) {
    if (_o == null) return default(Offset<Japan.MoveEnd>);
		byte[] key = TableEncryptionService.CreateKey("Mo");
    var _NormalOffset = _o.NormalOffset == null ? default(Offset<Japan.Motion>) : Japan.Motion.Pack(builder, _o.NormalOffset);
    var _StandOffset = _o.StandOffset == null ? default(Offset<Japan.Motion>) : Japan.Motion.Pack(builder, _o.StandOffset);
    var _KneelOffset = _o.KneelOffset == null ? default(Offset<Japan.Motion>) : Japan.Motion.Pack(builder, _o.KneelOffset);
    return CreateMoveEnd(
      builder,
      _NormalOffset,
      _StandOffset,
      _KneelOffset);
  }
}

public class MoveEndT
{
  public Japan.MotionT NormalOffset { get; set; }
  public Japan.MotionT StandOffset { get; set; }
  public Japan.MotionT KneelOffset { get; set; }

  public MoveEndT() {
    this.NormalOffset = null;
    this.StandOffset = null;
    this.KneelOffset = null;
  }
}


static public class MoveEndVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*NormalOffset*/, Japan.MotionVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 6 /*StandOffset*/, Japan.MotionVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*KneelOffset*/, Japan.MotionVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
