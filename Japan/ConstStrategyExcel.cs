// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConstStrategyExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConstStrategyExcel GetRootAsConstStrategyExcel(ByteBuffer _bb) { return GetRootAsConstStrategyExcel(_bb, new ConstStrategyExcel()); }
  public static ConstStrategyExcel GetRootAsConstStrategyExcel(ByteBuffer _bb, ConstStrategyExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstStrategyExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float HexaMapBoundaryOffset { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HexaMapStartCameraOffset { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMax { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMin { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomDefault { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public Japan.CurrencyTypes HealCostType { get { int o = __p.__offset(14); return o != 0 ? (Japan.CurrencyTypes)__p.bb.GetInt(o + __p.bb_pos) : Japan.CurrencyTypes.Invalid; } }
  public long HealCostAmount(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int HealCostAmountLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetHealCostAmountBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetHealCostAmountBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetHealCostAmountArray() { return __p.__vector_as_array<long>(16); }
  public int CanHealHpRate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PlayTimeLimitInSeconds { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int AdventureEchelonCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RaidEchelonCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DefaultEchelonCount { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventContentEchelonCount { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TimeAttackDungeonEchelonCount { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WorldRaidEchelonCount { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TacticSkipClearTimeSeconds { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TacticSkipFramePerSecond { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConquestEchelonCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StoryEchelonCount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetNameMaxLength { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetSelectStageMaxCount { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetMaxSweepCount { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MultiSweepPresetSelectParcelMaxCount { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Japan.ConstStrategyExcel> CreateConstStrategyExcel(FlatBufferBuilder builder,
      float HexaMapBoundaryOffset = 0.0f,
      float HexaMapStartCameraOffset = 0.0f,
      float CameraZoomMax = 0.0f,
      float CameraZoomMin = 0.0f,
      float CameraZoomDefault = 0.0f,
      Japan.CurrencyTypes HealCostType = Japan.CurrencyTypes.Invalid,
      VectorOffset healCostAmountOffset = default(VectorOffset),
      int CanHealHpRate = 0,
      long PlayTimeLimitInSeconds = 0,
      int AdventureEchelonCount = 0,
      int RaidEchelonCount = 0,
      int DefaultEchelonCount = 0,
      int EventContentEchelonCount = 0,
      int TimeAttackDungeonEchelonCount = 0,
      int WorldRaidEchelonCount = 0,
      int TacticSkipClearTimeSeconds = 0,
      int TacticSkipFramePerSecond = 0,
      int ConquestEchelonCount = 0,
      int StoryEchelonCount = 0,
      int MultiSweepPresetCount = 0,
      int MultiSweepPresetNameMaxLength = 0,
      int MultiSweepPresetSelectStageMaxCount = 0,
      int MultiSweepPresetMaxSweepCount = 0,
      int MultiSweepPresetSelectParcelMaxCount = 0) {
    builder.StartTable(24);
    ConstStrategyExcel.AddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds);
    ConstStrategyExcel.AddMultiSweepPresetSelectParcelMaxCount(builder, MultiSweepPresetSelectParcelMaxCount);
    ConstStrategyExcel.AddMultiSweepPresetMaxSweepCount(builder, MultiSweepPresetMaxSweepCount);
    ConstStrategyExcel.AddMultiSweepPresetSelectStageMaxCount(builder, MultiSweepPresetSelectStageMaxCount);
    ConstStrategyExcel.AddMultiSweepPresetNameMaxLength(builder, MultiSweepPresetNameMaxLength);
    ConstStrategyExcel.AddMultiSweepPresetCount(builder, MultiSweepPresetCount);
    ConstStrategyExcel.AddStoryEchelonCount(builder, StoryEchelonCount);
    ConstStrategyExcel.AddConquestEchelonCount(builder, ConquestEchelonCount);
    ConstStrategyExcel.AddTacticSkipFramePerSecond(builder, TacticSkipFramePerSecond);
    ConstStrategyExcel.AddTacticSkipClearTimeSeconds(builder, TacticSkipClearTimeSeconds);
    ConstStrategyExcel.AddWorldRaidEchelonCount(builder, WorldRaidEchelonCount);
    ConstStrategyExcel.AddTimeAttackDungeonEchelonCount(builder, TimeAttackDungeonEchelonCount);
    ConstStrategyExcel.AddEventContentEchelonCount(builder, EventContentEchelonCount);
    ConstStrategyExcel.AddDefaultEchelonCount(builder, DefaultEchelonCount);
    ConstStrategyExcel.AddRaidEchelonCount(builder, RaidEchelonCount);
    ConstStrategyExcel.AddAdventureEchelonCount(builder, AdventureEchelonCount);
    ConstStrategyExcel.AddCanHealHpRate(builder, CanHealHpRate);
    ConstStrategyExcel.AddHealCostAmount(builder, healCostAmountOffset);
    ConstStrategyExcel.AddHealCostType(builder, HealCostType);
    ConstStrategyExcel.AddCameraZoomDefault(builder, CameraZoomDefault);
    ConstStrategyExcel.AddCameraZoomMin(builder, CameraZoomMin);
    ConstStrategyExcel.AddCameraZoomMax(builder, CameraZoomMax);
    ConstStrategyExcel.AddHexaMapStartCameraOffset(builder, HexaMapStartCameraOffset);
    ConstStrategyExcel.AddHexaMapBoundaryOffset(builder, HexaMapBoundaryOffset);
    return ConstStrategyExcel.EndConstStrategyExcel(builder);
  }

  public static void StartConstStrategyExcel(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddHexaMapBoundaryOffset(FlatBufferBuilder builder, float hexaMapBoundaryOffset) { builder.AddFloat(0, hexaMapBoundaryOffset, 0.0f); }
  public static void AddHexaMapStartCameraOffset(FlatBufferBuilder builder, float hexaMapStartCameraOffset) { builder.AddFloat(1, hexaMapStartCameraOffset, 0.0f); }
  public static void AddCameraZoomMax(FlatBufferBuilder builder, float cameraZoomMax) { builder.AddFloat(2, cameraZoomMax, 0.0f); }
  public static void AddCameraZoomMin(FlatBufferBuilder builder, float cameraZoomMin) { builder.AddFloat(3, cameraZoomMin, 0.0f); }
  public static void AddCameraZoomDefault(FlatBufferBuilder builder, float cameraZoomDefault) { builder.AddFloat(4, cameraZoomDefault, 0.0f); }
  public static void AddHealCostType(FlatBufferBuilder builder, Japan.CurrencyTypes healCostType) { builder.AddInt(5, (int)healCostType, 0); }
  public static void AddHealCostAmount(FlatBufferBuilder builder, VectorOffset healCostAmountOffset) { builder.AddOffset(6, healCostAmountOffset.Value, 0); }
  public static VectorOffset CreateHealCostAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHealCostAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHealCostAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHealCostAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHealCostAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCanHealHpRate(FlatBufferBuilder builder, int canHealHpRate) { builder.AddInt(7, canHealHpRate, 0); }
  public static void AddPlayTimeLimitInSeconds(FlatBufferBuilder builder, long playTimeLimitInSeconds) { builder.AddLong(8, playTimeLimitInSeconds, 0); }
  public static void AddAdventureEchelonCount(FlatBufferBuilder builder, int adventureEchelonCount) { builder.AddInt(9, adventureEchelonCount, 0); }
  public static void AddRaidEchelonCount(FlatBufferBuilder builder, int raidEchelonCount) { builder.AddInt(10, raidEchelonCount, 0); }
  public static void AddDefaultEchelonCount(FlatBufferBuilder builder, int defaultEchelonCount) { builder.AddInt(11, defaultEchelonCount, 0); }
  public static void AddEventContentEchelonCount(FlatBufferBuilder builder, int eventContentEchelonCount) { builder.AddInt(12, eventContentEchelonCount, 0); }
  public static void AddTimeAttackDungeonEchelonCount(FlatBufferBuilder builder, int timeAttackDungeonEchelonCount) { builder.AddInt(13, timeAttackDungeonEchelonCount, 0); }
  public static void AddWorldRaidEchelonCount(FlatBufferBuilder builder, int worldRaidEchelonCount) { builder.AddInt(14, worldRaidEchelonCount, 0); }
  public static void AddTacticSkipClearTimeSeconds(FlatBufferBuilder builder, int tacticSkipClearTimeSeconds) { builder.AddInt(15, tacticSkipClearTimeSeconds, 0); }
  public static void AddTacticSkipFramePerSecond(FlatBufferBuilder builder, int tacticSkipFramePerSecond) { builder.AddInt(16, tacticSkipFramePerSecond, 0); }
  public static void AddConquestEchelonCount(FlatBufferBuilder builder, int conquestEchelonCount) { builder.AddInt(17, conquestEchelonCount, 0); }
  public static void AddStoryEchelonCount(FlatBufferBuilder builder, int storyEchelonCount) { builder.AddInt(18, storyEchelonCount, 0); }
  public static void AddMultiSweepPresetCount(FlatBufferBuilder builder, int multiSweepPresetCount) { builder.AddInt(19, multiSweepPresetCount, 0); }
  public static void AddMultiSweepPresetNameMaxLength(FlatBufferBuilder builder, int multiSweepPresetNameMaxLength) { builder.AddInt(20, multiSweepPresetNameMaxLength, 0); }
  public static void AddMultiSweepPresetSelectStageMaxCount(FlatBufferBuilder builder, int multiSweepPresetSelectStageMaxCount) { builder.AddInt(21, multiSweepPresetSelectStageMaxCount, 0); }
  public static void AddMultiSweepPresetMaxSweepCount(FlatBufferBuilder builder, int multiSweepPresetMaxSweepCount) { builder.AddInt(22, multiSweepPresetMaxSweepCount, 0); }
  public static void AddMultiSweepPresetSelectParcelMaxCount(FlatBufferBuilder builder, int multiSweepPresetSelectParcelMaxCount) { builder.AddInt(23, multiSweepPresetSelectParcelMaxCount, 0); }
  public static Offset<Japan.ConstStrategyExcel> EndConstStrategyExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.ConstStrategyExcel>(o);
  }
  public ConstStrategyExcelT UnPack() {
    var _o = new ConstStrategyExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstStrategyExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstStrategy");
    _o.HexaMapBoundaryOffset = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.HexaMapBoundaryOffset, key) : this.HexaMapBoundaryOffset;
    _o.HexaMapStartCameraOffset = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.HexaMapStartCameraOffset, key) : this.HexaMapStartCameraOffset;
    _o.CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMax, key) : this.CameraZoomMax;
    _o.CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMin, key) : this.CameraZoomMin;
    _o.CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomDefault, key) : this.CameraZoomDefault;
    _o.HealCostType = TableEncryptionService.UseEncryption ? (Japan.CurrencyTypes)TableEncryptionService.Convert((int)this.HealCostType, key) : this.HealCostType;
    _o.HealCostAmount = new List<long>();
    for (var _j = 0; _j < this.HealCostAmountLength; ++_j) {_o.HealCostAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealCostAmount(_j), key) : this.HealCostAmount(_j));}
    _o.CanHealHpRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CanHealHpRate, key) : this.CanHealHpRate;
    _o.PlayTimeLimitInSeconds = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayTimeLimitInSeconds, key) : this.PlayTimeLimitInSeconds;
    _o.AdventureEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.AdventureEchelonCount, key) : this.AdventureEchelonCount;
    _o.RaidEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RaidEchelonCount, key) : this.RaidEchelonCount;
    _o.DefaultEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DefaultEchelonCount, key) : this.DefaultEchelonCount;
    _o.EventContentEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EventContentEchelonCount, key) : this.EventContentEchelonCount;
    _o.TimeAttackDungeonEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.TimeAttackDungeonEchelonCount, key) : this.TimeAttackDungeonEchelonCount;
    _o.WorldRaidEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.WorldRaidEchelonCount, key) : this.WorldRaidEchelonCount;
    _o.TacticSkipClearTimeSeconds = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.TacticSkipClearTimeSeconds, key) : this.TacticSkipClearTimeSeconds;
    _o.TacticSkipFramePerSecond = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.TacticSkipFramePerSecond, key) : this.TacticSkipFramePerSecond;
    _o.ConquestEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ConquestEchelonCount, key) : this.ConquestEchelonCount;
    _o.StoryEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StoryEchelonCount, key) : this.StoryEchelonCount;
    _o.MultiSweepPresetCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MultiSweepPresetCount, key) : this.MultiSweepPresetCount;
    _o.MultiSweepPresetNameMaxLength = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MultiSweepPresetNameMaxLength, key) : this.MultiSweepPresetNameMaxLength;
    _o.MultiSweepPresetSelectStageMaxCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MultiSweepPresetSelectStageMaxCount, key) : this.MultiSweepPresetSelectStageMaxCount;
    _o.MultiSweepPresetMaxSweepCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MultiSweepPresetMaxSweepCount, key) : this.MultiSweepPresetMaxSweepCount;
    _o.MultiSweepPresetSelectParcelMaxCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MultiSweepPresetSelectParcelMaxCount, key) : this.MultiSweepPresetSelectParcelMaxCount;
  }
  public static Offset<Japan.ConstStrategyExcel> Pack(FlatBufferBuilder builder, ConstStrategyExcelT _o) {
    if (_o == null) return default(Offset<Japan.ConstStrategyExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConstStrategy");
		var _HexaMapBoundaryOffset = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.HexaMapBoundaryOffset, key) : _o.HexaMapBoundaryOffset;
		var _HexaMapStartCameraOffset = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.HexaMapStartCameraOffset, key) : _o.HexaMapStartCameraOffset;
		var _CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMax, key) : _o.CameraZoomMax;
		var _CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMin, key) : _o.CameraZoomMin;
		var _CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomDefault, key) : _o.CameraZoomDefault;
		var _HealCostType = TableEncryptionService.UseEncryption ? (Japan.CurrencyTypes)TableEncryptionService.Convert((int)_o.HealCostType, key) : _o.HealCostType;
    var _healCostAmount = default(VectorOffset);
    if (_o.HealCostAmount != null) {
      var __healCostAmount = _o.HealCostAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _healCostAmount = CreateHealCostAmountVector(builder, __healCostAmount);
    }
		var _CanHealHpRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CanHealHpRate, key) : _o.CanHealHpRate;
		var _PlayTimeLimitInSeconds = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayTimeLimitInSeconds, key) : _o.PlayTimeLimitInSeconds;
		var _AdventureEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.AdventureEchelonCount, key) : _o.AdventureEchelonCount;
		var _RaidEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RaidEchelonCount, key) : _o.RaidEchelonCount;
		var _DefaultEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DefaultEchelonCount, key) : _o.DefaultEchelonCount;
		var _EventContentEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EventContentEchelonCount, key) : _o.EventContentEchelonCount;
		var _TimeAttackDungeonEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.TimeAttackDungeonEchelonCount, key) : _o.TimeAttackDungeonEchelonCount;
		var _WorldRaidEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.WorldRaidEchelonCount, key) : _o.WorldRaidEchelonCount;
		var _TacticSkipClearTimeSeconds = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.TacticSkipClearTimeSeconds, key) : _o.TacticSkipClearTimeSeconds;
		var _TacticSkipFramePerSecond = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.TacticSkipFramePerSecond, key) : _o.TacticSkipFramePerSecond;
		var _ConquestEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ConquestEchelonCount, key) : _o.ConquestEchelonCount;
		var _StoryEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StoryEchelonCount, key) : _o.StoryEchelonCount;
		var _MultiSweepPresetCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MultiSweepPresetCount, key) : _o.MultiSweepPresetCount;
		var _MultiSweepPresetNameMaxLength = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MultiSweepPresetNameMaxLength, key) : _o.MultiSweepPresetNameMaxLength;
		var _MultiSweepPresetSelectStageMaxCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MultiSweepPresetSelectStageMaxCount, key) : _o.MultiSweepPresetSelectStageMaxCount;
		var _MultiSweepPresetMaxSweepCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MultiSweepPresetMaxSweepCount, key) : _o.MultiSweepPresetMaxSweepCount;
		var _MultiSweepPresetSelectParcelMaxCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MultiSweepPresetSelectParcelMaxCount, key) : _o.MultiSweepPresetSelectParcelMaxCount;
    return CreateConstStrategyExcel(
      builder,
      TableEncryptionService.UseEncryption ? _HexaMapBoundaryOffset : _o.HexaMapBoundaryOffset,
      TableEncryptionService.UseEncryption ? _HexaMapStartCameraOffset : _o.HexaMapStartCameraOffset,
      TableEncryptionService.UseEncryption ? _CameraZoomMax : _o.CameraZoomMax,
      TableEncryptionService.UseEncryption ? _CameraZoomMin : _o.CameraZoomMin,
      TableEncryptionService.UseEncryption ? _CameraZoomDefault : _o.CameraZoomDefault,
      TableEncryptionService.UseEncryption ? _HealCostType : _o.HealCostType,
      _healCostAmount,
      TableEncryptionService.UseEncryption ? _CanHealHpRate : _o.CanHealHpRate,
      TableEncryptionService.UseEncryption ? _PlayTimeLimitInSeconds : _o.PlayTimeLimitInSeconds,
      TableEncryptionService.UseEncryption ? _AdventureEchelonCount : _o.AdventureEchelonCount,
      TableEncryptionService.UseEncryption ? _RaidEchelonCount : _o.RaidEchelonCount,
      TableEncryptionService.UseEncryption ? _DefaultEchelonCount : _o.DefaultEchelonCount,
      TableEncryptionService.UseEncryption ? _EventContentEchelonCount : _o.EventContentEchelonCount,
      TableEncryptionService.UseEncryption ? _TimeAttackDungeonEchelonCount : _o.TimeAttackDungeonEchelonCount,
      TableEncryptionService.UseEncryption ? _WorldRaidEchelonCount : _o.WorldRaidEchelonCount,
      TableEncryptionService.UseEncryption ? _TacticSkipClearTimeSeconds : _o.TacticSkipClearTimeSeconds,
      TableEncryptionService.UseEncryption ? _TacticSkipFramePerSecond : _o.TacticSkipFramePerSecond,
      TableEncryptionService.UseEncryption ? _ConquestEchelonCount : _o.ConquestEchelonCount,
      TableEncryptionService.UseEncryption ? _StoryEchelonCount : _o.StoryEchelonCount,
      TableEncryptionService.UseEncryption ? _MultiSweepPresetCount : _o.MultiSweepPresetCount,
      TableEncryptionService.UseEncryption ? _MultiSweepPresetNameMaxLength : _o.MultiSweepPresetNameMaxLength,
      TableEncryptionService.UseEncryption ? _MultiSweepPresetSelectStageMaxCount : _o.MultiSweepPresetSelectStageMaxCount,
      TableEncryptionService.UseEncryption ? _MultiSweepPresetMaxSweepCount : _o.MultiSweepPresetMaxSweepCount,
      TableEncryptionService.UseEncryption ? _MultiSweepPresetSelectParcelMaxCount : _o.MultiSweepPresetSelectParcelMaxCount);
  }
}

public class ConstStrategyExcelT
{
  public float HexaMapBoundaryOffset { get; set; }
  public float HexaMapStartCameraOffset { get; set; }
  public float CameraZoomMax { get; set; }
  public float CameraZoomMin { get; set; }
  public float CameraZoomDefault { get; set; }
  public Japan.CurrencyTypes HealCostType { get; set; }
  public List<long> HealCostAmount { get; set; }
  public int CanHealHpRate { get; set; }
  public long PlayTimeLimitInSeconds { get; set; }
  public int AdventureEchelonCount { get; set; }
  public int RaidEchelonCount { get; set; }
  public int DefaultEchelonCount { get; set; }
  public int EventContentEchelonCount { get; set; }
  public int TimeAttackDungeonEchelonCount { get; set; }
  public int WorldRaidEchelonCount { get; set; }
  public int TacticSkipClearTimeSeconds { get; set; }
  public int TacticSkipFramePerSecond { get; set; }
  public int ConquestEchelonCount { get; set; }
  public int StoryEchelonCount { get; set; }
  public int MultiSweepPresetCount { get; set; }
  public int MultiSweepPresetNameMaxLength { get; set; }
  public int MultiSweepPresetSelectStageMaxCount { get; set; }
  public int MultiSweepPresetMaxSweepCount { get; set; }
  public int MultiSweepPresetSelectParcelMaxCount { get; set; }

  public ConstStrategyExcelT() {
    this.HexaMapBoundaryOffset = 0.0f;
    this.HexaMapStartCameraOffset = 0.0f;
    this.CameraZoomMax = 0.0f;
    this.CameraZoomMin = 0.0f;
    this.CameraZoomDefault = 0.0f;
    this.HealCostType = Japan.CurrencyTypes.Invalid;
    this.HealCostAmount = null;
    this.CanHealHpRate = 0;
    this.PlayTimeLimitInSeconds = 0;
    this.AdventureEchelonCount = 0;
    this.RaidEchelonCount = 0;
    this.DefaultEchelonCount = 0;
    this.EventContentEchelonCount = 0;
    this.TimeAttackDungeonEchelonCount = 0;
    this.WorldRaidEchelonCount = 0;
    this.TacticSkipClearTimeSeconds = 0;
    this.TacticSkipFramePerSecond = 0;
    this.ConquestEchelonCount = 0;
    this.StoryEchelonCount = 0;
    this.MultiSweepPresetCount = 0;
    this.MultiSweepPresetNameMaxLength = 0;
    this.MultiSweepPresetSelectStageMaxCount = 0;
    this.MultiSweepPresetMaxSweepCount = 0;
    this.MultiSweepPresetSelectParcelMaxCount = 0;
  }
}


static public class ConstStrategyExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*HexaMapBoundaryOffset*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*HexaMapStartCameraOffset*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CameraZoomMax*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CameraZoomMin*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CameraZoomDefault*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*HealCostType*/, 4 /*Japan.CurrencyTypes*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*HealCostAmount*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 18 /*CanHealHpRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*PlayTimeLimitInSeconds*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*AdventureEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*RaidEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*DefaultEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*EventContentEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*TimeAttackDungeonEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*WorldRaidEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*TacticSkipClearTimeSeconds*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*TacticSkipFramePerSecond*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*ConquestEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*StoryEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*MultiSweepPresetCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*MultiSweepPresetNameMaxLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*MultiSweepPresetSelectStageMaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*MultiSweepPresetMaxSweepCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*MultiSweepPresetSelectParcelMaxCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
