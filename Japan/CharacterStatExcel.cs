// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterStatExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterStatExcel GetRootAsCharacterStatExcel(ByteBuffer _bb) { return GetRootAsCharacterStatExcel(_bb, new CharacterStatExcel()); }
  public static CharacterStatExcel GetRootAsCharacterStatExcel(ByteBuffer _bb, CharacterStatExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterStatExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CharacterId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StabilityRate { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StabilityPoint { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AttackPower1 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AttackPower100 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxHP1 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxHP100 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefensePower1 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefensePower100 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealPower1 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealPower100 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DodgePoint { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyPoint { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalPoint { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalResistPoint { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalDamageRate { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalDamageResistRate { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BlockRate { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealEffectivenessRate { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OppressionPower { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OppressionResist { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefensePenetration1 { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefensePenetration100 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefensePenetrationResist1 { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefensePenetrationResist100 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceExplosionRate { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhancePierceRate { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceMysticRate { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceSonicRate { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceSiegeRate { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceNormalRate { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceLightArmorRate { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceHeavyArmorRate { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceUnarmedRate { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceElasticArmorRate { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceStructureRate { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceNormalArmorRate { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExtendBuffDuration { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExtendDebuffDuration { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExtendCrowdControlDuration { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AmmoCount { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AmmoCost { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long IgnoreDelayCount { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NormalAttackSpeed { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Range { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long InitialRangeRate { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MoveSpeed { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SightPoint { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ActiveGauge { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int GroggyGauge { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroggyTime { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long StrategyMobility { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ActionCount { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StrategySightRange { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DamageRatio { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DamagedRatio { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DamageRatio2Increase { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DamageRatio2Decrease { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DamagedRatio2Increase { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DamagedRatio2Decrease { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExDamagedRatioIncrease { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExDamagedRatioDecrease { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceExDamageRate { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ReduceExDamagedRate { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnhanceBasicsDamageRate { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ReduceBasicsDamagedRate { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealRate { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealLightArmorRate { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealHeavyArmorRate { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealUnarmedRate { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealElasticArmorRate { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealNormalArmorRate { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealedExplosionRate { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealedPierceRate { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealedMysticRate { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealedSonicRate { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HealedNormalRate { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.TerrainAdaptationStat StreetBattleAdaptation { get { int o = __p.__offset(158); return o != 0 ? (Japan.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : Japan.TerrainAdaptationStat.D; } }
  public Japan.TerrainAdaptationStat OutdoorBattleAdaptation { get { int o = __p.__offset(160); return o != 0 ? (Japan.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : Japan.TerrainAdaptationStat.D; } }
  public Japan.TerrainAdaptationStat IndoorBattleAdaptation { get { int o = __p.__offset(162); return o != 0 ? (Japan.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : Japan.TerrainAdaptationStat.D; } }
  public long RegenCost { get { int o = __p.__offset(164); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.CharacterStatExcel> CreateCharacterStatExcel(FlatBufferBuilder builder,
      long CharacterId = 0,
      long StabilityRate = 0,
      long StabilityPoint = 0,
      long AttackPower1 = 0,
      long AttackPower100 = 0,
      long MaxHP1 = 0,
      long MaxHP100 = 0,
      long DefensePower1 = 0,
      long DefensePower100 = 0,
      long HealPower1 = 0,
      long HealPower100 = 0,
      long DodgePoint = 0,
      long AccuracyPoint = 0,
      long CriticalPoint = 0,
      long CriticalResistPoint = 0,
      long CriticalDamageRate = 0,
      long CriticalDamageResistRate = 0,
      long BlockRate = 0,
      long HealEffectivenessRate = 0,
      long OppressionPower = 0,
      long OppressionResist = 0,
      long DefensePenetration1 = 0,
      long DefensePenetration100 = 0,
      long DefensePenetrationResist1 = 0,
      long DefensePenetrationResist100 = 0,
      long EnhanceExplosionRate = 0,
      long EnhancePierceRate = 0,
      long EnhanceMysticRate = 0,
      long EnhanceSonicRate = 0,
      long EnhanceSiegeRate = 0,
      long EnhanceNormalRate = 0,
      long EnhanceLightArmorRate = 0,
      long EnhanceHeavyArmorRate = 0,
      long EnhanceUnarmedRate = 0,
      long EnhanceElasticArmorRate = 0,
      long EnhanceStructureRate = 0,
      long EnhanceNormalArmorRate = 0,
      long ExtendBuffDuration = 0,
      long ExtendDebuffDuration = 0,
      long ExtendCrowdControlDuration = 0,
      long AmmoCount = 0,
      long AmmoCost = 0,
      long IgnoreDelayCount = 0,
      long NormalAttackSpeed = 0,
      long Range = 0,
      long InitialRangeRate = 0,
      long MoveSpeed = 0,
      long SightPoint = 0,
      long ActiveGauge = 0,
      int GroggyGauge = 0,
      int GroggyTime = 0,
      long StrategyMobility = 0,
      long ActionCount = 0,
      long StrategySightRange = 0,
      long DamageRatio = 0,
      long DamagedRatio = 0,
      long DamageRatio2Increase = 0,
      long DamageRatio2Decrease = 0,
      long DamagedRatio2Increase = 0,
      long DamagedRatio2Decrease = 0,
      long ExDamagedRatioIncrease = 0,
      long ExDamagedRatioDecrease = 0,
      long EnhanceExDamageRate = 0,
      long ReduceExDamagedRate = 0,
      long EnhanceBasicsDamageRate = 0,
      long ReduceBasicsDamagedRate = 0,
      long HealRate = 0,
      long HealLightArmorRate = 0,
      long HealHeavyArmorRate = 0,
      long HealUnarmedRate = 0,
      long HealElasticArmorRate = 0,
      long HealNormalArmorRate = 0,
      long HealedExplosionRate = 0,
      long HealedPierceRate = 0,
      long HealedMysticRate = 0,
      long HealedSonicRate = 0,
      long HealedNormalRate = 0,
      Japan.TerrainAdaptationStat StreetBattleAdaptation = Japan.TerrainAdaptationStat.D,
      Japan.TerrainAdaptationStat OutdoorBattleAdaptation = Japan.TerrainAdaptationStat.D,
      Japan.TerrainAdaptationStat IndoorBattleAdaptation = Japan.TerrainAdaptationStat.D,
      long RegenCost = 0) {
    builder.StartTable(81);
    CharacterStatExcel.AddRegenCost(builder, RegenCost);
    CharacterStatExcel.AddHealedNormalRate(builder, HealedNormalRate);
    CharacterStatExcel.AddHealedSonicRate(builder, HealedSonicRate);
    CharacterStatExcel.AddHealedMysticRate(builder, HealedMysticRate);
    CharacterStatExcel.AddHealedPierceRate(builder, HealedPierceRate);
    CharacterStatExcel.AddHealedExplosionRate(builder, HealedExplosionRate);
    CharacterStatExcel.AddHealNormalArmorRate(builder, HealNormalArmorRate);
    CharacterStatExcel.AddHealElasticArmorRate(builder, HealElasticArmorRate);
    CharacterStatExcel.AddHealUnarmedRate(builder, HealUnarmedRate);
    CharacterStatExcel.AddHealHeavyArmorRate(builder, HealHeavyArmorRate);
    CharacterStatExcel.AddHealLightArmorRate(builder, HealLightArmorRate);
    CharacterStatExcel.AddHealRate(builder, HealRate);
    CharacterStatExcel.AddReduceBasicsDamagedRate(builder, ReduceBasicsDamagedRate);
    CharacterStatExcel.AddEnhanceBasicsDamageRate(builder, EnhanceBasicsDamageRate);
    CharacterStatExcel.AddReduceExDamagedRate(builder, ReduceExDamagedRate);
    CharacterStatExcel.AddEnhanceExDamageRate(builder, EnhanceExDamageRate);
    CharacterStatExcel.AddExDamagedRatioDecrease(builder, ExDamagedRatioDecrease);
    CharacterStatExcel.AddExDamagedRatioIncrease(builder, ExDamagedRatioIncrease);
    CharacterStatExcel.AddDamagedRatio2Decrease(builder, DamagedRatio2Decrease);
    CharacterStatExcel.AddDamagedRatio2Increase(builder, DamagedRatio2Increase);
    CharacterStatExcel.AddDamageRatio2Decrease(builder, DamageRatio2Decrease);
    CharacterStatExcel.AddDamageRatio2Increase(builder, DamageRatio2Increase);
    CharacterStatExcel.AddDamagedRatio(builder, DamagedRatio);
    CharacterStatExcel.AddDamageRatio(builder, DamageRatio);
    CharacterStatExcel.AddStrategySightRange(builder, StrategySightRange);
    CharacterStatExcel.AddActionCount(builder, ActionCount);
    CharacterStatExcel.AddStrategyMobility(builder, StrategyMobility);
    CharacterStatExcel.AddActiveGauge(builder, ActiveGauge);
    CharacterStatExcel.AddSightPoint(builder, SightPoint);
    CharacterStatExcel.AddMoveSpeed(builder, MoveSpeed);
    CharacterStatExcel.AddInitialRangeRate(builder, InitialRangeRate);
    CharacterStatExcel.AddRange(builder, Range);
    CharacterStatExcel.AddNormalAttackSpeed(builder, NormalAttackSpeed);
    CharacterStatExcel.AddIgnoreDelayCount(builder, IgnoreDelayCount);
    CharacterStatExcel.AddAmmoCost(builder, AmmoCost);
    CharacterStatExcel.AddAmmoCount(builder, AmmoCount);
    CharacterStatExcel.AddExtendCrowdControlDuration(builder, ExtendCrowdControlDuration);
    CharacterStatExcel.AddExtendDebuffDuration(builder, ExtendDebuffDuration);
    CharacterStatExcel.AddExtendBuffDuration(builder, ExtendBuffDuration);
    CharacterStatExcel.AddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate);
    CharacterStatExcel.AddEnhanceStructureRate(builder, EnhanceStructureRate);
    CharacterStatExcel.AddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate);
    CharacterStatExcel.AddEnhanceUnarmedRate(builder, EnhanceUnarmedRate);
    CharacterStatExcel.AddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate);
    CharacterStatExcel.AddEnhanceLightArmorRate(builder, EnhanceLightArmorRate);
    CharacterStatExcel.AddEnhanceNormalRate(builder, EnhanceNormalRate);
    CharacterStatExcel.AddEnhanceSiegeRate(builder, EnhanceSiegeRate);
    CharacterStatExcel.AddEnhanceSonicRate(builder, EnhanceSonicRate);
    CharacterStatExcel.AddEnhanceMysticRate(builder, EnhanceMysticRate);
    CharacterStatExcel.AddEnhancePierceRate(builder, EnhancePierceRate);
    CharacterStatExcel.AddEnhanceExplosionRate(builder, EnhanceExplosionRate);
    CharacterStatExcel.AddDefensePenetrationResist100(builder, DefensePenetrationResist100);
    CharacterStatExcel.AddDefensePenetrationResist1(builder, DefensePenetrationResist1);
    CharacterStatExcel.AddDefensePenetration100(builder, DefensePenetration100);
    CharacterStatExcel.AddDefensePenetration1(builder, DefensePenetration1);
    CharacterStatExcel.AddOppressionResist(builder, OppressionResist);
    CharacterStatExcel.AddOppressionPower(builder, OppressionPower);
    CharacterStatExcel.AddHealEffectivenessRate(builder, HealEffectivenessRate);
    CharacterStatExcel.AddBlockRate(builder, BlockRate);
    CharacterStatExcel.AddCriticalDamageResistRate(builder, CriticalDamageResistRate);
    CharacterStatExcel.AddCriticalDamageRate(builder, CriticalDamageRate);
    CharacterStatExcel.AddCriticalResistPoint(builder, CriticalResistPoint);
    CharacterStatExcel.AddCriticalPoint(builder, CriticalPoint);
    CharacterStatExcel.AddAccuracyPoint(builder, AccuracyPoint);
    CharacterStatExcel.AddDodgePoint(builder, DodgePoint);
    CharacterStatExcel.AddHealPower100(builder, HealPower100);
    CharacterStatExcel.AddHealPower1(builder, HealPower1);
    CharacterStatExcel.AddDefensePower100(builder, DefensePower100);
    CharacterStatExcel.AddDefensePower1(builder, DefensePower1);
    CharacterStatExcel.AddMaxHP100(builder, MaxHP100);
    CharacterStatExcel.AddMaxHP1(builder, MaxHP1);
    CharacterStatExcel.AddAttackPower100(builder, AttackPower100);
    CharacterStatExcel.AddAttackPower1(builder, AttackPower1);
    CharacterStatExcel.AddStabilityPoint(builder, StabilityPoint);
    CharacterStatExcel.AddStabilityRate(builder, StabilityRate);
    CharacterStatExcel.AddCharacterId(builder, CharacterId);
    CharacterStatExcel.AddIndoorBattleAdaptation(builder, IndoorBattleAdaptation);
    CharacterStatExcel.AddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation);
    CharacterStatExcel.AddStreetBattleAdaptation(builder, StreetBattleAdaptation);
    CharacterStatExcel.AddGroggyTime(builder, GroggyTime);
    CharacterStatExcel.AddGroggyGauge(builder, GroggyGauge);
    return CharacterStatExcel.EndCharacterStatExcel(builder);
  }

  public static void StartCharacterStatExcel(FlatBufferBuilder builder) { builder.StartTable(81); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(0, characterId, 0); }
  public static void AddStabilityRate(FlatBufferBuilder builder, long stabilityRate) { builder.AddLong(1, stabilityRate, 0); }
  public static void AddStabilityPoint(FlatBufferBuilder builder, long stabilityPoint) { builder.AddLong(2, stabilityPoint, 0); }
  public static void AddAttackPower1(FlatBufferBuilder builder, long attackPower1) { builder.AddLong(3, attackPower1, 0); }
  public static void AddAttackPower100(FlatBufferBuilder builder, long attackPower100) { builder.AddLong(4, attackPower100, 0); }
  public static void AddMaxHP1(FlatBufferBuilder builder, long maxHP1) { builder.AddLong(5, maxHP1, 0); }
  public static void AddMaxHP100(FlatBufferBuilder builder, long maxHP100) { builder.AddLong(6, maxHP100, 0); }
  public static void AddDefensePower1(FlatBufferBuilder builder, long defensePower1) { builder.AddLong(7, defensePower1, 0); }
  public static void AddDefensePower100(FlatBufferBuilder builder, long defensePower100) { builder.AddLong(8, defensePower100, 0); }
  public static void AddHealPower1(FlatBufferBuilder builder, long healPower1) { builder.AddLong(9, healPower1, 0); }
  public static void AddHealPower100(FlatBufferBuilder builder, long healPower100) { builder.AddLong(10, healPower100, 0); }
  public static void AddDodgePoint(FlatBufferBuilder builder, long dodgePoint) { builder.AddLong(11, dodgePoint, 0); }
  public static void AddAccuracyPoint(FlatBufferBuilder builder, long accuracyPoint) { builder.AddLong(12, accuracyPoint, 0); }
  public static void AddCriticalPoint(FlatBufferBuilder builder, long criticalPoint) { builder.AddLong(13, criticalPoint, 0); }
  public static void AddCriticalResistPoint(FlatBufferBuilder builder, long criticalResistPoint) { builder.AddLong(14, criticalResistPoint, 0); }
  public static void AddCriticalDamageRate(FlatBufferBuilder builder, long criticalDamageRate) { builder.AddLong(15, criticalDamageRate, 0); }
  public static void AddCriticalDamageResistRate(FlatBufferBuilder builder, long criticalDamageResistRate) { builder.AddLong(16, criticalDamageResistRate, 0); }
  public static void AddBlockRate(FlatBufferBuilder builder, long blockRate) { builder.AddLong(17, blockRate, 0); }
  public static void AddHealEffectivenessRate(FlatBufferBuilder builder, long healEffectivenessRate) { builder.AddLong(18, healEffectivenessRate, 0); }
  public static void AddOppressionPower(FlatBufferBuilder builder, long oppressionPower) { builder.AddLong(19, oppressionPower, 0); }
  public static void AddOppressionResist(FlatBufferBuilder builder, long oppressionResist) { builder.AddLong(20, oppressionResist, 0); }
  public static void AddDefensePenetration1(FlatBufferBuilder builder, long defensePenetration1) { builder.AddLong(21, defensePenetration1, 0); }
  public static void AddDefensePenetration100(FlatBufferBuilder builder, long defensePenetration100) { builder.AddLong(22, defensePenetration100, 0); }
  public static void AddDefensePenetrationResist1(FlatBufferBuilder builder, long defensePenetrationResist1) { builder.AddLong(23, defensePenetrationResist1, 0); }
  public static void AddDefensePenetrationResist100(FlatBufferBuilder builder, long defensePenetrationResist100) { builder.AddLong(24, defensePenetrationResist100, 0); }
  public static void AddEnhanceExplosionRate(FlatBufferBuilder builder, long enhanceExplosionRate) { builder.AddLong(25, enhanceExplosionRate, 0); }
  public static void AddEnhancePierceRate(FlatBufferBuilder builder, long enhancePierceRate) { builder.AddLong(26, enhancePierceRate, 0); }
  public static void AddEnhanceMysticRate(FlatBufferBuilder builder, long enhanceMysticRate) { builder.AddLong(27, enhanceMysticRate, 0); }
  public static void AddEnhanceSonicRate(FlatBufferBuilder builder, long enhanceSonicRate) { builder.AddLong(28, enhanceSonicRate, 0); }
  public static void AddEnhanceSiegeRate(FlatBufferBuilder builder, long enhanceSiegeRate) { builder.AddLong(29, enhanceSiegeRate, 0); }
  public static void AddEnhanceNormalRate(FlatBufferBuilder builder, long enhanceNormalRate) { builder.AddLong(30, enhanceNormalRate, 0); }
  public static void AddEnhanceLightArmorRate(FlatBufferBuilder builder, long enhanceLightArmorRate) { builder.AddLong(31, enhanceLightArmorRate, 0); }
  public static void AddEnhanceHeavyArmorRate(FlatBufferBuilder builder, long enhanceHeavyArmorRate) { builder.AddLong(32, enhanceHeavyArmorRate, 0); }
  public static void AddEnhanceUnarmedRate(FlatBufferBuilder builder, long enhanceUnarmedRate) { builder.AddLong(33, enhanceUnarmedRate, 0); }
  public static void AddEnhanceElasticArmorRate(FlatBufferBuilder builder, long enhanceElasticArmorRate) { builder.AddLong(34, enhanceElasticArmorRate, 0); }
  public static void AddEnhanceStructureRate(FlatBufferBuilder builder, long enhanceStructureRate) { builder.AddLong(35, enhanceStructureRate, 0); }
  public static void AddEnhanceNormalArmorRate(FlatBufferBuilder builder, long enhanceNormalArmorRate) { builder.AddLong(36, enhanceNormalArmorRate, 0); }
  public static void AddExtendBuffDuration(FlatBufferBuilder builder, long extendBuffDuration) { builder.AddLong(37, extendBuffDuration, 0); }
  public static void AddExtendDebuffDuration(FlatBufferBuilder builder, long extendDebuffDuration) { builder.AddLong(38, extendDebuffDuration, 0); }
  public static void AddExtendCrowdControlDuration(FlatBufferBuilder builder, long extendCrowdControlDuration) { builder.AddLong(39, extendCrowdControlDuration, 0); }
  public static void AddAmmoCount(FlatBufferBuilder builder, long ammoCount) { builder.AddLong(40, ammoCount, 0); }
  public static void AddAmmoCost(FlatBufferBuilder builder, long ammoCost) { builder.AddLong(41, ammoCost, 0); }
  public static void AddIgnoreDelayCount(FlatBufferBuilder builder, long ignoreDelayCount) { builder.AddLong(42, ignoreDelayCount, 0); }
  public static void AddNormalAttackSpeed(FlatBufferBuilder builder, long normalAttackSpeed) { builder.AddLong(43, normalAttackSpeed, 0); }
  public static void AddRange(FlatBufferBuilder builder, long range) { builder.AddLong(44, range, 0); }
  public static void AddInitialRangeRate(FlatBufferBuilder builder, long initialRangeRate) { builder.AddLong(45, initialRangeRate, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, long moveSpeed) { builder.AddLong(46, moveSpeed, 0); }
  public static void AddSightPoint(FlatBufferBuilder builder, long sightPoint) { builder.AddLong(47, sightPoint, 0); }
  public static void AddActiveGauge(FlatBufferBuilder builder, long activeGauge) { builder.AddLong(48, activeGauge, 0); }
  public static void AddGroggyGauge(FlatBufferBuilder builder, int groggyGauge) { builder.AddInt(49, groggyGauge, 0); }
  public static void AddGroggyTime(FlatBufferBuilder builder, int groggyTime) { builder.AddInt(50, groggyTime, 0); }
  public static void AddStrategyMobility(FlatBufferBuilder builder, long strategyMobility) { builder.AddLong(51, strategyMobility, 0); }
  public static void AddActionCount(FlatBufferBuilder builder, long actionCount) { builder.AddLong(52, actionCount, 0); }
  public static void AddStrategySightRange(FlatBufferBuilder builder, long strategySightRange) { builder.AddLong(53, strategySightRange, 0); }
  public static void AddDamageRatio(FlatBufferBuilder builder, long damageRatio) { builder.AddLong(54, damageRatio, 0); }
  public static void AddDamagedRatio(FlatBufferBuilder builder, long damagedRatio) { builder.AddLong(55, damagedRatio, 0); }
  public static void AddDamageRatio2Increase(FlatBufferBuilder builder, long damageRatio2Increase) { builder.AddLong(56, damageRatio2Increase, 0); }
  public static void AddDamageRatio2Decrease(FlatBufferBuilder builder, long damageRatio2Decrease) { builder.AddLong(57, damageRatio2Decrease, 0); }
  public static void AddDamagedRatio2Increase(FlatBufferBuilder builder, long damagedRatio2Increase) { builder.AddLong(58, damagedRatio2Increase, 0); }
  public static void AddDamagedRatio2Decrease(FlatBufferBuilder builder, long damagedRatio2Decrease) { builder.AddLong(59, damagedRatio2Decrease, 0); }
  public static void AddExDamagedRatioIncrease(FlatBufferBuilder builder, long exDamagedRatioIncrease) { builder.AddLong(60, exDamagedRatioIncrease, 0); }
  public static void AddExDamagedRatioDecrease(FlatBufferBuilder builder, long exDamagedRatioDecrease) { builder.AddLong(61, exDamagedRatioDecrease, 0); }
  public static void AddEnhanceExDamageRate(FlatBufferBuilder builder, long enhanceExDamageRate) { builder.AddLong(62, enhanceExDamageRate, 0); }
  public static void AddReduceExDamagedRate(FlatBufferBuilder builder, long reduceExDamagedRate) { builder.AddLong(63, reduceExDamagedRate, 0); }
  public static void AddEnhanceBasicsDamageRate(FlatBufferBuilder builder, long enhanceBasicsDamageRate) { builder.AddLong(64, enhanceBasicsDamageRate, 0); }
  public static void AddReduceBasicsDamagedRate(FlatBufferBuilder builder, long reduceBasicsDamagedRate) { builder.AddLong(65, reduceBasicsDamagedRate, 0); }
  public static void AddHealRate(FlatBufferBuilder builder, long healRate) { builder.AddLong(66, healRate, 0); }
  public static void AddHealLightArmorRate(FlatBufferBuilder builder, long healLightArmorRate) { builder.AddLong(67, healLightArmorRate, 0); }
  public static void AddHealHeavyArmorRate(FlatBufferBuilder builder, long healHeavyArmorRate) { builder.AddLong(68, healHeavyArmorRate, 0); }
  public static void AddHealUnarmedRate(FlatBufferBuilder builder, long healUnarmedRate) { builder.AddLong(69, healUnarmedRate, 0); }
  public static void AddHealElasticArmorRate(FlatBufferBuilder builder, long healElasticArmorRate) { builder.AddLong(70, healElasticArmorRate, 0); }
  public static void AddHealNormalArmorRate(FlatBufferBuilder builder, long healNormalArmorRate) { builder.AddLong(71, healNormalArmorRate, 0); }
  public static void AddHealedExplosionRate(FlatBufferBuilder builder, long healedExplosionRate) { builder.AddLong(72, healedExplosionRate, 0); }
  public static void AddHealedPierceRate(FlatBufferBuilder builder, long healedPierceRate) { builder.AddLong(73, healedPierceRate, 0); }
  public static void AddHealedMysticRate(FlatBufferBuilder builder, long healedMysticRate) { builder.AddLong(74, healedMysticRate, 0); }
  public static void AddHealedSonicRate(FlatBufferBuilder builder, long healedSonicRate) { builder.AddLong(75, healedSonicRate, 0); }
  public static void AddHealedNormalRate(FlatBufferBuilder builder, long healedNormalRate) { builder.AddLong(76, healedNormalRate, 0); }
  public static void AddStreetBattleAdaptation(FlatBufferBuilder builder, Japan.TerrainAdaptationStat streetBattleAdaptation) { builder.AddInt(77, (int)streetBattleAdaptation, 0); }
  public static void AddOutdoorBattleAdaptation(FlatBufferBuilder builder, Japan.TerrainAdaptationStat outdoorBattleAdaptation) { builder.AddInt(78, (int)outdoorBattleAdaptation, 0); }
  public static void AddIndoorBattleAdaptation(FlatBufferBuilder builder, Japan.TerrainAdaptationStat indoorBattleAdaptation) { builder.AddInt(79, (int)indoorBattleAdaptation, 0); }
  public static void AddRegenCost(FlatBufferBuilder builder, long regenCost) { builder.AddLong(80, regenCost, 0); }
  public static Offset<Japan.CharacterStatExcel> EndCharacterStatExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.CharacterStatExcel>(o);
  }
  public CharacterStatExcelT UnPack() {
    var _o = new CharacterStatExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterStatExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterStat");
    _o.CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterId, key) : this.CharacterId;
    _o.StabilityRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StabilityRate, key) : this.StabilityRate;
    _o.StabilityPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StabilityPoint, key) : this.StabilityPoint;
    _o.AttackPower1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AttackPower1, key) : this.AttackPower1;
    _o.AttackPower100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AttackPower100, key) : this.AttackPower100;
    _o.MaxHP1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaxHP1, key) : this.MaxHP1;
    _o.MaxHP100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaxHP100, key) : this.MaxHP100;
    _o.DefensePower1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefensePower1, key) : this.DefensePower1;
    _o.DefensePower100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefensePower100, key) : this.DefensePower100;
    _o.HealPower1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealPower1, key) : this.HealPower1;
    _o.HealPower100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealPower100, key) : this.HealPower100;
    _o.DodgePoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DodgePoint, key) : this.DodgePoint;
    _o.AccuracyPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccuracyPoint, key) : this.AccuracyPoint;
    _o.CriticalPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalPoint, key) : this.CriticalPoint;
    _o.CriticalResistPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalResistPoint, key) : this.CriticalResistPoint;
    _o.CriticalDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalDamageRate, key) : this.CriticalDamageRate;
    _o.CriticalDamageResistRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CriticalDamageResistRate, key) : this.CriticalDamageResistRate;
    _o.BlockRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BlockRate, key) : this.BlockRate;
    _o.HealEffectivenessRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealEffectivenessRate, key) : this.HealEffectivenessRate;
    _o.OppressionPower = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OppressionPower, key) : this.OppressionPower;
    _o.OppressionResist = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OppressionResist, key) : this.OppressionResist;
    _o.DefensePenetration1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefensePenetration1, key) : this.DefensePenetration1;
    _o.DefensePenetration100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefensePenetration100, key) : this.DefensePenetration100;
    _o.DefensePenetrationResist1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefensePenetrationResist1, key) : this.DefensePenetrationResist1;
    _o.DefensePenetrationResist100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefensePenetrationResist100, key) : this.DefensePenetrationResist100;
    _o.EnhanceExplosionRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceExplosionRate, key) : this.EnhanceExplosionRate;
    _o.EnhancePierceRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhancePierceRate, key) : this.EnhancePierceRate;
    _o.EnhanceMysticRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceMysticRate, key) : this.EnhanceMysticRate;
    _o.EnhanceSonicRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceSonicRate, key) : this.EnhanceSonicRate;
    _o.EnhanceSiegeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceSiegeRate, key) : this.EnhanceSiegeRate;
    _o.EnhanceNormalRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceNormalRate, key) : this.EnhanceNormalRate;
    _o.EnhanceLightArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceLightArmorRate, key) : this.EnhanceLightArmorRate;
    _o.EnhanceHeavyArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceHeavyArmorRate, key) : this.EnhanceHeavyArmorRate;
    _o.EnhanceUnarmedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceUnarmedRate, key) : this.EnhanceUnarmedRate;
    _o.EnhanceElasticArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceElasticArmorRate, key) : this.EnhanceElasticArmorRate;
    _o.EnhanceStructureRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceStructureRate, key) : this.EnhanceStructureRate;
    _o.EnhanceNormalArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceNormalArmorRate, key) : this.EnhanceNormalArmorRate;
    _o.ExtendBuffDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExtendBuffDuration, key) : this.ExtendBuffDuration;
    _o.ExtendDebuffDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExtendDebuffDuration, key) : this.ExtendDebuffDuration;
    _o.ExtendCrowdControlDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExtendCrowdControlDuration, key) : this.ExtendCrowdControlDuration;
    _o.AmmoCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AmmoCount, key) : this.AmmoCount;
    _o.AmmoCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AmmoCost, key) : this.AmmoCost;
    _o.IgnoreDelayCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.IgnoreDelayCount, key) : this.IgnoreDelayCount;
    _o.NormalAttackSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.NormalAttackSpeed, key) : this.NormalAttackSpeed;
    _o.Range = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Range, key) : this.Range;
    _o.InitialRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.InitialRangeRate, key) : this.InitialRangeRate;
    _o.MoveSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MoveSpeed, key) : this.MoveSpeed;
    _o.SightPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SightPoint, key) : this.SightPoint;
    _o.ActiveGauge = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ActiveGauge, key) : this.ActiveGauge;
    _o.GroggyGauge = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.GroggyGauge, key) : this.GroggyGauge;
    _o.GroggyTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.GroggyTime, key) : this.GroggyTime;
    _o.StrategyMobility = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StrategyMobility, key) : this.StrategyMobility;
    _o.ActionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ActionCount, key) : this.ActionCount;
    _o.StrategySightRange = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StrategySightRange, key) : this.StrategySightRange;
    _o.DamageRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DamageRatio, key) : this.DamageRatio;
    _o.DamagedRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DamagedRatio, key) : this.DamagedRatio;
    _o.DamageRatio2Increase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DamageRatio2Increase, key) : this.DamageRatio2Increase;
    _o.DamageRatio2Decrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DamageRatio2Decrease, key) : this.DamageRatio2Decrease;
    _o.DamagedRatio2Increase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DamagedRatio2Increase, key) : this.DamagedRatio2Increase;
    _o.DamagedRatio2Decrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DamagedRatio2Decrease, key) : this.DamagedRatio2Decrease;
    _o.ExDamagedRatioIncrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExDamagedRatioIncrease, key) : this.ExDamagedRatioIncrease;
    _o.ExDamagedRatioDecrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExDamagedRatioDecrease, key) : this.ExDamagedRatioDecrease;
    _o.EnhanceExDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceExDamageRate, key) : this.EnhanceExDamageRate;
    _o.ReduceExDamagedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ReduceExDamagedRate, key) : this.ReduceExDamagedRate;
    _o.EnhanceBasicsDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnhanceBasicsDamageRate, key) : this.EnhanceBasicsDamageRate;
    _o.ReduceBasicsDamagedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ReduceBasicsDamagedRate, key) : this.ReduceBasicsDamagedRate;
    _o.HealRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealRate, key) : this.HealRate;
    _o.HealLightArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealLightArmorRate, key) : this.HealLightArmorRate;
    _o.HealHeavyArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealHeavyArmorRate, key) : this.HealHeavyArmorRate;
    _o.HealUnarmedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealUnarmedRate, key) : this.HealUnarmedRate;
    _o.HealElasticArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealElasticArmorRate, key) : this.HealElasticArmorRate;
    _o.HealNormalArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealNormalArmorRate, key) : this.HealNormalArmorRate;
    _o.HealedExplosionRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealedExplosionRate, key) : this.HealedExplosionRate;
    _o.HealedPierceRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealedPierceRate, key) : this.HealedPierceRate;
    _o.HealedMysticRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealedMysticRate, key) : this.HealedMysticRate;
    _o.HealedSonicRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealedSonicRate, key) : this.HealedSonicRate;
    _o.HealedNormalRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HealedNormalRate, key) : this.HealedNormalRate;
    _o.StreetBattleAdaptation = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)this.StreetBattleAdaptation, key) : this.StreetBattleAdaptation;
    _o.OutdoorBattleAdaptation = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)this.OutdoorBattleAdaptation, key) : this.OutdoorBattleAdaptation;
    _o.IndoorBattleAdaptation = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)this.IndoorBattleAdaptation, key) : this.IndoorBattleAdaptation;
    _o.RegenCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RegenCost, key) : this.RegenCost;
  }
  public static Offset<Japan.CharacterStatExcel> Pack(FlatBufferBuilder builder, CharacterStatExcelT _o) {
    if (_o == null) return default(Offset<Japan.CharacterStatExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterStat");
		var _CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterId, key) : _o.CharacterId;
		var _StabilityRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StabilityRate, key) : _o.StabilityRate;
		var _StabilityPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StabilityPoint, key) : _o.StabilityPoint;
		var _AttackPower1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AttackPower1, key) : _o.AttackPower1;
		var _AttackPower100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AttackPower100, key) : _o.AttackPower100;
		var _MaxHP1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaxHP1, key) : _o.MaxHP1;
		var _MaxHP100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaxHP100, key) : _o.MaxHP100;
		var _DefensePower1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefensePower1, key) : _o.DefensePower1;
		var _DefensePower100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefensePower100, key) : _o.DefensePower100;
		var _HealPower1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealPower1, key) : _o.HealPower1;
		var _HealPower100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealPower100, key) : _o.HealPower100;
		var _DodgePoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DodgePoint, key) : _o.DodgePoint;
		var _AccuracyPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccuracyPoint, key) : _o.AccuracyPoint;
		var _CriticalPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalPoint, key) : _o.CriticalPoint;
		var _CriticalResistPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalResistPoint, key) : _o.CriticalResistPoint;
		var _CriticalDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalDamageRate, key) : _o.CriticalDamageRate;
		var _CriticalDamageResistRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CriticalDamageResistRate, key) : _o.CriticalDamageResistRate;
		var _BlockRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BlockRate, key) : _o.BlockRate;
		var _HealEffectivenessRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealEffectivenessRate, key) : _o.HealEffectivenessRate;
		var _OppressionPower = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OppressionPower, key) : _o.OppressionPower;
		var _OppressionResist = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OppressionResist, key) : _o.OppressionResist;
		var _DefensePenetration1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefensePenetration1, key) : _o.DefensePenetration1;
		var _DefensePenetration100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefensePenetration100, key) : _o.DefensePenetration100;
		var _DefensePenetrationResist1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefensePenetrationResist1, key) : _o.DefensePenetrationResist1;
		var _DefensePenetrationResist100 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefensePenetrationResist100, key) : _o.DefensePenetrationResist100;
		var _EnhanceExplosionRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceExplosionRate, key) : _o.EnhanceExplosionRate;
		var _EnhancePierceRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhancePierceRate, key) : _o.EnhancePierceRate;
		var _EnhanceMysticRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceMysticRate, key) : _o.EnhanceMysticRate;
		var _EnhanceSonicRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceSonicRate, key) : _o.EnhanceSonicRate;
		var _EnhanceSiegeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceSiegeRate, key) : _o.EnhanceSiegeRate;
		var _EnhanceNormalRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceNormalRate, key) : _o.EnhanceNormalRate;
		var _EnhanceLightArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceLightArmorRate, key) : _o.EnhanceLightArmorRate;
		var _EnhanceHeavyArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceHeavyArmorRate, key) : _o.EnhanceHeavyArmorRate;
		var _EnhanceUnarmedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceUnarmedRate, key) : _o.EnhanceUnarmedRate;
		var _EnhanceElasticArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceElasticArmorRate, key) : _o.EnhanceElasticArmorRate;
		var _EnhanceStructureRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceStructureRate, key) : _o.EnhanceStructureRate;
		var _EnhanceNormalArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceNormalArmorRate, key) : _o.EnhanceNormalArmorRate;
		var _ExtendBuffDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExtendBuffDuration, key) : _o.ExtendBuffDuration;
		var _ExtendDebuffDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExtendDebuffDuration, key) : _o.ExtendDebuffDuration;
		var _ExtendCrowdControlDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExtendCrowdControlDuration, key) : _o.ExtendCrowdControlDuration;
		var _AmmoCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AmmoCount, key) : _o.AmmoCount;
		var _AmmoCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AmmoCost, key) : _o.AmmoCost;
		var _IgnoreDelayCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.IgnoreDelayCount, key) : _o.IgnoreDelayCount;
		var _NormalAttackSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.NormalAttackSpeed, key) : _o.NormalAttackSpeed;
		var _Range = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Range, key) : _o.Range;
		var _InitialRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.InitialRangeRate, key) : _o.InitialRangeRate;
		var _MoveSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MoveSpeed, key) : _o.MoveSpeed;
		var _SightPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SightPoint, key) : _o.SightPoint;
		var _ActiveGauge = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ActiveGauge, key) : _o.ActiveGauge;
		var _GroggyGauge = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.GroggyGauge, key) : _o.GroggyGauge;
		var _GroggyTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.GroggyTime, key) : _o.GroggyTime;
		var _StrategyMobility = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StrategyMobility, key) : _o.StrategyMobility;
		var _ActionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ActionCount, key) : _o.ActionCount;
		var _StrategySightRange = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StrategySightRange, key) : _o.StrategySightRange;
		var _DamageRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DamageRatio, key) : _o.DamageRatio;
		var _DamagedRatio = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DamagedRatio, key) : _o.DamagedRatio;
		var _DamageRatio2Increase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DamageRatio2Increase, key) : _o.DamageRatio2Increase;
		var _DamageRatio2Decrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DamageRatio2Decrease, key) : _o.DamageRatio2Decrease;
		var _DamagedRatio2Increase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DamagedRatio2Increase, key) : _o.DamagedRatio2Increase;
		var _DamagedRatio2Decrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DamagedRatio2Decrease, key) : _o.DamagedRatio2Decrease;
		var _ExDamagedRatioIncrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExDamagedRatioIncrease, key) : _o.ExDamagedRatioIncrease;
		var _ExDamagedRatioDecrease = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExDamagedRatioDecrease, key) : _o.ExDamagedRatioDecrease;
		var _EnhanceExDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceExDamageRate, key) : _o.EnhanceExDamageRate;
		var _ReduceExDamagedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ReduceExDamagedRate, key) : _o.ReduceExDamagedRate;
		var _EnhanceBasicsDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnhanceBasicsDamageRate, key) : _o.EnhanceBasicsDamageRate;
		var _ReduceBasicsDamagedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ReduceBasicsDamagedRate, key) : _o.ReduceBasicsDamagedRate;
		var _HealRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealRate, key) : _o.HealRate;
		var _HealLightArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealLightArmorRate, key) : _o.HealLightArmorRate;
		var _HealHeavyArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealHeavyArmorRate, key) : _o.HealHeavyArmorRate;
		var _HealUnarmedRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealUnarmedRate, key) : _o.HealUnarmedRate;
		var _HealElasticArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealElasticArmorRate, key) : _o.HealElasticArmorRate;
		var _HealNormalArmorRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealNormalArmorRate, key) : _o.HealNormalArmorRate;
		var _HealedExplosionRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealedExplosionRate, key) : _o.HealedExplosionRate;
		var _HealedPierceRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealedPierceRate, key) : _o.HealedPierceRate;
		var _HealedMysticRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealedMysticRate, key) : _o.HealedMysticRate;
		var _HealedSonicRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealedSonicRate, key) : _o.HealedSonicRate;
		var _HealedNormalRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HealedNormalRate, key) : _o.HealedNormalRate;
		var _StreetBattleAdaptation = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)_o.StreetBattleAdaptation, key) : _o.StreetBattleAdaptation;
		var _OutdoorBattleAdaptation = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)_o.OutdoorBattleAdaptation, key) : _o.OutdoorBattleAdaptation;
		var _IndoorBattleAdaptation = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)_o.IndoorBattleAdaptation, key) : _o.IndoorBattleAdaptation;
		var _RegenCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RegenCost, key) : _o.RegenCost;
    return CreateCharacterStatExcel(
      builder,
      TableEncryptionService.UseEncryption ? _CharacterId : _o.CharacterId,
      TableEncryptionService.UseEncryption ? _StabilityRate : _o.StabilityRate,
      TableEncryptionService.UseEncryption ? _StabilityPoint : _o.StabilityPoint,
      TableEncryptionService.UseEncryption ? _AttackPower1 : _o.AttackPower1,
      TableEncryptionService.UseEncryption ? _AttackPower100 : _o.AttackPower100,
      TableEncryptionService.UseEncryption ? _MaxHP1 : _o.MaxHP1,
      TableEncryptionService.UseEncryption ? _MaxHP100 : _o.MaxHP100,
      TableEncryptionService.UseEncryption ? _DefensePower1 : _o.DefensePower1,
      TableEncryptionService.UseEncryption ? _DefensePower100 : _o.DefensePower100,
      TableEncryptionService.UseEncryption ? _HealPower1 : _o.HealPower1,
      TableEncryptionService.UseEncryption ? _HealPower100 : _o.HealPower100,
      TableEncryptionService.UseEncryption ? _DodgePoint : _o.DodgePoint,
      TableEncryptionService.UseEncryption ? _AccuracyPoint : _o.AccuracyPoint,
      TableEncryptionService.UseEncryption ? _CriticalPoint : _o.CriticalPoint,
      TableEncryptionService.UseEncryption ? _CriticalResistPoint : _o.CriticalResistPoint,
      TableEncryptionService.UseEncryption ? _CriticalDamageRate : _o.CriticalDamageRate,
      TableEncryptionService.UseEncryption ? _CriticalDamageResistRate : _o.CriticalDamageResistRate,
      TableEncryptionService.UseEncryption ? _BlockRate : _o.BlockRate,
      TableEncryptionService.UseEncryption ? _HealEffectivenessRate : _o.HealEffectivenessRate,
      TableEncryptionService.UseEncryption ? _OppressionPower : _o.OppressionPower,
      TableEncryptionService.UseEncryption ? _OppressionResist : _o.OppressionResist,
      TableEncryptionService.UseEncryption ? _DefensePenetration1 : _o.DefensePenetration1,
      TableEncryptionService.UseEncryption ? _DefensePenetration100 : _o.DefensePenetration100,
      TableEncryptionService.UseEncryption ? _DefensePenetrationResist1 : _o.DefensePenetrationResist1,
      TableEncryptionService.UseEncryption ? _DefensePenetrationResist100 : _o.DefensePenetrationResist100,
      TableEncryptionService.UseEncryption ? _EnhanceExplosionRate : _o.EnhanceExplosionRate,
      TableEncryptionService.UseEncryption ? _EnhancePierceRate : _o.EnhancePierceRate,
      TableEncryptionService.UseEncryption ? _EnhanceMysticRate : _o.EnhanceMysticRate,
      TableEncryptionService.UseEncryption ? _EnhanceSonicRate : _o.EnhanceSonicRate,
      TableEncryptionService.UseEncryption ? _EnhanceSiegeRate : _o.EnhanceSiegeRate,
      TableEncryptionService.UseEncryption ? _EnhanceNormalRate : _o.EnhanceNormalRate,
      TableEncryptionService.UseEncryption ? _EnhanceLightArmorRate : _o.EnhanceLightArmorRate,
      TableEncryptionService.UseEncryption ? _EnhanceHeavyArmorRate : _o.EnhanceHeavyArmorRate,
      TableEncryptionService.UseEncryption ? _EnhanceUnarmedRate : _o.EnhanceUnarmedRate,
      TableEncryptionService.UseEncryption ? _EnhanceElasticArmorRate : _o.EnhanceElasticArmorRate,
      TableEncryptionService.UseEncryption ? _EnhanceStructureRate : _o.EnhanceStructureRate,
      TableEncryptionService.UseEncryption ? _EnhanceNormalArmorRate : _o.EnhanceNormalArmorRate,
      TableEncryptionService.UseEncryption ? _ExtendBuffDuration : _o.ExtendBuffDuration,
      TableEncryptionService.UseEncryption ? _ExtendDebuffDuration : _o.ExtendDebuffDuration,
      TableEncryptionService.UseEncryption ? _ExtendCrowdControlDuration : _o.ExtendCrowdControlDuration,
      TableEncryptionService.UseEncryption ? _AmmoCount : _o.AmmoCount,
      TableEncryptionService.UseEncryption ? _AmmoCost : _o.AmmoCost,
      TableEncryptionService.UseEncryption ? _IgnoreDelayCount : _o.IgnoreDelayCount,
      TableEncryptionService.UseEncryption ? _NormalAttackSpeed : _o.NormalAttackSpeed,
      TableEncryptionService.UseEncryption ? _Range : _o.Range,
      TableEncryptionService.UseEncryption ? _InitialRangeRate : _o.InitialRangeRate,
      TableEncryptionService.UseEncryption ? _MoveSpeed : _o.MoveSpeed,
      TableEncryptionService.UseEncryption ? _SightPoint : _o.SightPoint,
      TableEncryptionService.UseEncryption ? _ActiveGauge : _o.ActiveGauge,
      TableEncryptionService.UseEncryption ? _GroggyGauge : _o.GroggyGauge,
      TableEncryptionService.UseEncryption ? _GroggyTime : _o.GroggyTime,
      TableEncryptionService.UseEncryption ? _StrategyMobility : _o.StrategyMobility,
      TableEncryptionService.UseEncryption ? _ActionCount : _o.ActionCount,
      TableEncryptionService.UseEncryption ? _StrategySightRange : _o.StrategySightRange,
      TableEncryptionService.UseEncryption ? _DamageRatio : _o.DamageRatio,
      TableEncryptionService.UseEncryption ? _DamagedRatio : _o.DamagedRatio,
      TableEncryptionService.UseEncryption ? _DamageRatio2Increase : _o.DamageRatio2Increase,
      TableEncryptionService.UseEncryption ? _DamageRatio2Decrease : _o.DamageRatio2Decrease,
      TableEncryptionService.UseEncryption ? _DamagedRatio2Increase : _o.DamagedRatio2Increase,
      TableEncryptionService.UseEncryption ? _DamagedRatio2Decrease : _o.DamagedRatio2Decrease,
      TableEncryptionService.UseEncryption ? _ExDamagedRatioIncrease : _o.ExDamagedRatioIncrease,
      TableEncryptionService.UseEncryption ? _ExDamagedRatioDecrease : _o.ExDamagedRatioDecrease,
      TableEncryptionService.UseEncryption ? _EnhanceExDamageRate : _o.EnhanceExDamageRate,
      TableEncryptionService.UseEncryption ? _ReduceExDamagedRate : _o.ReduceExDamagedRate,
      TableEncryptionService.UseEncryption ? _EnhanceBasicsDamageRate : _o.EnhanceBasicsDamageRate,
      TableEncryptionService.UseEncryption ? _ReduceBasicsDamagedRate : _o.ReduceBasicsDamagedRate,
      TableEncryptionService.UseEncryption ? _HealRate : _o.HealRate,
      TableEncryptionService.UseEncryption ? _HealLightArmorRate : _o.HealLightArmorRate,
      TableEncryptionService.UseEncryption ? _HealHeavyArmorRate : _o.HealHeavyArmorRate,
      TableEncryptionService.UseEncryption ? _HealUnarmedRate : _o.HealUnarmedRate,
      TableEncryptionService.UseEncryption ? _HealElasticArmorRate : _o.HealElasticArmorRate,
      TableEncryptionService.UseEncryption ? _HealNormalArmorRate : _o.HealNormalArmorRate,
      TableEncryptionService.UseEncryption ? _HealedExplosionRate : _o.HealedExplosionRate,
      TableEncryptionService.UseEncryption ? _HealedPierceRate : _o.HealedPierceRate,
      TableEncryptionService.UseEncryption ? _HealedMysticRate : _o.HealedMysticRate,
      TableEncryptionService.UseEncryption ? _HealedSonicRate : _o.HealedSonicRate,
      TableEncryptionService.UseEncryption ? _HealedNormalRate : _o.HealedNormalRate,
      TableEncryptionService.UseEncryption ? _StreetBattleAdaptation : _o.StreetBattleAdaptation,
      TableEncryptionService.UseEncryption ? _OutdoorBattleAdaptation : _o.OutdoorBattleAdaptation,
      TableEncryptionService.UseEncryption ? _IndoorBattleAdaptation : _o.IndoorBattleAdaptation,
      TableEncryptionService.UseEncryption ? _RegenCost : _o.RegenCost);
  }
}

public class CharacterStatExcelT
{
  public long CharacterId { get; set; }
  public long StabilityRate { get; set; }
  public long StabilityPoint { get; set; }
  public long AttackPower1 { get; set; }
  public long AttackPower100 { get; set; }
  public long MaxHP1 { get; set; }
  public long MaxHP100 { get; set; }
  public long DefensePower1 { get; set; }
  public long DefensePower100 { get; set; }
  public long HealPower1 { get; set; }
  public long HealPower100 { get; set; }
  public long DodgePoint { get; set; }
  public long AccuracyPoint { get; set; }
  public long CriticalPoint { get; set; }
  public long CriticalResistPoint { get; set; }
  public long CriticalDamageRate { get; set; }
  public long CriticalDamageResistRate { get; set; }
  public long BlockRate { get; set; }
  public long HealEffectivenessRate { get; set; }
  public long OppressionPower { get; set; }
  public long OppressionResist { get; set; }
  public long DefensePenetration1 { get; set; }
  public long DefensePenetration100 { get; set; }
  public long DefensePenetrationResist1 { get; set; }
  public long DefensePenetrationResist100 { get; set; }
  public long EnhanceExplosionRate { get; set; }
  public long EnhancePierceRate { get; set; }
  public long EnhanceMysticRate { get; set; }
  public long EnhanceSonicRate { get; set; }
  public long EnhanceSiegeRate { get; set; }
  public long EnhanceNormalRate { get; set; }
  public long EnhanceLightArmorRate { get; set; }
  public long EnhanceHeavyArmorRate { get; set; }
  public long EnhanceUnarmedRate { get; set; }
  public long EnhanceElasticArmorRate { get; set; }
  public long EnhanceStructureRate { get; set; }
  public long EnhanceNormalArmorRate { get; set; }
  public long ExtendBuffDuration { get; set; }
  public long ExtendDebuffDuration { get; set; }
  public long ExtendCrowdControlDuration { get; set; }
  public long AmmoCount { get; set; }
  public long AmmoCost { get; set; }
  public long IgnoreDelayCount { get; set; }
  public long NormalAttackSpeed { get; set; }
  public long Range { get; set; }
  public long InitialRangeRate { get; set; }
  public long MoveSpeed { get; set; }
  public long SightPoint { get; set; }
  public long ActiveGauge { get; set; }
  public int GroggyGauge { get; set; }
  public int GroggyTime { get; set; }
  public long StrategyMobility { get; set; }
  public long ActionCount { get; set; }
  public long StrategySightRange { get; set; }
  public long DamageRatio { get; set; }
  public long DamagedRatio { get; set; }
  public long DamageRatio2Increase { get; set; }
  public long DamageRatio2Decrease { get; set; }
  public long DamagedRatio2Increase { get; set; }
  public long DamagedRatio2Decrease { get; set; }
  public long ExDamagedRatioIncrease { get; set; }
  public long ExDamagedRatioDecrease { get; set; }
  public long EnhanceExDamageRate { get; set; }
  public long ReduceExDamagedRate { get; set; }
  public long EnhanceBasicsDamageRate { get; set; }
  public long ReduceBasicsDamagedRate { get; set; }
  public long HealRate { get; set; }
  public long HealLightArmorRate { get; set; }
  public long HealHeavyArmorRate { get; set; }
  public long HealUnarmedRate { get; set; }
  public long HealElasticArmorRate { get; set; }
  public long HealNormalArmorRate { get; set; }
  public long HealedExplosionRate { get; set; }
  public long HealedPierceRate { get; set; }
  public long HealedMysticRate { get; set; }
  public long HealedSonicRate { get; set; }
  public long HealedNormalRate { get; set; }
  public Japan.TerrainAdaptationStat StreetBattleAdaptation { get; set; }
  public Japan.TerrainAdaptationStat OutdoorBattleAdaptation { get; set; }
  public Japan.TerrainAdaptationStat IndoorBattleAdaptation { get; set; }
  public long RegenCost { get; set; }

  public CharacterStatExcelT() {
    this.CharacterId = 0;
    this.StabilityRate = 0;
    this.StabilityPoint = 0;
    this.AttackPower1 = 0;
    this.AttackPower100 = 0;
    this.MaxHP1 = 0;
    this.MaxHP100 = 0;
    this.DefensePower1 = 0;
    this.DefensePower100 = 0;
    this.HealPower1 = 0;
    this.HealPower100 = 0;
    this.DodgePoint = 0;
    this.AccuracyPoint = 0;
    this.CriticalPoint = 0;
    this.CriticalResistPoint = 0;
    this.CriticalDamageRate = 0;
    this.CriticalDamageResistRate = 0;
    this.BlockRate = 0;
    this.HealEffectivenessRate = 0;
    this.OppressionPower = 0;
    this.OppressionResist = 0;
    this.DefensePenetration1 = 0;
    this.DefensePenetration100 = 0;
    this.DefensePenetrationResist1 = 0;
    this.DefensePenetrationResist100 = 0;
    this.EnhanceExplosionRate = 0;
    this.EnhancePierceRate = 0;
    this.EnhanceMysticRate = 0;
    this.EnhanceSonicRate = 0;
    this.EnhanceSiegeRate = 0;
    this.EnhanceNormalRate = 0;
    this.EnhanceLightArmorRate = 0;
    this.EnhanceHeavyArmorRate = 0;
    this.EnhanceUnarmedRate = 0;
    this.EnhanceElasticArmorRate = 0;
    this.EnhanceStructureRate = 0;
    this.EnhanceNormalArmorRate = 0;
    this.ExtendBuffDuration = 0;
    this.ExtendDebuffDuration = 0;
    this.ExtendCrowdControlDuration = 0;
    this.AmmoCount = 0;
    this.AmmoCost = 0;
    this.IgnoreDelayCount = 0;
    this.NormalAttackSpeed = 0;
    this.Range = 0;
    this.InitialRangeRate = 0;
    this.MoveSpeed = 0;
    this.SightPoint = 0;
    this.ActiveGauge = 0;
    this.GroggyGauge = 0;
    this.GroggyTime = 0;
    this.StrategyMobility = 0;
    this.ActionCount = 0;
    this.StrategySightRange = 0;
    this.DamageRatio = 0;
    this.DamagedRatio = 0;
    this.DamageRatio2Increase = 0;
    this.DamageRatio2Decrease = 0;
    this.DamagedRatio2Increase = 0;
    this.DamagedRatio2Decrease = 0;
    this.ExDamagedRatioIncrease = 0;
    this.ExDamagedRatioDecrease = 0;
    this.EnhanceExDamageRate = 0;
    this.ReduceExDamagedRate = 0;
    this.EnhanceBasicsDamageRate = 0;
    this.ReduceBasicsDamagedRate = 0;
    this.HealRate = 0;
    this.HealLightArmorRate = 0;
    this.HealHeavyArmorRate = 0;
    this.HealUnarmedRate = 0;
    this.HealElasticArmorRate = 0;
    this.HealNormalArmorRate = 0;
    this.HealedExplosionRate = 0;
    this.HealedPierceRate = 0;
    this.HealedMysticRate = 0;
    this.HealedSonicRate = 0;
    this.HealedNormalRate = 0;
    this.StreetBattleAdaptation = Japan.TerrainAdaptationStat.D;
    this.OutdoorBattleAdaptation = Japan.TerrainAdaptationStat.D;
    this.IndoorBattleAdaptation = Japan.TerrainAdaptationStat.D;
    this.RegenCost = 0;
  }
}


static public class CharacterStatExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*StabilityRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*StabilityPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*AttackPower1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*AttackPower100*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*MaxHP1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*MaxHP100*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*DefensePower1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*DefensePower100*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*HealPower1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*HealPower100*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*DodgePoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*AccuracyPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*CriticalPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*CriticalResistPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*CriticalDamageRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*CriticalDamageResistRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*BlockRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*HealEffectivenessRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*OppressionPower*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*OppressionResist*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*DefensePenetration1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*DefensePenetration100*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*DefensePenetrationResist1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*DefensePenetrationResist100*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*EnhanceExplosionRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*EnhancePierceRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*EnhanceMysticRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*EnhanceSonicRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*EnhanceSiegeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*EnhanceNormalRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*EnhanceLightArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*EnhanceHeavyArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*EnhanceUnarmedRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*EnhanceElasticArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*EnhanceStructureRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*EnhanceNormalArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*ExtendBuffDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*ExtendDebuffDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*ExtendCrowdControlDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*AmmoCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*AmmoCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*IgnoreDelayCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*NormalAttackSpeed*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*Range*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*InitialRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*MoveSpeed*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*SightPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*ActiveGauge*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*GroggyGauge*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 104 /*GroggyTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*StrategyMobility*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*ActionCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*StrategySightRange*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*DamageRatio*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*DamagedRatio*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*DamageRatio2Increase*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*DamageRatio2Decrease*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*DamagedRatio2Increase*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*DamagedRatio2Decrease*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*ExDamagedRatioIncrease*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*ExDamagedRatioDecrease*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*EnhanceExDamageRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*ReduceExDamagedRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*EnhanceBasicsDamageRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*ReduceBasicsDamagedRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*HealRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*HealLightArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*HealHeavyArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*HealUnarmedRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*HealElasticArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*HealNormalArmorRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 148 /*HealedExplosionRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*HealedPierceRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 152 /*HealedMysticRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 154 /*HealedSonicRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 156 /*HealedNormalRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 158 /*StreetBattleAdaptation*/, 4 /*Japan.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 160 /*OutdoorBattleAdaptation*/, 4 /*Japan.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 162 /*IndoorBattleAdaptation*/, 4 /*Japan.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 164 /*RegenCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
