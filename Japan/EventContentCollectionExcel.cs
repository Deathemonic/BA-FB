// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentCollectionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentCollectionExcel GetRootAsEventContentCollectionExcel(ByteBuffer _bb) { return GetRootAsEventContentCollectionExcel(_bb, new EventContentCollectionExcel()); }
  public static EventContentCollectionExcel GetRootAsEventContentCollectionExcel(ByteBuffer _bb, EventContentCollectionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentCollectionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.CollectionUnlockType UnlockConditionType { get { int o = __p.__offset(10); return o != 0 ? (Japan.CollectionUnlockType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CollectionUnlockType.None; } }
  public long UnlockConditionParameter(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int UnlockConditionParameterLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetUnlockConditionParameterBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetUnlockConditionParameterBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetUnlockConditionParameterArray() { return __p.__vector_as_array<long>(12); }
  public Japan.MultipleConditionCheckType MultipleConditionCheckType { get { int o = __p.__offset(14); return o != 0 ? (Japan.MultipleConditionCheckType)__p.bb.GetInt(o + __p.bb_pos) : Japan.MultipleConditionCheckType.And; } }
  public long UnlockConditionCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsObject { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsObjectOnFullResource { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsHorizon { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string EmblemResource { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmblemResourceBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetEmblemResourceBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetEmblemResourceArray() { return __p.__vector_as_array<byte>(24); }
  public string ThumbResource { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThumbResourceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetThumbResourceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetThumbResourceArray() { return __p.__vector_as_array<byte>(26); }
  public string FullResource { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFullResourceBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetFullResourceBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetFullResourceArray() { return __p.__vector_as_array<byte>(28); }
  public string Decoration { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDecorationBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetDecorationBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetDecorationArray() { return __p.__vector_as_array<byte>(30); }
  public uint LocalizeEtcId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string SubNameLocalizeCodeId { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubNameLocalizeCodeIdBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetSubNameLocalizeCodeIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetSubNameLocalizeCodeIdArray() { return __p.__vector_as_array<byte>(34); }

  public static Offset<Japan.EventContentCollectionExcel> CreateEventContentCollectionExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      long GroupId = 0,
      Japan.CollectionUnlockType UnlockConditionType = Japan.CollectionUnlockType.None,
      VectorOffset UnlockConditionParameterOffset = default(VectorOffset),
      Japan.MultipleConditionCheckType MultipleConditionCheckType = Japan.MultipleConditionCheckType.And,
      long UnlockConditionCount = 0,
      bool IsObject = false,
      bool IsObjectOnFullResource = false,
      bool IsHorizon = false,
      StringOffset EmblemResourceOffset = default(StringOffset),
      StringOffset ThumbResourceOffset = default(StringOffset),
      StringOffset FullResourceOffset = default(StringOffset),
      StringOffset DecorationOffset = default(StringOffset),
      uint LocalizeEtcId = 0,
      StringOffset SubNameLocalizeCodeIdOffset = default(StringOffset)) {
    builder.StartTable(16);
    EventContentCollectionExcel.AddUnlockConditionCount(builder, UnlockConditionCount);
    EventContentCollectionExcel.AddGroupId(builder, GroupId);
    EventContentCollectionExcel.AddEventContentId(builder, EventContentId);
    EventContentCollectionExcel.AddId(builder, Id);
    EventContentCollectionExcel.AddSubNameLocalizeCodeId(builder, SubNameLocalizeCodeIdOffset);
    EventContentCollectionExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    EventContentCollectionExcel.AddDecoration(builder, DecorationOffset);
    EventContentCollectionExcel.AddFullResource(builder, FullResourceOffset);
    EventContentCollectionExcel.AddThumbResource(builder, ThumbResourceOffset);
    EventContentCollectionExcel.AddEmblemResource(builder, EmblemResourceOffset);
    EventContentCollectionExcel.AddMultipleConditionCheckType(builder, MultipleConditionCheckType);
    EventContentCollectionExcel.AddUnlockConditionParameter(builder, UnlockConditionParameterOffset);
    EventContentCollectionExcel.AddUnlockConditionType(builder, UnlockConditionType);
    EventContentCollectionExcel.AddIsHorizon(builder, IsHorizon);
    EventContentCollectionExcel.AddIsObjectOnFullResource(builder, IsObjectOnFullResource);
    EventContentCollectionExcel.AddIsObject(builder, IsObject);
    return EventContentCollectionExcel.EndEventContentCollectionExcel(builder);
  }

  public static void StartEventContentCollectionExcel(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(2, groupId, 0); }
  public static void AddUnlockConditionType(FlatBufferBuilder builder, Japan.CollectionUnlockType unlockConditionType) { builder.AddInt(3, (int)unlockConditionType, 0); }
  public static void AddUnlockConditionParameter(FlatBufferBuilder builder, VectorOffset unlockConditionParameterOffset) { builder.AddOffset(4, unlockConditionParameterOffset.Value, 0); }
  public static VectorOffset CreateUnlockConditionParameterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnlockConditionParameterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnlockConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnlockConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMultipleConditionCheckType(FlatBufferBuilder builder, Japan.MultipleConditionCheckType multipleConditionCheckType) { builder.AddInt(5, (int)multipleConditionCheckType, 0); }
  public static void AddUnlockConditionCount(FlatBufferBuilder builder, long unlockConditionCount) { builder.AddLong(6, unlockConditionCount, 0); }
  public static void AddIsObject(FlatBufferBuilder builder, bool isObject) { builder.AddBool(7, isObject, false); }
  public static void AddIsObjectOnFullResource(FlatBufferBuilder builder, bool isObjectOnFullResource) { builder.AddBool(8, isObjectOnFullResource, false); }
  public static void AddIsHorizon(FlatBufferBuilder builder, bool isHorizon) { builder.AddBool(9, isHorizon, false); }
  public static void AddEmblemResource(FlatBufferBuilder builder, StringOffset emblemResourceOffset) { builder.AddOffset(10, emblemResourceOffset.Value, 0); }
  public static void AddThumbResource(FlatBufferBuilder builder, StringOffset thumbResourceOffset) { builder.AddOffset(11, thumbResourceOffset.Value, 0); }
  public static void AddFullResource(FlatBufferBuilder builder, StringOffset fullResourceOffset) { builder.AddOffset(12, fullResourceOffset.Value, 0); }
  public static void AddDecoration(FlatBufferBuilder builder, StringOffset decorationOffset) { builder.AddOffset(13, decorationOffset.Value, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(14, localizeEtcId, 0); }
  public static void AddSubNameLocalizeCodeId(FlatBufferBuilder builder, StringOffset subNameLocalizeCodeIdOffset) { builder.AddOffset(15, subNameLocalizeCodeIdOffset.Value, 0); }
  public static Offset<Japan.EventContentCollectionExcel> EndEventContentCollectionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentCollectionExcel>(o);
  }
  public EventContentCollectionExcelT UnPack() {
    var _o = new EventContentCollectionExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentCollectionExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentCollection");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.UnlockConditionType = TableEncryptionService.UseEncryption ? (Japan.CollectionUnlockType)TableEncryptionService.Convert((int)this.UnlockConditionType, key) : this.UnlockConditionType;
    _o.UnlockConditionParameter = new List<long>();
    for (var _j = 0; _j < this.UnlockConditionParameterLength; ++_j) {_o.UnlockConditionParameter.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UnlockConditionParameter(_j), key) : this.UnlockConditionParameter(_j));}
    _o.MultipleConditionCheckType = TableEncryptionService.UseEncryption ? (Japan.MultipleConditionCheckType)TableEncryptionService.Convert((int)this.MultipleConditionCheckType, key) : this.MultipleConditionCheckType;
    _o.UnlockConditionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UnlockConditionCount, key) : this.UnlockConditionCount;
    _o.IsObject = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsObject, key) : this.IsObject;
    _o.IsObjectOnFullResource = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsObjectOnFullResource, key) : this.IsObjectOnFullResource;
    _o.IsHorizon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsHorizon, key) : this.IsHorizon;
    _o.EmblemResource = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EmblemResource, key) : this.EmblemResource;
    _o.ThumbResource = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ThumbResource, key) : this.ThumbResource;
    _o.FullResource = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.FullResource, key) : this.FullResource;
    _o.Decoration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Decoration, key) : this.Decoration;
    _o.LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEtcId, key) : this.LocalizeEtcId;
    _o.SubNameLocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SubNameLocalizeCodeId, key) : this.SubNameLocalizeCodeId;
  }
  public static Offset<Japan.EventContentCollectionExcel> Pack(FlatBufferBuilder builder, EventContentCollectionExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentCollectionExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentCollection");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _UnlockConditionType = TableEncryptionService.UseEncryption ? (Japan.CollectionUnlockType)TableEncryptionService.Convert((int)_o.UnlockConditionType, key) : _o.UnlockConditionType;
    var _UnlockConditionParameter = default(VectorOffset);
    if (_o.UnlockConditionParameter != null) {
      var __UnlockConditionParameter = _o.UnlockConditionParameter.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _UnlockConditionParameter = CreateUnlockConditionParameterVector(builder, __UnlockConditionParameter);
    }
		var _MultipleConditionCheckType = TableEncryptionService.UseEncryption ? (Japan.MultipleConditionCheckType)TableEncryptionService.Convert((int)_o.MultipleConditionCheckType, key) : _o.MultipleConditionCheckType;
		var _UnlockConditionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UnlockConditionCount, key) : _o.UnlockConditionCount;
		var _IsObject = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsObject, key) : _o.IsObject;
		var _IsObjectOnFullResource = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsObjectOnFullResource, key) : _o.IsObjectOnFullResource;
		var _IsHorizon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsHorizon, key) : _o.IsHorizon;
    var _EmblemResource = _o.EmblemResource == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EmblemResource, key) : _o.EmblemResource));
    var _ThumbResource = _o.ThumbResource == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ThumbResource, key) : _o.ThumbResource));
    var _FullResource = _o.FullResource == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.FullResource, key) : _o.FullResource));
    var _Decoration = _o.Decoration == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Decoration, key) : _o.Decoration));
		var _LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEtcId, key) : _o.LocalizeEtcId;
    var _SubNameLocalizeCodeId = _o.SubNameLocalizeCodeId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SubNameLocalizeCodeId, key) : _o.SubNameLocalizeCodeId));
    return CreateEventContentCollectionExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _UnlockConditionType : _o.UnlockConditionType,
      _UnlockConditionParameter,
      TableEncryptionService.UseEncryption ? _MultipleConditionCheckType : _o.MultipleConditionCheckType,
      TableEncryptionService.UseEncryption ? _UnlockConditionCount : _o.UnlockConditionCount,
      TableEncryptionService.UseEncryption ? _IsObject : _o.IsObject,
      TableEncryptionService.UseEncryption ? _IsObjectOnFullResource : _o.IsObjectOnFullResource,
      TableEncryptionService.UseEncryption ? _IsHorizon : _o.IsHorizon,
      _EmblemResource,
      _ThumbResource,
      _FullResource,
      _Decoration,
      TableEncryptionService.UseEncryption ? _LocalizeEtcId : _o.LocalizeEtcId,
      _SubNameLocalizeCodeId);
  }
}

public class EventContentCollectionExcelT
{
  public long Id { get; set; }
  public long EventContentId { get; set; }
  public long GroupId { get; set; }
  public Japan.CollectionUnlockType UnlockConditionType { get; set; }
  public List<long> UnlockConditionParameter { get; set; }
  public Japan.MultipleConditionCheckType MultipleConditionCheckType { get; set; }
  public long UnlockConditionCount { get; set; }
  public bool IsObject { get; set; }
  public bool IsObjectOnFullResource { get; set; }
  public bool IsHorizon { get; set; }
  public string EmblemResource { get; set; }
  public string ThumbResource { get; set; }
  public string FullResource { get; set; }
  public string Decoration { get; set; }
  public uint LocalizeEtcId { get; set; }
  public string SubNameLocalizeCodeId { get; set; }

  public EventContentCollectionExcelT() {
    this.Id = 0;
    this.EventContentId = 0;
    this.GroupId = 0;
    this.UnlockConditionType = Japan.CollectionUnlockType.None;
    this.UnlockConditionParameter = null;
    this.MultipleConditionCheckType = Japan.MultipleConditionCheckType.And;
    this.UnlockConditionCount = 0;
    this.IsObject = false;
    this.IsObjectOnFullResource = false;
    this.IsHorizon = false;
    this.EmblemResource = null;
    this.ThumbResource = null;
    this.FullResource = null;
    this.Decoration = null;
    this.LocalizeEtcId = 0;
    this.SubNameLocalizeCodeId = null;
  }
}


static public class EventContentCollectionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*UnlockConditionType*/, 4 /*Japan.CollectionUnlockType*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*UnlockConditionParameter*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 14 /*MultipleConditionCheckType*/, 4 /*Japan.MultipleConditionCheckType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*UnlockConditionCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*IsObject*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*IsObjectOnFullResource*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*IsHorizon*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*EmblemResource*/, false)
      && verifier.VerifyString(tablePos, 26 /*ThumbResource*/, false)
      && verifier.VerifyString(tablePos, 28 /*FullResource*/, false)
      && verifier.VerifyString(tablePos, 30 /*Decoration*/, false)
      && verifier.VerifyField(tablePos, 32 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 34 /*SubNameLocalizeCodeId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
