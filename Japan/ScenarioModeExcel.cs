// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ScenarioModeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScenarioModeExcel GetRootAsScenarioModeExcel(ByteBuffer _bb) { return GetRootAsScenarioModeExcel(_bb, new ScenarioModeExcel()); }
  public static ScenarioModeExcel GetRootAsScenarioModeExcel(ByteBuffer _bb, ScenarioModeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioModeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ModeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ScenarioModeTypes ModeType { get { int o = __p.__offset(6); return o != 0 ? (Japan.ScenarioModeTypes)__p.bb.GetInt(o + __p.bb_pos) : Japan.ScenarioModeTypes.None; } }
  public Japan.ScenarioModeSubTypes SubType { get { int o = __p.__offset(8); return o != 0 ? (Japan.ScenarioModeSubTypes)__p.bb.GetInt(o + __p.bb_pos) : Japan.ScenarioModeSubTypes.None; } }
  public long VolumeId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ChapterId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EpisodeId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ExposedTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExposedTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetExposedTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetExposedTimeArray() { return __p.__vector_as_array<byte>(16); }
  public bool Hide { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Open { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsContinue { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long EpisodeContinueModeId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FrontScenarioGroupId(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int FrontScenarioGroupIdLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetFrontScenarioGroupIdBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetFrontScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetFrontScenarioGroupIdArray() { return __p.__vector_as_array<long>(26); }
  public long StrategyId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroundId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsDefeatBattle { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long BattleDuration { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BackScenarioGroupId(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BackScenarioGroupIdLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBackScenarioGroupIdBytes() { return __p.__vector_as_span<long>(36, 8); }
#else
  public ArraySegment<byte>? GetBackScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public long[] GetBackScenarioGroupIdArray() { return __p.__vector_as_array<long>(36); }
  public long ClearedModeId(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ClearedModeIdLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetClearedModeIdBytes() { return __p.__vector_as_span<long>(38, 8); }
#else
  public ArraySegment<byte>? GetClearedModeIdBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public long[] GetClearedModeIdArray() { return __p.__vector_as_array<long>(38); }
  public long ScenarioModeRewardId { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsScenarioSpecialReward { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long AccountLevelLimit { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearedStageId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.Club NeedClub { get { int o = __p.__offset(48); return o != 0 ? (Japan.Club)__p.bb.GetInt(o + __p.bb_pos) : Japan.Club.None; } }
  public int NeedClubStudentCount { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EventContentId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.EventContentType EventContentType { get { int o = __p.__offset(54); return o != 0 ? (Japan.EventContentType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EventContentType.Stage; } }
  public long EventContentCondition { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentConditionGroup { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.StageDifficulty MapDifficulty { get { int o = __p.__offset(60); return o != 0 ? (Japan.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : Japan.StageDifficulty.None; } }
  public int StepIndex { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommendLevel { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EventIconParcelPath { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIconParcelPathBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetEventIconParcelPathBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetEventIconParcelPathArray() { return __p.__vector_as_array<byte>(66); }
  public uint EventBannerTitle { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool Lof { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Japan.StageTopography StageTopography { get { int o = __p.__offset(72); return o != 0 ? (Japan.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : Japan.StageTopography.Street; } }
  public long FixedEchelonId { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string CompleteReportEventName { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompleteReportEventNameBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetCompleteReportEventNameBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetCompleteReportEventNameArray() { return __p.__vector_as_array<byte>(76); }
  public Japan.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(78); return o != 0 ? (Japan.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EchelonExtensionType.Base; } }
  public long CollectionGroupId { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.ScenarioModeExcel> CreateScenarioModeExcel(FlatBufferBuilder builder,
      long ModeId = 0,
      Japan.ScenarioModeTypes ModeType = Japan.ScenarioModeTypes.None,
      Japan.ScenarioModeSubTypes SubType = Japan.ScenarioModeSubTypes.None,
      long VolumeId = 0,
      long ChapterId = 0,
      long EpisodeId = 0,
      StringOffset ExposedTimeOffset = default(StringOffset),
      bool Hide = false,
      bool Open = false,
      bool IsContinue = false,
      long EpisodeContinueModeId = 0,
      VectorOffset FrontScenarioGroupIdOffset = default(VectorOffset),
      long StrategyId = 0,
      long GroundId = 0,
      bool IsDefeatBattle = false,
      long BattleDuration = 0,
      VectorOffset BackScenarioGroupIdOffset = default(VectorOffset),
      VectorOffset ClearedModeIdOffset = default(VectorOffset),
      long ScenarioModeRewardId = 0,
      bool IsScenarioSpecialReward = false,
      long AccountLevelLimit = 0,
      long ClearedStageId = 0,
      Japan.Club NeedClub = Japan.Club.None,
      int NeedClubStudentCount = 0,
      long EventContentId = 0,
      Japan.EventContentType EventContentType = Japan.EventContentType.Stage,
      long EventContentCondition = 0,
      long EventContentConditionGroup = 0,
      Japan.StageDifficulty MapDifficulty = Japan.StageDifficulty.None,
      int StepIndex = 0,
      int RecommendLevel = 0,
      StringOffset EventIconParcelPathOffset = default(StringOffset),
      uint EventBannerTitle = 0,
      bool lof = false,
      Japan.StageTopography StageTopography = Japan.StageTopography.Street,
      long FixedEchelonId = 0,
      StringOffset CompleteReportEventNameOffset = default(StringOffset),
      Japan.EchelonExtensionType EchelonExtensionType = Japan.EchelonExtensionType.Base,
      long CollectionGroupId = 0) {
    builder.StartTable(39);
    ScenarioModeExcel.AddCollectionGroupId(builder, CollectionGroupId);
    ScenarioModeExcel.AddFixedEchelonId(builder, FixedEchelonId);
    ScenarioModeExcel.AddEventContentConditionGroup(builder, EventContentConditionGroup);
    ScenarioModeExcel.AddEventContentCondition(builder, EventContentCondition);
    ScenarioModeExcel.AddEventContentId(builder, EventContentId);
    ScenarioModeExcel.AddClearedStageId(builder, ClearedStageId);
    ScenarioModeExcel.AddAccountLevelLimit(builder, AccountLevelLimit);
    ScenarioModeExcel.AddScenarioModeRewardId(builder, ScenarioModeRewardId);
    ScenarioModeExcel.AddBattleDuration(builder, BattleDuration);
    ScenarioModeExcel.AddGroundId(builder, GroundId);
    ScenarioModeExcel.AddStrategyId(builder, StrategyId);
    ScenarioModeExcel.AddEpisodeContinueModeId(builder, EpisodeContinueModeId);
    ScenarioModeExcel.AddEpisodeId(builder, EpisodeId);
    ScenarioModeExcel.AddChapterId(builder, ChapterId);
    ScenarioModeExcel.AddVolumeId(builder, VolumeId);
    ScenarioModeExcel.AddModeId(builder, ModeId);
    ScenarioModeExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    ScenarioModeExcel.AddCompleteReportEventName(builder, CompleteReportEventNameOffset);
    ScenarioModeExcel.AddStageTopography(builder, StageTopography);
    ScenarioModeExcel.AddEventBannerTitle(builder, EventBannerTitle);
    ScenarioModeExcel.AddEventIconParcelPath(builder, EventIconParcelPathOffset);
    ScenarioModeExcel.AddRecommendLevel(builder, RecommendLevel);
    ScenarioModeExcel.AddStepIndex(builder, StepIndex);
    ScenarioModeExcel.AddMapDifficulty(builder, MapDifficulty);
    ScenarioModeExcel.AddEventContentType(builder, EventContentType);
    ScenarioModeExcel.AddNeedClubStudentCount(builder, NeedClubStudentCount);
    ScenarioModeExcel.AddNeedClub(builder, NeedClub);
    ScenarioModeExcel.AddClearedModeId(builder, ClearedModeIdOffset);
    ScenarioModeExcel.AddBackScenarioGroupId(builder, BackScenarioGroupIdOffset);
    ScenarioModeExcel.AddFrontScenarioGroupId(builder, FrontScenarioGroupIdOffset);
    ScenarioModeExcel.AddExposedTime(builder, ExposedTimeOffset);
    ScenarioModeExcel.AddSubType(builder, SubType);
    ScenarioModeExcel.AddModeType(builder, ModeType);
    ScenarioModeExcel.AddLof(builder, lof);
    ScenarioModeExcel.AddIsScenarioSpecialReward(builder, IsScenarioSpecialReward);
    ScenarioModeExcel.AddIsDefeatBattle(builder, IsDefeatBattle);
    ScenarioModeExcel.AddIsContinue(builder, IsContinue);
    ScenarioModeExcel.AddOpen(builder, Open);
    ScenarioModeExcel.AddHide(builder, Hide);
    return ScenarioModeExcel.EndScenarioModeExcel(builder);
  }

  public static void StartScenarioModeExcel(FlatBufferBuilder builder) { builder.StartTable(39); }
  public static void AddModeId(FlatBufferBuilder builder, long modeId) { builder.AddLong(0, modeId, 0); }
  public static void AddModeType(FlatBufferBuilder builder, Japan.ScenarioModeTypes modeType) { builder.AddInt(1, (int)modeType, 0); }
  public static void AddSubType(FlatBufferBuilder builder, Japan.ScenarioModeSubTypes subType) { builder.AddInt(2, (int)subType, 0); }
  public static void AddVolumeId(FlatBufferBuilder builder, long volumeId) { builder.AddLong(3, volumeId, 0); }
  public static void AddChapterId(FlatBufferBuilder builder, long chapterId) { builder.AddLong(4, chapterId, 0); }
  public static void AddEpisodeId(FlatBufferBuilder builder, long episodeId) { builder.AddLong(5, episodeId, 0); }
  public static void AddExposedTime(FlatBufferBuilder builder, StringOffset exposedTimeOffset) { builder.AddOffset(6, exposedTimeOffset.Value, 0); }
  public static void AddHide(FlatBufferBuilder builder, bool hide) { builder.AddBool(7, hide, false); }
  public static void AddOpen(FlatBufferBuilder builder, bool open) { builder.AddBool(8, open, false); }
  public static void AddIsContinue(FlatBufferBuilder builder, bool isContinue) { builder.AddBool(9, isContinue, false); }
  public static void AddEpisodeContinueModeId(FlatBufferBuilder builder, long episodeContinueModeId) { builder.AddLong(10, episodeContinueModeId, 0); }
  public static void AddFrontScenarioGroupId(FlatBufferBuilder builder, VectorOffset frontScenarioGroupIdOffset) { builder.AddOffset(11, frontScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateFrontScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFrontScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrontScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrontScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFrontScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStrategyId(FlatBufferBuilder builder, long strategyId) { builder.AddLong(12, strategyId, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(13, groundId, 0); }
  public static void AddIsDefeatBattle(FlatBufferBuilder builder, bool isDefeatBattle) { builder.AddBool(14, isDefeatBattle, false); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(15, battleDuration, 0); }
  public static void AddBackScenarioGroupId(FlatBufferBuilder builder, VectorOffset backScenarioGroupIdOffset) { builder.AddOffset(16, backScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateBackScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBackScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBackScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBackScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBackScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddClearedModeId(FlatBufferBuilder builder, VectorOffset clearedModeIdOffset) { builder.AddOffset(17, clearedModeIdOffset.Value, 0); }
  public static VectorOffset CreateClearedModeIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateClearedModeIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearedModeIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearedModeIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClearedModeIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddScenarioModeRewardId(FlatBufferBuilder builder, long scenarioModeRewardId) { builder.AddLong(18, scenarioModeRewardId, 0); }
  public static void AddIsScenarioSpecialReward(FlatBufferBuilder builder, bool isScenarioSpecialReward) { builder.AddBool(19, isScenarioSpecialReward, false); }
  public static void AddAccountLevelLimit(FlatBufferBuilder builder, long accountLevelLimit) { builder.AddLong(20, accountLevelLimit, 0); }
  public static void AddClearedStageId(FlatBufferBuilder builder, long clearedStageId) { builder.AddLong(21, clearedStageId, 0); }
  public static void AddNeedClub(FlatBufferBuilder builder, Japan.Club needClub) { builder.AddInt(22, (int)needClub, 0); }
  public static void AddNeedClubStudentCount(FlatBufferBuilder builder, int needClubStudentCount) { builder.AddInt(23, needClubStudentCount, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(24, eventContentId, 0); }
  public static void AddEventContentType(FlatBufferBuilder builder, Japan.EventContentType eventContentType) { builder.AddInt(25, (int)eventContentType, 0); }
  public static void AddEventContentCondition(FlatBufferBuilder builder, long eventContentCondition) { builder.AddLong(26, eventContentCondition, 0); }
  public static void AddEventContentConditionGroup(FlatBufferBuilder builder, long eventContentConditionGroup) { builder.AddLong(27, eventContentConditionGroup, 0); }
  public static void AddMapDifficulty(FlatBufferBuilder builder, Japan.StageDifficulty mapDifficulty) { builder.AddInt(28, (int)mapDifficulty, 0); }
  public static void AddStepIndex(FlatBufferBuilder builder, int stepIndex) { builder.AddInt(29, stepIndex, 0); }
  public static void AddRecommendLevel(FlatBufferBuilder builder, int recommendLevel) { builder.AddInt(30, recommendLevel, 0); }
  public static void AddEventIconParcelPath(FlatBufferBuilder builder, StringOffset eventIconParcelPathOffset) { builder.AddOffset(31, eventIconParcelPathOffset.Value, 0); }
  public static void AddEventBannerTitle(FlatBufferBuilder builder, uint eventBannerTitle) { builder.AddUint(32, eventBannerTitle, 0); }
  public static void AddLof(FlatBufferBuilder builder, bool lof) { builder.AddBool(33, lof, false); }
  public static void AddStageTopography(FlatBufferBuilder builder, Japan.StageTopography stageTopography) { builder.AddInt(34, (int)stageTopography, 0); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long fixedEchelonId) { builder.AddLong(35, fixedEchelonId, 0); }
  public static void AddCompleteReportEventName(FlatBufferBuilder builder, StringOffset completeReportEventNameOffset) { builder.AddOffset(36, completeReportEventNameOffset.Value, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, Japan.EchelonExtensionType echelonExtensionType) { builder.AddInt(37, (int)echelonExtensionType, 0); }
  public static void AddCollectionGroupId(FlatBufferBuilder builder, long collectionGroupId) { builder.AddLong(38, collectionGroupId, 0); }
  public static Offset<Japan.ScenarioModeExcel> EndScenarioModeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.ScenarioModeExcel>(o);
  }
  public ScenarioModeExcelT UnPack() {
    var _o = new ScenarioModeExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioModeExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ScenarioMode");
    _o.ModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ModeId, key) : this.ModeId;
    _o.ModeType = TableEncryptionService.UseEncryption ? (Japan.ScenarioModeTypes)TableEncryptionService.Convert((int)this.ModeType, key) : this.ModeType;
    _o.SubType = TableEncryptionService.UseEncryption ? (Japan.ScenarioModeSubTypes)TableEncryptionService.Convert((int)this.SubType, key) : this.SubType;
    _o.VolumeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.VolumeId, key) : this.VolumeId;
    _o.ChapterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ChapterId, key) : this.ChapterId;
    _o.EpisodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EpisodeId, key) : this.EpisodeId;
    _o.ExposedTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ExposedTime, key) : this.ExposedTime;
    _o.Hide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.Hide, key) : this.Hide;
    _o.Open = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.Open, key) : this.Open;
    _o.IsContinue = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsContinue, key) : this.IsContinue;
    _o.EpisodeContinueModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EpisodeContinueModeId, key) : this.EpisodeContinueModeId;
    _o.FrontScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.FrontScenarioGroupIdLength; ++_j) {_o.FrontScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FrontScenarioGroupId(_j), key) : this.FrontScenarioGroupId(_j));}
    _o.StrategyId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StrategyId, key) : this.StrategyId;
    _o.GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundId, key) : this.GroundId;
    _o.IsDefeatBattle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsDefeatBattle, key) : this.IsDefeatBattle;
    _o.BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattleDuration, key) : this.BattleDuration;
    _o.BackScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.BackScenarioGroupIdLength; ++_j) {_o.BackScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BackScenarioGroupId(_j), key) : this.BackScenarioGroupId(_j));}
    _o.ClearedModeId = new List<long>();
    for (var _j = 0; _j < this.ClearedModeIdLength; ++_j) {_o.ClearedModeId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearedModeId(_j), key) : this.ClearedModeId(_j));}
    _o.ScenarioModeRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ScenarioModeRewardId, key) : this.ScenarioModeRewardId;
    _o.IsScenarioSpecialReward = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsScenarioSpecialReward, key) : this.IsScenarioSpecialReward;
    _o.AccountLevelLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccountLevelLimit, key) : this.AccountLevelLimit;
    _o.ClearedStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearedStageId, key) : this.ClearedStageId;
    _o.NeedClub = TableEncryptionService.UseEncryption ? (Japan.Club)TableEncryptionService.Convert((int)this.NeedClub, key) : this.NeedClub;
    _o.NeedClubStudentCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.NeedClubStudentCount, key) : this.NeedClubStudentCount;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)this.EventContentType, key) : this.EventContentType;
    _o.EventContentCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentCondition, key) : this.EventContentCondition;
    _o.EventContentConditionGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentConditionGroup, key) : this.EventContentConditionGroup;
    _o.MapDifficulty = TableEncryptionService.UseEncryption ? (Japan.StageDifficulty)TableEncryptionService.Convert((int)this.MapDifficulty, key) : this.MapDifficulty;
    _o.StepIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StepIndex, key) : this.StepIndex;
    _o.RecommendLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RecommendLevel, key) : this.RecommendLevel;
    _o.EventIconParcelPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EventIconParcelPath, key) : this.EventIconParcelPath;
    _o.EventBannerTitle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.EventBannerTitle, key) : this.EventBannerTitle;
    _o.Lof = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.Lof, key) : this.Lof;
    _o.StageTopography = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)this.StageTopography, key) : this.StageTopography;
    _o.FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FixedEchelonId, key) : this.FixedEchelonId;
    _o.CompleteReportEventName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CompleteReportEventName, key) : this.CompleteReportEventName;
    _o.EchelonExtensionType = TableEncryptionService.UseEncryption ? (Japan.EchelonExtensionType)TableEncryptionService.Convert((int)this.EchelonExtensionType, key) : this.EchelonExtensionType;
    _o.CollectionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CollectionGroupId, key) : this.CollectionGroupId;
  }
  public static Offset<Japan.ScenarioModeExcel> Pack(FlatBufferBuilder builder, ScenarioModeExcelT _o) {
    if (_o == null) return default(Offset<Japan.ScenarioModeExcel>);
		byte[] key = TableEncryptionService.CreateKey("ScenarioMode");
		var _ModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ModeId, key) : _o.ModeId;
		var _ModeType = TableEncryptionService.UseEncryption ? (Japan.ScenarioModeTypes)TableEncryptionService.Convert((int)_o.ModeType, key) : _o.ModeType;
		var _SubType = TableEncryptionService.UseEncryption ? (Japan.ScenarioModeSubTypes)TableEncryptionService.Convert((int)_o.SubType, key) : _o.SubType;
		var _VolumeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.VolumeId, key) : _o.VolumeId;
		var _ChapterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ChapterId, key) : _o.ChapterId;
		var _EpisodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EpisodeId, key) : _o.EpisodeId;
    var _ExposedTime = _o.ExposedTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ExposedTime, key) : _o.ExposedTime));
		var _Hide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.Hide, key) : _o.Hide;
		var _Open = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.Open, key) : _o.Open;
		var _IsContinue = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsContinue, key) : _o.IsContinue;
		var _EpisodeContinueModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EpisodeContinueModeId, key) : _o.EpisodeContinueModeId;
    var _FrontScenarioGroupId = default(VectorOffset);
    if (_o.FrontScenarioGroupId != null) {
      var __FrontScenarioGroupId = _o.FrontScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _FrontScenarioGroupId = CreateFrontScenarioGroupIdVector(builder, __FrontScenarioGroupId);
    }
		var _StrategyId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StrategyId, key) : _o.StrategyId;
		var _GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundId, key) : _o.GroundId;
		var _IsDefeatBattle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsDefeatBattle, key) : _o.IsDefeatBattle;
		var _BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattleDuration, key) : _o.BattleDuration;
    var _BackScenarioGroupId = default(VectorOffset);
    if (_o.BackScenarioGroupId != null) {
      var __BackScenarioGroupId = _o.BackScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _BackScenarioGroupId = CreateBackScenarioGroupIdVector(builder, __BackScenarioGroupId);
    }
    var _ClearedModeId = default(VectorOffset);
    if (_o.ClearedModeId != null) {
      var __ClearedModeId = _o.ClearedModeId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ClearedModeId = CreateClearedModeIdVector(builder, __ClearedModeId);
    }
		var _ScenarioModeRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ScenarioModeRewardId, key) : _o.ScenarioModeRewardId;
		var _IsScenarioSpecialReward = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsScenarioSpecialReward, key) : _o.IsScenarioSpecialReward;
		var _AccountLevelLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccountLevelLimit, key) : _o.AccountLevelLimit;
		var _ClearedStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearedStageId, key) : _o.ClearedStageId;
		var _NeedClub = TableEncryptionService.UseEncryption ? (Japan.Club)TableEncryptionService.Convert((int)_o.NeedClub, key) : _o.NeedClub;
		var _NeedClubStudentCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.NeedClubStudentCount, key) : _o.NeedClubStudentCount;
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)_o.EventContentType, key) : _o.EventContentType;
		var _EventContentCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentCondition, key) : _o.EventContentCondition;
		var _EventContentConditionGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentConditionGroup, key) : _o.EventContentConditionGroup;
		var _MapDifficulty = TableEncryptionService.UseEncryption ? (Japan.StageDifficulty)TableEncryptionService.Convert((int)_o.MapDifficulty, key) : _o.MapDifficulty;
		var _StepIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StepIndex, key) : _o.StepIndex;
		var _RecommendLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RecommendLevel, key) : _o.RecommendLevel;
    var _EventIconParcelPath = _o.EventIconParcelPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EventIconParcelPath, key) : _o.EventIconParcelPath));
		var _EventBannerTitle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.EventBannerTitle, key) : _o.EventBannerTitle;
		var _lof = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.Lof, key) : _o.Lof;
		var _StageTopography = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)_o.StageTopography, key) : _o.StageTopography;
		var _FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FixedEchelonId, key) : _o.FixedEchelonId;
    var _CompleteReportEventName = _o.CompleteReportEventName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CompleteReportEventName, key) : _o.CompleteReportEventName));
		var _EchelonExtensionType = TableEncryptionService.UseEncryption ? (Japan.EchelonExtensionType)TableEncryptionService.Convert((int)_o.EchelonExtensionType, key) : _o.EchelonExtensionType;
		var _CollectionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CollectionGroupId, key) : _o.CollectionGroupId;
    return CreateScenarioModeExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ModeId : _o.ModeId,
      TableEncryptionService.UseEncryption ? _ModeType : _o.ModeType,
      TableEncryptionService.UseEncryption ? _SubType : _o.SubType,
      TableEncryptionService.UseEncryption ? _VolumeId : _o.VolumeId,
      TableEncryptionService.UseEncryption ? _ChapterId : _o.ChapterId,
      TableEncryptionService.UseEncryption ? _EpisodeId : _o.EpisodeId,
      _ExposedTime,
      TableEncryptionService.UseEncryption ? _Hide : _o.Hide,
      TableEncryptionService.UseEncryption ? _Open : _o.Open,
      TableEncryptionService.UseEncryption ? _IsContinue : _o.IsContinue,
      TableEncryptionService.UseEncryption ? _EpisodeContinueModeId : _o.EpisodeContinueModeId,
      _FrontScenarioGroupId,
      TableEncryptionService.UseEncryption ? _StrategyId : _o.StrategyId,
      TableEncryptionService.UseEncryption ? _GroundId : _o.GroundId,
      TableEncryptionService.UseEncryption ? _IsDefeatBattle : _o.IsDefeatBattle,
      TableEncryptionService.UseEncryption ? _BattleDuration : _o.BattleDuration,
      _BackScenarioGroupId,
      _ClearedModeId,
      TableEncryptionService.UseEncryption ? _ScenarioModeRewardId : _o.ScenarioModeRewardId,
      TableEncryptionService.UseEncryption ? _IsScenarioSpecialReward : _o.IsScenarioSpecialReward,
      TableEncryptionService.UseEncryption ? _AccountLevelLimit : _o.AccountLevelLimit,
      TableEncryptionService.UseEncryption ? _ClearedStageId : _o.ClearedStageId,
      TableEncryptionService.UseEncryption ? _NeedClub : _o.NeedClub,
      TableEncryptionService.UseEncryption ? _NeedClubStudentCount : _o.NeedClubStudentCount,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _EventContentType : _o.EventContentType,
      TableEncryptionService.UseEncryption ? _EventContentCondition : _o.EventContentCondition,
      TableEncryptionService.UseEncryption ? _EventContentConditionGroup : _o.EventContentConditionGroup,
      TableEncryptionService.UseEncryption ? _MapDifficulty : _o.MapDifficulty,
      TableEncryptionService.UseEncryption ? _StepIndex : _o.StepIndex,
      TableEncryptionService.UseEncryption ? _RecommendLevel : _o.RecommendLevel,
      _EventIconParcelPath,
      TableEncryptionService.UseEncryption ? _EventBannerTitle : _o.EventBannerTitle,
      TableEncryptionService.UseEncryption ? _lof : _o.Lof,
      TableEncryptionService.UseEncryption ? _StageTopography : _o.StageTopography,
      TableEncryptionService.UseEncryption ? _FixedEchelonId : _o.FixedEchelonId,
      _CompleteReportEventName,
      TableEncryptionService.UseEncryption ? _EchelonExtensionType : _o.EchelonExtensionType,
      TableEncryptionService.UseEncryption ? _CollectionGroupId : _o.CollectionGroupId);
  }
}

public class ScenarioModeExcelT
{
  public long ModeId { get; set; }
  public Japan.ScenarioModeTypes ModeType { get; set; }
  public Japan.ScenarioModeSubTypes SubType { get; set; }
  public long VolumeId { get; set; }
  public long ChapterId { get; set; }
  public long EpisodeId { get; set; }
  public string ExposedTime { get; set; }
  public bool Hide { get; set; }
  public bool Open { get; set; }
  public bool IsContinue { get; set; }
  public long EpisodeContinueModeId { get; set; }
  public List<long> FrontScenarioGroupId { get; set; }
  public long StrategyId { get; set; }
  public long GroundId { get; set; }
  public bool IsDefeatBattle { get; set; }
  public long BattleDuration { get; set; }
  public List<long> BackScenarioGroupId { get; set; }
  public List<long> ClearedModeId { get; set; }
  public long ScenarioModeRewardId { get; set; }
  public bool IsScenarioSpecialReward { get; set; }
  public long AccountLevelLimit { get; set; }
  public long ClearedStageId { get; set; }
  public Japan.Club NeedClub { get; set; }
  public int NeedClubStudentCount { get; set; }
  public long EventContentId { get; set; }
  public Japan.EventContentType EventContentType { get; set; }
  public long EventContentCondition { get; set; }
  public long EventContentConditionGroup { get; set; }
  public Japan.StageDifficulty MapDifficulty { get; set; }
  public int StepIndex { get; set; }
  public int RecommendLevel { get; set; }
  public string EventIconParcelPath { get; set; }
  public uint EventBannerTitle { get; set; }
  public bool Lof { get; set; }
  public Japan.StageTopography StageTopography { get; set; }
  public long FixedEchelonId { get; set; }
  public string CompleteReportEventName { get; set; }
  public Japan.EchelonExtensionType EchelonExtensionType { get; set; }
  public long CollectionGroupId { get; set; }

  public ScenarioModeExcelT() {
    this.ModeId = 0;
    this.ModeType = Japan.ScenarioModeTypes.None;
    this.SubType = Japan.ScenarioModeSubTypes.None;
    this.VolumeId = 0;
    this.ChapterId = 0;
    this.EpisodeId = 0;
    this.ExposedTime = null;
    this.Hide = false;
    this.Open = false;
    this.IsContinue = false;
    this.EpisodeContinueModeId = 0;
    this.FrontScenarioGroupId = null;
    this.StrategyId = 0;
    this.GroundId = 0;
    this.IsDefeatBattle = false;
    this.BattleDuration = 0;
    this.BackScenarioGroupId = null;
    this.ClearedModeId = null;
    this.ScenarioModeRewardId = 0;
    this.IsScenarioSpecialReward = false;
    this.AccountLevelLimit = 0;
    this.ClearedStageId = 0;
    this.NeedClub = Japan.Club.None;
    this.NeedClubStudentCount = 0;
    this.EventContentId = 0;
    this.EventContentType = Japan.EventContentType.Stage;
    this.EventContentCondition = 0;
    this.EventContentConditionGroup = 0;
    this.MapDifficulty = Japan.StageDifficulty.None;
    this.StepIndex = 0;
    this.RecommendLevel = 0;
    this.EventIconParcelPath = null;
    this.EventBannerTitle = 0;
    this.Lof = false;
    this.StageTopography = Japan.StageTopography.Street;
    this.FixedEchelonId = 0;
    this.CompleteReportEventName = null;
    this.EchelonExtensionType = Japan.EchelonExtensionType.Base;
    this.CollectionGroupId = 0;
  }
}


static public class ScenarioModeExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ModeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ModeType*/, 4 /*Japan.ScenarioModeTypes*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SubType*/, 4 /*Japan.ScenarioModeSubTypes*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*VolumeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ChapterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*EpisodeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 16 /*ExposedTime*/, false)
      && verifier.VerifyField(tablePos, 18 /*Hide*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*Open*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*IsContinue*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*EpisodeContinueModeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*FrontScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 28 /*StrategyId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*IsDefeatBattle*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 36 /*BackScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 38 /*ClearedModeId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 40 /*ScenarioModeRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*IsScenarioSpecialReward*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 44 /*AccountLevelLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*ClearedStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*NeedClub*/, 4 /*Japan.Club*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*NeedClubStudentCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*EventContentType*/, 4 /*Japan.EventContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*EventContentCondition*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*EventContentConditionGroup*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*MapDifficulty*/, 4 /*Japan.StageDifficulty*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*StepIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*RecommendLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 66 /*EventIconParcelPath*/, false)
      && verifier.VerifyField(tablePos, 68 /*EventBannerTitle*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*Lof*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*StageTopography*/, 4 /*Japan.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*FixedEchelonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 76 /*CompleteReportEventName*/, false)
      && verifier.VerifyField(tablePos, 78 /*EchelonExtensionType*/, 4 /*Japan.EchelonExtensionType*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*CollectionGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
