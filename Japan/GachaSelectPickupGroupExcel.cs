// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GachaSelectPickupGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaSelectPickupGroupExcel GetRootAsGachaSelectPickupGroupExcel(ByteBuffer _bb) { return GetRootAsGachaSelectPickupGroupExcel(_bb, new GachaSelectPickupGroupExcel()); }
  public static GachaSelectPickupGroupExcel GetRootAsGachaSelectPickupGroupExcel(ByteBuffer _bb, GachaSelectPickupGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaSelectPickupGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string NameKr { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameKrBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameKrBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameKrArray() { return __p.__vector_as_array<byte>(6); }
  public long GachaGroupID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.GachaSelectPickupGroupExcel> CreateGachaSelectPickupGroupExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset NameKrOffset = default(StringOffset),
      long GachaGroupID = 0,
      long CharacterId = 0) {
    builder.StartTable(4);
    GachaSelectPickupGroupExcel.AddCharacterId(builder, CharacterId);
    GachaSelectPickupGroupExcel.AddGachaGroupID(builder, GachaGroupID);
    GachaSelectPickupGroupExcel.AddId(builder, Id);
    GachaSelectPickupGroupExcel.AddNameKr(builder, NameKrOffset);
    return GachaSelectPickupGroupExcel.EndGachaSelectPickupGroupExcel(builder);
  }

  public static void StartGachaSelectPickupGroupExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddNameKr(FlatBufferBuilder builder, StringOffset nameKrOffset) { builder.AddOffset(1, nameKrOffset.Value, 0); }
  public static void AddGachaGroupID(FlatBufferBuilder builder, long gachaGroupID) { builder.AddLong(2, gachaGroupID, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(3, characterId, 0); }
  public static Offset<Japan.GachaSelectPickupGroupExcel> EndGachaSelectPickupGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.GachaSelectPickupGroupExcel>(o);
  }
  public GachaSelectPickupGroupExcelT UnPack() {
    var _o = new GachaSelectPickupGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaSelectPickupGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GachaSelectPickupGroup");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.NameKr = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.NameKr, key) : this.NameKr;
    _o.GachaGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GachaGroupID, key) : this.GachaGroupID;
    _o.CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterId, key) : this.CharacterId;
  }
  public static Offset<Japan.GachaSelectPickupGroupExcel> Pack(FlatBufferBuilder builder, GachaSelectPickupGroupExcelT _o) {
    if (_o == null) return default(Offset<Japan.GachaSelectPickupGroupExcel>);
		byte[] key = TableEncryptionService.CreateKey("GachaSelectPickupGroup");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _NameKr = _o.NameKr == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.NameKr, key) : _o.NameKr));
		var _GachaGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GachaGroupID, key) : _o.GachaGroupID;
		var _CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterId, key) : _o.CharacterId;
    return CreateGachaSelectPickupGroupExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _NameKr,
      TableEncryptionService.UseEncryption ? _GachaGroupID : _o.GachaGroupID,
      TableEncryptionService.UseEncryption ? _CharacterId : _o.CharacterId);
  }
}

public class GachaSelectPickupGroupExcelT
{
  public long Id { get; set; }
  public string NameKr { get; set; }
  public long GachaGroupID { get; set; }
  public long CharacterId { get; set; }

  public GachaSelectPickupGroupExcelT() {
    this.Id = 0;
    this.NameKr = null;
    this.GachaGroupID = 0;
    this.CharacterId = 0;
  }
}


static public class GachaSelectPickupGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*NameKr*/, false)
      && verifier.VerifyField(tablePos, 8 /*GachaGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
