// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct AccountLevelRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AccountLevelRewardExcel GetRootAsAccountLevelRewardExcel(ByteBuffer _bb) { return GetRootAsAccountLevelRewardExcel(_bb, new AccountLevelRewardExcel()); }
  public static AccountLevelRewardExcel GetRootAsAccountLevelRewardExcel(ByteBuffer _bb, AccountLevelRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AccountLevelRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType RewardParcelType { get { int o = __p.__offset(8); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.AccountLevelRewardExcel> CreateAccountLevelRewardExcel(FlatBufferBuilder builder,
      long Id = 0,
      long Level = 0,
      Japan.ParcelType RewardParcelType = Japan.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(5);
    AccountLevelRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    AccountLevelRewardExcel.AddRewardParcelId(builder, RewardParcelId);
    AccountLevelRewardExcel.AddLevel(builder, Level);
    AccountLevelRewardExcel.AddId(builder, Id);
    AccountLevelRewardExcel.AddRewardParcelType(builder, RewardParcelType);
    return AccountLevelRewardExcel.EndAccountLevelRewardExcel(builder);
  }

  public static void StartAccountLevelRewardExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddLevel(FlatBufferBuilder builder, long level) { builder.AddLong(1, level, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, Japan.ParcelType rewardParcelType) { builder.AddInt(2, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(3, rewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long rewardParcelAmount) { builder.AddLong(4, rewardParcelAmount, 0); }
  public static Offset<Japan.AccountLevelRewardExcel> EndAccountLevelRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.AccountLevelRewardExcel>(o);
  }
  public AccountLevelRewardExcelT UnPack() {
    var _o = new AccountLevelRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AccountLevelRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("AccountLevelReward");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Level, key) : this.Level;
    _o.RewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType, key) : this.RewardParcelType;
    _o.RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId, key) : this.RewardParcelId;
    _o.RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelAmount, key) : this.RewardParcelAmount;
  }
  public static Offset<Japan.AccountLevelRewardExcel> Pack(FlatBufferBuilder builder, AccountLevelRewardExcelT _o) {
    if (_o == null) return default(Offset<Japan.AccountLevelRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("AccountLevelReward");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Level, key) : _o.Level;
		var _RewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.RewardParcelType, key) : _o.RewardParcelType;
		var _RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelId, key) : _o.RewardParcelId;
		var _RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelAmount, key) : _o.RewardParcelAmount;
    return CreateAccountLevelRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Level : _o.Level,
      TableEncryptionService.UseEncryption ? _RewardParcelType : _o.RewardParcelType,
      TableEncryptionService.UseEncryption ? _RewardParcelId : _o.RewardParcelId,
      TableEncryptionService.UseEncryption ? _RewardParcelAmount : _o.RewardParcelAmount);
  }
}

public class AccountLevelRewardExcelT
{
  public long Id { get; set; }
  public long Level { get; set; }
  public Japan.ParcelType RewardParcelType { get; set; }
  public long RewardParcelId { get; set; }
  public long RewardParcelAmount { get; set; }

  public AccountLevelRewardExcelT() {
    this.Id = 0;
    this.Level = 0;
    this.RewardParcelType = Japan.ParcelType.None;
    this.RewardParcelId = 0;
    this.RewardParcelAmount = 0;
  }
}


static public class AccountLevelRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Level*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*RewardParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*RewardParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
