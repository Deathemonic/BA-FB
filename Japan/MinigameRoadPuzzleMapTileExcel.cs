// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameRoadPuzzleMapTileExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameRoadPuzzleMapTileExcel GetRootAsMinigameRoadPuzzleMapTileExcel(ByteBuffer _bb) { return GetRootAsMinigameRoadPuzzleMapTileExcel(_bb, new MinigameRoadPuzzleMapTileExcel()); }
  public static MinigameRoadPuzzleMapTileExcel GetRootAsMinigameRoadPuzzleMapTileExcel(ByteBuffer _bb, MinigameRoadPuzzleMapTileExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameRoadPuzzleMapTileExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PrefabName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(8); }
  public Japan.RoadPuzzleMapTileType MapTileType { get { int o = __p.__offset(10); return o != 0 ? (Japan.RoadPuzzleMapTileType)__p.bb.GetInt(o + __p.bb_pos) : Japan.RoadPuzzleMapTileType.None; } }

  public static Offset<Japan.MinigameRoadPuzzleMapTileExcel> CreateMinigameRoadPuzzleMapTileExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      StringOffset PrefabNameOffset = default(StringOffset),
      Japan.RoadPuzzleMapTileType MapTileType = Japan.RoadPuzzleMapTileType.None) {
    builder.StartTable(4);
    MinigameRoadPuzzleMapTileExcel.AddUniqueId(builder, UniqueId);
    MinigameRoadPuzzleMapTileExcel.AddEventContentId(builder, EventContentId);
    MinigameRoadPuzzleMapTileExcel.AddMapTileType(builder, MapTileType);
    MinigameRoadPuzzleMapTileExcel.AddPrefabName(builder, PrefabNameOffset);
    return MinigameRoadPuzzleMapTileExcel.EndMinigameRoadPuzzleMapTileExcel(builder);
  }

  public static void StartMinigameRoadPuzzleMapTileExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset prefabNameOffset) { builder.AddOffset(2, prefabNameOffset.Value, 0); }
  public static void AddMapTileType(FlatBufferBuilder builder, Japan.RoadPuzzleMapTileType mapTileType) { builder.AddInt(3, (int)mapTileType, 0); }
  public static Offset<Japan.MinigameRoadPuzzleMapTileExcel> EndMinigameRoadPuzzleMapTileExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameRoadPuzzleMapTileExcel>(o);
  }
  public MinigameRoadPuzzleMapTileExcelT UnPack() {
    var _o = new MinigameRoadPuzzleMapTileExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameRoadPuzzleMapTileExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameRoadPuzzleMapTile");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.PrefabName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PrefabName, key) : this.PrefabName;
    _o.MapTileType = TableEncryptionService.UseEncryption ? (Japan.RoadPuzzleMapTileType)TableEncryptionService.Convert((int)this.MapTileType, key) : this.MapTileType;
  }
  public static Offset<Japan.MinigameRoadPuzzleMapTileExcel> Pack(FlatBufferBuilder builder, MinigameRoadPuzzleMapTileExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameRoadPuzzleMapTileExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameRoadPuzzleMapTile");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
    var _PrefabName = _o.PrefabName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PrefabName, key) : _o.PrefabName));
		var _MapTileType = TableEncryptionService.UseEncryption ? (Japan.RoadPuzzleMapTileType)TableEncryptionService.Convert((int)_o.MapTileType, key) : _o.MapTileType;
    return CreateMinigameRoadPuzzleMapTileExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      _PrefabName,
      TableEncryptionService.UseEncryption ? _MapTileType : _o.MapTileType);
  }
}

public class MinigameRoadPuzzleMapTileExcelT
{
  public long EventContentId { get; set; }
  public long UniqueId { get; set; }
  public string PrefabName { get; set; }
  public Japan.RoadPuzzleMapTileType MapTileType { get; set; }

  public MinigameRoadPuzzleMapTileExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.PrefabName = null;
    this.MapTileType = Japan.RoadPuzzleMapTileType.None;
  }
}


static public class MinigameRoadPuzzleMapTileExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*PrefabName*/, false)
      && verifier.VerifyField(tablePos, 10 /*MapTileType*/, 4 /*Japan.RoadPuzzleMapTileType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
