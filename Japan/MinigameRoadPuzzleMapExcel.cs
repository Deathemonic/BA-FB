// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameRoadPuzzleMapExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameRoadPuzzleMapExcel GetRootAsMinigameRoadPuzzleMapExcel(ByteBuffer _bb) { return GetRootAsMinigameRoadPuzzleMapExcel(_bb, new MinigameRoadPuzzleMapExcel()); }
  public static MinigameRoadPuzzleMapExcel GetRootAsMinigameRoadPuzzleMapExcel(ByteBuffer _bb, MinigameRoadPuzzleMapExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameRoadPuzzleMapExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MapGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Map { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMapBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMapArray() { return __p.__vector_as_array<byte>(10); }
  public string MapBG { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBGBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMapBGBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMapBGArray() { return __p.__vector_as_array<byte>(12); }
  public long BGMId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AvailableRailTile(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AvailableRailTileLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAvailableRailTileBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetAvailableRailTileBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetAvailableRailTileArray() { return __p.__vector_as_array<long>(16); }
  public long AvailableRailTileAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int AvailableRailTileAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetAvailableRailTileAmountBytes() { return __p.__vector_as_span<long>(18, 8); }
#else
  public ArraySegment<byte>? GetAvailableRailTileAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public long[] GetAvailableRailTileAmountArray() { return __p.__vector_as_array<long>(18); }
  public long OriginalTileCount(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int OriginalTileCountLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetOriginalTileCountBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetOriginalTileCountBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetOriginalTileCountArray() { return __p.__vector_as_array<long>(20); }
  public float TrainSpeed { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Japan.MinigameRoadPuzzleMapExcel> CreateMinigameRoadPuzzleMapExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      long MapGroupId = 0,
      StringOffset MapOffset = default(StringOffset),
      StringOffset MapBGOffset = default(StringOffset),
      long BGMId = 0,
      VectorOffset AvailableRailTileOffset = default(VectorOffset),
      VectorOffset AvailableRailTileAmountOffset = default(VectorOffset),
      VectorOffset OriginalTileCountOffset = default(VectorOffset),
      float TrainSpeed = 0.0f) {
    builder.StartTable(10);
    MinigameRoadPuzzleMapExcel.AddBGMId(builder, BGMId);
    MinigameRoadPuzzleMapExcel.AddMapGroupId(builder, MapGroupId);
    MinigameRoadPuzzleMapExcel.AddUniqueId(builder, UniqueId);
    MinigameRoadPuzzleMapExcel.AddEventContentId(builder, EventContentId);
    MinigameRoadPuzzleMapExcel.AddTrainSpeed(builder, TrainSpeed);
    MinigameRoadPuzzleMapExcel.AddOriginalTileCount(builder, OriginalTileCountOffset);
    MinigameRoadPuzzleMapExcel.AddAvailableRailTileAmount(builder, AvailableRailTileAmountOffset);
    MinigameRoadPuzzleMapExcel.AddAvailableRailTile(builder, AvailableRailTileOffset);
    MinigameRoadPuzzleMapExcel.AddMapBG(builder, MapBGOffset);
    MinigameRoadPuzzleMapExcel.AddMap(builder, MapOffset);
    return MinigameRoadPuzzleMapExcel.EndMinigameRoadPuzzleMapExcel(builder);
  }

  public static void StartMinigameRoadPuzzleMapExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddMapGroupId(FlatBufferBuilder builder, long mapGroupId) { builder.AddLong(2, mapGroupId, 0); }
  public static void AddMap(FlatBufferBuilder builder, StringOffset mapOffset) { builder.AddOffset(3, mapOffset.Value, 0); }
  public static void AddMapBG(FlatBufferBuilder builder, StringOffset mapBGOffset) { builder.AddOffset(4, mapBGOffset.Value, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(5, bGMId, 0); }
  public static void AddAvailableRailTile(FlatBufferBuilder builder, VectorOffset availableRailTileOffset) { builder.AddOffset(6, availableRailTileOffset.Value, 0); }
  public static VectorOffset CreateAvailableRailTileVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAvailableRailTileVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAvailableRailTileAmount(FlatBufferBuilder builder, VectorOffset availableRailTileAmountOffset) { builder.AddOffset(7, availableRailTileAmountOffset.Value, 0); }
  public static VectorOffset CreateAvailableRailTileAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAvailableRailTileAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAvailableRailTileAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddOriginalTileCount(FlatBufferBuilder builder, VectorOffset originalTileCountOffset) { builder.AddOffset(8, originalTileCountOffset.Value, 0); }
  public static VectorOffset CreateOriginalTileCountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOriginalTileCountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOriginalTileCountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOriginalTileCountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOriginalTileCountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTrainSpeed(FlatBufferBuilder builder, float trainSpeed) { builder.AddFloat(9, trainSpeed, 0.0f); }
  public static Offset<Japan.MinigameRoadPuzzleMapExcel> EndMinigameRoadPuzzleMapExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameRoadPuzzleMapExcel>(o);
  }
  public MinigameRoadPuzzleMapExcelT UnPack() {
    var _o = new MinigameRoadPuzzleMapExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameRoadPuzzleMapExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameRoadPuzzleMap");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.MapGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MapGroupId, key) : this.MapGroupId;
    _o.Map = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Map, key) : this.Map;
    _o.MapBG = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MapBG, key) : this.MapBG;
    _o.BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BGMId, key) : this.BGMId;
    _o.AvailableRailTile = new List<long>();
    for (var _j = 0; _j < this.AvailableRailTileLength; ++_j) {_o.AvailableRailTile.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AvailableRailTile(_j), key) : this.AvailableRailTile(_j));}
    _o.AvailableRailTileAmount = new List<long>();
    for (var _j = 0; _j < this.AvailableRailTileAmountLength; ++_j) {_o.AvailableRailTileAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AvailableRailTileAmount(_j), key) : this.AvailableRailTileAmount(_j));}
    _o.OriginalTileCount = new List<long>();
    for (var _j = 0; _j < this.OriginalTileCountLength; ++_j) {_o.OriginalTileCount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OriginalTileCount(_j), key) : this.OriginalTileCount(_j));}
    _o.TrainSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.TrainSpeed, key) : this.TrainSpeed;
  }
  public static Offset<Japan.MinigameRoadPuzzleMapExcel> Pack(FlatBufferBuilder builder, MinigameRoadPuzzleMapExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameRoadPuzzleMapExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameRoadPuzzleMap");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _MapGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MapGroupId, key) : _o.MapGroupId;
    var _Map = _o.Map == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Map, key) : _o.Map));
    var _MapBG = _o.MapBG == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MapBG, key) : _o.MapBG));
		var _BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BGMId, key) : _o.BGMId;
    var _AvailableRailTile = default(VectorOffset);
    if (_o.AvailableRailTile != null) {
      var __AvailableRailTile = _o.AvailableRailTile.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _AvailableRailTile = CreateAvailableRailTileVector(builder, __AvailableRailTile);
    }
    var _AvailableRailTileAmount = default(VectorOffset);
    if (_o.AvailableRailTileAmount != null) {
      var __AvailableRailTileAmount = _o.AvailableRailTileAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _AvailableRailTileAmount = CreateAvailableRailTileAmountVector(builder, __AvailableRailTileAmount);
    }
    var _OriginalTileCount = default(VectorOffset);
    if (_o.OriginalTileCount != null) {
      var __OriginalTileCount = _o.OriginalTileCount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _OriginalTileCount = CreateOriginalTileCountVector(builder, __OriginalTileCount);
    }
		var _TrainSpeed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.TrainSpeed, key) : _o.TrainSpeed;
    return CreateMinigameRoadPuzzleMapExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _MapGroupId : _o.MapGroupId,
      _Map,
      _MapBG,
      TableEncryptionService.UseEncryption ? _BGMId : _o.BGMId,
      _AvailableRailTile,
      _AvailableRailTileAmount,
      _OriginalTileCount,
      TableEncryptionService.UseEncryption ? _TrainSpeed : _o.TrainSpeed);
  }
}

public class MinigameRoadPuzzleMapExcelT
{
  public long EventContentId { get; set; }
  public long UniqueId { get; set; }
  public long MapGroupId { get; set; }
  public string Map { get; set; }
  public string MapBG { get; set; }
  public long BGMId { get; set; }
  public List<long> AvailableRailTile { get; set; }
  public List<long> AvailableRailTileAmount { get; set; }
  public List<long> OriginalTileCount { get; set; }
  public float TrainSpeed { get; set; }

  public MinigameRoadPuzzleMapExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.MapGroupId = 0;
    this.Map = null;
    this.MapBG = null;
    this.BGMId = 0;
    this.AvailableRailTile = null;
    this.AvailableRailTileAmount = null;
    this.OriginalTileCount = null;
    this.TrainSpeed = 0.0f;
  }
}


static public class MinigameRoadPuzzleMapExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*MapGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*Map*/, false)
      && verifier.VerifyString(tablePos, 12 /*MapBG*/, false)
      && verifier.VerifyField(tablePos, 14 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*AvailableRailTile*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*AvailableRailTileAmount*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*OriginalTileCount*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 22 /*TrainSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
