// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConquestErosionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConquestErosionExcel GetRootAsConquestErosionExcel(ByteBuffer _bb) { return GetRootAsConquestErosionExcel(_bb, new ConquestErosionExcel()); }
  public static ConquestErosionExcel GetRootAsConquestErosionExcel(ByteBuffer _bb, ConquestErosionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestErosionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ConquestErosionType ErosionType { get { int o = __p.__offset(8); return o != 0 ? (Japan.ConquestErosionType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ConquestErosionType.None; } }
  public int Phase { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool PhaseAlarm { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int StepIndex { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.ConquestConditionType PhaseStartConditionType(int j) { int o = __p.__offset(16); return o != 0 ? (Japan.ConquestConditionType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.ConquestConditionType)0; }
  public int PhaseStartConditionTypeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.ConquestConditionType> GetPhaseStartConditionTypeBytes() { return __p.__vector_as_span<Japan.ConquestConditionType>(16, 4); }
#else
  public ArraySegment<byte>? GetPhaseStartConditionTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public Japan.ConquestConditionType[] GetPhaseStartConditionTypeArray() { int o = __p.__offset(16); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.ConquestConditionType[] a = new Japan.ConquestConditionType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.ConquestConditionType)__p.bb.GetInt(p + i * 4); } return a; }
  public string PhaseStartConditionParameter(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PhaseStartConditionParameterLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Japan.ConquestConditionType PhaseBeforeExposeConditionType(int j) { int o = __p.__offset(20); return o != 0 ? (Japan.ConquestConditionType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.ConquestConditionType)0; }
  public int PhaseBeforeExposeConditionTypeLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.ConquestConditionType> GetPhaseBeforeExposeConditionTypeBytes() { return __p.__vector_as_span<Japan.ConquestConditionType>(20, 4); }
#else
  public ArraySegment<byte>? GetPhaseBeforeExposeConditionTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public Japan.ConquestConditionType[] GetPhaseBeforeExposeConditionTypeArray() { int o = __p.__offset(20); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.ConquestConditionType[] a = new Japan.ConquestConditionType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.ConquestConditionType)__p.bb.GetInt(p + i * 4); } return a; }
  public string PhaseBeforeExposeConditionParameter(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PhaseBeforeExposeConditionParameterLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Japan.ParcelType ErosionBattleConditionParcelType { get { int o = __p.__offset(24); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long ErosionBattleConditionParcelUniqueId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ErosionBattleConditionParcelAmount { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ConquestRewardId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.ConquestErosionExcel> CreateConquestErosionExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long Id = 0,
      Japan.ConquestErosionType ErosionType = Japan.ConquestErosionType.None,
      int Phase = 0,
      bool PhaseAlarm = false,
      int StepIndex = 0,
      VectorOffset PhaseStartConditionTypeOffset = default(VectorOffset),
      VectorOffset PhaseStartConditionParameterOffset = default(VectorOffset),
      VectorOffset PhaseBeforeExposeConditionTypeOffset = default(VectorOffset),
      VectorOffset PhaseBeforeExposeConditionParameterOffset = default(VectorOffset),
      Japan.ParcelType ErosionBattleConditionParcelType = Japan.ParcelType.None,
      long ErosionBattleConditionParcelUniqueId = 0,
      long ErosionBattleConditionParcelAmount = 0,
      long ConquestRewardId = 0) {
    builder.StartTable(14);
    ConquestErosionExcel.AddConquestRewardId(builder, ConquestRewardId);
    ConquestErosionExcel.AddErosionBattleConditionParcelAmount(builder, ErosionBattleConditionParcelAmount);
    ConquestErosionExcel.AddErosionBattleConditionParcelUniqueId(builder, ErosionBattleConditionParcelUniqueId);
    ConquestErosionExcel.AddId(builder, Id);
    ConquestErosionExcel.AddEventContentId(builder, EventContentId);
    ConquestErosionExcel.AddErosionBattleConditionParcelType(builder, ErosionBattleConditionParcelType);
    ConquestErosionExcel.AddPhaseBeforeExposeConditionParameter(builder, PhaseBeforeExposeConditionParameterOffset);
    ConquestErosionExcel.AddPhaseBeforeExposeConditionType(builder, PhaseBeforeExposeConditionTypeOffset);
    ConquestErosionExcel.AddPhaseStartConditionParameter(builder, PhaseStartConditionParameterOffset);
    ConquestErosionExcel.AddPhaseStartConditionType(builder, PhaseStartConditionTypeOffset);
    ConquestErosionExcel.AddStepIndex(builder, StepIndex);
    ConquestErosionExcel.AddPhase(builder, Phase);
    ConquestErosionExcel.AddErosionType(builder, ErosionType);
    ConquestErosionExcel.AddPhaseAlarm(builder, PhaseAlarm);
    return ConquestErosionExcel.EndConquestErosionExcel(builder);
  }

  public static void StartConquestErosionExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddErosionType(FlatBufferBuilder builder, Japan.ConquestErosionType erosionType) { builder.AddInt(2, (int)erosionType, 0); }
  public static void AddPhase(FlatBufferBuilder builder, int phase) { builder.AddInt(3, phase, 0); }
  public static void AddPhaseAlarm(FlatBufferBuilder builder, bool phaseAlarm) { builder.AddBool(4, phaseAlarm, false); }
  public static void AddStepIndex(FlatBufferBuilder builder, int stepIndex) { builder.AddInt(5, stepIndex, 0); }
  public static void AddPhaseStartConditionType(FlatBufferBuilder builder, VectorOffset phaseStartConditionTypeOffset) { builder.AddOffset(6, phaseStartConditionTypeOffset.Value, 0); }
  public static VectorOffset CreatePhaseStartConditionTypeVector(FlatBufferBuilder builder, Japan.ConquestConditionType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePhaseStartConditionTypeVectorBlock(FlatBufferBuilder builder, Japan.ConquestConditionType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseStartConditionTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.ConquestConditionType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseStartConditionTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.ConquestConditionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhaseStartConditionTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhaseStartConditionParameter(FlatBufferBuilder builder, VectorOffset phaseStartConditionParameterOffset) { builder.AddOffset(7, phaseStartConditionParameterOffset.Value, 0); }
  public static VectorOffset CreatePhaseStartConditionParameterVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePhaseStartConditionParameterVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseStartConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseStartConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhaseStartConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhaseBeforeExposeConditionType(FlatBufferBuilder builder, VectorOffset phaseBeforeExposeConditionTypeOffset) { builder.AddOffset(8, phaseBeforeExposeConditionTypeOffset.Value, 0); }
  public static VectorOffset CreatePhaseBeforeExposeConditionTypeVector(FlatBufferBuilder builder, Japan.ConquestConditionType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePhaseBeforeExposeConditionTypeVectorBlock(FlatBufferBuilder builder, Japan.ConquestConditionType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseBeforeExposeConditionTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.ConquestConditionType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseBeforeExposeConditionTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.ConquestConditionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhaseBeforeExposeConditionTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPhaseBeforeExposeConditionParameter(FlatBufferBuilder builder, VectorOffset phaseBeforeExposeConditionParameterOffset) { builder.AddOffset(9, phaseBeforeExposeConditionParameterOffset.Value, 0); }
  public static VectorOffset CreatePhaseBeforeExposeConditionParameterVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePhaseBeforeExposeConditionParameterVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseBeforeExposeConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhaseBeforeExposeConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhaseBeforeExposeConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddErosionBattleConditionParcelType(FlatBufferBuilder builder, Japan.ParcelType erosionBattleConditionParcelType) { builder.AddInt(10, (int)erosionBattleConditionParcelType, 0); }
  public static void AddErosionBattleConditionParcelUniqueId(FlatBufferBuilder builder, long erosionBattleConditionParcelUniqueId) { builder.AddLong(11, erosionBattleConditionParcelUniqueId, 0); }
  public static void AddErosionBattleConditionParcelAmount(FlatBufferBuilder builder, long erosionBattleConditionParcelAmount) { builder.AddLong(12, erosionBattleConditionParcelAmount, 0); }
  public static void AddConquestRewardId(FlatBufferBuilder builder, long conquestRewardId) { builder.AddLong(13, conquestRewardId, 0); }
  public static Offset<Japan.ConquestErosionExcel> EndConquestErosionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.ConquestErosionExcel>(o);
  }
  public ConquestErosionExcelT UnPack() {
    var _o = new ConquestErosionExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConquestErosionExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConquestErosion");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.ErosionType = TableEncryptionService.UseEncryption ? (Japan.ConquestErosionType)TableEncryptionService.Convert((int)this.ErosionType, key) : this.ErosionType;
    _o.Phase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Phase, key) : this.Phase;
    _o.PhaseAlarm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.PhaseAlarm, key) : this.PhaseAlarm;
    _o.StepIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StepIndex, key) : this.StepIndex;
    _o.PhaseStartConditionType = new List<Japan.ConquestConditionType>();
    for (var _j = 0; _j < this.PhaseStartConditionTypeLength; ++_j) {_o.PhaseStartConditionType.Add(TableEncryptionService.UseEncryption ? (Japan.ConquestConditionType)TableEncryptionService.Convert((int)this.PhaseStartConditionType(_j), key) : this.PhaseStartConditionType(_j));}
    _o.PhaseStartConditionParameter = new List<string>();
    for (var _j = 0; _j < this.PhaseStartConditionParameterLength; ++_j) {_o.PhaseStartConditionParameter.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PhaseStartConditionParameter(_j), key) : this.PhaseStartConditionParameter(_j));}
    _o.PhaseBeforeExposeConditionType = new List<Japan.ConquestConditionType>();
    for (var _j = 0; _j < this.PhaseBeforeExposeConditionTypeLength; ++_j) {_o.PhaseBeforeExposeConditionType.Add(TableEncryptionService.UseEncryption ? (Japan.ConquestConditionType)TableEncryptionService.Convert((int)this.PhaseBeforeExposeConditionType(_j), key) : this.PhaseBeforeExposeConditionType(_j));}
    _o.PhaseBeforeExposeConditionParameter = new List<string>();
    for (var _j = 0; _j < this.PhaseBeforeExposeConditionParameterLength; ++_j) {_o.PhaseBeforeExposeConditionParameter.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PhaseBeforeExposeConditionParameter(_j), key) : this.PhaseBeforeExposeConditionParameter(_j));}
    _o.ErosionBattleConditionParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.ErosionBattleConditionParcelType, key) : this.ErosionBattleConditionParcelType;
    _o.ErosionBattleConditionParcelUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ErosionBattleConditionParcelUniqueId, key) : this.ErosionBattleConditionParcelUniqueId;
    _o.ErosionBattleConditionParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ErosionBattleConditionParcelAmount, key) : this.ErosionBattleConditionParcelAmount;
    _o.ConquestRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConquestRewardId, key) : this.ConquestRewardId;
  }
  public static Offset<Japan.ConquestErosionExcel> Pack(FlatBufferBuilder builder, ConquestErosionExcelT _o) {
    if (_o == null) return default(Offset<Japan.ConquestErosionExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConquestErosion");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _ErosionType = TableEncryptionService.UseEncryption ? (Japan.ConquestErosionType)TableEncryptionService.Convert((int)_o.ErosionType, key) : _o.ErosionType;
		var _Phase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Phase, key) : _o.Phase;
		var _PhaseAlarm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.PhaseAlarm, key) : _o.PhaseAlarm;
		var _StepIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StepIndex, key) : _o.StepIndex;
    var _PhaseStartConditionType = default(VectorOffset);
    if (_o.PhaseStartConditionType != null) {
      var __PhaseStartConditionType = _o.PhaseStartConditionType.Select(x => TableEncryptionService.UseEncryption ? (Japan.ConquestConditionType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _PhaseStartConditionType = CreatePhaseStartConditionTypeVector(builder, __PhaseStartConditionType);
    }
    var _PhaseStartConditionParameter = default(VectorOffset);
    if (_o.PhaseStartConditionParameter != null) {
      var __PhaseStartConditionParameter = new StringOffset[_o.PhaseStartConditionParameter.Count];
      for (var _j = 0; _j < __PhaseStartConditionParameter.Length; ++_j) { __PhaseStartConditionParameter[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PhaseStartConditionParameter[_j], key) : _o.PhaseStartConditionParameter[_j])); }
      _PhaseStartConditionParameter = CreatePhaseStartConditionParameterVector(builder, __PhaseStartConditionParameter);
    }
    var _PhaseBeforeExposeConditionType = default(VectorOffset);
    if (_o.PhaseBeforeExposeConditionType != null) {
      var __PhaseBeforeExposeConditionType = _o.PhaseBeforeExposeConditionType.Select(x => TableEncryptionService.UseEncryption ? (Japan.ConquestConditionType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _PhaseBeforeExposeConditionType = CreatePhaseBeforeExposeConditionTypeVector(builder, __PhaseBeforeExposeConditionType);
    }
    var _PhaseBeforeExposeConditionParameter = default(VectorOffset);
    if (_o.PhaseBeforeExposeConditionParameter != null) {
      var __PhaseBeforeExposeConditionParameter = new StringOffset[_o.PhaseBeforeExposeConditionParameter.Count];
      for (var _j = 0; _j < __PhaseBeforeExposeConditionParameter.Length; ++_j) { __PhaseBeforeExposeConditionParameter[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PhaseBeforeExposeConditionParameter[_j], key) : _o.PhaseBeforeExposeConditionParameter[_j])); }
      _PhaseBeforeExposeConditionParameter = CreatePhaseBeforeExposeConditionParameterVector(builder, __PhaseBeforeExposeConditionParameter);
    }
		var _ErosionBattleConditionParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.ErosionBattleConditionParcelType, key) : _o.ErosionBattleConditionParcelType;
		var _ErosionBattleConditionParcelUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ErosionBattleConditionParcelUniqueId, key) : _o.ErosionBattleConditionParcelUniqueId;
		var _ErosionBattleConditionParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ErosionBattleConditionParcelAmount, key) : _o.ErosionBattleConditionParcelAmount;
		var _ConquestRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConquestRewardId, key) : _o.ConquestRewardId;
    return CreateConquestErosionExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _ErosionType : _o.ErosionType,
      TableEncryptionService.UseEncryption ? _Phase : _o.Phase,
      TableEncryptionService.UseEncryption ? _PhaseAlarm : _o.PhaseAlarm,
      TableEncryptionService.UseEncryption ? _StepIndex : _o.StepIndex,
      _PhaseStartConditionType,
      _PhaseStartConditionParameter,
      _PhaseBeforeExposeConditionType,
      _PhaseBeforeExposeConditionParameter,
      TableEncryptionService.UseEncryption ? _ErosionBattleConditionParcelType : _o.ErosionBattleConditionParcelType,
      TableEncryptionService.UseEncryption ? _ErosionBattleConditionParcelUniqueId : _o.ErosionBattleConditionParcelUniqueId,
      TableEncryptionService.UseEncryption ? _ErosionBattleConditionParcelAmount : _o.ErosionBattleConditionParcelAmount,
      TableEncryptionService.UseEncryption ? _ConquestRewardId : _o.ConquestRewardId);
  }
}

public class ConquestErosionExcelT
{
  public long EventContentId { get; set; }
  public long Id { get; set; }
  public Japan.ConquestErosionType ErosionType { get; set; }
  public int Phase { get; set; }
  public bool PhaseAlarm { get; set; }
  public int StepIndex { get; set; }
  public List<Japan.ConquestConditionType> PhaseStartConditionType { get; set; }
  public List<string> PhaseStartConditionParameter { get; set; }
  public List<Japan.ConquestConditionType> PhaseBeforeExposeConditionType { get; set; }
  public List<string> PhaseBeforeExposeConditionParameter { get; set; }
  public Japan.ParcelType ErosionBattleConditionParcelType { get; set; }
  public long ErosionBattleConditionParcelUniqueId { get; set; }
  public long ErosionBattleConditionParcelAmount { get; set; }
  public long ConquestRewardId { get; set; }

  public ConquestErosionExcelT() {
    this.EventContentId = 0;
    this.Id = 0;
    this.ErosionType = Japan.ConquestErosionType.None;
    this.Phase = 0;
    this.PhaseAlarm = false;
    this.StepIndex = 0;
    this.PhaseStartConditionType = null;
    this.PhaseStartConditionParameter = null;
    this.PhaseBeforeExposeConditionType = null;
    this.PhaseBeforeExposeConditionParameter = null;
    this.ErosionBattleConditionParcelType = Japan.ParcelType.None;
    this.ErosionBattleConditionParcelUniqueId = 0;
    this.ErosionBattleConditionParcelAmount = 0;
    this.ConquestRewardId = 0;
  }
}


static public class ConquestErosionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ErosionType*/, 4 /*Japan.ConquestErosionType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Phase*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*PhaseAlarm*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*StepIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*PhaseStartConditionType*/, 4 /*Japan.ConquestConditionType*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*PhaseStartConditionParameter*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*PhaseBeforeExposeConditionType*/, 4 /*Japan.ConquestConditionType*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*PhaseBeforeExposeConditionParameter*/, false)
      && verifier.VerifyField(tablePos, 24 /*ErosionBattleConditionParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*ErosionBattleConditionParcelUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*ErosionBattleConditionParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*ConquestRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
