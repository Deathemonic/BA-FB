// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentConcentrationRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentConcentrationRewardExcel GetRootAsEventContentConcentrationRewardExcel(ByteBuffer _bb) { return GetRootAsEventContentConcentrationRewardExcel(_bb, new EventContentConcentrationRewardExcel()); }
  public static EventContentConcentrationRewardExcel GetRootAsEventContentConcentrationRewardExcel(ByteBuffer _bb, EventContentConcentrationRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentConcentrationRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ConcentrationRewardType ConcentrationRewardType { get { int o = __p.__offset(8); return o != 0 ? (Japan.ConcentrationRewardType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ConcentrationRewardType.None; } }
  public string LocalizePrefabId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizePrefabIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLocalizePrefabIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLocalizePrefabIdArray() { return __p.__vector_as_array<byte>(10); }
  public Japan.Rarity Rarity { get { int o = __p.__offset(12); return o != 0 ? (Japan.Rarity)__p.bb.GetInt(o + __p.bb_pos) : Japan.Rarity.N; } }
  public int Round { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsLoop { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Japan.ParcelType RewardParcelType(int j) { int o = __p.__offset(18); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<Japan.ParcelType>(18, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public Japan.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(18); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.ParcelType[] a = new Japan.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParcelId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelIdBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetRewardParcelIdArray() { return __p.__vector_as_array<long>(20); }
  public int RewardParcelAmount(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardParcelAmountLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardParcelAmountBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelAmountBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetRewardParcelAmountArray() { return __p.__vector_as_array<int>(22); }

  public static Offset<Japan.EventContentConcentrationRewardExcel> CreateEventContentConcentrationRewardExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      Japan.ConcentrationRewardType ConcentrationRewardType = Japan.ConcentrationRewardType.None,
      StringOffset LocalizePrefabIdOffset = default(StringOffset),
      Japan.Rarity Rarity = Japan.Rarity.N,
      int Round = 0,
      bool IsLoop = false,
      VectorOffset RewardParcelTypeOffset = default(VectorOffset),
      VectorOffset RewardParcelIdOffset = default(VectorOffset),
      VectorOffset RewardParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(10);
    EventContentConcentrationRewardExcel.AddUniqueId(builder, UniqueId);
    EventContentConcentrationRewardExcel.AddEventContentId(builder, EventContentId);
    EventContentConcentrationRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmountOffset);
    EventContentConcentrationRewardExcel.AddRewardParcelId(builder, RewardParcelIdOffset);
    EventContentConcentrationRewardExcel.AddRewardParcelType(builder, RewardParcelTypeOffset);
    EventContentConcentrationRewardExcel.AddRound(builder, Round);
    EventContentConcentrationRewardExcel.AddRarity(builder, Rarity);
    EventContentConcentrationRewardExcel.AddLocalizePrefabId(builder, LocalizePrefabIdOffset);
    EventContentConcentrationRewardExcel.AddConcentrationRewardType(builder, ConcentrationRewardType);
    EventContentConcentrationRewardExcel.AddIsLoop(builder, IsLoop);
    return EventContentConcentrationRewardExcel.EndEventContentConcentrationRewardExcel(builder);
  }

  public static void StartEventContentConcentrationRewardExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddConcentrationRewardType(FlatBufferBuilder builder, Japan.ConcentrationRewardType concentrationRewardType) { builder.AddInt(2, (int)concentrationRewardType, 0); }
  public static void AddLocalizePrefabId(FlatBufferBuilder builder, StringOffset localizePrefabIdOffset) { builder.AddOffset(3, localizePrefabIdOffset.Value, 0); }
  public static void AddRarity(FlatBufferBuilder builder, Japan.Rarity rarity) { builder.AddInt(4, (int)rarity, 0); }
  public static void AddRound(FlatBufferBuilder builder, int round) { builder.AddInt(5, round, 0); }
  public static void AddIsLoop(FlatBufferBuilder builder, bool isLoop) { builder.AddBool(6, isLoop, false); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(7, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, VectorOffset rewardParcelIdOffset) { builder.AddOffset(8, rewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, VectorOffset rewardParcelAmountOffset) { builder.AddOffset(9, rewardParcelAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Japan.EventContentConcentrationRewardExcel> EndEventContentConcentrationRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentConcentrationRewardExcel>(o);
  }
  public EventContentConcentrationRewardExcelT UnPack() {
    var _o = new EventContentConcentrationRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentConcentrationRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentConcentrationReward");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.ConcentrationRewardType = TableEncryptionService.UseEncryption ? (Japan.ConcentrationRewardType)TableEncryptionService.Convert((int)this.ConcentrationRewardType, key) : this.ConcentrationRewardType;
    _o.LocalizePrefabId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizePrefabId, key) : this.LocalizePrefabId;
    _o.Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)this.Rarity, key) : this.Rarity;
    _o.Round = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Round, key) : this.Round;
    _o.IsLoop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsLoop, key) : this.IsLoop;
    _o.RewardParcelType = new List<Japan.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType(_j), key) : this.RewardParcelType(_j));}
    _o.RewardParcelId = new List<long>();
    for (var _j = 0; _j < this.RewardParcelIdLength; ++_j) {_o.RewardParcelId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId(_j), key) : this.RewardParcelId(_j));}
    _o.RewardParcelAmount = new List<int>();
    for (var _j = 0; _j < this.RewardParcelAmountLength; ++_j) {_o.RewardParcelAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RewardParcelAmount(_j), key) : this.RewardParcelAmount(_j));}
  }
  public static Offset<Japan.EventContentConcentrationRewardExcel> Pack(FlatBufferBuilder builder, EventContentConcentrationRewardExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentConcentrationRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentConcentrationReward");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _ConcentrationRewardType = TableEncryptionService.UseEncryption ? (Japan.ConcentrationRewardType)TableEncryptionService.Convert((int)_o.ConcentrationRewardType, key) : _o.ConcentrationRewardType;
    var _LocalizePrefabId = _o.LocalizePrefabId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizePrefabId, key) : _o.LocalizePrefabId));
		var _Rarity = TableEncryptionService.UseEncryption ? (Japan.Rarity)TableEncryptionService.Convert((int)_o.Rarity, key) : _o.Rarity;
		var _Round = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Round, key) : _o.Round;
		var _IsLoop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsLoop, key) : _o.IsLoop;
    var _RewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __RewardParcelType = _o.RewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _RewardParcelType = CreateRewardParcelTypeVector(builder, __RewardParcelType);
    }
    var _RewardParcelId = default(VectorOffset);
    if (_o.RewardParcelId != null) {
      var __RewardParcelId = _o.RewardParcelId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _RewardParcelId = CreateRewardParcelIdVector(builder, __RewardParcelId);
    }
    var _RewardParcelAmount = default(VectorOffset);
    if (_o.RewardParcelAmount != null) {
      var __RewardParcelAmount = _o.RewardParcelAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _RewardParcelAmount = CreateRewardParcelAmountVector(builder, __RewardParcelAmount);
    }
    return CreateEventContentConcentrationRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _ConcentrationRewardType : _o.ConcentrationRewardType,
      _LocalizePrefabId,
      TableEncryptionService.UseEncryption ? _Rarity : _o.Rarity,
      TableEncryptionService.UseEncryption ? _Round : _o.Round,
      TableEncryptionService.UseEncryption ? _IsLoop : _o.IsLoop,
      _RewardParcelType,
      _RewardParcelId,
      _RewardParcelAmount);
  }
}

public class EventContentConcentrationRewardExcelT
{
  public long EventContentId { get; set; }
  public long UniqueId { get; set; }
  public Japan.ConcentrationRewardType ConcentrationRewardType { get; set; }
  public string LocalizePrefabId { get; set; }
  public Japan.Rarity Rarity { get; set; }
  public int Round { get; set; }
  public bool IsLoop { get; set; }
  public List<Japan.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardParcelId { get; set; }
  public List<int> RewardParcelAmount { get; set; }

  public EventContentConcentrationRewardExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.ConcentrationRewardType = Japan.ConcentrationRewardType.None;
    this.LocalizePrefabId = null;
    this.Rarity = Japan.Rarity.N;
    this.Round = 0;
    this.IsLoop = false;
    this.RewardParcelType = null;
    this.RewardParcelId = null;
    this.RewardParcelAmount = null;
  }
}


static public class EventContentConcentrationRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ConcentrationRewardType*/, 4 /*Japan.ConcentrationRewardType*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*LocalizePrefabId*/, false)
      && verifier.VerifyField(tablePos, 12 /*Rarity*/, 4 /*Japan.Rarity*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Round*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*IsLoop*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*RewardParcelType*/, 4 /*Japan.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*RewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*RewardParcelAmount*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
