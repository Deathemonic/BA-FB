// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct InformationStrategyObjectExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InformationStrategyObjectExcel GetRootAsInformationStrategyObjectExcel(ByteBuffer _bb) { return GetRootAsInformationStrategyObjectExcel(_bb, new InformationStrategyObjectExcel()); }
  public static InformationStrategyObjectExcel GetRootAsInformationStrategyObjectExcel(ByteBuffer _bb, InformationStrategyObjectExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InformationStrategyObjectExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StageId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PageName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPageNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPageNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPageNameArray() { return __p.__vector_as_array<byte>(8); }
  public string LocalizeCodeId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeCodeIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLocalizeCodeIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLocalizeCodeIdArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Japan.InformationStrategyObjectExcel> CreateInformationStrategyObjectExcel(FlatBufferBuilder builder,
      long Id = 0,
      long StageId = 0,
      StringOffset PageNameOffset = default(StringOffset),
      StringOffset LocalizeCodeIdOffset = default(StringOffset)) {
    builder.StartTable(4);
    InformationStrategyObjectExcel.AddStageId(builder, StageId);
    InformationStrategyObjectExcel.AddId(builder, Id);
    InformationStrategyObjectExcel.AddLocalizeCodeId(builder, LocalizeCodeIdOffset);
    InformationStrategyObjectExcel.AddPageName(builder, PageNameOffset);
    return InformationStrategyObjectExcel.EndInformationStrategyObjectExcel(builder);
  }

  public static void StartInformationStrategyObjectExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddStageId(FlatBufferBuilder builder, long stageId) { builder.AddLong(1, stageId, 0); }
  public static void AddPageName(FlatBufferBuilder builder, StringOffset pageNameOffset) { builder.AddOffset(2, pageNameOffset.Value, 0); }
  public static void AddLocalizeCodeId(FlatBufferBuilder builder, StringOffset localizeCodeIdOffset) { builder.AddOffset(3, localizeCodeIdOffset.Value, 0); }
  public static Offset<Japan.InformationStrategyObjectExcel> EndInformationStrategyObjectExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.InformationStrategyObjectExcel>(o);
  }
  public InformationStrategyObjectExcelT UnPack() {
    var _o = new InformationStrategyObjectExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InformationStrategyObjectExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("InformationStrategyObject");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.StageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StageId, key) : this.StageId;
    _o.PageName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PageName, key) : this.PageName;
    _o.LocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeCodeId, key) : this.LocalizeCodeId;
  }
  public static Offset<Japan.InformationStrategyObjectExcel> Pack(FlatBufferBuilder builder, InformationStrategyObjectExcelT _o) {
    if (_o == null) return default(Offset<Japan.InformationStrategyObjectExcel>);
		byte[] key = TableEncryptionService.CreateKey("InformationStrategyObject");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _StageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StageId, key) : _o.StageId;
    var _PageName = _o.PageName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PageName, key) : _o.PageName));
    var _LocalizeCodeId = _o.LocalizeCodeId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeCodeId, key) : _o.LocalizeCodeId));
    return CreateInformationStrategyObjectExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _StageId : _o.StageId,
      _PageName,
      _LocalizeCodeId);
  }
}

public class InformationStrategyObjectExcelT
{
  public long Id { get; set; }
  public long StageId { get; set; }
  public string PageName { get; set; }
  public string LocalizeCodeId { get; set; }

  public InformationStrategyObjectExcelT() {
    this.Id = 0;
    this.StageId = 0;
    this.PageName = null;
    this.LocalizeCodeId = null;
  }
}


static public class InformationStrategyObjectExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*StageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*PageName*/, false)
      && verifier.VerifyString(tablePos, 10 /*LocalizeCodeId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
