// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameRoadPuzzleRailTileExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameRoadPuzzleRailTileExcel GetRootAsMinigameRoadPuzzleRailTileExcel(ByteBuffer _bb) { return GetRootAsMinigameRoadPuzzleRailTileExcel(_bb, new MinigameRoadPuzzleRailTileExcel()); }
  public static MinigameRoadPuzzleRailTileExcel GetRootAsMinigameRoadPuzzleRailTileExcel(ByteBuffer _bb, MinigameRoadPuzzleRailTileExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameRoadPuzzleRailTileExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool OriginalTile { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string PrefabName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(12); }
  public Japan.RoadPuzzleRailTileType RailTileType { get { int o = __p.__offset(14); return o != 0 ? (Japan.RoadPuzzleRailTileType)__p.bb.GetInt(o + __p.bb_pos) : Japan.RoadPuzzleRailTileType.None; } }

  public static Offset<Japan.MinigameRoadPuzzleRailTileExcel> CreateMinigameRoadPuzzleRailTileExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      long GroupId = 0,
      bool OriginalTile = false,
      StringOffset PrefabNameOffset = default(StringOffset),
      Japan.RoadPuzzleRailTileType RailTileType = Japan.RoadPuzzleRailTileType.None) {
    builder.StartTable(6);
    MinigameRoadPuzzleRailTileExcel.AddGroupId(builder, GroupId);
    MinigameRoadPuzzleRailTileExcel.AddUniqueId(builder, UniqueId);
    MinigameRoadPuzzleRailTileExcel.AddEventContentId(builder, EventContentId);
    MinigameRoadPuzzleRailTileExcel.AddRailTileType(builder, RailTileType);
    MinigameRoadPuzzleRailTileExcel.AddPrefabName(builder, PrefabNameOffset);
    MinigameRoadPuzzleRailTileExcel.AddOriginalTile(builder, OriginalTile);
    return MinigameRoadPuzzleRailTileExcel.EndMinigameRoadPuzzleRailTileExcel(builder);
  }

  public static void StartMinigameRoadPuzzleRailTileExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(2, groupId, 0); }
  public static void AddOriginalTile(FlatBufferBuilder builder, bool originalTile) { builder.AddBool(3, originalTile, false); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset prefabNameOffset) { builder.AddOffset(4, prefabNameOffset.Value, 0); }
  public static void AddRailTileType(FlatBufferBuilder builder, Japan.RoadPuzzleRailTileType railTileType) { builder.AddInt(5, (int)railTileType, 0); }
  public static Offset<Japan.MinigameRoadPuzzleRailTileExcel> EndMinigameRoadPuzzleRailTileExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameRoadPuzzleRailTileExcel>(o);
  }
  public MinigameRoadPuzzleRailTileExcelT UnPack() {
    var _o = new MinigameRoadPuzzleRailTileExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameRoadPuzzleRailTileExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameRoadPuzzleRailTile");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.OriginalTile = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.OriginalTile, key) : this.OriginalTile;
    _o.PrefabName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PrefabName, key) : this.PrefabName;
    _o.RailTileType = TableEncryptionService.UseEncryption ? (Japan.RoadPuzzleRailTileType)TableEncryptionService.Convert((int)this.RailTileType, key) : this.RailTileType;
  }
  public static Offset<Japan.MinigameRoadPuzzleRailTileExcel> Pack(FlatBufferBuilder builder, MinigameRoadPuzzleRailTileExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameRoadPuzzleRailTileExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameRoadPuzzleRailTile");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _OriginalTile = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.OriginalTile, key) : _o.OriginalTile;
    var _PrefabName = _o.PrefabName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PrefabName, key) : _o.PrefabName));
		var _RailTileType = TableEncryptionService.UseEncryption ? (Japan.RoadPuzzleRailTileType)TableEncryptionService.Convert((int)_o.RailTileType, key) : _o.RailTileType;
    return CreateMinigameRoadPuzzleRailTileExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _OriginalTile : _o.OriginalTile,
      _PrefabName,
      TableEncryptionService.UseEncryption ? _RailTileType : _o.RailTileType);
  }
}

public class MinigameRoadPuzzleRailTileExcelT
{
  public long EventContentId { get; set; }
  public long UniqueId { get; set; }
  public long GroupId { get; set; }
  public bool OriginalTile { get; set; }
  public string PrefabName { get; set; }
  public Japan.RoadPuzzleRailTileType RailTileType { get; set; }

  public MinigameRoadPuzzleRailTileExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.GroupId = 0;
    this.OriginalTile = false;
    this.PrefabName = null;
    this.RailTileType = Japan.RoadPuzzleRailTileType.None;
  }
}


static public class MinigameRoadPuzzleRailTileExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*OriginalTile*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*PrefabName*/, false)
      && verifier.VerifyField(tablePos, 14 /*RailTileType*/, 4 /*Japan.RoadPuzzleRailTileType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
