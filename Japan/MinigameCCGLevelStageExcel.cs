// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGLevelStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGLevelStageExcel GetRootAsMinigameCCGLevelStageExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGLevelStageExcel(_bb, new MinigameCCGLevelStageExcel()); }
  public static MinigameCCGLevelStageExcel GetRootAsMinigameCCGLevelStageExcel(ByteBuffer _bb, MinigameCCGLevelStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGLevelStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyGroupId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int EnemyGroupIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetEnemyGroupIdBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetEnemyGroupIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetEnemyGroupIdArray() { return __p.__vector_as_array<long>(8); }
  public Japan.CCGStageType StageType { get { int o = __p.__offset(10); return o != 0 ? (Japan.CCGStageType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CCGStageType.None; } }
  public int CampDiscardCardCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CampSprPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCampSprPathBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCampSprPathBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCampSprPathArray() { return __p.__vector_as_array<byte>(14); }
  public string CampBackgroundPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCampBackgroundPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCampBackgroundPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCampBackgroundPathArray() { return __p.__vector_as_array<byte>(16); }
  public Japan.CCGStageRewardType RewardType { get { int o = __p.__offset(18); return o != 0 ? (Japan.CCGStageRewardType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CCGStageRewardType.None; } }
  public int RewardCount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long RewardCardGroupId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CardRarityGroupId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsSkipIntroScenario { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long IntroScenarioGroupId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsSkipOutroScenario { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long OutroScenarioGroupId { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.MinigameCCGLevelStageExcel> CreateMinigameCCGLevelStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      long GroupId = 0,
      VectorOffset EnemyGroupIdOffset = default(VectorOffset),
      Japan.CCGStageType StageType = Japan.CCGStageType.None,
      int CampDiscardCardCount = 0,
      StringOffset CampSprPathOffset = default(StringOffset),
      StringOffset CampBackgroundPathOffset = default(StringOffset),
      Japan.CCGStageRewardType RewardType = Japan.CCGStageRewardType.None,
      int RewardCount = 0,
      long RewardCardGroupId = 0,
      long CardRarityGroupId = 0,
      bool isSkipIntroScenario = false,
      long IntroScenarioGroupId = 0,
      bool isSkipOutroScenario = false,
      long OutroScenarioGroupId = 0) {
    builder.StartTable(15);
    MinigameCCGLevelStageExcel.AddOutroScenarioGroupId(builder, OutroScenarioGroupId);
    MinigameCCGLevelStageExcel.AddIntroScenarioGroupId(builder, IntroScenarioGroupId);
    MinigameCCGLevelStageExcel.AddCardRarityGroupId(builder, CardRarityGroupId);
    MinigameCCGLevelStageExcel.AddRewardCardGroupId(builder, RewardCardGroupId);
    MinigameCCGLevelStageExcel.AddGroupId(builder, GroupId);
    MinigameCCGLevelStageExcel.AddId(builder, Id);
    MinigameCCGLevelStageExcel.AddRewardCount(builder, RewardCount);
    MinigameCCGLevelStageExcel.AddRewardType(builder, RewardType);
    MinigameCCGLevelStageExcel.AddCampBackgroundPath(builder, CampBackgroundPathOffset);
    MinigameCCGLevelStageExcel.AddCampSprPath(builder, CampSprPathOffset);
    MinigameCCGLevelStageExcel.AddCampDiscardCardCount(builder, CampDiscardCardCount);
    MinigameCCGLevelStageExcel.AddStageType(builder, StageType);
    MinigameCCGLevelStageExcel.AddEnemyGroupId(builder, EnemyGroupIdOffset);
    MinigameCCGLevelStageExcel.AddIsSkipOutroScenario(builder, isSkipOutroScenario);
    MinigameCCGLevelStageExcel.AddIsSkipIntroScenario(builder, isSkipIntroScenario);
    return MinigameCCGLevelStageExcel.EndMinigameCCGLevelStageExcel(builder);
  }

  public static void StartMinigameCCGLevelStageExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(1, groupId, 0); }
  public static void AddEnemyGroupId(FlatBufferBuilder builder, VectorOffset enemyGroupIdOffset) { builder.AddOffset(2, enemyGroupIdOffset.Value, 0); }
  public static VectorOffset CreateEnemyGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnemyGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStageType(FlatBufferBuilder builder, Japan.CCGStageType stageType) { builder.AddInt(3, (int)stageType, 0); }
  public static void AddCampDiscardCardCount(FlatBufferBuilder builder, int campDiscardCardCount) { builder.AddInt(4, campDiscardCardCount, 0); }
  public static void AddCampSprPath(FlatBufferBuilder builder, StringOffset campSprPathOffset) { builder.AddOffset(5, campSprPathOffset.Value, 0); }
  public static void AddCampBackgroundPath(FlatBufferBuilder builder, StringOffset campBackgroundPathOffset) { builder.AddOffset(6, campBackgroundPathOffset.Value, 0); }
  public static void AddRewardType(FlatBufferBuilder builder, Japan.CCGStageRewardType rewardType) { builder.AddInt(7, (int)rewardType, 0); }
  public static void AddRewardCount(FlatBufferBuilder builder, int rewardCount) { builder.AddInt(8, rewardCount, 0); }
  public static void AddRewardCardGroupId(FlatBufferBuilder builder, long rewardCardGroupId) { builder.AddLong(9, rewardCardGroupId, 0); }
  public static void AddCardRarityGroupId(FlatBufferBuilder builder, long cardRarityGroupId) { builder.AddLong(10, cardRarityGroupId, 0); }
  public static void AddIsSkipIntroScenario(FlatBufferBuilder builder, bool isSkipIntroScenario) { builder.AddBool(11, isSkipIntroScenario, false); }
  public static void AddIntroScenarioGroupId(FlatBufferBuilder builder, long introScenarioGroupId) { builder.AddLong(12, introScenarioGroupId, 0); }
  public static void AddIsSkipOutroScenario(FlatBufferBuilder builder, bool isSkipOutroScenario) { builder.AddBool(13, isSkipOutroScenario, false); }
  public static void AddOutroScenarioGroupId(FlatBufferBuilder builder, long outroScenarioGroupId) { builder.AddLong(14, outroScenarioGroupId, 0); }
  public static Offset<Japan.MinigameCCGLevelStageExcel> EndMinigameCCGLevelStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGLevelStageExcel>(o);
  }
  public MinigameCCGLevelStageExcelT UnPack() {
    var _o = new MinigameCCGLevelStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGLevelStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLevelStage");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.EnemyGroupId = new List<long>();
    for (var _j = 0; _j < this.EnemyGroupIdLength; ++_j) {_o.EnemyGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemyGroupId(_j), key) : this.EnemyGroupId(_j));}
    _o.StageType = TableEncryptionService.UseEncryption ? (Japan.CCGStageType)TableEncryptionService.Convert((int)this.StageType, key) : this.StageType;
    _o.CampDiscardCardCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CampDiscardCardCount, key) : this.CampDiscardCardCount;
    _o.CampSprPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CampSprPath, key) : this.CampSprPath;
    _o.CampBackgroundPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CampBackgroundPath, key) : this.CampBackgroundPath;
    _o.RewardType = TableEncryptionService.UseEncryption ? (Japan.CCGStageRewardType)TableEncryptionService.Convert((int)this.RewardType, key) : this.RewardType;
    _o.RewardCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RewardCount, key) : this.RewardCount;
    _o.RewardCardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardCardGroupId, key) : this.RewardCardGroupId;
    _o.CardRarityGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CardRarityGroupId, key) : this.CardRarityGroupId;
    _o.IsSkipIntroScenario = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsSkipIntroScenario, key) : this.IsSkipIntroScenario;
    _o.IntroScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.IntroScenarioGroupId, key) : this.IntroScenarioGroupId;
    _o.IsSkipOutroScenario = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsSkipOutroScenario, key) : this.IsSkipOutroScenario;
    _o.OutroScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OutroScenarioGroupId, key) : this.OutroScenarioGroupId;
  }
  public static Offset<Japan.MinigameCCGLevelStageExcel> Pack(FlatBufferBuilder builder, MinigameCCGLevelStageExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGLevelStageExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGLevelStage");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
    var _EnemyGroupId = default(VectorOffset);
    if (_o.EnemyGroupId != null) {
      var __EnemyGroupId = _o.EnemyGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _EnemyGroupId = CreateEnemyGroupIdVector(builder, __EnemyGroupId);
    }
		var _StageType = TableEncryptionService.UseEncryption ? (Japan.CCGStageType)TableEncryptionService.Convert((int)_o.StageType, key) : _o.StageType;
		var _CampDiscardCardCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CampDiscardCardCount, key) : _o.CampDiscardCardCount;
    var _CampSprPath = _o.CampSprPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CampSprPath, key) : _o.CampSprPath));
    var _CampBackgroundPath = _o.CampBackgroundPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CampBackgroundPath, key) : _o.CampBackgroundPath));
		var _RewardType = TableEncryptionService.UseEncryption ? (Japan.CCGStageRewardType)TableEncryptionService.Convert((int)_o.RewardType, key) : _o.RewardType;
		var _RewardCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RewardCount, key) : _o.RewardCount;
		var _RewardCardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardCardGroupId, key) : _o.RewardCardGroupId;
		var _CardRarityGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CardRarityGroupId, key) : _o.CardRarityGroupId;
		var _isSkipIntroScenario = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsSkipIntroScenario, key) : _o.IsSkipIntroScenario;
		var _IntroScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.IntroScenarioGroupId, key) : _o.IntroScenarioGroupId;
		var _isSkipOutroScenario = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsSkipOutroScenario, key) : _o.IsSkipOutroScenario;
		var _OutroScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OutroScenarioGroupId, key) : _o.OutroScenarioGroupId;
    return CreateMinigameCCGLevelStageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      _EnemyGroupId,
      TableEncryptionService.UseEncryption ? _StageType : _o.StageType,
      TableEncryptionService.UseEncryption ? _CampDiscardCardCount : _o.CampDiscardCardCount,
      _CampSprPath,
      _CampBackgroundPath,
      TableEncryptionService.UseEncryption ? _RewardType : _o.RewardType,
      TableEncryptionService.UseEncryption ? _RewardCount : _o.RewardCount,
      TableEncryptionService.UseEncryption ? _RewardCardGroupId : _o.RewardCardGroupId,
      TableEncryptionService.UseEncryption ? _CardRarityGroupId : _o.CardRarityGroupId,
      TableEncryptionService.UseEncryption ? _isSkipIntroScenario : _o.IsSkipIntroScenario,
      TableEncryptionService.UseEncryption ? _IntroScenarioGroupId : _o.IntroScenarioGroupId,
      TableEncryptionService.UseEncryption ? _isSkipOutroScenario : _o.IsSkipOutroScenario,
      TableEncryptionService.UseEncryption ? _OutroScenarioGroupId : _o.OutroScenarioGroupId);
  }
}

public class MinigameCCGLevelStageExcelT
{
  public long Id { get; set; }
  public long GroupId { get; set; }
  public List<long> EnemyGroupId { get; set; }
  public Japan.CCGStageType StageType { get; set; }
  public int CampDiscardCardCount { get; set; }
  public string CampSprPath { get; set; }
  public string CampBackgroundPath { get; set; }
  public Japan.CCGStageRewardType RewardType { get; set; }
  public int RewardCount { get; set; }
  public long RewardCardGroupId { get; set; }
  public long CardRarityGroupId { get; set; }
  public bool IsSkipIntroScenario { get; set; }
  public long IntroScenarioGroupId { get; set; }
  public bool IsSkipOutroScenario { get; set; }
  public long OutroScenarioGroupId { get; set; }

  public MinigameCCGLevelStageExcelT() {
    this.Id = 0;
    this.GroupId = 0;
    this.EnemyGroupId = null;
    this.StageType = Japan.CCGStageType.None;
    this.CampDiscardCardCount = 0;
    this.CampSprPath = null;
    this.CampBackgroundPath = null;
    this.RewardType = Japan.CCGStageRewardType.None;
    this.RewardCount = 0;
    this.RewardCardGroupId = 0;
    this.CardRarityGroupId = 0;
    this.IsSkipIntroScenario = false;
    this.IntroScenarioGroupId = 0;
    this.IsSkipOutroScenario = false;
    this.OutroScenarioGroupId = 0;
  }
}


static public class MinigameCCGLevelStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*EnemyGroupId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 10 /*StageType*/, 4 /*Japan.CCGStageType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CampDiscardCardCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*CampSprPath*/, false)
      && verifier.VerifyString(tablePos, 16 /*CampBackgroundPath*/, false)
      && verifier.VerifyField(tablePos, 18 /*RewardType*/, 4 /*Japan.CCGStageRewardType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*RewardCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*RewardCardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*CardRarityGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*IsSkipIntroScenario*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*IntroScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*IsSkipOutroScenario*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*OutroScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
