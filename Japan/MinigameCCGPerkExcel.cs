// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGPerkExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGPerkExcel GetRootAsMinigameCCGPerkExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGPerkExcel(_bb, new MinigameCCGPerkExcel()); }
  public static MinigameCCGPerkExcel GetRootAsMinigameCCGPerkExcel(ByteBuffer _bb, MinigameCCGPerkExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGPerkExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CCGId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CostParcelAmount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RerollPoint { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DiscardPoint { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EnvironmentLogicEffectId(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int EnvironmentLogicEffectIdLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetEnvironmentLogicEffectIdBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetEnvironmentLogicEffectIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetEnvironmentLogicEffectIdArray() { return __p.__vector_as_array<long>(14); }
  public long RequiredPerkId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RequiredPerkIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRequiredPerkIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetRequiredPerkIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetRequiredPerkIdArray() { return __p.__vector_as_array<long>(16); }
  public int ShopOrder { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ShopIcon { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShopIconBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetShopIconBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetShopIconArray() { return __p.__vector_as_array<byte>(20); }
  public uint ShopLocalizeTitle { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ShopLocalizeDesc { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Japan.MinigameCCGPerkExcel> CreateMinigameCCGPerkExcel(FlatBufferBuilder builder,
      long Id = 0,
      long CCGId = 0,
      int CostParcelAmount = 0,
      int RerollPoint = 0,
      int DiscardPoint = 0,
      VectorOffset EnvironmentLogicEffectIdOffset = default(VectorOffset),
      VectorOffset RequiredPerkIdOffset = default(VectorOffset),
      int ShopOrder = 0,
      StringOffset ShopIconOffset = default(StringOffset),
      uint ShopLocalizeTitle = 0,
      uint ShopLocalizeDesc = 0) {
    builder.StartTable(11);
    MinigameCCGPerkExcel.AddCCGId(builder, CCGId);
    MinigameCCGPerkExcel.AddId(builder, Id);
    MinigameCCGPerkExcel.AddShopLocalizeDesc(builder, ShopLocalizeDesc);
    MinigameCCGPerkExcel.AddShopLocalizeTitle(builder, ShopLocalizeTitle);
    MinigameCCGPerkExcel.AddShopIcon(builder, ShopIconOffset);
    MinigameCCGPerkExcel.AddShopOrder(builder, ShopOrder);
    MinigameCCGPerkExcel.AddRequiredPerkId(builder, RequiredPerkIdOffset);
    MinigameCCGPerkExcel.AddEnvironmentLogicEffectId(builder, EnvironmentLogicEffectIdOffset);
    MinigameCCGPerkExcel.AddDiscardPoint(builder, DiscardPoint);
    MinigameCCGPerkExcel.AddRerollPoint(builder, RerollPoint);
    MinigameCCGPerkExcel.AddCostParcelAmount(builder, CostParcelAmount);
    return MinigameCCGPerkExcel.EndMinigameCCGPerkExcel(builder);
  }

  public static void StartMinigameCCGPerkExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddCCGId(FlatBufferBuilder builder, long cCGId) { builder.AddLong(1, cCGId, 0); }
  public static void AddCostParcelAmount(FlatBufferBuilder builder, int costParcelAmount) { builder.AddInt(2, costParcelAmount, 0); }
  public static void AddRerollPoint(FlatBufferBuilder builder, int rerollPoint) { builder.AddInt(3, rerollPoint, 0); }
  public static void AddDiscardPoint(FlatBufferBuilder builder, int discardPoint) { builder.AddInt(4, discardPoint, 0); }
  public static void AddEnvironmentLogicEffectId(FlatBufferBuilder builder, VectorOffset environmentLogicEffectIdOffset) { builder.AddOffset(5, environmentLogicEffectIdOffset.Value, 0); }
  public static VectorOffset CreateEnvironmentLogicEffectIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnvironmentLogicEffectIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnvironmentLogicEffectIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnvironmentLogicEffectIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnvironmentLogicEffectIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRequiredPerkId(FlatBufferBuilder builder, VectorOffset requiredPerkIdOffset) { builder.AddOffset(6, requiredPerkIdOffset.Value, 0); }
  public static VectorOffset CreateRequiredPerkIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRequiredPerkIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRequiredPerkIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRequiredPerkIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRequiredPerkIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddShopOrder(FlatBufferBuilder builder, int shopOrder) { builder.AddInt(7, shopOrder, 0); }
  public static void AddShopIcon(FlatBufferBuilder builder, StringOffset shopIconOffset) { builder.AddOffset(8, shopIconOffset.Value, 0); }
  public static void AddShopLocalizeTitle(FlatBufferBuilder builder, uint shopLocalizeTitle) { builder.AddUint(9, shopLocalizeTitle, 0); }
  public static void AddShopLocalizeDesc(FlatBufferBuilder builder, uint shopLocalizeDesc) { builder.AddUint(10, shopLocalizeDesc, 0); }
  public static Offset<Japan.MinigameCCGPerkExcel> EndMinigameCCGPerkExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGPerkExcel>(o);
  }
  public MinigameCCGPerkExcelT UnPack() {
    var _o = new MinigameCCGPerkExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGPerkExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGPerk");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CCGId, key) : this.CCGId;
    _o.CostParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CostParcelAmount, key) : this.CostParcelAmount;
    _o.RerollPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RerollPoint, key) : this.RerollPoint;
    _o.DiscardPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DiscardPoint, key) : this.DiscardPoint;
    _o.EnvironmentLogicEffectId = new List<long>();
    for (var _j = 0; _j < this.EnvironmentLogicEffectIdLength; ++_j) {_o.EnvironmentLogicEffectId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnvironmentLogicEffectId(_j), key) : this.EnvironmentLogicEffectId(_j));}
    _o.RequiredPerkId = new List<long>();
    for (var _j = 0; _j < this.RequiredPerkIdLength; ++_j) {_o.RequiredPerkId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RequiredPerkId(_j), key) : this.RequiredPerkId(_j));}
    _o.ShopOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ShopOrder, key) : this.ShopOrder;
    _o.ShopIcon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ShopIcon, key) : this.ShopIcon;
    _o.ShopLocalizeTitle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.ShopLocalizeTitle, key) : this.ShopLocalizeTitle;
    _o.ShopLocalizeDesc = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.ShopLocalizeDesc, key) : this.ShopLocalizeDesc;
  }
  public static Offset<Japan.MinigameCCGPerkExcel> Pack(FlatBufferBuilder builder, MinigameCCGPerkExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGPerkExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGPerk");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CCGId, key) : _o.CCGId;
		var _CostParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CostParcelAmount, key) : _o.CostParcelAmount;
		var _RerollPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RerollPoint, key) : _o.RerollPoint;
		var _DiscardPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DiscardPoint, key) : _o.DiscardPoint;
    var _EnvironmentLogicEffectId = default(VectorOffset);
    if (_o.EnvironmentLogicEffectId != null) {
      var __EnvironmentLogicEffectId = _o.EnvironmentLogicEffectId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _EnvironmentLogicEffectId = CreateEnvironmentLogicEffectIdVector(builder, __EnvironmentLogicEffectId);
    }
    var _RequiredPerkId = default(VectorOffset);
    if (_o.RequiredPerkId != null) {
      var __RequiredPerkId = _o.RequiredPerkId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _RequiredPerkId = CreateRequiredPerkIdVector(builder, __RequiredPerkId);
    }
		var _ShopOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ShopOrder, key) : _o.ShopOrder;
    var _ShopIcon = _o.ShopIcon == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ShopIcon, key) : _o.ShopIcon));
		var _ShopLocalizeTitle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.ShopLocalizeTitle, key) : _o.ShopLocalizeTitle;
		var _ShopLocalizeDesc = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.ShopLocalizeDesc, key) : _o.ShopLocalizeDesc;
    return CreateMinigameCCGPerkExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _CCGId : _o.CCGId,
      TableEncryptionService.UseEncryption ? _CostParcelAmount : _o.CostParcelAmount,
      TableEncryptionService.UseEncryption ? _RerollPoint : _o.RerollPoint,
      TableEncryptionService.UseEncryption ? _DiscardPoint : _o.DiscardPoint,
      _EnvironmentLogicEffectId,
      _RequiredPerkId,
      TableEncryptionService.UseEncryption ? _ShopOrder : _o.ShopOrder,
      _ShopIcon,
      TableEncryptionService.UseEncryption ? _ShopLocalizeTitle : _o.ShopLocalizeTitle,
      TableEncryptionService.UseEncryption ? _ShopLocalizeDesc : _o.ShopLocalizeDesc);
  }
}

public class MinigameCCGPerkExcelT
{
  public long Id { get; set; }
  public long CCGId { get; set; }
  public int CostParcelAmount { get; set; }
  public int RerollPoint { get; set; }
  public int DiscardPoint { get; set; }
  public List<long> EnvironmentLogicEffectId { get; set; }
  public List<long> RequiredPerkId { get; set; }
  public int ShopOrder { get; set; }
  public string ShopIcon { get; set; }
  public uint ShopLocalizeTitle { get; set; }
  public uint ShopLocalizeDesc { get; set; }

  public MinigameCCGPerkExcelT() {
    this.Id = 0;
    this.CCGId = 0;
    this.CostParcelAmount = 0;
    this.RerollPoint = 0;
    this.DiscardPoint = 0;
    this.EnvironmentLogicEffectId = null;
    this.RequiredPerkId = null;
    this.ShopOrder = 0;
    this.ShopIcon = null;
    this.ShopLocalizeTitle = 0;
    this.ShopLocalizeDesc = 0;
  }
}


static public class MinigameCCGPerkExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CCGId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CostParcelAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RerollPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DiscardPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*EnvironmentLogicEffectId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*RequiredPerkId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 18 /*ShopOrder*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*ShopIcon*/, false)
      && verifier.VerifyField(tablePos, 22 /*ShopLocalizeTitle*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*ShopLocalizeDesc*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
