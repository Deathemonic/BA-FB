// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct RaidRankingRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RaidRankingRewardExcel GetRootAsRaidRankingRewardExcel(ByteBuffer _bb) { return GetRootAsRaidRankingRewardExcel(_bb, new RaidRankingRewardExcel()); }
  public static RaidRankingRewardExcel GetRootAsRaidRankingRewardExcel(ByteBuffer _bb, RaidRankingRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RaidRankingRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RankingRewardGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankStart { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RankEnd { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PercentRankStart { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PercentRankEnd { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Tier { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.ParcelType RewardParcelType(int j) { int o = __p.__offset(18); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<Japan.ParcelType>(18, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public Japan.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(18); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.ParcelType[] a = new Japan.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParcelUniqueId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelUniqueIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelUniqueIdBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelUniqueIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetRewardParcelUniqueIdArray() { return __p.__vector_as_array<long>(20); }
  public long RewardParcelAmount(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelAmountLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelAmountBytes() { return __p.__vector_as_span<long>(22, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelAmountBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public long[] GetRewardParcelAmountArray() { return __p.__vector_as_array<long>(22); }

  public static Offset<Japan.RaidRankingRewardExcel> CreateRaidRankingRewardExcel(FlatBufferBuilder builder,
      long RankingRewardGroupId = 0,
      long Id = 0,
      long RankStart = 0,
      long RankEnd = 0,
      long PercentRankStart = 0,
      long PercentRankEnd = 0,
      int Tier = 0,
      VectorOffset RewardParcelTypeOffset = default(VectorOffset),
      VectorOffset RewardParcelUniqueIdOffset = default(VectorOffset),
      VectorOffset RewardParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(10);
    RaidRankingRewardExcel.AddPercentRankEnd(builder, PercentRankEnd);
    RaidRankingRewardExcel.AddPercentRankStart(builder, PercentRankStart);
    RaidRankingRewardExcel.AddRankEnd(builder, RankEnd);
    RaidRankingRewardExcel.AddRankStart(builder, RankStart);
    RaidRankingRewardExcel.AddId(builder, Id);
    RaidRankingRewardExcel.AddRankingRewardGroupId(builder, RankingRewardGroupId);
    RaidRankingRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmountOffset);
    RaidRankingRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueIdOffset);
    RaidRankingRewardExcel.AddRewardParcelType(builder, RewardParcelTypeOffset);
    RaidRankingRewardExcel.AddTier(builder, Tier);
    return RaidRankingRewardExcel.EndRaidRankingRewardExcel(builder);
  }

  public static void StartRaidRankingRewardExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddRankingRewardGroupId(FlatBufferBuilder builder, long rankingRewardGroupId) { builder.AddLong(0, rankingRewardGroupId, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddRankStart(FlatBufferBuilder builder, long rankStart) { builder.AddLong(2, rankStart, 0); }
  public static void AddRankEnd(FlatBufferBuilder builder, long rankEnd) { builder.AddLong(3, rankEnd, 0); }
  public static void AddPercentRankStart(FlatBufferBuilder builder, long percentRankStart) { builder.AddLong(4, percentRankStart, 0); }
  public static void AddPercentRankEnd(FlatBufferBuilder builder, long percentRankEnd) { builder.AddLong(5, percentRankEnd, 0); }
  public static void AddTier(FlatBufferBuilder builder, int tier) { builder.AddInt(6, tier, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(7, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelUniqueId(FlatBufferBuilder builder, VectorOffset rewardParcelUniqueIdOffset) { builder.AddOffset(8, rewardParcelUniqueIdOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelUniqueIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelUniqueIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, VectorOffset rewardParcelAmountOffset) { builder.AddOffset(9, rewardParcelAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Japan.RaidRankingRewardExcel> EndRaidRankingRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.RaidRankingRewardExcel>(o);
  }
  public RaidRankingRewardExcelT UnPack() {
    var _o = new RaidRankingRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RaidRankingRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("RaidRankingReward");
    _o.RankingRewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RankingRewardGroupId, key) : this.RankingRewardGroupId;
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.RankStart = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RankStart, key) : this.RankStart;
    _o.RankEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RankEnd, key) : this.RankEnd;
    _o.PercentRankStart = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PercentRankStart, key) : this.PercentRankStart;
    _o.PercentRankEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PercentRankEnd, key) : this.PercentRankEnd;
    _o.Tier = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Tier, key) : this.Tier;
    _o.RewardParcelType = new List<Japan.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType(_j), key) : this.RewardParcelType(_j));}
    _o.RewardParcelUniqueId = new List<long>();
    for (var _j = 0; _j < this.RewardParcelUniqueIdLength; ++_j) {_o.RewardParcelUniqueId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelUniqueId(_j), key) : this.RewardParcelUniqueId(_j));}
    _o.RewardParcelAmount = new List<long>();
    for (var _j = 0; _j < this.RewardParcelAmountLength; ++_j) {_o.RewardParcelAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelAmount(_j), key) : this.RewardParcelAmount(_j));}
  }
  public static Offset<Japan.RaidRankingRewardExcel> Pack(FlatBufferBuilder builder, RaidRankingRewardExcelT _o) {
    if (_o == null) return default(Offset<Japan.RaidRankingRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("RaidRankingReward");
		var _RankingRewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RankingRewardGroupId, key) : _o.RankingRewardGroupId;
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _RankStart = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RankStart, key) : _o.RankStart;
		var _RankEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RankEnd, key) : _o.RankEnd;
		var _PercentRankStart = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PercentRankStart, key) : _o.PercentRankStart;
		var _PercentRankEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PercentRankEnd, key) : _o.PercentRankEnd;
		var _Tier = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Tier, key) : _o.Tier;
    var _RewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __RewardParcelType = _o.RewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _RewardParcelType = CreateRewardParcelTypeVector(builder, __RewardParcelType);
    }
    var _RewardParcelUniqueId = default(VectorOffset);
    if (_o.RewardParcelUniqueId != null) {
      var __RewardParcelUniqueId = _o.RewardParcelUniqueId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _RewardParcelUniqueId = CreateRewardParcelUniqueIdVector(builder, __RewardParcelUniqueId);
    }
    var _RewardParcelAmount = default(VectorOffset);
    if (_o.RewardParcelAmount != null) {
      var __RewardParcelAmount = _o.RewardParcelAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _RewardParcelAmount = CreateRewardParcelAmountVector(builder, __RewardParcelAmount);
    }
    return CreateRaidRankingRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _RankingRewardGroupId : _o.RankingRewardGroupId,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _RankStart : _o.RankStart,
      TableEncryptionService.UseEncryption ? _RankEnd : _o.RankEnd,
      TableEncryptionService.UseEncryption ? _PercentRankStart : _o.PercentRankStart,
      TableEncryptionService.UseEncryption ? _PercentRankEnd : _o.PercentRankEnd,
      TableEncryptionService.UseEncryption ? _Tier : _o.Tier,
      _RewardParcelType,
      _RewardParcelUniqueId,
      _RewardParcelAmount);
  }
}

public class RaidRankingRewardExcelT
{
  public long RankingRewardGroupId { get; set; }
  public long Id { get; set; }
  public long RankStart { get; set; }
  public long RankEnd { get; set; }
  public long PercentRankStart { get; set; }
  public long PercentRankEnd { get; set; }
  public int Tier { get; set; }
  public List<Japan.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardParcelUniqueId { get; set; }
  public List<long> RewardParcelAmount { get; set; }

  public RaidRankingRewardExcelT() {
    this.RankingRewardGroupId = 0;
    this.Id = 0;
    this.RankStart = 0;
    this.RankEnd = 0;
    this.PercentRankStart = 0;
    this.PercentRankEnd = 0;
    this.Tier = 0;
    this.RewardParcelType = null;
    this.RewardParcelUniqueId = null;
    this.RewardParcelAmount = null;
  }
}


static public class RaidRankingRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RankingRewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*RankStart*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*RankEnd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*PercentRankStart*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*PercentRankEnd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Tier*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*RewardParcelType*/, 4 /*Japan.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*RewardParcelUniqueId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*RewardParcelAmount*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
