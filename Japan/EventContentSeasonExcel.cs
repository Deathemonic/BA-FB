// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentSeasonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentSeasonExcel GetRootAsEventContentSeasonExcel(ByteBuffer _bb) { return GetRootAsEventContentSeasonExcel(_bb, new EventContentSeasonExcel()); }
  public static EventContentSeasonExcel GetRootAsEventContentSeasonExcel(ByteBuffer _bb, EventContentSeasonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentSeasonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OriginalEventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsReturn { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public Japan.EventContentType EventContentType { get { int o = __p.__offset(12); return o != 0 ? (Japan.EventContentType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EventContentType.Stage; } }
  public Japan.OpenConditionContent OpenConditionContent { get { int o = __p.__offset(14); return o != 0 ? (Japan.OpenConditionContent)__p.bb.GetInt(o + __p.bb_pos) : Japan.OpenConditionContent.Shop; } }
  public bool EventDisplay { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int IconOrder { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.SubEventType SubEventType { get { int o = __p.__offset(20); return o != 0 ? (Japan.SubEventType)__p.bb.GetInt(o + __p.bb_pos) : Japan.SubEventType.None; } }
  public bool SubEvent { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long EventItemId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MainEventId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventChangeOpenCondition { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string BeforehandExposedTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforehandExposedTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetBeforehandExposedTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetBeforehandExposedTimeArray() { return __p.__vector_as_array<byte>(30); }
  public string EventContentOpenTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventContentOpenTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetEventContentOpenTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetEventContentOpenTimeArray() { return __p.__vector_as_array<byte>(32); }
  public string EventContentCloseNoteTime { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventContentCloseNoteTimeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetEventContentCloseNoteTimeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetEventContentCloseNoteTimeArray() { return __p.__vector_as_array<byte>(34); }
  public string EventContentCloseTime { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventContentCloseTimeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetEventContentCloseTimeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetEventContentCloseTimeArray() { return __p.__vector_as_array<byte>(36); }
  public string ExtensionTime { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtensionTimeBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetExtensionTimeBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetExtensionTimeArray() { return __p.__vector_as_array<byte>(38); }
  public string MainIconParcelPath { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainIconParcelPathBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetMainIconParcelPathBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetMainIconParcelPathArray() { return __p.__vector_as_array<byte>(40); }
  public string SubIconParcelPath { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubIconParcelPathBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetSubIconParcelPathBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetSubIconParcelPathArray() { return __p.__vector_as_array<byte>(42); }
  public string BeforehandBgImagePath { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforehandBgImagePathBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetBeforehandBgImagePathBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetBeforehandBgImagePathArray() { return __p.__vector_as_array<byte>(44); }
  public long MinigamePrologScenarioGroupId { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BeforehandScenarioGroupId(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BeforehandScenarioGroupIdLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBeforehandScenarioGroupIdBytes() { return __p.__vector_as_span<long>(48, 8); }
#else
  public ArraySegment<byte>? GetBeforehandScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public long[] GetBeforehandScenarioGroupIdArray() { return __p.__vector_as_array<long>(48); }
  public string MainBannerImagePath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainBannerImagePathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetMainBannerImagePathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetMainBannerImagePathArray() { return __p.__vector_as_array<byte>(50); }
  public string MainBgImagePath { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainBgImagePathBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetMainBgImagePathBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetMainBgImagePathArray() { return __p.__vector_as_array<byte>(52); }
  public long ShiftTriggerStageId { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShiftMainBgImagePath { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShiftMainBgImagePathBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetShiftMainBgImagePathBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetShiftMainBgImagePathArray() { return __p.__vector_as_array<byte>(56); }
  public string MinigameLobbyPrefabName { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinigameLobbyPrefabNameBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetMinigameLobbyPrefabNameBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetMinigameLobbyPrefabNameArray() { return __p.__vector_as_array<byte>(58); }
  public string MinigameVictoryPrefabName { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinigameVictoryPrefabNameBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetMinigameVictoryPrefabNameBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetMinigameVictoryPrefabNameArray() { return __p.__vector_as_array<byte>(60); }
  public string MinigameMissionBgPrefabName { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinigameMissionBgPrefabNameBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetMinigameMissionBgPrefabNameBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetMinigameMissionBgPrefabNameArray() { return __p.__vector_as_array<byte>(62); }
  public string MinigameMissionBgImagePath { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinigameMissionBgImagePathBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetMinigameMissionBgImagePathBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetMinigameMissionBgImagePathArray() { return __p.__vector_as_array<byte>(64); }
  public string CardBgImagePath { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCardBgImagePathBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetCardBgImagePathBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetCardBgImagePathArray() { return __p.__vector_as_array<byte>(66); }
  public bool EventAssist { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Japan.EventContentReleaseType EventContentReleaseType { get { int o = __p.__offset(70); return o != 0 ? (Japan.EventContentReleaseType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EventContentReleaseType.None; } }
  public long EventContentStageRewardIdPermanent { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.RewardTag RewardTagPermanent { get { int o = __p.__offset(74); return o != 0 ? (Japan.RewardTag)__p.bb.GetInt(o + __p.bb_pos) : Japan.RewardTag.Default; } }
  public long MiniEventShortCutScenarioModeId { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioContentCollectionGroupId { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.EventContentSeasonExcel> CreateEventContentSeasonExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long OriginalEventContentId = 0,
      bool IsReturn = false,
      StringOffset NameOffset = default(StringOffset),
      Japan.EventContentType EventContentType = Japan.EventContentType.Stage,
      Japan.OpenConditionContent OpenConditionContent = Japan.OpenConditionContent.Shop,
      bool EventDisplay = false,
      int IconOrder = 0,
      Japan.SubEventType SubEventType = Japan.SubEventType.None,
      bool SubEvent = false,
      long EventItemId = 0,
      long MainEventId = 0,
      long EventChangeOpenCondition = 0,
      StringOffset BeforehandExposedTimeOffset = default(StringOffset),
      StringOffset EventContentOpenTimeOffset = default(StringOffset),
      StringOffset EventContentCloseNoteTimeOffset = default(StringOffset),
      StringOffset EventContentCloseTimeOffset = default(StringOffset),
      StringOffset ExtensionTimeOffset = default(StringOffset),
      StringOffset MainIconParcelPathOffset = default(StringOffset),
      StringOffset SubIconParcelPathOffset = default(StringOffset),
      StringOffset BeforehandBgImagePathOffset = default(StringOffset),
      long MinigamePrologScenarioGroupId = 0,
      VectorOffset BeforehandScenarioGroupIdOffset = default(VectorOffset),
      StringOffset MainBannerImagePathOffset = default(StringOffset),
      StringOffset MainBgImagePathOffset = default(StringOffset),
      long ShiftTriggerStageId = 0,
      StringOffset ShiftMainBgImagePathOffset = default(StringOffset),
      StringOffset MinigameLobbyPrefabNameOffset = default(StringOffset),
      StringOffset MinigameVictoryPrefabNameOffset = default(StringOffset),
      StringOffset MinigameMissionBgPrefabNameOffset = default(StringOffset),
      StringOffset MinigameMissionBgImagePathOffset = default(StringOffset),
      StringOffset CardBgImagePathOffset = default(StringOffset),
      bool EventAssist = false,
      Japan.EventContentReleaseType EventContentReleaseType = Japan.EventContentReleaseType.None,
      long EventContentStageRewardIdPermanent = 0,
      Japan.RewardTag RewardTagPermanent = Japan.RewardTag.Default,
      long MiniEventShortCutScenarioModeId = 0,
      long ScenarioContentCollectionGroupId = 0) {
    builder.StartTable(38);
    EventContentSeasonExcel.AddScenarioContentCollectionGroupId(builder, ScenarioContentCollectionGroupId);
    EventContentSeasonExcel.AddMiniEventShortCutScenarioModeId(builder, MiniEventShortCutScenarioModeId);
    EventContentSeasonExcel.AddEventContentStageRewardIdPermanent(builder, EventContentStageRewardIdPermanent);
    EventContentSeasonExcel.AddShiftTriggerStageId(builder, ShiftTriggerStageId);
    EventContentSeasonExcel.AddMinigamePrologScenarioGroupId(builder, MinigamePrologScenarioGroupId);
    EventContentSeasonExcel.AddEventChangeOpenCondition(builder, EventChangeOpenCondition);
    EventContentSeasonExcel.AddMainEventId(builder, MainEventId);
    EventContentSeasonExcel.AddEventItemId(builder, EventItemId);
    EventContentSeasonExcel.AddOriginalEventContentId(builder, OriginalEventContentId);
    EventContentSeasonExcel.AddEventContentId(builder, EventContentId);
    EventContentSeasonExcel.AddRewardTagPermanent(builder, RewardTagPermanent);
    EventContentSeasonExcel.AddEventContentReleaseType(builder, EventContentReleaseType);
    EventContentSeasonExcel.AddCardBgImagePath(builder, CardBgImagePathOffset);
    EventContentSeasonExcel.AddMinigameMissionBgImagePath(builder, MinigameMissionBgImagePathOffset);
    EventContentSeasonExcel.AddMinigameMissionBgPrefabName(builder, MinigameMissionBgPrefabNameOffset);
    EventContentSeasonExcel.AddMinigameVictoryPrefabName(builder, MinigameVictoryPrefabNameOffset);
    EventContentSeasonExcel.AddMinigameLobbyPrefabName(builder, MinigameLobbyPrefabNameOffset);
    EventContentSeasonExcel.AddShiftMainBgImagePath(builder, ShiftMainBgImagePathOffset);
    EventContentSeasonExcel.AddMainBgImagePath(builder, MainBgImagePathOffset);
    EventContentSeasonExcel.AddMainBannerImagePath(builder, MainBannerImagePathOffset);
    EventContentSeasonExcel.AddBeforehandScenarioGroupId(builder, BeforehandScenarioGroupIdOffset);
    EventContentSeasonExcel.AddBeforehandBgImagePath(builder, BeforehandBgImagePathOffset);
    EventContentSeasonExcel.AddSubIconParcelPath(builder, SubIconParcelPathOffset);
    EventContentSeasonExcel.AddMainIconParcelPath(builder, MainIconParcelPathOffset);
    EventContentSeasonExcel.AddExtensionTime(builder, ExtensionTimeOffset);
    EventContentSeasonExcel.AddEventContentCloseTime(builder, EventContentCloseTimeOffset);
    EventContentSeasonExcel.AddEventContentCloseNoteTime(builder, EventContentCloseNoteTimeOffset);
    EventContentSeasonExcel.AddEventContentOpenTime(builder, EventContentOpenTimeOffset);
    EventContentSeasonExcel.AddBeforehandExposedTime(builder, BeforehandExposedTimeOffset);
    EventContentSeasonExcel.AddSubEventType(builder, SubEventType);
    EventContentSeasonExcel.AddIconOrder(builder, IconOrder);
    EventContentSeasonExcel.AddOpenConditionContent(builder, OpenConditionContent);
    EventContentSeasonExcel.AddEventContentType(builder, EventContentType);
    EventContentSeasonExcel.AddName(builder, NameOffset);
    EventContentSeasonExcel.AddEventAssist(builder, EventAssist);
    EventContentSeasonExcel.AddSubEvent(builder, SubEvent);
    EventContentSeasonExcel.AddEventDisplay(builder, EventDisplay);
    EventContentSeasonExcel.AddIsReturn(builder, IsReturn);
    return EventContentSeasonExcel.EndEventContentSeasonExcel(builder);
  }

  public static void StartEventContentSeasonExcel(FlatBufferBuilder builder) { builder.StartTable(38); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddOriginalEventContentId(FlatBufferBuilder builder, long originalEventContentId) { builder.AddLong(1, originalEventContentId, 0); }
  public static void AddIsReturn(FlatBufferBuilder builder, bool isReturn) { builder.AddBool(2, isReturn, false); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddEventContentType(FlatBufferBuilder builder, Japan.EventContentType eventContentType) { builder.AddInt(4, (int)eventContentType, 0); }
  public static void AddOpenConditionContent(FlatBufferBuilder builder, Japan.OpenConditionContent openConditionContent) { builder.AddInt(5, (int)openConditionContent, 0); }
  public static void AddEventDisplay(FlatBufferBuilder builder, bool eventDisplay) { builder.AddBool(6, eventDisplay, false); }
  public static void AddIconOrder(FlatBufferBuilder builder, int iconOrder) { builder.AddInt(7, iconOrder, 0); }
  public static void AddSubEventType(FlatBufferBuilder builder, Japan.SubEventType subEventType) { builder.AddInt(8, (int)subEventType, 0); }
  public static void AddSubEvent(FlatBufferBuilder builder, bool subEvent) { builder.AddBool(9, subEvent, false); }
  public static void AddEventItemId(FlatBufferBuilder builder, long eventItemId) { builder.AddLong(10, eventItemId, 0); }
  public static void AddMainEventId(FlatBufferBuilder builder, long mainEventId) { builder.AddLong(11, mainEventId, 0); }
  public static void AddEventChangeOpenCondition(FlatBufferBuilder builder, long eventChangeOpenCondition) { builder.AddLong(12, eventChangeOpenCondition, 0); }
  public static void AddBeforehandExposedTime(FlatBufferBuilder builder, StringOffset beforehandExposedTimeOffset) { builder.AddOffset(13, beforehandExposedTimeOffset.Value, 0); }
  public static void AddEventContentOpenTime(FlatBufferBuilder builder, StringOffset eventContentOpenTimeOffset) { builder.AddOffset(14, eventContentOpenTimeOffset.Value, 0); }
  public static void AddEventContentCloseNoteTime(FlatBufferBuilder builder, StringOffset eventContentCloseNoteTimeOffset) { builder.AddOffset(15, eventContentCloseNoteTimeOffset.Value, 0); }
  public static void AddEventContentCloseTime(FlatBufferBuilder builder, StringOffset eventContentCloseTimeOffset) { builder.AddOffset(16, eventContentCloseTimeOffset.Value, 0); }
  public static void AddExtensionTime(FlatBufferBuilder builder, StringOffset extensionTimeOffset) { builder.AddOffset(17, extensionTimeOffset.Value, 0); }
  public static void AddMainIconParcelPath(FlatBufferBuilder builder, StringOffset mainIconParcelPathOffset) { builder.AddOffset(18, mainIconParcelPathOffset.Value, 0); }
  public static void AddSubIconParcelPath(FlatBufferBuilder builder, StringOffset subIconParcelPathOffset) { builder.AddOffset(19, subIconParcelPathOffset.Value, 0); }
  public static void AddBeforehandBgImagePath(FlatBufferBuilder builder, StringOffset beforehandBgImagePathOffset) { builder.AddOffset(20, beforehandBgImagePathOffset.Value, 0); }
  public static void AddMinigamePrologScenarioGroupId(FlatBufferBuilder builder, long minigamePrologScenarioGroupId) { builder.AddLong(21, minigamePrologScenarioGroupId, 0); }
  public static void AddBeforehandScenarioGroupId(FlatBufferBuilder builder, VectorOffset beforehandScenarioGroupIdOffset) { builder.AddOffset(22, beforehandScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBeforehandScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBeforehandScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMainBannerImagePath(FlatBufferBuilder builder, StringOffset mainBannerImagePathOffset) { builder.AddOffset(23, mainBannerImagePathOffset.Value, 0); }
  public static void AddMainBgImagePath(FlatBufferBuilder builder, StringOffset mainBgImagePathOffset) { builder.AddOffset(24, mainBgImagePathOffset.Value, 0); }
  public static void AddShiftTriggerStageId(FlatBufferBuilder builder, long shiftTriggerStageId) { builder.AddLong(25, shiftTriggerStageId, 0); }
  public static void AddShiftMainBgImagePath(FlatBufferBuilder builder, StringOffset shiftMainBgImagePathOffset) { builder.AddOffset(26, shiftMainBgImagePathOffset.Value, 0); }
  public static void AddMinigameLobbyPrefabName(FlatBufferBuilder builder, StringOffset minigameLobbyPrefabNameOffset) { builder.AddOffset(27, minigameLobbyPrefabNameOffset.Value, 0); }
  public static void AddMinigameVictoryPrefabName(FlatBufferBuilder builder, StringOffset minigameVictoryPrefabNameOffset) { builder.AddOffset(28, minigameVictoryPrefabNameOffset.Value, 0); }
  public static void AddMinigameMissionBgPrefabName(FlatBufferBuilder builder, StringOffset minigameMissionBgPrefabNameOffset) { builder.AddOffset(29, minigameMissionBgPrefabNameOffset.Value, 0); }
  public static void AddMinigameMissionBgImagePath(FlatBufferBuilder builder, StringOffset minigameMissionBgImagePathOffset) { builder.AddOffset(30, minigameMissionBgImagePathOffset.Value, 0); }
  public static void AddCardBgImagePath(FlatBufferBuilder builder, StringOffset cardBgImagePathOffset) { builder.AddOffset(31, cardBgImagePathOffset.Value, 0); }
  public static void AddEventAssist(FlatBufferBuilder builder, bool eventAssist) { builder.AddBool(32, eventAssist, false); }
  public static void AddEventContentReleaseType(FlatBufferBuilder builder, Japan.EventContentReleaseType eventContentReleaseType) { builder.AddInt(33, (int)eventContentReleaseType, 0); }
  public static void AddEventContentStageRewardIdPermanent(FlatBufferBuilder builder, long eventContentStageRewardIdPermanent) { builder.AddLong(34, eventContentStageRewardIdPermanent, 0); }
  public static void AddRewardTagPermanent(FlatBufferBuilder builder, Japan.RewardTag rewardTagPermanent) { builder.AddInt(35, (int)rewardTagPermanent, 0); }
  public static void AddMiniEventShortCutScenarioModeId(FlatBufferBuilder builder, long miniEventShortCutScenarioModeId) { builder.AddLong(36, miniEventShortCutScenarioModeId, 0); }
  public static void AddScenarioContentCollectionGroupId(FlatBufferBuilder builder, long scenarioContentCollectionGroupId) { builder.AddLong(37, scenarioContentCollectionGroupId, 0); }
  public static Offset<Japan.EventContentSeasonExcel> EndEventContentSeasonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentSeasonExcel>(o);
  }
  public EventContentSeasonExcelT UnPack() {
    var _o = new EventContentSeasonExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentSeasonExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentSeason");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.OriginalEventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OriginalEventContentId, key) : this.OriginalEventContentId;
    _o.IsReturn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsReturn, key) : this.IsReturn;
    _o.Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Name, key) : this.Name;
    _o.EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)this.EventContentType, key) : this.EventContentType;
    _o.OpenConditionContent = TableEncryptionService.UseEncryption ? (Japan.OpenConditionContent)TableEncryptionService.Convert((int)this.OpenConditionContent, key) : this.OpenConditionContent;
    _o.EventDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.EventDisplay, key) : this.EventDisplay;
    _o.IconOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.IconOrder, key) : this.IconOrder;
    _o.SubEventType = TableEncryptionService.UseEncryption ? (Japan.SubEventType)TableEncryptionService.Convert((int)this.SubEventType, key) : this.SubEventType;
    _o.SubEvent = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.SubEvent, key) : this.SubEvent;
    _o.EventItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventItemId, key) : this.EventItemId;
    _o.MainEventId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MainEventId, key) : this.MainEventId;
    _o.EventChangeOpenCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventChangeOpenCondition, key) : this.EventChangeOpenCondition;
    _o.BeforehandExposedTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BeforehandExposedTime, key) : this.BeforehandExposedTime;
    _o.EventContentOpenTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EventContentOpenTime, key) : this.EventContentOpenTime;
    _o.EventContentCloseNoteTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EventContentCloseNoteTime, key) : this.EventContentCloseNoteTime;
    _o.EventContentCloseTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EventContentCloseTime, key) : this.EventContentCloseTime;
    _o.ExtensionTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ExtensionTime, key) : this.ExtensionTime;
    _o.MainIconParcelPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MainIconParcelPath, key) : this.MainIconParcelPath;
    _o.SubIconParcelPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SubIconParcelPath, key) : this.SubIconParcelPath;
    _o.BeforehandBgImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BeforehandBgImagePath, key) : this.BeforehandBgImagePath;
    _o.MinigamePrologScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MinigamePrologScenarioGroupId, key) : this.MinigamePrologScenarioGroupId;
    _o.BeforehandScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.BeforehandScenarioGroupIdLength; ++_j) {_o.BeforehandScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BeforehandScenarioGroupId(_j), key) : this.BeforehandScenarioGroupId(_j));}
    _o.MainBannerImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MainBannerImagePath, key) : this.MainBannerImagePath;
    _o.MainBgImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MainBgImagePath, key) : this.MainBgImagePath;
    _o.ShiftTriggerStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ShiftTriggerStageId, key) : this.ShiftTriggerStageId;
    _o.ShiftMainBgImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ShiftMainBgImagePath, key) : this.ShiftMainBgImagePath;
    _o.MinigameLobbyPrefabName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MinigameLobbyPrefabName, key) : this.MinigameLobbyPrefabName;
    _o.MinigameVictoryPrefabName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MinigameVictoryPrefabName, key) : this.MinigameVictoryPrefabName;
    _o.MinigameMissionBgPrefabName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MinigameMissionBgPrefabName, key) : this.MinigameMissionBgPrefabName;
    _o.MinigameMissionBgImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MinigameMissionBgImagePath, key) : this.MinigameMissionBgImagePath;
    _o.CardBgImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CardBgImagePath, key) : this.CardBgImagePath;
    _o.EventAssist = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.EventAssist, key) : this.EventAssist;
    _o.EventContentReleaseType = TableEncryptionService.UseEncryption ? (Japan.EventContentReleaseType)TableEncryptionService.Convert((int)this.EventContentReleaseType, key) : this.EventContentReleaseType;
    _o.EventContentStageRewardIdPermanent = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentStageRewardIdPermanent, key) : this.EventContentStageRewardIdPermanent;
    _o.RewardTagPermanent = TableEncryptionService.UseEncryption ? (Japan.RewardTag)TableEncryptionService.Convert((int)this.RewardTagPermanent, key) : this.RewardTagPermanent;
    _o.MiniEventShortCutScenarioModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MiniEventShortCutScenarioModeId, key) : this.MiniEventShortCutScenarioModeId;
    _o.ScenarioContentCollectionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ScenarioContentCollectionGroupId, key) : this.ScenarioContentCollectionGroupId;
  }
  public static Offset<Japan.EventContentSeasonExcel> Pack(FlatBufferBuilder builder, EventContentSeasonExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentSeasonExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentSeason");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _OriginalEventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OriginalEventContentId, key) : _o.OriginalEventContentId;
		var _IsReturn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsReturn, key) : _o.IsReturn;
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Name, key) : _o.Name));
		var _EventContentType = TableEncryptionService.UseEncryption ? (Japan.EventContentType)TableEncryptionService.Convert((int)_o.EventContentType, key) : _o.EventContentType;
		var _OpenConditionContent = TableEncryptionService.UseEncryption ? (Japan.OpenConditionContent)TableEncryptionService.Convert((int)_o.OpenConditionContent, key) : _o.OpenConditionContent;
		var _EventDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.EventDisplay, key) : _o.EventDisplay;
		var _IconOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.IconOrder, key) : _o.IconOrder;
		var _SubEventType = TableEncryptionService.UseEncryption ? (Japan.SubEventType)TableEncryptionService.Convert((int)_o.SubEventType, key) : _o.SubEventType;
		var _SubEvent = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.SubEvent, key) : _o.SubEvent;
		var _EventItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventItemId, key) : _o.EventItemId;
		var _MainEventId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MainEventId, key) : _o.MainEventId;
		var _EventChangeOpenCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventChangeOpenCondition, key) : _o.EventChangeOpenCondition;
    var _BeforehandExposedTime = _o.BeforehandExposedTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BeforehandExposedTime, key) : _o.BeforehandExposedTime));
    var _EventContentOpenTime = _o.EventContentOpenTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EventContentOpenTime, key) : _o.EventContentOpenTime));
    var _EventContentCloseNoteTime = _o.EventContentCloseNoteTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EventContentCloseNoteTime, key) : _o.EventContentCloseNoteTime));
    var _EventContentCloseTime = _o.EventContentCloseTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EventContentCloseTime, key) : _o.EventContentCloseTime));
    var _ExtensionTime = _o.ExtensionTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ExtensionTime, key) : _o.ExtensionTime));
    var _MainIconParcelPath = _o.MainIconParcelPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MainIconParcelPath, key) : _o.MainIconParcelPath));
    var _SubIconParcelPath = _o.SubIconParcelPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SubIconParcelPath, key) : _o.SubIconParcelPath));
    var _BeforehandBgImagePath = _o.BeforehandBgImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BeforehandBgImagePath, key) : _o.BeforehandBgImagePath));
		var _MinigamePrologScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MinigamePrologScenarioGroupId, key) : _o.MinigamePrologScenarioGroupId;
    var _BeforehandScenarioGroupId = default(VectorOffset);
    if (_o.BeforehandScenarioGroupId != null) {
      var __BeforehandScenarioGroupId = _o.BeforehandScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _BeforehandScenarioGroupId = CreateBeforehandScenarioGroupIdVector(builder, __BeforehandScenarioGroupId);
    }
    var _MainBannerImagePath = _o.MainBannerImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MainBannerImagePath, key) : _o.MainBannerImagePath));
    var _MainBgImagePath = _o.MainBgImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MainBgImagePath, key) : _o.MainBgImagePath));
		var _ShiftTriggerStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ShiftTriggerStageId, key) : _o.ShiftTriggerStageId;
    var _ShiftMainBgImagePath = _o.ShiftMainBgImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ShiftMainBgImagePath, key) : _o.ShiftMainBgImagePath));
    var _MinigameLobbyPrefabName = _o.MinigameLobbyPrefabName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MinigameLobbyPrefabName, key) : _o.MinigameLobbyPrefabName));
    var _MinigameVictoryPrefabName = _o.MinigameVictoryPrefabName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MinigameVictoryPrefabName, key) : _o.MinigameVictoryPrefabName));
    var _MinigameMissionBgPrefabName = _o.MinigameMissionBgPrefabName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MinigameMissionBgPrefabName, key) : _o.MinigameMissionBgPrefabName));
    var _MinigameMissionBgImagePath = _o.MinigameMissionBgImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MinigameMissionBgImagePath, key) : _o.MinigameMissionBgImagePath));
    var _CardBgImagePath = _o.CardBgImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CardBgImagePath, key) : _o.CardBgImagePath));
		var _EventAssist = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.EventAssist, key) : _o.EventAssist;
		var _EventContentReleaseType = TableEncryptionService.UseEncryption ? (Japan.EventContentReleaseType)TableEncryptionService.Convert((int)_o.EventContentReleaseType, key) : _o.EventContentReleaseType;
		var _EventContentStageRewardIdPermanent = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentStageRewardIdPermanent, key) : _o.EventContentStageRewardIdPermanent;
		var _RewardTagPermanent = TableEncryptionService.UseEncryption ? (Japan.RewardTag)TableEncryptionService.Convert((int)_o.RewardTagPermanent, key) : _o.RewardTagPermanent;
		var _MiniEventShortCutScenarioModeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MiniEventShortCutScenarioModeId, key) : _o.MiniEventShortCutScenarioModeId;
		var _ScenarioContentCollectionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ScenarioContentCollectionGroupId, key) : _o.ScenarioContentCollectionGroupId;
    return CreateEventContentSeasonExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _OriginalEventContentId : _o.OriginalEventContentId,
      TableEncryptionService.UseEncryption ? _IsReturn : _o.IsReturn,
      _Name,
      TableEncryptionService.UseEncryption ? _EventContentType : _o.EventContentType,
      TableEncryptionService.UseEncryption ? _OpenConditionContent : _o.OpenConditionContent,
      TableEncryptionService.UseEncryption ? _EventDisplay : _o.EventDisplay,
      TableEncryptionService.UseEncryption ? _IconOrder : _o.IconOrder,
      TableEncryptionService.UseEncryption ? _SubEventType : _o.SubEventType,
      TableEncryptionService.UseEncryption ? _SubEvent : _o.SubEvent,
      TableEncryptionService.UseEncryption ? _EventItemId : _o.EventItemId,
      TableEncryptionService.UseEncryption ? _MainEventId : _o.MainEventId,
      TableEncryptionService.UseEncryption ? _EventChangeOpenCondition : _o.EventChangeOpenCondition,
      _BeforehandExposedTime,
      _EventContentOpenTime,
      _EventContentCloseNoteTime,
      _EventContentCloseTime,
      _ExtensionTime,
      _MainIconParcelPath,
      _SubIconParcelPath,
      _BeforehandBgImagePath,
      TableEncryptionService.UseEncryption ? _MinigamePrologScenarioGroupId : _o.MinigamePrologScenarioGroupId,
      _BeforehandScenarioGroupId,
      _MainBannerImagePath,
      _MainBgImagePath,
      TableEncryptionService.UseEncryption ? _ShiftTriggerStageId : _o.ShiftTriggerStageId,
      _ShiftMainBgImagePath,
      _MinigameLobbyPrefabName,
      _MinigameVictoryPrefabName,
      _MinigameMissionBgPrefabName,
      _MinigameMissionBgImagePath,
      _CardBgImagePath,
      TableEncryptionService.UseEncryption ? _EventAssist : _o.EventAssist,
      TableEncryptionService.UseEncryption ? _EventContentReleaseType : _o.EventContentReleaseType,
      TableEncryptionService.UseEncryption ? _EventContentStageRewardIdPermanent : _o.EventContentStageRewardIdPermanent,
      TableEncryptionService.UseEncryption ? _RewardTagPermanent : _o.RewardTagPermanent,
      TableEncryptionService.UseEncryption ? _MiniEventShortCutScenarioModeId : _o.MiniEventShortCutScenarioModeId,
      TableEncryptionService.UseEncryption ? _ScenarioContentCollectionGroupId : _o.ScenarioContentCollectionGroupId);
  }
}

public class EventContentSeasonExcelT
{
  public long EventContentId { get; set; }
  public long OriginalEventContentId { get; set; }
  public bool IsReturn { get; set; }
  public string Name { get; set; }
  public Japan.EventContentType EventContentType { get; set; }
  public Japan.OpenConditionContent OpenConditionContent { get; set; }
  public bool EventDisplay { get; set; }
  public int IconOrder { get; set; }
  public Japan.SubEventType SubEventType { get; set; }
  public bool SubEvent { get; set; }
  public long EventItemId { get; set; }
  public long MainEventId { get; set; }
  public long EventChangeOpenCondition { get; set; }
  public string BeforehandExposedTime { get; set; }
  public string EventContentOpenTime { get; set; }
  public string EventContentCloseNoteTime { get; set; }
  public string EventContentCloseTime { get; set; }
  public string ExtensionTime { get; set; }
  public string MainIconParcelPath { get; set; }
  public string SubIconParcelPath { get; set; }
  public string BeforehandBgImagePath { get; set; }
  public long MinigamePrologScenarioGroupId { get; set; }
  public List<long> BeforehandScenarioGroupId { get; set; }
  public string MainBannerImagePath { get; set; }
  public string MainBgImagePath { get; set; }
  public long ShiftTriggerStageId { get; set; }
  public string ShiftMainBgImagePath { get; set; }
  public string MinigameLobbyPrefabName { get; set; }
  public string MinigameVictoryPrefabName { get; set; }
  public string MinigameMissionBgPrefabName { get; set; }
  public string MinigameMissionBgImagePath { get; set; }
  public string CardBgImagePath { get; set; }
  public bool EventAssist { get; set; }
  public Japan.EventContentReleaseType EventContentReleaseType { get; set; }
  public long EventContentStageRewardIdPermanent { get; set; }
  public Japan.RewardTag RewardTagPermanent { get; set; }
  public long MiniEventShortCutScenarioModeId { get; set; }
  public long ScenarioContentCollectionGroupId { get; set; }

  public EventContentSeasonExcelT() {
    this.EventContentId = 0;
    this.OriginalEventContentId = 0;
    this.IsReturn = false;
    this.Name = null;
    this.EventContentType = Japan.EventContentType.Stage;
    this.OpenConditionContent = Japan.OpenConditionContent.Shop;
    this.EventDisplay = false;
    this.IconOrder = 0;
    this.SubEventType = Japan.SubEventType.None;
    this.SubEvent = false;
    this.EventItemId = 0;
    this.MainEventId = 0;
    this.EventChangeOpenCondition = 0;
    this.BeforehandExposedTime = null;
    this.EventContentOpenTime = null;
    this.EventContentCloseNoteTime = null;
    this.EventContentCloseTime = null;
    this.ExtensionTime = null;
    this.MainIconParcelPath = null;
    this.SubIconParcelPath = null;
    this.BeforehandBgImagePath = null;
    this.MinigamePrologScenarioGroupId = 0;
    this.BeforehandScenarioGroupId = null;
    this.MainBannerImagePath = null;
    this.MainBgImagePath = null;
    this.ShiftTriggerStageId = 0;
    this.ShiftMainBgImagePath = null;
    this.MinigameLobbyPrefabName = null;
    this.MinigameVictoryPrefabName = null;
    this.MinigameMissionBgPrefabName = null;
    this.MinigameMissionBgImagePath = null;
    this.CardBgImagePath = null;
    this.EventAssist = false;
    this.EventContentReleaseType = Japan.EventContentReleaseType.None;
    this.EventContentStageRewardIdPermanent = 0;
    this.RewardTagPermanent = Japan.RewardTag.Default;
    this.MiniEventShortCutScenarioModeId = 0;
    this.ScenarioContentCollectionGroupId = 0;
  }
}


static public class EventContentSeasonExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*OriginalEventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*IsReturn*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyField(tablePos, 12 /*EventContentType*/, 4 /*Japan.EventContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*OpenConditionContent*/, 4 /*Japan.OpenConditionContent*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*EventDisplay*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*IconOrder*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*SubEventType*/, 4 /*Japan.SubEventType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*SubEvent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*EventItemId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*MainEventId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*EventChangeOpenCondition*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 30 /*BeforehandExposedTime*/, false)
      && verifier.VerifyString(tablePos, 32 /*EventContentOpenTime*/, false)
      && verifier.VerifyString(tablePos, 34 /*EventContentCloseNoteTime*/, false)
      && verifier.VerifyString(tablePos, 36 /*EventContentCloseTime*/, false)
      && verifier.VerifyString(tablePos, 38 /*ExtensionTime*/, false)
      && verifier.VerifyString(tablePos, 40 /*MainIconParcelPath*/, false)
      && verifier.VerifyString(tablePos, 42 /*SubIconParcelPath*/, false)
      && verifier.VerifyString(tablePos, 44 /*BeforehandBgImagePath*/, false)
      && verifier.VerifyField(tablePos, 46 /*MinigamePrologScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*BeforehandScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 50 /*MainBannerImagePath*/, false)
      && verifier.VerifyString(tablePos, 52 /*MainBgImagePath*/, false)
      && verifier.VerifyField(tablePos, 54 /*ShiftTriggerStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*ShiftMainBgImagePath*/, false)
      && verifier.VerifyString(tablePos, 58 /*MinigameLobbyPrefabName*/, false)
      && verifier.VerifyString(tablePos, 60 /*MinigameVictoryPrefabName*/, false)
      && verifier.VerifyString(tablePos, 62 /*MinigameMissionBgPrefabName*/, false)
      && verifier.VerifyString(tablePos, 64 /*MinigameMissionBgImagePath*/, false)
      && verifier.VerifyString(tablePos, 66 /*CardBgImagePath*/, false)
      && verifier.VerifyField(tablePos, 68 /*EventAssist*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*EventContentReleaseType*/, 4 /*Japan.EventContentReleaseType*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*EventContentStageRewardIdPermanent*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*RewardTagPermanent*/, 4 /*Japan.RewardTag*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*MiniEventShortCutScenarioModeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*ScenarioContentCollectionGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
