// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGSkillExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGSkillExcel GetRootAsMinigameCCGSkillExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGSkillExcel(_bb, new MinigameCCGSkillExcel()); }
  public static MinigameCCGSkillExcel GetRootAsMinigameCCGSkillExcel(ByteBuffer _bb, MinigameCCGSkillExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGSkillExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string SkillType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSkillTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSkillTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string DataLoadPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataLoadPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDataLoadPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDataLoadPathArray() { return __p.__vector_as_array<byte>(8); }
  public uint Name { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Description { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string SkillIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSkillIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSkillIconArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<Japan.MinigameCCGSkillExcel> CreateMinigameCCGSkillExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset SkillTypeOffset = default(StringOffset),
      StringOffset DataLoadPathOffset = default(StringOffset),
      uint Name = 0,
      uint Description = 0,
      StringOffset SkillIconOffset = default(StringOffset)) {
    builder.StartTable(6);
    MinigameCCGSkillExcel.AddId(builder, Id);
    MinigameCCGSkillExcel.AddSkillIcon(builder, SkillIconOffset);
    MinigameCCGSkillExcel.AddDescription(builder, Description);
    MinigameCCGSkillExcel.AddName(builder, Name);
    MinigameCCGSkillExcel.AddDataLoadPath(builder, DataLoadPathOffset);
    MinigameCCGSkillExcel.AddSkillType(builder, SkillTypeOffset);
    return MinigameCCGSkillExcel.EndMinigameCCGSkillExcel(builder);
  }

  public static void StartMinigameCCGSkillExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddSkillType(FlatBufferBuilder builder, StringOffset skillTypeOffset) { builder.AddOffset(1, skillTypeOffset.Value, 0); }
  public static void AddDataLoadPath(FlatBufferBuilder builder, StringOffset dataLoadPathOffset) { builder.AddOffset(2, dataLoadPathOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, uint name) { builder.AddUint(3, name, 0); }
  public static void AddDescription(FlatBufferBuilder builder, uint description) { builder.AddUint(4, description, 0); }
  public static void AddSkillIcon(FlatBufferBuilder builder, StringOffset skillIconOffset) { builder.AddOffset(5, skillIconOffset.Value, 0); }
  public static Offset<Japan.MinigameCCGSkillExcel> EndMinigameCCGSkillExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGSkillExcel>(o);
  }
  public MinigameCCGSkillExcelT UnPack() {
    var _o = new MinigameCCGSkillExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGSkillExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGSkill");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.SkillType = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SkillType, key) : this.SkillType;
    _o.DataLoadPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DataLoadPath, key) : this.DataLoadPath;
    _o.Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Name, key) : this.Name;
    _o.Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Description, key) : this.Description;
    _o.SkillIcon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SkillIcon, key) : this.SkillIcon;
  }
  public static Offset<Japan.MinigameCCGSkillExcel> Pack(FlatBufferBuilder builder, MinigameCCGSkillExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGSkillExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGSkill");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _SkillType = _o.SkillType == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SkillType, key) : _o.SkillType));
    var _DataLoadPath = _o.DataLoadPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DataLoadPath, key) : _o.DataLoadPath));
		var _Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Name, key) : _o.Name;
		var _Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Description, key) : _o.Description;
    var _SkillIcon = _o.SkillIcon == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SkillIcon, key) : _o.SkillIcon));
    return CreateMinigameCCGSkillExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _SkillType,
      _DataLoadPath,
      TableEncryptionService.UseEncryption ? _Name : _o.Name,
      TableEncryptionService.UseEncryption ? _Description : _o.Description,
      _SkillIcon);
  }
}

public class MinigameCCGSkillExcelT
{
  public long Id { get; set; }
  public string SkillType { get; set; }
  public string DataLoadPath { get; set; }
  public uint Name { get; set; }
  public uint Description { get; set; }
  public string SkillIcon { get; set; }

  public MinigameCCGSkillExcelT() {
    this.Id = 0;
    this.SkillType = null;
    this.DataLoadPath = null;
    this.Name = 0;
    this.Description = 0;
    this.SkillIcon = null;
  }
}


static public class MinigameCCGSkillExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*SkillType*/, false)
      && verifier.VerifyString(tablePos, 8 /*DataLoadPath*/, false)
      && verifier.VerifyField(tablePos, 10 /*Name*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Description*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*SkillIcon*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
