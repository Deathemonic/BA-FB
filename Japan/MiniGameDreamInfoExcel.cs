// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDreamInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameDreamInfoExcel GetRootAsMiniGameDreamInfoExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamInfoExcel(_bb, new MiniGameDreamInfoExcel()); }
  public static MiniGameDreamInfoExcel GetRootAsMiniGameDreamInfoExcel(ByteBuffer _bb, MiniGameDreamInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.DreamMakerMultiplierCondition DreamMakerMultiplierCondition { get { int o = __p.__offset(6); return o != 0 ? (Japan.DreamMakerMultiplierCondition)__p.bb.GetInt(o + __p.bb_pos) : Japan.DreamMakerMultiplierCondition.None; } }
  public long DreamMakerMultiplierConditionValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerMultiplierMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerDays { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerActionPoint { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType DreamMakerParcelType { get { int o = __p.__offset(16); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long DreamMakerParcelId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType DreamMakerDailyPointParcelType { get { int o = __p.__offset(20); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long DreamMakerDailyPointId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerParameterTransfer { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScheduleCostGoodsId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LobbyBGMChangeScenarioId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.MiniGameDreamInfoExcel> CreateMiniGameDreamInfoExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Japan.DreamMakerMultiplierCondition DreamMakerMultiplierCondition = Japan.DreamMakerMultiplierCondition.None,
      long DreamMakerMultiplierConditionValue = 0,
      long DreamMakerMultiplierMax = 0,
      long DreamMakerDays = 0,
      long DreamMakerActionPoint = 0,
      Japan.ParcelType DreamMakerParcelType = Japan.ParcelType.None,
      long DreamMakerParcelId = 0,
      Japan.ParcelType DreamMakerDailyPointParcelType = Japan.ParcelType.None,
      long DreamMakerDailyPointId = 0,
      long DreamMakerParameterTransfer = 0,
      long ScheduleCostGoodsId = 0,
      long LobbyBGMChangeScenarioId = 0) {
    builder.StartTable(13);
    MiniGameDreamInfoExcel.AddLobbyBGMChangeScenarioId(builder, LobbyBGMChangeScenarioId);
    MiniGameDreamInfoExcel.AddScheduleCostGoodsId(builder, ScheduleCostGoodsId);
    MiniGameDreamInfoExcel.AddDreamMakerParameterTransfer(builder, DreamMakerParameterTransfer);
    MiniGameDreamInfoExcel.AddDreamMakerDailyPointId(builder, DreamMakerDailyPointId);
    MiniGameDreamInfoExcel.AddDreamMakerParcelId(builder, DreamMakerParcelId);
    MiniGameDreamInfoExcel.AddDreamMakerActionPoint(builder, DreamMakerActionPoint);
    MiniGameDreamInfoExcel.AddDreamMakerDays(builder, DreamMakerDays);
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierMax(builder, DreamMakerMultiplierMax);
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierConditionValue(builder, DreamMakerMultiplierConditionValue);
    MiniGameDreamInfoExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamInfoExcel.AddDreamMakerDailyPointParcelType(builder, DreamMakerDailyPointParcelType);
    MiniGameDreamInfoExcel.AddDreamMakerParcelType(builder, DreamMakerParcelType);
    MiniGameDreamInfoExcel.AddDreamMakerMultiplierCondition(builder, DreamMakerMultiplierCondition);
    return MiniGameDreamInfoExcel.EndMiniGameDreamInfoExcel(builder);
  }

  public static void StartMiniGameDreamInfoExcel(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddDreamMakerMultiplierCondition(FlatBufferBuilder builder, Japan.DreamMakerMultiplierCondition dreamMakerMultiplierCondition) { builder.AddInt(1, (int)dreamMakerMultiplierCondition, 0); }
  public static void AddDreamMakerMultiplierConditionValue(FlatBufferBuilder builder, long dreamMakerMultiplierConditionValue) { builder.AddLong(2, dreamMakerMultiplierConditionValue, 0); }
  public static void AddDreamMakerMultiplierMax(FlatBufferBuilder builder, long dreamMakerMultiplierMax) { builder.AddLong(3, dreamMakerMultiplierMax, 0); }
  public static void AddDreamMakerDays(FlatBufferBuilder builder, long dreamMakerDays) { builder.AddLong(4, dreamMakerDays, 0); }
  public static void AddDreamMakerActionPoint(FlatBufferBuilder builder, long dreamMakerActionPoint) { builder.AddLong(5, dreamMakerActionPoint, 0); }
  public static void AddDreamMakerParcelType(FlatBufferBuilder builder, Japan.ParcelType dreamMakerParcelType) { builder.AddInt(6, (int)dreamMakerParcelType, 0); }
  public static void AddDreamMakerParcelId(FlatBufferBuilder builder, long dreamMakerParcelId) { builder.AddLong(7, dreamMakerParcelId, 0); }
  public static void AddDreamMakerDailyPointParcelType(FlatBufferBuilder builder, Japan.ParcelType dreamMakerDailyPointParcelType) { builder.AddInt(8, (int)dreamMakerDailyPointParcelType, 0); }
  public static void AddDreamMakerDailyPointId(FlatBufferBuilder builder, long dreamMakerDailyPointId) { builder.AddLong(9, dreamMakerDailyPointId, 0); }
  public static void AddDreamMakerParameterTransfer(FlatBufferBuilder builder, long dreamMakerParameterTransfer) { builder.AddLong(10, dreamMakerParameterTransfer, 0); }
  public static void AddScheduleCostGoodsId(FlatBufferBuilder builder, long scheduleCostGoodsId) { builder.AddLong(11, scheduleCostGoodsId, 0); }
  public static void AddLobbyBGMChangeScenarioId(FlatBufferBuilder builder, long lobbyBGMChangeScenarioId) { builder.AddLong(12, lobbyBGMChangeScenarioId, 0); }
  public static Offset<Japan.MiniGameDreamInfoExcel> EndMiniGameDreamInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MiniGameDreamInfoExcel>(o);
  }
  public MiniGameDreamInfoExcelT UnPack() {
    var _o = new MiniGameDreamInfoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDreamInfoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamInfo");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.DreamMakerMultiplierCondition = TableEncryptionService.UseEncryption ? (Japan.DreamMakerMultiplierCondition)TableEncryptionService.Convert((int)this.DreamMakerMultiplierCondition, key) : this.DreamMakerMultiplierCondition;
    _o.DreamMakerMultiplierConditionValue = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerMultiplierConditionValue, key) : this.DreamMakerMultiplierConditionValue;
    _o.DreamMakerMultiplierMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerMultiplierMax, key) : this.DreamMakerMultiplierMax;
    _o.DreamMakerDays = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerDays, key) : this.DreamMakerDays;
    _o.DreamMakerActionPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerActionPoint, key) : this.DreamMakerActionPoint;
    _o.DreamMakerParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.DreamMakerParcelType, key) : this.DreamMakerParcelType;
    _o.DreamMakerParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerParcelId, key) : this.DreamMakerParcelId;
    _o.DreamMakerDailyPointParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.DreamMakerDailyPointParcelType, key) : this.DreamMakerDailyPointParcelType;
    _o.DreamMakerDailyPointId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerDailyPointId, key) : this.DreamMakerDailyPointId;
    _o.DreamMakerParameterTransfer = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerParameterTransfer, key) : this.DreamMakerParameterTransfer;
    _o.ScheduleCostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ScheduleCostGoodsId, key) : this.ScheduleCostGoodsId;
    _o.LobbyBGMChangeScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LobbyBGMChangeScenarioId, key) : this.LobbyBGMChangeScenarioId;
  }
  public static Offset<Japan.MiniGameDreamInfoExcel> Pack(FlatBufferBuilder builder, MiniGameDreamInfoExcelT _o) {
    if (_o == null) return default(Offset<Japan.MiniGameDreamInfoExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamInfo");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _DreamMakerMultiplierCondition = TableEncryptionService.UseEncryption ? (Japan.DreamMakerMultiplierCondition)TableEncryptionService.Convert((int)_o.DreamMakerMultiplierCondition, key) : _o.DreamMakerMultiplierCondition;
		var _DreamMakerMultiplierConditionValue = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerMultiplierConditionValue, key) : _o.DreamMakerMultiplierConditionValue;
		var _DreamMakerMultiplierMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerMultiplierMax, key) : _o.DreamMakerMultiplierMax;
		var _DreamMakerDays = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerDays, key) : _o.DreamMakerDays;
		var _DreamMakerActionPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerActionPoint, key) : _o.DreamMakerActionPoint;
		var _DreamMakerParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.DreamMakerParcelType, key) : _o.DreamMakerParcelType;
		var _DreamMakerParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerParcelId, key) : _o.DreamMakerParcelId;
		var _DreamMakerDailyPointParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.DreamMakerDailyPointParcelType, key) : _o.DreamMakerDailyPointParcelType;
		var _DreamMakerDailyPointId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerDailyPointId, key) : _o.DreamMakerDailyPointId;
		var _DreamMakerParameterTransfer = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerParameterTransfer, key) : _o.DreamMakerParameterTransfer;
		var _ScheduleCostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ScheduleCostGoodsId, key) : _o.ScheduleCostGoodsId;
		var _LobbyBGMChangeScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LobbyBGMChangeScenarioId, key) : _o.LobbyBGMChangeScenarioId;
    return CreateMiniGameDreamInfoExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _DreamMakerMultiplierCondition : _o.DreamMakerMultiplierCondition,
      TableEncryptionService.UseEncryption ? _DreamMakerMultiplierConditionValue : _o.DreamMakerMultiplierConditionValue,
      TableEncryptionService.UseEncryption ? _DreamMakerMultiplierMax : _o.DreamMakerMultiplierMax,
      TableEncryptionService.UseEncryption ? _DreamMakerDays : _o.DreamMakerDays,
      TableEncryptionService.UseEncryption ? _DreamMakerActionPoint : _o.DreamMakerActionPoint,
      TableEncryptionService.UseEncryption ? _DreamMakerParcelType : _o.DreamMakerParcelType,
      TableEncryptionService.UseEncryption ? _DreamMakerParcelId : _o.DreamMakerParcelId,
      TableEncryptionService.UseEncryption ? _DreamMakerDailyPointParcelType : _o.DreamMakerDailyPointParcelType,
      TableEncryptionService.UseEncryption ? _DreamMakerDailyPointId : _o.DreamMakerDailyPointId,
      TableEncryptionService.UseEncryption ? _DreamMakerParameterTransfer : _o.DreamMakerParameterTransfer,
      TableEncryptionService.UseEncryption ? _ScheduleCostGoodsId : _o.ScheduleCostGoodsId,
      TableEncryptionService.UseEncryption ? _LobbyBGMChangeScenarioId : _o.LobbyBGMChangeScenarioId);
  }
}

public class MiniGameDreamInfoExcelT
{
  public long EventContentId { get; set; }
  public Japan.DreamMakerMultiplierCondition DreamMakerMultiplierCondition { get; set; }
  public long DreamMakerMultiplierConditionValue { get; set; }
  public long DreamMakerMultiplierMax { get; set; }
  public long DreamMakerDays { get; set; }
  public long DreamMakerActionPoint { get; set; }
  public Japan.ParcelType DreamMakerParcelType { get; set; }
  public long DreamMakerParcelId { get; set; }
  public Japan.ParcelType DreamMakerDailyPointParcelType { get; set; }
  public long DreamMakerDailyPointId { get; set; }
  public long DreamMakerParameterTransfer { get; set; }
  public long ScheduleCostGoodsId { get; set; }
  public long LobbyBGMChangeScenarioId { get; set; }

  public MiniGameDreamInfoExcelT() {
    this.EventContentId = 0;
    this.DreamMakerMultiplierCondition = Japan.DreamMakerMultiplierCondition.None;
    this.DreamMakerMultiplierConditionValue = 0;
    this.DreamMakerMultiplierMax = 0;
    this.DreamMakerDays = 0;
    this.DreamMakerActionPoint = 0;
    this.DreamMakerParcelType = Japan.ParcelType.None;
    this.DreamMakerParcelId = 0;
    this.DreamMakerDailyPointParcelType = Japan.ParcelType.None;
    this.DreamMakerDailyPointId = 0;
    this.DreamMakerParameterTransfer = 0;
    this.ScheduleCostGoodsId = 0;
    this.LobbyBGMChangeScenarioId = 0;
  }
}


static public class MiniGameDreamInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DreamMakerMultiplierCondition*/, 4 /*Japan.DreamMakerMultiplierCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DreamMakerMultiplierConditionValue*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*DreamMakerMultiplierMax*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*DreamMakerDays*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*DreamMakerActionPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*DreamMakerParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*DreamMakerParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*DreamMakerDailyPointParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*DreamMakerDailyPointId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*DreamMakerParameterTransfer*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*ScheduleCostGoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*LobbyBGMChangeScenarioId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
