// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentSpineDisplayPeriodExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentSpineDisplayPeriodExcel GetRootAsEventContentSpineDisplayPeriodExcel(ByteBuffer _bb) { return GetRootAsEventContentSpineDisplayPeriodExcel(_bb, new EventContentSpineDisplayPeriodExcel()); }
  public static EventContentSpineDisplayPeriodExcel GetRootAsEventContentSpineDisplayPeriodExcel(ByteBuffer _bb, EventContentSpineDisplayPeriodExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentSpineDisplayPeriodExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.DialogCategory DialogCategory { get { int o = __p.__offset(6); return o != 0 ? (Japan.DialogCategory)__p.bb.GetInt(o + __p.bb_pos) : Japan.DialogCategory.Cafe; } }
  public long CostumeUniqueId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShowPeriodFrom { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowPeriodFromBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetShowPeriodFromBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetShowPeriodFromArray() { return __p.__vector_as_array<byte>(10); }
  public string ShowPeriodTo { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowPeriodToBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetShowPeriodToBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetShowPeriodToArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Japan.EventContentSpineDisplayPeriodExcel> CreateEventContentSpineDisplayPeriodExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Japan.DialogCategory DialogCategory = Japan.DialogCategory.Cafe,
      long CostumeUniqueId = 0,
      StringOffset ShowPeriodFromOffset = default(StringOffset),
      StringOffset ShowPeriodToOffset = default(StringOffset)) {
    builder.StartTable(5);
    EventContentSpineDisplayPeriodExcel.AddCostumeUniqueId(builder, CostumeUniqueId);
    EventContentSpineDisplayPeriodExcel.AddEventContentId(builder, EventContentId);
    EventContentSpineDisplayPeriodExcel.AddShowPeriodTo(builder, ShowPeriodToOffset);
    EventContentSpineDisplayPeriodExcel.AddShowPeriodFrom(builder, ShowPeriodFromOffset);
    EventContentSpineDisplayPeriodExcel.AddDialogCategory(builder, DialogCategory);
    return EventContentSpineDisplayPeriodExcel.EndEventContentSpineDisplayPeriodExcel(builder);
  }

  public static void StartEventContentSpineDisplayPeriodExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddDialogCategory(FlatBufferBuilder builder, Japan.DialogCategory dialogCategory) { builder.AddInt(1, (int)dialogCategory, 0); }
  public static void AddCostumeUniqueId(FlatBufferBuilder builder, long costumeUniqueId) { builder.AddLong(2, costumeUniqueId, 0); }
  public static void AddShowPeriodFrom(FlatBufferBuilder builder, StringOffset showPeriodFromOffset) { builder.AddOffset(3, showPeriodFromOffset.Value, 0); }
  public static void AddShowPeriodTo(FlatBufferBuilder builder, StringOffset showPeriodToOffset) { builder.AddOffset(4, showPeriodToOffset.Value, 0); }
  public static Offset<Japan.EventContentSpineDisplayPeriodExcel> EndEventContentSpineDisplayPeriodExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EventContentSpineDisplayPeriodExcel>(o);
  }
  public EventContentSpineDisplayPeriodExcelT UnPack() {
    var _o = new EventContentSpineDisplayPeriodExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentSpineDisplayPeriodExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentSpineDisplayPeriod");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.DialogCategory = TableEncryptionService.UseEncryption ? (Japan.DialogCategory)TableEncryptionService.Convert((int)this.DialogCategory, key) : this.DialogCategory;
    _o.CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostumeUniqueId, key) : this.CostumeUniqueId;
    _o.ShowPeriodFrom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ShowPeriodFrom, key) : this.ShowPeriodFrom;
    _o.ShowPeriodTo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ShowPeriodTo, key) : this.ShowPeriodTo;
  }
  public static Offset<Japan.EventContentSpineDisplayPeriodExcel> Pack(FlatBufferBuilder builder, EventContentSpineDisplayPeriodExcelT _o) {
    if (_o == null) return default(Offset<Japan.EventContentSpineDisplayPeriodExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentSpineDisplayPeriod");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _DialogCategory = TableEncryptionService.UseEncryption ? (Japan.DialogCategory)TableEncryptionService.Convert((int)_o.DialogCategory, key) : _o.DialogCategory;
		var _CostumeUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostumeUniqueId, key) : _o.CostumeUniqueId;
    var _ShowPeriodFrom = _o.ShowPeriodFrom == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ShowPeriodFrom, key) : _o.ShowPeriodFrom));
    var _ShowPeriodTo = _o.ShowPeriodTo == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ShowPeriodTo, key) : _o.ShowPeriodTo));
    return CreateEventContentSpineDisplayPeriodExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _DialogCategory : _o.DialogCategory,
      TableEncryptionService.UseEncryption ? _CostumeUniqueId : _o.CostumeUniqueId,
      _ShowPeriodFrom,
      _ShowPeriodTo);
  }
}

public class EventContentSpineDisplayPeriodExcelT
{
  public long EventContentId { get; set; }
  public Japan.DialogCategory DialogCategory { get; set; }
  public long CostumeUniqueId { get; set; }
  public string ShowPeriodFrom { get; set; }
  public string ShowPeriodTo { get; set; }

  public EventContentSpineDisplayPeriodExcelT() {
    this.EventContentId = 0;
    this.DialogCategory = Japan.DialogCategory.Cafe;
    this.CostumeUniqueId = 0;
    this.ShowPeriodFrom = null;
    this.ShowPeriodTo = null;
  }
}


static public class EventContentSpineDisplayPeriodExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*DialogCategory*/, 4 /*Japan.DialogCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CostumeUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*ShowPeriodFrom*/, false)
      && verifier.VerifyString(tablePos, 12 /*ShowPeriodTo*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
