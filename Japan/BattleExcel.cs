// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattleExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattleExcel GetRootAsBattleExcel(ByteBuffer _bb) { return GetRootAsBattleExcel(_bb, new BattleExcel()); }
  public static BattleExcel GetRootAsBattleExcel(ByteBuffer _bb, BattleExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattleExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Japan.UnitType None(int j) { int o = __p.__offset(4); return o != 0 ? (Japan.UnitType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.UnitType)0; }
  public int NoneLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.UnitType> GetNoneBytes() { return __p.__vector_as_span<Japan.UnitType>(4, 4); }
#else
  public ArraySegment<byte>? GetNoneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public Japan.UnitType[] GetNoneArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.UnitType[] a = new Japan.UnitType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.UnitType)__p.bb.GetInt(p + i * 4); } return a; }
  public Japan.AttackType Single { get { int o = __p.__offset(6); return o != 0 ? (Japan.AttackType)__p.bb.GetInt(o + __p.bb_pos) : Japan.AttackType.Single; } }
  public Japan.ProjectileType Guided { get { int o = __p.__offset(8); return o != 0 ? (Japan.ProjectileType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ProjectileType.Guided; } }
  public Japan.DamageFontColor Blue { get { int o = __p.__offset(10); return o != 0 ? (Japan.DamageFontColor)__p.bb.GetInt(o + __p.bb_pos) : Japan.DamageFontColor.Blue; } }
  public Japan.EmoticonEvent CoverEnter { get { int o = __p.__offset(12); return o != 0 ? (Japan.EmoticonEvent)__p.bb.GetInt(o + __p.bb_pos) : Japan.EmoticonEvent.CoverEnter; } }
  public Japan.BulletType Normal(int j) { int o = __p.__offset(14); return o != 0 ? (Japan.BulletType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.BulletType)0; }
  public int NormalLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.BulletType> GetNormalBytes() { return __p.__vector_as_span<Japan.BulletType>(14, 4); }
#else
  public ArraySegment<byte>? GetNormalBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public Japan.BulletType[] GetNormalArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.BulletType[] a = new Japan.BulletType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.BulletType)__p.bb.GetInt(p + i * 4); } return a; }
  public Japan.ActionType Crush { get { int o = __p.__offset(16); return o != 0 ? (Japan.ActionType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ActionType.Crush; } }
  public Japan.BuffOverlap Able { get { int o = __p.__offset(18); return o != 0 ? (Japan.BuffOverlap)__p.bb.GetInt(o + __p.bb_pos) : Japan.BuffOverlap.Able; } }
  public Japan.ReArrangeTargetType AllySelf { get { int o = __p.__offset(20); return o != 0 ? (Japan.ReArrangeTargetType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ReArrangeTargetType.AllySelf; } }
  public Japan.ArmorType LightArmor { get { int o = __p.__offset(22); return o != 0 ? (Japan.ArmorType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ArmorType.LightArmor; } }
  public Japan.EntityMaterialType Wood { get { int o = __p.__offset(24); return o != 0 ? (Japan.EntityMaterialType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EntityMaterialType.Wood; } }
  public Japan.CoverMotionType All { get { int o = __p.__offset(26); return o != 0 ? (Japan.CoverMotionType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CoverMotionType.All; } }
  public Japan.TargetSortBy DISTANCE { get { int o = __p.__offset(28); return o != 0 ? (Japan.TargetSortBy)__p.bb.GetInt(o + __p.bb_pos) : Japan.TargetSortBy.DISTANCE; } }
  public Japan.PositioningType CloseToObstacle { get { int o = __p.__offset(30); return o != 0 ? (Japan.PositioningType)__p.bb.GetInt(o + __p.bb_pos) : Japan.PositioningType.CloseToObstacle; } }
  public Japan.FormationLine Students { get { int o = __p.__offset(32); return o != 0 ? (Japan.FormationLine)__p.bb.GetInt(o + __p.bb_pos) : Japan.FormationLine.Students; } }
  public Japan.ExternalBTNodeType Sequence { get { int o = __p.__offset(34); return o != 0 ? (Japan.ExternalBTNodeType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ExternalBTNodeType.Sequence; } }
  public Japan.ExternalBehavior UseNextExSkill { get { int o = __p.__offset(36); return o != 0 ? (Japan.ExternalBehavior)__p.bb.GetInt(o + __p.bb_pos) : Japan.ExternalBehavior.UseNextExSkill; } }
  public Japan.TacticEntityType Student { get { int o = __p.__offset(38); return o != 0 ? (Japan.TacticEntityType)__p.bb.GetInt(o + __p.bb_pos) : Japan.TacticEntityType.None; } }
  public Japan.EngageType SearchAndMove { get { int o = __p.__offset(40); return o != 0 ? (Japan.EngageType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EngageType.SearchAndMove; } }
  public Japan.HitEffectPosition Position { get { int o = __p.__offset(42); return o != 0 ? (Japan.HitEffectPosition)__p.bb.GetInt(o + __p.bb_pos) : Japan.HitEffectPosition.Position; } }
  public Japan.StageTopography Street { get { int o = __p.__offset(44); return o != 0 ? (Japan.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : Japan.StageTopography.Street; } }
  public Japan.TerrainAdaptationStat D { get { int o = __p.__offset(46); return o != 0 ? (Japan.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : Japan.TerrainAdaptationStat.D; } }
  public Japan.ObstacleClass MAIN { get { int o = __p.__offset(48); return o != 0 ? (Japan.ObstacleClass)__p.bb.GetInt(o + __p.bb_pos) : Japan.ObstacleClass.MAIN; } }
  public Japan.ObstacleDestroyType Remain { get { int o = __p.__offset(50); return o != 0 ? (Japan.ObstacleDestroyType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ObstacleDestroyType.Remain; } }
  public Japan.ObstacleHeightType Low { get { int o = __p.__offset(52); return o != 0 ? (Japan.ObstacleHeightType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ObstacleHeightType.Low; } }
  public Japan.DamageAttribute Resist { get { int o = __p.__offset(54); return o != 0 ? (Japan.DamageAttribute)__p.bb.GetInt(o + __p.bb_pos) : Japan.DamageAttribute.Resist; } }
  public Japan.SkillPriorityCheckTarget Ally { get { int o = __p.__offset(56); return o != 0 ? (Japan.SkillPriorityCheckTarget)__p.bb.GetInt(o + __p.bb_pos) : Japan.SkillPriorityCheckTarget.Ally; } }
  public Japan.StageType Main { get { int o = __p.__offset(58); return o != 0 ? (Japan.StageType)__p.bb.GetInt(o + __p.bb_pos) : Japan.StageType.Main; } }
  public Japan.KnockbackDirection TargetToCaster { get { int o = __p.__offset(60); return o != 0 ? (Japan.KnockbackDirection)__p.bb.GetInt(o + __p.bb_pos) : Japan.KnockbackDirection.TargetToCaster; } }
  public Japan.EndCondition Duration { get { int o = __p.__offset(62); return o != 0 ? (Japan.EndCondition)__p.bb.GetInt(o + __p.bb_pos) : Japan.EndCondition.Duration; } }
  public Japan.ArenaSimulatorServer Preset { get { int o = __p.__offset(64); return o != 0 ? (Japan.ArenaSimulatorServer)__p.bb.GetInt(o + __p.bb_pos) : Japan.ArenaSimulatorServer.Preset; } }
  public Japan.BattleCalculationStat FinalDamage { get { int o = __p.__offset(66); return o != 0 ? (Japan.BattleCalculationStat)__p.bb.GetInt(o + __p.bb_pos) : Japan.BattleCalculationStat.FinalDamage; } }
  public Japan.StatTransType SpecialTransStat { get { int o = __p.__offset(68); return o != 0 ? (Japan.StatTransType)__p.bb.GetInt(o + __p.bb_pos) : Japan.StatTransType.SpecialTransStat; } }
  public Japan.BattleDialogType Talk { get { int o = __p.__offset(70); return o != 0 ? (Japan.BattleDialogType)__p.bb.GetInt(o + __p.bb_pos) : Japan.BattleDialogType.Talk; } }

  public static Offset<Japan.BattleExcel> CreateBattleExcel(FlatBufferBuilder builder,
      VectorOffset noneOffset = default(VectorOffset),
      Japan.AttackType Single = Japan.AttackType.Single,
      Japan.ProjectileType Guided = Japan.ProjectileType.Guided,
      Japan.DamageFontColor Blue = Japan.DamageFontColor.Blue,
      Japan.EmoticonEvent CoverEnter = Japan.EmoticonEvent.CoverEnter,
      VectorOffset normalOffset = default(VectorOffset),
      Japan.ActionType Crush = Japan.ActionType.Crush,
      Japan.BuffOverlap Able = Japan.BuffOverlap.Able,
      Japan.ReArrangeTargetType AllySelf = Japan.ReArrangeTargetType.AllySelf,
      Japan.ArmorType LightArmor = Japan.ArmorType.LightArmor,
      Japan.EntityMaterialType Wood = Japan.EntityMaterialType.Wood,
      Japan.CoverMotionType All = Japan.CoverMotionType.All,
      Japan.TargetSortBy DISTANCE = Japan.TargetSortBy.DISTANCE,
      Japan.PositioningType CloseToObstacle = Japan.PositioningType.CloseToObstacle,
      Japan.FormationLine Students = Japan.FormationLine.Students,
      Japan.ExternalBTNodeType Sequence = Japan.ExternalBTNodeType.Sequence,
      Japan.ExternalBehavior UseNextExSkill = Japan.ExternalBehavior.UseNextExSkill,
      Japan.TacticEntityType Student = Japan.TacticEntityType.None,
      Japan.EngageType SearchAndMove = Japan.EngageType.SearchAndMove,
      Japan.HitEffectPosition Position = Japan.HitEffectPosition.Position,
      Japan.StageTopography Street = Japan.StageTopography.Street,
      Japan.TerrainAdaptationStat D = Japan.TerrainAdaptationStat.D,
      Japan.ObstacleClass MAIN = Japan.ObstacleClass.MAIN,
      Japan.ObstacleDestroyType Remain = Japan.ObstacleDestroyType.Remain,
      Japan.ObstacleHeightType Low = Japan.ObstacleHeightType.Low,
      Japan.DamageAttribute Resist = Japan.DamageAttribute.Resist,
      Japan.SkillPriorityCheckTarget Ally = Japan.SkillPriorityCheckTarget.Ally,
      Japan.StageType Main = Japan.StageType.Main,
      Japan.KnockbackDirection TargetToCaster = Japan.KnockbackDirection.TargetToCaster,
      Japan.EndCondition Duration = Japan.EndCondition.Duration,
      Japan.ArenaSimulatorServer Preset = Japan.ArenaSimulatorServer.Preset,
      Japan.BattleCalculationStat FinalDamage = Japan.BattleCalculationStat.FinalDamage,
      Japan.StatTransType SpecialTransStat = Japan.StatTransType.SpecialTransStat,
      Japan.BattleDialogType Talk = Japan.BattleDialogType.Talk) {
    builder.StartTable(34);
    BattleExcel.AddTalk(builder, Talk);
    BattleExcel.AddSpecialTransStat(builder, SpecialTransStat);
    BattleExcel.AddFinalDamage(builder, FinalDamage);
    BattleExcel.AddPreset(builder, Preset);
    BattleExcel.AddDuration(builder, Duration);
    BattleExcel.AddTargetToCaster(builder, TargetToCaster);
    BattleExcel.AddMain(builder, Main);
    BattleExcel.AddAlly(builder, Ally);
    BattleExcel.AddResist(builder, Resist);
    BattleExcel.AddLow(builder, Low);
    BattleExcel.AddRemain(builder, Remain);
    BattleExcel.AddMAIN(builder, MAIN);
    BattleExcel.AddD(builder, D);
    BattleExcel.AddStreet(builder, Street);
    BattleExcel.AddPosition(builder, Position);
    BattleExcel.AddSearchAndMove(builder, SearchAndMove);
    BattleExcel.AddStudent(builder, Student);
    BattleExcel.AddUseNextExSkill(builder, UseNextExSkill);
    BattleExcel.AddSequence(builder, Sequence);
    BattleExcel.AddStudents(builder, Students);
    BattleExcel.AddCloseToObstacle(builder, CloseToObstacle);
    BattleExcel.AddDISTANCE(builder, DISTANCE);
    BattleExcel.AddAll(builder, All);
    BattleExcel.AddWood(builder, Wood);
    BattleExcel.AddLightArmor(builder, LightArmor);
    BattleExcel.AddAllySelf(builder, AllySelf);
    BattleExcel.AddAble(builder, Able);
    BattleExcel.AddCrush(builder, Crush);
    BattleExcel.AddNormal(builder, normalOffset);
    BattleExcel.AddCoverEnter(builder, CoverEnter);
    BattleExcel.AddBlue(builder, Blue);
    BattleExcel.AddGuided(builder, Guided);
    BattleExcel.AddSingle(builder, Single);
    BattleExcel.AddNone(builder, noneOffset);
    return BattleExcel.EndBattleExcel(builder);
  }

  public static void StartBattleExcel(FlatBufferBuilder builder) { builder.StartTable(34); }
  public static void AddNone(FlatBufferBuilder builder, VectorOffset noneOffset) { builder.AddOffset(0, noneOffset.Value, 0); }
  public static VectorOffset CreateNoneVector(FlatBufferBuilder builder, Japan.UnitType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, Japan.UnitType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.UnitType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.UnitType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSingle(FlatBufferBuilder builder, Japan.AttackType single) { builder.AddInt(1, (int)single, 0); }
  public static void AddGuided(FlatBufferBuilder builder, Japan.ProjectileType guided) { builder.AddInt(2, (int)guided, 0); }
  public static void AddBlue(FlatBufferBuilder builder, Japan.DamageFontColor blue) { builder.AddInt(3, (int)blue, 0); }
  public static void AddCoverEnter(FlatBufferBuilder builder, Japan.EmoticonEvent coverEnter) { builder.AddInt(4, (int)coverEnter, 0); }
  public static void AddNormal(FlatBufferBuilder builder, VectorOffset normalOffset) { builder.AddOffset(5, normalOffset.Value, 0); }
  public static VectorOffset CreateNormalVector(FlatBufferBuilder builder, Japan.BulletType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNormalVectorBlock(FlatBufferBuilder builder, Japan.BulletType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.BulletType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.BulletType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNormalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCrush(FlatBufferBuilder builder, Japan.ActionType crush) { builder.AddInt(6, (int)crush, 0); }
  public static void AddAble(FlatBufferBuilder builder, Japan.BuffOverlap able) { builder.AddInt(7, (int)able, 0); }
  public static void AddAllySelf(FlatBufferBuilder builder, Japan.ReArrangeTargetType allySelf) { builder.AddInt(8, (int)allySelf, 0); }
  public static void AddLightArmor(FlatBufferBuilder builder, Japan.ArmorType lightArmor) { builder.AddInt(9, (int)lightArmor, 0); }
  public static void AddWood(FlatBufferBuilder builder, Japan.EntityMaterialType wood) { builder.AddInt(10, (int)wood, 0); }
  public static void AddAll(FlatBufferBuilder builder, Japan.CoverMotionType all) { builder.AddInt(11, (int)all, 0); }
  public static void AddDISTANCE(FlatBufferBuilder builder, Japan.TargetSortBy dISTANCE) { builder.AddInt(12, (int)dISTANCE, 0); }
  public static void AddCloseToObstacle(FlatBufferBuilder builder, Japan.PositioningType closeToObstacle) { builder.AddInt(13, (int)closeToObstacle, 0); }
  public static void AddStudents(FlatBufferBuilder builder, Japan.FormationLine students) { builder.AddInt(14, (int)students, 0); }
  public static void AddSequence(FlatBufferBuilder builder, Japan.ExternalBTNodeType sequence) { builder.AddInt(15, (int)sequence, 0); }
  public static void AddUseNextExSkill(FlatBufferBuilder builder, Japan.ExternalBehavior useNextExSkill) { builder.AddInt(16, (int)useNextExSkill, 0); }
  public static void AddStudent(FlatBufferBuilder builder, Japan.TacticEntityType student) { builder.AddInt(17, (int)student, 0); }
  public static void AddSearchAndMove(FlatBufferBuilder builder, Japan.EngageType searchAndMove) { builder.AddInt(18, (int)searchAndMove, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Japan.HitEffectPosition position) { builder.AddInt(19, (int)position, 0); }
  public static void AddStreet(FlatBufferBuilder builder, Japan.StageTopography street) { builder.AddInt(20, (int)street, 0); }
  public static void AddD(FlatBufferBuilder builder, Japan.TerrainAdaptationStat d) { builder.AddInt(21, (int)d, 0); }
  public static void AddMAIN(FlatBufferBuilder builder, Japan.ObstacleClass mAIN) { builder.AddInt(22, (int)mAIN, 0); }
  public static void AddRemain(FlatBufferBuilder builder, Japan.ObstacleDestroyType remain) { builder.AddInt(23, (int)remain, 0); }
  public static void AddLow(FlatBufferBuilder builder, Japan.ObstacleHeightType low) { builder.AddInt(24, (int)low, 0); }
  public static void AddResist(FlatBufferBuilder builder, Japan.DamageAttribute resist) { builder.AddInt(25, (int)resist, 0); }
  public static void AddAlly(FlatBufferBuilder builder, Japan.SkillPriorityCheckTarget ally) { builder.AddInt(26, (int)ally, 0); }
  public static void AddMain(FlatBufferBuilder builder, Japan.StageType main) { builder.AddInt(27, (int)main, 0); }
  public static void AddTargetToCaster(FlatBufferBuilder builder, Japan.KnockbackDirection targetToCaster) { builder.AddInt(28, (int)targetToCaster, 0); }
  public static void AddDuration(FlatBufferBuilder builder, Japan.EndCondition duration) { builder.AddInt(29, (int)duration, 0); }
  public static void AddPreset(FlatBufferBuilder builder, Japan.ArenaSimulatorServer preset) { builder.AddInt(30, (int)preset, 0); }
  public static void AddFinalDamage(FlatBufferBuilder builder, Japan.BattleCalculationStat finalDamage) { builder.AddInt(31, (int)finalDamage, 0); }
  public static void AddSpecialTransStat(FlatBufferBuilder builder, Japan.StatTransType specialTransStat) { builder.AddInt(32, (int)specialTransStat, 0); }
  public static void AddTalk(FlatBufferBuilder builder, Japan.BattleDialogType talk) { builder.AddInt(33, (int)talk, 0); }
  public static Offset<Japan.BattleExcel> EndBattleExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.BattleExcel>(o);
  }
  public BattleExcelT UnPack() {
    var _o = new BattleExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattleExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Battle");
    _o.None = new List<Japan.UnitType>();
    for (var _j = 0; _j < this.NoneLength; ++_j) {_o.None.Add(TableEncryptionService.UseEncryption ? (Japan.UnitType)TableEncryptionService.Convert((int)this.None(_j), key) : this.None(_j));}
    _o.Single = TableEncryptionService.UseEncryption ? (Japan.AttackType)TableEncryptionService.Convert((int)this.Single, key) : this.Single;
    _o.Guided = TableEncryptionService.UseEncryption ? (Japan.ProjectileType)TableEncryptionService.Convert((int)this.Guided, key) : this.Guided;
    _o.Blue = TableEncryptionService.UseEncryption ? (Japan.DamageFontColor)TableEncryptionService.Convert((int)this.Blue, key) : this.Blue;
    _o.CoverEnter = TableEncryptionService.UseEncryption ? (Japan.EmoticonEvent)TableEncryptionService.Convert((int)this.CoverEnter, key) : this.CoverEnter;
    _o.Normal = new List<Japan.BulletType>();
    for (var _j = 0; _j < this.NormalLength; ++_j) {_o.Normal.Add(TableEncryptionService.UseEncryption ? (Japan.BulletType)TableEncryptionService.Convert((int)this.Normal(_j), key) : this.Normal(_j));}
    _o.Crush = TableEncryptionService.UseEncryption ? (Japan.ActionType)TableEncryptionService.Convert((int)this.Crush, key) : this.Crush;
    _o.Able = TableEncryptionService.UseEncryption ? (Japan.BuffOverlap)TableEncryptionService.Convert((int)this.Able, key) : this.Able;
    _o.AllySelf = TableEncryptionService.UseEncryption ? (Japan.ReArrangeTargetType)TableEncryptionService.Convert((int)this.AllySelf, key) : this.AllySelf;
    _o.LightArmor = TableEncryptionService.UseEncryption ? (Japan.ArmorType)TableEncryptionService.Convert((int)this.LightArmor, key) : this.LightArmor;
    _o.Wood = TableEncryptionService.UseEncryption ? (Japan.EntityMaterialType)TableEncryptionService.Convert((int)this.Wood, key) : this.Wood;
    _o.All = TableEncryptionService.UseEncryption ? (Japan.CoverMotionType)TableEncryptionService.Convert((int)this.All, key) : this.All;
    _o.DISTANCE = TableEncryptionService.UseEncryption ? (Japan.TargetSortBy)TableEncryptionService.Convert((int)this.DISTANCE, key) : this.DISTANCE;
    _o.CloseToObstacle = TableEncryptionService.UseEncryption ? (Japan.PositioningType)TableEncryptionService.Convert((int)this.CloseToObstacle, key) : this.CloseToObstacle;
    _o.Students = TableEncryptionService.UseEncryption ? (Japan.FormationLine)TableEncryptionService.Convert((int)this.Students, key) : this.Students;
    _o.Sequence = TableEncryptionService.UseEncryption ? (Japan.ExternalBTNodeType)TableEncryptionService.Convert((int)this.Sequence, key) : this.Sequence;
    _o.UseNextExSkill = TableEncryptionService.UseEncryption ? (Japan.ExternalBehavior)TableEncryptionService.Convert((int)this.UseNextExSkill, key) : this.UseNextExSkill;
    _o.Student = TableEncryptionService.UseEncryption ? (Japan.TacticEntityType)TableEncryptionService.Convert((int)this.Student, key) : this.Student;
    _o.SearchAndMove = TableEncryptionService.UseEncryption ? (Japan.EngageType)TableEncryptionService.Convert((int)this.SearchAndMove, key) : this.SearchAndMove;
    _o.Position = TableEncryptionService.UseEncryption ? (Japan.HitEffectPosition)TableEncryptionService.Convert((int)this.Position, key) : this.Position;
    _o.Street = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)this.Street, key) : this.Street;
    _o.D = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)this.D, key) : this.D;
    _o.MAIN = TableEncryptionService.UseEncryption ? (Japan.ObstacleClass)TableEncryptionService.Convert((int)this.MAIN, key) : this.MAIN;
    _o.Remain = TableEncryptionService.UseEncryption ? (Japan.ObstacleDestroyType)TableEncryptionService.Convert((int)this.Remain, key) : this.Remain;
    _o.Low = TableEncryptionService.UseEncryption ? (Japan.ObstacleHeightType)TableEncryptionService.Convert((int)this.Low, key) : this.Low;
    _o.Resist = TableEncryptionService.UseEncryption ? (Japan.DamageAttribute)TableEncryptionService.Convert((int)this.Resist, key) : this.Resist;
    _o.Ally = TableEncryptionService.UseEncryption ? (Japan.SkillPriorityCheckTarget)TableEncryptionService.Convert((int)this.Ally, key) : this.Ally;
    _o.Main = TableEncryptionService.UseEncryption ? (Japan.StageType)TableEncryptionService.Convert((int)this.Main, key) : this.Main;
    _o.TargetToCaster = TableEncryptionService.UseEncryption ? (Japan.KnockbackDirection)TableEncryptionService.Convert((int)this.TargetToCaster, key) : this.TargetToCaster;
    _o.Duration = TableEncryptionService.UseEncryption ? (Japan.EndCondition)TableEncryptionService.Convert((int)this.Duration, key) : this.Duration;
    _o.Preset = TableEncryptionService.UseEncryption ? (Japan.ArenaSimulatorServer)TableEncryptionService.Convert((int)this.Preset, key) : this.Preset;
    _o.FinalDamage = TableEncryptionService.UseEncryption ? (Japan.BattleCalculationStat)TableEncryptionService.Convert((int)this.FinalDamage, key) : this.FinalDamage;
    _o.SpecialTransStat = TableEncryptionService.UseEncryption ? (Japan.StatTransType)TableEncryptionService.Convert((int)this.SpecialTransStat, key) : this.SpecialTransStat;
    _o.Talk = TableEncryptionService.UseEncryption ? (Japan.BattleDialogType)TableEncryptionService.Convert((int)this.Talk, key) : this.Talk;
  }
  public static Offset<Japan.BattleExcel> Pack(FlatBufferBuilder builder, BattleExcelT _o) {
    if (_o == null) return default(Offset<Japan.BattleExcel>);
		byte[] key = TableEncryptionService.CreateKey("Battle");
    var _none = default(VectorOffset);
    if (_o.None != null) {
      var __none = _o.None.Select(x => TableEncryptionService.UseEncryption ? (Japan.UnitType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _none = CreateNoneVector(builder, __none);
    }
		var _Single = TableEncryptionService.UseEncryption ? (Japan.AttackType)TableEncryptionService.Convert((int)_o.Single, key) : _o.Single;
		var _Guided = TableEncryptionService.UseEncryption ? (Japan.ProjectileType)TableEncryptionService.Convert((int)_o.Guided, key) : _o.Guided;
		var _Blue = TableEncryptionService.UseEncryption ? (Japan.DamageFontColor)TableEncryptionService.Convert((int)_o.Blue, key) : _o.Blue;
		var _CoverEnter = TableEncryptionService.UseEncryption ? (Japan.EmoticonEvent)TableEncryptionService.Convert((int)_o.CoverEnter, key) : _o.CoverEnter;
    var _normal = default(VectorOffset);
    if (_o.Normal != null) {
      var __normal = _o.Normal.Select(x => TableEncryptionService.UseEncryption ? (Japan.BulletType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _normal = CreateNormalVector(builder, __normal);
    }
		var _Crush = TableEncryptionService.UseEncryption ? (Japan.ActionType)TableEncryptionService.Convert((int)_o.Crush, key) : _o.Crush;
		var _Able = TableEncryptionService.UseEncryption ? (Japan.BuffOverlap)TableEncryptionService.Convert((int)_o.Able, key) : _o.Able;
		var _AllySelf = TableEncryptionService.UseEncryption ? (Japan.ReArrangeTargetType)TableEncryptionService.Convert((int)_o.AllySelf, key) : _o.AllySelf;
		var _LightArmor = TableEncryptionService.UseEncryption ? (Japan.ArmorType)TableEncryptionService.Convert((int)_o.LightArmor, key) : _o.LightArmor;
		var _Wood = TableEncryptionService.UseEncryption ? (Japan.EntityMaterialType)TableEncryptionService.Convert((int)_o.Wood, key) : _o.Wood;
		var _All = TableEncryptionService.UseEncryption ? (Japan.CoverMotionType)TableEncryptionService.Convert((int)_o.All, key) : _o.All;
		var _DISTANCE = TableEncryptionService.UseEncryption ? (Japan.TargetSortBy)TableEncryptionService.Convert((int)_o.DISTANCE, key) : _o.DISTANCE;
		var _CloseToObstacle = TableEncryptionService.UseEncryption ? (Japan.PositioningType)TableEncryptionService.Convert((int)_o.CloseToObstacle, key) : _o.CloseToObstacle;
		var _Students = TableEncryptionService.UseEncryption ? (Japan.FormationLine)TableEncryptionService.Convert((int)_o.Students, key) : _o.Students;
		var _Sequence = TableEncryptionService.UseEncryption ? (Japan.ExternalBTNodeType)TableEncryptionService.Convert((int)_o.Sequence, key) : _o.Sequence;
		var _UseNextExSkill = TableEncryptionService.UseEncryption ? (Japan.ExternalBehavior)TableEncryptionService.Convert((int)_o.UseNextExSkill, key) : _o.UseNextExSkill;
		var _Student = TableEncryptionService.UseEncryption ? (Japan.TacticEntityType)TableEncryptionService.Convert((int)_o.Student, key) : _o.Student;
		var _SearchAndMove = TableEncryptionService.UseEncryption ? (Japan.EngageType)TableEncryptionService.Convert((int)_o.SearchAndMove, key) : _o.SearchAndMove;
		var _Position = TableEncryptionService.UseEncryption ? (Japan.HitEffectPosition)TableEncryptionService.Convert((int)_o.Position, key) : _o.Position;
		var _Street = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)_o.Street, key) : _o.Street;
		var _D = TableEncryptionService.UseEncryption ? (Japan.TerrainAdaptationStat)TableEncryptionService.Convert((int)_o.D, key) : _o.D;
		var _MAIN = TableEncryptionService.UseEncryption ? (Japan.ObstacleClass)TableEncryptionService.Convert((int)_o.MAIN, key) : _o.MAIN;
		var _Remain = TableEncryptionService.UseEncryption ? (Japan.ObstacleDestroyType)TableEncryptionService.Convert((int)_o.Remain, key) : _o.Remain;
		var _Low = TableEncryptionService.UseEncryption ? (Japan.ObstacleHeightType)TableEncryptionService.Convert((int)_o.Low, key) : _o.Low;
		var _Resist = TableEncryptionService.UseEncryption ? (Japan.DamageAttribute)TableEncryptionService.Convert((int)_o.Resist, key) : _o.Resist;
		var _Ally = TableEncryptionService.UseEncryption ? (Japan.SkillPriorityCheckTarget)TableEncryptionService.Convert((int)_o.Ally, key) : _o.Ally;
		var _Main = TableEncryptionService.UseEncryption ? (Japan.StageType)TableEncryptionService.Convert((int)_o.Main, key) : _o.Main;
		var _TargetToCaster = TableEncryptionService.UseEncryption ? (Japan.KnockbackDirection)TableEncryptionService.Convert((int)_o.TargetToCaster, key) : _o.TargetToCaster;
		var _Duration = TableEncryptionService.UseEncryption ? (Japan.EndCondition)TableEncryptionService.Convert((int)_o.Duration, key) : _o.Duration;
		var _Preset = TableEncryptionService.UseEncryption ? (Japan.ArenaSimulatorServer)TableEncryptionService.Convert((int)_o.Preset, key) : _o.Preset;
		var _FinalDamage = TableEncryptionService.UseEncryption ? (Japan.BattleCalculationStat)TableEncryptionService.Convert((int)_o.FinalDamage, key) : _o.FinalDamage;
		var _SpecialTransStat = TableEncryptionService.UseEncryption ? (Japan.StatTransType)TableEncryptionService.Convert((int)_o.SpecialTransStat, key) : _o.SpecialTransStat;
		var _Talk = TableEncryptionService.UseEncryption ? (Japan.BattleDialogType)TableEncryptionService.Convert((int)_o.Talk, key) : _o.Talk;
    return CreateBattleExcel(
      builder,
      _none,
      TableEncryptionService.UseEncryption ? _Single : _o.Single,
      TableEncryptionService.UseEncryption ? _Guided : _o.Guided,
      TableEncryptionService.UseEncryption ? _Blue : _o.Blue,
      TableEncryptionService.UseEncryption ? _CoverEnter : _o.CoverEnter,
      _normal,
      TableEncryptionService.UseEncryption ? _Crush : _o.Crush,
      TableEncryptionService.UseEncryption ? _Able : _o.Able,
      TableEncryptionService.UseEncryption ? _AllySelf : _o.AllySelf,
      TableEncryptionService.UseEncryption ? _LightArmor : _o.LightArmor,
      TableEncryptionService.UseEncryption ? _Wood : _o.Wood,
      TableEncryptionService.UseEncryption ? _All : _o.All,
      TableEncryptionService.UseEncryption ? _DISTANCE : _o.DISTANCE,
      TableEncryptionService.UseEncryption ? _CloseToObstacle : _o.CloseToObstacle,
      TableEncryptionService.UseEncryption ? _Students : _o.Students,
      TableEncryptionService.UseEncryption ? _Sequence : _o.Sequence,
      TableEncryptionService.UseEncryption ? _UseNextExSkill : _o.UseNextExSkill,
      TableEncryptionService.UseEncryption ? _Student : _o.Student,
      TableEncryptionService.UseEncryption ? _SearchAndMove : _o.SearchAndMove,
      TableEncryptionService.UseEncryption ? _Position : _o.Position,
      TableEncryptionService.UseEncryption ? _Street : _o.Street,
      TableEncryptionService.UseEncryption ? _D : _o.D,
      TableEncryptionService.UseEncryption ? _MAIN : _o.MAIN,
      TableEncryptionService.UseEncryption ? _Remain : _o.Remain,
      TableEncryptionService.UseEncryption ? _Low : _o.Low,
      TableEncryptionService.UseEncryption ? _Resist : _o.Resist,
      TableEncryptionService.UseEncryption ? _Ally : _o.Ally,
      TableEncryptionService.UseEncryption ? _Main : _o.Main,
      TableEncryptionService.UseEncryption ? _TargetToCaster : _o.TargetToCaster,
      TableEncryptionService.UseEncryption ? _Duration : _o.Duration,
      TableEncryptionService.UseEncryption ? _Preset : _o.Preset,
      TableEncryptionService.UseEncryption ? _FinalDamage : _o.FinalDamage,
      TableEncryptionService.UseEncryption ? _SpecialTransStat : _o.SpecialTransStat,
      TableEncryptionService.UseEncryption ? _Talk : _o.Talk);
  }
}

public class BattleExcelT
{
  public List<Japan.UnitType> None { get; set; }
  public Japan.AttackType Single { get; set; }
  public Japan.ProjectileType Guided { get; set; }
  public Japan.DamageFontColor Blue { get; set; }
  public Japan.EmoticonEvent CoverEnter { get; set; }
  public List<Japan.BulletType> Normal { get; set; }
  public Japan.ActionType Crush { get; set; }
  public Japan.BuffOverlap Able { get; set; }
  public Japan.ReArrangeTargetType AllySelf { get; set; }
  public Japan.ArmorType LightArmor { get; set; }
  public Japan.EntityMaterialType Wood { get; set; }
  public Japan.CoverMotionType All { get; set; }
  public Japan.TargetSortBy DISTANCE { get; set; }
  public Japan.PositioningType CloseToObstacle { get; set; }
  public Japan.FormationLine Students { get; set; }
  public Japan.ExternalBTNodeType Sequence { get; set; }
  public Japan.ExternalBehavior UseNextExSkill { get; set; }
  public Japan.TacticEntityType Student { get; set; }
  public Japan.EngageType SearchAndMove { get; set; }
  public Japan.HitEffectPosition Position { get; set; }
  public Japan.StageTopography Street { get; set; }
  public Japan.TerrainAdaptationStat D { get; set; }
  public Japan.ObstacleClass MAIN { get; set; }
  public Japan.ObstacleDestroyType Remain { get; set; }
  public Japan.ObstacleHeightType Low { get; set; }
  public Japan.DamageAttribute Resist { get; set; }
  public Japan.SkillPriorityCheckTarget Ally { get; set; }
  public Japan.StageType Main { get; set; }
  public Japan.KnockbackDirection TargetToCaster { get; set; }
  public Japan.EndCondition Duration { get; set; }
  public Japan.ArenaSimulatorServer Preset { get; set; }
  public Japan.BattleCalculationStat FinalDamage { get; set; }
  public Japan.StatTransType SpecialTransStat { get; set; }
  public Japan.BattleDialogType Talk { get; set; }

  public BattleExcelT() {
    this.None = null;
    this.Single = Japan.AttackType.Single;
    this.Guided = Japan.ProjectileType.Guided;
    this.Blue = Japan.DamageFontColor.Blue;
    this.CoverEnter = Japan.EmoticonEvent.CoverEnter;
    this.Normal = null;
    this.Crush = Japan.ActionType.Crush;
    this.Able = Japan.BuffOverlap.Able;
    this.AllySelf = Japan.ReArrangeTargetType.AllySelf;
    this.LightArmor = Japan.ArmorType.LightArmor;
    this.Wood = Japan.EntityMaterialType.Wood;
    this.All = Japan.CoverMotionType.All;
    this.DISTANCE = Japan.TargetSortBy.DISTANCE;
    this.CloseToObstacle = Japan.PositioningType.CloseToObstacle;
    this.Students = Japan.FormationLine.Students;
    this.Sequence = Japan.ExternalBTNodeType.Sequence;
    this.UseNextExSkill = Japan.ExternalBehavior.UseNextExSkill;
    this.Student = Japan.TacticEntityType.None;
    this.SearchAndMove = Japan.EngageType.SearchAndMove;
    this.Position = Japan.HitEffectPosition.Position;
    this.Street = Japan.StageTopography.Street;
    this.D = Japan.TerrainAdaptationStat.D;
    this.MAIN = Japan.ObstacleClass.MAIN;
    this.Remain = Japan.ObstacleDestroyType.Remain;
    this.Low = Japan.ObstacleHeightType.Low;
    this.Resist = Japan.DamageAttribute.Resist;
    this.Ally = Japan.SkillPriorityCheckTarget.Ally;
    this.Main = Japan.StageType.Main;
    this.TargetToCaster = Japan.KnockbackDirection.TargetToCaster;
    this.Duration = Japan.EndCondition.Duration;
    this.Preset = Japan.ArenaSimulatorServer.Preset;
    this.FinalDamage = Japan.BattleCalculationStat.FinalDamage;
    this.SpecialTransStat = Japan.StatTransType.SpecialTransStat;
    this.Talk = Japan.BattleDialogType.Talk;
  }
}


static public class BattleExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*None*/, 4 /*Japan.UnitType*/, false)
      && verifier.VerifyField(tablePos, 6 /*Single*/, 4 /*Japan.AttackType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Guided*/, 4 /*Japan.ProjectileType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Blue*/, 4 /*Japan.DamageFontColor*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CoverEnter*/, 4 /*Japan.EmoticonEvent*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Normal*/, 4 /*Japan.BulletType*/, false)
      && verifier.VerifyField(tablePos, 16 /*Crush*/, 4 /*Japan.ActionType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Able*/, 4 /*Japan.BuffOverlap*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*AllySelf*/, 4 /*Japan.ReArrangeTargetType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*LightArmor*/, 4 /*Japan.ArmorType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Wood*/, 4 /*Japan.EntityMaterialType*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*All*/, 4 /*Japan.CoverMotionType*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*DISTANCE*/, 4 /*Japan.TargetSortBy*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*CloseToObstacle*/, 4 /*Japan.PositioningType*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*Students*/, 4 /*Japan.FormationLine*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*Sequence*/, 4 /*Japan.ExternalBTNodeType*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*UseNextExSkill*/, 4 /*Japan.ExternalBehavior*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*Student*/, 4 /*Japan.TacticEntityType*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*SearchAndMove*/, 4 /*Japan.EngageType*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*Position*/, 4 /*Japan.HitEffectPosition*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*Street*/, 4 /*Japan.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*D*/, 4 /*Japan.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*MAIN*/, 4 /*Japan.ObstacleClass*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*Remain*/, 4 /*Japan.ObstacleDestroyType*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*Low*/, 4 /*Japan.ObstacleHeightType*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*Resist*/, 4 /*Japan.DamageAttribute*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*Ally*/, 4 /*Japan.SkillPriorityCheckTarget*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*Main*/, 4 /*Japan.StageType*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*TargetToCaster*/, 4 /*Japan.KnockbackDirection*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*Duration*/, 4 /*Japan.EndCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*Preset*/, 4 /*Japan.ArenaSimulatorServer*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*FinalDamage*/, 4 /*Japan.BattleCalculationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*SpecialTransStat*/, 4 /*Japan.StatTransType*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*Talk*/, 4 /*Japan.BattleDialogType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
