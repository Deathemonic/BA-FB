// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct KnockBackExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static KnockBackExcel GetRootAsKnockBackExcel(ByteBuffer _bb) { return GetRootAsKnockBackExcel(_bb, new KnockBackExcel()); }
  public static KnockBackExcel GetRootAsKnockBackExcel(ByteBuffer _bb, KnockBackExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KnockBackExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float Dist { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Speed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Japan.KnockBackExcel> CreateKnockBackExcel(FlatBufferBuilder builder,
      long Index = 0,
      float Dist = 0.0f,
      float Speed = 0.0f) {
    builder.StartTable(3);
    KnockBackExcel.AddIndex(builder, Index);
    KnockBackExcel.AddSpeed(builder, Speed);
    KnockBackExcel.AddDist(builder, Dist);
    return KnockBackExcel.EndKnockBackExcel(builder);
  }

  public static void StartKnockBackExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddIndex(FlatBufferBuilder builder, long index) { builder.AddLong(0, index, 0); }
  public static void AddDist(FlatBufferBuilder builder, float dist) { builder.AddFloat(1, dist, 0.0f); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(2, speed, 0.0f); }
  public static Offset<Japan.KnockBackExcel> EndKnockBackExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.KnockBackExcel>(o);
  }
  public KnockBackExcelT UnPack() {
    var _o = new KnockBackExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KnockBackExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("KnockBack");
    _o.Index = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Index, key) : this.Index;
    _o.Dist = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.Dist, key) : this.Dist;
    _o.Speed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.Speed, key) : this.Speed;
  }
  public static Offset<Japan.KnockBackExcel> Pack(FlatBufferBuilder builder, KnockBackExcelT _o) {
    if (_o == null) return default(Offset<Japan.KnockBackExcel>);
		byte[] key = TableEncryptionService.CreateKey("KnockBack");
		var _Index = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Index, key) : _o.Index;
		var _Dist = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.Dist, key) : _o.Dist;
		var _Speed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.Speed, key) : _o.Speed;
    return CreateKnockBackExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Index : _o.Index,
      TableEncryptionService.UseEncryption ? _Dist : _o.Dist,
      TableEncryptionService.UseEncryption ? _Speed : _o.Speed);
  }
}

public class KnockBackExcelT
{
  public long Index { get; set; }
  public float Dist { get; set; }
  public float Speed { get; set; }

  public KnockBackExcelT() {
    this.Index = 0;
    this.Dist = 0.0f;
    this.Speed = 0.0f;
  }
}


static public class KnockBackExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Dist*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Speed*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
