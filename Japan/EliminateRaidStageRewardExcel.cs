// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EliminateRaidStageRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EliminateRaidStageRewardExcel GetRootAsEliminateRaidStageRewardExcel(ByteBuffer _bb) { return GetRootAsEliminateRaidStageRewardExcel(_bb, new EliminateRaidStageRewardExcel()); }
  public static EliminateRaidStageRewardExcel GetRootAsEliminateRaidStageRewardExcel(ByteBuffer _bb, EliminateRaidStageRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EliminateRaidStageRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsClearStageRewardHideInfo { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long ClearStageRewardProb { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType ClearStageRewardParcelType { get { int o = __p.__offset(10); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long ClearStageRewardParcelUniqueID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearStageRewardAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.EliminateRaidStageRewardExcel> CreateEliminateRaidStageRewardExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      bool IsClearStageRewardHideInfo = false,
      long ClearStageRewardProb = 0,
      Japan.ParcelType ClearStageRewardParcelType = Japan.ParcelType.None,
      long ClearStageRewardParcelUniqueID = 0,
      long ClearStageRewardAmount = 0) {
    builder.StartTable(6);
    EliminateRaidStageRewardExcel.AddClearStageRewardAmount(builder, ClearStageRewardAmount);
    EliminateRaidStageRewardExcel.AddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID);
    EliminateRaidStageRewardExcel.AddClearStageRewardProb(builder, ClearStageRewardProb);
    EliminateRaidStageRewardExcel.AddGroupId(builder, GroupId);
    EliminateRaidStageRewardExcel.AddClearStageRewardParcelType(builder, ClearStageRewardParcelType);
    EliminateRaidStageRewardExcel.AddIsClearStageRewardHideInfo(builder, IsClearStageRewardHideInfo);
    return EliminateRaidStageRewardExcel.EndEliminateRaidStageRewardExcel(builder);
  }

  public static void StartEliminateRaidStageRewardExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddIsClearStageRewardHideInfo(FlatBufferBuilder builder, bool isClearStageRewardHideInfo) { builder.AddBool(1, isClearStageRewardHideInfo, false); }
  public static void AddClearStageRewardProb(FlatBufferBuilder builder, long clearStageRewardProb) { builder.AddLong(2, clearStageRewardProb, 0); }
  public static void AddClearStageRewardParcelType(FlatBufferBuilder builder, Japan.ParcelType clearStageRewardParcelType) { builder.AddInt(3, (int)clearStageRewardParcelType, 0); }
  public static void AddClearStageRewardParcelUniqueID(FlatBufferBuilder builder, long clearStageRewardParcelUniqueID) { builder.AddLong(4, clearStageRewardParcelUniqueID, 0); }
  public static void AddClearStageRewardAmount(FlatBufferBuilder builder, long clearStageRewardAmount) { builder.AddLong(5, clearStageRewardAmount, 0); }
  public static Offset<Japan.EliminateRaidStageRewardExcel> EndEliminateRaidStageRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.EliminateRaidStageRewardExcel>(o);
  }
  public EliminateRaidStageRewardExcelT UnPack() {
    var _o = new EliminateRaidStageRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EliminateRaidStageRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EliminateRaidStageReward");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.IsClearStageRewardHideInfo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsClearStageRewardHideInfo, key) : this.IsClearStageRewardHideInfo;
    _o.ClearStageRewardProb = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearStageRewardProb, key) : this.ClearStageRewardProb;
    _o.ClearStageRewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.ClearStageRewardParcelType, key) : this.ClearStageRewardParcelType;
    _o.ClearStageRewardParcelUniqueID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearStageRewardParcelUniqueID, key) : this.ClearStageRewardParcelUniqueID;
    _o.ClearStageRewardAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearStageRewardAmount, key) : this.ClearStageRewardAmount;
  }
  public static Offset<Japan.EliminateRaidStageRewardExcel> Pack(FlatBufferBuilder builder, EliminateRaidStageRewardExcelT _o) {
    if (_o == null) return default(Offset<Japan.EliminateRaidStageRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("EliminateRaidStageReward");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _IsClearStageRewardHideInfo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsClearStageRewardHideInfo, key) : _o.IsClearStageRewardHideInfo;
		var _ClearStageRewardProb = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearStageRewardProb, key) : _o.ClearStageRewardProb;
		var _ClearStageRewardParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.ClearStageRewardParcelType, key) : _o.ClearStageRewardParcelType;
		var _ClearStageRewardParcelUniqueID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearStageRewardParcelUniqueID, key) : _o.ClearStageRewardParcelUniqueID;
		var _ClearStageRewardAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearStageRewardAmount, key) : _o.ClearStageRewardAmount;
    return CreateEliminateRaidStageRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _IsClearStageRewardHideInfo : _o.IsClearStageRewardHideInfo,
      TableEncryptionService.UseEncryption ? _ClearStageRewardProb : _o.ClearStageRewardProb,
      TableEncryptionService.UseEncryption ? _ClearStageRewardParcelType : _o.ClearStageRewardParcelType,
      TableEncryptionService.UseEncryption ? _ClearStageRewardParcelUniqueID : _o.ClearStageRewardParcelUniqueID,
      TableEncryptionService.UseEncryption ? _ClearStageRewardAmount : _o.ClearStageRewardAmount);
  }
}

public class EliminateRaidStageRewardExcelT
{
  public long GroupId { get; set; }
  public bool IsClearStageRewardHideInfo { get; set; }
  public long ClearStageRewardProb { get; set; }
  public Japan.ParcelType ClearStageRewardParcelType { get; set; }
  public long ClearStageRewardParcelUniqueID { get; set; }
  public long ClearStageRewardAmount { get; set; }

  public EliminateRaidStageRewardExcelT() {
    this.GroupId = 0;
    this.IsClearStageRewardHideInfo = false;
    this.ClearStageRewardProb = 0;
    this.ClearStageRewardParcelType = Japan.ParcelType.None;
    this.ClearStageRewardParcelUniqueID = 0;
    this.ClearStageRewardAmount = 0;
  }
}


static public class EliminateRaidStageRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*IsClearStageRewardHideInfo*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*ClearStageRewardProb*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*ClearStageRewardParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ClearStageRewardParcelUniqueID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*ClearStageRewardAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
