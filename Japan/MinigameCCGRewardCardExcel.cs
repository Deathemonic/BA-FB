// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGRewardCardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGRewardCardExcel GetRootAsMinigameCCGRewardCardExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGRewardCardExcel(_bb, new MinigameCCGRewardCardExcel()); }
  public static MinigameCCGRewardCardExcel GetRootAsMinigameCCGRewardCardExcel(ByteBuffer _bb, MinigameCCGRewardCardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGRewardCardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.CCGEntityType EntityType { get { int o = __p.__offset(8); return o != 0 ? (Japan.CCGEntityType)__p.bb.GetInt(o + __p.bb_pos) : Japan.CCGEntityType.None; } }
  public long CardId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CardRarity { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Japan.MinigameCCGRewardCardExcel> CreateMinigameCCGRewardCardExcel(FlatBufferBuilder builder,
      long Id = 0,
      long GroupId = 0,
      Japan.CCGEntityType EntityType = Japan.CCGEntityType.None,
      long CardId = 0,
      int CardRarity = 0) {
    builder.StartTable(5);
    MinigameCCGRewardCardExcel.AddCardId(builder, CardId);
    MinigameCCGRewardCardExcel.AddGroupId(builder, GroupId);
    MinigameCCGRewardCardExcel.AddId(builder, Id);
    MinigameCCGRewardCardExcel.AddCardRarity(builder, CardRarity);
    MinigameCCGRewardCardExcel.AddEntityType(builder, EntityType);
    return MinigameCCGRewardCardExcel.EndMinigameCCGRewardCardExcel(builder);
  }

  public static void StartMinigameCCGRewardCardExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(1, groupId, 0); }
  public static void AddEntityType(FlatBufferBuilder builder, Japan.CCGEntityType entityType) { builder.AddInt(2, (int)entityType, 0); }
  public static void AddCardId(FlatBufferBuilder builder, long cardId) { builder.AddLong(3, cardId, 0); }
  public static void AddCardRarity(FlatBufferBuilder builder, int cardRarity) { builder.AddInt(4, cardRarity, 0); }
  public static Offset<Japan.MinigameCCGRewardCardExcel> EndMinigameCCGRewardCardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MinigameCCGRewardCardExcel>(o);
  }
  public MinigameCCGRewardCardExcelT UnPack() {
    var _o = new MinigameCCGRewardCardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGRewardCardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGRewardCard");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.EntityType = TableEncryptionService.UseEncryption ? (Japan.CCGEntityType)TableEncryptionService.Convert((int)this.EntityType, key) : this.EntityType;
    _o.CardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CardId, key) : this.CardId;
    _o.CardRarity = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CardRarity, key) : this.CardRarity;
  }
  public static Offset<Japan.MinigameCCGRewardCardExcel> Pack(FlatBufferBuilder builder, MinigameCCGRewardCardExcelT _o) {
    if (_o == null) return default(Offset<Japan.MinigameCCGRewardCardExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGRewardCard");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _EntityType = TableEncryptionService.UseEncryption ? (Japan.CCGEntityType)TableEncryptionService.Convert((int)_o.EntityType, key) : _o.EntityType;
		var _CardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CardId, key) : _o.CardId;
		var _CardRarity = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CardRarity, key) : _o.CardRarity;
    return CreateMinigameCCGRewardCardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _EntityType : _o.EntityType,
      TableEncryptionService.UseEncryption ? _CardId : _o.CardId,
      TableEncryptionService.UseEncryption ? _CardRarity : _o.CardRarity);
  }
}

public class MinigameCCGRewardCardExcelT
{
  public long Id { get; set; }
  public long GroupId { get; set; }
  public Japan.CCGEntityType EntityType { get; set; }
  public long CardId { get; set; }
  public int CardRarity { get; set; }

  public MinigameCCGRewardCardExcelT() {
    this.Id = 0;
    this.GroupId = 0;
    this.EntityType = Japan.CCGEntityType.None;
    this.CardId = 0;
    this.CardRarity = 0;
  }
}


static public class MinigameCCGRewardCardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*EntityType*/, 4 /*Japan.CCGEntityType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*CardRarity*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
