// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GachaElementRecursiveExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaElementRecursiveExcel GetRootAsGachaElementRecursiveExcel(ByteBuffer _bb) { return GetRootAsGachaElementRecursiveExcel(_bb, new GachaElementRecursiveExcel()); }
  public static GachaElementRecursiveExcel GetRootAsGachaElementRecursiveExcel(ByteBuffer _bb, GachaElementRecursiveExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaElementRecursiveExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GachaGroupID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType ParcelType { get { int o = __p.__offset(8); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long ParcelID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ParcelAmountMin { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ParcelAmountMax { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Prob { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int State { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Japan.GachaElementRecursiveExcel> CreateGachaElementRecursiveExcel(FlatBufferBuilder builder,
      long ID = 0,
      long GachaGroupID = 0,
      Japan.ParcelType ParcelType = Japan.ParcelType.None,
      long ParcelID = 0,
      int ParcelAmountMin = 0,
      int ParcelAmountMax = 0,
      int Prob = 0,
      int State = 0) {
    builder.StartTable(8);
    GachaElementRecursiveExcel.AddParcelID(builder, ParcelID);
    GachaElementRecursiveExcel.AddGachaGroupID(builder, GachaGroupID);
    GachaElementRecursiveExcel.AddID(builder, ID);
    GachaElementRecursiveExcel.AddState(builder, State);
    GachaElementRecursiveExcel.AddProb(builder, Prob);
    GachaElementRecursiveExcel.AddParcelAmountMax(builder, ParcelAmountMax);
    GachaElementRecursiveExcel.AddParcelAmountMin(builder, ParcelAmountMin);
    GachaElementRecursiveExcel.AddParcelType(builder, ParcelType);
    return GachaElementRecursiveExcel.EndGachaElementRecursiveExcel(builder);
  }

  public static void StartGachaElementRecursiveExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddID(FlatBufferBuilder builder, long iD) { builder.AddLong(0, iD, 0); }
  public static void AddGachaGroupID(FlatBufferBuilder builder, long gachaGroupID) { builder.AddLong(1, gachaGroupID, 0); }
  public static void AddParcelType(FlatBufferBuilder builder, Japan.ParcelType parcelType) { builder.AddInt(2, (int)parcelType, 0); }
  public static void AddParcelID(FlatBufferBuilder builder, long parcelID) { builder.AddLong(3, parcelID, 0); }
  public static void AddParcelAmountMin(FlatBufferBuilder builder, int parcelAmountMin) { builder.AddInt(4, parcelAmountMin, 0); }
  public static void AddParcelAmountMax(FlatBufferBuilder builder, int parcelAmountMax) { builder.AddInt(5, parcelAmountMax, 0); }
  public static void AddProb(FlatBufferBuilder builder, int prob) { builder.AddInt(6, prob, 0); }
  public static void AddState(FlatBufferBuilder builder, int state) { builder.AddInt(7, state, 0); }
  public static Offset<Japan.GachaElementRecursiveExcel> EndGachaElementRecursiveExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.GachaElementRecursiveExcel>(o);
  }
  public GachaElementRecursiveExcelT UnPack() {
    var _o = new GachaElementRecursiveExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaElementRecursiveExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GachaElementRecursive");
    _o.ID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ID, key) : this.ID;
    _o.GachaGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GachaGroupID, key) : this.GachaGroupID;
    _o.ParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.ParcelType, key) : this.ParcelType;
    _o.ParcelID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ParcelID, key) : this.ParcelID;
    _o.ParcelAmountMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ParcelAmountMin, key) : this.ParcelAmountMin;
    _o.ParcelAmountMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ParcelAmountMax, key) : this.ParcelAmountMax;
    _o.Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Prob, key) : this.Prob;
    _o.State = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.State, key) : this.State;
  }
  public static Offset<Japan.GachaElementRecursiveExcel> Pack(FlatBufferBuilder builder, GachaElementRecursiveExcelT _o) {
    if (_o == null) return default(Offset<Japan.GachaElementRecursiveExcel>);
		byte[] key = TableEncryptionService.CreateKey("GachaElementRecursive");
		var _ID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ID, key) : _o.ID;
		var _GachaGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GachaGroupID, key) : _o.GachaGroupID;
		var _ParcelType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.ParcelType, key) : _o.ParcelType;
		var _ParcelID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ParcelID, key) : _o.ParcelID;
		var _ParcelAmountMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ParcelAmountMin, key) : _o.ParcelAmountMin;
		var _ParcelAmountMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ParcelAmountMax, key) : _o.ParcelAmountMax;
		var _Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Prob, key) : _o.Prob;
		var _State = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.State, key) : _o.State;
    return CreateGachaElementRecursiveExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ID : _o.ID,
      TableEncryptionService.UseEncryption ? _GachaGroupID : _o.GachaGroupID,
      TableEncryptionService.UseEncryption ? _ParcelType : _o.ParcelType,
      TableEncryptionService.UseEncryption ? _ParcelID : _o.ParcelID,
      TableEncryptionService.UseEncryption ? _ParcelAmountMin : _o.ParcelAmountMin,
      TableEncryptionService.UseEncryption ? _ParcelAmountMax : _o.ParcelAmountMax,
      TableEncryptionService.UseEncryption ? _Prob : _o.Prob,
      TableEncryptionService.UseEncryption ? _State : _o.State);
  }
}

public class GachaElementRecursiveExcelT
{
  public long ID { get; set; }
  public long GachaGroupID { get; set; }
  public Japan.ParcelType ParcelType { get; set; }
  public long ParcelID { get; set; }
  public int ParcelAmountMin { get; set; }
  public int ParcelAmountMax { get; set; }
  public int Prob { get; set; }
  public int State { get; set; }

  public GachaElementRecursiveExcelT() {
    this.ID = 0;
    this.GachaGroupID = 0;
    this.ParcelType = Japan.ParcelType.None;
    this.ParcelID = 0;
    this.ParcelAmountMin = 0;
    this.ParcelAmountMax = 0;
    this.Prob = 0;
    this.State = 0;
  }
}


static public class GachaElementRecursiveExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GachaGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ParcelType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ParcelID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ParcelAmountMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ParcelAmountMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Prob*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*State*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
