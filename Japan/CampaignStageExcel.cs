// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CampaignStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CampaignStageExcel GetRootAsCampaignStageExcel(ByteBuffer _bb) { return GetRootAsCampaignStageExcel(_bb, new CampaignStageExcel()); }
  public static CampaignStageExcel GetRootAsCampaignStageExcel(ByteBuffer _bb, CampaignStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CampaignStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool Deprecated { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  public string StageNumber { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageNumberBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStageNumberBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStageNumberArray() { return __p.__vector_as_array<byte>(10); }
  public long CleardScenarioId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BattleDuration { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType StageEnterCostType { get { int o = __p.__offset(16); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageEnterEchelonCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long StarConditionTacticRankSCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StarConditionTurnCount { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnterScenarioGroupId(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int EnterScenarioGroupIdLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetEnterScenarioGroupIdBytes() { return __p.__vector_as_span<long>(28, 8); }
#else
  public ArraySegment<byte>? GetEnterScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public long[] GetEnterScenarioGroupIdArray() { return __p.__vector_as_array<long>(28); }
  public long ClearScenarioGroupId(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ClearScenarioGroupIdLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetClearScenarioGroupIdBytes() { return __p.__vector_as_span<long>(30, 8); }
#else
  public ArraySegment<byte>? GetClearScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public long[] GetClearScenarioGroupIdArray() { return __p.__vector_as_array<long>(30); }
  public string StrategyMap { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetStrategyMapArray() { return __p.__vector_as_array<byte>(32); }
  public string StrategyMapBG { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBGBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBGBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetStrategyMapBGArray() { return __p.__vector_as_array<byte>(34); }
  public long CampaignStageRewardId { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxTurn { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.StageTopography StageTopography { get { int o = __p.__offset(40); return o != 0 ? (Japan.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : Japan.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RecommandLevelGapForGuide { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long MinEquipmentTierForGuide(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MinEquipmentTierForGuideLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMinEquipmentTierForGuideBytes() { return __p.__vector_as_span<long>(46, 8); }
#else
  public ArraySegment<byte>? GetMinEquipmentTierForGuideBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public long[] GetMinEquipmentTierForGuideArray() { return __p.__vector_as_array<long>(46); }
  public long MinSkillLevelForGuide(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MinSkillLevelForGuideLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMinSkillLevelForGuideBytes() { return __p.__vector_as_span<long>(48, 8); }
#else
  public ArraySegment<byte>? GetMinSkillLevelForGuideBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public long[] GetMinSkillLevelForGuideArray() { return __p.__vector_as_array<long>(48); }
  public string BgmId { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgmIdBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetBgmIdBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetBgmIdArray() { return __p.__vector_as_array<byte>(50); }
  public Japan.StrategyEnvironment StrategyEnvironment { get { int o = __p.__offset(52); return o != 0 ? (Japan.StrategyEnvironment)__p.bb.GetInt(o + __p.bb_pos) : Japan.StrategyEnvironment.None; } }
  public long GroundId { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StrategySkipGroundId { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Japan.ContentType ContentType { get { int o = __p.__offset(58); return o != 0 ? (Japan.ContentType)__p.bb.GetInt(o + __p.bb_pos) : Japan.ContentType.None; } }
  public long BGMId { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string FirstClearReportEventName { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFirstClearReportEventNameBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetFirstClearReportEventNameBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetFirstClearReportEventNameArray() { return __p.__vector_as_array<byte>(62); }
  public long TacticRewardExp { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FixedEchelonId { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(68); return o != 0 ? (Japan.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : Japan.EchelonExtensionType.Base; } }

  public static Offset<Japan.CampaignStageExcel> CreateCampaignStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      bool Deprecated = false,
      StringOffset NameOffset = default(StringOffset),
      StringOffset StageNumberOffset = default(StringOffset),
      long CleardScenarioId = 0,
      long BattleDuration = 0,
      Japan.ParcelType StageEnterCostType = Japan.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      int StageEnterEchelonCount = 0,
      long StarConditionTacticRankSCount = 0,
      long StarConditionTurnCount = 0,
      VectorOffset EnterScenarioGroupIdOffset = default(VectorOffset),
      VectorOffset ClearScenarioGroupIdOffset = default(VectorOffset),
      StringOffset StrategyMapOffset = default(StringOffset),
      StringOffset StrategyMapBGOffset = default(StringOffset),
      long CampaignStageRewardId = 0,
      int MaxTurn = 0,
      Japan.StageTopography StageTopography = Japan.StageTopography.Street,
      int RecommandLevel = 0,
      int RecommandLevelGapForGuide = 0,
      VectorOffset MinEquipmentTierForGuideOffset = default(VectorOffset),
      VectorOffset MinSkillLevelForGuideOffset = default(VectorOffset),
      StringOffset BgmIdOffset = default(StringOffset),
      Japan.StrategyEnvironment StrategyEnvironment = Japan.StrategyEnvironment.None,
      long GroundId = 0,
      int StrategySkipGroundId = 0,
      Japan.ContentType ContentType = Japan.ContentType.None,
      long BGMId = 0,
      StringOffset FirstClearReportEventNameOffset = default(StringOffset),
      long TacticRewardExp = 0,
      long FixedEchelonId = 0,
      Japan.EchelonExtensionType EchelonExtensionType = Japan.EchelonExtensionType.Base) {
    builder.StartTable(33);
    CampaignStageExcel.AddFixedEchelonId(builder, FixedEchelonId);
    CampaignStageExcel.AddTacticRewardExp(builder, TacticRewardExp);
    CampaignStageExcel.AddBGMId(builder, BGMId);
    CampaignStageExcel.AddGroundId(builder, GroundId);
    CampaignStageExcel.AddCampaignStageRewardId(builder, CampaignStageRewardId);
    CampaignStageExcel.AddStarConditionTurnCount(builder, StarConditionTurnCount);
    CampaignStageExcel.AddStarConditionTacticRankSCount(builder, StarConditionTacticRankSCount);
    CampaignStageExcel.AddStageEnterCostId(builder, StageEnterCostId);
    CampaignStageExcel.AddBattleDuration(builder, BattleDuration);
    CampaignStageExcel.AddCleardScenarioId(builder, CleardScenarioId);
    CampaignStageExcel.AddId(builder, Id);
    CampaignStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    CampaignStageExcel.AddFirstClearReportEventName(builder, FirstClearReportEventNameOffset);
    CampaignStageExcel.AddContentType(builder, ContentType);
    CampaignStageExcel.AddStrategySkipGroundId(builder, StrategySkipGroundId);
    CampaignStageExcel.AddStrategyEnvironment(builder, StrategyEnvironment);
    CampaignStageExcel.AddBgmId(builder, BgmIdOffset);
    CampaignStageExcel.AddMinSkillLevelForGuide(builder, MinSkillLevelForGuideOffset);
    CampaignStageExcel.AddMinEquipmentTierForGuide(builder, MinEquipmentTierForGuideOffset);
    CampaignStageExcel.AddRecommandLevelGapForGuide(builder, RecommandLevelGapForGuide);
    CampaignStageExcel.AddRecommandLevel(builder, RecommandLevel);
    CampaignStageExcel.AddStageTopography(builder, StageTopography);
    CampaignStageExcel.AddMaxTurn(builder, MaxTurn);
    CampaignStageExcel.AddStrategyMapBG(builder, StrategyMapBGOffset);
    CampaignStageExcel.AddStrategyMap(builder, StrategyMapOffset);
    CampaignStageExcel.AddClearScenarioGroupId(builder, ClearScenarioGroupIdOffset);
    CampaignStageExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupIdOffset);
    CampaignStageExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount);
    CampaignStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    CampaignStageExcel.AddStageEnterCostType(builder, StageEnterCostType);
    CampaignStageExcel.AddStageNumber(builder, StageNumberOffset);
    CampaignStageExcel.AddName(builder, NameOffset);
    CampaignStageExcel.AddDeprecated(builder, Deprecated);
    return CampaignStageExcel.EndCampaignStageExcel(builder);
  }

  public static void StartCampaignStageExcel(FlatBufferBuilder builder) { builder.StartTable(33); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddDeprecated(FlatBufferBuilder builder, bool deprecated) { builder.AddBool(1, deprecated, false); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddStageNumber(FlatBufferBuilder builder, StringOffset stageNumberOffset) { builder.AddOffset(3, stageNumberOffset.Value, 0); }
  public static void AddCleardScenarioId(FlatBufferBuilder builder, long cleardScenarioId) { builder.AddLong(4, cleardScenarioId, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(5, battleDuration, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, Japan.ParcelType stageEnterCostType) { builder.AddInt(6, (int)stageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long stageEnterCostId) { builder.AddLong(7, stageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int stageEnterCostAmount) { builder.AddInt(8, stageEnterCostAmount, 0); }
  public static void AddStageEnterEchelonCount(FlatBufferBuilder builder, int stageEnterEchelonCount) { builder.AddInt(9, stageEnterEchelonCount, 0); }
  public static void AddStarConditionTacticRankSCount(FlatBufferBuilder builder, long starConditionTacticRankSCount) { builder.AddLong(10, starConditionTacticRankSCount, 0); }
  public static void AddStarConditionTurnCount(FlatBufferBuilder builder, long starConditionTurnCount) { builder.AddLong(11, starConditionTurnCount, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, VectorOffset enterScenarioGroupIdOffset) { builder.AddOffset(12, enterScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateEnterScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnterScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddClearScenarioGroupId(FlatBufferBuilder builder, VectorOffset clearScenarioGroupIdOffset) { builder.AddOffset(13, clearScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateClearScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClearScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStrategyMap(FlatBufferBuilder builder, StringOffset strategyMapOffset) { builder.AddOffset(14, strategyMapOffset.Value, 0); }
  public static void AddStrategyMapBG(FlatBufferBuilder builder, StringOffset strategyMapBGOffset) { builder.AddOffset(15, strategyMapBGOffset.Value, 0); }
  public static void AddCampaignStageRewardId(FlatBufferBuilder builder, long campaignStageRewardId) { builder.AddLong(16, campaignStageRewardId, 0); }
  public static void AddMaxTurn(FlatBufferBuilder builder, int maxTurn) { builder.AddInt(17, maxTurn, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, Japan.StageTopography stageTopography) { builder.AddInt(18, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int recommandLevel) { builder.AddInt(19, recommandLevel, 0); }
  public static void AddRecommandLevelGapForGuide(FlatBufferBuilder builder, int recommandLevelGapForGuide) { builder.AddInt(20, recommandLevelGapForGuide, 0); }
  public static void AddMinEquipmentTierForGuide(FlatBufferBuilder builder, VectorOffset minEquipmentTierForGuideOffset) { builder.AddOffset(21, minEquipmentTierForGuideOffset.Value, 0); }
  public static VectorOffset CreateMinEquipmentTierForGuideVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMinEquipmentTierForGuideVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMinEquipmentTierForGuideVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMinEquipmentTierForGuideVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMinEquipmentTierForGuideVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMinSkillLevelForGuide(FlatBufferBuilder builder, VectorOffset minSkillLevelForGuideOffset) { builder.AddOffset(22, minSkillLevelForGuideOffset.Value, 0); }
  public static VectorOffset CreateMinSkillLevelForGuideVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMinSkillLevelForGuideVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMinSkillLevelForGuideVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMinSkillLevelForGuideVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMinSkillLevelForGuideVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBgmId(FlatBufferBuilder builder, StringOffset bgmIdOffset) { builder.AddOffset(23, bgmIdOffset.Value, 0); }
  public static void AddStrategyEnvironment(FlatBufferBuilder builder, Japan.StrategyEnvironment strategyEnvironment) { builder.AddInt(24, (int)strategyEnvironment, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(25, groundId, 0); }
  public static void AddStrategySkipGroundId(FlatBufferBuilder builder, int strategySkipGroundId) { builder.AddInt(26, strategySkipGroundId, 0); }
  public static void AddContentType(FlatBufferBuilder builder, Japan.ContentType contentType) { builder.AddInt(27, (int)contentType, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(28, bGMId, 0); }
  public static void AddFirstClearReportEventName(FlatBufferBuilder builder, StringOffset firstClearReportEventNameOffset) { builder.AddOffset(29, firstClearReportEventNameOffset.Value, 0); }
  public static void AddTacticRewardExp(FlatBufferBuilder builder, long tacticRewardExp) { builder.AddLong(30, tacticRewardExp, 0); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long fixedEchelonId) { builder.AddLong(31, fixedEchelonId, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, Japan.EchelonExtensionType echelonExtensionType) { builder.AddInt(32, (int)echelonExtensionType, 0); }
  public static Offset<Japan.CampaignStageExcel> EndCampaignStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.CampaignStageExcel>(o);
  }
  public CampaignStageExcelT UnPack() {
    var _o = new CampaignStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CampaignStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CampaignStage");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Deprecated = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.Deprecated, key) : this.Deprecated;
    _o.Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Name, key) : this.Name;
    _o.StageNumber = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StageNumber, key) : this.StageNumber;
    _o.CleardScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CleardScenarioId, key) : this.CleardScenarioId;
    _o.BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattleDuration, key) : this.BattleDuration;
    _o.StageEnterCostType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.StageEnterCostType, key) : this.StageEnterCostType;
    _o.StageEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StageEnterCostId, key) : this.StageEnterCostId;
    _o.StageEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageEnterCostAmount, key) : this.StageEnterCostAmount;
    _o.StageEnterEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageEnterEchelonCount, key) : this.StageEnterEchelonCount;
    _o.StarConditionTacticRankSCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StarConditionTacticRankSCount, key) : this.StarConditionTacticRankSCount;
    _o.StarConditionTurnCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StarConditionTurnCount, key) : this.StarConditionTurnCount;
    _o.EnterScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.EnterScenarioGroupIdLength; ++_j) {_o.EnterScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnterScenarioGroupId(_j), key) : this.EnterScenarioGroupId(_j));}
    _o.ClearScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.ClearScenarioGroupIdLength; ++_j) {_o.ClearScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearScenarioGroupId(_j), key) : this.ClearScenarioGroupId(_j));}
    _o.StrategyMap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StrategyMap, key) : this.StrategyMap;
    _o.StrategyMapBG = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StrategyMapBG, key) : this.StrategyMapBG;
    _o.CampaignStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CampaignStageRewardId, key) : this.CampaignStageRewardId;
    _o.MaxTurn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxTurn, key) : this.MaxTurn;
    _o.StageTopography = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)this.StageTopography, key) : this.StageTopography;
    _o.RecommandLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RecommandLevel, key) : this.RecommandLevel;
    _o.RecommandLevelGapForGuide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RecommandLevelGapForGuide, key) : this.RecommandLevelGapForGuide;
    _o.MinEquipmentTierForGuide = new List<long>();
    for (var _j = 0; _j < this.MinEquipmentTierForGuideLength; ++_j) {_o.MinEquipmentTierForGuide.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MinEquipmentTierForGuide(_j), key) : this.MinEquipmentTierForGuide(_j));}
    _o.MinSkillLevelForGuide = new List<long>();
    for (var _j = 0; _j < this.MinSkillLevelForGuideLength; ++_j) {_o.MinSkillLevelForGuide.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MinSkillLevelForGuide(_j), key) : this.MinSkillLevelForGuide(_j));}
    _o.BgmId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BgmId, key) : this.BgmId;
    _o.StrategyEnvironment = TableEncryptionService.UseEncryption ? (Japan.StrategyEnvironment)TableEncryptionService.Convert((int)this.StrategyEnvironment, key) : this.StrategyEnvironment;
    _o.GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundId, key) : this.GroundId;
    _o.StrategySkipGroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StrategySkipGroundId, key) : this.StrategySkipGroundId;
    _o.ContentType = TableEncryptionService.UseEncryption ? (Japan.ContentType)TableEncryptionService.Convert((int)this.ContentType, key) : this.ContentType;
    _o.BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BGMId, key) : this.BGMId;
    _o.FirstClearReportEventName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.FirstClearReportEventName, key) : this.FirstClearReportEventName;
    _o.TacticRewardExp = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TacticRewardExp, key) : this.TacticRewardExp;
    _o.FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FixedEchelonId, key) : this.FixedEchelonId;
    _o.EchelonExtensionType = TableEncryptionService.UseEncryption ? (Japan.EchelonExtensionType)TableEncryptionService.Convert((int)this.EchelonExtensionType, key) : this.EchelonExtensionType;
  }
  public static Offset<Japan.CampaignStageExcel> Pack(FlatBufferBuilder builder, CampaignStageExcelT _o) {
    if (_o == null) return default(Offset<Japan.CampaignStageExcel>);
		byte[] key = TableEncryptionService.CreateKey("CampaignStage");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Deprecated = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.Deprecated, key) : _o.Deprecated;
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Name, key) : _o.Name));
    var _StageNumber = _o.StageNumber == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StageNumber, key) : _o.StageNumber));
		var _CleardScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CleardScenarioId, key) : _o.CleardScenarioId;
		var _BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattleDuration, key) : _o.BattleDuration;
		var _StageEnterCostType = TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)_o.StageEnterCostType, key) : _o.StageEnterCostType;
		var _StageEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StageEnterCostId, key) : _o.StageEnterCostId;
		var _StageEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageEnterCostAmount, key) : _o.StageEnterCostAmount;
		var _StageEnterEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageEnterEchelonCount, key) : _o.StageEnterEchelonCount;
		var _StarConditionTacticRankSCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StarConditionTacticRankSCount, key) : _o.StarConditionTacticRankSCount;
		var _StarConditionTurnCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StarConditionTurnCount, key) : _o.StarConditionTurnCount;
    var _EnterScenarioGroupId = default(VectorOffset);
    if (_o.EnterScenarioGroupId != null) {
      var __EnterScenarioGroupId = _o.EnterScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _EnterScenarioGroupId = CreateEnterScenarioGroupIdVector(builder, __EnterScenarioGroupId);
    }
    var _ClearScenarioGroupId = default(VectorOffset);
    if (_o.ClearScenarioGroupId != null) {
      var __ClearScenarioGroupId = _o.ClearScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ClearScenarioGroupId = CreateClearScenarioGroupIdVector(builder, __ClearScenarioGroupId);
    }
    var _StrategyMap = _o.StrategyMap == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StrategyMap, key) : _o.StrategyMap));
    var _StrategyMapBG = _o.StrategyMapBG == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StrategyMapBG, key) : _o.StrategyMapBG));
		var _CampaignStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CampaignStageRewardId, key) : _o.CampaignStageRewardId;
		var _MaxTurn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxTurn, key) : _o.MaxTurn;
		var _StageTopography = TableEncryptionService.UseEncryption ? (Japan.StageTopography)TableEncryptionService.Convert((int)_o.StageTopography, key) : _o.StageTopography;
		var _RecommandLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RecommandLevel, key) : _o.RecommandLevel;
		var _RecommandLevelGapForGuide = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RecommandLevelGapForGuide, key) : _o.RecommandLevelGapForGuide;
    var _MinEquipmentTierForGuide = default(VectorOffset);
    if (_o.MinEquipmentTierForGuide != null) {
      var __MinEquipmentTierForGuide = _o.MinEquipmentTierForGuide.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _MinEquipmentTierForGuide = CreateMinEquipmentTierForGuideVector(builder, __MinEquipmentTierForGuide);
    }
    var _MinSkillLevelForGuide = default(VectorOffset);
    if (_o.MinSkillLevelForGuide != null) {
      var __MinSkillLevelForGuide = _o.MinSkillLevelForGuide.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _MinSkillLevelForGuide = CreateMinSkillLevelForGuideVector(builder, __MinSkillLevelForGuide);
    }
    var _BgmId = _o.BgmId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BgmId, key) : _o.BgmId));
		var _StrategyEnvironment = TableEncryptionService.UseEncryption ? (Japan.StrategyEnvironment)TableEncryptionService.Convert((int)_o.StrategyEnvironment, key) : _o.StrategyEnvironment;
		var _GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundId, key) : _o.GroundId;
		var _StrategySkipGroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StrategySkipGroundId, key) : _o.StrategySkipGroundId;
		var _ContentType = TableEncryptionService.UseEncryption ? (Japan.ContentType)TableEncryptionService.Convert((int)_o.ContentType, key) : _o.ContentType;
		var _BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BGMId, key) : _o.BGMId;
    var _FirstClearReportEventName = _o.FirstClearReportEventName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.FirstClearReportEventName, key) : _o.FirstClearReportEventName));
		var _TacticRewardExp = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TacticRewardExp, key) : _o.TacticRewardExp;
		var _FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FixedEchelonId, key) : _o.FixedEchelonId;
		var _EchelonExtensionType = TableEncryptionService.UseEncryption ? (Japan.EchelonExtensionType)TableEncryptionService.Convert((int)_o.EchelonExtensionType, key) : _o.EchelonExtensionType;
    return CreateCampaignStageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Deprecated : _o.Deprecated,
      _Name,
      _StageNumber,
      TableEncryptionService.UseEncryption ? _CleardScenarioId : _o.CleardScenarioId,
      TableEncryptionService.UseEncryption ? _BattleDuration : _o.BattleDuration,
      TableEncryptionService.UseEncryption ? _StageEnterCostType : _o.StageEnterCostType,
      TableEncryptionService.UseEncryption ? _StageEnterCostId : _o.StageEnterCostId,
      TableEncryptionService.UseEncryption ? _StageEnterCostAmount : _o.StageEnterCostAmount,
      TableEncryptionService.UseEncryption ? _StageEnterEchelonCount : _o.StageEnterEchelonCount,
      TableEncryptionService.UseEncryption ? _StarConditionTacticRankSCount : _o.StarConditionTacticRankSCount,
      TableEncryptionService.UseEncryption ? _StarConditionTurnCount : _o.StarConditionTurnCount,
      _EnterScenarioGroupId,
      _ClearScenarioGroupId,
      _StrategyMap,
      _StrategyMapBG,
      TableEncryptionService.UseEncryption ? _CampaignStageRewardId : _o.CampaignStageRewardId,
      TableEncryptionService.UseEncryption ? _MaxTurn : _o.MaxTurn,
      TableEncryptionService.UseEncryption ? _StageTopography : _o.StageTopography,
      TableEncryptionService.UseEncryption ? _RecommandLevel : _o.RecommandLevel,
      TableEncryptionService.UseEncryption ? _RecommandLevelGapForGuide : _o.RecommandLevelGapForGuide,
      _MinEquipmentTierForGuide,
      _MinSkillLevelForGuide,
      _BgmId,
      TableEncryptionService.UseEncryption ? _StrategyEnvironment : _o.StrategyEnvironment,
      TableEncryptionService.UseEncryption ? _GroundId : _o.GroundId,
      TableEncryptionService.UseEncryption ? _StrategySkipGroundId : _o.StrategySkipGroundId,
      TableEncryptionService.UseEncryption ? _ContentType : _o.ContentType,
      TableEncryptionService.UseEncryption ? _BGMId : _o.BGMId,
      _FirstClearReportEventName,
      TableEncryptionService.UseEncryption ? _TacticRewardExp : _o.TacticRewardExp,
      TableEncryptionService.UseEncryption ? _FixedEchelonId : _o.FixedEchelonId,
      TableEncryptionService.UseEncryption ? _EchelonExtensionType : _o.EchelonExtensionType);
  }
}

public class CampaignStageExcelT
{
  public long Id { get; set; }
  public bool Deprecated { get; set; }
  public string Name { get; set; }
  public string StageNumber { get; set; }
  public long CleardScenarioId { get; set; }
  public long BattleDuration { get; set; }
  public Japan.ParcelType StageEnterCostType { get; set; }
  public long StageEnterCostId { get; set; }
  public int StageEnterCostAmount { get; set; }
  public int StageEnterEchelonCount { get; set; }
  public long StarConditionTacticRankSCount { get; set; }
  public long StarConditionTurnCount { get; set; }
  public List<long> EnterScenarioGroupId { get; set; }
  public List<long> ClearScenarioGroupId { get; set; }
  public string StrategyMap { get; set; }
  public string StrategyMapBG { get; set; }
  public long CampaignStageRewardId { get; set; }
  public int MaxTurn { get; set; }
  public Japan.StageTopography StageTopography { get; set; }
  public int RecommandLevel { get; set; }
  public int RecommandLevelGapForGuide { get; set; }
  public List<long> MinEquipmentTierForGuide { get; set; }
  public List<long> MinSkillLevelForGuide { get; set; }
  public string BgmId { get; set; }
  public Japan.StrategyEnvironment StrategyEnvironment { get; set; }
  public long GroundId { get; set; }
  public int StrategySkipGroundId { get; set; }
  public Japan.ContentType ContentType { get; set; }
  public long BGMId { get; set; }
  public string FirstClearReportEventName { get; set; }
  public long TacticRewardExp { get; set; }
  public long FixedEchelonId { get; set; }
  public Japan.EchelonExtensionType EchelonExtensionType { get; set; }

  public CampaignStageExcelT() {
    this.Id = 0;
    this.Deprecated = false;
    this.Name = null;
    this.StageNumber = null;
    this.CleardScenarioId = 0;
    this.BattleDuration = 0;
    this.StageEnterCostType = Japan.ParcelType.None;
    this.StageEnterCostId = 0;
    this.StageEnterCostAmount = 0;
    this.StageEnterEchelonCount = 0;
    this.StarConditionTacticRankSCount = 0;
    this.StarConditionTurnCount = 0;
    this.EnterScenarioGroupId = null;
    this.ClearScenarioGroupId = null;
    this.StrategyMap = null;
    this.StrategyMapBG = null;
    this.CampaignStageRewardId = 0;
    this.MaxTurn = 0;
    this.StageTopography = Japan.StageTopography.Street;
    this.RecommandLevel = 0;
    this.RecommandLevelGapForGuide = 0;
    this.MinEquipmentTierForGuide = null;
    this.MinSkillLevelForGuide = null;
    this.BgmId = null;
    this.StrategyEnvironment = Japan.StrategyEnvironment.None;
    this.GroundId = 0;
    this.StrategySkipGroundId = 0;
    this.ContentType = Japan.ContentType.None;
    this.BGMId = 0;
    this.FirstClearReportEventName = null;
    this.TacticRewardExp = 0;
    this.FixedEchelonId = 0;
    this.EchelonExtensionType = Japan.EchelonExtensionType.Base;
  }
}


static public class CampaignStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Deprecated*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*StageNumber*/, false)
      && verifier.VerifyField(tablePos, 12 /*CleardScenarioId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*StageEnterCostType*/, 4 /*Japan.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*StageEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*StageEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*StageEnterEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*StarConditionTacticRankSCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*StarConditionTurnCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*EnterScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*ClearScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 32 /*StrategyMap*/, false)
      && verifier.VerifyString(tablePos, 34 /*StrategyMapBG*/, false)
      && verifier.VerifyField(tablePos, 36 /*CampaignStageRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*MaxTurn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*StageTopography*/, 4 /*Japan.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*RecommandLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*RecommandLevelGapForGuide*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*MinEquipmentTierForGuide*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*MinSkillLevelForGuide*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 50 /*BgmId*/, false)
      && verifier.VerifyField(tablePos, 52 /*StrategyEnvironment*/, 4 /*Japan.StrategyEnvironment*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*StrategySkipGroundId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*ContentType*/, 4 /*Japan.ContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 62 /*FirstClearReportEventName*/, false)
      && verifier.VerifyField(tablePos, 64 /*TacticRewardExp*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*FixedEchelonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*EchelonExtensionType*/, 4 /*Japan.EchelonExtensionType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
