// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct TutorialExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TutorialExcel GetRootAsTutorialExcel(ByteBuffer _bb) { return GetRootAsTutorialExcel(_bb, new TutorialExcel()); }
  public static TutorialExcel GetRootAsTutorialExcel(ByteBuffer _bb, TutorialExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TutorialExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string CompletionReportEventName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompletionReportEventNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCompletionReportEventNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCompletionReportEventNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool CompulsoryTutorial { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool DescriptionTutorial { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long TutorialStageId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string UIName(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UINameLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TutorialParentName(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TutorialParentNameLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Japan.TutorialExcel> CreateTutorialExcel(FlatBufferBuilder builder,
      long ID = 0,
      StringOffset CompletionReportEventNameOffset = default(StringOffset),
      bool CompulsoryTutorial = false,
      bool DescriptionTutorial = false,
      long TutorialStageId = 0,
      VectorOffset UINameOffset = default(VectorOffset),
      VectorOffset TutorialParentNameOffset = default(VectorOffset)) {
    builder.StartTable(7);
    TutorialExcel.AddTutorialStageId(builder, TutorialStageId);
    TutorialExcel.AddID(builder, ID);
    TutorialExcel.AddTutorialParentName(builder, TutorialParentNameOffset);
    TutorialExcel.AddUIName(builder, UINameOffset);
    TutorialExcel.AddCompletionReportEventName(builder, CompletionReportEventNameOffset);
    TutorialExcel.AddDescriptionTutorial(builder, DescriptionTutorial);
    TutorialExcel.AddCompulsoryTutorial(builder, CompulsoryTutorial);
    return TutorialExcel.EndTutorialExcel(builder);
  }

  public static void StartTutorialExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddID(FlatBufferBuilder builder, long iD) { builder.AddLong(0, iD, 0); }
  public static void AddCompletionReportEventName(FlatBufferBuilder builder, StringOffset completionReportEventNameOffset) { builder.AddOffset(1, completionReportEventNameOffset.Value, 0); }
  public static void AddCompulsoryTutorial(FlatBufferBuilder builder, bool compulsoryTutorial) { builder.AddBool(2, compulsoryTutorial, false); }
  public static void AddDescriptionTutorial(FlatBufferBuilder builder, bool descriptionTutorial) { builder.AddBool(3, descriptionTutorial, false); }
  public static void AddTutorialStageId(FlatBufferBuilder builder, long tutorialStageId) { builder.AddLong(4, tutorialStageId, 0); }
  public static void AddUIName(FlatBufferBuilder builder, VectorOffset uINameOffset) { builder.AddOffset(5, uINameOffset.Value, 0); }
  public static VectorOffset CreateUINameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUINameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUINameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUINameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUINameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTutorialParentName(FlatBufferBuilder builder, VectorOffset tutorialParentNameOffset) { builder.AddOffset(6, tutorialParentNameOffset.Value, 0); }
  public static VectorOffset CreateTutorialParentNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTutorialParentNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTutorialParentNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTutorialParentNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTutorialParentNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Japan.TutorialExcel> EndTutorialExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.TutorialExcel>(o);
  }
  public TutorialExcelT UnPack() {
    var _o = new TutorialExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TutorialExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Tutorial");
    _o.ID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ID, key) : this.ID;
    _o.CompletionReportEventName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.CompletionReportEventName, key) : this.CompletionReportEventName;
    _o.CompulsoryTutorial = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CompulsoryTutorial, key) : this.CompulsoryTutorial;
    _o.DescriptionTutorial = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.DescriptionTutorial, key) : this.DescriptionTutorial;
    _o.TutorialStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TutorialStageId, key) : this.TutorialStageId;
    _o.UIName = new List<string>();
    for (var _j = 0; _j < this.UINameLength; ++_j) {_o.UIName.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.UIName(_j), key) : this.UIName(_j));}
    _o.TutorialParentName = new List<string>();
    for (var _j = 0; _j < this.TutorialParentNameLength; ++_j) {_o.TutorialParentName.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TutorialParentName(_j), key) : this.TutorialParentName(_j));}
  }
  public static Offset<Japan.TutorialExcel> Pack(FlatBufferBuilder builder, TutorialExcelT _o) {
    if (_o == null) return default(Offset<Japan.TutorialExcel>);
		byte[] key = TableEncryptionService.CreateKey("Tutorial");
		var _ID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ID, key) : _o.ID;
    var _CompletionReportEventName = _o.CompletionReportEventName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.CompletionReportEventName, key) : _o.CompletionReportEventName));
		var _CompulsoryTutorial = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CompulsoryTutorial, key) : _o.CompulsoryTutorial;
		var _DescriptionTutorial = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.DescriptionTutorial, key) : _o.DescriptionTutorial;
		var _TutorialStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TutorialStageId, key) : _o.TutorialStageId;
    var _UIName = default(VectorOffset);
    if (_o.UIName != null) {
      var __UIName = new StringOffset[_o.UIName.Count];
      for (var _j = 0; _j < __UIName.Length; ++_j) { __UIName[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.UIName[_j], key) : _o.UIName[_j])); }
      _UIName = CreateUINameVector(builder, __UIName);
    }
    var _TutorialParentName = default(VectorOffset);
    if (_o.TutorialParentName != null) {
      var __TutorialParentName = new StringOffset[_o.TutorialParentName.Count];
      for (var _j = 0; _j < __TutorialParentName.Length; ++_j) { __TutorialParentName[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TutorialParentName[_j], key) : _o.TutorialParentName[_j])); }
      _TutorialParentName = CreateTutorialParentNameVector(builder, __TutorialParentName);
    }
    return CreateTutorialExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ID : _o.ID,
      _CompletionReportEventName,
      TableEncryptionService.UseEncryption ? _CompulsoryTutorial : _o.CompulsoryTutorial,
      TableEncryptionService.UseEncryption ? _DescriptionTutorial : _o.DescriptionTutorial,
      TableEncryptionService.UseEncryption ? _TutorialStageId : _o.TutorialStageId,
      _UIName,
      _TutorialParentName);
  }
}

public class TutorialExcelT
{
  public long ID { get; set; }
  public string CompletionReportEventName { get; set; }
  public bool CompulsoryTutorial { get; set; }
  public bool DescriptionTutorial { get; set; }
  public long TutorialStageId { get; set; }
  public List<string> UIName { get; set; }
  public List<string> TutorialParentName { get; set; }

  public TutorialExcelT() {
    this.ID = 0;
    this.CompletionReportEventName = null;
    this.CompulsoryTutorial = false;
    this.DescriptionTutorial = false;
    this.TutorialStageId = 0;
    this.UIName = null;
    this.TutorialParentName = null;
  }
}


static public class TutorialExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ID*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*CompletionReportEventName*/, false)
      && verifier.VerifyField(tablePos, 8 /*CompulsoryTutorial*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*DescriptionTutorial*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*TutorialStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*UIName*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*TutorialParentName*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
