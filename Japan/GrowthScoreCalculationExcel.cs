// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GrowthScoreCalculationExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GrowthScoreCalculationExcel GetRootAsGrowthScoreCalculationExcel(ByteBuffer _bb) { return GetRootAsGrowthScoreCalculationExcel(_bb, new GrowthScoreCalculationExcel()); }
  public static GrowthScoreCalculationExcel GetRootAsGrowthScoreCalculationExcel(ByteBuffer _bb, GrowthScoreCalculationExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GrowthScoreCalculationExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.GrowthFactor IncludeGrowthFactor { get { int o = __p.__offset(6); return o != 0 ? (Japan.GrowthFactor)__p.bb.GetInt(o + __p.bb_pos) : Japan.GrowthFactor.CharacterLevel; } }
  public long ConversionCoefficient { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.GrowthScoreCalculationExcel> CreateGrowthScoreCalculationExcel(FlatBufferBuilder builder,
      long Id = 0,
      Japan.GrowthFactor IncludeGrowthFactor = Japan.GrowthFactor.CharacterLevel,
      long ConversionCoefficient = 0) {
    builder.StartTable(3);
    GrowthScoreCalculationExcel.AddConversionCoefficient(builder, ConversionCoefficient);
    GrowthScoreCalculationExcel.AddId(builder, Id);
    GrowthScoreCalculationExcel.AddIncludeGrowthFactor(builder, IncludeGrowthFactor);
    return GrowthScoreCalculationExcel.EndGrowthScoreCalculationExcel(builder);
  }

  public static void StartGrowthScoreCalculationExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddIncludeGrowthFactor(FlatBufferBuilder builder, Japan.GrowthFactor includeGrowthFactor) { builder.AddInt(1, (int)includeGrowthFactor, 0); }
  public static void AddConversionCoefficient(FlatBufferBuilder builder, long conversionCoefficient) { builder.AddLong(2, conversionCoefficient, 0); }
  public static Offset<Japan.GrowthScoreCalculationExcel> EndGrowthScoreCalculationExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.GrowthScoreCalculationExcel>(o);
  }
  public GrowthScoreCalculationExcelT UnPack() {
    var _o = new GrowthScoreCalculationExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GrowthScoreCalculationExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GrowthScoreCalculation");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.IncludeGrowthFactor = TableEncryptionService.UseEncryption ? (Japan.GrowthFactor)TableEncryptionService.Convert((int)this.IncludeGrowthFactor, key) : this.IncludeGrowthFactor;
    _o.ConversionCoefficient = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConversionCoefficient, key) : this.ConversionCoefficient;
  }
  public static Offset<Japan.GrowthScoreCalculationExcel> Pack(FlatBufferBuilder builder, GrowthScoreCalculationExcelT _o) {
    if (_o == null) return default(Offset<Japan.GrowthScoreCalculationExcel>);
		byte[] key = TableEncryptionService.CreateKey("GrowthScoreCalculation");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _IncludeGrowthFactor = TableEncryptionService.UseEncryption ? (Japan.GrowthFactor)TableEncryptionService.Convert((int)_o.IncludeGrowthFactor, key) : _o.IncludeGrowthFactor;
		var _ConversionCoefficient = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConversionCoefficient, key) : _o.ConversionCoefficient;
    return CreateGrowthScoreCalculationExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _IncludeGrowthFactor : _o.IncludeGrowthFactor,
      TableEncryptionService.UseEncryption ? _ConversionCoefficient : _o.ConversionCoefficient);
  }
}

public class GrowthScoreCalculationExcelT
{
  public long Id { get; set; }
  public Japan.GrowthFactor IncludeGrowthFactor { get; set; }
  public long ConversionCoefficient { get; set; }

  public GrowthScoreCalculationExcelT() {
    this.Id = 0;
    this.IncludeGrowthFactor = Japan.GrowthFactor.CharacterLevel;
    this.ConversionCoefficient = 0;
  }
}


static public class GrowthScoreCalculationExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*IncludeGrowthFactor*/, 4 /*Japan.GrowthFactor*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ConversionCoefficient*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
