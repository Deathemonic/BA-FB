// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattlePassInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassInfoExcel GetRootAsBattlePassInfoExcel(ByteBuffer _bb) { return GetRootAsBattlePassInfoExcel(_bb, new BattlePassInfoExcel()); }
  public static BattlePassInfoExcel GetRootAsBattlePassInfoExcel(ByteBuffer _bb, BattlePassInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FreeRewardGroupID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PurchaseRewardGroupID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NormalProductGroupID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PremiumProductGroupID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DiscountPremiumProductGroupID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int NextLvNeedExp { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PassLvUpGoodsID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int BuyPremiumLvUpAmount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SalePeriodFrom { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSalePeriodFromBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSalePeriodFromBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSalePeriodFromArray() { return __p.__vector_as_array<byte>(22); }
  public string SalePeriodTo { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSalePeriodToBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSalePeriodToBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSalePeriodToArray() { return __p.__vector_as_array<byte>(24); }
  public long VideoId(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int VideoIdLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetVideoIdBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetVideoIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetVideoIdArray() { return __p.__vector_as_array<long>(26); }
  public long FlavorTextGroupID { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExclusiveRewardID { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExclusiveEmblemID { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint PassExpLocalizeEtcId { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string LobbyBannerPath { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyBannerPathBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetLobbyBannerPathBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetLobbyBannerPathArray() { return __p.__vector_as_array<byte>(36); }
  public string MainIconParcelPath { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMainIconParcelPathBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetMainIconParcelPathBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetMainIconParcelPathArray() { return __p.__vector_as_array<byte>(38); }
  public string PurchaseStepProductImagePath { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPurchaseStepProductImagePathBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetPurchaseStepProductImagePathBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetPurchaseStepProductImagePathArray() { return __p.__vector_as_array<byte>(40); }

  public static Offset<Japan.BattlePassInfoExcel> CreateBattlePassInfoExcel(FlatBufferBuilder builder,
      long Id = 0,
      long FreeRewardGroupID = 0,
      long PurchaseRewardGroupID = 0,
      long NormalProductGroupID = 0,
      long PremiumProductGroupID = 0,
      long DiscountPremiumProductGroupID = 0,
      int NextLvNeedExp = 0,
      long PassLvUpGoodsID = 0,
      int BuyPremiumLvUpAmount = 0,
      StringOffset SalePeriodFromOffset = default(StringOffset),
      StringOffset SalePeriodToOffset = default(StringOffset),
      VectorOffset VideoIdOffset = default(VectorOffset),
      long FlavorTextGroupID = 0,
      long ExclusiveRewardID = 0,
      long ExclusiveEmblemID = 0,
      uint PassExpLocalizeEtcId = 0,
      StringOffset LobbyBannerPathOffset = default(StringOffset),
      StringOffset MainIconParcelPathOffset = default(StringOffset),
      StringOffset PurchaseStepProductImagePathOffset = default(StringOffset)) {
    builder.StartTable(19);
    BattlePassInfoExcel.AddExclusiveEmblemID(builder, ExclusiveEmblemID);
    BattlePassInfoExcel.AddExclusiveRewardID(builder, ExclusiveRewardID);
    BattlePassInfoExcel.AddFlavorTextGroupID(builder, FlavorTextGroupID);
    BattlePassInfoExcel.AddPassLvUpGoodsID(builder, PassLvUpGoodsID);
    BattlePassInfoExcel.AddDiscountPremiumProductGroupID(builder, DiscountPremiumProductGroupID);
    BattlePassInfoExcel.AddPremiumProductGroupID(builder, PremiumProductGroupID);
    BattlePassInfoExcel.AddNormalProductGroupID(builder, NormalProductGroupID);
    BattlePassInfoExcel.AddPurchaseRewardGroupID(builder, PurchaseRewardGroupID);
    BattlePassInfoExcel.AddFreeRewardGroupID(builder, FreeRewardGroupID);
    BattlePassInfoExcel.AddId(builder, Id);
    BattlePassInfoExcel.AddPurchaseStepProductImagePath(builder, PurchaseStepProductImagePathOffset);
    BattlePassInfoExcel.AddMainIconParcelPath(builder, MainIconParcelPathOffset);
    BattlePassInfoExcel.AddLobbyBannerPath(builder, LobbyBannerPathOffset);
    BattlePassInfoExcel.AddPassExpLocalizeEtcId(builder, PassExpLocalizeEtcId);
    BattlePassInfoExcel.AddVideoId(builder, VideoIdOffset);
    BattlePassInfoExcel.AddSalePeriodTo(builder, SalePeriodToOffset);
    BattlePassInfoExcel.AddSalePeriodFrom(builder, SalePeriodFromOffset);
    BattlePassInfoExcel.AddBuyPremiumLvUpAmount(builder, BuyPremiumLvUpAmount);
    BattlePassInfoExcel.AddNextLvNeedExp(builder, NextLvNeedExp);
    return BattlePassInfoExcel.EndBattlePassInfoExcel(builder);
  }

  public static void StartBattlePassInfoExcel(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddFreeRewardGroupID(FlatBufferBuilder builder, long freeRewardGroupID) { builder.AddLong(1, freeRewardGroupID, 0); }
  public static void AddPurchaseRewardGroupID(FlatBufferBuilder builder, long purchaseRewardGroupID) { builder.AddLong(2, purchaseRewardGroupID, 0); }
  public static void AddNormalProductGroupID(FlatBufferBuilder builder, long normalProductGroupID) { builder.AddLong(3, normalProductGroupID, 0); }
  public static void AddPremiumProductGroupID(FlatBufferBuilder builder, long premiumProductGroupID) { builder.AddLong(4, premiumProductGroupID, 0); }
  public static void AddDiscountPremiumProductGroupID(FlatBufferBuilder builder, long discountPremiumProductGroupID) { builder.AddLong(5, discountPremiumProductGroupID, 0); }
  public static void AddNextLvNeedExp(FlatBufferBuilder builder, int nextLvNeedExp) { builder.AddInt(6, nextLvNeedExp, 0); }
  public static void AddPassLvUpGoodsID(FlatBufferBuilder builder, long passLvUpGoodsID) { builder.AddLong(7, passLvUpGoodsID, 0); }
  public static void AddBuyPremiumLvUpAmount(FlatBufferBuilder builder, int buyPremiumLvUpAmount) { builder.AddInt(8, buyPremiumLvUpAmount, 0); }
  public static void AddSalePeriodFrom(FlatBufferBuilder builder, StringOffset salePeriodFromOffset) { builder.AddOffset(9, salePeriodFromOffset.Value, 0); }
  public static void AddSalePeriodTo(FlatBufferBuilder builder, StringOffset salePeriodToOffset) { builder.AddOffset(10, salePeriodToOffset.Value, 0); }
  public static void AddVideoId(FlatBufferBuilder builder, VectorOffset videoIdOffset) { builder.AddOffset(11, videoIdOffset.Value, 0); }
  public static VectorOffset CreateVideoIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVideoIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVideoIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVideoIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVideoIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddFlavorTextGroupID(FlatBufferBuilder builder, long flavorTextGroupID) { builder.AddLong(12, flavorTextGroupID, 0); }
  public static void AddExclusiveRewardID(FlatBufferBuilder builder, long exclusiveRewardID) { builder.AddLong(13, exclusiveRewardID, 0); }
  public static void AddExclusiveEmblemID(FlatBufferBuilder builder, long exclusiveEmblemID) { builder.AddLong(14, exclusiveEmblemID, 0); }
  public static void AddPassExpLocalizeEtcId(FlatBufferBuilder builder, uint passExpLocalizeEtcId) { builder.AddUint(15, passExpLocalizeEtcId, 0); }
  public static void AddLobbyBannerPath(FlatBufferBuilder builder, StringOffset lobbyBannerPathOffset) { builder.AddOffset(16, lobbyBannerPathOffset.Value, 0); }
  public static void AddMainIconParcelPath(FlatBufferBuilder builder, StringOffset mainIconParcelPathOffset) { builder.AddOffset(17, mainIconParcelPathOffset.Value, 0); }
  public static void AddPurchaseStepProductImagePath(FlatBufferBuilder builder, StringOffset purchaseStepProductImagePathOffset) { builder.AddOffset(18, purchaseStepProductImagePathOffset.Value, 0); }
  public static Offset<Japan.BattlePassInfoExcel> EndBattlePassInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.BattlePassInfoExcel>(o);
  }
  public BattlePassInfoExcelT UnPack() {
    var _o = new BattlePassInfoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassInfoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BattlePassInfo");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.FreeRewardGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FreeRewardGroupID, key) : this.FreeRewardGroupID;
    _o.PurchaseRewardGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PurchaseRewardGroupID, key) : this.PurchaseRewardGroupID;
    _o.NormalProductGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.NormalProductGroupID, key) : this.NormalProductGroupID;
    _o.PremiumProductGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PremiumProductGroupID, key) : this.PremiumProductGroupID;
    _o.DiscountPremiumProductGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DiscountPremiumProductGroupID, key) : this.DiscountPremiumProductGroupID;
    _o.NextLvNeedExp = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.NextLvNeedExp, key) : this.NextLvNeedExp;
    _o.PassLvUpGoodsID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PassLvUpGoodsID, key) : this.PassLvUpGoodsID;
    _o.BuyPremiumLvUpAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BuyPremiumLvUpAmount, key) : this.BuyPremiumLvUpAmount;
    _o.SalePeriodFrom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SalePeriodFrom, key) : this.SalePeriodFrom;
    _o.SalePeriodTo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SalePeriodTo, key) : this.SalePeriodTo;
    _o.VideoId = new List<long>();
    for (var _j = 0; _j < this.VideoIdLength; ++_j) {_o.VideoId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.VideoId(_j), key) : this.VideoId(_j));}
    _o.FlavorTextGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FlavorTextGroupID, key) : this.FlavorTextGroupID;
    _o.ExclusiveRewardID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExclusiveRewardID, key) : this.ExclusiveRewardID;
    _o.ExclusiveEmblemID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExclusiveEmblemID, key) : this.ExclusiveEmblemID;
    _o.PassExpLocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.PassExpLocalizeEtcId, key) : this.PassExpLocalizeEtcId;
    _o.LobbyBannerPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LobbyBannerPath, key) : this.LobbyBannerPath;
    _o.MainIconParcelPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.MainIconParcelPath, key) : this.MainIconParcelPath;
    _o.PurchaseStepProductImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PurchaseStepProductImagePath, key) : this.PurchaseStepProductImagePath;
  }
  public static Offset<Japan.BattlePassInfoExcel> Pack(FlatBufferBuilder builder, BattlePassInfoExcelT _o) {
    if (_o == null) return default(Offset<Japan.BattlePassInfoExcel>);
		byte[] key = TableEncryptionService.CreateKey("BattlePassInfo");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _FreeRewardGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FreeRewardGroupID, key) : _o.FreeRewardGroupID;
		var _PurchaseRewardGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PurchaseRewardGroupID, key) : _o.PurchaseRewardGroupID;
		var _NormalProductGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.NormalProductGroupID, key) : _o.NormalProductGroupID;
		var _PremiumProductGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PremiumProductGroupID, key) : _o.PremiumProductGroupID;
		var _DiscountPremiumProductGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DiscountPremiumProductGroupID, key) : _o.DiscountPremiumProductGroupID;
		var _NextLvNeedExp = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.NextLvNeedExp, key) : _o.NextLvNeedExp;
		var _PassLvUpGoodsID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PassLvUpGoodsID, key) : _o.PassLvUpGoodsID;
		var _BuyPremiumLvUpAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.BuyPremiumLvUpAmount, key) : _o.BuyPremiumLvUpAmount;
    var _SalePeriodFrom = _o.SalePeriodFrom == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SalePeriodFrom, key) : _o.SalePeriodFrom));
    var _SalePeriodTo = _o.SalePeriodTo == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SalePeriodTo, key) : _o.SalePeriodTo));
    var _VideoId = default(VectorOffset);
    if (_o.VideoId != null) {
      var __VideoId = _o.VideoId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _VideoId = CreateVideoIdVector(builder, __VideoId);
    }
		var _FlavorTextGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FlavorTextGroupID, key) : _o.FlavorTextGroupID;
		var _ExclusiveRewardID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExclusiveRewardID, key) : _o.ExclusiveRewardID;
		var _ExclusiveEmblemID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExclusiveEmblemID, key) : _o.ExclusiveEmblemID;
		var _PassExpLocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.PassExpLocalizeEtcId, key) : _o.PassExpLocalizeEtcId;
    var _LobbyBannerPath = _o.LobbyBannerPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LobbyBannerPath, key) : _o.LobbyBannerPath));
    var _MainIconParcelPath = _o.MainIconParcelPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.MainIconParcelPath, key) : _o.MainIconParcelPath));
    var _PurchaseStepProductImagePath = _o.PurchaseStepProductImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PurchaseStepProductImagePath, key) : _o.PurchaseStepProductImagePath));
    return CreateBattlePassInfoExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _FreeRewardGroupID : _o.FreeRewardGroupID,
      TableEncryptionService.UseEncryption ? _PurchaseRewardGroupID : _o.PurchaseRewardGroupID,
      TableEncryptionService.UseEncryption ? _NormalProductGroupID : _o.NormalProductGroupID,
      TableEncryptionService.UseEncryption ? _PremiumProductGroupID : _o.PremiumProductGroupID,
      TableEncryptionService.UseEncryption ? _DiscountPremiumProductGroupID : _o.DiscountPremiumProductGroupID,
      TableEncryptionService.UseEncryption ? _NextLvNeedExp : _o.NextLvNeedExp,
      TableEncryptionService.UseEncryption ? _PassLvUpGoodsID : _o.PassLvUpGoodsID,
      TableEncryptionService.UseEncryption ? _BuyPremiumLvUpAmount : _o.BuyPremiumLvUpAmount,
      _SalePeriodFrom,
      _SalePeriodTo,
      _VideoId,
      TableEncryptionService.UseEncryption ? _FlavorTextGroupID : _o.FlavorTextGroupID,
      TableEncryptionService.UseEncryption ? _ExclusiveRewardID : _o.ExclusiveRewardID,
      TableEncryptionService.UseEncryption ? _ExclusiveEmblemID : _o.ExclusiveEmblemID,
      TableEncryptionService.UseEncryption ? _PassExpLocalizeEtcId : _o.PassExpLocalizeEtcId,
      _LobbyBannerPath,
      _MainIconParcelPath,
      _PurchaseStepProductImagePath);
  }
}

public class BattlePassInfoExcelT
{
  public long Id { get; set; }
  public long FreeRewardGroupID { get; set; }
  public long PurchaseRewardGroupID { get; set; }
  public long NormalProductGroupID { get; set; }
  public long PremiumProductGroupID { get; set; }
  public long DiscountPremiumProductGroupID { get; set; }
  public int NextLvNeedExp { get; set; }
  public long PassLvUpGoodsID { get; set; }
  public int BuyPremiumLvUpAmount { get; set; }
  public string SalePeriodFrom { get; set; }
  public string SalePeriodTo { get; set; }
  public List<long> VideoId { get; set; }
  public long FlavorTextGroupID { get; set; }
  public long ExclusiveRewardID { get; set; }
  public long ExclusiveEmblemID { get; set; }
  public uint PassExpLocalizeEtcId { get; set; }
  public string LobbyBannerPath { get; set; }
  public string MainIconParcelPath { get; set; }
  public string PurchaseStepProductImagePath { get; set; }

  public BattlePassInfoExcelT() {
    this.Id = 0;
    this.FreeRewardGroupID = 0;
    this.PurchaseRewardGroupID = 0;
    this.NormalProductGroupID = 0;
    this.PremiumProductGroupID = 0;
    this.DiscountPremiumProductGroupID = 0;
    this.NextLvNeedExp = 0;
    this.PassLvUpGoodsID = 0;
    this.BuyPremiumLvUpAmount = 0;
    this.SalePeriodFrom = null;
    this.SalePeriodTo = null;
    this.VideoId = null;
    this.FlavorTextGroupID = 0;
    this.ExclusiveRewardID = 0;
    this.ExclusiveEmblemID = 0;
    this.PassExpLocalizeEtcId = 0;
    this.LobbyBannerPath = null;
    this.MainIconParcelPath = null;
    this.PurchaseStepProductImagePath = null;
  }
}


static public class BattlePassInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*FreeRewardGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PurchaseRewardGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*NormalProductGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*PremiumProductGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*DiscountPremiumProductGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*NextLvNeedExp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*PassLvUpGoodsID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*BuyPremiumLvUpAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*SalePeriodFrom*/, false)
      && verifier.VerifyString(tablePos, 24 /*SalePeriodTo*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*VideoId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 28 /*FlavorTextGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*ExclusiveRewardID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*ExclusiveEmblemID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*PassExpLocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*LobbyBannerPath*/, false)
      && verifier.VerifyString(tablePos, 38 /*MainIconParcelPath*/, false)
      && verifier.VerifyString(tablePos, 40 /*PurchaseStepProductImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
