// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameShootingGeasExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameShootingGeasExcel GetRootAsMiniGameShootingGeasExcel(ByteBuffer _bb) { return GetRootAsMiniGameShootingGeasExcel(_bb, new MiniGameShootingGeasExcel()); }
  public static MiniGameShootingGeasExcel GetRootAsMiniGameShootingGeasExcel(ByteBuffer _bb, MiniGameShootingGeasExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameShootingGeasExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.Geas GeasType { get { int o = __p.__offset(6); return o != 0 ? (Japan.Geas)__p.bb.GetInt(o + __p.bb_pos) : Japan.Geas.ForwardProjectile; } }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public long Probability { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxOverlapCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string GeasData { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeasDataBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetGeasDataBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetGeasDataArray() { return __p.__vector_as_array<byte>(14); }
  public long NeedGeasId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool HideInPausePopup { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Japan.MiniGameShootingGeasExcel> CreateMiniGameShootingGeasExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      Japan.Geas GeasType = Japan.Geas.ForwardProjectile,
      StringOffset IconOffset = default(StringOffset),
      long Probability = 0,
      int MaxOverlapCount = 0,
      StringOffset GeasDataOffset = default(StringOffset),
      long NeedGeasId = 0,
      bool HideInPausePopup = false) {
    builder.StartTable(8);
    MiniGameShootingGeasExcel.AddNeedGeasId(builder, NeedGeasId);
    MiniGameShootingGeasExcel.AddProbability(builder, Probability);
    MiniGameShootingGeasExcel.AddUniqueId(builder, UniqueId);
    MiniGameShootingGeasExcel.AddGeasData(builder, GeasDataOffset);
    MiniGameShootingGeasExcel.AddMaxOverlapCount(builder, MaxOverlapCount);
    MiniGameShootingGeasExcel.AddIcon(builder, IconOffset);
    MiniGameShootingGeasExcel.AddGeasType(builder, GeasType);
    MiniGameShootingGeasExcel.AddHideInPausePopup(builder, HideInPausePopup);
    return MiniGameShootingGeasExcel.EndMiniGameShootingGeasExcel(builder);
  }

  public static void StartMiniGameShootingGeasExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddGeasType(FlatBufferBuilder builder, Japan.Geas geasType) { builder.AddInt(1, (int)geasType, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(2, iconOffset.Value, 0); }
  public static void AddProbability(FlatBufferBuilder builder, long probability) { builder.AddLong(3, probability, 0); }
  public static void AddMaxOverlapCount(FlatBufferBuilder builder, int maxOverlapCount) { builder.AddInt(4, maxOverlapCount, 0); }
  public static void AddGeasData(FlatBufferBuilder builder, StringOffset geasDataOffset) { builder.AddOffset(5, geasDataOffset.Value, 0); }
  public static void AddNeedGeasId(FlatBufferBuilder builder, long needGeasId) { builder.AddLong(6, needGeasId, 0); }
  public static void AddHideInPausePopup(FlatBufferBuilder builder, bool hideInPausePopup) { builder.AddBool(7, hideInPausePopup, false); }
  public static Offset<Japan.MiniGameShootingGeasExcel> EndMiniGameShootingGeasExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MiniGameShootingGeasExcel>(o);
  }
  public MiniGameShootingGeasExcelT UnPack() {
    var _o = new MiniGameShootingGeasExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameShootingGeasExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameShootingGeas");
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.GeasType = TableEncryptionService.UseEncryption ? (Japan.Geas)TableEncryptionService.Convert((int)this.GeasType, key) : this.GeasType;
    _o.Icon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Icon, key) : this.Icon;
    _o.Probability = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Probability, key) : this.Probability;
    _o.MaxOverlapCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxOverlapCount, key) : this.MaxOverlapCount;
    _o.GeasData = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.GeasData, key) : this.GeasData;
    _o.NeedGeasId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.NeedGeasId, key) : this.NeedGeasId;
    _o.HideInPausePopup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.HideInPausePopup, key) : this.HideInPausePopup;
  }
  public static Offset<Japan.MiniGameShootingGeasExcel> Pack(FlatBufferBuilder builder, MiniGameShootingGeasExcelT _o) {
    if (_o == null) return default(Offset<Japan.MiniGameShootingGeasExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameShootingGeas");
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _GeasType = TableEncryptionService.UseEncryption ? (Japan.Geas)TableEncryptionService.Convert((int)_o.GeasType, key) : _o.GeasType;
    var _Icon = _o.Icon == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Icon, key) : _o.Icon));
		var _Probability = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Probability, key) : _o.Probability;
		var _MaxOverlapCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxOverlapCount, key) : _o.MaxOverlapCount;
    var _GeasData = _o.GeasData == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.GeasData, key) : _o.GeasData));
		var _NeedGeasId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.NeedGeasId, key) : _o.NeedGeasId;
		var _HideInPausePopup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.HideInPausePopup, key) : _o.HideInPausePopup;
    return CreateMiniGameShootingGeasExcel(
      builder,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _GeasType : _o.GeasType,
      _Icon,
      TableEncryptionService.UseEncryption ? _Probability : _o.Probability,
      TableEncryptionService.UseEncryption ? _MaxOverlapCount : _o.MaxOverlapCount,
      _GeasData,
      TableEncryptionService.UseEncryption ? _NeedGeasId : _o.NeedGeasId,
      TableEncryptionService.UseEncryption ? _HideInPausePopup : _o.HideInPausePopup);
  }
}

public class MiniGameShootingGeasExcelT
{
  public long UniqueId { get; set; }
  public Japan.Geas GeasType { get; set; }
  public string Icon { get; set; }
  public long Probability { get; set; }
  public int MaxOverlapCount { get; set; }
  public string GeasData { get; set; }
  public long NeedGeasId { get; set; }
  public bool HideInPausePopup { get; set; }

  public MiniGameShootingGeasExcelT() {
    this.UniqueId = 0;
    this.GeasType = Japan.Geas.ForwardProjectile;
    this.Icon = null;
    this.Probability = 0;
    this.MaxOverlapCount = 0;
    this.GeasData = null;
    this.NeedGeasId = 0;
    this.HideInPausePopup = false;
  }
}


static public class MiniGameShootingGeasExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GeasType*/, 4 /*Japan.Geas*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Icon*/, false)
      && verifier.VerifyField(tablePos, 10 /*Probability*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*MaxOverlapCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*GeasData*/, false)
      && verifier.VerifyField(tablePos, 16 /*NeedGeasId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*HideInPausePopup*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
