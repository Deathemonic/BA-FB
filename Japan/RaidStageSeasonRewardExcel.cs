// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct RaidStageSeasonRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RaidStageSeasonRewardExcel GetRootAsRaidStageSeasonRewardExcel(ByteBuffer _bb) { return GetRootAsRaidStageSeasonRewardExcel(_bb, new RaidStageSeasonRewardExcel()); }
  public static RaidStageSeasonRewardExcel GetRootAsRaidStageSeasonRewardExcel(ByteBuffer _bb, RaidStageSeasonRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RaidStageSeasonRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long SeasonRewardId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.ParcelType SeasonRewardParcelType(int j) { int o = __p.__offset(6); return o != 0 ? (Japan.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Japan.ParcelType)0; }
  public int SeasonRewardParcelTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Japan.ParcelType> GetSeasonRewardParcelTypeBytes() { return __p.__vector_as_span<Japan.ParcelType>(6, 4); }
#else
  public ArraySegment<byte>? GetSeasonRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Japan.ParcelType[] GetSeasonRewardParcelTypeArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Japan.ParcelType[] a = new Japan.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Japan.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long SeasonRewardParcelUniqueId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int SeasonRewardParcelUniqueIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetSeasonRewardParcelUniqueIdBytes() { return __p.__vector_as_span<long>(8, 8); }
#else
  public ArraySegment<byte>? GetSeasonRewardParcelUniqueIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public long[] GetSeasonRewardParcelUniqueIdArray() { return __p.__vector_as_array<long>(8); }
  public long SeasonRewardAmount(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int SeasonRewardAmountLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetSeasonRewardAmountBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetSeasonRewardAmountBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetSeasonRewardAmountArray() { return __p.__vector_as_array<long>(10); }

  public static Offset<Japan.RaidStageSeasonRewardExcel> CreateRaidStageSeasonRewardExcel(FlatBufferBuilder builder,
      long SeasonRewardId = 0,
      VectorOffset SeasonRewardParcelTypeOffset = default(VectorOffset),
      VectorOffset SeasonRewardParcelUniqueIdOffset = default(VectorOffset),
      VectorOffset SeasonRewardAmountOffset = default(VectorOffset)) {
    builder.StartTable(4);
    RaidStageSeasonRewardExcel.AddSeasonRewardId(builder, SeasonRewardId);
    RaidStageSeasonRewardExcel.AddSeasonRewardAmount(builder, SeasonRewardAmountOffset);
    RaidStageSeasonRewardExcel.AddSeasonRewardParcelUniqueId(builder, SeasonRewardParcelUniqueIdOffset);
    RaidStageSeasonRewardExcel.AddSeasonRewardParcelType(builder, SeasonRewardParcelTypeOffset);
    return RaidStageSeasonRewardExcel.EndRaidStageSeasonRewardExcel(builder);
  }

  public static void StartRaidStageSeasonRewardExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSeasonRewardId(FlatBufferBuilder builder, long seasonRewardId) { builder.AddLong(0, seasonRewardId, 0); }
  public static void AddSeasonRewardParcelType(FlatBufferBuilder builder, VectorOffset seasonRewardParcelTypeOffset) { builder.AddOffset(1, seasonRewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateSeasonRewardParcelTypeVector(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Japan.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Japan.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Japan.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSeasonRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSeasonRewardParcelUniqueId(FlatBufferBuilder builder, VectorOffset seasonRewardParcelUniqueIdOffset) { builder.AddOffset(2, seasonRewardParcelUniqueIdOffset.Value, 0); }
  public static VectorOffset CreateSeasonRewardParcelUniqueIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardParcelUniqueIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSeasonRewardParcelUniqueIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddSeasonRewardAmount(FlatBufferBuilder builder, VectorOffset seasonRewardAmountOffset) { builder.AddOffset(3, seasonRewardAmountOffset.Value, 0); }
  public static VectorOffset CreateSeasonRewardAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSeasonRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Japan.RaidStageSeasonRewardExcel> EndRaidStageSeasonRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.RaidStageSeasonRewardExcel>(o);
  }
  public RaidStageSeasonRewardExcelT UnPack() {
    var _o = new RaidStageSeasonRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RaidStageSeasonRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("RaidStageSeasonReward");
    _o.SeasonRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SeasonRewardId, key) : this.SeasonRewardId;
    _o.SeasonRewardParcelType = new List<Japan.ParcelType>();
    for (var _j = 0; _j < this.SeasonRewardParcelTypeLength; ++_j) {_o.SeasonRewardParcelType.Add(TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)this.SeasonRewardParcelType(_j), key) : this.SeasonRewardParcelType(_j));}
    _o.SeasonRewardParcelUniqueId = new List<long>();
    for (var _j = 0; _j < this.SeasonRewardParcelUniqueIdLength; ++_j) {_o.SeasonRewardParcelUniqueId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SeasonRewardParcelUniqueId(_j), key) : this.SeasonRewardParcelUniqueId(_j));}
    _o.SeasonRewardAmount = new List<long>();
    for (var _j = 0; _j < this.SeasonRewardAmountLength; ++_j) {_o.SeasonRewardAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SeasonRewardAmount(_j), key) : this.SeasonRewardAmount(_j));}
  }
  public static Offset<Japan.RaidStageSeasonRewardExcel> Pack(FlatBufferBuilder builder, RaidStageSeasonRewardExcelT _o) {
    if (_o == null) return default(Offset<Japan.RaidStageSeasonRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("RaidStageSeasonReward");
		var _SeasonRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SeasonRewardId, key) : _o.SeasonRewardId;
    var _SeasonRewardParcelType = default(VectorOffset);
    if (_o.SeasonRewardParcelType != null) {
      var __SeasonRewardParcelType = _o.SeasonRewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Japan.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _SeasonRewardParcelType = CreateSeasonRewardParcelTypeVector(builder, __SeasonRewardParcelType);
    }
    var _SeasonRewardParcelUniqueId = default(VectorOffset);
    if (_o.SeasonRewardParcelUniqueId != null) {
      var __SeasonRewardParcelUniqueId = _o.SeasonRewardParcelUniqueId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _SeasonRewardParcelUniqueId = CreateSeasonRewardParcelUniqueIdVector(builder, __SeasonRewardParcelUniqueId);
    }
    var _SeasonRewardAmount = default(VectorOffset);
    if (_o.SeasonRewardAmount != null) {
      var __SeasonRewardAmount = _o.SeasonRewardAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _SeasonRewardAmount = CreateSeasonRewardAmountVector(builder, __SeasonRewardAmount);
    }
    return CreateRaidStageSeasonRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _SeasonRewardId : _o.SeasonRewardId,
      _SeasonRewardParcelType,
      _SeasonRewardParcelUniqueId,
      _SeasonRewardAmount);
  }
}

public class RaidStageSeasonRewardExcelT
{
  public long SeasonRewardId { get; set; }
  public List<Japan.ParcelType> SeasonRewardParcelType { get; set; }
  public List<long> SeasonRewardParcelUniqueId { get; set; }
  public List<long> SeasonRewardAmount { get; set; }

  public RaidStageSeasonRewardExcelT() {
    this.SeasonRewardId = 0;
    this.SeasonRewardParcelType = null;
    this.SeasonRewardParcelUniqueId = null;
    this.SeasonRewardAmount = null;
  }
}


static public class RaidStageSeasonRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SeasonRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*SeasonRewardParcelType*/, 4 /*Japan.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*SeasonRewardParcelUniqueId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*SeasonRewardAmount*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
