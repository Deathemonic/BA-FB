// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct StrategyObjectBuffDefineExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static StrategyObjectBuffDefineExcel GetRootAsStrategyObjectBuffDefineExcel(ByteBuffer _bb) { return GetRootAsStrategyObjectBuffDefineExcel(_bb, new StrategyObjectBuffDefineExcel()); }
  public static StrategyObjectBuffDefineExcel GetRootAsStrategyObjectBuffDefineExcel(ByteBuffer _bb, StrategyObjectBuffDefineExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StrategyObjectBuffDefineExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long StrategyObjectBuffID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StrategyObjectTurn { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillGroupIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSkillGroupIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSkillGroupIdArray() { return __p.__vector_as_array<byte>(8); }
  public uint LocalizeCodeId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string IconPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconPathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconPathArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Japan.StrategyObjectBuffDefineExcel> CreateStrategyObjectBuffDefineExcel(FlatBufferBuilder builder,
      long StrategyObjectBuffID = 0,
      int StrategyObjectTurn = 0,
      StringOffset SkillGroupIdOffset = default(StringOffset),
      uint LocalizeCodeId = 0,
      StringOffset IconPathOffset = default(StringOffset)) {
    builder.StartTable(5);
    StrategyObjectBuffDefineExcel.AddStrategyObjectBuffID(builder, StrategyObjectBuffID);
    StrategyObjectBuffDefineExcel.AddIconPath(builder, IconPathOffset);
    StrategyObjectBuffDefineExcel.AddLocalizeCodeId(builder, LocalizeCodeId);
    StrategyObjectBuffDefineExcel.AddSkillGroupId(builder, SkillGroupIdOffset);
    StrategyObjectBuffDefineExcel.AddStrategyObjectTurn(builder, StrategyObjectTurn);
    return StrategyObjectBuffDefineExcel.EndStrategyObjectBuffDefineExcel(builder);
  }

  public static void StartStrategyObjectBuffDefineExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStrategyObjectBuffID(FlatBufferBuilder builder, long strategyObjectBuffID) { builder.AddLong(0, strategyObjectBuffID, 0); }
  public static void AddStrategyObjectTurn(FlatBufferBuilder builder, int strategyObjectTurn) { builder.AddInt(1, strategyObjectTurn, 0); }
  public static void AddSkillGroupId(FlatBufferBuilder builder, StringOffset skillGroupIdOffset) { builder.AddOffset(2, skillGroupIdOffset.Value, 0); }
  public static void AddLocalizeCodeId(FlatBufferBuilder builder, uint localizeCodeId) { builder.AddUint(3, localizeCodeId, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(4, iconPathOffset.Value, 0); }
  public static Offset<Japan.StrategyObjectBuffDefineExcel> EndStrategyObjectBuffDefineExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.StrategyObjectBuffDefineExcel>(o);
  }
  public StrategyObjectBuffDefineExcelT UnPack() {
    var _o = new StrategyObjectBuffDefineExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StrategyObjectBuffDefineExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("StrategyObjectBuffDefine");
    _o.StrategyObjectBuffID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StrategyObjectBuffID, key) : this.StrategyObjectBuffID;
    _o.StrategyObjectTurn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StrategyObjectTurn, key) : this.StrategyObjectTurn;
    _o.SkillGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SkillGroupId, key) : this.SkillGroupId;
    _o.LocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeCodeId, key) : this.LocalizeCodeId;
    _o.IconPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.IconPath, key) : this.IconPath;
  }
  public static Offset<Japan.StrategyObjectBuffDefineExcel> Pack(FlatBufferBuilder builder, StrategyObjectBuffDefineExcelT _o) {
    if (_o == null) return default(Offset<Japan.StrategyObjectBuffDefineExcel>);
		byte[] key = TableEncryptionService.CreateKey("StrategyObjectBuffDefine");
		var _StrategyObjectBuffID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StrategyObjectBuffID, key) : _o.StrategyObjectBuffID;
		var _StrategyObjectTurn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StrategyObjectTurn, key) : _o.StrategyObjectTurn;
    var _SkillGroupId = _o.SkillGroupId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SkillGroupId, key) : _o.SkillGroupId));
		var _LocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeCodeId, key) : _o.LocalizeCodeId;
    var _IconPath = _o.IconPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.IconPath, key) : _o.IconPath));
    return CreateStrategyObjectBuffDefineExcel(
      builder,
      TableEncryptionService.UseEncryption ? _StrategyObjectBuffID : _o.StrategyObjectBuffID,
      TableEncryptionService.UseEncryption ? _StrategyObjectTurn : _o.StrategyObjectTurn,
      _SkillGroupId,
      TableEncryptionService.UseEncryption ? _LocalizeCodeId : _o.LocalizeCodeId,
      _IconPath);
  }
}

public class StrategyObjectBuffDefineExcelT
{
  public long StrategyObjectBuffID { get; set; }
  public int StrategyObjectTurn { get; set; }
  public string SkillGroupId { get; set; }
  public uint LocalizeCodeId { get; set; }
  public string IconPath { get; set; }

  public StrategyObjectBuffDefineExcelT() {
    this.StrategyObjectBuffID = 0;
    this.StrategyObjectTurn = 0;
    this.SkillGroupId = null;
    this.LocalizeCodeId = 0;
    this.IconPath = null;
  }
}


static public class StrategyObjectBuffDefineExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*StrategyObjectBuffID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*StrategyObjectTurn*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*SkillGroupId*/, false)
      && verifier.VerifyField(tablePos, 10 /*LocalizeCodeId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*IconPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
