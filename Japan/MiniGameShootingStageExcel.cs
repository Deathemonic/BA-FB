// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Japan
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameShootingStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameShootingStageExcel GetRootAsMiniGameShootingStageExcel(ByteBuffer _bb) { return GetRootAsMiniGameShootingStageExcel(_bb, new MiniGameShootingStageExcel()); }
  public static MiniGameShootingStageExcel GetRootAsMiniGameShootingStageExcel(ByteBuffer _bb, MiniGameShootingStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameShootingStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BgmId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BgmIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBgmIdBytes() { return __p.__vector_as_span<long>(6, 8); }
#else
  public ArraySegment<byte>? GetBgmIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public long[] GetBgmIdArray() { return __p.__vector_as_array<long>(6); }
  public long CostGoodsId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Japan.Difficulty Difficulty { get { int o = __p.__offset(10); return o != 0 ? (Japan.Difficulty)__p.bb.GetInt(o + __p.bb_pos) : Japan.Difficulty.Normal; } }
  public string DesignLevel { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesignLevelBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDesignLevelBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDesignLevelArray() { return __p.__vector_as_array<byte>(12); }
  public string ArtLevel { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArtLevelBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetArtLevelBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetArtLevelArray() { return __p.__vector_as_array<byte>(14); }
  public long StartBattleDuration { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefaultBattleDuration { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DefaultLogicEffect { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefaultLogicEffectBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDefaultLogicEffectBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDefaultLogicEffectArray() { return __p.__vector_as_array<byte>(20); }
  public float CameraSizeRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long EventContentStageRewardId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Japan.MiniGameShootingStageExcel> CreateMiniGameShootingStageExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      VectorOffset BgmIdOffset = default(VectorOffset),
      long CostGoodsId = 0,
      Japan.Difficulty Difficulty = Japan.Difficulty.Normal,
      StringOffset DesignLevelOffset = default(StringOffset),
      StringOffset ArtLevelOffset = default(StringOffset),
      long StartBattleDuration = 0,
      long DefaultBattleDuration = 0,
      StringOffset DefaultLogicEffectOffset = default(StringOffset),
      float CameraSizeRate = 0.0f,
      long EventContentStageRewardId = 0) {
    builder.StartTable(11);
    MiniGameShootingStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId);
    MiniGameShootingStageExcel.AddDefaultBattleDuration(builder, DefaultBattleDuration);
    MiniGameShootingStageExcel.AddStartBattleDuration(builder, StartBattleDuration);
    MiniGameShootingStageExcel.AddCostGoodsId(builder, CostGoodsId);
    MiniGameShootingStageExcel.AddUniqueId(builder, UniqueId);
    MiniGameShootingStageExcel.AddCameraSizeRate(builder, CameraSizeRate);
    MiniGameShootingStageExcel.AddDefaultLogicEffect(builder, DefaultLogicEffectOffset);
    MiniGameShootingStageExcel.AddArtLevel(builder, ArtLevelOffset);
    MiniGameShootingStageExcel.AddDesignLevel(builder, DesignLevelOffset);
    MiniGameShootingStageExcel.AddDifficulty(builder, Difficulty);
    MiniGameShootingStageExcel.AddBgmId(builder, BgmIdOffset);
    return MiniGameShootingStageExcel.EndMiniGameShootingStageExcel(builder);
  }

  public static void StartMiniGameShootingStageExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddBgmId(FlatBufferBuilder builder, VectorOffset bgmIdOffset) { builder.AddOffset(1, bgmIdOffset.Value, 0); }
  public static VectorOffset CreateBgmIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBgmIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBgmIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBgmIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBgmIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCostGoodsId(FlatBufferBuilder builder, long costGoodsId) { builder.AddLong(2, costGoodsId, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, Japan.Difficulty difficulty) { builder.AddInt(3, (int)difficulty, 0); }
  public static void AddDesignLevel(FlatBufferBuilder builder, StringOffset designLevelOffset) { builder.AddOffset(4, designLevelOffset.Value, 0); }
  public static void AddArtLevel(FlatBufferBuilder builder, StringOffset artLevelOffset) { builder.AddOffset(5, artLevelOffset.Value, 0); }
  public static void AddStartBattleDuration(FlatBufferBuilder builder, long startBattleDuration) { builder.AddLong(6, startBattleDuration, 0); }
  public static void AddDefaultBattleDuration(FlatBufferBuilder builder, long defaultBattleDuration) { builder.AddLong(7, defaultBattleDuration, 0); }
  public static void AddDefaultLogicEffect(FlatBufferBuilder builder, StringOffset defaultLogicEffectOffset) { builder.AddOffset(8, defaultLogicEffectOffset.Value, 0); }
  public static void AddCameraSizeRate(FlatBufferBuilder builder, float cameraSizeRate) { builder.AddFloat(9, cameraSizeRate, 0.0f); }
  public static void AddEventContentStageRewardId(FlatBufferBuilder builder, long eventContentStageRewardId) { builder.AddLong(10, eventContentStageRewardId, 0); }
  public static Offset<Japan.MiniGameShootingStageExcel> EndMiniGameShootingStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Japan.MiniGameShootingStageExcel>(o);
  }
  public MiniGameShootingStageExcelT UnPack() {
    var _o = new MiniGameShootingStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameShootingStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameShootingStage");
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.BgmId = new List<long>();
    for (var _j = 0; _j < this.BgmIdLength; ++_j) {_o.BgmId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BgmId(_j), key) : this.BgmId(_j));}
    _o.CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostGoodsId, key) : this.CostGoodsId;
    _o.Difficulty = TableEncryptionService.UseEncryption ? (Japan.Difficulty)TableEncryptionService.Convert((int)this.Difficulty, key) : this.Difficulty;
    _o.DesignLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DesignLevel, key) : this.DesignLevel;
    _o.ArtLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ArtLevel, key) : this.ArtLevel;
    _o.StartBattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StartBattleDuration, key) : this.StartBattleDuration;
    _o.DefaultBattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefaultBattleDuration, key) : this.DefaultBattleDuration;
    _o.DefaultLogicEffect = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DefaultLogicEffect, key) : this.DefaultLogicEffect;
    _o.CameraSizeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraSizeRate, key) : this.CameraSizeRate;
    _o.EventContentStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentStageRewardId, key) : this.EventContentStageRewardId;
  }
  public static Offset<Japan.MiniGameShootingStageExcel> Pack(FlatBufferBuilder builder, MiniGameShootingStageExcelT _o) {
    if (_o == null) return default(Offset<Japan.MiniGameShootingStageExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameShootingStage");
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
    var _BgmId = default(VectorOffset);
    if (_o.BgmId != null) {
      var __BgmId = _o.BgmId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _BgmId = CreateBgmIdVector(builder, __BgmId);
    }
		var _CostGoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostGoodsId, key) : _o.CostGoodsId;
		var _Difficulty = TableEncryptionService.UseEncryption ? (Japan.Difficulty)TableEncryptionService.Convert((int)_o.Difficulty, key) : _o.Difficulty;
    var _DesignLevel = _o.DesignLevel == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DesignLevel, key) : _o.DesignLevel));
    var _ArtLevel = _o.ArtLevel == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ArtLevel, key) : _o.ArtLevel));
		var _StartBattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StartBattleDuration, key) : _o.StartBattleDuration;
		var _DefaultBattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefaultBattleDuration, key) : _o.DefaultBattleDuration;
    var _DefaultLogicEffect = _o.DefaultLogicEffect == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DefaultLogicEffect, key) : _o.DefaultLogicEffect));
		var _CameraSizeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraSizeRate, key) : _o.CameraSizeRate;
		var _EventContentStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentStageRewardId, key) : _o.EventContentStageRewardId;
    return CreateMiniGameShootingStageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      _BgmId,
      TableEncryptionService.UseEncryption ? _CostGoodsId : _o.CostGoodsId,
      TableEncryptionService.UseEncryption ? _Difficulty : _o.Difficulty,
      _DesignLevel,
      _ArtLevel,
      TableEncryptionService.UseEncryption ? _StartBattleDuration : _o.StartBattleDuration,
      TableEncryptionService.UseEncryption ? _DefaultBattleDuration : _o.DefaultBattleDuration,
      _DefaultLogicEffect,
      TableEncryptionService.UseEncryption ? _CameraSizeRate : _o.CameraSizeRate,
      TableEncryptionService.UseEncryption ? _EventContentStageRewardId : _o.EventContentStageRewardId);
  }
}

public class MiniGameShootingStageExcelT
{
  public long UniqueId { get; set; }
  public List<long> BgmId { get; set; }
  public long CostGoodsId { get; set; }
  public Japan.Difficulty Difficulty { get; set; }
  public string DesignLevel { get; set; }
  public string ArtLevel { get; set; }
  public long StartBattleDuration { get; set; }
  public long DefaultBattleDuration { get; set; }
  public string DefaultLogicEffect { get; set; }
  public float CameraSizeRate { get; set; }
  public long EventContentStageRewardId { get; set; }

  public MiniGameShootingStageExcelT() {
    this.UniqueId = 0;
    this.BgmId = null;
    this.CostGoodsId = 0;
    this.Difficulty = Japan.Difficulty.Normal;
    this.DesignLevel = null;
    this.ArtLevel = null;
    this.StartBattleDuration = 0;
    this.DefaultBattleDuration = 0;
    this.DefaultLogicEffect = null;
    this.CameraSizeRate = 0.0f;
    this.EventContentStageRewardId = 0;
  }
}


static public class MiniGameShootingStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*BgmId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 8 /*CostGoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*Difficulty*/, 4 /*Japan.Difficulty*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*DesignLevel*/, false)
      && verifier.VerifyString(tablePos, 14 /*ArtLevel*/, false)
      && verifier.VerifyField(tablePos, 16 /*StartBattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*DefaultBattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 20 /*DefaultLogicEffect*/, false)
      && verifier.VerifyField(tablePos, 22 /*CameraSizeRate*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*EventContentStageRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
