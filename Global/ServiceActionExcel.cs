// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ServiceActionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ServiceActionExcel GetRootAsServiceActionExcel(ByteBuffer _bb) { return GetRootAsServiceActionExcel(_bb, new ServiceActionExcel()); }
  public static ServiceActionExcel GetRootAsServiceActionExcel(ByteBuffer _bb, ServiceActionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ServiceActionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Global.ServiceActionType ServiceActionType { get { int o = __p.__offset(4); return o != 0 ? (Global.ServiceActionType)__p.bb.GetInt(o + __p.bb_pos) : Global.ServiceActionType.ClanCreate; } }
  public bool IsLegacy { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long GoodsId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.ServiceActionExcel> CreateServiceActionExcel(FlatBufferBuilder builder,
      Global.ServiceActionType ServiceActionType = Global.ServiceActionType.ClanCreate,
      bool IsLegacy = false,
      long GoodsId = 0) {
    builder.StartTable(3);
    ServiceActionExcel.AddGoodsId(builder, GoodsId);
    ServiceActionExcel.AddServiceActionType(builder, ServiceActionType);
    ServiceActionExcel.AddIsLegacy(builder, IsLegacy);
    return ServiceActionExcel.EndServiceActionExcel(builder);
  }

  public static void StartServiceActionExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddServiceActionType(FlatBufferBuilder builder, Global.ServiceActionType serviceActionType) { builder.AddInt(0, (int)serviceActionType, 0); }
  public static void AddIsLegacy(FlatBufferBuilder builder, bool isLegacy) { builder.AddBool(1, isLegacy, false); }
  public static void AddGoodsId(FlatBufferBuilder builder, long goodsId) { builder.AddLong(2, goodsId, 0); }
  public static Offset<Global.ServiceActionExcel> EndServiceActionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ServiceActionExcel>(o);
  }
  public ServiceActionExcelT UnPack() {
    var _o = new ServiceActionExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ServiceActionExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ServiceAction");
    _o.ServiceActionType = TableEncryptionService.UseEncryption ? (Global.ServiceActionType)TableEncryptionService.Convert((int)this.ServiceActionType, key) : this.ServiceActionType;
    _o.IsLegacy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsLegacy, key) : this.IsLegacy;
    _o.GoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GoodsId, key) : this.GoodsId;
  }
  public static Offset<Global.ServiceActionExcel> Pack(FlatBufferBuilder builder, ServiceActionExcelT _o) {
    if (_o == null) return default(Offset<Global.ServiceActionExcel>);
		byte[] key = TableEncryptionService.CreateKey("ServiceAction");
		var _ServiceActionType = TableEncryptionService.UseEncryption ? (Global.ServiceActionType)TableEncryptionService.Convert((int)_o.ServiceActionType, key) : _o.ServiceActionType;
		var _IsLegacy = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsLegacy, key) : _o.IsLegacy;
		var _GoodsId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GoodsId, key) : _o.GoodsId;
    return CreateServiceActionExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ServiceActionType : _o.ServiceActionType,
      TableEncryptionService.UseEncryption ? _IsLegacy : _o.IsLegacy,
      TableEncryptionService.UseEncryption ? _GoodsId : _o.GoodsId);
  }
}

public class ServiceActionExcelT
{
  public Global.ServiceActionType ServiceActionType { get; set; }
  public bool IsLegacy { get; set; }
  public long GoodsId { get; set; }

  public ServiceActionExcelT() {
    this.ServiceActionType = Global.ServiceActionType.ClanCreate;
    this.IsLegacy = false;
    this.GoodsId = 0;
  }
}


static public class ServiceActionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ServiceActionType*/, 4 /*Global.ServiceActionType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*IsLegacy*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*GoodsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
