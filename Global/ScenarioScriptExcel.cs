// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ScenarioScriptExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScenarioScriptExcel GetRootAsScenarioScriptExcel(ByteBuffer _bb) { return GetRootAsScenarioScriptExcel(_bb, new ScenarioScriptExcel()); }
  public static ScenarioScriptExcel GetRootAsScenarioScriptExcel(ByteBuffer _bb, ScenarioScriptExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioScriptExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SelectionGroup { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Sound { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSoundBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSoundArray() { return __p.__vector_as_array<byte>(10); }
  public uint Transition { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint BGName { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint BGEffect { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string PopupFileName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPopupFileNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPopupFileNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPopupFileNameArray() { return __p.__vector_as_array<byte>(18); }
  public string ScriptKr { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScriptKrBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetScriptKrBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetScriptKrArray() { return __p.__vector_as_array<byte>(20); }
  public string TextJp { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextJpBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTextJpBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTextJpArray() { return __p.__vector_as_array<byte>(22); }
  public string TextTh { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextThBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTextThBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTextThArray() { return __p.__vector_as_array<byte>(24); }
  public string TextTw { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextTwBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTextTwBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTextTwArray() { return __p.__vector_as_array<byte>(26); }
  public string TextEn { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextEnBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTextEnBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTextEnArray() { return __p.__vector_as_array<byte>(28); }
  public uint VoiceId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool TeenMode { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Global.ScenarioScriptExcel> CreateScenarioScriptExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      long SelectionGroup = 0,
      long BGMId = 0,
      StringOffset SoundOffset = default(StringOffset),
      uint Transition = 0,
      uint BGName = 0,
      uint BGEffect = 0,
      StringOffset PopupFileNameOffset = default(StringOffset),
      StringOffset ScriptKrOffset = default(StringOffset),
      StringOffset TextJpOffset = default(StringOffset),
      StringOffset TextThOffset = default(StringOffset),
      StringOffset TextTwOffset = default(StringOffset),
      StringOffset TextEnOffset = default(StringOffset),
      uint VoiceId = 0,
      bool TeenMode = false) {
    builder.StartTable(15);
    ScenarioScriptExcel.AddBGMId(builder, BGMId);
    ScenarioScriptExcel.AddSelectionGroup(builder, SelectionGroup);
    ScenarioScriptExcel.AddGroupId(builder, GroupId);
    ScenarioScriptExcel.AddVoiceId(builder, VoiceId);
    ScenarioScriptExcel.AddTextEn(builder, TextEnOffset);
    ScenarioScriptExcel.AddTextTw(builder, TextTwOffset);
    ScenarioScriptExcel.AddTextTh(builder, TextThOffset);
    ScenarioScriptExcel.AddTextJp(builder, TextJpOffset);
    ScenarioScriptExcel.AddScriptKr(builder, ScriptKrOffset);
    ScenarioScriptExcel.AddPopupFileName(builder, PopupFileNameOffset);
    ScenarioScriptExcel.AddBGEffect(builder, BGEffect);
    ScenarioScriptExcel.AddBGName(builder, BGName);
    ScenarioScriptExcel.AddTransition(builder, Transition);
    ScenarioScriptExcel.AddSound(builder, SoundOffset);
    ScenarioScriptExcel.AddTeenMode(builder, TeenMode);
    return ScenarioScriptExcel.EndScenarioScriptExcel(builder);
  }

  public static void StartScenarioScriptExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddSelectionGroup(FlatBufferBuilder builder, long selectionGroup) { builder.AddLong(1, selectionGroup, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(2, bGMId, 0); }
  public static void AddSound(FlatBufferBuilder builder, StringOffset soundOffset) { builder.AddOffset(3, soundOffset.Value, 0); }
  public static void AddTransition(FlatBufferBuilder builder, uint transition) { builder.AddUint(4, transition, 0); }
  public static void AddBGName(FlatBufferBuilder builder, uint bGName) { builder.AddUint(5, bGName, 0); }
  public static void AddBGEffect(FlatBufferBuilder builder, uint bGEffect) { builder.AddUint(6, bGEffect, 0); }
  public static void AddPopupFileName(FlatBufferBuilder builder, StringOffset popupFileNameOffset) { builder.AddOffset(7, popupFileNameOffset.Value, 0); }
  public static void AddScriptKr(FlatBufferBuilder builder, StringOffset scriptKrOffset) { builder.AddOffset(8, scriptKrOffset.Value, 0); }
  public static void AddTextJp(FlatBufferBuilder builder, StringOffset textJpOffset) { builder.AddOffset(9, textJpOffset.Value, 0); }
  public static void AddTextTh(FlatBufferBuilder builder, StringOffset textThOffset) { builder.AddOffset(10, textThOffset.Value, 0); }
  public static void AddTextTw(FlatBufferBuilder builder, StringOffset textTwOffset) { builder.AddOffset(11, textTwOffset.Value, 0); }
  public static void AddTextEn(FlatBufferBuilder builder, StringOffset textEnOffset) { builder.AddOffset(12, textEnOffset.Value, 0); }
  public static void AddVoiceId(FlatBufferBuilder builder, uint voiceId) { builder.AddUint(13, voiceId, 0); }
  public static void AddTeenMode(FlatBufferBuilder builder, bool teenMode) { builder.AddBool(14, teenMode, false); }
  public static Offset<Global.ScenarioScriptExcel> EndScenarioScriptExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ScenarioScriptExcel>(o);
  }
  public ScenarioScriptExcelT UnPack() {
    var _o = new ScenarioScriptExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioScriptExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ScenarioScript");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.SelectionGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SelectionGroup, key) : this.SelectionGroup;
    _o.BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BGMId, key) : this.BGMId;
    _o.Sound = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Sound, key) : this.Sound;
    _o.Transition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Transition, key) : this.Transition;
    _o.BGName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.BGName, key) : this.BGName;
    _o.BGEffect = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.BGEffect, key) : this.BGEffect;
    _o.PopupFileName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PopupFileName, key) : this.PopupFileName;
    _o.ScriptKr = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ScriptKr, key) : this.ScriptKr;
    _o.TextJp = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TextJp, key) : this.TextJp;
    _o.TextTh = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TextTh, key) : this.TextTh;
    _o.TextTw = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TextTw, key) : this.TextTw;
    _o.TextEn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TextEn, key) : this.TextEn;
    _o.VoiceId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.VoiceId, key) : this.VoiceId;
    _o.TeenMode = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.TeenMode, key) : this.TeenMode;
  }
  public static Offset<Global.ScenarioScriptExcel> Pack(FlatBufferBuilder builder, ScenarioScriptExcelT _o) {
    if (_o == null) return default(Offset<Global.ScenarioScriptExcel>);
		byte[] key = TableEncryptionService.CreateKey("ScenarioScript");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _SelectionGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SelectionGroup, key) : _o.SelectionGroup;
		var _BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BGMId, key) : _o.BGMId;
    var _Sound = _o.Sound == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Sound, key) : _o.Sound));
		var _Transition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Transition, key) : _o.Transition;
		var _BGName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.BGName, key) : _o.BGName;
		var _BGEffect = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.BGEffect, key) : _o.BGEffect;
    var _PopupFileName = _o.PopupFileName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PopupFileName, key) : _o.PopupFileName));
    var _ScriptKr = _o.ScriptKr == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ScriptKr, key) : _o.ScriptKr));
    var _TextJp = _o.TextJp == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TextJp, key) : _o.TextJp));
    var _TextTh = _o.TextTh == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TextTh, key) : _o.TextTh));
    var _TextTw = _o.TextTw == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TextTw, key) : _o.TextTw));
    var _TextEn = _o.TextEn == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TextEn, key) : _o.TextEn));
		var _VoiceId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.VoiceId, key) : _o.VoiceId;
		var _TeenMode = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.TeenMode, key) : _o.TeenMode;
    return CreateScenarioScriptExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _SelectionGroup : _o.SelectionGroup,
      TableEncryptionService.UseEncryption ? _BGMId : _o.BGMId,
      _Sound,
      TableEncryptionService.UseEncryption ? _Transition : _o.Transition,
      TableEncryptionService.UseEncryption ? _BGName : _o.BGName,
      TableEncryptionService.UseEncryption ? _BGEffect : _o.BGEffect,
      _PopupFileName,
      _ScriptKr,
      _TextJp,
      _TextTh,
      _TextTw,
      _TextEn,
      TableEncryptionService.UseEncryption ? _VoiceId : _o.VoiceId,
      TableEncryptionService.UseEncryption ? _TeenMode : _o.TeenMode);
  }
}

public class ScenarioScriptExcelT
{
  public long GroupId { get; set; }
  public long SelectionGroup { get; set; }
  public long BGMId { get; set; }
  public string Sound { get; set; }
  public uint Transition { get; set; }
  public uint BGName { get; set; }
  public uint BGEffect { get; set; }
  public string PopupFileName { get; set; }
  public string ScriptKr { get; set; }
  public string TextJp { get; set; }
  public string TextTh { get; set; }
  public string TextTw { get; set; }
  public string TextEn { get; set; }
  public uint VoiceId { get; set; }
  public bool TeenMode { get; set; }

  public ScenarioScriptExcelT() {
    this.GroupId = 0;
    this.SelectionGroup = 0;
    this.BGMId = 0;
    this.Sound = null;
    this.Transition = 0;
    this.BGName = 0;
    this.BGEffect = 0;
    this.PopupFileName = null;
    this.ScriptKr = null;
    this.TextJp = null;
    this.TextTh = null;
    this.TextTw = null;
    this.TextEn = null;
    this.VoiceId = 0;
    this.TeenMode = false;
  }
}


static public class ScenarioScriptExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*SelectionGroup*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*Sound*/, false)
      && verifier.VerifyField(tablePos, 12 /*Transition*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*BGName*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*BGEffect*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*PopupFileName*/, false)
      && verifier.VerifyString(tablePos, 20 /*ScriptKr*/, false)
      && verifier.VerifyString(tablePos, 22 /*TextJp*/, false)
      && verifier.VerifyString(tablePos, 24 /*TextTh*/, false)
      && verifier.VerifyString(tablePos, 26 /*TextTw*/, false)
      && verifier.VerifyString(tablePos, 28 /*TextEn*/, false)
      && verifier.VerifyField(tablePos, 30 /*VoiceId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*TeenMode*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
