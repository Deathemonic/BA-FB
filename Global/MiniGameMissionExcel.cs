// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameMissionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameMissionExcel GetRootAsMiniGameMissionExcel(ByteBuffer _bb) { return GetRootAsMiniGameMissionExcel(_bb, new MiniGameMissionExcel()); }
  public static MiniGameMissionExcel GetRootAsMiniGameMissionExcel(ByteBuffer _bb, MiniGameMissionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameMissionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GroupName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetGroupNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetGroupNameArray() { return __p.__vector_as_array<byte>(10); }
  public Global.MissionCategory Category { get { int o = __p.__offset(12); return o != 0 ? (Global.MissionCategory)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionCategory.Challenge; } }
  public uint Description { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Global.MissionResetType ResetType { get { int o = __p.__offset(16); return o != 0 ? (Global.MissionResetType)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionResetType.None; } }
  public Global.MissionToastDisplayConditionType ToastDisplayType { get { int o = __p.__offset(18); return o != 0 ? (Global.MissionToastDisplayConditionType)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionToastDisplayConditionType.Always; } }
  public string ToastImagePath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetToastImagePathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetToastImagePathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetToastImagePathArray() { return __p.__vector_as_array<byte>(20); }
  public bool ViewFlag { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long DisplayOrder { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PreMissionId(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int PreMissionIdLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetPreMissionIdBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetPreMissionIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetPreMissionIdArray() { return __p.__vector_as_array<long>(26); }
  public Global.AccountState AccountType { get { int o = __p.__offset(28); return o != 0 ? (Global.AccountState)__p.bb.GetInt(o + __p.bb_pos) : Global.AccountState.WaitingSignIn; } }
  public long AccountLevel { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShortcutUI(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ShortcutUILength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Global.MissionCompleteConditionType CompleteConditionType { get { int o = __p.__offset(34); return o != 0 ? (Global.MissionCompleteConditionType)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionCompleteConditionType.None; } }
  public bool IsCompleteExtensionTime { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long CompleteConditionCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CompleteConditionParameter(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int CompleteConditionParameterLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetCompleteConditionParameterBytes() { return __p.__vector_as_span<long>(40, 8); }
#else
  public ArraySegment<byte>? GetCompleteConditionParameterBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public long[] GetCompleteConditionParameterArray() { return __p.__vector_as_array<long>(40); }
  public Global.Tag CompleteConditionParameterTag(int j) { int o = __p.__offset(42); return o != 0 ? (Global.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.Tag)0; }
  public int CompleteConditionParameterTagLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.Tag> GetCompleteConditionParameterTagBytes() { return __p.__vector_as_span<Global.Tag>(42, 4); }
#else
  public ArraySegment<byte>? GetCompleteConditionParameterTagBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public Global.Tag[] GetCompleteConditionParameterTagArray() { int o = __p.__offset(42); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.Tag[] a = new Global.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (Global.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public string RewardIcon { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRewardIconBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetRewardIconBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetRewardIconArray() { return __p.__vector_as_array<byte>(44); }
  public long CompleteConditionMissionId(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int CompleteConditionMissionIdLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetCompleteConditionMissionIdBytes() { return __p.__vector_as_span<long>(46, 8); }
#else
  public ArraySegment<byte>? GetCompleteConditionMissionIdBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public long[] GetCompleteConditionMissionIdArray() { return __p.__vector_as_array<long>(46); }
  public long CompleteConditionMissionCount { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType MissionRewardParcelType(int j) { int o = __p.__offset(50); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ParcelType)0; }
  public int MissionRewardParcelTypeLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ParcelType> GetMissionRewardParcelTypeBytes() { return __p.__vector_as_span<Global.ParcelType>(50, 4); }
#else
  public ArraySegment<byte>? GetMissionRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public Global.ParcelType[] GetMissionRewardParcelTypeArray() { int o = __p.__offset(50); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ParcelType[] a = new Global.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long MissionRewardParcelId(int j) { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MissionRewardParcelIdLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetMissionRewardParcelIdBytes() { return __p.__vector_as_span<long>(52, 8); }
#else
  public ArraySegment<byte>? GetMissionRewardParcelIdBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public long[] GetMissionRewardParcelIdArray() { return __p.__vector_as_array<long>(52); }
  public int MissionRewardAmount(int j) { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MissionRewardAmountLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMissionRewardAmountBytes() { return __p.__vector_as_span<int>(54, 4); }
#else
  public ArraySegment<byte>? GetMissionRewardAmountBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public int[] GetMissionRewardAmountArray() { return __p.__vector_as_array<int>(54); }
  public Global.ParcelType ConditionRewardParcelType(int j) { int o = __p.__offset(56); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ParcelType)0; }
  public int ConditionRewardParcelTypeLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ParcelType> GetConditionRewardParcelTypeBytes() { return __p.__vector_as_span<Global.ParcelType>(56, 4); }
#else
  public ArraySegment<byte>? GetConditionRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public Global.ParcelType[] GetConditionRewardParcelTypeArray() { int o = __p.__offset(56); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ParcelType[] a = new Global.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ConditionRewardParcelId(int j) { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionRewardParcelIdLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionRewardParcelIdBytes() { return __p.__vector_as_span<long>(58, 8); }
#else
  public ArraySegment<byte>? GetConditionRewardParcelIdBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public long[] GetConditionRewardParcelIdArray() { return __p.__vector_as_array<long>(58); }
  public int ConditionRewardAmount(int j) { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConditionRewardAmountLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetConditionRewardAmountBytes() { return __p.__vector_as_span<int>(60, 4); }
#else
  public ArraySegment<byte>? GetConditionRewardAmountBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public int[] GetConditionRewardAmountArray() { return __p.__vector_as_array<int>(60); }

  public static Offset<Global.MiniGameMissionExcel> CreateMiniGameMissionExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      long GroupId = 0,
      StringOffset GroupNameOffset = default(StringOffset),
      Global.MissionCategory Category = Global.MissionCategory.Challenge,
      uint Description = 0,
      Global.MissionResetType ResetType = Global.MissionResetType.None,
      Global.MissionToastDisplayConditionType ToastDisplayType = Global.MissionToastDisplayConditionType.Always,
      StringOffset ToastImagePathOffset = default(StringOffset),
      bool ViewFlag = false,
      long DisplayOrder = 0,
      VectorOffset PreMissionIdOffset = default(VectorOffset),
      Global.AccountState AccountType = Global.AccountState.WaitingSignIn,
      long AccountLevel = 0,
      VectorOffset ShortcutUIOffset = default(VectorOffset),
      Global.MissionCompleteConditionType CompleteConditionType = Global.MissionCompleteConditionType.None,
      bool IsCompleteExtensionTime = false,
      long CompleteConditionCount = 0,
      VectorOffset CompleteConditionParameterOffset = default(VectorOffset),
      VectorOffset CompleteConditionParameterTagOffset = default(VectorOffset),
      StringOffset RewardIconOffset = default(StringOffset),
      VectorOffset CompleteConditionMissionIdOffset = default(VectorOffset),
      long CompleteConditionMissionCount = 0,
      VectorOffset MissionRewardParcelTypeOffset = default(VectorOffset),
      VectorOffset MissionRewardParcelIdOffset = default(VectorOffset),
      VectorOffset MissionRewardAmountOffset = default(VectorOffset),
      VectorOffset ConditionRewardParcelTypeOffset = default(VectorOffset),
      VectorOffset ConditionRewardParcelIdOffset = default(VectorOffset),
      VectorOffset ConditionRewardAmountOffset = default(VectorOffset)) {
    builder.StartTable(29);
    MiniGameMissionExcel.AddCompleteConditionMissionCount(builder, CompleteConditionMissionCount);
    MiniGameMissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount);
    MiniGameMissionExcel.AddAccountLevel(builder, AccountLevel);
    MiniGameMissionExcel.AddDisplayOrder(builder, DisplayOrder);
    MiniGameMissionExcel.AddGroupId(builder, GroupId);
    MiniGameMissionExcel.AddEventContentId(builder, EventContentId);
    MiniGameMissionExcel.AddId(builder, Id);
    MiniGameMissionExcel.AddConditionRewardAmount(builder, ConditionRewardAmountOffset);
    MiniGameMissionExcel.AddConditionRewardParcelId(builder, ConditionRewardParcelIdOffset);
    MiniGameMissionExcel.AddConditionRewardParcelType(builder, ConditionRewardParcelTypeOffset);
    MiniGameMissionExcel.AddMissionRewardAmount(builder, MissionRewardAmountOffset);
    MiniGameMissionExcel.AddMissionRewardParcelId(builder, MissionRewardParcelIdOffset);
    MiniGameMissionExcel.AddMissionRewardParcelType(builder, MissionRewardParcelTypeOffset);
    MiniGameMissionExcel.AddCompleteConditionMissionId(builder, CompleteConditionMissionIdOffset);
    MiniGameMissionExcel.AddRewardIcon(builder, RewardIconOffset);
    MiniGameMissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTagOffset);
    MiniGameMissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameterOffset);
    MiniGameMissionExcel.AddCompleteConditionType(builder, CompleteConditionType);
    MiniGameMissionExcel.AddShortcutUI(builder, ShortcutUIOffset);
    MiniGameMissionExcel.AddAccountType(builder, AccountType);
    MiniGameMissionExcel.AddPreMissionId(builder, PreMissionIdOffset);
    MiniGameMissionExcel.AddToastImagePath(builder, ToastImagePathOffset);
    MiniGameMissionExcel.AddToastDisplayType(builder, ToastDisplayType);
    MiniGameMissionExcel.AddResetType(builder, ResetType);
    MiniGameMissionExcel.AddDescription(builder, Description);
    MiniGameMissionExcel.AddCategory(builder, Category);
    MiniGameMissionExcel.AddGroupName(builder, GroupNameOffset);
    MiniGameMissionExcel.AddIsCompleteExtensionTime(builder, IsCompleteExtensionTime);
    MiniGameMissionExcel.AddViewFlag(builder, ViewFlag);
    return MiniGameMissionExcel.EndMiniGameMissionExcel(builder);
  }

  public static void StartMiniGameMissionExcel(FlatBufferBuilder builder) { builder.StartTable(29); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(2, groupId, 0); }
  public static void AddGroupName(FlatBufferBuilder builder, StringOffset groupNameOffset) { builder.AddOffset(3, groupNameOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, Global.MissionCategory category) { builder.AddInt(4, (int)category, 0); }
  public static void AddDescription(FlatBufferBuilder builder, uint description) { builder.AddUint(5, description, 0); }
  public static void AddResetType(FlatBufferBuilder builder, Global.MissionResetType resetType) { builder.AddInt(6, (int)resetType, 0); }
  public static void AddToastDisplayType(FlatBufferBuilder builder, Global.MissionToastDisplayConditionType toastDisplayType) { builder.AddInt(7, (int)toastDisplayType, 0); }
  public static void AddToastImagePath(FlatBufferBuilder builder, StringOffset toastImagePathOffset) { builder.AddOffset(8, toastImagePathOffset.Value, 0); }
  public static void AddViewFlag(FlatBufferBuilder builder, bool viewFlag) { builder.AddBool(9, viewFlag, false); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(10, displayOrder, 0); }
  public static void AddPreMissionId(FlatBufferBuilder builder, VectorOffset preMissionIdOffset) { builder.AddOffset(11, preMissionIdOffset.Value, 0); }
  public static VectorOffset CreatePreMissionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreMissionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddAccountType(FlatBufferBuilder builder, Global.AccountState accountType) { builder.AddInt(12, (int)accountType, 0); }
  public static void AddAccountLevel(FlatBufferBuilder builder, long accountLevel) { builder.AddLong(13, accountLevel, 0); }
  public static void AddShortcutUI(FlatBufferBuilder builder, VectorOffset shortcutUIOffset) { builder.AddOffset(14, shortcutUIOffset.Value, 0); }
  public static VectorOffset CreateShortcutUIVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShortcutUIVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCompleteConditionType(FlatBufferBuilder builder, Global.MissionCompleteConditionType completeConditionType) { builder.AddInt(15, (int)completeConditionType, 0); }
  public static void AddIsCompleteExtensionTime(FlatBufferBuilder builder, bool isCompleteExtensionTime) { builder.AddBool(16, isCompleteExtensionTime, false); }
  public static void AddCompleteConditionCount(FlatBufferBuilder builder, long completeConditionCount) { builder.AddLong(17, completeConditionCount, 0); }
  public static void AddCompleteConditionParameter(FlatBufferBuilder builder, VectorOffset completeConditionParameterOffset) { builder.AddOffset(18, completeConditionParameterOffset.Value, 0); }
  public static VectorOffset CreateCompleteConditionParameterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompleteConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCompleteConditionParameterTag(FlatBufferBuilder builder, VectorOffset completeConditionParameterTagOffset) { builder.AddOffset(19, completeConditionParameterTagOffset.Value, 0); }
  public static VectorOffset CreateCompleteConditionParameterTagVector(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompleteConditionParameterTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardIcon(FlatBufferBuilder builder, StringOffset rewardIconOffset) { builder.AddOffset(20, rewardIconOffset.Value, 0); }
  public static void AddCompleteConditionMissionId(FlatBufferBuilder builder, VectorOffset completeConditionMissionIdOffset) { builder.AddOffset(21, completeConditionMissionIdOffset.Value, 0); }
  public static VectorOffset CreateCompleteConditionMissionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionMissionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionMissionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionMissionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompleteConditionMissionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCompleteConditionMissionCount(FlatBufferBuilder builder, long completeConditionMissionCount) { builder.AddLong(22, completeConditionMissionCount, 0); }
  public static void AddMissionRewardParcelType(FlatBufferBuilder builder, VectorOffset missionRewardParcelTypeOffset) { builder.AddOffset(23, missionRewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateMissionRewardParcelTypeVector(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissionRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMissionRewardParcelId(FlatBufferBuilder builder, VectorOffset missionRewardParcelIdOffset) { builder.AddOffset(24, missionRewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateMissionRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissionRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMissionRewardAmount(FlatBufferBuilder builder, VectorOffset missionRewardAmountOffset) { builder.AddOffset(25, missionRewardAmountOffset.Value, 0); }
  public static VectorOffset CreateMissionRewardAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissionRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionRewardParcelType(FlatBufferBuilder builder, VectorOffset conditionRewardParcelTypeOffset) { builder.AddOffset(26, conditionRewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateConditionRewardParcelTypeVector(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionRewardParcelId(FlatBufferBuilder builder, VectorOffset conditionRewardParcelIdOffset) { builder.AddOffset(27, conditionRewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateConditionRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConditionRewardAmount(FlatBufferBuilder builder, VectorOffset conditionRewardAmountOffset) { builder.AddOffset(28, conditionRewardAmountOffset.Value, 0); }
  public static VectorOffset CreateConditionRewardAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.MiniGameMissionExcel> EndMiniGameMissionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MiniGameMissionExcel>(o);
  }
  public MiniGameMissionExcelT UnPack() {
    var _o = new MiniGameMissionExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameMissionExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameMission");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.GroupName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.GroupName, key) : this.GroupName;
    _o.Category = TableEncryptionService.UseEncryption ? (Global.MissionCategory)TableEncryptionService.Convert((int)this.Category, key) : this.Category;
    _o.Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Description, key) : this.Description;
    _o.ResetType = TableEncryptionService.UseEncryption ? (Global.MissionResetType)TableEncryptionService.Convert((int)this.ResetType, key) : this.ResetType;
    _o.ToastDisplayType = TableEncryptionService.UseEncryption ? (Global.MissionToastDisplayConditionType)TableEncryptionService.Convert((int)this.ToastDisplayType, key) : this.ToastDisplayType;
    _o.ToastImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ToastImagePath, key) : this.ToastImagePath;
    _o.ViewFlag = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ViewFlag, key) : this.ViewFlag;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.PreMissionId = new List<long>();
    for (var _j = 0; _j < this.PreMissionIdLength; ++_j) {_o.PreMissionId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PreMissionId(_j), key) : this.PreMissionId(_j));}
    _o.AccountType = TableEncryptionService.UseEncryption ? (Global.AccountState)TableEncryptionService.Convert((int)this.AccountType, key) : this.AccountType;
    _o.AccountLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AccountLevel, key) : this.AccountLevel;
    _o.ShortcutUI = new List<string>();
    for (var _j = 0; _j < this.ShortcutUILength; ++_j) {_o.ShortcutUI.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ShortcutUI(_j), key) : this.ShortcutUI(_j));}
    _o.CompleteConditionType = TableEncryptionService.UseEncryption ? (Global.MissionCompleteConditionType)TableEncryptionService.Convert((int)this.CompleteConditionType, key) : this.CompleteConditionType;
    _o.IsCompleteExtensionTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsCompleteExtensionTime, key) : this.IsCompleteExtensionTime;
    _o.CompleteConditionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CompleteConditionCount, key) : this.CompleteConditionCount;
    _o.CompleteConditionParameter = new List<long>();
    for (var _j = 0; _j < this.CompleteConditionParameterLength; ++_j) {_o.CompleteConditionParameter.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CompleteConditionParameter(_j), key) : this.CompleteConditionParameter(_j));}
    _o.CompleteConditionParameterTag = new List<Global.Tag>();
    for (var _j = 0; _j < this.CompleteConditionParameterTagLength; ++_j) {_o.CompleteConditionParameterTag.Add(TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)this.CompleteConditionParameterTag(_j), key) : this.CompleteConditionParameterTag(_j));}
    _o.RewardIcon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.RewardIcon, key) : this.RewardIcon;
    _o.CompleteConditionMissionId = new List<long>();
    for (var _j = 0; _j < this.CompleteConditionMissionIdLength; ++_j) {_o.CompleteConditionMissionId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CompleteConditionMissionId(_j), key) : this.CompleteConditionMissionId(_j));}
    _o.CompleteConditionMissionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CompleteConditionMissionCount, key) : this.CompleteConditionMissionCount;
    _o.MissionRewardParcelType = new List<Global.ParcelType>();
    for (var _j = 0; _j < this.MissionRewardParcelTypeLength; ++_j) {_o.MissionRewardParcelType.Add(TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.MissionRewardParcelType(_j), key) : this.MissionRewardParcelType(_j));}
    _o.MissionRewardParcelId = new List<long>();
    for (var _j = 0; _j < this.MissionRewardParcelIdLength; ++_j) {_o.MissionRewardParcelId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MissionRewardParcelId(_j), key) : this.MissionRewardParcelId(_j));}
    _o.MissionRewardAmount = new List<int>();
    for (var _j = 0; _j < this.MissionRewardAmountLength; ++_j) {_o.MissionRewardAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MissionRewardAmount(_j), key) : this.MissionRewardAmount(_j));}
    _o.ConditionRewardParcelType = new List<Global.ParcelType>();
    for (var _j = 0; _j < this.ConditionRewardParcelTypeLength; ++_j) {_o.ConditionRewardParcelType.Add(TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ConditionRewardParcelType(_j), key) : this.ConditionRewardParcelType(_j));}
    _o.ConditionRewardParcelId = new List<long>();
    for (var _j = 0; _j < this.ConditionRewardParcelIdLength; ++_j) {_o.ConditionRewardParcelId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionRewardParcelId(_j), key) : this.ConditionRewardParcelId(_j));}
    _o.ConditionRewardAmount = new List<int>();
    for (var _j = 0; _j < this.ConditionRewardAmountLength; ++_j) {_o.ConditionRewardAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ConditionRewardAmount(_j), key) : this.ConditionRewardAmount(_j));}
  }
  public static Offset<Global.MiniGameMissionExcel> Pack(FlatBufferBuilder builder, MiniGameMissionExcelT _o) {
    if (_o == null) return default(Offset<Global.MiniGameMissionExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameMission");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
    var _GroupName = _o.GroupName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.GroupName, key) : _o.GroupName));
		var _Category = TableEncryptionService.UseEncryption ? (Global.MissionCategory)TableEncryptionService.Convert((int)_o.Category, key) : _o.Category;
		var _Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Description, key) : _o.Description;
		var _ResetType = TableEncryptionService.UseEncryption ? (Global.MissionResetType)TableEncryptionService.Convert((int)_o.ResetType, key) : _o.ResetType;
		var _ToastDisplayType = TableEncryptionService.UseEncryption ? (Global.MissionToastDisplayConditionType)TableEncryptionService.Convert((int)_o.ToastDisplayType, key) : _o.ToastDisplayType;
    var _ToastImagePath = _o.ToastImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ToastImagePath, key) : _o.ToastImagePath));
		var _ViewFlag = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ViewFlag, key) : _o.ViewFlag;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
    var _PreMissionId = default(VectorOffset);
    if (_o.PreMissionId != null) {
      var __PreMissionId = _o.PreMissionId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _PreMissionId = CreatePreMissionIdVector(builder, __PreMissionId);
    }
		var _AccountType = TableEncryptionService.UseEncryption ? (Global.AccountState)TableEncryptionService.Convert((int)_o.AccountType, key) : _o.AccountType;
		var _AccountLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AccountLevel, key) : _o.AccountLevel;
    var _ShortcutUI = default(VectorOffset);
    if (_o.ShortcutUI != null) {
      var __ShortcutUI = new StringOffset[_o.ShortcutUI.Count];
      for (var _j = 0; _j < __ShortcutUI.Length; ++_j) { __ShortcutUI[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ShortcutUI[_j], key) : _o.ShortcutUI[_j])); }
      _ShortcutUI = CreateShortcutUIVector(builder, __ShortcutUI);
    }
		var _CompleteConditionType = TableEncryptionService.UseEncryption ? (Global.MissionCompleteConditionType)TableEncryptionService.Convert((int)_o.CompleteConditionType, key) : _o.CompleteConditionType;
		var _IsCompleteExtensionTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsCompleteExtensionTime, key) : _o.IsCompleteExtensionTime;
		var _CompleteConditionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CompleteConditionCount, key) : _o.CompleteConditionCount;
    var _CompleteConditionParameter = default(VectorOffset);
    if (_o.CompleteConditionParameter != null) {
      var __CompleteConditionParameter = _o.CompleteConditionParameter.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _CompleteConditionParameter = CreateCompleteConditionParameterVector(builder, __CompleteConditionParameter);
    }
    var _CompleteConditionParameterTag = default(VectorOffset);
    if (_o.CompleteConditionParameterTag != null) {
      var __CompleteConditionParameterTag = _o.CompleteConditionParameterTag.Select(x => TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _CompleteConditionParameterTag = CreateCompleteConditionParameterTagVector(builder, __CompleteConditionParameterTag);
    }
    var _RewardIcon = _o.RewardIcon == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.RewardIcon, key) : _o.RewardIcon));
    var _CompleteConditionMissionId = default(VectorOffset);
    if (_o.CompleteConditionMissionId != null) {
      var __CompleteConditionMissionId = _o.CompleteConditionMissionId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _CompleteConditionMissionId = CreateCompleteConditionMissionIdVector(builder, __CompleteConditionMissionId);
    }
		var _CompleteConditionMissionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CompleteConditionMissionCount, key) : _o.CompleteConditionMissionCount;
    var _MissionRewardParcelType = default(VectorOffset);
    if (_o.MissionRewardParcelType != null) {
      var __MissionRewardParcelType = _o.MissionRewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _MissionRewardParcelType = CreateMissionRewardParcelTypeVector(builder, __MissionRewardParcelType);
    }
    var _MissionRewardParcelId = default(VectorOffset);
    if (_o.MissionRewardParcelId != null) {
      var __MissionRewardParcelId = _o.MissionRewardParcelId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _MissionRewardParcelId = CreateMissionRewardParcelIdVector(builder, __MissionRewardParcelId);
    }
    var _MissionRewardAmount = default(VectorOffset);
    if (_o.MissionRewardAmount != null) {
      var __MissionRewardAmount = _o.MissionRewardAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _MissionRewardAmount = CreateMissionRewardAmountVector(builder, __MissionRewardAmount);
    }
    var _ConditionRewardParcelType = default(VectorOffset);
    if (_o.ConditionRewardParcelType != null) {
      var __ConditionRewardParcelType = _o.ConditionRewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _ConditionRewardParcelType = CreateConditionRewardParcelTypeVector(builder, __ConditionRewardParcelType);
    }
    var _ConditionRewardParcelId = default(VectorOffset);
    if (_o.ConditionRewardParcelId != null) {
      var __ConditionRewardParcelId = _o.ConditionRewardParcelId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ConditionRewardParcelId = CreateConditionRewardParcelIdVector(builder, __ConditionRewardParcelId);
    }
    var _ConditionRewardAmount = default(VectorOffset);
    if (_o.ConditionRewardAmount != null) {
      var __ConditionRewardAmount = _o.ConditionRewardAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _ConditionRewardAmount = CreateConditionRewardAmountVector(builder, __ConditionRewardAmount);
    }
    return CreateMiniGameMissionExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      _GroupName,
      TableEncryptionService.UseEncryption ? _Category : _o.Category,
      TableEncryptionService.UseEncryption ? _Description : _o.Description,
      TableEncryptionService.UseEncryption ? _ResetType : _o.ResetType,
      TableEncryptionService.UseEncryption ? _ToastDisplayType : _o.ToastDisplayType,
      _ToastImagePath,
      TableEncryptionService.UseEncryption ? _ViewFlag : _o.ViewFlag,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      _PreMissionId,
      TableEncryptionService.UseEncryption ? _AccountType : _o.AccountType,
      TableEncryptionService.UseEncryption ? _AccountLevel : _o.AccountLevel,
      _ShortcutUI,
      TableEncryptionService.UseEncryption ? _CompleteConditionType : _o.CompleteConditionType,
      TableEncryptionService.UseEncryption ? _IsCompleteExtensionTime : _o.IsCompleteExtensionTime,
      TableEncryptionService.UseEncryption ? _CompleteConditionCount : _o.CompleteConditionCount,
      _CompleteConditionParameter,
      _CompleteConditionParameterTag,
      _RewardIcon,
      _CompleteConditionMissionId,
      TableEncryptionService.UseEncryption ? _CompleteConditionMissionCount : _o.CompleteConditionMissionCount,
      _MissionRewardParcelType,
      _MissionRewardParcelId,
      _MissionRewardAmount,
      _ConditionRewardParcelType,
      _ConditionRewardParcelId,
      _ConditionRewardAmount);
  }
}

public class MiniGameMissionExcelT
{
  public long Id { get; set; }
  public long EventContentId { get; set; }
  public long GroupId { get; set; }
  public string GroupName { get; set; }
  public Global.MissionCategory Category { get; set; }
  public uint Description { get; set; }
  public Global.MissionResetType ResetType { get; set; }
  public Global.MissionToastDisplayConditionType ToastDisplayType { get; set; }
  public string ToastImagePath { get; set; }
  public bool ViewFlag { get; set; }
  public long DisplayOrder { get; set; }
  public List<long> PreMissionId { get; set; }
  public Global.AccountState AccountType { get; set; }
  public long AccountLevel { get; set; }
  public List<string> ShortcutUI { get; set; }
  public Global.MissionCompleteConditionType CompleteConditionType { get; set; }
  public bool IsCompleteExtensionTime { get; set; }
  public long CompleteConditionCount { get; set; }
  public List<long> CompleteConditionParameter { get; set; }
  public List<Global.Tag> CompleteConditionParameterTag { get; set; }
  public string RewardIcon { get; set; }
  public List<long> CompleteConditionMissionId { get; set; }
  public long CompleteConditionMissionCount { get; set; }
  public List<Global.ParcelType> MissionRewardParcelType { get; set; }
  public List<long> MissionRewardParcelId { get; set; }
  public List<int> MissionRewardAmount { get; set; }
  public List<Global.ParcelType> ConditionRewardParcelType { get; set; }
  public List<long> ConditionRewardParcelId { get; set; }
  public List<int> ConditionRewardAmount { get; set; }

  public MiniGameMissionExcelT() {
    this.Id = 0;
    this.EventContentId = 0;
    this.GroupId = 0;
    this.GroupName = null;
    this.Category = Global.MissionCategory.Challenge;
    this.Description = 0;
    this.ResetType = Global.MissionResetType.None;
    this.ToastDisplayType = Global.MissionToastDisplayConditionType.Always;
    this.ToastImagePath = null;
    this.ViewFlag = false;
    this.DisplayOrder = 0;
    this.PreMissionId = null;
    this.AccountType = Global.AccountState.WaitingSignIn;
    this.AccountLevel = 0;
    this.ShortcutUI = null;
    this.CompleteConditionType = Global.MissionCompleteConditionType.None;
    this.IsCompleteExtensionTime = false;
    this.CompleteConditionCount = 0;
    this.CompleteConditionParameter = null;
    this.CompleteConditionParameterTag = null;
    this.RewardIcon = null;
    this.CompleteConditionMissionId = null;
    this.CompleteConditionMissionCount = 0;
    this.MissionRewardParcelType = null;
    this.MissionRewardParcelId = null;
    this.MissionRewardAmount = null;
    this.ConditionRewardParcelType = null;
    this.ConditionRewardParcelId = null;
    this.ConditionRewardAmount = null;
  }
}


static public class MiniGameMissionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*GroupName*/, false)
      && verifier.VerifyField(tablePos, 12 /*Category*/, 4 /*Global.MissionCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Description*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ResetType*/, 4 /*Global.MissionResetType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ToastDisplayType*/, 4 /*Global.MissionToastDisplayConditionType*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*ToastImagePath*/, false)
      && verifier.VerifyField(tablePos, 22 /*ViewFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*PreMissionId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 28 /*AccountType*/, 4 /*Global.AccountState*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*AccountLevel*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*ShortcutUI*/, false)
      && verifier.VerifyField(tablePos, 34 /*CompleteConditionType*/, 4 /*Global.MissionCompleteConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*IsCompleteExtensionTime*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*CompleteConditionCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 40 /*CompleteConditionParameter*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 42 /*CompleteConditionParameterTag*/, 4 /*Global.Tag*/, false)
      && verifier.VerifyString(tablePos, 44 /*RewardIcon*/, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*CompleteConditionMissionId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 48 /*CompleteConditionMissionCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 50 /*MissionRewardParcelType*/, 4 /*Global.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 52 /*MissionRewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 54 /*MissionRewardAmount*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 56 /*ConditionRewardParcelType*/, 4 /*Global.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 58 /*ConditionRewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 60 /*ConditionRewardAmount*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
