// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentDiceRaceNodeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentDiceRaceNodeExcel GetRootAsEventContentDiceRaceNodeExcel(ByteBuffer _bb) { return GetRootAsEventContentDiceRaceNodeExcel(_bb, new EventContentDiceRaceNodeExcel()); }
  public static EventContentDiceRaceNodeExcel GetRootAsEventContentDiceRaceNodeExcel(ByteBuffer _bb, EventContentDiceRaceNodeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentDiceRaceNodeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NodeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.EventContentDiceRaceNodeType EventContentDiceRaceNodeType { get { int o = __p.__offset(8); return o != 0 ? (Global.EventContentDiceRaceNodeType)__p.bb.GetInt(o + __p.bb_pos) : Global.EventContentDiceRaceNodeType.StartNode; } }
  public int MoveForwardTypeArg { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Global.ParcelType RewardParcelType(int j) { int o = __p.__offset(12); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<Global.ParcelType>(12, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public Global.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(12); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ParcelType[] a = new Global.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardParcelId(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardParcelIdLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardParcelIdBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetRewardParcelIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetRewardParcelIdArray() { return __p.__vector_as_array<long>(14); }
  public long RewardAmount(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardAmountLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardAmountBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetRewardAmountBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetRewardAmountArray() { return __p.__vector_as_array<long>(16); }

  public static Offset<Global.EventContentDiceRaceNodeExcel> CreateEventContentDiceRaceNodeExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long NodeId = 0,
      Global.EventContentDiceRaceNodeType EventContentDiceRaceNodeType = Global.EventContentDiceRaceNodeType.StartNode,
      int MoveForwardTypeArg = 0,
      VectorOffset rewardParcelTypeOffset = default(VectorOffset),
      VectorOffset rewardParcelIdOffset = default(VectorOffset),
      VectorOffset rewardAmountOffset = default(VectorOffset)) {
    builder.StartTable(7);
    EventContentDiceRaceNodeExcel.AddNodeId(builder, NodeId);
    EventContentDiceRaceNodeExcel.AddEventContentId(builder, EventContentId);
    EventContentDiceRaceNodeExcel.AddRewardAmount(builder, rewardAmountOffset);
    EventContentDiceRaceNodeExcel.AddRewardParcelId(builder, rewardParcelIdOffset);
    EventContentDiceRaceNodeExcel.AddRewardParcelType(builder, rewardParcelTypeOffset);
    EventContentDiceRaceNodeExcel.AddMoveForwardTypeArg(builder, MoveForwardTypeArg);
    EventContentDiceRaceNodeExcel.AddEventContentDiceRaceNodeType(builder, EventContentDiceRaceNodeType);
    return EventContentDiceRaceNodeExcel.EndEventContentDiceRaceNodeExcel(builder);
  }

  public static void StartEventContentDiceRaceNodeExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddNodeId(FlatBufferBuilder builder, long nodeId) { builder.AddLong(1, nodeId, 0); }
  public static void AddEventContentDiceRaceNodeType(FlatBufferBuilder builder, Global.EventContentDiceRaceNodeType eventContentDiceRaceNodeType) { builder.AddInt(2, (int)eventContentDiceRaceNodeType, 0); }
  public static void AddMoveForwardTypeArg(FlatBufferBuilder builder, int moveForwardTypeArg) { builder.AddInt(3, moveForwardTypeArg, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(4, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, VectorOffset rewardParcelIdOffset) { builder.AddOffset(5, rewardParcelIdOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardAmount(FlatBufferBuilder builder, VectorOffset rewardAmountOffset) { builder.AddOffset(6, rewardAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Global.EventContentDiceRaceNodeExcel> EndEventContentDiceRaceNodeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EventContentDiceRaceNodeExcel>(o);
  }
  public EventContentDiceRaceNodeExcelT UnPack() {
    var _o = new EventContentDiceRaceNodeExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentDiceRaceNodeExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentDiceRaceNode");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.NodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.NodeId, key) : this.NodeId;
    _o.EventContentDiceRaceNodeType = TableEncryptionService.UseEncryption ? (Global.EventContentDiceRaceNodeType)TableEncryptionService.Convert((int)this.EventContentDiceRaceNodeType, key) : this.EventContentDiceRaceNodeType;
    _o.MoveForwardTypeArg = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MoveForwardTypeArg, key) : this.MoveForwardTypeArg;
    _o.RewardParcelType = new List<Global.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType(_j), key) : this.RewardParcelType(_j));}
    _o.RewardParcelId = new List<long>();
    for (var _j = 0; _j < this.RewardParcelIdLength; ++_j) {_o.RewardParcelId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId(_j), key) : this.RewardParcelId(_j));}
    _o.RewardAmount = new List<long>();
    for (var _j = 0; _j < this.RewardAmountLength; ++_j) {_o.RewardAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardAmount(_j), key) : this.RewardAmount(_j));}
  }
  public static Offset<Global.EventContentDiceRaceNodeExcel> Pack(FlatBufferBuilder builder, EventContentDiceRaceNodeExcelT _o) {
    if (_o == null) return default(Offset<Global.EventContentDiceRaceNodeExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentDiceRaceNode");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _NodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.NodeId, key) : _o.NodeId;
		var _EventContentDiceRaceNodeType = TableEncryptionService.UseEncryption ? (Global.EventContentDiceRaceNodeType)TableEncryptionService.Convert((int)_o.EventContentDiceRaceNodeType, key) : _o.EventContentDiceRaceNodeType;
		var _MoveForwardTypeArg = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MoveForwardTypeArg, key) : _o.MoveForwardTypeArg;
    var _rewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __rewardParcelType = _o.RewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _rewardParcelType = CreateRewardParcelTypeVector(builder, __rewardParcelType);
    }
    var _rewardParcelId = default(VectorOffset);
    if (_o.RewardParcelId != null) {
      var __rewardParcelId = _o.RewardParcelId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _rewardParcelId = CreateRewardParcelIdVector(builder, __rewardParcelId);
    }
    var _rewardAmount = default(VectorOffset);
    if (_o.RewardAmount != null) {
      var __rewardAmount = _o.RewardAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _rewardAmount = CreateRewardAmountVector(builder, __rewardAmount);
    }
    return CreateEventContentDiceRaceNodeExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _NodeId : _o.NodeId,
      TableEncryptionService.UseEncryption ? _EventContentDiceRaceNodeType : _o.EventContentDiceRaceNodeType,
      TableEncryptionService.UseEncryption ? _MoveForwardTypeArg : _o.MoveForwardTypeArg,
      _rewardParcelType,
      _rewardParcelId,
      _rewardAmount);
  }
}

public class EventContentDiceRaceNodeExcelT
{
  public long EventContentId { get; set; }
  public long NodeId { get; set; }
  public Global.EventContentDiceRaceNodeType EventContentDiceRaceNodeType { get; set; }
  public int MoveForwardTypeArg { get; set; }
  public List<Global.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardParcelId { get; set; }
  public List<long> RewardAmount { get; set; }

  public EventContentDiceRaceNodeExcelT() {
    this.EventContentId = 0;
    this.NodeId = 0;
    this.EventContentDiceRaceNodeType = Global.EventContentDiceRaceNodeType.StartNode;
    this.MoveForwardTypeArg = 0;
    this.RewardParcelType = null;
    this.RewardParcelId = null;
    this.RewardAmount = null;
  }
}


static public class EventContentDiceRaceNodeExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*NodeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*EventContentDiceRaceNodeType*/, 4 /*Global.EventContentDiceRaceNodeType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MoveForwardTypeArg*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*RewardParcelType*/, 4 /*Global.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*RewardParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*RewardAmount*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
