// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EmoticonSpecialExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EmoticonSpecialExcel GetRootAsEmoticonSpecialExcel(ByteBuffer _bb) { return GetRootAsEmoticonSpecialExcel(_bb, new EmoticonSpecialExcel()); }
  public static EmoticonSpecialExcel GetRootAsEmoticonSpecialExcel(ByteBuffer _bb, EmoticonSpecialExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmoticonSpecialExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterUniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Random { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRandomBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRandomBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRandomArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<Global.EmoticonSpecialExcel> CreateEmoticonSpecialExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long CharacterUniqueId = 0,
      StringOffset RandomOffset = default(StringOffset)) {
    builder.StartTable(3);
    EmoticonSpecialExcel.AddCharacterUniqueId(builder, CharacterUniqueId);
    EmoticonSpecialExcel.AddUniqueId(builder, UniqueId);
    EmoticonSpecialExcel.AddRandom(builder, RandomOffset);
    return EmoticonSpecialExcel.EndEmoticonSpecialExcel(builder);
  }

  public static void StartEmoticonSpecialExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddCharacterUniqueId(FlatBufferBuilder builder, long characterUniqueId) { builder.AddLong(1, characterUniqueId, 0); }
  public static void AddRandom(FlatBufferBuilder builder, StringOffset randomOffset) { builder.AddOffset(2, randomOffset.Value, 0); }
  public static Offset<Global.EmoticonSpecialExcel> EndEmoticonSpecialExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EmoticonSpecialExcel>(o);
  }
  public EmoticonSpecialExcelT UnPack() {
    var _o = new EmoticonSpecialExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmoticonSpecialExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EmoticonSpecial");
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.CharacterUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterUniqueId, key) : this.CharacterUniqueId;
    _o.Random = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Random, key) : this.Random;
  }
  public static Offset<Global.EmoticonSpecialExcel> Pack(FlatBufferBuilder builder, EmoticonSpecialExcelT _o) {
    if (_o == null) return default(Offset<Global.EmoticonSpecialExcel>);
		byte[] key = TableEncryptionService.CreateKey("EmoticonSpecial");
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _CharacterUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterUniqueId, key) : _o.CharacterUniqueId;
    var _Random = _o.Random == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Random, key) : _o.Random));
    return CreateEmoticonSpecialExcel(
      builder,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _CharacterUniqueId : _o.CharacterUniqueId,
      _Random);
  }
}

public class EmoticonSpecialExcelT
{
  public long UniqueId { get; set; }
  public long CharacterUniqueId { get; set; }
  public string Random { get; set; }

  public EmoticonSpecialExcelT() {
    this.UniqueId = 0;
    this.CharacterUniqueId = 0;
    this.Random = null;
  }
}


static public class EmoticonSpecialExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*Random*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
