// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConstMinigameCCGExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConstMinigameCCGExcel GetRootAsConstMinigameCCGExcel(ByteBuffer _bb) { return GetRootAsConstMinigameCCGExcel(_bb, new ConstMinigameCCGExcel()); }
  public static ConstMinigameCCGExcel GetRootAsConstMinigameCCGExcel(ByteBuffer _bb, ConstMinigameCCGExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstMinigameCCGExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TurnDrawCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float ConquestMapBoundaryOffsetRight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapBoundaryOffsetTop { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapBoundaryOffsetBottom { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapCenterOffsetX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapCenterOffsetY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraAngle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMax { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMin { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomDefault { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ThemaLoadingProgressTime { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MapAllyRotation { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string AniAllyBattleAttack { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAniAllyBattleAttackBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetAniAllyBattleAttackBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetAniAllyBattleAttackArray() { return __p.__vector_as_array<byte>(28); }
  public int MaxHandCount { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCost { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StartCost { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TurnCost { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StrikerSwapFrontCost { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StrikerMaxEquipCount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StartDrawCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CampReviveHealthRate { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BaseRewardRerollPoint { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SelectRewardOptionCount { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AlternativeCardImagePath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlternativeCardImagePathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetAlternativeCardImagePathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetAlternativeCardImagePathArray() { return __p.__vector_as_array<byte>(50); }

  public static Offset<Global.ConstMinigameCCGExcel> CreateConstMinigameCCGExcel(FlatBufferBuilder builder,
      int TurnDrawCount = 0,
      float ConquestMapBoundaryOffsetRight = 0.0f,
      float ConquestMapBoundaryOffsetTop = 0.0f,
      float ConquestMapBoundaryOffsetBottom = 0.0f,
      float ConquestMapCenterOffsetX = 0.0f,
      float ConquestMapCenterOffsetY = 0.0f,
      float CameraAngle = 0.0f,
      float CameraZoomMax = 0.0f,
      float CameraZoomMin = 0.0f,
      float CameraZoomDefault = 0.0f,
      float ThemaLoadingProgressTime = 0.0f,
      float MapAllyRotation = 0.0f,
      StringOffset AniAllyBattleAttackOffset = default(StringOffset),
      int MaxHandCount = 0,
      int MaxCost = 0,
      int StartCost = 0,
      int TurnCost = 0,
      int StrikerSwapFrontCost = 0,
      int StrikerMaxEquipCount = 0,
      int StartDrawCount = 0,
      int CampReviveHealthRate = 0,
      int BaseRewardRerollPoint = 0,
      int SelectRewardOptionCount = 0,
      StringOffset AlternativeCardImagePathOffset = default(StringOffset)) {
    builder.StartTable(24);
    ConstMinigameCCGExcel.AddAlternativeCardImagePath(builder, AlternativeCardImagePathOffset);
    ConstMinigameCCGExcel.AddSelectRewardOptionCount(builder, SelectRewardOptionCount);
    ConstMinigameCCGExcel.AddBaseRewardRerollPoint(builder, BaseRewardRerollPoint);
    ConstMinigameCCGExcel.AddCampReviveHealthRate(builder, CampReviveHealthRate);
    ConstMinigameCCGExcel.AddStartDrawCount(builder, StartDrawCount);
    ConstMinigameCCGExcel.AddStrikerMaxEquipCount(builder, StrikerMaxEquipCount);
    ConstMinigameCCGExcel.AddStrikerSwapFrontCost(builder, StrikerSwapFrontCost);
    ConstMinigameCCGExcel.AddTurnCost(builder, TurnCost);
    ConstMinigameCCGExcel.AddStartCost(builder, StartCost);
    ConstMinigameCCGExcel.AddMaxCost(builder, MaxCost);
    ConstMinigameCCGExcel.AddMaxHandCount(builder, MaxHandCount);
    ConstMinigameCCGExcel.AddAniAllyBattleAttack(builder, AniAllyBattleAttackOffset);
    ConstMinigameCCGExcel.AddMapAllyRotation(builder, MapAllyRotation);
    ConstMinigameCCGExcel.AddThemaLoadingProgressTime(builder, ThemaLoadingProgressTime);
    ConstMinigameCCGExcel.AddCameraZoomDefault(builder, CameraZoomDefault);
    ConstMinigameCCGExcel.AddCameraZoomMin(builder, CameraZoomMin);
    ConstMinigameCCGExcel.AddCameraZoomMax(builder, CameraZoomMax);
    ConstMinigameCCGExcel.AddCameraAngle(builder, CameraAngle);
    ConstMinigameCCGExcel.AddConquestMapCenterOffsetY(builder, ConquestMapCenterOffsetY);
    ConstMinigameCCGExcel.AddConquestMapCenterOffsetX(builder, ConquestMapCenterOffsetX);
    ConstMinigameCCGExcel.AddConquestMapBoundaryOffsetBottom(builder, ConquestMapBoundaryOffsetBottom);
    ConstMinigameCCGExcel.AddConquestMapBoundaryOffsetTop(builder, ConquestMapBoundaryOffsetTop);
    ConstMinigameCCGExcel.AddConquestMapBoundaryOffsetRight(builder, ConquestMapBoundaryOffsetRight);
    ConstMinigameCCGExcel.AddTurnDrawCount(builder, TurnDrawCount);
    return ConstMinigameCCGExcel.EndConstMinigameCCGExcel(builder);
  }

  public static void StartConstMinigameCCGExcel(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddTurnDrawCount(FlatBufferBuilder builder, int turnDrawCount) { builder.AddInt(0, turnDrawCount, 0); }
  public static void AddConquestMapBoundaryOffsetRight(FlatBufferBuilder builder, float conquestMapBoundaryOffsetRight) { builder.AddFloat(1, conquestMapBoundaryOffsetRight, 0.0f); }
  public static void AddConquestMapBoundaryOffsetTop(FlatBufferBuilder builder, float conquestMapBoundaryOffsetTop) { builder.AddFloat(2, conquestMapBoundaryOffsetTop, 0.0f); }
  public static void AddConquestMapBoundaryOffsetBottom(FlatBufferBuilder builder, float conquestMapBoundaryOffsetBottom) { builder.AddFloat(3, conquestMapBoundaryOffsetBottom, 0.0f); }
  public static void AddConquestMapCenterOffsetX(FlatBufferBuilder builder, float conquestMapCenterOffsetX) { builder.AddFloat(4, conquestMapCenterOffsetX, 0.0f); }
  public static void AddConquestMapCenterOffsetY(FlatBufferBuilder builder, float conquestMapCenterOffsetY) { builder.AddFloat(5, conquestMapCenterOffsetY, 0.0f); }
  public static void AddCameraAngle(FlatBufferBuilder builder, float cameraAngle) { builder.AddFloat(6, cameraAngle, 0.0f); }
  public static void AddCameraZoomMax(FlatBufferBuilder builder, float cameraZoomMax) { builder.AddFloat(7, cameraZoomMax, 0.0f); }
  public static void AddCameraZoomMin(FlatBufferBuilder builder, float cameraZoomMin) { builder.AddFloat(8, cameraZoomMin, 0.0f); }
  public static void AddCameraZoomDefault(FlatBufferBuilder builder, float cameraZoomDefault) { builder.AddFloat(9, cameraZoomDefault, 0.0f); }
  public static void AddThemaLoadingProgressTime(FlatBufferBuilder builder, float themaLoadingProgressTime) { builder.AddFloat(10, themaLoadingProgressTime, 0.0f); }
  public static void AddMapAllyRotation(FlatBufferBuilder builder, float mapAllyRotation) { builder.AddFloat(11, mapAllyRotation, 0.0f); }
  public static void AddAniAllyBattleAttack(FlatBufferBuilder builder, StringOffset aniAllyBattleAttackOffset) { builder.AddOffset(12, aniAllyBattleAttackOffset.Value, 0); }
  public static void AddMaxHandCount(FlatBufferBuilder builder, int maxHandCount) { builder.AddInt(13, maxHandCount, 0); }
  public static void AddMaxCost(FlatBufferBuilder builder, int maxCost) { builder.AddInt(14, maxCost, 0); }
  public static void AddStartCost(FlatBufferBuilder builder, int startCost) { builder.AddInt(15, startCost, 0); }
  public static void AddTurnCost(FlatBufferBuilder builder, int turnCost) { builder.AddInt(16, turnCost, 0); }
  public static void AddStrikerSwapFrontCost(FlatBufferBuilder builder, int strikerSwapFrontCost) { builder.AddInt(17, strikerSwapFrontCost, 0); }
  public static void AddStrikerMaxEquipCount(FlatBufferBuilder builder, int strikerMaxEquipCount) { builder.AddInt(18, strikerMaxEquipCount, 0); }
  public static void AddStartDrawCount(FlatBufferBuilder builder, int startDrawCount) { builder.AddInt(19, startDrawCount, 0); }
  public static void AddCampReviveHealthRate(FlatBufferBuilder builder, int campReviveHealthRate) { builder.AddInt(20, campReviveHealthRate, 0); }
  public static void AddBaseRewardRerollPoint(FlatBufferBuilder builder, int baseRewardRerollPoint) { builder.AddInt(21, baseRewardRerollPoint, 0); }
  public static void AddSelectRewardOptionCount(FlatBufferBuilder builder, int selectRewardOptionCount) { builder.AddInt(22, selectRewardOptionCount, 0); }
  public static void AddAlternativeCardImagePath(FlatBufferBuilder builder, StringOffset alternativeCardImagePathOffset) { builder.AddOffset(23, alternativeCardImagePathOffset.Value, 0); }
  public static Offset<Global.ConstMinigameCCGExcel> EndConstMinigameCCGExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ConstMinigameCCGExcel>(o);
  }
  public ConstMinigameCCGExcelT UnPack() {
    var _o = new ConstMinigameCCGExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstMinigameCCGExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstMinigameCCG");
    _o.TurnDrawCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.TurnDrawCount, key) : this.TurnDrawCount;
    _o.ConquestMapBoundaryOffsetRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapBoundaryOffsetRight, key) : this.ConquestMapBoundaryOffsetRight;
    _o.ConquestMapBoundaryOffsetTop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapBoundaryOffsetTop, key) : this.ConquestMapBoundaryOffsetTop;
    _o.ConquestMapBoundaryOffsetBottom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapBoundaryOffsetBottom, key) : this.ConquestMapBoundaryOffsetBottom;
    _o.ConquestMapCenterOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapCenterOffsetX, key) : this.ConquestMapCenterOffsetX;
    _o.ConquestMapCenterOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapCenterOffsetY, key) : this.ConquestMapCenterOffsetY;
    _o.CameraAngle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraAngle, key) : this.CameraAngle;
    _o.CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMax, key) : this.CameraZoomMax;
    _o.CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMin, key) : this.CameraZoomMin;
    _o.CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomDefault, key) : this.CameraZoomDefault;
    _o.ThemaLoadingProgressTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ThemaLoadingProgressTime, key) : this.ThemaLoadingProgressTime;
    _o.MapAllyRotation = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.MapAllyRotation, key) : this.MapAllyRotation;
    _o.AniAllyBattleAttack = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.AniAllyBattleAttack, key) : this.AniAllyBattleAttack;
    _o.MaxHandCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxHandCount, key) : this.MaxHandCount;
    _o.MaxCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxCost, key) : this.MaxCost;
    _o.StartCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StartCost, key) : this.StartCost;
    _o.TurnCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.TurnCost, key) : this.TurnCost;
    _o.StrikerSwapFrontCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StrikerSwapFrontCost, key) : this.StrikerSwapFrontCost;
    _o.StrikerMaxEquipCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StrikerMaxEquipCount, key) : this.StrikerMaxEquipCount;
    _o.StartDrawCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StartDrawCount, key) : this.StartDrawCount;
    _o.CampReviveHealthRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CampReviveHealthRate, key) : this.CampReviveHealthRate;
    _o.BaseRewardRerollPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BaseRewardRerollPoint, key) : this.BaseRewardRerollPoint;
    _o.SelectRewardOptionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.SelectRewardOptionCount, key) : this.SelectRewardOptionCount;
    _o.AlternativeCardImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.AlternativeCardImagePath, key) : this.AlternativeCardImagePath;
  }
  public static Offset<Global.ConstMinigameCCGExcel> Pack(FlatBufferBuilder builder, ConstMinigameCCGExcelT _o) {
    if (_o == null) return default(Offset<Global.ConstMinigameCCGExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConstMinigameCCG");
		var _TurnDrawCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.TurnDrawCount, key) : _o.TurnDrawCount;
		var _ConquestMapBoundaryOffsetRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapBoundaryOffsetRight, key) : _o.ConquestMapBoundaryOffsetRight;
		var _ConquestMapBoundaryOffsetTop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapBoundaryOffsetTop, key) : _o.ConquestMapBoundaryOffsetTop;
		var _ConquestMapBoundaryOffsetBottom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapBoundaryOffsetBottom, key) : _o.ConquestMapBoundaryOffsetBottom;
		var _ConquestMapCenterOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapCenterOffsetX, key) : _o.ConquestMapCenterOffsetX;
		var _ConquestMapCenterOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapCenterOffsetY, key) : _o.ConquestMapCenterOffsetY;
		var _CameraAngle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraAngle, key) : _o.CameraAngle;
		var _CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMax, key) : _o.CameraZoomMax;
		var _CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMin, key) : _o.CameraZoomMin;
		var _CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomDefault, key) : _o.CameraZoomDefault;
		var _ThemaLoadingProgressTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ThemaLoadingProgressTime, key) : _o.ThemaLoadingProgressTime;
		var _MapAllyRotation = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.MapAllyRotation, key) : _o.MapAllyRotation;
    var _AniAllyBattleAttack = _o.AniAllyBattleAttack == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.AniAllyBattleAttack, key) : _o.AniAllyBattleAttack));
		var _MaxHandCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxHandCount, key) : _o.MaxHandCount;
		var _MaxCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxCost, key) : _o.MaxCost;
		var _StartCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StartCost, key) : _o.StartCost;
		var _TurnCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.TurnCost, key) : _o.TurnCost;
		var _StrikerSwapFrontCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StrikerSwapFrontCost, key) : _o.StrikerSwapFrontCost;
		var _StrikerMaxEquipCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StrikerMaxEquipCount, key) : _o.StrikerMaxEquipCount;
		var _StartDrawCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StartDrawCount, key) : _o.StartDrawCount;
		var _CampReviveHealthRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CampReviveHealthRate, key) : _o.CampReviveHealthRate;
		var _BaseRewardRerollPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.BaseRewardRerollPoint, key) : _o.BaseRewardRerollPoint;
		var _SelectRewardOptionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.SelectRewardOptionCount, key) : _o.SelectRewardOptionCount;
    var _AlternativeCardImagePath = _o.AlternativeCardImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.AlternativeCardImagePath, key) : _o.AlternativeCardImagePath));
    return CreateConstMinigameCCGExcel(
      builder,
      TableEncryptionService.UseEncryption ? _TurnDrawCount : _o.TurnDrawCount,
      TableEncryptionService.UseEncryption ? _ConquestMapBoundaryOffsetRight : _o.ConquestMapBoundaryOffsetRight,
      TableEncryptionService.UseEncryption ? _ConquestMapBoundaryOffsetTop : _o.ConquestMapBoundaryOffsetTop,
      TableEncryptionService.UseEncryption ? _ConquestMapBoundaryOffsetBottom : _o.ConquestMapBoundaryOffsetBottom,
      TableEncryptionService.UseEncryption ? _ConquestMapCenterOffsetX : _o.ConquestMapCenterOffsetX,
      TableEncryptionService.UseEncryption ? _ConquestMapCenterOffsetY : _o.ConquestMapCenterOffsetY,
      TableEncryptionService.UseEncryption ? _CameraAngle : _o.CameraAngle,
      TableEncryptionService.UseEncryption ? _CameraZoomMax : _o.CameraZoomMax,
      TableEncryptionService.UseEncryption ? _CameraZoomMin : _o.CameraZoomMin,
      TableEncryptionService.UseEncryption ? _CameraZoomDefault : _o.CameraZoomDefault,
      TableEncryptionService.UseEncryption ? _ThemaLoadingProgressTime : _o.ThemaLoadingProgressTime,
      TableEncryptionService.UseEncryption ? _MapAllyRotation : _o.MapAllyRotation,
      _AniAllyBattleAttack,
      TableEncryptionService.UseEncryption ? _MaxHandCount : _o.MaxHandCount,
      TableEncryptionService.UseEncryption ? _MaxCost : _o.MaxCost,
      TableEncryptionService.UseEncryption ? _StartCost : _o.StartCost,
      TableEncryptionService.UseEncryption ? _TurnCost : _o.TurnCost,
      TableEncryptionService.UseEncryption ? _StrikerSwapFrontCost : _o.StrikerSwapFrontCost,
      TableEncryptionService.UseEncryption ? _StrikerMaxEquipCount : _o.StrikerMaxEquipCount,
      TableEncryptionService.UseEncryption ? _StartDrawCount : _o.StartDrawCount,
      TableEncryptionService.UseEncryption ? _CampReviveHealthRate : _o.CampReviveHealthRate,
      TableEncryptionService.UseEncryption ? _BaseRewardRerollPoint : _o.BaseRewardRerollPoint,
      TableEncryptionService.UseEncryption ? _SelectRewardOptionCount : _o.SelectRewardOptionCount,
      _AlternativeCardImagePath);
  }
}

public class ConstMinigameCCGExcelT
{
  public int TurnDrawCount { get; set; }
  public float ConquestMapBoundaryOffsetRight { get; set; }
  public float ConquestMapBoundaryOffsetTop { get; set; }
  public float ConquestMapBoundaryOffsetBottom { get; set; }
  public float ConquestMapCenterOffsetX { get; set; }
  public float ConquestMapCenterOffsetY { get; set; }
  public float CameraAngle { get; set; }
  public float CameraZoomMax { get; set; }
  public float CameraZoomMin { get; set; }
  public float CameraZoomDefault { get; set; }
  public float ThemaLoadingProgressTime { get; set; }
  public float MapAllyRotation { get; set; }
  public string AniAllyBattleAttack { get; set; }
  public int MaxHandCount { get; set; }
  public int MaxCost { get; set; }
  public int StartCost { get; set; }
  public int TurnCost { get; set; }
  public int StrikerSwapFrontCost { get; set; }
  public int StrikerMaxEquipCount { get; set; }
  public int StartDrawCount { get; set; }
  public int CampReviveHealthRate { get; set; }
  public int BaseRewardRerollPoint { get; set; }
  public int SelectRewardOptionCount { get; set; }
  public string AlternativeCardImagePath { get; set; }

  public ConstMinigameCCGExcelT() {
    this.TurnDrawCount = 0;
    this.ConquestMapBoundaryOffsetRight = 0.0f;
    this.ConquestMapBoundaryOffsetTop = 0.0f;
    this.ConquestMapBoundaryOffsetBottom = 0.0f;
    this.ConquestMapCenterOffsetX = 0.0f;
    this.ConquestMapCenterOffsetY = 0.0f;
    this.CameraAngle = 0.0f;
    this.CameraZoomMax = 0.0f;
    this.CameraZoomMin = 0.0f;
    this.CameraZoomDefault = 0.0f;
    this.ThemaLoadingProgressTime = 0.0f;
    this.MapAllyRotation = 0.0f;
    this.AniAllyBattleAttack = null;
    this.MaxHandCount = 0;
    this.MaxCost = 0;
    this.StartCost = 0;
    this.TurnCost = 0;
    this.StrikerSwapFrontCost = 0;
    this.StrikerMaxEquipCount = 0;
    this.StartDrawCount = 0;
    this.CampReviveHealthRate = 0;
    this.BaseRewardRerollPoint = 0;
    this.SelectRewardOptionCount = 0;
    this.AlternativeCardImagePath = null;
  }
}


static public class ConstMinigameCCGExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TurnDrawCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ConquestMapBoundaryOffsetRight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ConquestMapBoundaryOffsetTop*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ConquestMapBoundaryOffsetBottom*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ConquestMapCenterOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ConquestMapCenterOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*CameraAngle*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*CameraZoomMax*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*CameraZoomMin*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*CameraZoomDefault*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*ThemaLoadingProgressTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*MapAllyRotation*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*AniAllyBattleAttack*/, false)
      && verifier.VerifyField(tablePos, 30 /*MaxHandCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*MaxCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*StartCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*TurnCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*StrikerSwapFrontCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*StrikerMaxEquipCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*StartDrawCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*CampReviveHealthRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*BaseRewardRerollPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*SelectRewardOptionCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 50 /*AlternativeCardImagePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
