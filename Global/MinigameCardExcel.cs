// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCardExcel GetRootAsMinigameCardExcel(ByteBuffer _bb) { return GetRootAsMinigameCardExcel(_bb, new MinigameCardExcel()); }
  public static MinigameCardExcel GetRootAsMinigameCardExcel(ByteBuffer _bb, MinigameCardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Global.CCGCharacterType None(int j) { int o = __p.__offset(4); return o != 0 ? (Global.CCGCharacterType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.CCGCharacterType)0; }
  public int NoneLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.CCGCharacterType> GetNoneBytes() { return __p.__vector_as_span<Global.CCGCharacterType>(4, 4); }
#else
  public ArraySegment<byte>? GetNoneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public Global.CCGCharacterType[] GetNoneArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.CCGCharacterType[] a = new Global.CCGCharacterType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.CCGCharacterType)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<Global.MinigameCardExcel> CreateMinigameCardExcel(FlatBufferBuilder builder,
      VectorOffset noneOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MinigameCardExcel.AddNone(builder, noneOffset);
    return MinigameCardExcel.EndMinigameCardExcel(builder);
  }

  public static void StartMinigameCardExcel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNone(FlatBufferBuilder builder, VectorOffset noneOffset) { builder.AddOffset(0, noneOffset.Value, 0); }
  public static VectorOffset CreateNoneVector(FlatBufferBuilder builder, Global.CCGCharacterType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, Global.CCGCharacterType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.CCGCharacterType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.CCGCharacterType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.MinigameCardExcel> EndMinigameCardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MinigameCardExcel>(o);
  }
  public MinigameCardExcelT UnPack() {
    var _o = new MinigameCardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCard");
    _o.None = new List<Global.CCGCharacterType>();
    for (var _j = 0; _j < this.NoneLength; ++_j) {_o.None.Add(TableEncryptionService.UseEncryption ? (Global.CCGCharacterType)TableEncryptionService.Convert((int)this.None(_j), key) : this.None(_j));}
  }
  public static Offset<Global.MinigameCardExcel> Pack(FlatBufferBuilder builder, MinigameCardExcelT _o) {
    if (_o == null) return default(Offset<Global.MinigameCardExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCard");
    var _none = default(VectorOffset);
    if (_o.None != null) {
      var __none = _o.None.Select(x => TableEncryptionService.UseEncryption ? (Global.CCGCharacterType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _none = CreateNoneVector(builder, __none);
    }
    return CreateMinigameCardExcel(
      builder,
      _none);
  }
}

public class MinigameCardExcelT
{
  public List<Global.CCGCharacterType> None { get; set; }

  public MinigameCardExcelT() {
    this.None = null;
  }
}


static public class MinigameCardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*None*/, 4 /*Global.CCGCharacterType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
