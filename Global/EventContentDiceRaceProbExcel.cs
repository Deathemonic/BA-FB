// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentDiceRaceProbExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentDiceRaceProbExcel GetRootAsEventContentDiceRaceProbExcel(ByteBuffer _bb) { return GetRootAsEventContentDiceRaceProbExcel(_bb, new EventContentDiceRaceProbExcel()); }
  public static EventContentDiceRaceProbExcel GetRootAsEventContentDiceRaceProbExcel(ByteBuffer _bb, EventContentDiceRaceProbExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentDiceRaceProbExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.EventContentDiceRaceResultType EventContentDiceRaceResultType { get { int o = __p.__offset(6); return o != 0 ? (Global.EventContentDiceRaceResultType)__p.bb.GetInt(o + __p.bb_pos) : Global.EventContentDiceRaceResultType.DiceResult1; } }
  public long CostItemId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CostItemAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DiceResult { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Prob { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Global.EventContentDiceRaceProbExcel> CreateEventContentDiceRaceProbExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Global.EventContentDiceRaceResultType EventContentDiceRaceResultType = Global.EventContentDiceRaceResultType.DiceResult1,
      long CostItemId = 0,
      int CostItemAmount = 0,
      int DiceResult = 0,
      int Prob = 0) {
    builder.StartTable(6);
    EventContentDiceRaceProbExcel.AddCostItemId(builder, CostItemId);
    EventContentDiceRaceProbExcel.AddEventContentId(builder, EventContentId);
    EventContentDiceRaceProbExcel.AddProb(builder, Prob);
    EventContentDiceRaceProbExcel.AddDiceResult(builder, DiceResult);
    EventContentDiceRaceProbExcel.AddCostItemAmount(builder, CostItemAmount);
    EventContentDiceRaceProbExcel.AddEventContentDiceRaceResultType(builder, EventContentDiceRaceResultType);
    return EventContentDiceRaceProbExcel.EndEventContentDiceRaceProbExcel(builder);
  }

  public static void StartEventContentDiceRaceProbExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddEventContentDiceRaceResultType(FlatBufferBuilder builder, Global.EventContentDiceRaceResultType eventContentDiceRaceResultType) { builder.AddInt(1, (int)eventContentDiceRaceResultType, 0); }
  public static void AddCostItemId(FlatBufferBuilder builder, long costItemId) { builder.AddLong(2, costItemId, 0); }
  public static void AddCostItemAmount(FlatBufferBuilder builder, int costItemAmount) { builder.AddInt(3, costItemAmount, 0); }
  public static void AddDiceResult(FlatBufferBuilder builder, int diceResult) { builder.AddInt(4, diceResult, 0); }
  public static void AddProb(FlatBufferBuilder builder, int prob) { builder.AddInt(5, prob, 0); }
  public static Offset<Global.EventContentDiceRaceProbExcel> EndEventContentDiceRaceProbExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EventContentDiceRaceProbExcel>(o);
  }
  public EventContentDiceRaceProbExcelT UnPack() {
    var _o = new EventContentDiceRaceProbExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentDiceRaceProbExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentDiceRaceProb");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.EventContentDiceRaceResultType = TableEncryptionService.UseEncryption ? (Global.EventContentDiceRaceResultType)TableEncryptionService.Convert((int)this.EventContentDiceRaceResultType, key) : this.EventContentDiceRaceResultType;
    _o.CostItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CostItemId, key) : this.CostItemId;
    _o.CostItemAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CostItemAmount, key) : this.CostItemAmount;
    _o.DiceResult = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DiceResult, key) : this.DiceResult;
    _o.Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Prob, key) : this.Prob;
  }
  public static Offset<Global.EventContentDiceRaceProbExcel> Pack(FlatBufferBuilder builder, EventContentDiceRaceProbExcelT _o) {
    if (_o == null) return default(Offset<Global.EventContentDiceRaceProbExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentDiceRaceProb");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _EventContentDiceRaceResultType = TableEncryptionService.UseEncryption ? (Global.EventContentDiceRaceResultType)TableEncryptionService.Convert((int)_o.EventContentDiceRaceResultType, key) : _o.EventContentDiceRaceResultType;
		var _CostItemId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CostItemId, key) : _o.CostItemId;
		var _CostItemAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CostItemAmount, key) : _o.CostItemAmount;
		var _DiceResult = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DiceResult, key) : _o.DiceResult;
		var _Prob = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Prob, key) : _o.Prob;
    return CreateEventContentDiceRaceProbExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _EventContentDiceRaceResultType : _o.EventContentDiceRaceResultType,
      TableEncryptionService.UseEncryption ? _CostItemId : _o.CostItemId,
      TableEncryptionService.UseEncryption ? _CostItemAmount : _o.CostItemAmount,
      TableEncryptionService.UseEncryption ? _DiceResult : _o.DiceResult,
      TableEncryptionService.UseEncryption ? _Prob : _o.Prob);
  }
}

public class EventContentDiceRaceProbExcelT
{
  public long EventContentId { get; set; }
  public Global.EventContentDiceRaceResultType EventContentDiceRaceResultType { get; set; }
  public long CostItemId { get; set; }
  public int CostItemAmount { get; set; }
  public int DiceResult { get; set; }
  public int Prob { get; set; }

  public EventContentDiceRaceProbExcelT() {
    this.EventContentId = 0;
    this.EventContentDiceRaceResultType = Global.EventContentDiceRaceResultType.DiceResult1;
    this.CostItemId = 0;
    this.CostItemAmount = 0;
    this.DiceResult = 0;
    this.Prob = 0;
  }
}


static public class EventContentDiceRaceProbExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentDiceRaceResultType*/, 4 /*Global.EventContentDiceRaceResultType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CostItemId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*CostItemAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DiceResult*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Prob*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
