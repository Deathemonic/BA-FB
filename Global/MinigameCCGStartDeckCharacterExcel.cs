// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGStartDeckCharacterExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGStartDeckCharacterExcel GetRootAsMinigameCCGStartDeckCharacterExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGStartDeckCharacterExcel(_bb, new MinigameCCGStartDeckCharacterExcel()); }
  public static MinigameCCGStartDeckCharacterExcel GetRootAsMinigameCCGStartDeckCharacterExcel(ByteBuffer _bb, MinigameCCGStartDeckCharacterExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGStartDeckCharacterExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CCGId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.MinigameCCGStartDeckCharacterExcel> CreateMinigameCCGStartDeckCharacterExcel(FlatBufferBuilder builder,
      long CCGId = 0,
      long CharacterId = 0) {
    builder.StartTable(2);
    MinigameCCGStartDeckCharacterExcel.AddCharacterId(builder, CharacterId);
    MinigameCCGStartDeckCharacterExcel.AddCCGId(builder, CCGId);
    return MinigameCCGStartDeckCharacterExcel.EndMinigameCCGStartDeckCharacterExcel(builder);
  }

  public static void StartMinigameCCGStartDeckCharacterExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCCGId(FlatBufferBuilder builder, long cCGId) { builder.AddLong(0, cCGId, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(1, characterId, 0); }
  public static Offset<Global.MinigameCCGStartDeckCharacterExcel> EndMinigameCCGStartDeckCharacterExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MinigameCCGStartDeckCharacterExcel>(o);
  }
  public MinigameCCGStartDeckCharacterExcelT UnPack() {
    var _o = new MinigameCCGStartDeckCharacterExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGStartDeckCharacterExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGStartDeckCharacter");
    _o.CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CCGId, key) : this.CCGId;
    _o.CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterId, key) : this.CharacterId;
  }
  public static Offset<Global.MinigameCCGStartDeckCharacterExcel> Pack(FlatBufferBuilder builder, MinigameCCGStartDeckCharacterExcelT _o) {
    if (_o == null) return default(Offset<Global.MinigameCCGStartDeckCharacterExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGStartDeckCharacter");
		var _CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CCGId, key) : _o.CCGId;
		var _CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterId, key) : _o.CharacterId;
    return CreateMinigameCCGStartDeckCharacterExcel(
      builder,
      TableEncryptionService.UseEncryption ? _CCGId : _o.CCGId,
      TableEncryptionService.UseEncryption ? _CharacterId : _o.CharacterId);
  }
}

public class MinigameCCGStartDeckCharacterExcelT
{
  public long CCGId { get; set; }
  public long CharacterId { get; set; }

  public MinigameCCGStartDeckCharacterExcelT() {
    this.CCGId = 0;
    this.CharacterId = 0;
  }
}


static public class MinigameCCGStartDeckCharacterExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CCGId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
