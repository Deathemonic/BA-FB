// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GachaSelectPickupGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaSelectPickupGroupExcel GetRootAsGachaSelectPickupGroupExcel(ByteBuffer _bb) { return GetRootAsGachaSelectPickupGroupExcel(_bb, new GachaSelectPickupGroupExcel()); }
  public static GachaSelectPickupGroupExcel GetRootAsGachaSelectPickupGroupExcel(ByteBuffer _bb, GachaSelectPickupGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaSelectPickupGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GachaGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.GachaSelectPickupGroupExcel> CreateGachaSelectPickupGroupExcel(FlatBufferBuilder builder,
      long Id = 0,
      long GachaGroupId = 0,
      long CharacterId = 0) {
    builder.StartTable(3);
    GachaSelectPickupGroupExcel.AddCharacterId(builder, CharacterId);
    GachaSelectPickupGroupExcel.AddGachaGroupId(builder, GachaGroupId);
    GachaSelectPickupGroupExcel.AddId(builder, Id);
    return GachaSelectPickupGroupExcel.EndGachaSelectPickupGroupExcel(builder);
  }

  public static void StartGachaSelectPickupGroupExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddGachaGroupId(FlatBufferBuilder builder, long gachaGroupId) { builder.AddLong(1, gachaGroupId, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(2, characterId, 0); }
  public static Offset<Global.GachaSelectPickupGroupExcel> EndGachaSelectPickupGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.GachaSelectPickupGroupExcel>(o);
  }
  public GachaSelectPickupGroupExcelT UnPack() {
    var _o = new GachaSelectPickupGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaSelectPickupGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GachaSelectPickupGroup");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.GachaGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GachaGroupId, key) : this.GachaGroupId;
    _o.CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterId, key) : this.CharacterId;
  }
  public static Offset<Global.GachaSelectPickupGroupExcel> Pack(FlatBufferBuilder builder, GachaSelectPickupGroupExcelT _o) {
    if (_o == null) return default(Offset<Global.GachaSelectPickupGroupExcel>);
		byte[] key = TableEncryptionService.CreateKey("GachaSelectPickupGroup");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _GachaGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GachaGroupId, key) : _o.GachaGroupId;
		var _CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterId, key) : _o.CharacterId;
    return CreateGachaSelectPickupGroupExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _GachaGroupId : _o.GachaGroupId,
      TableEncryptionService.UseEncryption ? _CharacterId : _o.CharacterId);
  }
}

public class GachaSelectPickupGroupExcelT
{
  public long Id { get; set; }
  public long GachaGroupId { get; set; }
  public long CharacterId { get; set; }

  public GachaSelectPickupGroupExcelT() {
    this.Id = 0;
    this.GachaGroupId = 0;
    this.CharacterId = 0;
  }
}


static public class GachaSelectPickupGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GachaGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
