// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ParcelAutoSynthExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ParcelAutoSynthExcel GetRootAsParcelAutoSynthExcel(ByteBuffer _bb) { return GetRootAsParcelAutoSynthExcel(_bb, new ParcelAutoSynthExcel()); }
  public static ParcelAutoSynthExcel GetRootAsParcelAutoSynthExcel(ByteBuffer _bb, ParcelAutoSynthExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParcelAutoSynthExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Global.ParcelType RequireParcelType { get { int o = __p.__offset(4); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long RequireParcelId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RequireParcelAmount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SynthStartAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SynthEndAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool SynthMaxItem { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Global.ParcelType ResultParcelType { get { int o = __p.__offset(16); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long ResultParcelId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ResultParcelAmount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.ParcelAutoSynthExcel> CreateParcelAutoSynthExcel(FlatBufferBuilder builder,
      Global.ParcelType RequireParcelType = Global.ParcelType.None,
      long RequireParcelId = 0,
      long RequireParcelAmount = 0,
      long SynthStartAmount = 0,
      long SynthEndAmount = 0,
      bool SynthMaxItem = false,
      Global.ParcelType ResultParcelType = Global.ParcelType.None,
      long ResultParcelId = 0,
      long ResultParcelAmount = 0) {
    builder.StartTable(9);
    ParcelAutoSynthExcel.AddResultParcelAmount(builder, ResultParcelAmount);
    ParcelAutoSynthExcel.AddResultParcelId(builder, ResultParcelId);
    ParcelAutoSynthExcel.AddSynthEndAmount(builder, SynthEndAmount);
    ParcelAutoSynthExcel.AddSynthStartAmount(builder, SynthStartAmount);
    ParcelAutoSynthExcel.AddRequireParcelAmount(builder, RequireParcelAmount);
    ParcelAutoSynthExcel.AddRequireParcelId(builder, RequireParcelId);
    ParcelAutoSynthExcel.AddResultParcelType(builder, ResultParcelType);
    ParcelAutoSynthExcel.AddRequireParcelType(builder, RequireParcelType);
    ParcelAutoSynthExcel.AddSynthMaxItem(builder, SynthMaxItem);
    return ParcelAutoSynthExcel.EndParcelAutoSynthExcel(builder);
  }

  public static void StartParcelAutoSynthExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddRequireParcelType(FlatBufferBuilder builder, Global.ParcelType requireParcelType) { builder.AddInt(0, (int)requireParcelType, 0); }
  public static void AddRequireParcelId(FlatBufferBuilder builder, long requireParcelId) { builder.AddLong(1, requireParcelId, 0); }
  public static void AddRequireParcelAmount(FlatBufferBuilder builder, long requireParcelAmount) { builder.AddLong(2, requireParcelAmount, 0); }
  public static void AddSynthStartAmount(FlatBufferBuilder builder, long synthStartAmount) { builder.AddLong(3, synthStartAmount, 0); }
  public static void AddSynthEndAmount(FlatBufferBuilder builder, long synthEndAmount) { builder.AddLong(4, synthEndAmount, 0); }
  public static void AddSynthMaxItem(FlatBufferBuilder builder, bool synthMaxItem) { builder.AddBool(5, synthMaxItem, false); }
  public static void AddResultParcelType(FlatBufferBuilder builder, Global.ParcelType resultParcelType) { builder.AddInt(6, (int)resultParcelType, 0); }
  public static void AddResultParcelId(FlatBufferBuilder builder, long resultParcelId) { builder.AddLong(7, resultParcelId, 0); }
  public static void AddResultParcelAmount(FlatBufferBuilder builder, long resultParcelAmount) { builder.AddLong(8, resultParcelAmount, 0); }
  public static Offset<Global.ParcelAutoSynthExcel> EndParcelAutoSynthExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ParcelAutoSynthExcel>(o);
  }
  public ParcelAutoSynthExcelT UnPack() {
    var _o = new ParcelAutoSynthExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParcelAutoSynthExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ParcelAutoSynth");
    _o.RequireParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.RequireParcelType, key) : this.RequireParcelType;
    _o.RequireParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RequireParcelId, key) : this.RequireParcelId;
    _o.RequireParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RequireParcelAmount, key) : this.RequireParcelAmount;
    _o.SynthStartAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SynthStartAmount, key) : this.SynthStartAmount;
    _o.SynthEndAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SynthEndAmount, key) : this.SynthEndAmount;
    _o.SynthMaxItem = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.SynthMaxItem, key) : this.SynthMaxItem;
    _o.ResultParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ResultParcelType, key) : this.ResultParcelType;
    _o.ResultParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ResultParcelId, key) : this.ResultParcelId;
    _o.ResultParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ResultParcelAmount, key) : this.ResultParcelAmount;
  }
  public static Offset<Global.ParcelAutoSynthExcel> Pack(FlatBufferBuilder builder, ParcelAutoSynthExcelT _o) {
    if (_o == null) return default(Offset<Global.ParcelAutoSynthExcel>);
		byte[] key = TableEncryptionService.CreateKey("ParcelAutoSynth");
		var _RequireParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.RequireParcelType, key) : _o.RequireParcelType;
		var _RequireParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RequireParcelId, key) : _o.RequireParcelId;
		var _RequireParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RequireParcelAmount, key) : _o.RequireParcelAmount;
		var _SynthStartAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SynthStartAmount, key) : _o.SynthStartAmount;
		var _SynthEndAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SynthEndAmount, key) : _o.SynthEndAmount;
		var _SynthMaxItem = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.SynthMaxItem, key) : _o.SynthMaxItem;
		var _ResultParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.ResultParcelType, key) : _o.ResultParcelType;
		var _ResultParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ResultParcelId, key) : _o.ResultParcelId;
		var _ResultParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ResultParcelAmount, key) : _o.ResultParcelAmount;
    return CreateParcelAutoSynthExcel(
      builder,
      TableEncryptionService.UseEncryption ? _RequireParcelType : _o.RequireParcelType,
      TableEncryptionService.UseEncryption ? _RequireParcelId : _o.RequireParcelId,
      TableEncryptionService.UseEncryption ? _RequireParcelAmount : _o.RequireParcelAmount,
      TableEncryptionService.UseEncryption ? _SynthStartAmount : _o.SynthStartAmount,
      TableEncryptionService.UseEncryption ? _SynthEndAmount : _o.SynthEndAmount,
      TableEncryptionService.UseEncryption ? _SynthMaxItem : _o.SynthMaxItem,
      TableEncryptionService.UseEncryption ? _ResultParcelType : _o.ResultParcelType,
      TableEncryptionService.UseEncryption ? _ResultParcelId : _o.ResultParcelId,
      TableEncryptionService.UseEncryption ? _ResultParcelAmount : _o.ResultParcelAmount);
  }
}

public class ParcelAutoSynthExcelT
{
  public Global.ParcelType RequireParcelType { get; set; }
  public long RequireParcelId { get; set; }
  public long RequireParcelAmount { get; set; }
  public long SynthStartAmount { get; set; }
  public long SynthEndAmount { get; set; }
  public bool SynthMaxItem { get; set; }
  public Global.ParcelType ResultParcelType { get; set; }
  public long ResultParcelId { get; set; }
  public long ResultParcelAmount { get; set; }

  public ParcelAutoSynthExcelT() {
    this.RequireParcelType = Global.ParcelType.None;
    this.RequireParcelId = 0;
    this.RequireParcelAmount = 0;
    this.SynthStartAmount = 0;
    this.SynthEndAmount = 0;
    this.SynthMaxItem = false;
    this.ResultParcelType = Global.ParcelType.None;
    this.ResultParcelId = 0;
    this.ResultParcelAmount = 0;
  }
}


static public class ParcelAutoSynthExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RequireParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RequireParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*RequireParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*SynthStartAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*SynthEndAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*SynthMaxItem*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*ResultParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ResultParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*ResultParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
