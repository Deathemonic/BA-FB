// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BulletArmorDamageFactorExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BulletArmorDamageFactorExcel GetRootAsBulletArmorDamageFactorExcel(ByteBuffer _bb) { return GetRootAsBulletArmorDamageFactorExcel(_bb, new BulletArmorDamageFactorExcel()); }
  public static BulletArmorDamageFactorExcel GetRootAsBulletArmorDamageFactorExcel(ByteBuffer _bb, BulletArmorDamageFactorExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BulletArmorDamageFactorExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string DamageFactorGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDamageFactorGroupIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDamageFactorGroupIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDamageFactorGroupIdArray() { return __p.__vector_as_array<byte>(4); }
  public Global.BulletType BulletType { get { int o = __p.__offset(6); return o != 0 ? (Global.BulletType)__p.bb.GetInt(o + __p.bb_pos) : Global.BulletType.Normal; } }
  public Global.ArmorType ArmorType { get { int o = __p.__offset(8); return o != 0 ? (Global.ArmorType)__p.bb.GetInt(o + __p.bb_pos) : Global.ArmorType.LightArmor; } }
  public long DamageRate { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.DamageAttribute DamageAttribute { get { int o = __p.__offset(12); return o != 0 ? (Global.DamageAttribute)__p.bb.GetInt(o + __p.bb_pos) : Global.DamageAttribute.Resist; } }
  public long MinDamageRate { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxDamageRate { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ShowHighlightFloater { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Global.BulletArmorDamageFactorExcel> CreateBulletArmorDamageFactorExcel(FlatBufferBuilder builder,
      StringOffset DamageFactorGroupIdOffset = default(StringOffset),
      Global.BulletType BulletType = Global.BulletType.Normal,
      Global.ArmorType ArmorType = Global.ArmorType.LightArmor,
      long DamageRate = 0,
      Global.DamageAttribute DamageAttribute = Global.DamageAttribute.Resist,
      long MinDamageRate = 0,
      long MaxDamageRate = 0,
      bool ShowHighlightFloater = false) {
    builder.StartTable(8);
    BulletArmorDamageFactorExcel.AddMaxDamageRate(builder, MaxDamageRate);
    BulletArmorDamageFactorExcel.AddMinDamageRate(builder, MinDamageRate);
    BulletArmorDamageFactorExcel.AddDamageRate(builder, DamageRate);
    BulletArmorDamageFactorExcel.AddDamageAttribute(builder, DamageAttribute);
    BulletArmorDamageFactorExcel.AddArmorType(builder, ArmorType);
    BulletArmorDamageFactorExcel.AddBulletType(builder, BulletType);
    BulletArmorDamageFactorExcel.AddDamageFactorGroupId(builder, DamageFactorGroupIdOffset);
    BulletArmorDamageFactorExcel.AddShowHighlightFloater(builder, ShowHighlightFloater);
    return BulletArmorDamageFactorExcel.EndBulletArmorDamageFactorExcel(builder);
  }

  public static void StartBulletArmorDamageFactorExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddDamageFactorGroupId(FlatBufferBuilder builder, StringOffset damageFactorGroupIdOffset) { builder.AddOffset(0, damageFactorGroupIdOffset.Value, 0); }
  public static void AddBulletType(FlatBufferBuilder builder, Global.BulletType bulletType) { builder.AddInt(1, (int)bulletType, 0); }
  public static void AddArmorType(FlatBufferBuilder builder, Global.ArmorType armorType) { builder.AddInt(2, (int)armorType, 0); }
  public static void AddDamageRate(FlatBufferBuilder builder, long damageRate) { builder.AddLong(3, damageRate, 0); }
  public static void AddDamageAttribute(FlatBufferBuilder builder, Global.DamageAttribute damageAttribute) { builder.AddInt(4, (int)damageAttribute, 0); }
  public static void AddMinDamageRate(FlatBufferBuilder builder, long minDamageRate) { builder.AddLong(5, minDamageRate, 0); }
  public static void AddMaxDamageRate(FlatBufferBuilder builder, long maxDamageRate) { builder.AddLong(6, maxDamageRate, 0); }
  public static void AddShowHighlightFloater(FlatBufferBuilder builder, bool showHighlightFloater) { builder.AddBool(7, showHighlightFloater, false); }
  public static Offset<Global.BulletArmorDamageFactorExcel> EndBulletArmorDamageFactorExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.BulletArmorDamageFactorExcel>(o);
  }
  public BulletArmorDamageFactorExcelT UnPack() {
    var _o = new BulletArmorDamageFactorExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BulletArmorDamageFactorExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BulletArmorDamageFactor");
    _o.DamageFactorGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DamageFactorGroupId, key) : this.DamageFactorGroupId;
    _o.BulletType = TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)this.BulletType, key) : this.BulletType;
    _o.ArmorType = TableEncryptionService.UseEncryption ? (Global.ArmorType)TableEncryptionService.Convert((int)this.ArmorType, key) : this.ArmorType;
    _o.DamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DamageRate, key) : this.DamageRate;
    _o.DamageAttribute = TableEncryptionService.UseEncryption ? (Global.DamageAttribute)TableEncryptionService.Convert((int)this.DamageAttribute, key) : this.DamageAttribute;
    _o.MinDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MinDamageRate, key) : this.MinDamageRate;
    _o.MaxDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaxDamageRate, key) : this.MaxDamageRate;
    _o.ShowHighlightFloater = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowHighlightFloater, key) : this.ShowHighlightFloater;
  }
  public static Offset<Global.BulletArmorDamageFactorExcel> Pack(FlatBufferBuilder builder, BulletArmorDamageFactorExcelT _o) {
    if (_o == null) return default(Offset<Global.BulletArmorDamageFactorExcel>);
		byte[] key = TableEncryptionService.CreateKey("BulletArmorDamageFactor");
    var _DamageFactorGroupId = _o.DamageFactorGroupId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DamageFactorGroupId, key) : _o.DamageFactorGroupId));
		var _BulletType = TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)_o.BulletType, key) : _o.BulletType;
		var _ArmorType = TableEncryptionService.UseEncryption ? (Global.ArmorType)TableEncryptionService.Convert((int)_o.ArmorType, key) : _o.ArmorType;
		var _DamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DamageRate, key) : _o.DamageRate;
		var _DamageAttribute = TableEncryptionService.UseEncryption ? (Global.DamageAttribute)TableEncryptionService.Convert((int)_o.DamageAttribute, key) : _o.DamageAttribute;
		var _MinDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MinDamageRate, key) : _o.MinDamageRate;
		var _MaxDamageRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaxDamageRate, key) : _o.MaxDamageRate;
		var _ShowHighlightFloater = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowHighlightFloater, key) : _o.ShowHighlightFloater;
    return CreateBulletArmorDamageFactorExcel(
      builder,
      _DamageFactorGroupId,
      TableEncryptionService.UseEncryption ? _BulletType : _o.BulletType,
      TableEncryptionService.UseEncryption ? _ArmorType : _o.ArmorType,
      TableEncryptionService.UseEncryption ? _DamageRate : _o.DamageRate,
      TableEncryptionService.UseEncryption ? _DamageAttribute : _o.DamageAttribute,
      TableEncryptionService.UseEncryption ? _MinDamageRate : _o.MinDamageRate,
      TableEncryptionService.UseEncryption ? _MaxDamageRate : _o.MaxDamageRate,
      TableEncryptionService.UseEncryption ? _ShowHighlightFloater : _o.ShowHighlightFloater);
  }
}

public class BulletArmorDamageFactorExcelT
{
  public string DamageFactorGroupId { get; set; }
  public Global.BulletType BulletType { get; set; }
  public Global.ArmorType ArmorType { get; set; }
  public long DamageRate { get; set; }
  public Global.DamageAttribute DamageAttribute { get; set; }
  public long MinDamageRate { get; set; }
  public long MaxDamageRate { get; set; }
  public bool ShowHighlightFloater { get; set; }

  public BulletArmorDamageFactorExcelT() {
    this.DamageFactorGroupId = null;
    this.BulletType = Global.BulletType.Normal;
    this.ArmorType = Global.ArmorType.LightArmor;
    this.DamageRate = 0;
    this.DamageAttribute = Global.DamageAttribute.Resist;
    this.MinDamageRate = 0;
    this.MaxDamageRate = 0;
    this.ShowHighlightFloater = false;
  }
}


static public class BulletArmorDamageFactorExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*DamageFactorGroupId*/, false)
      && verifier.VerifyField(tablePos, 6 /*BulletType*/, 4 /*Global.BulletType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ArmorType*/, 4 /*Global.ArmorType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*DamageRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*DamageAttribute*/, 4 /*Global.DamageAttribute*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MinDamageRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*MaxDamageRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*ShowHighlightFloater*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
