// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentStageExcel GetRootAsEventContentStageExcel(ByteBuffer _bb) { return GetRootAsEventContentStageExcel(_bb, new EventContentStageExcel()); }
  public static EventContentStageExcel GetRootAsEventContentStageExcel(ByteBuffer _bb, EventContentStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public long EventContentId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.StageDifficulty StageDifficulty { get { int o = __p.__offset(10); return o != 0 ? (Global.StageDifficulty)__p.bb.GetInt(o + __p.bb_pos) : Global.StageDifficulty.None; } }
  public string StageNumber { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageNumberBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStageNumberBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStageNumberArray() { return __p.__vector_as_array<byte>(12); }
  public int StageDisplay { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long PrevStageId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenDate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenEventPoint { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PrevStageSubEventId { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenConditionScenarioId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.EventContentType OpenConditionContentType { get { int o = __p.__offset(26); return o != 0 ? (Global.EventContentType)__p.bb.GetInt(o + __p.bb_pos) : Global.EventContentType.Stage; } }
  public long OpenConditionContentId { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BattleDuration { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType StageEnterCostType { get { int o = __p.__offset(32); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long StageEnterCostId { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int StageEnterCostAmount { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageEnterEchelonCount { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long StarConditionTacticRankSCount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long StarConditionTurnCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnterScenarioGroupId(int j) { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int EnterScenarioGroupIdLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetEnterScenarioGroupIdBytes() { return __p.__vector_as_span<long>(44, 8); }
#else
  public ArraySegment<byte>? GetEnterScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public long[] GetEnterScenarioGroupIdArray() { return __p.__vector_as_array<long>(44); }
  public long ClearScenarioGroupId(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ClearScenarioGroupIdLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetClearScenarioGroupIdBytes() { return __p.__vector_as_span<long>(46, 8); }
#else
  public ArraySegment<byte>? GetClearScenarioGroupIdBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public long[] GetClearScenarioGroupIdArray() { return __p.__vector_as_array<long>(46); }
  public string StrategyMap { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetStrategyMapArray() { return __p.__vector_as_array<byte>(48); }
  public string StrategyMapBG { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrategyMapBGBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetStrategyMapBGBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetStrategyMapBGArray() { return __p.__vector_as_array<byte>(50); }
  public long EventContentStageRewardId { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxTurn { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Global.StageTopography StageTopography { get { int o = __p.__offset(56); return o != 0 ? (Global.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : Global.StageTopography.Street; } }
  public int RecommandLevel { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BgmId { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBgmIdBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetBgmIdBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetBgmIdArray() { return __p.__vector_as_array<byte>(60); }
  public Global.StrategyEnvironment StrategyEnvironment { get { int o = __p.__offset(62); return o != 0 ? (Global.StrategyEnvironment)__p.bb.GetInt(o + __p.bb_pos) : Global.StrategyEnvironment.None; } }
  public long GroundID { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ContentType ContentType { get { int o = __p.__offset(66); return o != 0 ? (Global.ContentType)__p.bb.GetInt(o + __p.bb_pos) : Global.ContentType.None; } }
  public long BGMId { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool InstantClear { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long BuffContentId { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FixedEchelonId { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ChallengeDisplay { get { int o = __p.__offset(76); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Global.StarGoalType StarGoal(int j) { int o = __p.__offset(78); return o != 0 ? (Global.StarGoalType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.StarGoalType)0; }
  public int StarGoalLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.StarGoalType> GetStarGoalBytes() { return __p.__vector_as_span<Global.StarGoalType>(78, 4); }
#else
  public ArraySegment<byte>? GetStarGoalBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public Global.StarGoalType[] GetStarGoalArray() { int o = __p.__offset(78); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.StarGoalType[] a = new Global.StarGoalType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.StarGoalType)__p.bb.GetInt(p + i * 4); } return a; }
  public int StarGoalAmount(int j) { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StarGoalAmountLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStarGoalAmountBytes() { return __p.__vector_as_span<int>(80, 4); }
#else
  public ArraySegment<byte>? GetStarGoalAmountBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public int[] GetStarGoalAmountArray() { return __p.__vector_as_array<int>(80); }
  public bool IsDefeatBattle { get { int o = __p.__offset(82); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint StageHint { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Global.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(86); return o != 0 ? (Global.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : Global.EchelonExtensionType.Base; } }

  public static Offset<Global.EventContentStageExcel> CreateEventContentStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset NameOffset = default(StringOffset),
      long EventContentId = 0,
      Global.StageDifficulty StageDifficulty = Global.StageDifficulty.None,
      StringOffset StageNumberOffset = default(StringOffset),
      int StageDisplay = 0,
      long PrevStageId = 0,
      long OpenDate = 0,
      long OpenEventPoint = 0,
      long PrevStageSubEventId = 0,
      long OpenConditionScenarioId = 0,
      Global.EventContentType OpenConditionContentType = Global.EventContentType.Stage,
      long OpenConditionContentId = 0,
      long BattleDuration = 0,
      Global.ParcelType StageEnterCostType = Global.ParcelType.None,
      long StageEnterCostId = 0,
      int StageEnterCostAmount = 0,
      int StageEnterEchelonCount = 0,
      long StarConditionTacticRankSCount = 0,
      long StarConditionTurnCount = 0,
      VectorOffset enterScenarioGroupIdOffset = default(VectorOffset),
      VectorOffset clearScenarioGroupIdOffset = default(VectorOffset),
      StringOffset StrategyMapOffset = default(StringOffset),
      StringOffset StrategyMapBGOffset = default(StringOffset),
      long EventContentStageRewardId = 0,
      int MaxTurn = 0,
      Global.StageTopography StageTopography = Global.StageTopography.Street,
      int RecommandLevel = 0,
      StringOffset BgmIdOffset = default(StringOffset),
      Global.StrategyEnvironment StrategyEnvironment = Global.StrategyEnvironment.None,
      long GroundID = 0,
      Global.ContentType ContentType = Global.ContentType.None,
      long BGMId = 0,
      bool InstantClear = false,
      long BuffContentId = 0,
      long FixedEchelonId = 0,
      bool ChallengeDisplay = false,
      VectorOffset starGoalOffset = default(VectorOffset),
      VectorOffset starGoalAmountOffset = default(VectorOffset),
      bool IsDefeatBattle = false,
      uint StageHint = 0,
      Global.EchelonExtensionType EchelonExtensionType = Global.EchelonExtensionType.Base) {
    builder.StartTable(42);
    EventContentStageExcel.AddFixedEchelonId(builder, FixedEchelonId);
    EventContentStageExcel.AddBuffContentId(builder, BuffContentId);
    EventContentStageExcel.AddBGMId(builder, BGMId);
    EventContentStageExcel.AddGroundID(builder, GroundID);
    EventContentStageExcel.AddEventContentStageRewardId(builder, EventContentStageRewardId);
    EventContentStageExcel.AddStarConditionTurnCount(builder, StarConditionTurnCount);
    EventContentStageExcel.AddStarConditionTacticRankSCount(builder, StarConditionTacticRankSCount);
    EventContentStageExcel.AddStageEnterCostId(builder, StageEnterCostId);
    EventContentStageExcel.AddBattleDuration(builder, BattleDuration);
    EventContentStageExcel.AddOpenConditionContentId(builder, OpenConditionContentId);
    EventContentStageExcel.AddOpenConditionScenarioId(builder, OpenConditionScenarioId);
    EventContentStageExcel.AddPrevStageSubEventId(builder, PrevStageSubEventId);
    EventContentStageExcel.AddOpenEventPoint(builder, OpenEventPoint);
    EventContentStageExcel.AddOpenDate(builder, OpenDate);
    EventContentStageExcel.AddPrevStageId(builder, PrevStageId);
    EventContentStageExcel.AddEventContentId(builder, EventContentId);
    EventContentStageExcel.AddId(builder, Id);
    EventContentStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    EventContentStageExcel.AddStageHint(builder, StageHint);
    EventContentStageExcel.AddStarGoalAmount(builder, starGoalAmountOffset);
    EventContentStageExcel.AddStarGoal(builder, starGoalOffset);
    EventContentStageExcel.AddContentType(builder, ContentType);
    EventContentStageExcel.AddStrategyEnvironment(builder, StrategyEnvironment);
    EventContentStageExcel.AddBgmId(builder, BgmIdOffset);
    EventContentStageExcel.AddRecommandLevel(builder, RecommandLevel);
    EventContentStageExcel.AddStageTopography(builder, StageTopography);
    EventContentStageExcel.AddMaxTurn(builder, MaxTurn);
    EventContentStageExcel.AddStrategyMapBG(builder, StrategyMapBGOffset);
    EventContentStageExcel.AddStrategyMap(builder, StrategyMapOffset);
    EventContentStageExcel.AddClearScenarioGroupId(builder, clearScenarioGroupIdOffset);
    EventContentStageExcel.AddEnterScenarioGroupId(builder, enterScenarioGroupIdOffset);
    EventContentStageExcel.AddStageEnterEchelonCount(builder, StageEnterEchelonCount);
    EventContentStageExcel.AddStageEnterCostAmount(builder, StageEnterCostAmount);
    EventContentStageExcel.AddStageEnterCostType(builder, StageEnterCostType);
    EventContentStageExcel.AddOpenConditionContentType(builder, OpenConditionContentType);
    EventContentStageExcel.AddStageDisplay(builder, StageDisplay);
    EventContentStageExcel.AddStageNumber(builder, StageNumberOffset);
    EventContentStageExcel.AddStageDifficulty(builder, StageDifficulty);
    EventContentStageExcel.AddName(builder, NameOffset);
    EventContentStageExcel.AddIsDefeatBattle(builder, IsDefeatBattle);
    EventContentStageExcel.AddChallengeDisplay(builder, ChallengeDisplay);
    EventContentStageExcel.AddInstantClear(builder, InstantClear);
    return EventContentStageExcel.EndEventContentStageExcel(builder);
  }

  public static void StartEventContentStageExcel(FlatBufferBuilder builder) { builder.StartTable(42); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(2, eventContentId, 0); }
  public static void AddStageDifficulty(FlatBufferBuilder builder, Global.StageDifficulty stageDifficulty) { builder.AddInt(3, (int)stageDifficulty, 0); }
  public static void AddStageNumber(FlatBufferBuilder builder, StringOffset stageNumberOffset) { builder.AddOffset(4, stageNumberOffset.Value, 0); }
  public static void AddStageDisplay(FlatBufferBuilder builder, int stageDisplay) { builder.AddInt(5, stageDisplay, 0); }
  public static void AddPrevStageId(FlatBufferBuilder builder, long prevStageId) { builder.AddLong(6, prevStageId, 0); }
  public static void AddOpenDate(FlatBufferBuilder builder, long openDate) { builder.AddLong(7, openDate, 0); }
  public static void AddOpenEventPoint(FlatBufferBuilder builder, long openEventPoint) { builder.AddLong(8, openEventPoint, 0); }
  public static void AddPrevStageSubEventId(FlatBufferBuilder builder, long prevStageSubEventId) { builder.AddLong(9, prevStageSubEventId, 0); }
  public static void AddOpenConditionScenarioId(FlatBufferBuilder builder, long openConditionScenarioId) { builder.AddLong(10, openConditionScenarioId, 0); }
  public static void AddOpenConditionContentType(FlatBufferBuilder builder, Global.EventContentType openConditionContentType) { builder.AddInt(11, (int)openConditionContentType, 0); }
  public static void AddOpenConditionContentId(FlatBufferBuilder builder, long openConditionContentId) { builder.AddLong(12, openConditionContentId, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(13, battleDuration, 0); }
  public static void AddStageEnterCostType(FlatBufferBuilder builder, Global.ParcelType stageEnterCostType) { builder.AddInt(14, (int)stageEnterCostType, 0); }
  public static void AddStageEnterCostId(FlatBufferBuilder builder, long stageEnterCostId) { builder.AddLong(15, stageEnterCostId, 0); }
  public static void AddStageEnterCostAmount(FlatBufferBuilder builder, int stageEnterCostAmount) { builder.AddInt(16, stageEnterCostAmount, 0); }
  public static void AddStageEnterEchelonCount(FlatBufferBuilder builder, int stageEnterEchelonCount) { builder.AddInt(17, stageEnterEchelonCount, 0); }
  public static void AddStarConditionTacticRankSCount(FlatBufferBuilder builder, long starConditionTacticRankSCount) { builder.AddLong(18, starConditionTacticRankSCount, 0); }
  public static void AddStarConditionTurnCount(FlatBufferBuilder builder, long starConditionTurnCount) { builder.AddLong(19, starConditionTurnCount, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, VectorOffset enterScenarioGroupIdOffset) { builder.AddOffset(20, enterScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateEnterScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnterScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnterScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddClearScenarioGroupId(FlatBufferBuilder builder, VectorOffset clearScenarioGroupIdOffset) { builder.AddOffset(21, clearScenarioGroupIdOffset.Value, 0); }
  public static VectorOffset CreateClearScenarioGroupIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClearScenarioGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClearScenarioGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStrategyMap(FlatBufferBuilder builder, StringOffset strategyMapOffset) { builder.AddOffset(22, strategyMapOffset.Value, 0); }
  public static void AddStrategyMapBG(FlatBufferBuilder builder, StringOffset strategyMapBGOffset) { builder.AddOffset(23, strategyMapBGOffset.Value, 0); }
  public static void AddEventContentStageRewardId(FlatBufferBuilder builder, long eventContentStageRewardId) { builder.AddLong(24, eventContentStageRewardId, 0); }
  public static void AddMaxTurn(FlatBufferBuilder builder, int maxTurn) { builder.AddInt(25, maxTurn, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, Global.StageTopography stageTopography) { builder.AddInt(26, (int)stageTopography, 0); }
  public static void AddRecommandLevel(FlatBufferBuilder builder, int recommandLevel) { builder.AddInt(27, recommandLevel, 0); }
  public static void AddBgmId(FlatBufferBuilder builder, StringOffset bgmIdOffset) { builder.AddOffset(28, bgmIdOffset.Value, 0); }
  public static void AddStrategyEnvironment(FlatBufferBuilder builder, Global.StrategyEnvironment strategyEnvironment) { builder.AddInt(29, (int)strategyEnvironment, 0); }
  public static void AddGroundID(FlatBufferBuilder builder, long groundID) { builder.AddLong(30, groundID, 0); }
  public static void AddContentType(FlatBufferBuilder builder, Global.ContentType contentType) { builder.AddInt(31, (int)contentType, 0); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(32, bGMId, 0); }
  public static void AddInstantClear(FlatBufferBuilder builder, bool instantClear) { builder.AddBool(33, instantClear, false); }
  public static void AddBuffContentId(FlatBufferBuilder builder, long buffContentId) { builder.AddLong(34, buffContentId, 0); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long fixedEchelonId) { builder.AddLong(35, fixedEchelonId, 0); }
  public static void AddChallengeDisplay(FlatBufferBuilder builder, bool challengeDisplay) { builder.AddBool(36, challengeDisplay, false); }
  public static void AddStarGoal(FlatBufferBuilder builder, VectorOffset starGoalOffset) { builder.AddOffset(37, starGoalOffset.Value, 0); }
  public static VectorOffset CreateStarGoalVector(FlatBufferBuilder builder, Global.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, Global.StarGoalType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.StarGoalType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.StarGoalType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarGoalAmount(FlatBufferBuilder builder, VectorOffset starGoalAmountOffset) { builder.AddOffset(38, starGoalAmountOffset.Value, 0); }
  public static VectorOffset CreateStarGoalAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarGoalAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarGoalAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsDefeatBattle(FlatBufferBuilder builder, bool isDefeatBattle) { builder.AddBool(39, isDefeatBattle, false); }
  public static void AddStageHint(FlatBufferBuilder builder, uint stageHint) { builder.AddUint(40, stageHint, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, Global.EchelonExtensionType echelonExtensionType) { builder.AddInt(41, (int)echelonExtensionType, 0); }
  public static Offset<Global.EventContentStageExcel> EndEventContentStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EventContentStageExcel>(o);
  }
  public EventContentStageExcelT UnPack() {
    var _o = new EventContentStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentStage");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Name, key) : this.Name;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.StageDifficulty = TableEncryptionService.UseEncryption ? (Global.StageDifficulty)TableEncryptionService.Convert((int)this.StageDifficulty, key) : this.StageDifficulty;
    _o.StageNumber = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StageNumber, key) : this.StageNumber;
    _o.StageDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageDisplay, key) : this.StageDisplay;
    _o.PrevStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PrevStageId, key) : this.PrevStageId;
    _o.OpenDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OpenDate, key) : this.OpenDate;
    _o.OpenEventPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OpenEventPoint, key) : this.OpenEventPoint;
    _o.PrevStageSubEventId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PrevStageSubEventId, key) : this.PrevStageSubEventId;
    _o.OpenConditionScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OpenConditionScenarioId, key) : this.OpenConditionScenarioId;
    _o.OpenConditionContentType = TableEncryptionService.UseEncryption ? (Global.EventContentType)TableEncryptionService.Convert((int)this.OpenConditionContentType, key) : this.OpenConditionContentType;
    _o.OpenConditionContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OpenConditionContentId, key) : this.OpenConditionContentId;
    _o.BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattleDuration, key) : this.BattleDuration;
    _o.StageEnterCostType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.StageEnterCostType, key) : this.StageEnterCostType;
    _o.StageEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StageEnterCostId, key) : this.StageEnterCostId;
    _o.StageEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageEnterCostAmount, key) : this.StageEnterCostAmount;
    _o.StageEnterEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StageEnterEchelonCount, key) : this.StageEnterEchelonCount;
    _o.StarConditionTacticRankSCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StarConditionTacticRankSCount, key) : this.StarConditionTacticRankSCount;
    _o.StarConditionTurnCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StarConditionTurnCount, key) : this.StarConditionTurnCount;
    _o.EnterScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.EnterScenarioGroupIdLength; ++_j) {_o.EnterScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnterScenarioGroupId(_j), key) : this.EnterScenarioGroupId(_j));}
    _o.ClearScenarioGroupId = new List<long>();
    for (var _j = 0; _j < this.ClearScenarioGroupIdLength; ++_j) {_o.ClearScenarioGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearScenarioGroupId(_j), key) : this.ClearScenarioGroupId(_j));}
    _o.StrategyMap = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StrategyMap, key) : this.StrategyMap;
    _o.StrategyMapBG = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StrategyMapBG, key) : this.StrategyMapBG;
    _o.EventContentStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentStageRewardId, key) : this.EventContentStageRewardId;
    _o.MaxTurn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxTurn, key) : this.MaxTurn;
    _o.StageTopography = TableEncryptionService.UseEncryption ? (Global.StageTopography)TableEncryptionService.Convert((int)this.StageTopography, key) : this.StageTopography;
    _o.RecommandLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RecommandLevel, key) : this.RecommandLevel;
    _o.BgmId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BgmId, key) : this.BgmId;
    _o.StrategyEnvironment = TableEncryptionService.UseEncryption ? (Global.StrategyEnvironment)TableEncryptionService.Convert((int)this.StrategyEnvironment, key) : this.StrategyEnvironment;
    _o.GroundID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundID, key) : this.GroundID;
    _o.ContentType = TableEncryptionService.UseEncryption ? (Global.ContentType)TableEncryptionService.Convert((int)this.ContentType, key) : this.ContentType;
    _o.BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BGMId, key) : this.BGMId;
    _o.InstantClear = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.InstantClear, key) : this.InstantClear;
    _o.BuffContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BuffContentId, key) : this.BuffContentId;
    _o.FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FixedEchelonId, key) : this.FixedEchelonId;
    _o.ChallengeDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ChallengeDisplay, key) : this.ChallengeDisplay;
    _o.StarGoal = new List<Global.StarGoalType>();
    for (var _j = 0; _j < this.StarGoalLength; ++_j) {_o.StarGoal.Add(TableEncryptionService.UseEncryption ? (Global.StarGoalType)TableEncryptionService.Convert((int)this.StarGoal(_j), key) : this.StarGoal(_j));}
    _o.StarGoalAmount = new List<int>();
    for (var _j = 0; _j < this.StarGoalAmountLength; ++_j) {_o.StarGoalAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StarGoalAmount(_j), key) : this.StarGoalAmount(_j));}
    _o.IsDefeatBattle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsDefeatBattle, key) : this.IsDefeatBattle;
    _o.StageHint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.StageHint, key) : this.StageHint;
    _o.EchelonExtensionType = TableEncryptionService.UseEncryption ? (Global.EchelonExtensionType)TableEncryptionService.Convert((int)this.EchelonExtensionType, key) : this.EchelonExtensionType;
  }
  public static Offset<Global.EventContentStageExcel> Pack(FlatBufferBuilder builder, EventContentStageExcelT _o) {
    if (_o == null) return default(Offset<Global.EventContentStageExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentStage");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Name, key) : _o.Name));
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _StageDifficulty = TableEncryptionService.UseEncryption ? (Global.StageDifficulty)TableEncryptionService.Convert((int)_o.StageDifficulty, key) : _o.StageDifficulty;
    var _StageNumber = _o.StageNumber == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StageNumber, key) : _o.StageNumber));
		var _StageDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageDisplay, key) : _o.StageDisplay;
		var _PrevStageId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PrevStageId, key) : _o.PrevStageId;
		var _OpenDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OpenDate, key) : _o.OpenDate;
		var _OpenEventPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OpenEventPoint, key) : _o.OpenEventPoint;
		var _PrevStageSubEventId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PrevStageSubEventId, key) : _o.PrevStageSubEventId;
		var _OpenConditionScenarioId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OpenConditionScenarioId, key) : _o.OpenConditionScenarioId;
		var _OpenConditionContentType = TableEncryptionService.UseEncryption ? (Global.EventContentType)TableEncryptionService.Convert((int)_o.OpenConditionContentType, key) : _o.OpenConditionContentType;
		var _OpenConditionContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OpenConditionContentId, key) : _o.OpenConditionContentId;
		var _BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattleDuration, key) : _o.BattleDuration;
		var _StageEnterCostType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.StageEnterCostType, key) : _o.StageEnterCostType;
		var _StageEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StageEnterCostId, key) : _o.StageEnterCostId;
		var _StageEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageEnterCostAmount, key) : _o.StageEnterCostAmount;
		var _StageEnterEchelonCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StageEnterEchelonCount, key) : _o.StageEnterEchelonCount;
		var _StarConditionTacticRankSCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StarConditionTacticRankSCount, key) : _o.StarConditionTacticRankSCount;
		var _StarConditionTurnCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StarConditionTurnCount, key) : _o.StarConditionTurnCount;
    var _enterScenarioGroupId = default(VectorOffset);
    if (_o.EnterScenarioGroupId != null) {
      var __enterScenarioGroupId = _o.EnterScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _enterScenarioGroupId = CreateEnterScenarioGroupIdVector(builder, __enterScenarioGroupId);
    }
    var _clearScenarioGroupId = default(VectorOffset);
    if (_o.ClearScenarioGroupId != null) {
      var __clearScenarioGroupId = _o.ClearScenarioGroupId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _clearScenarioGroupId = CreateClearScenarioGroupIdVector(builder, __clearScenarioGroupId);
    }
    var _StrategyMap = _o.StrategyMap == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StrategyMap, key) : _o.StrategyMap));
    var _StrategyMapBG = _o.StrategyMapBG == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StrategyMapBG, key) : _o.StrategyMapBG));
		var _EventContentStageRewardId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentStageRewardId, key) : _o.EventContentStageRewardId;
		var _MaxTurn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxTurn, key) : _o.MaxTurn;
		var _StageTopography = TableEncryptionService.UseEncryption ? (Global.StageTopography)TableEncryptionService.Convert((int)_o.StageTopography, key) : _o.StageTopography;
		var _RecommandLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RecommandLevel, key) : _o.RecommandLevel;
    var _BgmId = _o.BgmId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BgmId, key) : _o.BgmId));
		var _StrategyEnvironment = TableEncryptionService.UseEncryption ? (Global.StrategyEnvironment)TableEncryptionService.Convert((int)_o.StrategyEnvironment, key) : _o.StrategyEnvironment;
		var _GroundID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundID, key) : _o.GroundID;
		var _ContentType = TableEncryptionService.UseEncryption ? (Global.ContentType)TableEncryptionService.Convert((int)_o.ContentType, key) : _o.ContentType;
		var _BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BGMId, key) : _o.BGMId;
		var _InstantClear = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.InstantClear, key) : _o.InstantClear;
		var _BuffContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BuffContentId, key) : _o.BuffContentId;
		var _FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FixedEchelonId, key) : _o.FixedEchelonId;
		var _ChallengeDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ChallengeDisplay, key) : _o.ChallengeDisplay;
    var _starGoal = default(VectorOffset);
    if (_o.StarGoal != null) {
      var __starGoal = _o.StarGoal.Select(x => TableEncryptionService.UseEncryption ? (Global.StarGoalType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _starGoal = CreateStarGoalVector(builder, __starGoal);
    }
    var _starGoalAmount = default(VectorOffset);
    if (_o.StarGoalAmount != null) {
      var __starGoalAmount = _o.StarGoalAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _starGoalAmount = CreateStarGoalAmountVector(builder, __starGoalAmount);
    }
		var _IsDefeatBattle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsDefeatBattle, key) : _o.IsDefeatBattle;
		var _StageHint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.StageHint, key) : _o.StageHint;
		var _EchelonExtensionType = TableEncryptionService.UseEncryption ? (Global.EchelonExtensionType)TableEncryptionService.Convert((int)_o.EchelonExtensionType, key) : _o.EchelonExtensionType;
    return CreateEventContentStageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _Name,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _StageDifficulty : _o.StageDifficulty,
      _StageNumber,
      TableEncryptionService.UseEncryption ? _StageDisplay : _o.StageDisplay,
      TableEncryptionService.UseEncryption ? _PrevStageId : _o.PrevStageId,
      TableEncryptionService.UseEncryption ? _OpenDate : _o.OpenDate,
      TableEncryptionService.UseEncryption ? _OpenEventPoint : _o.OpenEventPoint,
      TableEncryptionService.UseEncryption ? _PrevStageSubEventId : _o.PrevStageSubEventId,
      TableEncryptionService.UseEncryption ? _OpenConditionScenarioId : _o.OpenConditionScenarioId,
      TableEncryptionService.UseEncryption ? _OpenConditionContentType : _o.OpenConditionContentType,
      TableEncryptionService.UseEncryption ? _OpenConditionContentId : _o.OpenConditionContentId,
      TableEncryptionService.UseEncryption ? _BattleDuration : _o.BattleDuration,
      TableEncryptionService.UseEncryption ? _StageEnterCostType : _o.StageEnterCostType,
      TableEncryptionService.UseEncryption ? _StageEnterCostId : _o.StageEnterCostId,
      TableEncryptionService.UseEncryption ? _StageEnterCostAmount : _o.StageEnterCostAmount,
      TableEncryptionService.UseEncryption ? _StageEnterEchelonCount : _o.StageEnterEchelonCount,
      TableEncryptionService.UseEncryption ? _StarConditionTacticRankSCount : _o.StarConditionTacticRankSCount,
      TableEncryptionService.UseEncryption ? _StarConditionTurnCount : _o.StarConditionTurnCount,
      _enterScenarioGroupId,
      _clearScenarioGroupId,
      _StrategyMap,
      _StrategyMapBG,
      TableEncryptionService.UseEncryption ? _EventContentStageRewardId : _o.EventContentStageRewardId,
      TableEncryptionService.UseEncryption ? _MaxTurn : _o.MaxTurn,
      TableEncryptionService.UseEncryption ? _StageTopography : _o.StageTopography,
      TableEncryptionService.UseEncryption ? _RecommandLevel : _o.RecommandLevel,
      _BgmId,
      TableEncryptionService.UseEncryption ? _StrategyEnvironment : _o.StrategyEnvironment,
      TableEncryptionService.UseEncryption ? _GroundID : _o.GroundID,
      TableEncryptionService.UseEncryption ? _ContentType : _o.ContentType,
      TableEncryptionService.UseEncryption ? _BGMId : _o.BGMId,
      TableEncryptionService.UseEncryption ? _InstantClear : _o.InstantClear,
      TableEncryptionService.UseEncryption ? _BuffContentId : _o.BuffContentId,
      TableEncryptionService.UseEncryption ? _FixedEchelonId : _o.FixedEchelonId,
      TableEncryptionService.UseEncryption ? _ChallengeDisplay : _o.ChallengeDisplay,
      _starGoal,
      _starGoalAmount,
      TableEncryptionService.UseEncryption ? _IsDefeatBattle : _o.IsDefeatBattle,
      TableEncryptionService.UseEncryption ? _StageHint : _o.StageHint,
      TableEncryptionService.UseEncryption ? _EchelonExtensionType : _o.EchelonExtensionType);
  }
}

public class EventContentStageExcelT
{
  public long Id { get; set; }
  public string Name { get; set; }
  public long EventContentId { get; set; }
  public Global.StageDifficulty StageDifficulty { get; set; }
  public string StageNumber { get; set; }
  public int StageDisplay { get; set; }
  public long PrevStageId { get; set; }
  public long OpenDate { get; set; }
  public long OpenEventPoint { get; set; }
  public long PrevStageSubEventId { get; set; }
  public long OpenConditionScenarioId { get; set; }
  public Global.EventContentType OpenConditionContentType { get; set; }
  public long OpenConditionContentId { get; set; }
  public long BattleDuration { get; set; }
  public Global.ParcelType StageEnterCostType { get; set; }
  public long StageEnterCostId { get; set; }
  public int StageEnterCostAmount { get; set; }
  public int StageEnterEchelonCount { get; set; }
  public long StarConditionTacticRankSCount { get; set; }
  public long StarConditionTurnCount { get; set; }
  public List<long> EnterScenarioGroupId { get; set; }
  public List<long> ClearScenarioGroupId { get; set; }
  public string StrategyMap { get; set; }
  public string StrategyMapBG { get; set; }
  public long EventContentStageRewardId { get; set; }
  public int MaxTurn { get; set; }
  public Global.StageTopography StageTopography { get; set; }
  public int RecommandLevel { get; set; }
  public string BgmId { get; set; }
  public Global.StrategyEnvironment StrategyEnvironment { get; set; }
  public long GroundID { get; set; }
  public Global.ContentType ContentType { get; set; }
  public long BGMId { get; set; }
  public bool InstantClear { get; set; }
  public long BuffContentId { get; set; }
  public long FixedEchelonId { get; set; }
  public bool ChallengeDisplay { get; set; }
  public List<Global.StarGoalType> StarGoal { get; set; }
  public List<int> StarGoalAmount { get; set; }
  public bool IsDefeatBattle { get; set; }
  public uint StageHint { get; set; }
  public Global.EchelonExtensionType EchelonExtensionType { get; set; }

  public EventContentStageExcelT() {
    this.Id = 0;
    this.Name = null;
    this.EventContentId = 0;
    this.StageDifficulty = Global.StageDifficulty.None;
    this.StageNumber = null;
    this.StageDisplay = 0;
    this.PrevStageId = 0;
    this.OpenDate = 0;
    this.OpenEventPoint = 0;
    this.PrevStageSubEventId = 0;
    this.OpenConditionScenarioId = 0;
    this.OpenConditionContentType = Global.EventContentType.Stage;
    this.OpenConditionContentId = 0;
    this.BattleDuration = 0;
    this.StageEnterCostType = Global.ParcelType.None;
    this.StageEnterCostId = 0;
    this.StageEnterCostAmount = 0;
    this.StageEnterEchelonCount = 0;
    this.StarConditionTacticRankSCount = 0;
    this.StarConditionTurnCount = 0;
    this.EnterScenarioGroupId = null;
    this.ClearScenarioGroupId = null;
    this.StrategyMap = null;
    this.StrategyMapBG = null;
    this.EventContentStageRewardId = 0;
    this.MaxTurn = 0;
    this.StageTopography = Global.StageTopography.Street;
    this.RecommandLevel = 0;
    this.BgmId = null;
    this.StrategyEnvironment = Global.StrategyEnvironment.None;
    this.GroundID = 0;
    this.ContentType = Global.ContentType.None;
    this.BGMId = 0;
    this.InstantClear = false;
    this.BuffContentId = 0;
    this.FixedEchelonId = 0;
    this.ChallengeDisplay = false;
    this.StarGoal = null;
    this.StarGoalAmount = null;
    this.IsDefeatBattle = false;
    this.StageHint = 0;
    this.EchelonExtensionType = Global.EchelonExtensionType.Base;
  }
}


static public class EventContentStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*StageDifficulty*/, 4 /*Global.StageDifficulty*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*StageNumber*/, false)
      && verifier.VerifyField(tablePos, 14 /*StageDisplay*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*PrevStageId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*OpenDate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*OpenEventPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*PrevStageSubEventId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*OpenConditionScenarioId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*OpenConditionContentType*/, 4 /*Global.EventContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*OpenConditionContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*StageEnterCostType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*StageEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*StageEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*StageEnterEchelonCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*StarConditionTacticRankSCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*StarConditionTurnCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 44 /*EnterScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*ClearScenarioGroupId*/, 8 /*long*/, false)
      && verifier.VerifyString(tablePos, 48 /*StrategyMap*/, false)
      && verifier.VerifyString(tablePos, 50 /*StrategyMapBG*/, false)
      && verifier.VerifyField(tablePos, 52 /*EventContentStageRewardId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*MaxTurn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*StageTopography*/, 4 /*Global.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*RecommandLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 60 /*BgmId*/, false)
      && verifier.VerifyField(tablePos, 62 /*StrategyEnvironment*/, 4 /*Global.StrategyEnvironment*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*GroundID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*ContentType*/, 4 /*Global.ContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*InstantClear*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*BuffContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*FixedEchelonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*ChallengeDisplay*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 78 /*StarGoal*/, 4 /*Global.StarGoalType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 80 /*StarGoalAmount*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 82 /*IsDefeatBattle*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 84 /*StageHint*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*EchelonExtensionType*/, 4 /*Global.EchelonExtensionType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
