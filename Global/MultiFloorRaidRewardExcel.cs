// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MultiFloorRaidRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MultiFloorRaidRewardExcel GetRootAsMultiFloorRaidRewardExcel(ByteBuffer _bb) { return GetRootAsMultiFloorRaidRewardExcel(_bb, new MultiFloorRaidRewardExcel()); }
  public static MultiFloorRaidRewardExcel GetRootAsMultiFloorRaidRewardExcel(ByteBuffer _bb, MultiFloorRaidRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MultiFloorRaidRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RewardGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearStageRewardProb { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType ClearStageRewardParcelType { get { int o = __p.__offset(8); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long ClearStageRewardParcelUniqueID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ClearStageRewardAmount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.MultiFloorRaidRewardExcel> CreateMultiFloorRaidRewardExcel(FlatBufferBuilder builder,
      long RewardGroupId = 0,
      long ClearStageRewardProb = 0,
      Global.ParcelType ClearStageRewardParcelType = Global.ParcelType.None,
      long ClearStageRewardParcelUniqueID = 0,
      long ClearStageRewardAmount = 0) {
    builder.StartTable(5);
    MultiFloorRaidRewardExcel.AddClearStageRewardAmount(builder, ClearStageRewardAmount);
    MultiFloorRaidRewardExcel.AddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID);
    MultiFloorRaidRewardExcel.AddClearStageRewardProb(builder, ClearStageRewardProb);
    MultiFloorRaidRewardExcel.AddRewardGroupId(builder, RewardGroupId);
    MultiFloorRaidRewardExcel.AddClearStageRewardParcelType(builder, ClearStageRewardParcelType);
    return MultiFloorRaidRewardExcel.EndMultiFloorRaidRewardExcel(builder);
  }

  public static void StartMultiFloorRaidRewardExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddRewardGroupId(FlatBufferBuilder builder, long rewardGroupId) { builder.AddLong(0, rewardGroupId, 0); }
  public static void AddClearStageRewardProb(FlatBufferBuilder builder, long clearStageRewardProb) { builder.AddLong(1, clearStageRewardProb, 0); }
  public static void AddClearStageRewardParcelType(FlatBufferBuilder builder, Global.ParcelType clearStageRewardParcelType) { builder.AddInt(2, (int)clearStageRewardParcelType, 0); }
  public static void AddClearStageRewardParcelUniqueID(FlatBufferBuilder builder, long clearStageRewardParcelUniqueID) { builder.AddLong(3, clearStageRewardParcelUniqueID, 0); }
  public static void AddClearStageRewardAmount(FlatBufferBuilder builder, long clearStageRewardAmount) { builder.AddLong(4, clearStageRewardAmount, 0); }
  public static Offset<Global.MultiFloorRaidRewardExcel> EndMultiFloorRaidRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MultiFloorRaidRewardExcel>(o);
  }
  public MultiFloorRaidRewardExcelT UnPack() {
    var _o = new MultiFloorRaidRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MultiFloorRaidRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MultiFloorRaidReward");
    _o.RewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardGroupId, key) : this.RewardGroupId;
    _o.ClearStageRewardProb = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearStageRewardProb, key) : this.ClearStageRewardProb;
    _o.ClearStageRewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ClearStageRewardParcelType, key) : this.ClearStageRewardParcelType;
    _o.ClearStageRewardParcelUniqueID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearStageRewardParcelUniqueID, key) : this.ClearStageRewardParcelUniqueID;
    _o.ClearStageRewardAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ClearStageRewardAmount, key) : this.ClearStageRewardAmount;
  }
  public static Offset<Global.MultiFloorRaidRewardExcel> Pack(FlatBufferBuilder builder, MultiFloorRaidRewardExcelT _o) {
    if (_o == null) return default(Offset<Global.MultiFloorRaidRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("MultiFloorRaidReward");
		var _RewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardGroupId, key) : _o.RewardGroupId;
		var _ClearStageRewardProb = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearStageRewardProb, key) : _o.ClearStageRewardProb;
		var _ClearStageRewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.ClearStageRewardParcelType, key) : _o.ClearStageRewardParcelType;
		var _ClearStageRewardParcelUniqueID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearStageRewardParcelUniqueID, key) : _o.ClearStageRewardParcelUniqueID;
		var _ClearStageRewardAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ClearStageRewardAmount, key) : _o.ClearStageRewardAmount;
    return CreateMultiFloorRaidRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _RewardGroupId : _o.RewardGroupId,
      TableEncryptionService.UseEncryption ? _ClearStageRewardProb : _o.ClearStageRewardProb,
      TableEncryptionService.UseEncryption ? _ClearStageRewardParcelType : _o.ClearStageRewardParcelType,
      TableEncryptionService.UseEncryption ? _ClearStageRewardParcelUniqueID : _o.ClearStageRewardParcelUniqueID,
      TableEncryptionService.UseEncryption ? _ClearStageRewardAmount : _o.ClearStageRewardAmount);
  }
}

public class MultiFloorRaidRewardExcelT
{
  public long RewardGroupId { get; set; }
  public long ClearStageRewardProb { get; set; }
  public Global.ParcelType ClearStageRewardParcelType { get; set; }
  public long ClearStageRewardParcelUniqueID { get; set; }
  public long ClearStageRewardAmount { get; set; }

  public MultiFloorRaidRewardExcelT() {
    this.RewardGroupId = 0;
    this.ClearStageRewardProb = 0;
    this.ClearStageRewardParcelType = Global.ParcelType.None;
    this.ClearStageRewardParcelUniqueID = 0;
    this.ClearStageRewardAmount = 0;
  }
}


static public class MultiFloorRaidRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ClearStageRewardProb*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ClearStageRewardParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ClearStageRewardParcelUniqueID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ClearStageRewardAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
