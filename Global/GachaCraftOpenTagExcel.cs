// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GachaCraftOpenTagExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GachaCraftOpenTagExcel GetRootAsGachaCraftOpenTagExcel(ByteBuffer _bb) { return GetRootAsGachaCraftOpenTagExcel(_bb, new GachaCraftOpenTagExcel()); }
  public static GachaCraftOpenTagExcel GetRootAsGachaCraftOpenTagExcel(ByteBuffer _bb, GachaCraftOpenTagExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GachaCraftOpenTagExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Global.CraftNodeTier NodeTier { get { int o = __p.__offset(4); return o != 0 ? (Global.CraftNodeTier)__p.bb.GetInt(o + __p.bb_pos) : Global.CraftNodeTier.Base; } }
  public Global.Tag Tag(int j) { int o = __p.__offset(6); return o != 0 ? (Global.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.Tag)0; }
  public int TagLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.Tag> GetTagBytes() { return __p.__vector_as_span<Global.Tag>(6, 4); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Global.Tag[] GetTagArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.Tag[] a = new Global.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (Global.Tag)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<Global.GachaCraftOpenTagExcel> CreateGachaCraftOpenTagExcel(FlatBufferBuilder builder,
      Global.CraftNodeTier NodeTier = Global.CraftNodeTier.Base,
      VectorOffset TagOffset = default(VectorOffset)) {
    builder.StartTable(2);
    GachaCraftOpenTagExcel.AddTag(builder, TagOffset);
    GachaCraftOpenTagExcel.AddNodeTier(builder, NodeTier);
    return GachaCraftOpenTagExcel.EndGachaCraftOpenTagExcel(builder);
  }

  public static void StartGachaCraftOpenTagExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddNodeTier(FlatBufferBuilder builder, Global.CraftNodeTier nodeTier) { builder.AddInt(0, (int)nodeTier, 0); }
  public static void AddTag(FlatBufferBuilder builder, VectorOffset tagOffset) { builder.AddOffset(1, tagOffset.Value, 0); }
  public static VectorOffset CreateTagVector(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.GachaCraftOpenTagExcel> EndGachaCraftOpenTagExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.GachaCraftOpenTagExcel>(o);
  }
  public GachaCraftOpenTagExcelT UnPack() {
    var _o = new GachaCraftOpenTagExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GachaCraftOpenTagExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("GachaCraftOpenTag");
    _o.NodeTier = TableEncryptionService.UseEncryption ? (Global.CraftNodeTier)TableEncryptionService.Convert((int)this.NodeTier, key) : this.NodeTier;
    _o.Tag = new List<Global.Tag>();
    for (var _j = 0; _j < this.TagLength; ++_j) {_o.Tag.Add(TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)this.Tag(_j), key) : this.Tag(_j));}
  }
  public static Offset<Global.GachaCraftOpenTagExcel> Pack(FlatBufferBuilder builder, GachaCraftOpenTagExcelT _o) {
    if (_o == null) return default(Offset<Global.GachaCraftOpenTagExcel>);
		byte[] key = TableEncryptionService.CreateKey("GachaCraftOpenTag");
		var _NodeTier = TableEncryptionService.UseEncryption ? (Global.CraftNodeTier)TableEncryptionService.Convert((int)_o.NodeTier, key) : _o.NodeTier;
    var _Tag = default(VectorOffset);
    if (_o.Tag != null) {
      var __Tag = _o.Tag.Select(x => TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _Tag = CreateTagVector(builder, __Tag);
    }
    return CreateGachaCraftOpenTagExcel(
      builder,
      TableEncryptionService.UseEncryption ? _NodeTier : _o.NodeTier,
      _Tag);
  }
}

public class GachaCraftOpenTagExcelT
{
  public Global.CraftNodeTier NodeTier { get; set; }
  public List<Global.Tag> Tag { get; set; }

  public GachaCraftOpenTagExcelT() {
    this.NodeTier = Global.CraftNodeTier.Base;
    this.Tag = null;
  }
}


static public class GachaCraftOpenTagExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*NodeTier*/, 4 /*Global.CraftNodeTier*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Tag*/, 4 /*Global.Tag*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
