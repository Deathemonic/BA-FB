// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ClearDeckRuleExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ClearDeckRuleExcel GetRootAsClearDeckRuleExcel(ByteBuffer _bb) { return GetRootAsClearDeckRuleExcel(_bb, new ClearDeckRuleExcel()); }
  public static ClearDeckRuleExcel GetRootAsClearDeckRuleExcel(ByteBuffer _bb, ClearDeckRuleExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ClearDeckRuleExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Global.ContentType ContentType { get { int o = __p.__offset(4); return o != 0 ? (Global.ContentType)__p.bb.GetInt(o + __p.bb_pos) : Global.ContentType.None; } }
  public long SizeLimit { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.ClearDeckRuleExcel> CreateClearDeckRuleExcel(FlatBufferBuilder builder,
      Global.ContentType ContentType = Global.ContentType.None,
      long SizeLimit = 0) {
    builder.StartTable(2);
    ClearDeckRuleExcel.AddSizeLimit(builder, SizeLimit);
    ClearDeckRuleExcel.AddContentType(builder, ContentType);
    return ClearDeckRuleExcel.EndClearDeckRuleExcel(builder);
  }

  public static void StartClearDeckRuleExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddContentType(FlatBufferBuilder builder, Global.ContentType contentType) { builder.AddInt(0, (int)contentType, 0); }
  public static void AddSizeLimit(FlatBufferBuilder builder, long sizeLimit) { builder.AddLong(1, sizeLimit, 0); }
  public static Offset<Global.ClearDeckRuleExcel> EndClearDeckRuleExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ClearDeckRuleExcel>(o);
  }
  public ClearDeckRuleExcelT UnPack() {
    var _o = new ClearDeckRuleExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ClearDeckRuleExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ClearDeckRule");
    _o.ContentType = TableEncryptionService.UseEncryption ? (Global.ContentType)TableEncryptionService.Convert((int)this.ContentType, key) : this.ContentType;
    _o.SizeLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SizeLimit, key) : this.SizeLimit;
  }
  public static Offset<Global.ClearDeckRuleExcel> Pack(FlatBufferBuilder builder, ClearDeckRuleExcelT _o) {
    if (_o == null) return default(Offset<Global.ClearDeckRuleExcel>);
		byte[] key = TableEncryptionService.CreateKey("ClearDeckRule");
		var _ContentType = TableEncryptionService.UseEncryption ? (Global.ContentType)TableEncryptionService.Convert((int)_o.ContentType, key) : _o.ContentType;
		var _SizeLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SizeLimit, key) : _o.SizeLimit;
    return CreateClearDeckRuleExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ContentType : _o.ContentType,
      TableEncryptionService.UseEncryption ? _SizeLimit : _o.SizeLimit);
  }
}

public class ClearDeckRuleExcelT
{
  public Global.ContentType ContentType { get; set; }
  public long SizeLimit { get; set; }

  public ClearDeckRuleExcelT() {
    this.ContentType = Global.ContentType.None;
    this.SizeLimit = 0;
  }
}


static public class ClearDeckRuleExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ContentType*/, 4 /*Global.ContentType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SizeLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
