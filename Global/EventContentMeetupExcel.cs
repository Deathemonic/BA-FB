// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentMeetupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentMeetupExcel GetRootAsEventContentMeetupExcel(ByteBuffer _bb) { return GetRootAsEventContentMeetupExcel(_bb, new EventContentMeetupExcel()); }
  public static EventContentMeetupExcel GetRootAsEventContentMeetupExcel(ByteBuffer _bb, EventContentMeetupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentMeetupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ConditionScenarioGroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.MeetupConditionType ConditionType { get { int o = __p.__offset(12); return o != 0 ? (Global.MeetupConditionType)__p.bb.GetInt(o + __p.bb_pos) : Global.MeetupConditionType.None; } }
  public long ConditionParameter(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionParameterLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionParameterBytes() { return __p.__vector_as_span<long>(14, 8); }
#else
  public ArraySegment<byte>? GetConditionParameterBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public long[] GetConditionParameterArray() { return __p.__vector_as_array<long>(14); }
  public Global.MeetupConditionPrintType ConditionPrintType { get { int o = __p.__offset(16); return o != 0 ? (Global.MeetupConditionPrintType)__p.bb.GetInt(o + __p.bb_pos) : Global.MeetupConditionPrintType.None; } }

  public static Offset<Global.EventContentMeetupExcel> CreateEventContentMeetupExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      long CharacterId = 0,
      long ConditionScenarioGroupId = 0,
      Global.MeetupConditionType ConditionType = Global.MeetupConditionType.None,
      VectorOffset conditionParameterOffset = default(VectorOffset),
      Global.MeetupConditionPrintType ConditionPrintType = Global.MeetupConditionPrintType.None) {
    builder.StartTable(7);
    EventContentMeetupExcel.AddConditionScenarioGroupId(builder, ConditionScenarioGroupId);
    EventContentMeetupExcel.AddCharacterId(builder, CharacterId);
    EventContentMeetupExcel.AddEventContentId(builder, EventContentId);
    EventContentMeetupExcel.AddId(builder, Id);
    EventContentMeetupExcel.AddConditionPrintType(builder, ConditionPrintType);
    EventContentMeetupExcel.AddConditionParameter(builder, conditionParameterOffset);
    EventContentMeetupExcel.AddConditionType(builder, ConditionType);
    return EventContentMeetupExcel.EndEventContentMeetupExcel(builder);
  }

  public static void StartEventContentMeetupExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(2, characterId, 0); }
  public static void AddConditionScenarioGroupId(FlatBufferBuilder builder, long conditionScenarioGroupId) { builder.AddLong(3, conditionScenarioGroupId, 0); }
  public static void AddConditionType(FlatBufferBuilder builder, Global.MeetupConditionType conditionType) { builder.AddInt(4, (int)conditionType, 0); }
  public static void AddConditionParameter(FlatBufferBuilder builder, VectorOffset conditionParameterOffset) { builder.AddOffset(5, conditionParameterOffset.Value, 0); }
  public static VectorOffset CreateConditionParameterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionParameterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConditionPrintType(FlatBufferBuilder builder, Global.MeetupConditionPrintType conditionPrintType) { builder.AddInt(6, (int)conditionPrintType, 0); }
  public static Offset<Global.EventContentMeetupExcel> EndEventContentMeetupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EventContentMeetupExcel>(o);
  }
  public EventContentMeetupExcelT UnPack() {
    var _o = new EventContentMeetupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentMeetupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentMeetup");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterId, key) : this.CharacterId;
    _o.ConditionScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionScenarioGroupId, key) : this.ConditionScenarioGroupId;
    _o.ConditionType = TableEncryptionService.UseEncryption ? (Global.MeetupConditionType)TableEncryptionService.Convert((int)this.ConditionType, key) : this.ConditionType;
    _o.ConditionParameter = new List<long>();
    for (var _j = 0; _j < this.ConditionParameterLength; ++_j) {_o.ConditionParameter.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionParameter(_j), key) : this.ConditionParameter(_j));}
    _o.ConditionPrintType = TableEncryptionService.UseEncryption ? (Global.MeetupConditionPrintType)TableEncryptionService.Convert((int)this.ConditionPrintType, key) : this.ConditionPrintType;
  }
  public static Offset<Global.EventContentMeetupExcel> Pack(FlatBufferBuilder builder, EventContentMeetupExcelT _o) {
    if (_o == null) return default(Offset<Global.EventContentMeetupExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentMeetup");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterId, key) : _o.CharacterId;
		var _ConditionScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConditionScenarioGroupId, key) : _o.ConditionScenarioGroupId;
		var _ConditionType = TableEncryptionService.UseEncryption ? (Global.MeetupConditionType)TableEncryptionService.Convert((int)_o.ConditionType, key) : _o.ConditionType;
    var _conditionParameter = default(VectorOffset);
    if (_o.ConditionParameter != null) {
      var __conditionParameter = _o.ConditionParameter.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _conditionParameter = CreateConditionParameterVector(builder, __conditionParameter);
    }
		var _ConditionPrintType = TableEncryptionService.UseEncryption ? (Global.MeetupConditionPrintType)TableEncryptionService.Convert((int)_o.ConditionPrintType, key) : _o.ConditionPrintType;
    return CreateEventContentMeetupExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _CharacterId : _o.CharacterId,
      TableEncryptionService.UseEncryption ? _ConditionScenarioGroupId : _o.ConditionScenarioGroupId,
      TableEncryptionService.UseEncryption ? _ConditionType : _o.ConditionType,
      _conditionParameter,
      TableEncryptionService.UseEncryption ? _ConditionPrintType : _o.ConditionPrintType);
  }
}

public class EventContentMeetupExcelT
{
  public long Id { get; set; }
  public long EventContentId { get; set; }
  public long CharacterId { get; set; }
  public long ConditionScenarioGroupId { get; set; }
  public Global.MeetupConditionType ConditionType { get; set; }
  public List<long> ConditionParameter { get; set; }
  public Global.MeetupConditionPrintType ConditionPrintType { get; set; }

  public EventContentMeetupExcelT() {
    this.Id = 0;
    this.EventContentId = 0;
    this.CharacterId = 0;
    this.ConditionScenarioGroupId = 0;
    this.ConditionType = Global.MeetupConditionType.None;
    this.ConditionParameter = null;
    this.ConditionPrintType = Global.MeetupConditionPrintType.None;
  }
}


static public class EventContentMeetupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*ConditionScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ConditionType*/, 4 /*Global.MeetupConditionType*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*ConditionParameter*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 16 /*ConditionPrintType*/, 4 /*Global.MeetupConditionPrintType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
