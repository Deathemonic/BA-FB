// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct VoiceSkillUseExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static VoiceSkillUseExcel GetRootAsVoiceSkillUseExcel(ByteBuffer _bb) { return GetRootAsVoiceSkillUseExcel(_bb, new VoiceSkillUseExcel()); }
  public static VoiceSkillUseExcel GetRootAsVoiceSkillUseExcel(ByteBuffer _bb, VoiceSkillUseExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VoiceSkillUseExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public uint VoiceHash(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int VoiceHashLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetVoiceHashBytes() { return __p.__vector_as_span<uint>(6, 4); }
#else
  public ArraySegment<byte>? GetVoiceHashBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetVoiceHashArray() { return __p.__vector_as_array<uint>(6); }

  public static Offset<Global.VoiceSkillUseExcel> CreateVoiceSkillUseExcel(FlatBufferBuilder builder,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset voiceHashOffset = default(VectorOffset)) {
    builder.StartTable(2);
    VoiceSkillUseExcel.AddVoiceHash(builder, voiceHashOffset);
    VoiceSkillUseExcel.AddName(builder, NameOffset);
    return VoiceSkillUseExcel.EndVoiceSkillUseExcel(builder);
  }

  public static void StartVoiceSkillUseExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddVoiceHash(FlatBufferBuilder builder, VectorOffset voiceHashOffset) { builder.AddOffset(1, voiceHashOffset.Value, 0); }
  public static VectorOffset CreateVoiceHashVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVoiceHashVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceHashVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceHashVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVoiceHashVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.VoiceSkillUseExcel> EndVoiceSkillUseExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.VoiceSkillUseExcel>(o);
  }
  public VoiceSkillUseExcelT UnPack() {
    var _o = new VoiceSkillUseExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VoiceSkillUseExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("VoiceSkillUse");
    _o.Name = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Name, key) : this.Name;
    _o.VoiceHash = new List<uint>();
    for (var _j = 0; _j < this.VoiceHashLength; ++_j) {_o.VoiceHash.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.VoiceHash(_j), key) : this.VoiceHash(_j));}
  }
  public static Offset<Global.VoiceSkillUseExcel> Pack(FlatBufferBuilder builder, VoiceSkillUseExcelT _o) {
    if (_o == null) return default(Offset<Global.VoiceSkillUseExcel>);
		byte[] key = TableEncryptionService.CreateKey("VoiceSkillUse");
    var _Name = _o.Name == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Name, key) : _o.Name));
    var _voiceHash = default(VectorOffset);
    if (_o.VoiceHash != null) {
      var __voiceHash = _o.VoiceHash.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)x, key) : x).ToArray();
      _voiceHash = CreateVoiceHashVector(builder, __voiceHash);
    }
    return CreateVoiceSkillUseExcel(
      builder,
      _Name,
      _voiceHash);
  }
}

public class VoiceSkillUseExcelT
{
  public string Name { get; set; }
  public List<uint> VoiceHash { get; set; }

  public VoiceSkillUseExcelT() {
    this.Name = null;
    this.VoiceHash = null;
  }
}


static public class VoiceSkillUseExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*VoiceHash*/, 4 /*uint*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
