// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattleExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattleExcel GetRootAsBattleExcel(ByteBuffer _bb) { return GetRootAsBattleExcel(_bb, new BattleExcel()); }
  public static BattleExcel GetRootAsBattleExcel(ByteBuffer _bb, BattleExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattleExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Global.UnitType None(int j) { int o = __p.__offset(4); return o != 0 ? (Global.UnitType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.UnitType)0; }
  public int NoneLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.UnitType> GetNoneBytes() { return __p.__vector_as_span<Global.UnitType>(4, 4); }
#else
  public ArraySegment<byte>? GetNoneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public Global.UnitType[] GetNoneArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.UnitType[] a = new Global.UnitType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.UnitType)__p.bb.GetInt(p + i * 4); } return a; }
  public Global.AttackType Single { get { int o = __p.__offset(6); return o != 0 ? (Global.AttackType)__p.bb.GetInt(o + __p.bb_pos) : Global.AttackType.Single; } }
  public Global.ProjectileType Guided { get { int o = __p.__offset(8); return o != 0 ? (Global.ProjectileType)__p.bb.GetInt(o + __p.bb_pos) : Global.ProjectileType.Guided; } }
  public Global.DamageFontColor Blue { get { int o = __p.__offset(10); return o != 0 ? (Global.DamageFontColor)__p.bb.GetInt(o + __p.bb_pos) : Global.DamageFontColor.Blue; } }
  public Global.EmoticonEvent CoverEnter { get { int o = __p.__offset(12); return o != 0 ? (Global.EmoticonEvent)__p.bb.GetInt(o + __p.bb_pos) : Global.EmoticonEvent.CoverEnter; } }
  public Global.BulletType Normal(int j) { int o = __p.__offset(14); return o != 0 ? (Global.BulletType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.BulletType)0; }
  public int NormalLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.BulletType> GetNormalBytes() { return __p.__vector_as_span<Global.BulletType>(14, 4); }
#else
  public ArraySegment<byte>? GetNormalBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public Global.BulletType[] GetNormalArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.BulletType[] a = new Global.BulletType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.BulletType)__p.bb.GetInt(p + i * 4); } return a; }
  public Global.ActionType Crush { get { int o = __p.__offset(16); return o != 0 ? (Global.ActionType)__p.bb.GetInt(o + __p.bb_pos) : Global.ActionType.Crush; } }
  public Global.BuffOverlap Able { get { int o = __p.__offset(18); return o != 0 ? (Global.BuffOverlap)__p.bb.GetInt(o + __p.bb_pos) : Global.BuffOverlap.Able; } }
  public Global.ReArrangeTargetType AllySelf { get { int o = __p.__offset(20); return o != 0 ? (Global.ReArrangeTargetType)__p.bb.GetInt(o + __p.bb_pos) : Global.ReArrangeTargetType.AllySelf; } }
  public Global.ArmorType LightArmor { get { int o = __p.__offset(22); return o != 0 ? (Global.ArmorType)__p.bb.GetInt(o + __p.bb_pos) : Global.ArmorType.LightArmor; } }
  public Global.EntityMaterialType Wood { get { int o = __p.__offset(24); return o != 0 ? (Global.EntityMaterialType)__p.bb.GetInt(o + __p.bb_pos) : Global.EntityMaterialType.Wood; } }
  public Global.CoverMotionType All { get { int o = __p.__offset(26); return o != 0 ? (Global.CoverMotionType)__p.bb.GetInt(o + __p.bb_pos) : Global.CoverMotionType.All; } }
  public Global.TargetSortBy DISTANCE { get { int o = __p.__offset(28); return o != 0 ? (Global.TargetSortBy)__p.bb.GetInt(o + __p.bb_pos) : Global.TargetSortBy.DISTANCE; } }
  public Global.PositioningType CloseToObstacle { get { int o = __p.__offset(30); return o != 0 ? (Global.PositioningType)__p.bb.GetInt(o + __p.bb_pos) : Global.PositioningType.CloseToObstacle; } }
  public Global.FormationLine Students { get { int o = __p.__offset(32); return o != 0 ? (Global.FormationLine)__p.bb.GetInt(o + __p.bb_pos) : Global.FormationLine.Students; } }
  public Global.ExternalBTNodeType Sequence { get { int o = __p.__offset(34); return o != 0 ? (Global.ExternalBTNodeType)__p.bb.GetInt(o + __p.bb_pos) : Global.ExternalBTNodeType.Sequence; } }
  public Global.ExternalBehavior UseNextExSkill { get { int o = __p.__offset(36); return o != 0 ? (Global.ExternalBehavior)__p.bb.GetInt(o + __p.bb_pos) : Global.ExternalBehavior.UseNextExSkill; } }
  public Global.TacticEntityType Student { get { int o = __p.__offset(38); return o != 0 ? (Global.TacticEntityType)__p.bb.GetInt(o + __p.bb_pos) : Global.TacticEntityType.None; } }
  public Global.EngageType SearchAndMove { get { int o = __p.__offset(40); return o != 0 ? (Global.EngageType)__p.bb.GetInt(o + __p.bb_pos) : Global.EngageType.SearchAndMove; } }
  public Global.HitEffectPosition Position { get { int o = __p.__offset(42); return o != 0 ? (Global.HitEffectPosition)__p.bb.GetInt(o + __p.bb_pos) : Global.HitEffectPosition.Position; } }
  public Global.StageTopography Street { get { int o = __p.__offset(44); return o != 0 ? (Global.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : Global.StageTopography.Street; } }
  public Global.TerrainAdaptationStat D { get { int o = __p.__offset(46); return o != 0 ? (Global.TerrainAdaptationStat)__p.bb.GetInt(o + __p.bb_pos) : Global.TerrainAdaptationStat.D; } }
  public Global.ObstacleClass MAIN { get { int o = __p.__offset(48); return o != 0 ? (Global.ObstacleClass)__p.bb.GetInt(o + __p.bb_pos) : Global.ObstacleClass.MAIN; } }
  public Global.ObstacleDestroyType Remain { get { int o = __p.__offset(50); return o != 0 ? (Global.ObstacleDestroyType)__p.bb.GetInt(o + __p.bb_pos) : Global.ObstacleDestroyType.Remain; } }
  public Global.ObstacleHeightType Low { get { int o = __p.__offset(52); return o != 0 ? (Global.ObstacleHeightType)__p.bb.GetInt(o + __p.bb_pos) : Global.ObstacleHeightType.Low; } }
  public Global.DamageAttribute Resist { get { int o = __p.__offset(54); return o != 0 ? (Global.DamageAttribute)__p.bb.GetInt(o + __p.bb_pos) : Global.DamageAttribute.Resist; } }
  public Global.SkillPriorityCheckTarget Ally { get { int o = __p.__offset(56); return o != 0 ? (Global.SkillPriorityCheckTarget)__p.bb.GetInt(o + __p.bb_pos) : Global.SkillPriorityCheckTarget.Ally; } }
  public Global.StageType Main { get { int o = __p.__offset(58); return o != 0 ? (Global.StageType)__p.bb.GetInt(o + __p.bb_pos) : Global.StageType.Main; } }
  public Global.KnockbackDirection TargetToCaster { get { int o = __p.__offset(60); return o != 0 ? (Global.KnockbackDirection)__p.bb.GetInt(o + __p.bb_pos) : Global.KnockbackDirection.TargetToCaster; } }
  public Global.EndCondition Duration { get { int o = __p.__offset(62); return o != 0 ? (Global.EndCondition)__p.bb.GetInt(o + __p.bb_pos) : Global.EndCondition.Duration; } }
  public Global.ArenaSimulatorServer Preset { get { int o = __p.__offset(64); return o != 0 ? (Global.ArenaSimulatorServer)__p.bb.GetInt(o + __p.bb_pos) : Global.ArenaSimulatorServer.Preset; } }
  public Global.BattleCalculationStat FinalDamage { get { int o = __p.__offset(66); return o != 0 ? (Global.BattleCalculationStat)__p.bb.GetInt(o + __p.bb_pos) : Global.BattleCalculationStat.FinalDamage; } }
  public Global.StatTransType SpecialTransStat { get { int o = __p.__offset(68); return o != 0 ? (Global.StatTransType)__p.bb.GetInt(o + __p.bb_pos) : Global.StatTransType.SpecialTransStat; } }
  public Global.BattleDialogType Talk { get { int o = __p.__offset(70); return o != 0 ? (Global.BattleDialogType)__p.bb.GetInt(o + __p.bb_pos) : Global.BattleDialogType.Talk; } }

  public static Offset<Global.BattleExcel> CreateBattleExcel(FlatBufferBuilder builder,
      VectorOffset noneOffset = default(VectorOffset),
      Global.AttackType Single = Global.AttackType.Single,
      Global.ProjectileType Guided = Global.ProjectileType.Guided,
      Global.DamageFontColor Blue = Global.DamageFontColor.Blue,
      Global.EmoticonEvent CoverEnter = Global.EmoticonEvent.CoverEnter,
      VectorOffset normalOffset = default(VectorOffset),
      Global.ActionType Crush = Global.ActionType.Crush,
      Global.BuffOverlap Able = Global.BuffOverlap.Able,
      Global.ReArrangeTargetType AllySelf = Global.ReArrangeTargetType.AllySelf,
      Global.ArmorType LightArmor = Global.ArmorType.LightArmor,
      Global.EntityMaterialType Wood = Global.EntityMaterialType.Wood,
      Global.CoverMotionType All = Global.CoverMotionType.All,
      Global.TargetSortBy DISTANCE = Global.TargetSortBy.DISTANCE,
      Global.PositioningType CloseToObstacle = Global.PositioningType.CloseToObstacle,
      Global.FormationLine Students = Global.FormationLine.Students,
      Global.ExternalBTNodeType Sequence = Global.ExternalBTNodeType.Sequence,
      Global.ExternalBehavior UseNextExSkill = Global.ExternalBehavior.UseNextExSkill,
      Global.TacticEntityType Student = Global.TacticEntityType.None,
      Global.EngageType SearchAndMove = Global.EngageType.SearchAndMove,
      Global.HitEffectPosition Position = Global.HitEffectPosition.Position,
      Global.StageTopography Street = Global.StageTopography.Street,
      Global.TerrainAdaptationStat D = Global.TerrainAdaptationStat.D,
      Global.ObstacleClass MAIN = Global.ObstacleClass.MAIN,
      Global.ObstacleDestroyType Remain = Global.ObstacleDestroyType.Remain,
      Global.ObstacleHeightType Low = Global.ObstacleHeightType.Low,
      Global.DamageAttribute Resist = Global.DamageAttribute.Resist,
      Global.SkillPriorityCheckTarget Ally = Global.SkillPriorityCheckTarget.Ally,
      Global.StageType Main = Global.StageType.Main,
      Global.KnockbackDirection TargetToCaster = Global.KnockbackDirection.TargetToCaster,
      Global.EndCondition Duration = Global.EndCondition.Duration,
      Global.ArenaSimulatorServer Preset = Global.ArenaSimulatorServer.Preset,
      Global.BattleCalculationStat FinalDamage = Global.BattleCalculationStat.FinalDamage,
      Global.StatTransType SpecialTransStat = Global.StatTransType.SpecialTransStat,
      Global.BattleDialogType Talk = Global.BattleDialogType.Talk) {
    builder.StartTable(34);
    BattleExcel.AddTalk(builder, Talk);
    BattleExcel.AddSpecialTransStat(builder, SpecialTransStat);
    BattleExcel.AddFinalDamage(builder, FinalDamage);
    BattleExcel.AddPreset(builder, Preset);
    BattleExcel.AddDuration(builder, Duration);
    BattleExcel.AddTargetToCaster(builder, TargetToCaster);
    BattleExcel.AddMain(builder, Main);
    BattleExcel.AddAlly(builder, Ally);
    BattleExcel.AddResist(builder, Resist);
    BattleExcel.AddLow(builder, Low);
    BattleExcel.AddRemain(builder, Remain);
    BattleExcel.AddMAIN(builder, MAIN);
    BattleExcel.AddD(builder, D);
    BattleExcel.AddStreet(builder, Street);
    BattleExcel.AddPosition(builder, Position);
    BattleExcel.AddSearchAndMove(builder, SearchAndMove);
    BattleExcel.AddStudent(builder, Student);
    BattleExcel.AddUseNextExSkill(builder, UseNextExSkill);
    BattleExcel.AddSequence(builder, Sequence);
    BattleExcel.AddStudents(builder, Students);
    BattleExcel.AddCloseToObstacle(builder, CloseToObstacle);
    BattleExcel.AddDISTANCE(builder, DISTANCE);
    BattleExcel.AddAll(builder, All);
    BattleExcel.AddWood(builder, Wood);
    BattleExcel.AddLightArmor(builder, LightArmor);
    BattleExcel.AddAllySelf(builder, AllySelf);
    BattleExcel.AddAble(builder, Able);
    BattleExcel.AddCrush(builder, Crush);
    BattleExcel.AddNormal(builder, normalOffset);
    BattleExcel.AddCoverEnter(builder, CoverEnter);
    BattleExcel.AddBlue(builder, Blue);
    BattleExcel.AddGuided(builder, Guided);
    BattleExcel.AddSingle(builder, Single);
    BattleExcel.AddNone(builder, noneOffset);
    return BattleExcel.EndBattleExcel(builder);
  }

  public static void StartBattleExcel(FlatBufferBuilder builder) { builder.StartTable(34); }
  public static void AddNone(FlatBufferBuilder builder, VectorOffset noneOffset) { builder.AddOffset(0, noneOffset.Value, 0); }
  public static VectorOffset CreateNoneVector(FlatBufferBuilder builder, Global.UnitType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, Global.UnitType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.UnitType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.UnitType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSingle(FlatBufferBuilder builder, Global.AttackType single) { builder.AddInt(1, (int)single, 0); }
  public static void AddGuided(FlatBufferBuilder builder, Global.ProjectileType guided) { builder.AddInt(2, (int)guided, 0); }
  public static void AddBlue(FlatBufferBuilder builder, Global.DamageFontColor blue) { builder.AddInt(3, (int)blue, 0); }
  public static void AddCoverEnter(FlatBufferBuilder builder, Global.EmoticonEvent coverEnter) { builder.AddInt(4, (int)coverEnter, 0); }
  public static void AddNormal(FlatBufferBuilder builder, VectorOffset normalOffset) { builder.AddOffset(5, normalOffset.Value, 0); }
  public static VectorOffset CreateNormalVector(FlatBufferBuilder builder, Global.BulletType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNormalVectorBlock(FlatBufferBuilder builder, Global.BulletType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.BulletType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.BulletType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNormalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCrush(FlatBufferBuilder builder, Global.ActionType crush) { builder.AddInt(6, (int)crush, 0); }
  public static void AddAble(FlatBufferBuilder builder, Global.BuffOverlap able) { builder.AddInt(7, (int)able, 0); }
  public static void AddAllySelf(FlatBufferBuilder builder, Global.ReArrangeTargetType allySelf) { builder.AddInt(8, (int)allySelf, 0); }
  public static void AddLightArmor(FlatBufferBuilder builder, Global.ArmorType lightArmor) { builder.AddInt(9, (int)lightArmor, 0); }
  public static void AddWood(FlatBufferBuilder builder, Global.EntityMaterialType wood) { builder.AddInt(10, (int)wood, 0); }
  public static void AddAll(FlatBufferBuilder builder, Global.CoverMotionType all) { builder.AddInt(11, (int)all, 0); }
  public static void AddDISTANCE(FlatBufferBuilder builder, Global.TargetSortBy dISTANCE) { builder.AddInt(12, (int)dISTANCE, 0); }
  public static void AddCloseToObstacle(FlatBufferBuilder builder, Global.PositioningType closeToObstacle) { builder.AddInt(13, (int)closeToObstacle, 0); }
  public static void AddStudents(FlatBufferBuilder builder, Global.FormationLine students) { builder.AddInt(14, (int)students, 0); }
  public static void AddSequence(FlatBufferBuilder builder, Global.ExternalBTNodeType sequence) { builder.AddInt(15, (int)sequence, 0); }
  public static void AddUseNextExSkill(FlatBufferBuilder builder, Global.ExternalBehavior useNextExSkill) { builder.AddInt(16, (int)useNextExSkill, 0); }
  public static void AddStudent(FlatBufferBuilder builder, Global.TacticEntityType student) { builder.AddInt(17, (int)student, 0); }
  public static void AddSearchAndMove(FlatBufferBuilder builder, Global.EngageType searchAndMove) { builder.AddInt(18, (int)searchAndMove, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Global.HitEffectPosition position) { builder.AddInt(19, (int)position, 0); }
  public static void AddStreet(FlatBufferBuilder builder, Global.StageTopography street) { builder.AddInt(20, (int)street, 0); }
  public static void AddD(FlatBufferBuilder builder, Global.TerrainAdaptationStat d) { builder.AddInt(21, (int)d, 0); }
  public static void AddMAIN(FlatBufferBuilder builder, Global.ObstacleClass mAIN) { builder.AddInt(22, (int)mAIN, 0); }
  public static void AddRemain(FlatBufferBuilder builder, Global.ObstacleDestroyType remain) { builder.AddInt(23, (int)remain, 0); }
  public static void AddLow(FlatBufferBuilder builder, Global.ObstacleHeightType low) { builder.AddInt(24, (int)low, 0); }
  public static void AddResist(FlatBufferBuilder builder, Global.DamageAttribute resist) { builder.AddInt(25, (int)resist, 0); }
  public static void AddAlly(FlatBufferBuilder builder, Global.SkillPriorityCheckTarget ally) { builder.AddInt(26, (int)ally, 0); }
  public static void AddMain(FlatBufferBuilder builder, Global.StageType main) { builder.AddInt(27, (int)main, 0); }
  public static void AddTargetToCaster(FlatBufferBuilder builder, Global.KnockbackDirection targetToCaster) { builder.AddInt(28, (int)targetToCaster, 0); }
  public static void AddDuration(FlatBufferBuilder builder, Global.EndCondition duration) { builder.AddInt(29, (int)duration, 0); }
  public static void AddPreset(FlatBufferBuilder builder, Global.ArenaSimulatorServer preset) { builder.AddInt(30, (int)preset, 0); }
  public static void AddFinalDamage(FlatBufferBuilder builder, Global.BattleCalculationStat finalDamage) { builder.AddInt(31, (int)finalDamage, 0); }
  public static void AddSpecialTransStat(FlatBufferBuilder builder, Global.StatTransType specialTransStat) { builder.AddInt(32, (int)specialTransStat, 0); }
  public static void AddTalk(FlatBufferBuilder builder, Global.BattleDialogType talk) { builder.AddInt(33, (int)talk, 0); }
  public static Offset<Global.BattleExcel> EndBattleExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.BattleExcel>(o);
  }
  public BattleExcelT UnPack() {
    var _o = new BattleExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattleExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Battle");
    _o.None = new List<Global.UnitType>();
    for (var _j = 0; _j < this.NoneLength; ++_j) {_o.None.Add(TableEncryptionService.UseEncryption ? (Global.UnitType)TableEncryptionService.Convert((int)this.None(_j), key) : this.None(_j));}
    _o.Single = TableEncryptionService.UseEncryption ? (Global.AttackType)TableEncryptionService.Convert((int)this.Single, key) : this.Single;
    _o.Guided = TableEncryptionService.UseEncryption ? (Global.ProjectileType)TableEncryptionService.Convert((int)this.Guided, key) : this.Guided;
    _o.Blue = TableEncryptionService.UseEncryption ? (Global.DamageFontColor)TableEncryptionService.Convert((int)this.Blue, key) : this.Blue;
    _o.CoverEnter = TableEncryptionService.UseEncryption ? (Global.EmoticonEvent)TableEncryptionService.Convert((int)this.CoverEnter, key) : this.CoverEnter;
    _o.Normal = new List<Global.BulletType>();
    for (var _j = 0; _j < this.NormalLength; ++_j) {_o.Normal.Add(TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)this.Normal(_j), key) : this.Normal(_j));}
    _o.Crush = TableEncryptionService.UseEncryption ? (Global.ActionType)TableEncryptionService.Convert((int)this.Crush, key) : this.Crush;
    _o.Able = TableEncryptionService.UseEncryption ? (Global.BuffOverlap)TableEncryptionService.Convert((int)this.Able, key) : this.Able;
    _o.AllySelf = TableEncryptionService.UseEncryption ? (Global.ReArrangeTargetType)TableEncryptionService.Convert((int)this.AllySelf, key) : this.AllySelf;
    _o.LightArmor = TableEncryptionService.UseEncryption ? (Global.ArmorType)TableEncryptionService.Convert((int)this.LightArmor, key) : this.LightArmor;
    _o.Wood = TableEncryptionService.UseEncryption ? (Global.EntityMaterialType)TableEncryptionService.Convert((int)this.Wood, key) : this.Wood;
    _o.All = TableEncryptionService.UseEncryption ? (Global.CoverMotionType)TableEncryptionService.Convert((int)this.All, key) : this.All;
    _o.DISTANCE = TableEncryptionService.UseEncryption ? (Global.TargetSortBy)TableEncryptionService.Convert((int)this.DISTANCE, key) : this.DISTANCE;
    _o.CloseToObstacle = TableEncryptionService.UseEncryption ? (Global.PositioningType)TableEncryptionService.Convert((int)this.CloseToObstacle, key) : this.CloseToObstacle;
    _o.Students = TableEncryptionService.UseEncryption ? (Global.FormationLine)TableEncryptionService.Convert((int)this.Students, key) : this.Students;
    _o.Sequence = TableEncryptionService.UseEncryption ? (Global.ExternalBTNodeType)TableEncryptionService.Convert((int)this.Sequence, key) : this.Sequence;
    _o.UseNextExSkill = TableEncryptionService.UseEncryption ? (Global.ExternalBehavior)TableEncryptionService.Convert((int)this.UseNextExSkill, key) : this.UseNextExSkill;
    _o.Student = TableEncryptionService.UseEncryption ? (Global.TacticEntityType)TableEncryptionService.Convert((int)this.Student, key) : this.Student;
    _o.SearchAndMove = TableEncryptionService.UseEncryption ? (Global.EngageType)TableEncryptionService.Convert((int)this.SearchAndMove, key) : this.SearchAndMove;
    _o.Position = TableEncryptionService.UseEncryption ? (Global.HitEffectPosition)TableEncryptionService.Convert((int)this.Position, key) : this.Position;
    _o.Street = TableEncryptionService.UseEncryption ? (Global.StageTopography)TableEncryptionService.Convert((int)this.Street, key) : this.Street;
    _o.D = TableEncryptionService.UseEncryption ? (Global.TerrainAdaptationStat)TableEncryptionService.Convert((int)this.D, key) : this.D;
    _o.MAIN = TableEncryptionService.UseEncryption ? (Global.ObstacleClass)TableEncryptionService.Convert((int)this.MAIN, key) : this.MAIN;
    _o.Remain = TableEncryptionService.UseEncryption ? (Global.ObstacleDestroyType)TableEncryptionService.Convert((int)this.Remain, key) : this.Remain;
    _o.Low = TableEncryptionService.UseEncryption ? (Global.ObstacleHeightType)TableEncryptionService.Convert((int)this.Low, key) : this.Low;
    _o.Resist = TableEncryptionService.UseEncryption ? (Global.DamageAttribute)TableEncryptionService.Convert((int)this.Resist, key) : this.Resist;
    _o.Ally = TableEncryptionService.UseEncryption ? (Global.SkillPriorityCheckTarget)TableEncryptionService.Convert((int)this.Ally, key) : this.Ally;
    _o.Main = TableEncryptionService.UseEncryption ? (Global.StageType)TableEncryptionService.Convert((int)this.Main, key) : this.Main;
    _o.TargetToCaster = TableEncryptionService.UseEncryption ? (Global.KnockbackDirection)TableEncryptionService.Convert((int)this.TargetToCaster, key) : this.TargetToCaster;
    _o.Duration = TableEncryptionService.UseEncryption ? (Global.EndCondition)TableEncryptionService.Convert((int)this.Duration, key) : this.Duration;
    _o.Preset = TableEncryptionService.UseEncryption ? (Global.ArenaSimulatorServer)TableEncryptionService.Convert((int)this.Preset, key) : this.Preset;
    _o.FinalDamage = TableEncryptionService.UseEncryption ? (Global.BattleCalculationStat)TableEncryptionService.Convert((int)this.FinalDamage, key) : this.FinalDamage;
    _o.SpecialTransStat = TableEncryptionService.UseEncryption ? (Global.StatTransType)TableEncryptionService.Convert((int)this.SpecialTransStat, key) : this.SpecialTransStat;
    _o.Talk = TableEncryptionService.UseEncryption ? (Global.BattleDialogType)TableEncryptionService.Convert((int)this.Talk, key) : this.Talk;
  }
  public static Offset<Global.BattleExcel> Pack(FlatBufferBuilder builder, BattleExcelT _o) {
    if (_o == null) return default(Offset<Global.BattleExcel>);
		byte[] key = TableEncryptionService.CreateKey("Battle");
    var _none = default(VectorOffset);
    if (_o.None != null) {
      var __none = _o.None.Select(x => TableEncryptionService.UseEncryption ? (Global.UnitType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _none = CreateNoneVector(builder, __none);
    }
		var _Single = TableEncryptionService.UseEncryption ? (Global.AttackType)TableEncryptionService.Convert((int)_o.Single, key) : _o.Single;
		var _Guided = TableEncryptionService.UseEncryption ? (Global.ProjectileType)TableEncryptionService.Convert((int)_o.Guided, key) : _o.Guided;
		var _Blue = TableEncryptionService.UseEncryption ? (Global.DamageFontColor)TableEncryptionService.Convert((int)_o.Blue, key) : _o.Blue;
		var _CoverEnter = TableEncryptionService.UseEncryption ? (Global.EmoticonEvent)TableEncryptionService.Convert((int)_o.CoverEnter, key) : _o.CoverEnter;
    var _normal = default(VectorOffset);
    if (_o.Normal != null) {
      var __normal = _o.Normal.Select(x => TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _normal = CreateNormalVector(builder, __normal);
    }
		var _Crush = TableEncryptionService.UseEncryption ? (Global.ActionType)TableEncryptionService.Convert((int)_o.Crush, key) : _o.Crush;
		var _Able = TableEncryptionService.UseEncryption ? (Global.BuffOverlap)TableEncryptionService.Convert((int)_o.Able, key) : _o.Able;
		var _AllySelf = TableEncryptionService.UseEncryption ? (Global.ReArrangeTargetType)TableEncryptionService.Convert((int)_o.AllySelf, key) : _o.AllySelf;
		var _LightArmor = TableEncryptionService.UseEncryption ? (Global.ArmorType)TableEncryptionService.Convert((int)_o.LightArmor, key) : _o.LightArmor;
		var _Wood = TableEncryptionService.UseEncryption ? (Global.EntityMaterialType)TableEncryptionService.Convert((int)_o.Wood, key) : _o.Wood;
		var _All = TableEncryptionService.UseEncryption ? (Global.CoverMotionType)TableEncryptionService.Convert((int)_o.All, key) : _o.All;
		var _DISTANCE = TableEncryptionService.UseEncryption ? (Global.TargetSortBy)TableEncryptionService.Convert((int)_o.DISTANCE, key) : _o.DISTANCE;
		var _CloseToObstacle = TableEncryptionService.UseEncryption ? (Global.PositioningType)TableEncryptionService.Convert((int)_o.CloseToObstacle, key) : _o.CloseToObstacle;
		var _Students = TableEncryptionService.UseEncryption ? (Global.FormationLine)TableEncryptionService.Convert((int)_o.Students, key) : _o.Students;
		var _Sequence = TableEncryptionService.UseEncryption ? (Global.ExternalBTNodeType)TableEncryptionService.Convert((int)_o.Sequence, key) : _o.Sequence;
		var _UseNextExSkill = TableEncryptionService.UseEncryption ? (Global.ExternalBehavior)TableEncryptionService.Convert((int)_o.UseNextExSkill, key) : _o.UseNextExSkill;
		var _Student = TableEncryptionService.UseEncryption ? (Global.TacticEntityType)TableEncryptionService.Convert((int)_o.Student, key) : _o.Student;
		var _SearchAndMove = TableEncryptionService.UseEncryption ? (Global.EngageType)TableEncryptionService.Convert((int)_o.SearchAndMove, key) : _o.SearchAndMove;
		var _Position = TableEncryptionService.UseEncryption ? (Global.HitEffectPosition)TableEncryptionService.Convert((int)_o.Position, key) : _o.Position;
		var _Street = TableEncryptionService.UseEncryption ? (Global.StageTopography)TableEncryptionService.Convert((int)_o.Street, key) : _o.Street;
		var _D = TableEncryptionService.UseEncryption ? (Global.TerrainAdaptationStat)TableEncryptionService.Convert((int)_o.D, key) : _o.D;
		var _MAIN = TableEncryptionService.UseEncryption ? (Global.ObstacleClass)TableEncryptionService.Convert((int)_o.MAIN, key) : _o.MAIN;
		var _Remain = TableEncryptionService.UseEncryption ? (Global.ObstacleDestroyType)TableEncryptionService.Convert((int)_o.Remain, key) : _o.Remain;
		var _Low = TableEncryptionService.UseEncryption ? (Global.ObstacleHeightType)TableEncryptionService.Convert((int)_o.Low, key) : _o.Low;
		var _Resist = TableEncryptionService.UseEncryption ? (Global.DamageAttribute)TableEncryptionService.Convert((int)_o.Resist, key) : _o.Resist;
		var _Ally = TableEncryptionService.UseEncryption ? (Global.SkillPriorityCheckTarget)TableEncryptionService.Convert((int)_o.Ally, key) : _o.Ally;
		var _Main = TableEncryptionService.UseEncryption ? (Global.StageType)TableEncryptionService.Convert((int)_o.Main, key) : _o.Main;
		var _TargetToCaster = TableEncryptionService.UseEncryption ? (Global.KnockbackDirection)TableEncryptionService.Convert((int)_o.TargetToCaster, key) : _o.TargetToCaster;
		var _Duration = TableEncryptionService.UseEncryption ? (Global.EndCondition)TableEncryptionService.Convert((int)_o.Duration, key) : _o.Duration;
		var _Preset = TableEncryptionService.UseEncryption ? (Global.ArenaSimulatorServer)TableEncryptionService.Convert((int)_o.Preset, key) : _o.Preset;
		var _FinalDamage = TableEncryptionService.UseEncryption ? (Global.BattleCalculationStat)TableEncryptionService.Convert((int)_o.FinalDamage, key) : _o.FinalDamage;
		var _SpecialTransStat = TableEncryptionService.UseEncryption ? (Global.StatTransType)TableEncryptionService.Convert((int)_o.SpecialTransStat, key) : _o.SpecialTransStat;
		var _Talk = TableEncryptionService.UseEncryption ? (Global.BattleDialogType)TableEncryptionService.Convert((int)_o.Talk, key) : _o.Talk;
    return CreateBattleExcel(
      builder,
      _none,
      TableEncryptionService.UseEncryption ? _Single : _o.Single,
      TableEncryptionService.UseEncryption ? _Guided : _o.Guided,
      TableEncryptionService.UseEncryption ? _Blue : _o.Blue,
      TableEncryptionService.UseEncryption ? _CoverEnter : _o.CoverEnter,
      _normal,
      TableEncryptionService.UseEncryption ? _Crush : _o.Crush,
      TableEncryptionService.UseEncryption ? _Able : _o.Able,
      TableEncryptionService.UseEncryption ? _AllySelf : _o.AllySelf,
      TableEncryptionService.UseEncryption ? _LightArmor : _o.LightArmor,
      TableEncryptionService.UseEncryption ? _Wood : _o.Wood,
      TableEncryptionService.UseEncryption ? _All : _o.All,
      TableEncryptionService.UseEncryption ? _DISTANCE : _o.DISTANCE,
      TableEncryptionService.UseEncryption ? _CloseToObstacle : _o.CloseToObstacle,
      TableEncryptionService.UseEncryption ? _Students : _o.Students,
      TableEncryptionService.UseEncryption ? _Sequence : _o.Sequence,
      TableEncryptionService.UseEncryption ? _UseNextExSkill : _o.UseNextExSkill,
      TableEncryptionService.UseEncryption ? _Student : _o.Student,
      TableEncryptionService.UseEncryption ? _SearchAndMove : _o.SearchAndMove,
      TableEncryptionService.UseEncryption ? _Position : _o.Position,
      TableEncryptionService.UseEncryption ? _Street : _o.Street,
      TableEncryptionService.UseEncryption ? _D : _o.D,
      TableEncryptionService.UseEncryption ? _MAIN : _o.MAIN,
      TableEncryptionService.UseEncryption ? _Remain : _o.Remain,
      TableEncryptionService.UseEncryption ? _Low : _o.Low,
      TableEncryptionService.UseEncryption ? _Resist : _o.Resist,
      TableEncryptionService.UseEncryption ? _Ally : _o.Ally,
      TableEncryptionService.UseEncryption ? _Main : _o.Main,
      TableEncryptionService.UseEncryption ? _TargetToCaster : _o.TargetToCaster,
      TableEncryptionService.UseEncryption ? _Duration : _o.Duration,
      TableEncryptionService.UseEncryption ? _Preset : _o.Preset,
      TableEncryptionService.UseEncryption ? _FinalDamage : _o.FinalDamage,
      TableEncryptionService.UseEncryption ? _SpecialTransStat : _o.SpecialTransStat,
      TableEncryptionService.UseEncryption ? _Talk : _o.Talk);
  }
}

public class BattleExcelT
{
  public List<Global.UnitType> None { get; set; }
  public Global.AttackType Single { get; set; }
  public Global.ProjectileType Guided { get; set; }
  public Global.DamageFontColor Blue { get; set; }
  public Global.EmoticonEvent CoverEnter { get; set; }
  public List<Global.BulletType> Normal { get; set; }
  public Global.ActionType Crush { get; set; }
  public Global.BuffOverlap Able { get; set; }
  public Global.ReArrangeTargetType AllySelf { get; set; }
  public Global.ArmorType LightArmor { get; set; }
  public Global.EntityMaterialType Wood { get; set; }
  public Global.CoverMotionType All { get; set; }
  public Global.TargetSortBy DISTANCE { get; set; }
  public Global.PositioningType CloseToObstacle { get; set; }
  public Global.FormationLine Students { get; set; }
  public Global.ExternalBTNodeType Sequence { get; set; }
  public Global.ExternalBehavior UseNextExSkill { get; set; }
  public Global.TacticEntityType Student { get; set; }
  public Global.EngageType SearchAndMove { get; set; }
  public Global.HitEffectPosition Position { get; set; }
  public Global.StageTopography Street { get; set; }
  public Global.TerrainAdaptationStat D { get; set; }
  public Global.ObstacleClass MAIN { get; set; }
  public Global.ObstacleDestroyType Remain { get; set; }
  public Global.ObstacleHeightType Low { get; set; }
  public Global.DamageAttribute Resist { get; set; }
  public Global.SkillPriorityCheckTarget Ally { get; set; }
  public Global.StageType Main { get; set; }
  public Global.KnockbackDirection TargetToCaster { get; set; }
  public Global.EndCondition Duration { get; set; }
  public Global.ArenaSimulatorServer Preset { get; set; }
  public Global.BattleCalculationStat FinalDamage { get; set; }
  public Global.StatTransType SpecialTransStat { get; set; }
  public Global.BattleDialogType Talk { get; set; }

  public BattleExcelT() {
    this.None = null;
    this.Single = Global.AttackType.Single;
    this.Guided = Global.ProjectileType.Guided;
    this.Blue = Global.DamageFontColor.Blue;
    this.CoverEnter = Global.EmoticonEvent.CoverEnter;
    this.Normal = null;
    this.Crush = Global.ActionType.Crush;
    this.Able = Global.BuffOverlap.Able;
    this.AllySelf = Global.ReArrangeTargetType.AllySelf;
    this.LightArmor = Global.ArmorType.LightArmor;
    this.Wood = Global.EntityMaterialType.Wood;
    this.All = Global.CoverMotionType.All;
    this.DISTANCE = Global.TargetSortBy.DISTANCE;
    this.CloseToObstacle = Global.PositioningType.CloseToObstacle;
    this.Students = Global.FormationLine.Students;
    this.Sequence = Global.ExternalBTNodeType.Sequence;
    this.UseNextExSkill = Global.ExternalBehavior.UseNextExSkill;
    this.Student = Global.TacticEntityType.None;
    this.SearchAndMove = Global.EngageType.SearchAndMove;
    this.Position = Global.HitEffectPosition.Position;
    this.Street = Global.StageTopography.Street;
    this.D = Global.TerrainAdaptationStat.D;
    this.MAIN = Global.ObstacleClass.MAIN;
    this.Remain = Global.ObstacleDestroyType.Remain;
    this.Low = Global.ObstacleHeightType.Low;
    this.Resist = Global.DamageAttribute.Resist;
    this.Ally = Global.SkillPriorityCheckTarget.Ally;
    this.Main = Global.StageType.Main;
    this.TargetToCaster = Global.KnockbackDirection.TargetToCaster;
    this.Duration = Global.EndCondition.Duration;
    this.Preset = Global.ArenaSimulatorServer.Preset;
    this.FinalDamage = Global.BattleCalculationStat.FinalDamage;
    this.SpecialTransStat = Global.StatTransType.SpecialTransStat;
    this.Talk = Global.BattleDialogType.Talk;
  }
}


static public class BattleExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*None*/, 4 /*Global.UnitType*/, false)
      && verifier.VerifyField(tablePos, 6 /*Single*/, 4 /*Global.AttackType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Guided*/, 4 /*Global.ProjectileType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Blue*/, 4 /*Global.DamageFontColor*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CoverEnter*/, 4 /*Global.EmoticonEvent*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*Normal*/, 4 /*Global.BulletType*/, false)
      && verifier.VerifyField(tablePos, 16 /*Crush*/, 4 /*Global.ActionType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Able*/, 4 /*Global.BuffOverlap*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*AllySelf*/, 4 /*Global.ReArrangeTargetType*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*LightArmor*/, 4 /*Global.ArmorType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Wood*/, 4 /*Global.EntityMaterialType*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*All*/, 4 /*Global.CoverMotionType*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*DISTANCE*/, 4 /*Global.TargetSortBy*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*CloseToObstacle*/, 4 /*Global.PositioningType*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*Students*/, 4 /*Global.FormationLine*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*Sequence*/, 4 /*Global.ExternalBTNodeType*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*UseNextExSkill*/, 4 /*Global.ExternalBehavior*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*Student*/, 4 /*Global.TacticEntityType*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*SearchAndMove*/, 4 /*Global.EngageType*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*Position*/, 4 /*Global.HitEffectPosition*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*Street*/, 4 /*Global.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*D*/, 4 /*Global.TerrainAdaptationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*MAIN*/, 4 /*Global.ObstacleClass*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*Remain*/, 4 /*Global.ObstacleDestroyType*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*Low*/, 4 /*Global.ObstacleHeightType*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*Resist*/, 4 /*Global.DamageAttribute*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*Ally*/, 4 /*Global.SkillPriorityCheckTarget*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*Main*/, 4 /*Global.StageType*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*TargetToCaster*/, 4 /*Global.KnockbackDirection*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*Duration*/, 4 /*Global.EndCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*Preset*/, 4 /*Global.ArenaSimulatorServer*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*FinalDamage*/, 4 /*Global.BattleCalculationStat*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*SpecialTransStat*/, 4 /*Global.StatTransType*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*Talk*/, 4 /*Global.BattleDialogType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
