// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct FieldWorldMapZoneExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FieldWorldMapZoneExcel GetRootAsFieldWorldMapZoneExcel(ByteBuffer _bb) { return GetRootAsFieldWorldMapZoneExcel(_bb, new FieldWorldMapZoneExcel()); }
  public static FieldWorldMapZoneExcel GetRootAsFieldWorldMapZoneExcel(ByteBuffer _bb, FieldWorldMapZoneExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldWorldMapZoneExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Date { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Global.FieldConditionType OpenConditionType { get { int o = __p.__offset(10); return o != 0 ? (Global.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : Global.FieldConditionType.Invalid; } }
  public long OpenConditionId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.FieldConditionType CloseConditionType { get { int o = __p.__offset(14); return o != 0 ? (Global.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : Global.FieldConditionType.Invalid; } }
  public long CloseConditionId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ResultFieldScene { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FieldStageInteractionId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.FieldWorldMapButtonType WorldMapButtonType { get { int o = __p.__offset(22); return o != 0 ? (Global.FieldWorldMapButtonType)__p.bb.GetInt(o + __p.bb_pos) : Global.FieldWorldMapButtonType.DefaultMode; } }
  public uint LocalizeCode { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool NewTagDisplay { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Global.FieldWorldMapZoneExcel> CreateFieldWorldMapZoneExcel(FlatBufferBuilder builder,
      long Id = 0,
      int GroupId = 0,
      int Date = 0,
      Global.FieldConditionType OpenConditionType = Global.FieldConditionType.Invalid,
      long OpenConditionId = 0,
      Global.FieldConditionType CloseConditionType = Global.FieldConditionType.Invalid,
      long CloseConditionId = 0,
      long ResultFieldScene = 0,
      long FieldStageInteractionId = 0,
      Global.FieldWorldMapButtonType WorldMapButtonType = Global.FieldWorldMapButtonType.DefaultMode,
      uint LocalizeCode = 0,
      bool NewTagDisplay = false) {
    builder.StartTable(12);
    FieldWorldMapZoneExcel.AddFieldStageInteractionId(builder, FieldStageInteractionId);
    FieldWorldMapZoneExcel.AddResultFieldScene(builder, ResultFieldScene);
    FieldWorldMapZoneExcel.AddCloseConditionId(builder, CloseConditionId);
    FieldWorldMapZoneExcel.AddOpenConditionId(builder, OpenConditionId);
    FieldWorldMapZoneExcel.AddId(builder, Id);
    FieldWorldMapZoneExcel.AddLocalizeCode(builder, LocalizeCode);
    FieldWorldMapZoneExcel.AddWorldMapButtonType(builder, WorldMapButtonType);
    FieldWorldMapZoneExcel.AddCloseConditionType(builder, CloseConditionType);
    FieldWorldMapZoneExcel.AddOpenConditionType(builder, OpenConditionType);
    FieldWorldMapZoneExcel.AddDate(builder, Date);
    FieldWorldMapZoneExcel.AddGroupId(builder, GroupId);
    FieldWorldMapZoneExcel.AddNewTagDisplay(builder, NewTagDisplay);
    return FieldWorldMapZoneExcel.EndFieldWorldMapZoneExcel(builder);
  }

  public static void StartFieldWorldMapZoneExcel(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(1, groupId, 0); }
  public static void AddDate(FlatBufferBuilder builder, int date) { builder.AddInt(2, date, 0); }
  public static void AddOpenConditionType(FlatBufferBuilder builder, Global.FieldConditionType openConditionType) { builder.AddInt(3, (int)openConditionType, 0); }
  public static void AddOpenConditionId(FlatBufferBuilder builder, long openConditionId) { builder.AddLong(4, openConditionId, 0); }
  public static void AddCloseConditionType(FlatBufferBuilder builder, Global.FieldConditionType closeConditionType) { builder.AddInt(5, (int)closeConditionType, 0); }
  public static void AddCloseConditionId(FlatBufferBuilder builder, long closeConditionId) { builder.AddLong(6, closeConditionId, 0); }
  public static void AddResultFieldScene(FlatBufferBuilder builder, long resultFieldScene) { builder.AddLong(7, resultFieldScene, 0); }
  public static void AddFieldStageInteractionId(FlatBufferBuilder builder, long fieldStageInteractionId) { builder.AddLong(8, fieldStageInteractionId, 0); }
  public static void AddWorldMapButtonType(FlatBufferBuilder builder, Global.FieldWorldMapButtonType worldMapButtonType) { builder.AddInt(9, (int)worldMapButtonType, 0); }
  public static void AddLocalizeCode(FlatBufferBuilder builder, uint localizeCode) { builder.AddUint(10, localizeCode, 0); }
  public static void AddNewTagDisplay(FlatBufferBuilder builder, bool newTagDisplay) { builder.AddBool(11, newTagDisplay, false); }
  public static Offset<Global.FieldWorldMapZoneExcel> EndFieldWorldMapZoneExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.FieldWorldMapZoneExcel>(o);
  }
  public FieldWorldMapZoneExcelT UnPack() {
    var _o = new FieldWorldMapZoneExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldWorldMapZoneExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("FieldWorldMapZone");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.GroupId, key) : this.GroupId;
    _o.Date = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Date, key) : this.Date;
    _o.OpenConditionType = TableEncryptionService.UseEncryption ? (Global.FieldConditionType)TableEncryptionService.Convert((int)this.OpenConditionType, key) : this.OpenConditionType;
    _o.OpenConditionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.OpenConditionId, key) : this.OpenConditionId;
    _o.CloseConditionType = TableEncryptionService.UseEncryption ? (Global.FieldConditionType)TableEncryptionService.Convert((int)this.CloseConditionType, key) : this.CloseConditionType;
    _o.CloseConditionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CloseConditionId, key) : this.CloseConditionId;
    _o.ResultFieldScene = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ResultFieldScene, key) : this.ResultFieldScene;
    _o.FieldStageInteractionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FieldStageInteractionId, key) : this.FieldStageInteractionId;
    _o.WorldMapButtonType = TableEncryptionService.UseEncryption ? (Global.FieldWorldMapButtonType)TableEncryptionService.Convert((int)this.WorldMapButtonType, key) : this.WorldMapButtonType;
    _o.LocalizeCode = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeCode, key) : this.LocalizeCode;
    _o.NewTagDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.NewTagDisplay, key) : this.NewTagDisplay;
  }
  public static Offset<Global.FieldWorldMapZoneExcel> Pack(FlatBufferBuilder builder, FieldWorldMapZoneExcelT _o) {
    if (_o == null) return default(Offset<Global.FieldWorldMapZoneExcel>);
		byte[] key = TableEncryptionService.CreateKey("FieldWorldMapZone");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.GroupId, key) : _o.GroupId;
		var _Date = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Date, key) : _o.Date;
		var _OpenConditionType = TableEncryptionService.UseEncryption ? (Global.FieldConditionType)TableEncryptionService.Convert((int)_o.OpenConditionType, key) : _o.OpenConditionType;
		var _OpenConditionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.OpenConditionId, key) : _o.OpenConditionId;
		var _CloseConditionType = TableEncryptionService.UseEncryption ? (Global.FieldConditionType)TableEncryptionService.Convert((int)_o.CloseConditionType, key) : _o.CloseConditionType;
		var _CloseConditionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CloseConditionId, key) : _o.CloseConditionId;
		var _ResultFieldScene = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ResultFieldScene, key) : _o.ResultFieldScene;
		var _FieldStageInteractionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FieldStageInteractionId, key) : _o.FieldStageInteractionId;
		var _WorldMapButtonType = TableEncryptionService.UseEncryption ? (Global.FieldWorldMapButtonType)TableEncryptionService.Convert((int)_o.WorldMapButtonType, key) : _o.WorldMapButtonType;
		var _LocalizeCode = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeCode, key) : _o.LocalizeCode;
		var _NewTagDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.NewTagDisplay, key) : _o.NewTagDisplay;
    return CreateFieldWorldMapZoneExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _Date : _o.Date,
      TableEncryptionService.UseEncryption ? _OpenConditionType : _o.OpenConditionType,
      TableEncryptionService.UseEncryption ? _OpenConditionId : _o.OpenConditionId,
      TableEncryptionService.UseEncryption ? _CloseConditionType : _o.CloseConditionType,
      TableEncryptionService.UseEncryption ? _CloseConditionId : _o.CloseConditionId,
      TableEncryptionService.UseEncryption ? _ResultFieldScene : _o.ResultFieldScene,
      TableEncryptionService.UseEncryption ? _FieldStageInteractionId : _o.FieldStageInteractionId,
      TableEncryptionService.UseEncryption ? _WorldMapButtonType : _o.WorldMapButtonType,
      TableEncryptionService.UseEncryption ? _LocalizeCode : _o.LocalizeCode,
      TableEncryptionService.UseEncryption ? _NewTagDisplay : _o.NewTagDisplay);
  }
}

public class FieldWorldMapZoneExcelT
{
  public long Id { get; set; }
  public int GroupId { get; set; }
  public int Date { get; set; }
  public Global.FieldConditionType OpenConditionType { get; set; }
  public long OpenConditionId { get; set; }
  public Global.FieldConditionType CloseConditionType { get; set; }
  public long CloseConditionId { get; set; }
  public long ResultFieldScene { get; set; }
  public long FieldStageInteractionId { get; set; }
  public Global.FieldWorldMapButtonType WorldMapButtonType { get; set; }
  public uint LocalizeCode { get; set; }
  public bool NewTagDisplay { get; set; }

  public FieldWorldMapZoneExcelT() {
    this.Id = 0;
    this.GroupId = 0;
    this.Date = 0;
    this.OpenConditionType = Global.FieldConditionType.Invalid;
    this.OpenConditionId = 0;
    this.CloseConditionType = Global.FieldConditionType.Invalid;
    this.CloseConditionId = 0;
    this.ResultFieldScene = 0;
    this.FieldStageInteractionId = 0;
    this.WorldMapButtonType = Global.FieldWorldMapButtonType.DefaultMode;
    this.LocalizeCode = 0;
    this.NewTagDisplay = false;
  }
}


static public class FieldWorldMapZoneExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Date*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*OpenConditionType*/, 4 /*Global.FieldConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*OpenConditionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*CloseConditionType*/, 4 /*Global.FieldConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*CloseConditionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*ResultFieldScene*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*FieldStageInteractionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*WorldMapButtonType*/, 4 /*Global.FieldWorldMapButtonType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*LocalizeCode*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*NewTagDisplay*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
