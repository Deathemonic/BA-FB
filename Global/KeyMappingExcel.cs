// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct KeyMappingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static KeyMappingExcel GetRootAsKeyMappingExcel(ByteBuffer _bb) { return GetRootAsKeyMappingExcel(_bb, new KeyMappingExcel()); }
  public static KeyMappingExcel GetRootAsKeyMappingExcel(ByteBuffer _bb, KeyMappingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyMappingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string TargetKeyCode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetKeyCodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTargetKeyCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTargetKeyCodeArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsDisplay { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsUsed { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsLongPress { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IgnorePosCheck { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float IconPositionX { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float IconPositionY { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float IconScaleX { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float IconScaleY { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Global.KeyMappingExcel> CreateKeyMappingExcel(FlatBufferBuilder builder,
      StringOffset IdOffset = default(StringOffset),
      StringOffset TargetKeyCodeOffset = default(StringOffset),
      bool isDisplay = false,
      bool isUsed = false,
      bool isLongPress = false,
      bool IgnorePosCheck = false,
      float IconPositionX = 0.0f,
      float IconPositionY = 0.0f,
      float IconScaleX = 0.0f,
      float IconScaleY = 0.0f) {
    builder.StartTable(10);
    KeyMappingExcel.AddIconScaleY(builder, IconScaleY);
    KeyMappingExcel.AddIconScaleX(builder, IconScaleX);
    KeyMappingExcel.AddIconPositionY(builder, IconPositionY);
    KeyMappingExcel.AddIconPositionX(builder, IconPositionX);
    KeyMappingExcel.AddTargetKeyCode(builder, TargetKeyCodeOffset);
    KeyMappingExcel.AddId(builder, IdOffset);
    KeyMappingExcel.AddIgnorePosCheck(builder, IgnorePosCheck);
    KeyMappingExcel.AddIsLongPress(builder, isLongPress);
    KeyMappingExcel.AddIsUsed(builder, isUsed);
    KeyMappingExcel.AddIsDisplay(builder, isDisplay);
    return KeyMappingExcel.EndKeyMappingExcel(builder);
  }

  public static void StartKeyMappingExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddTargetKeyCode(FlatBufferBuilder builder, StringOffset targetKeyCodeOffset) { builder.AddOffset(1, targetKeyCodeOffset.Value, 0); }
  public static void AddIsDisplay(FlatBufferBuilder builder, bool isDisplay) { builder.AddBool(2, isDisplay, false); }
  public static void AddIsUsed(FlatBufferBuilder builder, bool isUsed) { builder.AddBool(3, isUsed, false); }
  public static void AddIsLongPress(FlatBufferBuilder builder, bool isLongPress) { builder.AddBool(4, isLongPress, false); }
  public static void AddIgnorePosCheck(FlatBufferBuilder builder, bool ignorePosCheck) { builder.AddBool(5, ignorePosCheck, false); }
  public static void AddIconPositionX(FlatBufferBuilder builder, float iconPositionX) { builder.AddFloat(6, iconPositionX, 0.0f); }
  public static void AddIconPositionY(FlatBufferBuilder builder, float iconPositionY) { builder.AddFloat(7, iconPositionY, 0.0f); }
  public static void AddIconScaleX(FlatBufferBuilder builder, float iconScaleX) { builder.AddFloat(8, iconScaleX, 0.0f); }
  public static void AddIconScaleY(FlatBufferBuilder builder, float iconScaleY) { builder.AddFloat(9, iconScaleY, 0.0f); }
  public static Offset<Global.KeyMappingExcel> EndKeyMappingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.KeyMappingExcel>(o);
  }
  public KeyMappingExcelT UnPack() {
    var _o = new KeyMappingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyMappingExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("KeyMapping");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Id, key) : this.Id;
    _o.TargetKeyCode = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TargetKeyCode, key) : this.TargetKeyCode;
    _o.IsDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsDisplay, key) : this.IsDisplay;
    _o.IsUsed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsUsed, key) : this.IsUsed;
    _o.IsLongPress = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsLongPress, key) : this.IsLongPress;
    _o.IgnorePosCheck = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IgnorePosCheck, key) : this.IgnorePosCheck;
    _o.IconPositionX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.IconPositionX, key) : this.IconPositionX;
    _o.IconPositionY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.IconPositionY, key) : this.IconPositionY;
    _o.IconScaleX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.IconScaleX, key) : this.IconScaleX;
    _o.IconScaleY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.IconScaleY, key) : this.IconScaleY;
  }
  public static Offset<Global.KeyMappingExcel> Pack(FlatBufferBuilder builder, KeyMappingExcelT _o) {
    if (_o == null) return default(Offset<Global.KeyMappingExcel>);
		byte[] key = TableEncryptionService.CreateKey("KeyMapping");
    var _Id = _o.Id == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Id, key) : _o.Id));
    var _TargetKeyCode = _o.TargetKeyCode == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TargetKeyCode, key) : _o.TargetKeyCode));
		var _isDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsDisplay, key) : _o.IsDisplay;
		var _isUsed = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsUsed, key) : _o.IsUsed;
		var _isLongPress = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsLongPress, key) : _o.IsLongPress;
		var _IgnorePosCheck = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IgnorePosCheck, key) : _o.IgnorePosCheck;
		var _IconPositionX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.IconPositionX, key) : _o.IconPositionX;
		var _IconPositionY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.IconPositionY, key) : _o.IconPositionY;
		var _IconScaleX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.IconScaleX, key) : _o.IconScaleX;
		var _IconScaleY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.IconScaleY, key) : _o.IconScaleY;
    return CreateKeyMappingExcel(
      builder,
      _Id,
      _TargetKeyCode,
      TableEncryptionService.UseEncryption ? _isDisplay : _o.IsDisplay,
      TableEncryptionService.UseEncryption ? _isUsed : _o.IsUsed,
      TableEncryptionService.UseEncryption ? _isLongPress : _o.IsLongPress,
      TableEncryptionService.UseEncryption ? _IgnorePosCheck : _o.IgnorePosCheck,
      TableEncryptionService.UseEncryption ? _IconPositionX : _o.IconPositionX,
      TableEncryptionService.UseEncryption ? _IconPositionY : _o.IconPositionY,
      TableEncryptionService.UseEncryption ? _IconScaleX : _o.IconScaleX,
      TableEncryptionService.UseEncryption ? _IconScaleY : _o.IconScaleY);
  }
}

public class KeyMappingExcelT
{
  public string Id { get; set; }
  public string TargetKeyCode { get; set; }
  public bool IsDisplay { get; set; }
  public bool IsUsed { get; set; }
  public bool IsLongPress { get; set; }
  public bool IgnorePosCheck { get; set; }
  public float IconPositionX { get; set; }
  public float IconPositionY { get; set; }
  public float IconScaleX { get; set; }
  public float IconScaleY { get; set; }

  public KeyMappingExcelT() {
    this.Id = null;
    this.TargetKeyCode = null;
    this.IsDisplay = false;
    this.IsUsed = false;
    this.IsLongPress = false;
    this.IgnorePosCheck = false;
    this.IconPositionX = 0.0f;
    this.IconPositionY = 0.0f;
    this.IconScaleX = 0.0f;
    this.IconScaleY = 0.0f;
  }
}


static public class KeyMappingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*TargetKeyCode*/, false)
      && verifier.VerifyField(tablePos, 8 /*IsDisplay*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*IsUsed*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*IsLongPress*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*IgnorePosCheck*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*IconPositionX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*IconPositionY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*IconScaleX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*IconScaleY*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
