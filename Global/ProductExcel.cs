// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ProductExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ProductExcel GetRootAsProductExcel(ByteBuffer _bb) { return GetRootAsProductExcel(_bb, new ProductExcel()); }
  public static ProductExcel GetRootAsProductExcel(ByteBuffer _bb, ProductExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProductExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ProductId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetProductIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetProductIdArray() { return __p.__vector_as_array<byte>(6); }
  public string TeenProductId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeenProductIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTeenProductIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTeenProductIdArray() { return __p.__vector_as_array<byte>(8); }
  public Global.StoreType StoreType { get { int o = __p.__offset(10); return o != 0 ? (Global.StoreType)__p.bb.GetInt(o + __p.bb_pos) : Global.StoreType.None; } }
  public long Price { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PriceReference { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriceReferenceBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPriceReferenceBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPriceReferenceArray() { return __p.__vector_as_array<byte>(14); }
  public Global.PurchasePeriodType PurchasePeriodType { get { int o = __p.__offset(16); return o != 0 ? (Global.PurchasePeriodType)__p.bb.GetInt(o + __p.bb_pos) : Global.PurchasePeriodType.None; } }
  public long PurchasePeriodLimit { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType ParcelType(int j) { int o = __p.__offset(20); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ParcelType)0; }
  public int ParcelTypeLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ParcelType> GetParcelTypeBytes() { return __p.__vector_as_span<Global.ParcelType>(20, 4); }
#else
  public ArraySegment<byte>? GetParcelTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public Global.ParcelType[] GetParcelTypeArray() { int o = __p.__offset(20); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ParcelType[] a = new Global.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ParcelId(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ParcelIdLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetParcelIdBytes() { return __p.__vector_as_span<long>(22, 8); }
#else
  public ArraySegment<byte>? GetParcelIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public long[] GetParcelIdArray() { return __p.__vector_as_array<long>(22); }
  public long ParcelAmount(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ParcelAmountLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetParcelAmountBytes() { return __p.__vector_as_span<long>(24, 8); }
#else
  public ArraySegment<byte>? GetParcelAmountBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public long[] GetParcelAmountArray() { return __p.__vector_as_array<long>(24); }

  public static Offset<Global.ProductExcel> CreateProductExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset ProductIdOffset = default(StringOffset),
      StringOffset TeenProductIdOffset = default(StringOffset),
      Global.StoreType StoreType = Global.StoreType.None,
      long Price = 0,
      StringOffset PriceReferenceOffset = default(StringOffset),
      Global.PurchasePeriodType PurchasePeriodType = Global.PurchasePeriodType.None,
      long PurchasePeriodLimit = 0,
      VectorOffset ParcelTypeOffset = default(VectorOffset),
      VectorOffset ParcelIdOffset = default(VectorOffset),
      VectorOffset ParcelAmountOffset = default(VectorOffset)) {
    builder.StartTable(11);
    ProductExcel.AddPurchasePeriodLimit(builder, PurchasePeriodLimit);
    ProductExcel.AddPrice(builder, Price);
    ProductExcel.AddId(builder, Id);
    ProductExcel.AddParcelAmount(builder, ParcelAmountOffset);
    ProductExcel.AddParcelId(builder, ParcelIdOffset);
    ProductExcel.AddParcelType(builder, ParcelTypeOffset);
    ProductExcel.AddPurchasePeriodType(builder, PurchasePeriodType);
    ProductExcel.AddPriceReference(builder, PriceReferenceOffset);
    ProductExcel.AddStoreType(builder, StoreType);
    ProductExcel.AddTeenProductId(builder, TeenProductIdOffset);
    ProductExcel.AddProductId(builder, ProductIdOffset);
    return ProductExcel.EndProductExcel(builder);
  }

  public static void StartProductExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddProductId(FlatBufferBuilder builder, StringOffset productIdOffset) { builder.AddOffset(1, productIdOffset.Value, 0); }
  public static void AddTeenProductId(FlatBufferBuilder builder, StringOffset teenProductIdOffset) { builder.AddOffset(2, teenProductIdOffset.Value, 0); }
  public static void AddStoreType(FlatBufferBuilder builder, Global.StoreType storeType) { builder.AddInt(3, (int)storeType, 0); }
  public static void AddPrice(FlatBufferBuilder builder, long price) { builder.AddLong(4, price, 0); }
  public static void AddPriceReference(FlatBufferBuilder builder, StringOffset priceReferenceOffset) { builder.AddOffset(5, priceReferenceOffset.Value, 0); }
  public static void AddPurchasePeriodType(FlatBufferBuilder builder, Global.PurchasePeriodType purchasePeriodType) { builder.AddInt(6, (int)purchasePeriodType, 0); }
  public static void AddPurchasePeriodLimit(FlatBufferBuilder builder, long purchasePeriodLimit) { builder.AddLong(7, purchasePeriodLimit, 0); }
  public static void AddParcelType(FlatBufferBuilder builder, VectorOffset parcelTypeOffset) { builder.AddOffset(8, parcelTypeOffset.Value, 0); }
  public static VectorOffset CreateParcelTypeVector(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParcelId(FlatBufferBuilder builder, VectorOffset parcelIdOffset) { builder.AddOffset(9, parcelIdOffset.Value, 0); }
  public static VectorOffset CreateParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddParcelAmount(FlatBufferBuilder builder, VectorOffset parcelAmountOffset) { builder.AddOffset(10, parcelAmountOffset.Value, 0); }
  public static VectorOffset CreateParcelAmountVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Global.ProductExcel> EndProductExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ProductExcel>(o);
  }
  public ProductExcelT UnPack() {
    var _o = new ProductExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProductExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Product");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.ProductId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ProductId, key) : this.ProductId;
    _o.TeenProductId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TeenProductId, key) : this.TeenProductId;
    _o.StoreType = TableEncryptionService.UseEncryption ? (Global.StoreType)TableEncryptionService.Convert((int)this.StoreType, key) : this.StoreType;
    _o.Price = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Price, key) : this.Price;
    _o.PriceReference = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PriceReference, key) : this.PriceReference;
    _o.PurchasePeriodType = TableEncryptionService.UseEncryption ? (Global.PurchasePeriodType)TableEncryptionService.Convert((int)this.PurchasePeriodType, key) : this.PurchasePeriodType;
    _o.PurchasePeriodLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PurchasePeriodLimit, key) : this.PurchasePeriodLimit;
    _o.ParcelType = new List<Global.ParcelType>();
    for (var _j = 0; _j < this.ParcelTypeLength; ++_j) {_o.ParcelType.Add(TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ParcelType(_j), key) : this.ParcelType(_j));}
    _o.ParcelId = new List<long>();
    for (var _j = 0; _j < this.ParcelIdLength; ++_j) {_o.ParcelId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ParcelId(_j), key) : this.ParcelId(_j));}
    _o.ParcelAmount = new List<long>();
    for (var _j = 0; _j < this.ParcelAmountLength; ++_j) {_o.ParcelAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ParcelAmount(_j), key) : this.ParcelAmount(_j));}
  }
  public static Offset<Global.ProductExcel> Pack(FlatBufferBuilder builder, ProductExcelT _o) {
    if (_o == null) return default(Offset<Global.ProductExcel>);
		byte[] key = TableEncryptionService.CreateKey("Product");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _ProductId = _o.ProductId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ProductId, key) : _o.ProductId));
    var _TeenProductId = _o.TeenProductId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TeenProductId, key) : _o.TeenProductId));
		var _StoreType = TableEncryptionService.UseEncryption ? (Global.StoreType)TableEncryptionService.Convert((int)_o.StoreType, key) : _o.StoreType;
		var _Price = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Price, key) : _o.Price;
    var _PriceReference = _o.PriceReference == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PriceReference, key) : _o.PriceReference));
		var _PurchasePeriodType = TableEncryptionService.UseEncryption ? (Global.PurchasePeriodType)TableEncryptionService.Convert((int)_o.PurchasePeriodType, key) : _o.PurchasePeriodType;
		var _PurchasePeriodLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PurchasePeriodLimit, key) : _o.PurchasePeriodLimit;
    var _ParcelType = default(VectorOffset);
    if (_o.ParcelType != null) {
      var __ParcelType = _o.ParcelType.Select(x => TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _ParcelType = CreateParcelTypeVector(builder, __ParcelType);
    }
    var _ParcelId = default(VectorOffset);
    if (_o.ParcelId != null) {
      var __ParcelId = _o.ParcelId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ParcelId = CreateParcelIdVector(builder, __ParcelId);
    }
    var _ParcelAmount = default(VectorOffset);
    if (_o.ParcelAmount != null) {
      var __ParcelAmount = _o.ParcelAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ParcelAmount = CreateParcelAmountVector(builder, __ParcelAmount);
    }
    return CreateProductExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _ProductId,
      _TeenProductId,
      TableEncryptionService.UseEncryption ? _StoreType : _o.StoreType,
      TableEncryptionService.UseEncryption ? _Price : _o.Price,
      _PriceReference,
      TableEncryptionService.UseEncryption ? _PurchasePeriodType : _o.PurchasePeriodType,
      TableEncryptionService.UseEncryption ? _PurchasePeriodLimit : _o.PurchasePeriodLimit,
      _ParcelType,
      _ParcelId,
      _ParcelAmount);
  }
}

public class ProductExcelT
{
  public long Id { get; set; }
  public string ProductId { get; set; }
  public string TeenProductId { get; set; }
  public Global.StoreType StoreType { get; set; }
  public long Price { get; set; }
  public string PriceReference { get; set; }
  public Global.PurchasePeriodType PurchasePeriodType { get; set; }
  public long PurchasePeriodLimit { get; set; }
  public List<Global.ParcelType> ParcelType { get; set; }
  public List<long> ParcelId { get; set; }
  public List<long> ParcelAmount { get; set; }

  public ProductExcelT() {
    this.Id = 0;
    this.ProductId = null;
    this.TeenProductId = null;
    this.StoreType = Global.StoreType.None;
    this.Price = 0;
    this.PriceReference = null;
    this.PurchasePeriodType = Global.PurchasePeriodType.None;
    this.PurchasePeriodLimit = 0;
    this.ParcelType = null;
    this.ParcelId = null;
    this.ParcelAmount = null;
  }
}


static public class ProductExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*ProductId*/, false)
      && verifier.VerifyString(tablePos, 8 /*TeenProductId*/, false)
      && verifier.VerifyField(tablePos, 10 /*StoreType*/, 4 /*Global.StoreType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Price*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 14 /*PriceReference*/, false)
      && verifier.VerifyField(tablePos, 16 /*PurchasePeriodType*/, 4 /*Global.PurchasePeriodType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*PurchasePeriodLimit*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*ParcelType*/, 4 /*Global.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*ParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*ParcelAmount*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
