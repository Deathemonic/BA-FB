// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterVoiceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterVoiceExcel GetRootAsCharacterVoiceExcel(ByteBuffer _bb) { return GetRootAsCharacterVoiceExcel(_bb, new CharacterVoiceExcel()); }
  public static CharacterVoiceExcel GetRootAsCharacterVoiceExcel(ByteBuffer _bb, CharacterVoiceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterVoiceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CharacterVoiceUniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterVoiceGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint VoiceHash { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool OnlyOne { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Priority { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long DisplayOrder { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool CollectionVisible { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Global.CVCollectionType CVCollectionType { get { int o = __p.__offset(18); return o != 0 ? (Global.CVCollectionType)__p.bb.GetInt(o + __p.bb_pos) : Global.CVCollectionType.CVNormal; } }
  public long UnlockFavorRank { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string LocalizeCVGroup { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeCVGroupBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetLocalizeCVGroupBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetLocalizeCVGroupArray() { return __p.__vector_as_array<byte>(22); }
  public Global.Nation Nation(int j) { int o = __p.__offset(24); return o != 0 ? (Global.Nation)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.Nation)0; }
  public int NationLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.Nation> GetNationBytes() { return __p.__vector_as_span<Global.Nation>(24, 4); }
#else
  public ArraySegment<byte>? GetNationBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public Global.Nation[] GetNationArray() { int o = __p.__offset(24); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.Nation[] a = new Global.Nation[l]; for (int i = 0; i < l; i++) { a[i] = (Global.Nation)__p.bb.GetInt(p + i * 4); } return a; }
  public float Volume(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int VolumeLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetVolumeBytes() { return __p.__vector_as_span<float>(26, 4); }
#else
  public ArraySegment<byte>? GetVolumeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public float[] GetVolumeArray() { return __p.__vector_as_array<float>(26); }
  public float Delay(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int DelayLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetDelayBytes() { return __p.__vector_as_span<float>(28, 4); }
#else
  public ArraySegment<byte>? GetDelayBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public float[] GetDelayArray() { return __p.__vector_as_array<float>(28); }
  public string Path(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PathLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Global.CharacterVoiceExcel> CreateCharacterVoiceExcel(FlatBufferBuilder builder,
      long CharacterVoiceUniqueId = 0,
      long CharacterVoiceGroupId = 0,
      uint VoiceHash = 0,
      bool OnlyOne = false,
      int Priority = 0,
      long DisplayOrder = 0,
      bool CollectionVisible = false,
      Global.CVCollectionType CVCollectionType = Global.CVCollectionType.CVNormal,
      long UnlockFavorRank = 0,
      StringOffset LocalizeCVGroupOffset = default(StringOffset),
      VectorOffset NationOffset = default(VectorOffset),
      VectorOffset VolumeOffset = default(VectorOffset),
      VectorOffset DelayOffset = default(VectorOffset),
      VectorOffset PathOffset = default(VectorOffset)) {
    builder.StartTable(14);
    CharacterVoiceExcel.AddUnlockFavorRank(builder, UnlockFavorRank);
    CharacterVoiceExcel.AddDisplayOrder(builder, DisplayOrder);
    CharacterVoiceExcel.AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId);
    CharacterVoiceExcel.AddCharacterVoiceUniqueId(builder, CharacterVoiceUniqueId);
    CharacterVoiceExcel.AddPath(builder, PathOffset);
    CharacterVoiceExcel.AddDelay(builder, DelayOffset);
    CharacterVoiceExcel.AddVolume(builder, VolumeOffset);
    CharacterVoiceExcel.AddNation(builder, NationOffset);
    CharacterVoiceExcel.AddLocalizeCVGroup(builder, LocalizeCVGroupOffset);
    CharacterVoiceExcel.AddCVCollectionType(builder, CVCollectionType);
    CharacterVoiceExcel.AddPriority(builder, Priority);
    CharacterVoiceExcel.AddVoiceHash(builder, VoiceHash);
    CharacterVoiceExcel.AddCollectionVisible(builder, CollectionVisible);
    CharacterVoiceExcel.AddOnlyOne(builder, OnlyOne);
    return CharacterVoiceExcel.EndCharacterVoiceExcel(builder);
  }

  public static void StartCharacterVoiceExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddCharacterVoiceUniqueId(FlatBufferBuilder builder, long characterVoiceUniqueId) { builder.AddLong(0, characterVoiceUniqueId, 0); }
  public static void AddCharacterVoiceGroupId(FlatBufferBuilder builder, long characterVoiceGroupId) { builder.AddLong(1, characterVoiceGroupId, 0); }
  public static void AddVoiceHash(FlatBufferBuilder builder, uint voiceHash) { builder.AddUint(2, voiceHash, 0); }
  public static void AddOnlyOne(FlatBufferBuilder builder, bool onlyOne) { builder.AddBool(3, onlyOne, false); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(4, priority, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(5, displayOrder, 0); }
  public static void AddCollectionVisible(FlatBufferBuilder builder, bool collectionVisible) { builder.AddBool(6, collectionVisible, false); }
  public static void AddCVCollectionType(FlatBufferBuilder builder, Global.CVCollectionType cVCollectionType) { builder.AddInt(7, (int)cVCollectionType, 0); }
  public static void AddUnlockFavorRank(FlatBufferBuilder builder, long unlockFavorRank) { builder.AddLong(8, unlockFavorRank, 0); }
  public static void AddLocalizeCVGroup(FlatBufferBuilder builder, StringOffset localizeCVGroupOffset) { builder.AddOffset(9, localizeCVGroupOffset.Value, 0); }
  public static void AddNation(FlatBufferBuilder builder, VectorOffset nationOffset) { builder.AddOffset(10, nationOffset.Value, 0); }
  public static VectorOffset CreateNationVector(FlatBufferBuilder builder, Global.Nation[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, Global.Nation[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.Nation> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.Nation>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVolume(FlatBufferBuilder builder, VectorOffset volumeOffset) { builder.AddOffset(11, volumeOffset.Value, 0); }
  public static VectorOffset CreateVolumeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVolumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDelay(FlatBufferBuilder builder, VectorOffset delayOffset) { builder.AddOffset(12, delayOffset.Value, 0); }
  public static VectorOffset CreateDelayVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDelayVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDelayVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDelayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDelayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset pathOffset) { builder.AddOffset(13, pathOffset.Value, 0); }
  public static VectorOffset CreatePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.CharacterVoiceExcel> EndCharacterVoiceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.CharacterVoiceExcel>(o);
  }
  public CharacterVoiceExcelT UnPack() {
    var _o = new CharacterVoiceExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterVoiceExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterVoice");
    _o.CharacterVoiceUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterVoiceUniqueId, key) : this.CharacterVoiceUniqueId;
    _o.CharacterVoiceGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterVoiceGroupId, key) : this.CharacterVoiceGroupId;
    _o.VoiceHash = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.VoiceHash, key) : this.VoiceHash;
    _o.OnlyOne = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.OnlyOne, key) : this.OnlyOne;
    _o.Priority = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Priority, key) : this.Priority;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.CollectionVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CollectionVisible, key) : this.CollectionVisible;
    _o.CVCollectionType = TableEncryptionService.UseEncryption ? (Global.CVCollectionType)TableEncryptionService.Convert((int)this.CVCollectionType, key) : this.CVCollectionType;
    _o.UnlockFavorRank = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UnlockFavorRank, key) : this.UnlockFavorRank;
    _o.LocalizeCVGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeCVGroup, key) : this.LocalizeCVGroup;
    _o.Nation = new List<Global.Nation>();
    for (var _j = 0; _j < this.NationLength; ++_j) {_o.Nation.Add(TableEncryptionService.UseEncryption ? (Global.Nation)TableEncryptionService.Convert((int)this.Nation(_j), key) : this.Nation(_j));}
    _o.Volume = new List<float>();
    for (var _j = 0; _j < this.VolumeLength; ++_j) {_o.Volume.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.Volume(_j), key) : this.Volume(_j));}
    _o.Delay = new List<float>();
    for (var _j = 0; _j < this.DelayLength; ++_j) {_o.Delay.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.Delay(_j), key) : this.Delay(_j));}
    _o.Path = new List<string>();
    for (var _j = 0; _j < this.PathLength; ++_j) {_o.Path.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Path(_j), key) : this.Path(_j));}
  }
  public static Offset<Global.CharacterVoiceExcel> Pack(FlatBufferBuilder builder, CharacterVoiceExcelT _o) {
    if (_o == null) return default(Offset<Global.CharacterVoiceExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterVoice");
		var _CharacterVoiceUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterVoiceUniqueId, key) : _o.CharacterVoiceUniqueId;
		var _CharacterVoiceGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterVoiceGroupId, key) : _o.CharacterVoiceGroupId;
		var _VoiceHash = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.VoiceHash, key) : _o.VoiceHash;
		var _OnlyOne = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.OnlyOne, key) : _o.OnlyOne;
		var _Priority = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Priority, key) : _o.Priority;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
		var _CollectionVisible = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CollectionVisible, key) : _o.CollectionVisible;
		var _CVCollectionType = TableEncryptionService.UseEncryption ? (Global.CVCollectionType)TableEncryptionService.Convert((int)_o.CVCollectionType, key) : _o.CVCollectionType;
		var _UnlockFavorRank = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UnlockFavorRank, key) : _o.UnlockFavorRank;
    var _LocalizeCVGroup = _o.LocalizeCVGroup == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeCVGroup, key) : _o.LocalizeCVGroup));
    var _Nation = default(VectorOffset);
    if (_o.Nation != null) {
      var __Nation = _o.Nation.Select(x => TableEncryptionService.UseEncryption ? (Global.Nation)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _Nation = CreateNationVector(builder, __Nation);
    }
    var _Volume = default(VectorOffset);
    if (_o.Volume != null) {
      var __Volume = _o.Volume.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _Volume = CreateVolumeVector(builder, __Volume);
    }
    var _Delay = default(VectorOffset);
    if (_o.Delay != null) {
      var __Delay = _o.Delay.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _Delay = CreateDelayVector(builder, __Delay);
    }
    var _Path = default(VectorOffset);
    if (_o.Path != null) {
      var __Path = new StringOffset[_o.Path.Count];
      for (var _j = 0; _j < __Path.Length; ++_j) { __Path[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Path[_j], key) : _o.Path[_j])); }
      _Path = CreatePathVector(builder, __Path);
    }
    return CreateCharacterVoiceExcel(
      builder,
      TableEncryptionService.UseEncryption ? _CharacterVoiceUniqueId : _o.CharacterVoiceUniqueId,
      TableEncryptionService.UseEncryption ? _CharacterVoiceGroupId : _o.CharacterVoiceGroupId,
      TableEncryptionService.UseEncryption ? _VoiceHash : _o.VoiceHash,
      TableEncryptionService.UseEncryption ? _OnlyOne : _o.OnlyOne,
      TableEncryptionService.UseEncryption ? _Priority : _o.Priority,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      TableEncryptionService.UseEncryption ? _CollectionVisible : _o.CollectionVisible,
      TableEncryptionService.UseEncryption ? _CVCollectionType : _o.CVCollectionType,
      TableEncryptionService.UseEncryption ? _UnlockFavorRank : _o.UnlockFavorRank,
      _LocalizeCVGroup,
      _Nation,
      _Volume,
      _Delay,
      _Path);
  }
}

public class CharacterVoiceExcelT
{
  public long CharacterVoiceUniqueId { get; set; }
  public long CharacterVoiceGroupId { get; set; }
  public uint VoiceHash { get; set; }
  public bool OnlyOne { get; set; }
  public int Priority { get; set; }
  public long DisplayOrder { get; set; }
  public bool CollectionVisible { get; set; }
  public Global.CVCollectionType CVCollectionType { get; set; }
  public long UnlockFavorRank { get; set; }
  public string LocalizeCVGroup { get; set; }
  public List<Global.Nation> Nation { get; set; }
  public List<float> Volume { get; set; }
  public List<float> Delay { get; set; }
  public List<string> Path { get; set; }

  public CharacterVoiceExcelT() {
    this.CharacterVoiceUniqueId = 0;
    this.CharacterVoiceGroupId = 0;
    this.VoiceHash = 0;
    this.OnlyOne = false;
    this.Priority = 0;
    this.DisplayOrder = 0;
    this.CollectionVisible = false;
    this.CVCollectionType = Global.CVCollectionType.CVNormal;
    this.UnlockFavorRank = 0;
    this.LocalizeCVGroup = null;
    this.Nation = null;
    this.Volume = null;
    this.Delay = null;
    this.Path = null;
  }
}


static public class CharacterVoiceExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterVoiceUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterVoiceGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*VoiceHash*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*OnlyOne*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*CollectionVisible*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*CVCollectionType*/, 4 /*Global.CVCollectionType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*UnlockFavorRank*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 22 /*LocalizeCVGroup*/, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*Nation*/, 4 /*Global.Nation*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*Volume*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*Delay*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*Path*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
