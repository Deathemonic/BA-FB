// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BGMExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BGMExcel GetRootAsBGMExcel(ByteBuffer _bb) { return GetRootAsBGMExcel(_bb, new BGMExcel()); }
  public static BGMExcel GetRootAsBGMExcel(ByteBuffer _bb, BGMExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BGMExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.Nation Nation(int j) { int o = __p.__offset(6); return o != 0 ? (Global.Nation)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.Nation)0; }
  public int NationLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.Nation> GetNationBytes() { return __p.__vector_as_span<Global.Nation>(6, 4); }
#else
  public ArraySegment<byte>? GetNationBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Global.Nation[] GetNationArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.Nation[] a = new Global.Nation[l]; for (int i = 0; i < l; i++) { a[i] = (Global.Nation)__p.bb.GetInt(p + i * 4); } return a; }
  public string Path(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PathLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Volume(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int VolumeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetVolumeBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetVolumeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetVolumeArray() { return __p.__vector_as_array<float>(10); }
  public float LoopStartTime(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LoopStartTimeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLoopStartTimeBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetLoopStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetLoopStartTimeArray() { return __p.__vector_as_array<float>(12); }
  public float LoopEndTime(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LoopEndTimeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLoopEndTimeBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetLoopEndTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetLoopEndTimeArray() { return __p.__vector_as_array<float>(14); }
  public float LoopTranstionTime(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LoopTranstionTimeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLoopTranstionTimeBytes() { return __p.__vector_as_span<float>(16, 4); }
#else
  public ArraySegment<byte>? GetLoopTranstionTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public float[] GetLoopTranstionTimeArray() { return __p.__vector_as_array<float>(16); }
  public float LoopOffsetTime(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LoopOffsetTimeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLoopOffsetTimeBytes() { return __p.__vector_as_span<float>(18, 4); }
#else
  public ArraySegment<byte>? GetLoopOffsetTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public float[] GetLoopOffsetTimeArray() { return __p.__vector_as_array<float>(18); }

  public static Offset<Global.BGMExcel> CreateBGMExcel(FlatBufferBuilder builder,
      long Id = 0,
      VectorOffset NationOffset = default(VectorOffset),
      VectorOffset PathOffset = default(VectorOffset),
      VectorOffset VolumeOffset = default(VectorOffset),
      VectorOffset LoopStartTimeOffset = default(VectorOffset),
      VectorOffset LoopEndTimeOffset = default(VectorOffset),
      VectorOffset LoopTranstionTimeOffset = default(VectorOffset),
      VectorOffset LoopOffsetTimeOffset = default(VectorOffset)) {
    builder.StartTable(8);
    BGMExcel.AddId(builder, Id);
    BGMExcel.AddLoopOffsetTime(builder, LoopOffsetTimeOffset);
    BGMExcel.AddLoopTranstionTime(builder, LoopTranstionTimeOffset);
    BGMExcel.AddLoopEndTime(builder, LoopEndTimeOffset);
    BGMExcel.AddLoopStartTime(builder, LoopStartTimeOffset);
    BGMExcel.AddVolume(builder, VolumeOffset);
    BGMExcel.AddPath(builder, PathOffset);
    BGMExcel.AddNation(builder, NationOffset);
    return BGMExcel.EndBGMExcel(builder);
  }

  public static void StartBGMExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddNation(FlatBufferBuilder builder, VectorOffset nationOffset) { builder.AddOffset(1, nationOffset.Value, 0); }
  public static VectorOffset CreateNationVector(FlatBufferBuilder builder, Global.Nation[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, Global.Nation[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.Nation> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.Nation>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset pathOffset) { builder.AddOffset(2, pathOffset.Value, 0); }
  public static VectorOffset CreatePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVolume(FlatBufferBuilder builder, VectorOffset volumeOffset) { builder.AddOffset(3, volumeOffset.Value, 0); }
  public static VectorOffset CreateVolumeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVolumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVolumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLoopStartTime(FlatBufferBuilder builder, VectorOffset loopStartTimeOffset) { builder.AddOffset(4, loopStartTimeOffset.Value, 0); }
  public static VectorOffset CreateLoopStartTimeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLoopStartTimeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopStartTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopStartTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLoopStartTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLoopEndTime(FlatBufferBuilder builder, VectorOffset loopEndTimeOffset) { builder.AddOffset(5, loopEndTimeOffset.Value, 0); }
  public static VectorOffset CreateLoopEndTimeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLoopEndTimeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopEndTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopEndTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLoopEndTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLoopTranstionTime(FlatBufferBuilder builder, VectorOffset loopTranstionTimeOffset) { builder.AddOffset(6, loopTranstionTimeOffset.Value, 0); }
  public static VectorOffset CreateLoopTranstionTimeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLoopTranstionTimeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopTranstionTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopTranstionTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLoopTranstionTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLoopOffsetTime(FlatBufferBuilder builder, VectorOffset loopOffsetTimeOffset) { builder.AddOffset(7, loopOffsetTimeOffset.Value, 0); }
  public static VectorOffset CreateLoopOffsetTimeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLoopOffsetTimeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopOffsetTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLoopOffsetTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLoopOffsetTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.BGMExcel> EndBGMExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.BGMExcel>(o);
  }
  public BGMExcelT UnPack() {
    var _o = new BGMExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BGMExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BGM");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Nation = new List<Global.Nation>();
    for (var _j = 0; _j < this.NationLength; ++_j) {_o.Nation.Add(TableEncryptionService.UseEncryption ? (Global.Nation)TableEncryptionService.Convert((int)this.Nation(_j), key) : this.Nation(_j));}
    _o.Path = new List<string>();
    for (var _j = 0; _j < this.PathLength; ++_j) {_o.Path.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Path(_j), key) : this.Path(_j));}
    _o.Volume = new List<float>();
    for (var _j = 0; _j < this.VolumeLength; ++_j) {_o.Volume.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.Volume(_j), key) : this.Volume(_j));}
    _o.LoopStartTime = new List<float>();
    for (var _j = 0; _j < this.LoopStartTimeLength; ++_j) {_o.LoopStartTime.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.LoopStartTime(_j), key) : this.LoopStartTime(_j));}
    _o.LoopEndTime = new List<float>();
    for (var _j = 0; _j < this.LoopEndTimeLength; ++_j) {_o.LoopEndTime.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.LoopEndTime(_j), key) : this.LoopEndTime(_j));}
    _o.LoopTranstionTime = new List<float>();
    for (var _j = 0; _j < this.LoopTranstionTimeLength; ++_j) {_o.LoopTranstionTime.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.LoopTranstionTime(_j), key) : this.LoopTranstionTime(_j));}
    _o.LoopOffsetTime = new List<float>();
    for (var _j = 0; _j < this.LoopOffsetTimeLength; ++_j) {_o.LoopOffsetTime.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.LoopOffsetTime(_j), key) : this.LoopOffsetTime(_j));}
  }
  public static Offset<Global.BGMExcel> Pack(FlatBufferBuilder builder, BGMExcelT _o) {
    if (_o == null) return default(Offset<Global.BGMExcel>);
		byte[] key = TableEncryptionService.CreateKey("BGM");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _Nation = default(VectorOffset);
    if (_o.Nation != null) {
      var __Nation = _o.Nation.Select(x => TableEncryptionService.UseEncryption ? (Global.Nation)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _Nation = CreateNationVector(builder, __Nation);
    }
    var _Path = default(VectorOffset);
    if (_o.Path != null) {
      var __Path = new StringOffset[_o.Path.Count];
      for (var _j = 0; _j < __Path.Length; ++_j) { __Path[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Path[_j], key) : _o.Path[_j])); }
      _Path = CreatePathVector(builder, __Path);
    }
    var _Volume = default(VectorOffset);
    if (_o.Volume != null) {
      var __Volume = _o.Volume.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _Volume = CreateVolumeVector(builder, __Volume);
    }
    var _LoopStartTime = default(VectorOffset);
    if (_o.LoopStartTime != null) {
      var __LoopStartTime = _o.LoopStartTime.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _LoopStartTime = CreateLoopStartTimeVector(builder, __LoopStartTime);
    }
    var _LoopEndTime = default(VectorOffset);
    if (_o.LoopEndTime != null) {
      var __LoopEndTime = _o.LoopEndTime.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _LoopEndTime = CreateLoopEndTimeVector(builder, __LoopEndTime);
    }
    var _LoopTranstionTime = default(VectorOffset);
    if (_o.LoopTranstionTime != null) {
      var __LoopTranstionTime = _o.LoopTranstionTime.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _LoopTranstionTime = CreateLoopTranstionTimeVector(builder, __LoopTranstionTime);
    }
    var _LoopOffsetTime = default(VectorOffset);
    if (_o.LoopOffsetTime != null) {
      var __LoopOffsetTime = _o.LoopOffsetTime.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _LoopOffsetTime = CreateLoopOffsetTimeVector(builder, __LoopOffsetTime);
    }
    return CreateBGMExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _Nation,
      _Path,
      _Volume,
      _LoopStartTime,
      _LoopEndTime,
      _LoopTranstionTime,
      _LoopOffsetTime);
  }
}

public class BGMExcelT
{
  public long Id { get; set; }
  public List<Global.Nation> Nation { get; set; }
  public List<string> Path { get; set; }
  public List<float> Volume { get; set; }
  public List<float> LoopStartTime { get; set; }
  public List<float> LoopEndTime { get; set; }
  public List<float> LoopTranstionTime { get; set; }
  public List<float> LoopOffsetTime { get; set; }

  public BGMExcelT() {
    this.Id = 0;
    this.Nation = null;
    this.Path = null;
    this.Volume = null;
    this.LoopStartTime = null;
    this.LoopEndTime = null;
    this.LoopTranstionTime = null;
    this.LoopOffsetTime = null;
  }
}


static public class BGMExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Nation*/, 4 /*Global.Nation*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*Path*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Volume*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*LoopStartTime*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*LoopEndTime*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*LoopTranstionTime*/, 4 /*float*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*LoopOffsetTime*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
