// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConquestCameraSettingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConquestCameraSettingExcel GetRootAsConquestCameraSettingExcel(ByteBuffer _bb) { return GetRootAsConquestCameraSettingExcel(_bb, new ConquestCameraSettingExcel()); }
  public static ConquestCameraSettingExcel GetRootAsConquestCameraSettingExcel(ByteBuffer _bb, ConquestCameraSettingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestCameraSettingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float ConquestMapBoundaryOffsetLeft { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapBoundaryOffsetRight { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapBoundaryOffsetTop { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapBoundaryOffsetBottom { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapCenterOffsetX { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ConquestMapCenterOffsetY { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraAngle { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMax { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMin { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomDefault { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Global.ConquestCameraSettingExcel> CreateConquestCameraSettingExcel(FlatBufferBuilder builder,
      long Id = 0,
      float ConquestMapBoundaryOffsetLeft = 0.0f,
      float ConquestMapBoundaryOffsetRight = 0.0f,
      float ConquestMapBoundaryOffsetTop = 0.0f,
      float ConquestMapBoundaryOffsetBottom = 0.0f,
      float ConquestMapCenterOffsetX = 0.0f,
      float ConquestMapCenterOffsetY = 0.0f,
      float CameraAngle = 0.0f,
      float CameraZoomMax = 0.0f,
      float CameraZoomMin = 0.0f,
      float CameraZoomDefault = 0.0f) {
    builder.StartTable(11);
    ConquestCameraSettingExcel.AddId(builder, Id);
    ConquestCameraSettingExcel.AddCameraZoomDefault(builder, CameraZoomDefault);
    ConquestCameraSettingExcel.AddCameraZoomMin(builder, CameraZoomMin);
    ConquestCameraSettingExcel.AddCameraZoomMax(builder, CameraZoomMax);
    ConquestCameraSettingExcel.AddCameraAngle(builder, CameraAngle);
    ConquestCameraSettingExcel.AddConquestMapCenterOffsetY(builder, ConquestMapCenterOffsetY);
    ConquestCameraSettingExcel.AddConquestMapCenterOffsetX(builder, ConquestMapCenterOffsetX);
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetBottom(builder, ConquestMapBoundaryOffsetBottom);
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetTop(builder, ConquestMapBoundaryOffsetTop);
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetRight(builder, ConquestMapBoundaryOffsetRight);
    ConquestCameraSettingExcel.AddConquestMapBoundaryOffsetLeft(builder, ConquestMapBoundaryOffsetLeft);
    return ConquestCameraSettingExcel.EndConquestCameraSettingExcel(builder);
  }

  public static void StartConquestCameraSettingExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddConquestMapBoundaryOffsetLeft(FlatBufferBuilder builder, float conquestMapBoundaryOffsetLeft) { builder.AddFloat(1, conquestMapBoundaryOffsetLeft, 0.0f); }
  public static void AddConquestMapBoundaryOffsetRight(FlatBufferBuilder builder, float conquestMapBoundaryOffsetRight) { builder.AddFloat(2, conquestMapBoundaryOffsetRight, 0.0f); }
  public static void AddConquestMapBoundaryOffsetTop(FlatBufferBuilder builder, float conquestMapBoundaryOffsetTop) { builder.AddFloat(3, conquestMapBoundaryOffsetTop, 0.0f); }
  public static void AddConquestMapBoundaryOffsetBottom(FlatBufferBuilder builder, float conquestMapBoundaryOffsetBottom) { builder.AddFloat(4, conquestMapBoundaryOffsetBottom, 0.0f); }
  public static void AddConquestMapCenterOffsetX(FlatBufferBuilder builder, float conquestMapCenterOffsetX) { builder.AddFloat(5, conquestMapCenterOffsetX, 0.0f); }
  public static void AddConquestMapCenterOffsetY(FlatBufferBuilder builder, float conquestMapCenterOffsetY) { builder.AddFloat(6, conquestMapCenterOffsetY, 0.0f); }
  public static void AddCameraAngle(FlatBufferBuilder builder, float cameraAngle) { builder.AddFloat(7, cameraAngle, 0.0f); }
  public static void AddCameraZoomMax(FlatBufferBuilder builder, float cameraZoomMax) { builder.AddFloat(8, cameraZoomMax, 0.0f); }
  public static void AddCameraZoomMin(FlatBufferBuilder builder, float cameraZoomMin) { builder.AddFloat(9, cameraZoomMin, 0.0f); }
  public static void AddCameraZoomDefault(FlatBufferBuilder builder, float cameraZoomDefault) { builder.AddFloat(10, cameraZoomDefault, 0.0f); }
  public static Offset<Global.ConquestCameraSettingExcel> EndConquestCameraSettingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ConquestCameraSettingExcel>(o);
  }
  public ConquestCameraSettingExcelT UnPack() {
    var _o = new ConquestCameraSettingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConquestCameraSettingExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConquestCameraSetting");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.ConquestMapBoundaryOffsetLeft = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapBoundaryOffsetLeft, key) : this.ConquestMapBoundaryOffsetLeft;
    _o.ConquestMapBoundaryOffsetRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapBoundaryOffsetRight, key) : this.ConquestMapBoundaryOffsetRight;
    _o.ConquestMapBoundaryOffsetTop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapBoundaryOffsetTop, key) : this.ConquestMapBoundaryOffsetTop;
    _o.ConquestMapBoundaryOffsetBottom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapBoundaryOffsetBottom, key) : this.ConquestMapBoundaryOffsetBottom;
    _o.ConquestMapCenterOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapCenterOffsetX, key) : this.ConquestMapCenterOffsetX;
    _o.ConquestMapCenterOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ConquestMapCenterOffsetY, key) : this.ConquestMapCenterOffsetY;
    _o.CameraAngle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraAngle, key) : this.CameraAngle;
    _o.CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMax, key) : this.CameraZoomMax;
    _o.CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMin, key) : this.CameraZoomMin;
    _o.CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomDefault, key) : this.CameraZoomDefault;
  }
  public static Offset<Global.ConquestCameraSettingExcel> Pack(FlatBufferBuilder builder, ConquestCameraSettingExcelT _o) {
    if (_o == null) return default(Offset<Global.ConquestCameraSettingExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConquestCameraSetting");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _ConquestMapBoundaryOffsetLeft = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapBoundaryOffsetLeft, key) : _o.ConquestMapBoundaryOffsetLeft;
		var _ConquestMapBoundaryOffsetRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapBoundaryOffsetRight, key) : _o.ConquestMapBoundaryOffsetRight;
		var _ConquestMapBoundaryOffsetTop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapBoundaryOffsetTop, key) : _o.ConquestMapBoundaryOffsetTop;
		var _ConquestMapBoundaryOffsetBottom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapBoundaryOffsetBottom, key) : _o.ConquestMapBoundaryOffsetBottom;
		var _ConquestMapCenterOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapCenterOffsetX, key) : _o.ConquestMapCenterOffsetX;
		var _ConquestMapCenterOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ConquestMapCenterOffsetY, key) : _o.ConquestMapCenterOffsetY;
		var _CameraAngle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraAngle, key) : _o.CameraAngle;
		var _CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMax, key) : _o.CameraZoomMax;
		var _CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMin, key) : _o.CameraZoomMin;
		var _CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomDefault, key) : _o.CameraZoomDefault;
    return CreateConquestCameraSettingExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _ConquestMapBoundaryOffsetLeft : _o.ConquestMapBoundaryOffsetLeft,
      TableEncryptionService.UseEncryption ? _ConquestMapBoundaryOffsetRight : _o.ConquestMapBoundaryOffsetRight,
      TableEncryptionService.UseEncryption ? _ConquestMapBoundaryOffsetTop : _o.ConquestMapBoundaryOffsetTop,
      TableEncryptionService.UseEncryption ? _ConquestMapBoundaryOffsetBottom : _o.ConquestMapBoundaryOffsetBottom,
      TableEncryptionService.UseEncryption ? _ConquestMapCenterOffsetX : _o.ConquestMapCenterOffsetX,
      TableEncryptionService.UseEncryption ? _ConquestMapCenterOffsetY : _o.ConquestMapCenterOffsetY,
      TableEncryptionService.UseEncryption ? _CameraAngle : _o.CameraAngle,
      TableEncryptionService.UseEncryption ? _CameraZoomMax : _o.CameraZoomMax,
      TableEncryptionService.UseEncryption ? _CameraZoomMin : _o.CameraZoomMin,
      TableEncryptionService.UseEncryption ? _CameraZoomDefault : _o.CameraZoomDefault);
  }
}

public class ConquestCameraSettingExcelT
{
  public long Id { get; set; }
  public float ConquestMapBoundaryOffsetLeft { get; set; }
  public float ConquestMapBoundaryOffsetRight { get; set; }
  public float ConquestMapBoundaryOffsetTop { get; set; }
  public float ConquestMapBoundaryOffsetBottom { get; set; }
  public float ConquestMapCenterOffsetX { get; set; }
  public float ConquestMapCenterOffsetY { get; set; }
  public float CameraAngle { get; set; }
  public float CameraZoomMax { get; set; }
  public float CameraZoomMin { get; set; }
  public float CameraZoomDefault { get; set; }

  public ConquestCameraSettingExcelT() {
    this.Id = 0;
    this.ConquestMapBoundaryOffsetLeft = 0.0f;
    this.ConquestMapBoundaryOffsetRight = 0.0f;
    this.ConquestMapBoundaryOffsetTop = 0.0f;
    this.ConquestMapBoundaryOffsetBottom = 0.0f;
    this.ConquestMapCenterOffsetX = 0.0f;
    this.ConquestMapCenterOffsetY = 0.0f;
    this.CameraAngle = 0.0f;
    this.CameraZoomMax = 0.0f;
    this.CameraZoomMin = 0.0f;
    this.CameraZoomDefault = 0.0f;
  }
}


static public class ConquestCameraSettingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ConquestMapBoundaryOffsetLeft*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ConquestMapBoundaryOffsetRight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ConquestMapBoundaryOffsetTop*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ConquestMapBoundaryOffsetBottom*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ConquestMapCenterOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ConquestMapCenterOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*CameraAngle*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*CameraZoomMax*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*CameraZoomMin*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*CameraZoomDefault*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
