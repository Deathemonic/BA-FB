// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConstKeyMappingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConstKeyMappingExcel GetRootAsConstKeyMappingExcel(ByteBuffer _bb) { return GetRootAsConstKeyMappingExcel(_bb, new ConstKeyMappingExcel()); }
  public static ConstKeyMappingExcel GetRootAsConstKeyMappingExcel(ByteBuffer _bb, ConstKeyMappingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstKeyMappingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float DragSensitivity { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long PcInformationGroupID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float ScrollWheelFactor { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string RemoveKeycodeWord { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRemoveKeycodeWordBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRemoveKeycodeWordBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRemoveKeycodeWordArray() { return __p.__vector_as_array<byte>(10); }
  public string TutorialDialogTouchKey { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTutorialDialogTouchKeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTutorialDialogTouchKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTutorialDialogTouchKeyArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Global.ConstKeyMappingExcel> CreateConstKeyMappingExcel(FlatBufferBuilder builder,
      float DragSensitivity = 0.0f,
      long PcInformationGroupID = 0,
      float ScrollWheelFactor = 0.0f,
      StringOffset RemoveKeycodeWordOffset = default(StringOffset),
      StringOffset TutorialDialogTouchKeyOffset = default(StringOffset)) {
    builder.StartTable(5);
    ConstKeyMappingExcel.AddPcInformationGroupID(builder, PcInformationGroupID);
    ConstKeyMappingExcel.AddTutorialDialogTouchKey(builder, TutorialDialogTouchKeyOffset);
    ConstKeyMappingExcel.AddRemoveKeycodeWord(builder, RemoveKeycodeWordOffset);
    ConstKeyMappingExcel.AddScrollWheelFactor(builder, ScrollWheelFactor);
    ConstKeyMappingExcel.AddDragSensitivity(builder, DragSensitivity);
    return ConstKeyMappingExcel.EndConstKeyMappingExcel(builder);
  }

  public static void StartConstKeyMappingExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddDragSensitivity(FlatBufferBuilder builder, float dragSensitivity) { builder.AddFloat(0, dragSensitivity, 0.0f); }
  public static void AddPcInformationGroupID(FlatBufferBuilder builder, long pcInformationGroupID) { builder.AddLong(1, pcInformationGroupID, 0); }
  public static void AddScrollWheelFactor(FlatBufferBuilder builder, float scrollWheelFactor) { builder.AddFloat(2, scrollWheelFactor, 0.0f); }
  public static void AddRemoveKeycodeWord(FlatBufferBuilder builder, StringOffset removeKeycodeWordOffset) { builder.AddOffset(3, removeKeycodeWordOffset.Value, 0); }
  public static void AddTutorialDialogTouchKey(FlatBufferBuilder builder, StringOffset tutorialDialogTouchKeyOffset) { builder.AddOffset(4, tutorialDialogTouchKeyOffset.Value, 0); }
  public static Offset<Global.ConstKeyMappingExcel> EndConstKeyMappingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ConstKeyMappingExcel>(o);
  }
  public ConstKeyMappingExcelT UnPack() {
    var _o = new ConstKeyMappingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstKeyMappingExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstKeyMapping");
    _o.DragSensitivity = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.DragSensitivity, key) : this.DragSensitivity;
    _o.PcInformationGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PcInformationGroupID, key) : this.PcInformationGroupID;
    _o.ScrollWheelFactor = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.ScrollWheelFactor, key) : this.ScrollWheelFactor;
    _o.RemoveKeycodeWord = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.RemoveKeycodeWord, key) : this.RemoveKeycodeWord;
    _o.TutorialDialogTouchKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TutorialDialogTouchKey, key) : this.TutorialDialogTouchKey;
  }
  public static Offset<Global.ConstKeyMappingExcel> Pack(FlatBufferBuilder builder, ConstKeyMappingExcelT _o) {
    if (_o == null) return default(Offset<Global.ConstKeyMappingExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConstKeyMapping");
		var _DragSensitivity = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.DragSensitivity, key) : _o.DragSensitivity;
		var _PcInformationGroupID = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PcInformationGroupID, key) : _o.PcInformationGroupID;
		var _ScrollWheelFactor = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.ScrollWheelFactor, key) : _o.ScrollWheelFactor;
    var _RemoveKeycodeWord = _o.RemoveKeycodeWord == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.RemoveKeycodeWord, key) : _o.RemoveKeycodeWord));
    var _TutorialDialogTouchKey = _o.TutorialDialogTouchKey == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TutorialDialogTouchKey, key) : _o.TutorialDialogTouchKey));
    return CreateConstKeyMappingExcel(
      builder,
      TableEncryptionService.UseEncryption ? _DragSensitivity : _o.DragSensitivity,
      TableEncryptionService.UseEncryption ? _PcInformationGroupID : _o.PcInformationGroupID,
      TableEncryptionService.UseEncryption ? _ScrollWheelFactor : _o.ScrollWheelFactor,
      _RemoveKeycodeWord,
      _TutorialDialogTouchKey);
  }
}

public class ConstKeyMappingExcelT
{
  public float DragSensitivity { get; set; }
  public long PcInformationGroupID { get; set; }
  public float ScrollWheelFactor { get; set; }
  public string RemoveKeycodeWord { get; set; }
  public string TutorialDialogTouchKey { get; set; }

  public ConstKeyMappingExcelT() {
    this.DragSensitivity = 0.0f;
    this.PcInformationGroupID = 0;
    this.ScrollWheelFactor = 0.0f;
    this.RemoveKeycodeWord = null;
    this.TutorialDialogTouchKey = null;
  }
}


static public class ConstKeyMappingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*DragSensitivity*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*PcInformationGroupID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ScrollWheelFactor*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*RemoveKeycodeWord*/, false)
      && verifier.VerifyString(tablePos, 12 /*TutorialDialogTouchKey*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
