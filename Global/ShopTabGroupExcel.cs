// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ShopTabGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ShopTabGroupExcel GetRootAsShopTabGroupExcel(ByteBuffer _bb) { return GetRootAsShopTabGroupExcel(_bb, new ShopTabGroupExcel()); }
  public static ShopTabGroupExcel GetRootAsShopTabGroupExcel(ByteBuffer _bb, ShopTabGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShopTabGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ShopGroupType ShopGroupType { get { int o = __p.__offset(6); return o != 0 ? (Global.ShopGroupType)__p.bb.GetInt(o + __p.bb_pos) : Global.ShopGroupType.None; } }
  public int DisplayOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Global.ShopCategoryType ShopCategoryTypes(int j) { int o = __p.__offset(10); return o != 0 ? (Global.ShopCategoryType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ShopCategoryType)0; }
  public int ShopCategoryTypesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ShopCategoryType> GetShopCategoryTypesBytes() { return __p.__vector_as_span<Global.ShopCategoryType>(10, 4); }
#else
  public ArraySegment<byte>? GetShopCategoryTypesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public Global.ShopCategoryType[] GetShopCategoryTypesArray() { int o = __p.__offset(10); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ShopCategoryType[] a = new Global.ShopCategoryType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ShopCategoryType)__p.bb.GetInt(p + i * 4); } return a; }

  public static Offset<Global.ShopTabGroupExcel> CreateShopTabGroupExcel(FlatBufferBuilder builder,
      long Id = 0,
      Global.ShopGroupType ShopGroupType = Global.ShopGroupType.None,
      int DisplayOrder = 0,
      VectorOffset ShopCategoryTypesOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ShopTabGroupExcel.AddId(builder, Id);
    ShopTabGroupExcel.AddShopCategoryTypes(builder, ShopCategoryTypesOffset);
    ShopTabGroupExcel.AddDisplayOrder(builder, DisplayOrder);
    ShopTabGroupExcel.AddShopGroupType(builder, ShopGroupType);
    return ShopTabGroupExcel.EndShopTabGroupExcel(builder);
  }

  public static void StartShopTabGroupExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddShopGroupType(FlatBufferBuilder builder, Global.ShopGroupType shopGroupType) { builder.AddInt(1, (int)shopGroupType, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, int displayOrder) { builder.AddInt(2, displayOrder, 0); }
  public static void AddShopCategoryTypes(FlatBufferBuilder builder, VectorOffset shopCategoryTypesOffset) { builder.AddOffset(3, shopCategoryTypesOffset.Value, 0); }
  public static VectorOffset CreateShopCategoryTypesVector(FlatBufferBuilder builder, Global.ShopCategoryType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShopCategoryTypesVectorBlock(FlatBufferBuilder builder, Global.ShopCategoryType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShopCategoryTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ShopCategoryType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShopCategoryTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ShopCategoryType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShopCategoryTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.ShopTabGroupExcel> EndShopTabGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ShopTabGroupExcel>(o);
  }
  public ShopTabGroupExcelT UnPack() {
    var _o = new ShopTabGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShopTabGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ShopTabGroup");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.ShopGroupType = TableEncryptionService.UseEncryption ? (Global.ShopGroupType)TableEncryptionService.Convert((int)this.ShopGroupType, key) : this.ShopGroupType;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.DisplayOrder, key) : this.DisplayOrder;
    _o.ShopCategoryTypes = new List<Global.ShopCategoryType>();
    for (var _j = 0; _j < this.ShopCategoryTypesLength; ++_j) {_o.ShopCategoryTypes.Add(TableEncryptionService.UseEncryption ? (Global.ShopCategoryType)TableEncryptionService.Convert((int)this.ShopCategoryTypes(_j), key) : this.ShopCategoryTypes(_j));}
  }
  public static Offset<Global.ShopTabGroupExcel> Pack(FlatBufferBuilder builder, ShopTabGroupExcelT _o) {
    if (_o == null) return default(Offset<Global.ShopTabGroupExcel>);
		byte[] key = TableEncryptionService.CreateKey("ShopTabGroup");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _ShopGroupType = TableEncryptionService.UseEncryption ? (Global.ShopGroupType)TableEncryptionService.Convert((int)_o.ShopGroupType, key) : _o.ShopGroupType;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.DisplayOrder, key) : _o.DisplayOrder;
    var _ShopCategoryTypes = default(VectorOffset);
    if (_o.ShopCategoryTypes != null) {
      var __ShopCategoryTypes = _o.ShopCategoryTypes.Select(x => TableEncryptionService.UseEncryption ? (Global.ShopCategoryType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _ShopCategoryTypes = CreateShopCategoryTypesVector(builder, __ShopCategoryTypes);
    }
    return CreateShopTabGroupExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _ShopGroupType : _o.ShopGroupType,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      _ShopCategoryTypes);
  }
}

public class ShopTabGroupExcelT
{
  public long Id { get; set; }
  public Global.ShopGroupType ShopGroupType { get; set; }
  public int DisplayOrder { get; set; }
  public List<Global.ShopCategoryType> ShopCategoryTypes { get; set; }

  public ShopTabGroupExcelT() {
    this.Id = 0;
    this.ShopGroupType = Global.ShopGroupType.None;
    this.DisplayOrder = 0;
    this.ShopCategoryTypes = null;
  }
}


static public class ShopTabGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ShopGroupType*/, 4 /*Global.ShopGroupType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DisplayOrder*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*ShopCategoryTypes*/, 4 /*Global.ShopCategoryType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
