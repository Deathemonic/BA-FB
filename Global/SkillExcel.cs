// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct SkillExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillExcel GetRootAsSkillExcel(ByteBuffer _bb) { return GetRootAsSkillExcel(_bb, new SkillExcel()); }
  public static SkillExcel GetRootAsSkillExcel(ByteBuffer _bb, SkillExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeSkillId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGroupIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGroupIdArray() { return __p.__vector_as_array<byte>(8); }
  public string SkillDataKey { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillDataKeyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSkillDataKeyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSkillDataKeyArray() { return __p.__vector_as_array<byte>(10); }
  public string VisualDataKey { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVisualDataKeyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetVisualDataKeyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetVisualDataKeyArray() { return __p.__vector_as_array<byte>(12); }
  public int Level { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillCost { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtraSkillCost { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnemySkillCost { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtraEnemySkillCost { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NPCSkillCost { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExtraNPCSkillCost { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Global.BulletType BulletType { get { int o = __p.__offset(28); return o != 0 ? (Global.BulletType)__p.bb.GetInt(o + __p.bb_pos) : Global.BulletType.Normal; } }
  public int StartCoolTime { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CoolTime { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnemyStartCoolTime { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnemyCoolTime { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NPCStartCoolTime { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NPCCoolTime { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UseAtg { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RequireCharacterLevel { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long RequireLevelUpMaterial { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string IconName { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconNameBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetIconNameBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetIconNameArray() { return __p.__vector_as_array<byte>(48); }
  public bool IsShowInfo { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowSpeechbubble { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int PublicSpeechDuration { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long AdditionalToolTipId { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SelectExSkillToolTipId { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string TextureSkillCardForFormConversion { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextureSkillCardForFormConversionBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetTextureSkillCardForFormConversionBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetTextureSkillCardForFormConversionArray() { return __p.__vector_as_array<byte>(60); }
  public string SkillCardLabelPath { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillCardLabelPathBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetSkillCardLabelPathBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetSkillCardLabelPathArray() { return __p.__vector_as_array<byte>(62); }

  public static Offset<Global.SkillExcel> CreateSkillExcel(FlatBufferBuilder builder,
      long Id = 0,
      uint LocalizeSkillId = 0,
      StringOffset GroupIdOffset = default(StringOffset),
      StringOffset SkillDataKeyOffset = default(StringOffset),
      StringOffset VisualDataKeyOffset = default(StringOffset),
      int Level = 0,
      int SkillCost = 0,
      int ExtraSkillCost = 0,
      int EnemySkillCost = 0,
      int ExtraEnemySkillCost = 0,
      int NPCSkillCost = 0,
      int ExtraNPCSkillCost = 0,
      Global.BulletType BulletType = Global.BulletType.Normal,
      int StartCoolTime = 0,
      int CoolTime = 0,
      int EnemyStartCoolTime = 0,
      int EnemyCoolTime = 0,
      int NPCStartCoolTime = 0,
      int NPCCoolTime = 0,
      int UseAtg = 0,
      int RequireCharacterLevel = 0,
      long RequireLevelUpMaterial = 0,
      StringOffset IconNameOffset = default(StringOffset),
      bool IsShowInfo = false,
      bool IsShowSpeechbubble = false,
      int PublicSpeechDuration = 0,
      long AdditionalToolTipId = 0,
      long SelectExSkillToolTipId = 0,
      StringOffset TextureSkillCardForFormConversionOffset = default(StringOffset),
      StringOffset SkillCardLabelPathOffset = default(StringOffset)) {
    builder.StartTable(30);
    SkillExcel.AddSelectExSkillToolTipId(builder, SelectExSkillToolTipId);
    SkillExcel.AddAdditionalToolTipId(builder, AdditionalToolTipId);
    SkillExcel.AddRequireLevelUpMaterial(builder, RequireLevelUpMaterial);
    SkillExcel.AddId(builder, Id);
    SkillExcel.AddSkillCardLabelPath(builder, SkillCardLabelPathOffset);
    SkillExcel.AddTextureSkillCardForFormConversion(builder, TextureSkillCardForFormConversionOffset);
    SkillExcel.AddPublicSpeechDuration(builder, PublicSpeechDuration);
    SkillExcel.AddIconName(builder, IconNameOffset);
    SkillExcel.AddRequireCharacterLevel(builder, RequireCharacterLevel);
    SkillExcel.AddUseAtg(builder, UseAtg);
    SkillExcel.AddNPCCoolTime(builder, NPCCoolTime);
    SkillExcel.AddNPCStartCoolTime(builder, NPCStartCoolTime);
    SkillExcel.AddEnemyCoolTime(builder, EnemyCoolTime);
    SkillExcel.AddEnemyStartCoolTime(builder, EnemyStartCoolTime);
    SkillExcel.AddCoolTime(builder, CoolTime);
    SkillExcel.AddStartCoolTime(builder, StartCoolTime);
    SkillExcel.AddBulletType(builder, BulletType);
    SkillExcel.AddExtraNPCSkillCost(builder, ExtraNPCSkillCost);
    SkillExcel.AddNPCSkillCost(builder, NPCSkillCost);
    SkillExcel.AddExtraEnemySkillCost(builder, ExtraEnemySkillCost);
    SkillExcel.AddEnemySkillCost(builder, EnemySkillCost);
    SkillExcel.AddExtraSkillCost(builder, ExtraSkillCost);
    SkillExcel.AddSkillCost(builder, SkillCost);
    SkillExcel.AddLevel(builder, Level);
    SkillExcel.AddVisualDataKey(builder, VisualDataKeyOffset);
    SkillExcel.AddSkillDataKey(builder, SkillDataKeyOffset);
    SkillExcel.AddGroupId(builder, GroupIdOffset);
    SkillExcel.AddLocalizeSkillId(builder, LocalizeSkillId);
    SkillExcel.AddIsShowSpeechbubble(builder, IsShowSpeechbubble);
    SkillExcel.AddIsShowInfo(builder, IsShowInfo);
    return SkillExcel.EndSkillExcel(builder);
  }

  public static void StartSkillExcel(FlatBufferBuilder builder) { builder.StartTable(30); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddLocalizeSkillId(FlatBufferBuilder builder, uint localizeSkillId) { builder.AddUint(1, localizeSkillId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, StringOffset groupIdOffset) { builder.AddOffset(2, groupIdOffset.Value, 0); }
  public static void AddSkillDataKey(FlatBufferBuilder builder, StringOffset skillDataKeyOffset) { builder.AddOffset(3, skillDataKeyOffset.Value, 0); }
  public static void AddVisualDataKey(FlatBufferBuilder builder, StringOffset visualDataKeyOffset) { builder.AddOffset(4, visualDataKeyOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(5, level, 0); }
  public static void AddSkillCost(FlatBufferBuilder builder, int skillCost) { builder.AddInt(6, skillCost, 0); }
  public static void AddExtraSkillCost(FlatBufferBuilder builder, int extraSkillCost) { builder.AddInt(7, extraSkillCost, 0); }
  public static void AddEnemySkillCost(FlatBufferBuilder builder, int enemySkillCost) { builder.AddInt(8, enemySkillCost, 0); }
  public static void AddExtraEnemySkillCost(FlatBufferBuilder builder, int extraEnemySkillCost) { builder.AddInt(9, extraEnemySkillCost, 0); }
  public static void AddNPCSkillCost(FlatBufferBuilder builder, int nPCSkillCost) { builder.AddInt(10, nPCSkillCost, 0); }
  public static void AddExtraNPCSkillCost(FlatBufferBuilder builder, int extraNPCSkillCost) { builder.AddInt(11, extraNPCSkillCost, 0); }
  public static void AddBulletType(FlatBufferBuilder builder, Global.BulletType bulletType) { builder.AddInt(12, (int)bulletType, 0); }
  public static void AddStartCoolTime(FlatBufferBuilder builder, int startCoolTime) { builder.AddInt(13, startCoolTime, 0); }
  public static void AddCoolTime(FlatBufferBuilder builder, int coolTime) { builder.AddInt(14, coolTime, 0); }
  public static void AddEnemyStartCoolTime(FlatBufferBuilder builder, int enemyStartCoolTime) { builder.AddInt(15, enemyStartCoolTime, 0); }
  public static void AddEnemyCoolTime(FlatBufferBuilder builder, int enemyCoolTime) { builder.AddInt(16, enemyCoolTime, 0); }
  public static void AddNPCStartCoolTime(FlatBufferBuilder builder, int nPCStartCoolTime) { builder.AddInt(17, nPCStartCoolTime, 0); }
  public static void AddNPCCoolTime(FlatBufferBuilder builder, int nPCCoolTime) { builder.AddInt(18, nPCCoolTime, 0); }
  public static void AddUseAtg(FlatBufferBuilder builder, int useAtg) { builder.AddInt(19, useAtg, 0); }
  public static void AddRequireCharacterLevel(FlatBufferBuilder builder, int requireCharacterLevel) { builder.AddInt(20, requireCharacterLevel, 0); }
  public static void AddRequireLevelUpMaterial(FlatBufferBuilder builder, long requireLevelUpMaterial) { builder.AddLong(21, requireLevelUpMaterial, 0); }
  public static void AddIconName(FlatBufferBuilder builder, StringOffset iconNameOffset) { builder.AddOffset(22, iconNameOffset.Value, 0); }
  public static void AddIsShowInfo(FlatBufferBuilder builder, bool isShowInfo) { builder.AddBool(23, isShowInfo, false); }
  public static void AddIsShowSpeechbubble(FlatBufferBuilder builder, bool isShowSpeechbubble) { builder.AddBool(24, isShowSpeechbubble, false); }
  public static void AddPublicSpeechDuration(FlatBufferBuilder builder, int publicSpeechDuration) { builder.AddInt(25, publicSpeechDuration, 0); }
  public static void AddAdditionalToolTipId(FlatBufferBuilder builder, long additionalToolTipId) { builder.AddLong(26, additionalToolTipId, 0); }
  public static void AddSelectExSkillToolTipId(FlatBufferBuilder builder, long selectExSkillToolTipId) { builder.AddLong(27, selectExSkillToolTipId, 0); }
  public static void AddTextureSkillCardForFormConversion(FlatBufferBuilder builder, StringOffset textureSkillCardForFormConversionOffset) { builder.AddOffset(28, textureSkillCardForFormConversionOffset.Value, 0); }
  public static void AddSkillCardLabelPath(FlatBufferBuilder builder, StringOffset skillCardLabelPathOffset) { builder.AddOffset(29, skillCardLabelPathOffset.Value, 0); }
  public static Offset<Global.SkillExcel> EndSkillExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.SkillExcel>(o);
  }
  public SkillExcelT UnPack() {
    var _o = new SkillExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Skill");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.LocalizeSkillId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeSkillId, key) : this.LocalizeSkillId;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.GroupId, key) : this.GroupId;
    _o.SkillDataKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SkillDataKey, key) : this.SkillDataKey;
    _o.VisualDataKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.VisualDataKey, key) : this.VisualDataKey;
    _o.Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Level, key) : this.Level;
    _o.SkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.SkillCost, key) : this.SkillCost;
    _o.ExtraSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ExtraSkillCost, key) : this.ExtraSkillCost;
    _o.EnemySkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EnemySkillCost, key) : this.EnemySkillCost;
    _o.ExtraEnemySkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ExtraEnemySkillCost, key) : this.ExtraEnemySkillCost;
    _o.NPCSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.NPCSkillCost, key) : this.NPCSkillCost;
    _o.ExtraNPCSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ExtraNPCSkillCost, key) : this.ExtraNPCSkillCost;
    _o.BulletType = TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)this.BulletType, key) : this.BulletType;
    _o.StartCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StartCoolTime, key) : this.StartCoolTime;
    _o.CoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CoolTime, key) : this.CoolTime;
    _o.EnemyStartCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EnemyStartCoolTime, key) : this.EnemyStartCoolTime;
    _o.EnemyCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EnemyCoolTime, key) : this.EnemyCoolTime;
    _o.NPCStartCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.NPCStartCoolTime, key) : this.NPCStartCoolTime;
    _o.NPCCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.NPCCoolTime, key) : this.NPCCoolTime;
    _o.UseAtg = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.UseAtg, key) : this.UseAtg;
    _o.RequireCharacterLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RequireCharacterLevel, key) : this.RequireCharacterLevel;
    _o.RequireLevelUpMaterial = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RequireLevelUpMaterial, key) : this.RequireLevelUpMaterial;
    _o.IconName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.IconName, key) : this.IconName;
    _o.IsShowInfo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsShowInfo, key) : this.IsShowInfo;
    _o.IsShowSpeechbubble = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsShowSpeechbubble, key) : this.IsShowSpeechbubble;
    _o.PublicSpeechDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.PublicSpeechDuration, key) : this.PublicSpeechDuration;
    _o.AdditionalToolTipId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.AdditionalToolTipId, key) : this.AdditionalToolTipId;
    _o.SelectExSkillToolTipId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SelectExSkillToolTipId, key) : this.SelectExSkillToolTipId;
    _o.TextureSkillCardForFormConversion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TextureSkillCardForFormConversion, key) : this.TextureSkillCardForFormConversion;
    _o.SkillCardLabelPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SkillCardLabelPath, key) : this.SkillCardLabelPath;
  }
  public static Offset<Global.SkillExcel> Pack(FlatBufferBuilder builder, SkillExcelT _o) {
    if (_o == null) return default(Offset<Global.SkillExcel>);
		byte[] key = TableEncryptionService.CreateKey("Skill");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _LocalizeSkillId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeSkillId, key) : _o.LocalizeSkillId;
    var _GroupId = _o.GroupId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.GroupId, key) : _o.GroupId));
    var _SkillDataKey = _o.SkillDataKey == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SkillDataKey, key) : _o.SkillDataKey));
    var _VisualDataKey = _o.VisualDataKey == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.VisualDataKey, key) : _o.VisualDataKey));
		var _Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Level, key) : _o.Level;
		var _SkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.SkillCost, key) : _o.SkillCost;
		var _ExtraSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ExtraSkillCost, key) : _o.ExtraSkillCost;
		var _EnemySkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EnemySkillCost, key) : _o.EnemySkillCost;
		var _ExtraEnemySkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ExtraEnemySkillCost, key) : _o.ExtraEnemySkillCost;
		var _NPCSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.NPCSkillCost, key) : _o.NPCSkillCost;
		var _ExtraNPCSkillCost = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ExtraNPCSkillCost, key) : _o.ExtraNPCSkillCost;
		var _BulletType = TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)_o.BulletType, key) : _o.BulletType;
		var _StartCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StartCoolTime, key) : _o.StartCoolTime;
		var _CoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CoolTime, key) : _o.CoolTime;
		var _EnemyStartCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EnemyStartCoolTime, key) : _o.EnemyStartCoolTime;
		var _EnemyCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EnemyCoolTime, key) : _o.EnemyCoolTime;
		var _NPCStartCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.NPCStartCoolTime, key) : _o.NPCStartCoolTime;
		var _NPCCoolTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.NPCCoolTime, key) : _o.NPCCoolTime;
		var _UseAtg = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.UseAtg, key) : _o.UseAtg;
		var _RequireCharacterLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RequireCharacterLevel, key) : _o.RequireCharacterLevel;
		var _RequireLevelUpMaterial = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RequireLevelUpMaterial, key) : _o.RequireLevelUpMaterial;
    var _IconName = _o.IconName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.IconName, key) : _o.IconName));
		var _IsShowInfo = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsShowInfo, key) : _o.IsShowInfo;
		var _IsShowSpeechbubble = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsShowSpeechbubble, key) : _o.IsShowSpeechbubble;
		var _PublicSpeechDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.PublicSpeechDuration, key) : _o.PublicSpeechDuration;
		var _AdditionalToolTipId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.AdditionalToolTipId, key) : _o.AdditionalToolTipId;
		var _SelectExSkillToolTipId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SelectExSkillToolTipId, key) : _o.SelectExSkillToolTipId;
    var _TextureSkillCardForFormConversion = _o.TextureSkillCardForFormConversion == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TextureSkillCardForFormConversion, key) : _o.TextureSkillCardForFormConversion));
    var _SkillCardLabelPath = _o.SkillCardLabelPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SkillCardLabelPath, key) : _o.SkillCardLabelPath));
    return CreateSkillExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _LocalizeSkillId : _o.LocalizeSkillId,
      _GroupId,
      _SkillDataKey,
      _VisualDataKey,
      TableEncryptionService.UseEncryption ? _Level : _o.Level,
      TableEncryptionService.UseEncryption ? _SkillCost : _o.SkillCost,
      TableEncryptionService.UseEncryption ? _ExtraSkillCost : _o.ExtraSkillCost,
      TableEncryptionService.UseEncryption ? _EnemySkillCost : _o.EnemySkillCost,
      TableEncryptionService.UseEncryption ? _ExtraEnemySkillCost : _o.ExtraEnemySkillCost,
      TableEncryptionService.UseEncryption ? _NPCSkillCost : _o.NPCSkillCost,
      TableEncryptionService.UseEncryption ? _ExtraNPCSkillCost : _o.ExtraNPCSkillCost,
      TableEncryptionService.UseEncryption ? _BulletType : _o.BulletType,
      TableEncryptionService.UseEncryption ? _StartCoolTime : _o.StartCoolTime,
      TableEncryptionService.UseEncryption ? _CoolTime : _o.CoolTime,
      TableEncryptionService.UseEncryption ? _EnemyStartCoolTime : _o.EnemyStartCoolTime,
      TableEncryptionService.UseEncryption ? _EnemyCoolTime : _o.EnemyCoolTime,
      TableEncryptionService.UseEncryption ? _NPCStartCoolTime : _o.NPCStartCoolTime,
      TableEncryptionService.UseEncryption ? _NPCCoolTime : _o.NPCCoolTime,
      TableEncryptionService.UseEncryption ? _UseAtg : _o.UseAtg,
      TableEncryptionService.UseEncryption ? _RequireCharacterLevel : _o.RequireCharacterLevel,
      TableEncryptionService.UseEncryption ? _RequireLevelUpMaterial : _o.RequireLevelUpMaterial,
      _IconName,
      TableEncryptionService.UseEncryption ? _IsShowInfo : _o.IsShowInfo,
      TableEncryptionService.UseEncryption ? _IsShowSpeechbubble : _o.IsShowSpeechbubble,
      TableEncryptionService.UseEncryption ? _PublicSpeechDuration : _o.PublicSpeechDuration,
      TableEncryptionService.UseEncryption ? _AdditionalToolTipId : _o.AdditionalToolTipId,
      TableEncryptionService.UseEncryption ? _SelectExSkillToolTipId : _o.SelectExSkillToolTipId,
      _TextureSkillCardForFormConversion,
      _SkillCardLabelPath);
  }
}

public class SkillExcelT
{
  public long Id { get; set; }
  public uint LocalizeSkillId { get; set; }
  public string GroupId { get; set; }
  public string SkillDataKey { get; set; }
  public string VisualDataKey { get; set; }
  public int Level { get; set; }
  public int SkillCost { get; set; }
  public int ExtraSkillCost { get; set; }
  public int EnemySkillCost { get; set; }
  public int ExtraEnemySkillCost { get; set; }
  public int NPCSkillCost { get; set; }
  public int ExtraNPCSkillCost { get; set; }
  public Global.BulletType BulletType { get; set; }
  public int StartCoolTime { get; set; }
  public int CoolTime { get; set; }
  public int EnemyStartCoolTime { get; set; }
  public int EnemyCoolTime { get; set; }
  public int NPCStartCoolTime { get; set; }
  public int NPCCoolTime { get; set; }
  public int UseAtg { get; set; }
  public int RequireCharacterLevel { get; set; }
  public long RequireLevelUpMaterial { get; set; }
  public string IconName { get; set; }
  public bool IsShowInfo { get; set; }
  public bool IsShowSpeechbubble { get; set; }
  public int PublicSpeechDuration { get; set; }
  public long AdditionalToolTipId { get; set; }
  public long SelectExSkillToolTipId { get; set; }
  public string TextureSkillCardForFormConversion { get; set; }
  public string SkillCardLabelPath { get; set; }

  public SkillExcelT() {
    this.Id = 0;
    this.LocalizeSkillId = 0;
    this.GroupId = null;
    this.SkillDataKey = null;
    this.VisualDataKey = null;
    this.Level = 0;
    this.SkillCost = 0;
    this.ExtraSkillCost = 0;
    this.EnemySkillCost = 0;
    this.ExtraEnemySkillCost = 0;
    this.NPCSkillCost = 0;
    this.ExtraNPCSkillCost = 0;
    this.BulletType = Global.BulletType.Normal;
    this.StartCoolTime = 0;
    this.CoolTime = 0;
    this.EnemyStartCoolTime = 0;
    this.EnemyCoolTime = 0;
    this.NPCStartCoolTime = 0;
    this.NPCCoolTime = 0;
    this.UseAtg = 0;
    this.RequireCharacterLevel = 0;
    this.RequireLevelUpMaterial = 0;
    this.IconName = null;
    this.IsShowInfo = false;
    this.IsShowSpeechbubble = false;
    this.PublicSpeechDuration = 0;
    this.AdditionalToolTipId = 0;
    this.SelectExSkillToolTipId = 0;
    this.TextureSkillCardForFormConversion = null;
    this.SkillCardLabelPath = null;
  }
}


static public class SkillExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*LocalizeSkillId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*GroupId*/, false)
      && verifier.VerifyString(tablePos, 10 /*SkillDataKey*/, false)
      && verifier.VerifyString(tablePos, 12 /*VisualDataKey*/, false)
      && verifier.VerifyField(tablePos, 14 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*SkillCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ExtraSkillCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*EnemySkillCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*ExtraEnemySkillCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*NPCSkillCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*ExtraNPCSkillCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*BulletType*/, 4 /*Global.BulletType*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*StartCoolTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*CoolTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*EnemyStartCoolTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*EnemyCoolTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*NPCStartCoolTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*NPCCoolTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*UseAtg*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*RequireCharacterLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*RequireLevelUpMaterial*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 48 /*IconName*/, false)
      && verifier.VerifyField(tablePos, 50 /*IsShowInfo*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 52 /*IsShowSpeechbubble*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 54 /*PublicSpeechDuration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*AdditionalToolTipId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*SelectExSkillToolTipId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 60 /*TextureSkillCardForFormConversion*/, false)
      && verifier.VerifyString(tablePos, 62 /*SkillCardLabelPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
