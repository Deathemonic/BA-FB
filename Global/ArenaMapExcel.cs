// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ArenaMapExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ArenaMapExcel GetRootAsArenaMapExcel(ByteBuffer _bb) { return GetRootAsArenaMapExcel(_bb, new ArenaMapExcel()); }
  public static ArenaMapExcel GetRootAsArenaMapExcel(ByteBuffer _bb, ArenaMapExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ArenaMapExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TerrainType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string TerrainTypeLocalizeKey { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTerrainTypeLocalizeKeyBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTerrainTypeLocalizeKeyBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTerrainTypeLocalizeKeyArray() { return __p.__vector_as_array<byte>(8); }
  public string ImagePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetImagePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetImagePathArray() { return __p.__vector_as_array<byte>(10); }
  public long GroundGroupId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GroundGroupNameLocalizeKey { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundGroupNameLocalizeKeyBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetGroundGroupNameLocalizeKeyBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetGroundGroupNameLocalizeKeyArray() { return __p.__vector_as_array<byte>(14); }
  public long StartRank { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EndRank { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroundId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.ArenaMapExcel> CreateArenaMapExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long TerrainType = 0,
      StringOffset TerrainTypeLocalizeKeyOffset = default(StringOffset),
      StringOffset ImagePathOffset = default(StringOffset),
      long GroundGroupId = 0,
      StringOffset GroundGroupNameLocalizeKeyOffset = default(StringOffset),
      long StartRank = 0,
      long EndRank = 0,
      long GroundId = 0) {
    builder.StartTable(9);
    ArenaMapExcel.AddGroundId(builder, GroundId);
    ArenaMapExcel.AddEndRank(builder, EndRank);
    ArenaMapExcel.AddStartRank(builder, StartRank);
    ArenaMapExcel.AddGroundGroupId(builder, GroundGroupId);
    ArenaMapExcel.AddTerrainType(builder, TerrainType);
    ArenaMapExcel.AddUniqueId(builder, UniqueId);
    ArenaMapExcel.AddGroundGroupNameLocalizeKey(builder, GroundGroupNameLocalizeKeyOffset);
    ArenaMapExcel.AddImagePath(builder, ImagePathOffset);
    ArenaMapExcel.AddTerrainTypeLocalizeKey(builder, TerrainTypeLocalizeKeyOffset);
    return ArenaMapExcel.EndArenaMapExcel(builder);
  }

  public static void StartArenaMapExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddTerrainType(FlatBufferBuilder builder, long terrainType) { builder.AddLong(1, terrainType, 0); }
  public static void AddTerrainTypeLocalizeKey(FlatBufferBuilder builder, StringOffset terrainTypeLocalizeKeyOffset) { builder.AddOffset(2, terrainTypeLocalizeKeyOffset.Value, 0); }
  public static void AddImagePath(FlatBufferBuilder builder, StringOffset imagePathOffset) { builder.AddOffset(3, imagePathOffset.Value, 0); }
  public static void AddGroundGroupId(FlatBufferBuilder builder, long groundGroupId) { builder.AddLong(4, groundGroupId, 0); }
  public static void AddGroundGroupNameLocalizeKey(FlatBufferBuilder builder, StringOffset groundGroupNameLocalizeKeyOffset) { builder.AddOffset(5, groundGroupNameLocalizeKeyOffset.Value, 0); }
  public static void AddStartRank(FlatBufferBuilder builder, long startRank) { builder.AddLong(6, startRank, 0); }
  public static void AddEndRank(FlatBufferBuilder builder, long endRank) { builder.AddLong(7, endRank, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(8, groundId, 0); }
  public static Offset<Global.ArenaMapExcel> EndArenaMapExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ArenaMapExcel>(o);
  }
  public ArenaMapExcelT UnPack() {
    var _o = new ArenaMapExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ArenaMapExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ArenaMap");
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.TerrainType = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TerrainType, key) : this.TerrainType;
    _o.TerrainTypeLocalizeKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.TerrainTypeLocalizeKey, key) : this.TerrainTypeLocalizeKey;
    _o.ImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePath, key) : this.ImagePath;
    _o.GroundGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundGroupId, key) : this.GroundGroupId;
    _o.GroundGroupNameLocalizeKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.GroundGroupNameLocalizeKey, key) : this.GroundGroupNameLocalizeKey;
    _o.StartRank = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StartRank, key) : this.StartRank;
    _o.EndRank = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EndRank, key) : this.EndRank;
    _o.GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundId, key) : this.GroundId;
  }
  public static Offset<Global.ArenaMapExcel> Pack(FlatBufferBuilder builder, ArenaMapExcelT _o) {
    if (_o == null) return default(Offset<Global.ArenaMapExcel>);
		byte[] key = TableEncryptionService.CreateKey("ArenaMap");
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _TerrainType = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TerrainType, key) : _o.TerrainType;
    var _TerrainTypeLocalizeKey = _o.TerrainTypeLocalizeKey == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.TerrainTypeLocalizeKey, key) : _o.TerrainTypeLocalizeKey));
    var _ImagePath = _o.ImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePath, key) : _o.ImagePath));
		var _GroundGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundGroupId, key) : _o.GroundGroupId;
    var _GroundGroupNameLocalizeKey = _o.GroundGroupNameLocalizeKey == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.GroundGroupNameLocalizeKey, key) : _o.GroundGroupNameLocalizeKey));
		var _StartRank = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StartRank, key) : _o.StartRank;
		var _EndRank = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EndRank, key) : _o.EndRank;
		var _GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundId, key) : _o.GroundId;
    return CreateArenaMapExcel(
      builder,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _TerrainType : _o.TerrainType,
      _TerrainTypeLocalizeKey,
      _ImagePath,
      TableEncryptionService.UseEncryption ? _GroundGroupId : _o.GroundGroupId,
      _GroundGroupNameLocalizeKey,
      TableEncryptionService.UseEncryption ? _StartRank : _o.StartRank,
      TableEncryptionService.UseEncryption ? _EndRank : _o.EndRank,
      TableEncryptionService.UseEncryption ? _GroundId : _o.GroundId);
  }
}

public class ArenaMapExcelT
{
  public long UniqueId { get; set; }
  public long TerrainType { get; set; }
  public string TerrainTypeLocalizeKey { get; set; }
  public string ImagePath { get; set; }
  public long GroundGroupId { get; set; }
  public string GroundGroupNameLocalizeKey { get; set; }
  public long StartRank { get; set; }
  public long EndRank { get; set; }
  public long GroundId { get; set; }

  public ArenaMapExcelT() {
    this.UniqueId = 0;
    this.TerrainType = 0;
    this.TerrainTypeLocalizeKey = null;
    this.ImagePath = null;
    this.GroundGroupId = 0;
    this.GroundGroupNameLocalizeKey = null;
    this.StartRank = 0;
    this.EndRank = 0;
    this.GroundId = 0;
  }
}


static public class ArenaMapExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TerrainType*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*TerrainTypeLocalizeKey*/, false)
      && verifier.VerifyString(tablePos, 10 /*ImagePath*/, false)
      && verifier.VerifyField(tablePos, 12 /*GroundGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 14 /*GroundGroupNameLocalizeKey*/, false)
      && verifier.VerifyField(tablePos, 16 /*StartRank*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*EndRank*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
