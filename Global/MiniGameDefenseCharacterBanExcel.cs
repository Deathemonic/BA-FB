// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDefenseCharacterBanExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameDefenseCharacterBanExcel GetRootAsMiniGameDefenseCharacterBanExcel(ByteBuffer _bb) { return GetRootAsMiniGameDefenseCharacterBanExcel(_bb, new MiniGameDefenseCharacterBanExcel()); }
  public static MiniGameDefenseCharacterBanExcel GetRootAsMiniGameDefenseCharacterBanExcel(ByteBuffer _bb, MiniGameDefenseCharacterBanExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDefenseCharacterBanExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.MiniGameDefenseCharacterBanExcel> CreateMiniGameDefenseCharacterBanExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long CharacterId = 0) {
    builder.StartTable(2);
    MiniGameDefenseCharacterBanExcel.AddCharacterId(builder, CharacterId);
    MiniGameDefenseCharacterBanExcel.AddEventContentId(builder, EventContentId);
    return MiniGameDefenseCharacterBanExcel.EndMiniGameDefenseCharacterBanExcel(builder);
  }

  public static void StartMiniGameDefenseCharacterBanExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(1, characterId, 0); }
  public static Offset<Global.MiniGameDefenseCharacterBanExcel> EndMiniGameDefenseCharacterBanExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MiniGameDefenseCharacterBanExcel>(o);
  }
  public MiniGameDefenseCharacterBanExcelT UnPack() {
    var _o = new MiniGameDefenseCharacterBanExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDefenseCharacterBanExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDefenseCharacterBan");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterId, key) : this.CharacterId;
  }
  public static Offset<Global.MiniGameDefenseCharacterBanExcel> Pack(FlatBufferBuilder builder, MiniGameDefenseCharacterBanExcelT _o) {
    if (_o == null) return default(Offset<Global.MiniGameDefenseCharacterBanExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameDefenseCharacterBan");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterId, key) : _o.CharacterId;
    return CreateMiniGameDefenseCharacterBanExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _CharacterId : _o.CharacterId);
  }
}

public class MiniGameDefenseCharacterBanExcelT
{
  public long EventContentId { get; set; }
  public long CharacterId { get; set; }

  public MiniGameDefenseCharacterBanExcelT() {
    this.EventContentId = 0;
    this.CharacterId = 0;
  }
}


static public class MiniGameDefenseCharacterBanExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
