// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct DefaultFurnitureExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DefaultFurnitureExcel GetRootAsDefaultFurnitureExcel(ByteBuffer _bb) { return GetRootAsDefaultFurnitureExcel(_bb, new DefaultFurnitureExcel()); }
  public static DefaultFurnitureExcel GetRootAsDefaultFurnitureExcel(ByteBuffer _bb, DefaultFurnitureExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DefaultFurnitureExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.FurnitureLocation Location { get { int o = __p.__offset(6); return o != 0 ? (Global.FurnitureLocation)__p.bb.GetInt(o + __p.bb_pos) : Global.FurnitureLocation.None; } }
  public float PositionX { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PositionY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Rotation { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Global.DefaultFurnitureExcel> CreateDefaultFurnitureExcel(FlatBufferBuilder builder,
      long Id = 0,
      Global.FurnitureLocation Location = Global.FurnitureLocation.None,
      float PositionX = 0.0f,
      float PositionY = 0.0f,
      float Rotation = 0.0f) {
    builder.StartTable(5);
    DefaultFurnitureExcel.AddId(builder, Id);
    DefaultFurnitureExcel.AddRotation(builder, Rotation);
    DefaultFurnitureExcel.AddPositionY(builder, PositionY);
    DefaultFurnitureExcel.AddPositionX(builder, PositionX);
    DefaultFurnitureExcel.AddLocation(builder, Location);
    return DefaultFurnitureExcel.EndDefaultFurnitureExcel(builder);
  }

  public static void StartDefaultFurnitureExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddLocation(FlatBufferBuilder builder, Global.FurnitureLocation location) { builder.AddInt(1, (int)location, 0); }
  public static void AddPositionX(FlatBufferBuilder builder, float positionX) { builder.AddFloat(2, positionX, 0.0f); }
  public static void AddPositionY(FlatBufferBuilder builder, float positionY) { builder.AddFloat(3, positionY, 0.0f); }
  public static void AddRotation(FlatBufferBuilder builder, float rotation) { builder.AddFloat(4, rotation, 0.0f); }
  public static Offset<Global.DefaultFurnitureExcel> EndDefaultFurnitureExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.DefaultFurnitureExcel>(o);
  }
  public DefaultFurnitureExcelT UnPack() {
    var _o = new DefaultFurnitureExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DefaultFurnitureExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("DefaultFurniture");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Location = TableEncryptionService.UseEncryption ? (Global.FurnitureLocation)TableEncryptionService.Convert((int)this.Location, key) : this.Location;
    _o.PositionX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.PositionX, key) : this.PositionX;
    _o.PositionY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.PositionY, key) : this.PositionY;
    _o.Rotation = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.Rotation, key) : this.Rotation;
  }
  public static Offset<Global.DefaultFurnitureExcel> Pack(FlatBufferBuilder builder, DefaultFurnitureExcelT _o) {
    if (_o == null) return default(Offset<Global.DefaultFurnitureExcel>);
		byte[] key = TableEncryptionService.CreateKey("DefaultFurniture");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Location = TableEncryptionService.UseEncryption ? (Global.FurnitureLocation)TableEncryptionService.Convert((int)_o.Location, key) : _o.Location;
		var _PositionX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.PositionX, key) : _o.PositionX;
		var _PositionY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.PositionY, key) : _o.PositionY;
		var _Rotation = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.Rotation, key) : _o.Rotation;
    return CreateDefaultFurnitureExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Location : _o.Location,
      TableEncryptionService.UseEncryption ? _PositionX : _o.PositionX,
      TableEncryptionService.UseEncryption ? _PositionY : _o.PositionY,
      TableEncryptionService.UseEncryption ? _Rotation : _o.Rotation);
  }
}

public class DefaultFurnitureExcelT
{
  public long Id { get; set; }
  public Global.FurnitureLocation Location { get; set; }
  public float PositionX { get; set; }
  public float PositionY { get; set; }
  public float Rotation { get; set; }

  public DefaultFurnitureExcelT() {
    this.Id = 0;
    this.Location = Global.FurnitureLocation.None;
    this.PositionX = 0.0f;
    this.PositionY = 0.0f;
    this.Rotation = 0.0f;
  }
}


static public class DefaultFurnitureExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Location*/, 4 /*Global.FurnitureLocation*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PositionX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*PositionY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Rotation*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
