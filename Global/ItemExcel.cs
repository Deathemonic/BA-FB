// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ItemExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ItemExcel GetRootAsItemExcel(ByteBuffer _bb) { return GetRootAsItemExcel(_bb, new ItemExcel()); }
  public static ItemExcel GetRootAsItemExcel(ByteBuffer _bb, ItemExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.Rarity Rarity { get { int o = __p.__offset(8); return o != 0 ? (Global.Rarity)__p.bb.GetInt(o + __p.bb_pos) : Global.Rarity.N; } }
  public Global.ProductionStep ProductionStep { get { int o = __p.__offset(10); return o != 0 ? (Global.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : Global.ProductionStep.ToDo; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Global.ItemCategory ItemCategory { get { int o = __p.__offset(14); return o != 0 ? (Global.ItemCategory)__p.bb.GetInt(o + __p.bb_pos) : Global.ItemCategory.Coin; } }
  public long Quality { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Icon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(18); }
  public string SpriteName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpriteNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSpriteNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSpriteNameArray() { return __p.__vector_as_array<byte>(20); }
  public int StackableMax { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StackableFunction { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ImmediateUse { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Global.ParcelType UsingResultParcelType { get { int o = __p.__offset(28); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long UsingResultId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UsingResultAmount { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.MailType MailType { get { int o = __p.__offset(34); return o != 0 ? (Global.MailType)__p.bb.GetInt(o + __p.bb_pos) : Global.MailType.System; } }
  public Global.ParcelType ExpiryChangeParcelType { get { int o = __p.__offset(36); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long ExpiryChangeId { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ExpiryChangeAmount { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool CanTierUpgrade { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long TierUpgradeRecipeCraftId { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.Tag Tags(int j) { int o = __p.__offset(46); return o != 0 ? (Global.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.Tag)0; }
  public int TagsLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.Tag> GetTagsBytes() { return __p.__vector_as_span<Global.Tag>(46, 4); }
#else
  public ArraySegment<byte>? GetTagsBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public Global.Tag[] GetTagsArray() { int o = __p.__offset(46); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.Tag[] a = new Global.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (Global.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public long CraftQualityTier0 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CraftQualityTier1 { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CraftQualityTier2 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ShiftingCraftQuality { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxGiftTags { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Global.ShopCategoryType ShopCategory(int j) { int o = __p.__offset(58); return o != 0 ? (Global.ShopCategoryType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ShopCategoryType)0; }
  public int ShopCategoryLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ShopCategoryType> GetShopCategoryBytes() { return __p.__vector_as_span<Global.ShopCategoryType>(58, 4); }
#else
  public ArraySegment<byte>? GetShopCategoryBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public Global.ShopCategoryType[] GetShopCategoryArray() { int o = __p.__offset(58); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ShopCategoryType[] a = new Global.ShopCategoryType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ShopCategoryType)__p.bb.GetInt(p + i * 4); } return a; }
  public string ExpirationDateTime { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExpirationDateTimeBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetExpirationDateTimeBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetExpirationDateTimeArray() { return __p.__vector_as_array<byte>(60); }
  public int ExpirationNotifyDateIn { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long ShortcutTypeId { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.GachaTicketType GachaTicket { get { int o = __p.__offset(66); return o != 0 ? (Global.GachaTicketType)__p.bb.GetInt(o + __p.bb_pos) : Global.GachaTicketType.None; } }

  public static Offset<Global.ItemExcel> CreateItemExcel(FlatBufferBuilder builder,
      long Id = 0,
      long GroupId = 0,
      Global.Rarity Rarity = Global.Rarity.N,
      Global.ProductionStep ProductionStep = Global.ProductionStep.ToDo,
      uint LocalizeEtcId = 0,
      Global.ItemCategory ItemCategory = Global.ItemCategory.Coin,
      long Quality = 0,
      StringOffset IconOffset = default(StringOffset),
      StringOffset SpriteNameOffset = default(StringOffset),
      int StackableMax = 0,
      int StackableFunction = 0,
      bool ImmediateUse = false,
      Global.ParcelType UsingResultParcelType = Global.ParcelType.None,
      long UsingResultId = 0,
      long UsingResultAmount = 0,
      Global.MailType MailType = Global.MailType.System,
      Global.ParcelType ExpiryChangeParcelType = Global.ParcelType.None,
      long ExpiryChangeId = 0,
      long ExpiryChangeAmount = 0,
      bool CanTierUpgrade = false,
      long TierUpgradeRecipeCraftId = 0,
      VectorOffset TagsOffset = default(VectorOffset),
      long CraftQualityTier0 = 0,
      long CraftQualityTier1 = 0,
      long CraftQualityTier2 = 0,
      long ShiftingCraftQuality = 0,
      int MaxGiftTags = 0,
      VectorOffset ShopCategoryOffset = default(VectorOffset),
      StringOffset ExpirationDateTimeOffset = default(StringOffset),
      int ExpirationNotifyDateIn = 0,
      long ShortcutTypeId = 0,
      Global.GachaTicketType GachaTicket = Global.GachaTicketType.None) {
    builder.StartTable(32);
    ItemExcel.AddShortcutTypeId(builder, ShortcutTypeId);
    ItemExcel.AddShiftingCraftQuality(builder, ShiftingCraftQuality);
    ItemExcel.AddCraftQualityTier2(builder, CraftQualityTier2);
    ItemExcel.AddCraftQualityTier1(builder, CraftQualityTier1);
    ItemExcel.AddCraftQualityTier0(builder, CraftQualityTier0);
    ItemExcel.AddTierUpgradeRecipeCraftId(builder, TierUpgradeRecipeCraftId);
    ItemExcel.AddExpiryChangeAmount(builder, ExpiryChangeAmount);
    ItemExcel.AddExpiryChangeId(builder, ExpiryChangeId);
    ItemExcel.AddUsingResultAmount(builder, UsingResultAmount);
    ItemExcel.AddUsingResultId(builder, UsingResultId);
    ItemExcel.AddQuality(builder, Quality);
    ItemExcel.AddGroupId(builder, GroupId);
    ItemExcel.AddId(builder, Id);
    ItemExcel.AddGachaTicket(builder, GachaTicket);
    ItemExcel.AddExpirationNotifyDateIn(builder, ExpirationNotifyDateIn);
    ItemExcel.AddExpirationDateTime(builder, ExpirationDateTimeOffset);
    ItemExcel.AddShopCategory(builder, ShopCategoryOffset);
    ItemExcel.AddMaxGiftTags(builder, MaxGiftTags);
    ItemExcel.AddTags(builder, TagsOffset);
    ItemExcel.AddExpiryChangeParcelType(builder, ExpiryChangeParcelType);
    ItemExcel.AddMailType(builder, MailType);
    ItemExcel.AddUsingResultParcelType(builder, UsingResultParcelType);
    ItemExcel.AddStackableFunction(builder, StackableFunction);
    ItemExcel.AddStackableMax(builder, StackableMax);
    ItemExcel.AddSpriteName(builder, SpriteNameOffset);
    ItemExcel.AddIcon(builder, IconOffset);
    ItemExcel.AddItemCategory(builder, ItemCategory);
    ItemExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    ItemExcel.AddProductionStep(builder, ProductionStep);
    ItemExcel.AddRarity(builder, Rarity);
    ItemExcel.AddCanTierUpgrade(builder, CanTierUpgrade);
    ItemExcel.AddImmediateUse(builder, ImmediateUse);
    return ItemExcel.EndItemExcel(builder);
  }

  public static void StartItemExcel(FlatBufferBuilder builder) { builder.StartTable(32); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(1, groupId, 0); }
  public static void AddRarity(FlatBufferBuilder builder, Global.Rarity rarity) { builder.AddInt(2, (int)rarity, 0); }
  public static void AddProductionStep(FlatBufferBuilder builder, Global.ProductionStep productionStep) { builder.AddInt(3, (int)productionStep, 0); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(4, localizeEtcId, 0); }
  public static void AddItemCategory(FlatBufferBuilder builder, Global.ItemCategory itemCategory) { builder.AddInt(5, (int)itemCategory, 0); }
  public static void AddQuality(FlatBufferBuilder builder, long quality) { builder.AddLong(6, quality, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(7, iconOffset.Value, 0); }
  public static void AddSpriteName(FlatBufferBuilder builder, StringOffset spriteNameOffset) { builder.AddOffset(8, spriteNameOffset.Value, 0); }
  public static void AddStackableMax(FlatBufferBuilder builder, int stackableMax) { builder.AddInt(9, stackableMax, 0); }
  public static void AddStackableFunction(FlatBufferBuilder builder, int stackableFunction) { builder.AddInt(10, stackableFunction, 0); }
  public static void AddImmediateUse(FlatBufferBuilder builder, bool immediateUse) { builder.AddBool(11, immediateUse, false); }
  public static void AddUsingResultParcelType(FlatBufferBuilder builder, Global.ParcelType usingResultParcelType) { builder.AddInt(12, (int)usingResultParcelType, 0); }
  public static void AddUsingResultId(FlatBufferBuilder builder, long usingResultId) { builder.AddLong(13, usingResultId, 0); }
  public static void AddUsingResultAmount(FlatBufferBuilder builder, long usingResultAmount) { builder.AddLong(14, usingResultAmount, 0); }
  public static void AddMailType(FlatBufferBuilder builder, Global.MailType mailType) { builder.AddInt(15, (int)mailType, 0); }
  public static void AddExpiryChangeParcelType(FlatBufferBuilder builder, Global.ParcelType expiryChangeParcelType) { builder.AddInt(16, (int)expiryChangeParcelType, 0); }
  public static void AddExpiryChangeId(FlatBufferBuilder builder, long expiryChangeId) { builder.AddLong(17, expiryChangeId, 0); }
  public static void AddExpiryChangeAmount(FlatBufferBuilder builder, long expiryChangeAmount) { builder.AddLong(18, expiryChangeAmount, 0); }
  public static void AddCanTierUpgrade(FlatBufferBuilder builder, bool canTierUpgrade) { builder.AddBool(19, canTierUpgrade, false); }
  public static void AddTierUpgradeRecipeCraftId(FlatBufferBuilder builder, long tierUpgradeRecipeCraftId) { builder.AddLong(20, tierUpgradeRecipeCraftId, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(21, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCraftQualityTier0(FlatBufferBuilder builder, long craftQualityTier0) { builder.AddLong(22, craftQualityTier0, 0); }
  public static void AddCraftQualityTier1(FlatBufferBuilder builder, long craftQualityTier1) { builder.AddLong(23, craftQualityTier1, 0); }
  public static void AddCraftQualityTier2(FlatBufferBuilder builder, long craftQualityTier2) { builder.AddLong(24, craftQualityTier2, 0); }
  public static void AddShiftingCraftQuality(FlatBufferBuilder builder, long shiftingCraftQuality) { builder.AddLong(25, shiftingCraftQuality, 0); }
  public static void AddMaxGiftTags(FlatBufferBuilder builder, int maxGiftTags) { builder.AddInt(26, maxGiftTags, 0); }
  public static void AddShopCategory(FlatBufferBuilder builder, VectorOffset shopCategoryOffset) { builder.AddOffset(27, shopCategoryOffset.Value, 0); }
  public static VectorOffset CreateShopCategoryVector(FlatBufferBuilder builder, Global.ShopCategoryType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShopCategoryVectorBlock(FlatBufferBuilder builder, Global.ShopCategoryType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShopCategoryVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ShopCategoryType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShopCategoryVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ShopCategoryType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShopCategoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExpirationDateTime(FlatBufferBuilder builder, StringOffset expirationDateTimeOffset) { builder.AddOffset(28, expirationDateTimeOffset.Value, 0); }
  public static void AddExpirationNotifyDateIn(FlatBufferBuilder builder, int expirationNotifyDateIn) { builder.AddInt(29, expirationNotifyDateIn, 0); }
  public static void AddShortcutTypeId(FlatBufferBuilder builder, long shortcutTypeId) { builder.AddLong(30, shortcutTypeId, 0); }
  public static void AddGachaTicket(FlatBufferBuilder builder, Global.GachaTicketType gachaTicket) { builder.AddInt(31, (int)gachaTicket, 0); }
  public static Offset<Global.ItemExcel> EndItemExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ItemExcel>(o);
  }
  public ItemExcelT UnPack() {
    var _o = new ItemExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Item");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.Rarity = TableEncryptionService.UseEncryption ? (Global.Rarity)TableEncryptionService.Convert((int)this.Rarity, key) : this.Rarity;
    _o.ProductionStep = TableEncryptionService.UseEncryption ? (Global.ProductionStep)TableEncryptionService.Convert((int)this.ProductionStep, key) : this.ProductionStep;
    _o.LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeEtcId, key) : this.LocalizeEtcId;
    _o.ItemCategory = TableEncryptionService.UseEncryption ? (Global.ItemCategory)TableEncryptionService.Convert((int)this.ItemCategory, key) : this.ItemCategory;
    _o.Quality = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Quality, key) : this.Quality;
    _o.Icon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Icon, key) : this.Icon;
    _o.SpriteName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SpriteName, key) : this.SpriteName;
    _o.StackableMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StackableMax, key) : this.StackableMax;
    _o.StackableFunction = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StackableFunction, key) : this.StackableFunction;
    _o.ImmediateUse = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ImmediateUse, key) : this.ImmediateUse;
    _o.UsingResultParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.UsingResultParcelType, key) : this.UsingResultParcelType;
    _o.UsingResultId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UsingResultId, key) : this.UsingResultId;
    _o.UsingResultAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UsingResultAmount, key) : this.UsingResultAmount;
    _o.MailType = TableEncryptionService.UseEncryption ? (Global.MailType)TableEncryptionService.Convert((int)this.MailType, key) : this.MailType;
    _o.ExpiryChangeParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ExpiryChangeParcelType, key) : this.ExpiryChangeParcelType;
    _o.ExpiryChangeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExpiryChangeId, key) : this.ExpiryChangeId;
    _o.ExpiryChangeAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ExpiryChangeAmount, key) : this.ExpiryChangeAmount;
    _o.CanTierUpgrade = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CanTierUpgrade, key) : this.CanTierUpgrade;
    _o.TierUpgradeRecipeCraftId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TierUpgradeRecipeCraftId, key) : this.TierUpgradeRecipeCraftId;
    _o.Tags = new List<Global.Tag>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)this.Tags(_j), key) : this.Tags(_j));}
    _o.CraftQualityTier0 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CraftQualityTier0, key) : this.CraftQualityTier0;
    _o.CraftQualityTier1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CraftQualityTier1, key) : this.CraftQualityTier1;
    _o.CraftQualityTier2 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CraftQualityTier2, key) : this.CraftQualityTier2;
    _o.ShiftingCraftQuality = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ShiftingCraftQuality, key) : this.ShiftingCraftQuality;
    _o.MaxGiftTags = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxGiftTags, key) : this.MaxGiftTags;
    _o.ShopCategory = new List<Global.ShopCategoryType>();
    for (var _j = 0; _j < this.ShopCategoryLength; ++_j) {_o.ShopCategory.Add(TableEncryptionService.UseEncryption ? (Global.ShopCategoryType)TableEncryptionService.Convert((int)this.ShopCategory(_j), key) : this.ShopCategory(_j));}
    _o.ExpirationDateTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ExpirationDateTime, key) : this.ExpirationDateTime;
    _o.ExpirationNotifyDateIn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.ExpirationNotifyDateIn, key) : this.ExpirationNotifyDateIn;
    _o.ShortcutTypeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ShortcutTypeId, key) : this.ShortcutTypeId;
    _o.GachaTicket = TableEncryptionService.UseEncryption ? (Global.GachaTicketType)TableEncryptionService.Convert((int)this.GachaTicket, key) : this.GachaTicket;
  }
  public static Offset<Global.ItemExcel> Pack(FlatBufferBuilder builder, ItemExcelT _o) {
    if (_o == null) return default(Offset<Global.ItemExcel>);
		byte[] key = TableEncryptionService.CreateKey("Item");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _Rarity = TableEncryptionService.UseEncryption ? (Global.Rarity)TableEncryptionService.Convert((int)_o.Rarity, key) : _o.Rarity;
		var _ProductionStep = TableEncryptionService.UseEncryption ? (Global.ProductionStep)TableEncryptionService.Convert((int)_o.ProductionStep, key) : _o.ProductionStep;
		var _LocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeEtcId, key) : _o.LocalizeEtcId;
		var _ItemCategory = TableEncryptionService.UseEncryption ? (Global.ItemCategory)TableEncryptionService.Convert((int)_o.ItemCategory, key) : _o.ItemCategory;
		var _Quality = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Quality, key) : _o.Quality;
    var _Icon = _o.Icon == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Icon, key) : _o.Icon));
    var _SpriteName = _o.SpriteName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SpriteName, key) : _o.SpriteName));
		var _StackableMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StackableMax, key) : _o.StackableMax;
		var _StackableFunction = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StackableFunction, key) : _o.StackableFunction;
		var _ImmediateUse = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ImmediateUse, key) : _o.ImmediateUse;
		var _UsingResultParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.UsingResultParcelType, key) : _o.UsingResultParcelType;
		var _UsingResultId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UsingResultId, key) : _o.UsingResultId;
		var _UsingResultAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UsingResultAmount, key) : _o.UsingResultAmount;
		var _MailType = TableEncryptionService.UseEncryption ? (Global.MailType)TableEncryptionService.Convert((int)_o.MailType, key) : _o.MailType;
		var _ExpiryChangeParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.ExpiryChangeParcelType, key) : _o.ExpiryChangeParcelType;
		var _ExpiryChangeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExpiryChangeId, key) : _o.ExpiryChangeId;
		var _ExpiryChangeAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ExpiryChangeAmount, key) : _o.ExpiryChangeAmount;
		var _CanTierUpgrade = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CanTierUpgrade, key) : _o.CanTierUpgrade;
		var _TierUpgradeRecipeCraftId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TierUpgradeRecipeCraftId, key) : _o.TierUpgradeRecipeCraftId;
    var _Tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __Tags = _o.Tags.Select(x => TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _Tags = CreateTagsVector(builder, __Tags);
    }
		var _CraftQualityTier0 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CraftQualityTier0, key) : _o.CraftQualityTier0;
		var _CraftQualityTier1 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CraftQualityTier1, key) : _o.CraftQualityTier1;
		var _CraftQualityTier2 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CraftQualityTier2, key) : _o.CraftQualityTier2;
		var _ShiftingCraftQuality = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ShiftingCraftQuality, key) : _o.ShiftingCraftQuality;
		var _MaxGiftTags = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxGiftTags, key) : _o.MaxGiftTags;
    var _ShopCategory = default(VectorOffset);
    if (_o.ShopCategory != null) {
      var __ShopCategory = _o.ShopCategory.Select(x => TableEncryptionService.UseEncryption ? (Global.ShopCategoryType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _ShopCategory = CreateShopCategoryVector(builder, __ShopCategory);
    }
    var _ExpirationDateTime = _o.ExpirationDateTime == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ExpirationDateTime, key) : _o.ExpirationDateTime));
		var _ExpirationNotifyDateIn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.ExpirationNotifyDateIn, key) : _o.ExpirationNotifyDateIn;
		var _ShortcutTypeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ShortcutTypeId, key) : _o.ShortcutTypeId;
		var _GachaTicket = TableEncryptionService.UseEncryption ? (Global.GachaTicketType)TableEncryptionService.Convert((int)_o.GachaTicket, key) : _o.GachaTicket;
    return CreateItemExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _Rarity : _o.Rarity,
      TableEncryptionService.UseEncryption ? _ProductionStep : _o.ProductionStep,
      TableEncryptionService.UseEncryption ? _LocalizeEtcId : _o.LocalizeEtcId,
      TableEncryptionService.UseEncryption ? _ItemCategory : _o.ItemCategory,
      TableEncryptionService.UseEncryption ? _Quality : _o.Quality,
      _Icon,
      _SpriteName,
      TableEncryptionService.UseEncryption ? _StackableMax : _o.StackableMax,
      TableEncryptionService.UseEncryption ? _StackableFunction : _o.StackableFunction,
      TableEncryptionService.UseEncryption ? _ImmediateUse : _o.ImmediateUse,
      TableEncryptionService.UseEncryption ? _UsingResultParcelType : _o.UsingResultParcelType,
      TableEncryptionService.UseEncryption ? _UsingResultId : _o.UsingResultId,
      TableEncryptionService.UseEncryption ? _UsingResultAmount : _o.UsingResultAmount,
      TableEncryptionService.UseEncryption ? _MailType : _o.MailType,
      TableEncryptionService.UseEncryption ? _ExpiryChangeParcelType : _o.ExpiryChangeParcelType,
      TableEncryptionService.UseEncryption ? _ExpiryChangeId : _o.ExpiryChangeId,
      TableEncryptionService.UseEncryption ? _ExpiryChangeAmount : _o.ExpiryChangeAmount,
      TableEncryptionService.UseEncryption ? _CanTierUpgrade : _o.CanTierUpgrade,
      TableEncryptionService.UseEncryption ? _TierUpgradeRecipeCraftId : _o.TierUpgradeRecipeCraftId,
      _Tags,
      TableEncryptionService.UseEncryption ? _CraftQualityTier0 : _o.CraftQualityTier0,
      TableEncryptionService.UseEncryption ? _CraftQualityTier1 : _o.CraftQualityTier1,
      TableEncryptionService.UseEncryption ? _CraftQualityTier2 : _o.CraftQualityTier2,
      TableEncryptionService.UseEncryption ? _ShiftingCraftQuality : _o.ShiftingCraftQuality,
      TableEncryptionService.UseEncryption ? _MaxGiftTags : _o.MaxGiftTags,
      _ShopCategory,
      _ExpirationDateTime,
      TableEncryptionService.UseEncryption ? _ExpirationNotifyDateIn : _o.ExpirationNotifyDateIn,
      TableEncryptionService.UseEncryption ? _ShortcutTypeId : _o.ShortcutTypeId,
      TableEncryptionService.UseEncryption ? _GachaTicket : _o.GachaTicket);
  }
}

public class ItemExcelT
{
  public long Id { get; set; }
  public long GroupId { get; set; }
  public Global.Rarity Rarity { get; set; }
  public Global.ProductionStep ProductionStep { get; set; }
  public uint LocalizeEtcId { get; set; }
  public Global.ItemCategory ItemCategory { get; set; }
  public long Quality { get; set; }
  public string Icon { get; set; }
  public string SpriteName { get; set; }
  public int StackableMax { get; set; }
  public int StackableFunction { get; set; }
  public bool ImmediateUse { get; set; }
  public Global.ParcelType UsingResultParcelType { get; set; }
  public long UsingResultId { get; set; }
  public long UsingResultAmount { get; set; }
  public Global.MailType MailType { get; set; }
  public Global.ParcelType ExpiryChangeParcelType { get; set; }
  public long ExpiryChangeId { get; set; }
  public long ExpiryChangeAmount { get; set; }
  public bool CanTierUpgrade { get; set; }
  public long TierUpgradeRecipeCraftId { get; set; }
  public List<Global.Tag> Tags { get; set; }
  public long CraftQualityTier0 { get; set; }
  public long CraftQualityTier1 { get; set; }
  public long CraftQualityTier2 { get; set; }
  public long ShiftingCraftQuality { get; set; }
  public int MaxGiftTags { get; set; }
  public List<Global.ShopCategoryType> ShopCategory { get; set; }
  public string ExpirationDateTime { get; set; }
  public int ExpirationNotifyDateIn { get; set; }
  public long ShortcutTypeId { get; set; }
  public Global.GachaTicketType GachaTicket { get; set; }

  public ItemExcelT() {
    this.Id = 0;
    this.GroupId = 0;
    this.Rarity = Global.Rarity.N;
    this.ProductionStep = Global.ProductionStep.ToDo;
    this.LocalizeEtcId = 0;
    this.ItemCategory = Global.ItemCategory.Coin;
    this.Quality = 0;
    this.Icon = null;
    this.SpriteName = null;
    this.StackableMax = 0;
    this.StackableFunction = 0;
    this.ImmediateUse = false;
    this.UsingResultParcelType = Global.ParcelType.None;
    this.UsingResultId = 0;
    this.UsingResultAmount = 0;
    this.MailType = Global.MailType.System;
    this.ExpiryChangeParcelType = Global.ParcelType.None;
    this.ExpiryChangeId = 0;
    this.ExpiryChangeAmount = 0;
    this.CanTierUpgrade = false;
    this.TierUpgradeRecipeCraftId = 0;
    this.Tags = null;
    this.CraftQualityTier0 = 0;
    this.CraftQualityTier1 = 0;
    this.CraftQualityTier2 = 0;
    this.ShiftingCraftQuality = 0;
    this.MaxGiftTags = 0;
    this.ShopCategory = null;
    this.ExpirationDateTime = null;
    this.ExpirationNotifyDateIn = 0;
    this.ShortcutTypeId = 0;
    this.GachaTicket = Global.GachaTicketType.None;
  }
}


static public class ItemExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Rarity*/, 4 /*Global.Rarity*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ProductionStep*/, 4 /*Global.ProductionStep*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ItemCategory*/, 4 /*Global.ItemCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Quality*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*Icon*/, false)
      && verifier.VerifyString(tablePos, 20 /*SpriteName*/, false)
      && verifier.VerifyField(tablePos, 22 /*StackableMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*StackableFunction*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*ImmediateUse*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*UsingResultParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*UsingResultId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*UsingResultAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*MailType*/, 4 /*Global.MailType*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*ExpiryChangeParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*ExpiryChangeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*ExpiryChangeAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*CanTierUpgrade*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 44 /*TierUpgradeRecipeCraftId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*Tags*/, 4 /*Global.Tag*/, false)
      && verifier.VerifyField(tablePos, 48 /*CraftQualityTier0*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*CraftQualityTier1*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*CraftQualityTier2*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*ShiftingCraftQuality*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*MaxGiftTags*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 58 /*ShopCategory*/, 4 /*Global.ShopCategoryType*/, false)
      && verifier.VerifyString(tablePos, 60 /*ExpirationDateTime*/, false)
      && verifier.VerifyField(tablePos, 62 /*ExpirationNotifyDateIn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*ShortcutTypeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*GachaTicket*/, 4 /*Global.GachaTicketType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
