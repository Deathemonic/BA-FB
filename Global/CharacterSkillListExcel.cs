// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterSkillListExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterSkillListExcel GetRootAsCharacterSkillListExcel(ByteBuffer _bb) { return GetRootAsCharacterSkillListExcel(_bb, new CharacterSkillListExcel()); }
  public static CharacterSkillListExcel GetRootAsCharacterSkillListExcel(ByteBuffer _bb, CharacterSkillListExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterSkillListExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CharacterSkillListGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MinimumGradeCharacterWeapon { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinimumTierCharacterGear { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FormIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsRootMotion { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsMoveLeftRight { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseRandomExSkillTimeline { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long TSAInteractionId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string NormalSkillGroupId(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NormalSkillGroupIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int NormalSkillTimeLineIndex(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NormalSkillTimeLineIndexLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNormalSkillTimeLineIndexBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetNormalSkillTimeLineIndexBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetNormalSkillTimeLineIndexArray() { return __p.__vector_as_array<int>(22); }
  public int SelectExSkillActionSkillSlot { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ExSkillGroupId(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExSkillGroupIdLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExSkillCutInTimeLineIndex(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExSkillCutInTimeLineIndexLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExSkillLevelTimeLineIndex(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExSkillLevelTimeLineIndexLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PublicSkillGroupId(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PublicSkillGroupIdLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int PublicSkillTimeLineIndex(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PublicSkillTimeLineIndexLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPublicSkillTimeLineIndexBytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetPublicSkillTimeLineIndexBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetPublicSkillTimeLineIndexArray() { return __p.__vector_as_array<int>(34); }
  public string PassiveSkillGroupId(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PassiveSkillGroupIdLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string LeaderSkillGroupId(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LeaderSkillGroupIdLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ExtraPassiveSkillGroupId(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraPassiveSkillGroupIdLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string HiddenPassiveSkillGroupId(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int HiddenPassiveSkillGroupIdLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Global.CharacterSkillListExcel> CreateCharacterSkillListExcel(FlatBufferBuilder builder,
      long CharacterSkillListGroupId = 0,
      int MinimumGradeCharacterWeapon = 0,
      int MinimumTierCharacterGear = 0,
      int FormIndex = 0,
      bool IsRootMotion = false,
      bool IsMoveLeftRight = false,
      bool UseRandomExSkillTimeline = false,
      long TSAInteractionId = 0,
      VectorOffset normalSkillGroupIdOffset = default(VectorOffset),
      VectorOffset normalSkillTimeLineIndexOffset = default(VectorOffset),
      int SelectExSkillActionSkillSlot = 0,
      VectorOffset exSkillGroupIdOffset = default(VectorOffset),
      VectorOffset exSkillCutInTimeLineIndexOffset = default(VectorOffset),
      VectorOffset exSkillLevelTimeLineIndexOffset = default(VectorOffset),
      VectorOffset publicSkillGroupIdOffset = default(VectorOffset),
      VectorOffset publicSkillTimeLineIndexOffset = default(VectorOffset),
      VectorOffset passiveSkillGroupIdOffset = default(VectorOffset),
      VectorOffset leaderSkillGroupIdOffset = default(VectorOffset),
      VectorOffset extraPassiveSkillGroupIdOffset = default(VectorOffset),
      VectorOffset hiddenPassiveSkillGroupIdOffset = default(VectorOffset)) {
    builder.StartTable(20);
    CharacterSkillListExcel.AddTSAInteractionId(builder, TSAInteractionId);
    CharacterSkillListExcel.AddCharacterSkillListGroupId(builder, CharacterSkillListGroupId);
    CharacterSkillListExcel.AddHiddenPassiveSkillGroupId(builder, hiddenPassiveSkillGroupIdOffset);
    CharacterSkillListExcel.AddExtraPassiveSkillGroupId(builder, extraPassiveSkillGroupIdOffset);
    CharacterSkillListExcel.AddLeaderSkillGroupId(builder, leaderSkillGroupIdOffset);
    CharacterSkillListExcel.AddPassiveSkillGroupId(builder, passiveSkillGroupIdOffset);
    CharacterSkillListExcel.AddPublicSkillTimeLineIndex(builder, publicSkillTimeLineIndexOffset);
    CharacterSkillListExcel.AddPublicSkillGroupId(builder, publicSkillGroupIdOffset);
    CharacterSkillListExcel.AddExSkillLevelTimeLineIndex(builder, exSkillLevelTimeLineIndexOffset);
    CharacterSkillListExcel.AddExSkillCutInTimeLineIndex(builder, exSkillCutInTimeLineIndexOffset);
    CharacterSkillListExcel.AddExSkillGroupId(builder, exSkillGroupIdOffset);
    CharacterSkillListExcel.AddSelectExSkillActionSkillSlot(builder, SelectExSkillActionSkillSlot);
    CharacterSkillListExcel.AddNormalSkillTimeLineIndex(builder, normalSkillTimeLineIndexOffset);
    CharacterSkillListExcel.AddNormalSkillGroupId(builder, normalSkillGroupIdOffset);
    CharacterSkillListExcel.AddFormIndex(builder, FormIndex);
    CharacterSkillListExcel.AddMinimumTierCharacterGear(builder, MinimumTierCharacterGear);
    CharacterSkillListExcel.AddMinimumGradeCharacterWeapon(builder, MinimumGradeCharacterWeapon);
    CharacterSkillListExcel.AddUseRandomExSkillTimeline(builder, UseRandomExSkillTimeline);
    CharacterSkillListExcel.AddIsMoveLeftRight(builder, IsMoveLeftRight);
    CharacterSkillListExcel.AddIsRootMotion(builder, IsRootMotion);
    return CharacterSkillListExcel.EndCharacterSkillListExcel(builder);
  }

  public static void StartCharacterSkillListExcel(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddCharacterSkillListGroupId(FlatBufferBuilder builder, long characterSkillListGroupId) { builder.AddLong(0, characterSkillListGroupId, 0); }
  public static void AddMinimumGradeCharacterWeapon(FlatBufferBuilder builder, int minimumGradeCharacterWeapon) { builder.AddInt(1, minimumGradeCharacterWeapon, 0); }
  public static void AddMinimumTierCharacterGear(FlatBufferBuilder builder, int minimumTierCharacterGear) { builder.AddInt(2, minimumTierCharacterGear, 0); }
  public static void AddFormIndex(FlatBufferBuilder builder, int formIndex) { builder.AddInt(3, formIndex, 0); }
  public static void AddIsRootMotion(FlatBufferBuilder builder, bool isRootMotion) { builder.AddBool(4, isRootMotion, false); }
  public static void AddIsMoveLeftRight(FlatBufferBuilder builder, bool isMoveLeftRight) { builder.AddBool(5, isMoveLeftRight, false); }
  public static void AddUseRandomExSkillTimeline(FlatBufferBuilder builder, bool useRandomExSkillTimeline) { builder.AddBool(6, useRandomExSkillTimeline, false); }
  public static void AddTSAInteractionId(FlatBufferBuilder builder, long tSAInteractionId) { builder.AddLong(7, tSAInteractionId, 0); }
  public static void AddNormalSkillGroupId(FlatBufferBuilder builder, VectorOffset normalSkillGroupIdOffset) { builder.AddOffset(8, normalSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateNormalSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNormalSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNormalSkillTimeLineIndex(FlatBufferBuilder builder, VectorOffset normalSkillTimeLineIndexOffset) { builder.AddOffset(9, normalSkillTimeLineIndexOffset.Value, 0); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNormalSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNormalSkillTimeLineIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSelectExSkillActionSkillSlot(FlatBufferBuilder builder, int selectExSkillActionSkillSlot) { builder.AddInt(10, selectExSkillActionSkillSlot, 0); }
  public static void AddExSkillGroupId(FlatBufferBuilder builder, VectorOffset exSkillGroupIdOffset) { builder.AddOffset(11, exSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateExSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExSkillCutInTimeLineIndex(FlatBufferBuilder builder, VectorOffset exSkillCutInTimeLineIndexOffset) { builder.AddOffset(12, exSkillCutInTimeLineIndexOffset.Value, 0); }
  public static VectorOffset CreateExSkillCutInTimeLineIndexVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExSkillCutInTimeLineIndexVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillCutInTimeLineIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillCutInTimeLineIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExSkillCutInTimeLineIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExSkillLevelTimeLineIndex(FlatBufferBuilder builder, VectorOffset exSkillLevelTimeLineIndexOffset) { builder.AddOffset(13, exSkillLevelTimeLineIndexOffset.Value, 0); }
  public static VectorOffset CreateExSkillLevelTimeLineIndexVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExSkillLevelTimeLineIndexVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillLevelTimeLineIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExSkillLevelTimeLineIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExSkillLevelTimeLineIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPublicSkillGroupId(FlatBufferBuilder builder, VectorOffset publicSkillGroupIdOffset) { builder.AddOffset(14, publicSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreatePublicSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPublicSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPublicSkillTimeLineIndex(FlatBufferBuilder builder, VectorOffset publicSkillTimeLineIndexOffset) { builder.AddOffset(15, publicSkillTimeLineIndexOffset.Value, 0); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePublicSkillTimeLineIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPublicSkillTimeLineIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPassiveSkillGroupId(FlatBufferBuilder builder, VectorOffset passiveSkillGroupIdOffset) { builder.AddOffset(16, passiveSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreatePassiveSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPassiveSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLeaderSkillGroupId(FlatBufferBuilder builder, VectorOffset leaderSkillGroupIdOffset) { builder.AddOffset(17, leaderSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateLeaderSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLeaderSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLeaderSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLeaderSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLeaderSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtraPassiveSkillGroupId(FlatBufferBuilder builder, VectorOffset extraPassiveSkillGroupIdOffset) { builder.AddOffset(18, extraPassiveSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtraPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtraPassiveSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHiddenPassiveSkillGroupId(FlatBufferBuilder builder, VectorOffset hiddenPassiveSkillGroupIdOffset) { builder.AddOffset(19, hiddenPassiveSkillGroupIdOffset.Value, 0); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHiddenPassiveSkillGroupIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHiddenPassiveSkillGroupIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.CharacterSkillListExcel> EndCharacterSkillListExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.CharacterSkillListExcel>(o);
  }
  public CharacterSkillListExcelT UnPack() {
    var _o = new CharacterSkillListExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterSkillListExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterSkillList");
    _o.CharacterSkillListGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterSkillListGroupId, key) : this.CharacterSkillListGroupId;
    _o.MinimumGradeCharacterWeapon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MinimumGradeCharacterWeapon, key) : this.MinimumGradeCharacterWeapon;
    _o.MinimumTierCharacterGear = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MinimumTierCharacterGear, key) : this.MinimumTierCharacterGear;
    _o.FormIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FormIndex, key) : this.FormIndex;
    _o.IsRootMotion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsRootMotion, key) : this.IsRootMotion;
    _o.IsMoveLeftRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsMoveLeftRight, key) : this.IsMoveLeftRight;
    _o.UseRandomExSkillTimeline = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UseRandomExSkillTimeline, key) : this.UseRandomExSkillTimeline;
    _o.TSAInteractionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TSAInteractionId, key) : this.TSAInteractionId;
    _o.NormalSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.NormalSkillGroupIdLength; ++_j) {_o.NormalSkillGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.NormalSkillGroupId(_j), key) : this.NormalSkillGroupId(_j));}
    _o.NormalSkillTimeLineIndex = new List<int>();
    for (var _j = 0; _j < this.NormalSkillTimeLineIndexLength; ++_j) {_o.NormalSkillTimeLineIndex.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.NormalSkillTimeLineIndex(_j), key) : this.NormalSkillTimeLineIndex(_j));}
    _o.SelectExSkillActionSkillSlot = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.SelectExSkillActionSkillSlot, key) : this.SelectExSkillActionSkillSlot;
    _o.ExSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.ExSkillGroupIdLength; ++_j) {_o.ExSkillGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ExSkillGroupId(_j), key) : this.ExSkillGroupId(_j));}
    _o.ExSkillCutInTimeLineIndex = new List<string>();
    for (var _j = 0; _j < this.ExSkillCutInTimeLineIndexLength; ++_j) {_o.ExSkillCutInTimeLineIndex.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ExSkillCutInTimeLineIndex(_j), key) : this.ExSkillCutInTimeLineIndex(_j));}
    _o.ExSkillLevelTimeLineIndex = new List<string>();
    for (var _j = 0; _j < this.ExSkillLevelTimeLineIndexLength; ++_j) {_o.ExSkillLevelTimeLineIndex.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ExSkillLevelTimeLineIndex(_j), key) : this.ExSkillLevelTimeLineIndex(_j));}
    _o.PublicSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.PublicSkillGroupIdLength; ++_j) {_o.PublicSkillGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PublicSkillGroupId(_j), key) : this.PublicSkillGroupId(_j));}
    _o.PublicSkillTimeLineIndex = new List<int>();
    for (var _j = 0; _j < this.PublicSkillTimeLineIndexLength; ++_j) {_o.PublicSkillTimeLineIndex.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.PublicSkillTimeLineIndex(_j), key) : this.PublicSkillTimeLineIndex(_j));}
    _o.PassiveSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.PassiveSkillGroupIdLength; ++_j) {_o.PassiveSkillGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PassiveSkillGroupId(_j), key) : this.PassiveSkillGroupId(_j));}
    _o.LeaderSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.LeaderSkillGroupIdLength; ++_j) {_o.LeaderSkillGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LeaderSkillGroupId(_j), key) : this.LeaderSkillGroupId(_j));}
    _o.ExtraPassiveSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.ExtraPassiveSkillGroupIdLength; ++_j) {_o.ExtraPassiveSkillGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ExtraPassiveSkillGroupId(_j), key) : this.ExtraPassiveSkillGroupId(_j));}
    _o.HiddenPassiveSkillGroupId = new List<string>();
    for (var _j = 0; _j < this.HiddenPassiveSkillGroupIdLength; ++_j) {_o.HiddenPassiveSkillGroupId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.HiddenPassiveSkillGroupId(_j), key) : this.HiddenPassiveSkillGroupId(_j));}
  }
  public static Offset<Global.CharacterSkillListExcel> Pack(FlatBufferBuilder builder, CharacterSkillListExcelT _o) {
    if (_o == null) return default(Offset<Global.CharacterSkillListExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterSkillList");
		var _CharacterSkillListGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterSkillListGroupId, key) : _o.CharacterSkillListGroupId;
		var _MinimumGradeCharacterWeapon = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MinimumGradeCharacterWeapon, key) : _o.MinimumGradeCharacterWeapon;
		var _MinimumTierCharacterGear = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MinimumTierCharacterGear, key) : _o.MinimumTierCharacterGear;
		var _FormIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FormIndex, key) : _o.FormIndex;
		var _IsRootMotion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsRootMotion, key) : _o.IsRootMotion;
		var _IsMoveLeftRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsMoveLeftRight, key) : _o.IsMoveLeftRight;
		var _UseRandomExSkillTimeline = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UseRandomExSkillTimeline, key) : _o.UseRandomExSkillTimeline;
		var _TSAInteractionId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TSAInteractionId, key) : _o.TSAInteractionId;
    var _normalSkillGroupId = default(VectorOffset);
    if (_o.NormalSkillGroupId != null) {
      var __normalSkillGroupId = new StringOffset[_o.NormalSkillGroupId.Count];
      for (var _j = 0; _j < __normalSkillGroupId.Length; ++_j) { __normalSkillGroupId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.NormalSkillGroupId[_j], key) : _o.NormalSkillGroupId[_j])); }
      _normalSkillGroupId = CreateNormalSkillGroupIdVector(builder, __normalSkillGroupId);
    }
    var _normalSkillTimeLineIndex = default(VectorOffset);
    if (_o.NormalSkillTimeLineIndex != null) {
      var __normalSkillTimeLineIndex = _o.NormalSkillTimeLineIndex.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _normalSkillTimeLineIndex = CreateNormalSkillTimeLineIndexVector(builder, __normalSkillTimeLineIndex);
    }
		var _SelectExSkillActionSkillSlot = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.SelectExSkillActionSkillSlot, key) : _o.SelectExSkillActionSkillSlot;
    var _exSkillGroupId = default(VectorOffset);
    if (_o.ExSkillGroupId != null) {
      var __exSkillGroupId = new StringOffset[_o.ExSkillGroupId.Count];
      for (var _j = 0; _j < __exSkillGroupId.Length; ++_j) { __exSkillGroupId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ExSkillGroupId[_j], key) : _o.ExSkillGroupId[_j])); }
      _exSkillGroupId = CreateExSkillGroupIdVector(builder, __exSkillGroupId);
    }
    var _exSkillCutInTimeLineIndex = default(VectorOffset);
    if (_o.ExSkillCutInTimeLineIndex != null) {
      var __exSkillCutInTimeLineIndex = new StringOffset[_o.ExSkillCutInTimeLineIndex.Count];
      for (var _j = 0; _j < __exSkillCutInTimeLineIndex.Length; ++_j) { __exSkillCutInTimeLineIndex[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ExSkillCutInTimeLineIndex[_j], key) : _o.ExSkillCutInTimeLineIndex[_j])); }
      _exSkillCutInTimeLineIndex = CreateExSkillCutInTimeLineIndexVector(builder, __exSkillCutInTimeLineIndex);
    }
    var _exSkillLevelTimeLineIndex = default(VectorOffset);
    if (_o.ExSkillLevelTimeLineIndex != null) {
      var __exSkillLevelTimeLineIndex = new StringOffset[_o.ExSkillLevelTimeLineIndex.Count];
      for (var _j = 0; _j < __exSkillLevelTimeLineIndex.Length; ++_j) { __exSkillLevelTimeLineIndex[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ExSkillLevelTimeLineIndex[_j], key) : _o.ExSkillLevelTimeLineIndex[_j])); }
      _exSkillLevelTimeLineIndex = CreateExSkillLevelTimeLineIndexVector(builder, __exSkillLevelTimeLineIndex);
    }
    var _publicSkillGroupId = default(VectorOffset);
    if (_o.PublicSkillGroupId != null) {
      var __publicSkillGroupId = new StringOffset[_o.PublicSkillGroupId.Count];
      for (var _j = 0; _j < __publicSkillGroupId.Length; ++_j) { __publicSkillGroupId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PublicSkillGroupId[_j], key) : _o.PublicSkillGroupId[_j])); }
      _publicSkillGroupId = CreatePublicSkillGroupIdVector(builder, __publicSkillGroupId);
    }
    var _publicSkillTimeLineIndex = default(VectorOffset);
    if (_o.PublicSkillTimeLineIndex != null) {
      var __publicSkillTimeLineIndex = _o.PublicSkillTimeLineIndex.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _publicSkillTimeLineIndex = CreatePublicSkillTimeLineIndexVector(builder, __publicSkillTimeLineIndex);
    }
    var _passiveSkillGroupId = default(VectorOffset);
    if (_o.PassiveSkillGroupId != null) {
      var __passiveSkillGroupId = new StringOffset[_o.PassiveSkillGroupId.Count];
      for (var _j = 0; _j < __passiveSkillGroupId.Length; ++_j) { __passiveSkillGroupId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PassiveSkillGroupId[_j], key) : _o.PassiveSkillGroupId[_j])); }
      _passiveSkillGroupId = CreatePassiveSkillGroupIdVector(builder, __passiveSkillGroupId);
    }
    var _leaderSkillGroupId = default(VectorOffset);
    if (_o.LeaderSkillGroupId != null) {
      var __leaderSkillGroupId = new StringOffset[_o.LeaderSkillGroupId.Count];
      for (var _j = 0; _j < __leaderSkillGroupId.Length; ++_j) { __leaderSkillGroupId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LeaderSkillGroupId[_j], key) : _o.LeaderSkillGroupId[_j])); }
      _leaderSkillGroupId = CreateLeaderSkillGroupIdVector(builder, __leaderSkillGroupId);
    }
    var _extraPassiveSkillGroupId = default(VectorOffset);
    if (_o.ExtraPassiveSkillGroupId != null) {
      var __extraPassiveSkillGroupId = new StringOffset[_o.ExtraPassiveSkillGroupId.Count];
      for (var _j = 0; _j < __extraPassiveSkillGroupId.Length; ++_j) { __extraPassiveSkillGroupId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ExtraPassiveSkillGroupId[_j], key) : _o.ExtraPassiveSkillGroupId[_j])); }
      _extraPassiveSkillGroupId = CreateExtraPassiveSkillGroupIdVector(builder, __extraPassiveSkillGroupId);
    }
    var _hiddenPassiveSkillGroupId = default(VectorOffset);
    if (_o.HiddenPassiveSkillGroupId != null) {
      var __hiddenPassiveSkillGroupId = new StringOffset[_o.HiddenPassiveSkillGroupId.Count];
      for (var _j = 0; _j < __hiddenPassiveSkillGroupId.Length; ++_j) { __hiddenPassiveSkillGroupId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.HiddenPassiveSkillGroupId[_j], key) : _o.HiddenPassiveSkillGroupId[_j])); }
      _hiddenPassiveSkillGroupId = CreateHiddenPassiveSkillGroupIdVector(builder, __hiddenPassiveSkillGroupId);
    }
    return CreateCharacterSkillListExcel(
      builder,
      TableEncryptionService.UseEncryption ? _CharacterSkillListGroupId : _o.CharacterSkillListGroupId,
      TableEncryptionService.UseEncryption ? _MinimumGradeCharacterWeapon : _o.MinimumGradeCharacterWeapon,
      TableEncryptionService.UseEncryption ? _MinimumTierCharacterGear : _o.MinimumTierCharacterGear,
      TableEncryptionService.UseEncryption ? _FormIndex : _o.FormIndex,
      TableEncryptionService.UseEncryption ? _IsRootMotion : _o.IsRootMotion,
      TableEncryptionService.UseEncryption ? _IsMoveLeftRight : _o.IsMoveLeftRight,
      TableEncryptionService.UseEncryption ? _UseRandomExSkillTimeline : _o.UseRandomExSkillTimeline,
      TableEncryptionService.UseEncryption ? _TSAInteractionId : _o.TSAInteractionId,
      _normalSkillGroupId,
      _normalSkillTimeLineIndex,
      TableEncryptionService.UseEncryption ? _SelectExSkillActionSkillSlot : _o.SelectExSkillActionSkillSlot,
      _exSkillGroupId,
      _exSkillCutInTimeLineIndex,
      _exSkillLevelTimeLineIndex,
      _publicSkillGroupId,
      _publicSkillTimeLineIndex,
      _passiveSkillGroupId,
      _leaderSkillGroupId,
      _extraPassiveSkillGroupId,
      _hiddenPassiveSkillGroupId);
  }
}

public class CharacterSkillListExcelT
{
  public long CharacterSkillListGroupId { get; set; }
  public int MinimumGradeCharacterWeapon { get; set; }
  public int MinimumTierCharacterGear { get; set; }
  public int FormIndex { get; set; }
  public bool IsRootMotion { get; set; }
  public bool IsMoveLeftRight { get; set; }
  public bool UseRandomExSkillTimeline { get; set; }
  public long TSAInteractionId { get; set; }
  public List<string> NormalSkillGroupId { get; set; }
  public List<int> NormalSkillTimeLineIndex { get; set; }
  public int SelectExSkillActionSkillSlot { get; set; }
  public List<string> ExSkillGroupId { get; set; }
  public List<string> ExSkillCutInTimeLineIndex { get; set; }
  public List<string> ExSkillLevelTimeLineIndex { get; set; }
  public List<string> PublicSkillGroupId { get; set; }
  public List<int> PublicSkillTimeLineIndex { get; set; }
  public List<string> PassiveSkillGroupId { get; set; }
  public List<string> LeaderSkillGroupId { get; set; }
  public List<string> ExtraPassiveSkillGroupId { get; set; }
  public List<string> HiddenPassiveSkillGroupId { get; set; }

  public CharacterSkillListExcelT() {
    this.CharacterSkillListGroupId = 0;
    this.MinimumGradeCharacterWeapon = 0;
    this.MinimumTierCharacterGear = 0;
    this.FormIndex = 0;
    this.IsRootMotion = false;
    this.IsMoveLeftRight = false;
    this.UseRandomExSkillTimeline = false;
    this.TSAInteractionId = 0;
    this.NormalSkillGroupId = null;
    this.NormalSkillTimeLineIndex = null;
    this.SelectExSkillActionSkillSlot = 0;
    this.ExSkillGroupId = null;
    this.ExSkillCutInTimeLineIndex = null;
    this.ExSkillLevelTimeLineIndex = null;
    this.PublicSkillGroupId = null;
    this.PublicSkillTimeLineIndex = null;
    this.PassiveSkillGroupId = null;
    this.LeaderSkillGroupId = null;
    this.ExtraPassiveSkillGroupId = null;
    this.HiddenPassiveSkillGroupId = null;
  }
}


static public class CharacterSkillListExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterSkillListGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*MinimumGradeCharacterWeapon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MinimumTierCharacterGear*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*FormIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*IsRootMotion*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*IsMoveLeftRight*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*UseRandomExSkillTimeline*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*TSAInteractionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*NormalSkillGroupId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*NormalSkillTimeLineIndex*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 24 /*SelectExSkillActionSkillSlot*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*ExSkillGroupId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*ExSkillCutInTimeLineIndex*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*ExSkillLevelTimeLineIndex*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*PublicSkillGroupId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*PublicSkillTimeLineIndex*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*PassiveSkillGroupId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*LeaderSkillGroupId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*ExtraPassiveSkillGroupId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*HiddenPassiveSkillGroupId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
