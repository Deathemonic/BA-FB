// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct FieldInteractionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FieldInteractionExcel GetRootAsFieldInteractionExcel(ByteBuffer _bb) { return GetRootAsFieldInteractionExcel(_bb, new FieldInteractionExcel()); }
  public static FieldInteractionExcel GetRootAsFieldInteractionExcel(ByteBuffer _bb, FieldInteractionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldInteractionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long FieldSeasonId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FieldDateId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool ShowEmoji { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string KeywordLocalize { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeywordLocalizeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetKeywordLocalizeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetKeywordLocalizeArray() { return __p.__vector_as_array<byte>(12); }
  public Global.FieldInteractionType InteractionType(int j) { int o = __p.__offset(14); return o != 0 ? (Global.FieldInteractionType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.FieldInteractionType)0; }
  public int InteractionTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.FieldInteractionType> GetInteractionTypeBytes() { return __p.__vector_as_span<Global.FieldInteractionType>(14, 4); }
#else
  public ArraySegment<byte>? GetInteractionTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public Global.FieldInteractionType[] GetInteractionTypeArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.FieldInteractionType[] a = new Global.FieldInteractionType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.FieldInteractionType)__p.bb.GetInt(p + i * 4); } return a; }
  public long InteractionId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int InteractionIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetInteractionIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetInteractionIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetInteractionIdArray() { return __p.__vector_as_array<long>(16); }
  public Global.FieldConditionClass ConditionClass { get { int o = __p.__offset(18); return o != 0 ? (Global.FieldConditionClass)__p.bb.GetInt(o + __p.bb_pos) : Global.FieldConditionClass.AndOr; } }
  public long ConditionClassParameters(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionClassParametersLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionClassParametersBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetConditionClassParametersBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetConditionClassParametersArray() { return __p.__vector_as_array<long>(20); }
  public bool OnceOnly { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long ConditionIndex(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionIndexLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionIndexBytes() { return __p.__vector_as_span<long>(24, 8); }
#else
  public ArraySegment<byte>? GetConditionIndexBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public long[] GetConditionIndexArray() { return __p.__vector_as_array<long>(24); }
  public Global.FieldConditionType ConditionType(int j) { int o = __p.__offset(26); return o != 0 ? (Global.FieldConditionType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.FieldConditionType)0; }
  public int ConditionTypeLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.FieldConditionType> GetConditionTypeBytes() { return __p.__vector_as_span<Global.FieldConditionType>(26, 4); }
#else
  public ArraySegment<byte>? GetConditionTypeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public Global.FieldConditionType[] GetConditionTypeArray() { int o = __p.__offset(26); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.FieldConditionType[] a = new Global.FieldConditionType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.FieldConditionType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ConditionId(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ConditionIdLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetConditionIdBytes() { return __p.__vector_as_span<long>(28, 8); }
#else
  public ArraySegment<byte>? GetConditionIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public long[] GetConditionIdArray() { return __p.__vector_as_array<long>(28); }
  public bool NegateCondition(int j) { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int NegateConditionLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetNegateConditionBytes() { return __p.__vector_as_span<bool>(30, 1); }
#else
  public ArraySegment<byte>? GetNegateConditionBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public bool[] GetNegateConditionArray() { return __p.__vector_as_array<bool>(30); }

  public static Offset<Global.FieldInteractionExcel> CreateFieldInteractionExcel(FlatBufferBuilder builder,
      long FieldSeasonId = 0,
      long UniqueId = 0,
      long FieldDateId = 0,
      bool ShowEmoji = false,
      StringOffset KeywordLocalizeOffset = default(StringOffset),
      VectorOffset interactionTypeOffset = default(VectorOffset),
      VectorOffset interactionIdOffset = default(VectorOffset),
      Global.FieldConditionClass ConditionClass = Global.FieldConditionClass.AndOr,
      VectorOffset conditionClassParametersOffset = default(VectorOffset),
      bool OnceOnly = false,
      VectorOffset conditionIndexOffset = default(VectorOffset),
      VectorOffset conditionTypeOffset = default(VectorOffset),
      VectorOffset conditionIdOffset = default(VectorOffset),
      VectorOffset negateConditionOffset = default(VectorOffset)) {
    builder.StartTable(14);
    FieldInteractionExcel.AddFieldDateId(builder, FieldDateId);
    FieldInteractionExcel.AddUniqueId(builder, UniqueId);
    FieldInteractionExcel.AddFieldSeasonId(builder, FieldSeasonId);
    FieldInteractionExcel.AddNegateCondition(builder, negateConditionOffset);
    FieldInteractionExcel.AddConditionId(builder, conditionIdOffset);
    FieldInteractionExcel.AddConditionType(builder, conditionTypeOffset);
    FieldInteractionExcel.AddConditionIndex(builder, conditionIndexOffset);
    FieldInteractionExcel.AddConditionClassParameters(builder, conditionClassParametersOffset);
    FieldInteractionExcel.AddConditionClass(builder, ConditionClass);
    FieldInteractionExcel.AddInteractionId(builder, interactionIdOffset);
    FieldInteractionExcel.AddInteractionType(builder, interactionTypeOffset);
    FieldInteractionExcel.AddKeywordLocalize(builder, KeywordLocalizeOffset);
    FieldInteractionExcel.AddOnceOnly(builder, OnceOnly);
    FieldInteractionExcel.AddShowEmoji(builder, ShowEmoji);
    return FieldInteractionExcel.EndFieldInteractionExcel(builder);
  }

  public static void StartFieldInteractionExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddFieldSeasonId(FlatBufferBuilder builder, long fieldSeasonId) { builder.AddLong(0, fieldSeasonId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddFieldDateId(FlatBufferBuilder builder, long fieldDateId) { builder.AddLong(2, fieldDateId, 0); }
  public static void AddShowEmoji(FlatBufferBuilder builder, bool showEmoji) { builder.AddBool(3, showEmoji, false); }
  public static void AddKeywordLocalize(FlatBufferBuilder builder, StringOffset keywordLocalizeOffset) { builder.AddOffset(4, keywordLocalizeOffset.Value, 0); }
  public static void AddInteractionType(FlatBufferBuilder builder, VectorOffset interactionTypeOffset) { builder.AddOffset(5, interactionTypeOffset.Value, 0); }
  public static VectorOffset CreateInteractionTypeVector(FlatBufferBuilder builder, Global.FieldInteractionType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInteractionTypeVectorBlock(FlatBufferBuilder builder, Global.FieldInteractionType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.FieldInteractionType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.FieldInteractionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInteractionTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInteractionId(FlatBufferBuilder builder, VectorOffset interactionIdOffset) { builder.AddOffset(6, interactionIdOffset.Value, 0); }
  public static VectorOffset CreateInteractionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInteractionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInteractionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInteractionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConditionClass(FlatBufferBuilder builder, Global.FieldConditionClass conditionClass) { builder.AddInt(7, (int)conditionClass, 0); }
  public static void AddConditionClassParameters(FlatBufferBuilder builder, VectorOffset conditionClassParametersOffset) { builder.AddOffset(8, conditionClassParametersOffset.Value, 0); }
  public static VectorOffset CreateConditionClassParametersVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionClassParametersVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionClassParametersVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionClassParametersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionClassParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddOnceOnly(FlatBufferBuilder builder, bool onceOnly) { builder.AddBool(9, onceOnly, false); }
  public static void AddConditionIndex(FlatBufferBuilder builder, VectorOffset conditionIndexOffset) { builder.AddOffset(10, conditionIndexOffset.Value, 0); }
  public static VectorOffset CreateConditionIndexVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionIndexVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIndexVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIndexVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddConditionType(FlatBufferBuilder builder, VectorOffset conditionTypeOffset) { builder.AddOffset(11, conditionTypeOffset.Value, 0); }
  public static VectorOffset CreateConditionTypeVector(FlatBufferBuilder builder, Global.FieldConditionType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, Global.FieldConditionType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.FieldConditionType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.FieldConditionType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionId(FlatBufferBuilder builder, VectorOffset conditionIdOffset) { builder.AddOffset(12, conditionIdOffset.Value, 0); }
  public static VectorOffset CreateConditionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddNegateCondition(FlatBufferBuilder builder, VectorOffset negateConditionOffset) { builder.AddOffset(13, negateConditionOffset.Value, 0); }
  public static VectorOffset CreateNegateConditionVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNegateConditionVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNegateConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNegateConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNegateConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Global.FieldInteractionExcel> EndFieldInteractionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.FieldInteractionExcel>(o);
  }
  public FieldInteractionExcelT UnPack() {
    var _o = new FieldInteractionExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldInteractionExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("FieldInteraction");
    _o.FieldSeasonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FieldSeasonId, key) : this.FieldSeasonId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.FieldDateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FieldDateId, key) : this.FieldDateId;
    _o.ShowEmoji = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowEmoji, key) : this.ShowEmoji;
    _o.KeywordLocalize = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.KeywordLocalize, key) : this.KeywordLocalize;
    _o.InteractionType = new List<Global.FieldInteractionType>();
    for (var _j = 0; _j < this.InteractionTypeLength; ++_j) {_o.InteractionType.Add(TableEncryptionService.UseEncryption ? (Global.FieldInteractionType)TableEncryptionService.Convert((int)this.InteractionType(_j), key) : this.InteractionType(_j));}
    _o.InteractionId = new List<long>();
    for (var _j = 0; _j < this.InteractionIdLength; ++_j) {_o.InteractionId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.InteractionId(_j), key) : this.InteractionId(_j));}
    _o.ConditionClass = TableEncryptionService.UseEncryption ? (Global.FieldConditionClass)TableEncryptionService.Convert((int)this.ConditionClass, key) : this.ConditionClass;
    _o.ConditionClassParameters = new List<long>();
    for (var _j = 0; _j < this.ConditionClassParametersLength; ++_j) {_o.ConditionClassParameters.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionClassParameters(_j), key) : this.ConditionClassParameters(_j));}
    _o.OnceOnly = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.OnceOnly, key) : this.OnceOnly;
    _o.ConditionIndex = new List<long>();
    for (var _j = 0; _j < this.ConditionIndexLength; ++_j) {_o.ConditionIndex.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionIndex(_j), key) : this.ConditionIndex(_j));}
    _o.ConditionType = new List<Global.FieldConditionType>();
    for (var _j = 0; _j < this.ConditionTypeLength; ++_j) {_o.ConditionType.Add(TableEncryptionService.UseEncryption ? (Global.FieldConditionType)TableEncryptionService.Convert((int)this.ConditionType(_j), key) : this.ConditionType(_j));}
    _o.ConditionId = new List<long>();
    for (var _j = 0; _j < this.ConditionIdLength; ++_j) {_o.ConditionId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionId(_j), key) : this.ConditionId(_j));}
    _o.NegateCondition = new List<bool>();
    for (var _j = 0; _j < this.NegateConditionLength; ++_j) {_o.NegateCondition.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.NegateCondition(_j), key) : this.NegateCondition(_j));}
  }
  public static Offset<Global.FieldInteractionExcel> Pack(FlatBufferBuilder builder, FieldInteractionExcelT _o) {
    if (_o == null) return default(Offset<Global.FieldInteractionExcel>);
		byte[] key = TableEncryptionService.CreateKey("FieldInteraction");
		var _FieldSeasonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FieldSeasonId, key) : _o.FieldSeasonId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _FieldDateId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FieldDateId, key) : _o.FieldDateId;
		var _ShowEmoji = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowEmoji, key) : _o.ShowEmoji;
    var _KeywordLocalize = _o.KeywordLocalize == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.KeywordLocalize, key) : _o.KeywordLocalize));
    var _interactionType = default(VectorOffset);
    if (_o.InteractionType != null) {
      var __interactionType = _o.InteractionType.Select(x => TableEncryptionService.UseEncryption ? (Global.FieldInteractionType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _interactionType = CreateInteractionTypeVector(builder, __interactionType);
    }
    var _interactionId = default(VectorOffset);
    if (_o.InteractionId != null) {
      var __interactionId = _o.InteractionId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _interactionId = CreateInteractionIdVector(builder, __interactionId);
    }
		var _ConditionClass = TableEncryptionService.UseEncryption ? (Global.FieldConditionClass)TableEncryptionService.Convert((int)_o.ConditionClass, key) : _o.ConditionClass;
    var _conditionClassParameters = default(VectorOffset);
    if (_o.ConditionClassParameters != null) {
      var __conditionClassParameters = _o.ConditionClassParameters.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _conditionClassParameters = CreateConditionClassParametersVector(builder, __conditionClassParameters);
    }
		var _OnceOnly = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.OnceOnly, key) : _o.OnceOnly;
    var _conditionIndex = default(VectorOffset);
    if (_o.ConditionIndex != null) {
      var __conditionIndex = _o.ConditionIndex.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _conditionIndex = CreateConditionIndexVector(builder, __conditionIndex);
    }
    var _conditionType = default(VectorOffset);
    if (_o.ConditionType != null) {
      var __conditionType = _o.ConditionType.Select(x => TableEncryptionService.UseEncryption ? (Global.FieldConditionType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _conditionType = CreateConditionTypeVector(builder, __conditionType);
    }
    var _conditionId = default(VectorOffset);
    if (_o.ConditionId != null) {
      var __conditionId = _o.ConditionId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _conditionId = CreateConditionIdVector(builder, __conditionId);
    }
    var _negateCondition = default(VectorOffset);
    if (_o.NegateCondition != null) {
      var __negateCondition = _o.NegateCondition.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)x, key) : x).ToArray();
      _negateCondition = CreateNegateConditionVector(builder, __negateCondition);
    }
    return CreateFieldInteractionExcel(
      builder,
      TableEncryptionService.UseEncryption ? _FieldSeasonId : _o.FieldSeasonId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _FieldDateId : _o.FieldDateId,
      TableEncryptionService.UseEncryption ? _ShowEmoji : _o.ShowEmoji,
      _KeywordLocalize,
      _interactionType,
      _interactionId,
      TableEncryptionService.UseEncryption ? _ConditionClass : _o.ConditionClass,
      _conditionClassParameters,
      TableEncryptionService.UseEncryption ? _OnceOnly : _o.OnceOnly,
      _conditionIndex,
      _conditionType,
      _conditionId,
      _negateCondition);
  }
}

public class FieldInteractionExcelT
{
  public long FieldSeasonId { get; set; }
  public long UniqueId { get; set; }
  public long FieldDateId { get; set; }
  public bool ShowEmoji { get; set; }
  public string KeywordLocalize { get; set; }
  public List<Global.FieldInteractionType> InteractionType { get; set; }
  public List<long> InteractionId { get; set; }
  public Global.FieldConditionClass ConditionClass { get; set; }
  public List<long> ConditionClassParameters { get; set; }
  public bool OnceOnly { get; set; }
  public List<long> ConditionIndex { get; set; }
  public List<Global.FieldConditionType> ConditionType { get; set; }
  public List<long> ConditionId { get; set; }
  public List<bool> NegateCondition { get; set; }

  public FieldInteractionExcelT() {
    this.FieldSeasonId = 0;
    this.UniqueId = 0;
    this.FieldDateId = 0;
    this.ShowEmoji = false;
    this.KeywordLocalize = null;
    this.InteractionType = null;
    this.InteractionId = null;
    this.ConditionClass = Global.FieldConditionClass.AndOr;
    this.ConditionClassParameters = null;
    this.OnceOnly = false;
    this.ConditionIndex = null;
    this.ConditionType = null;
    this.ConditionId = null;
    this.NegateCondition = null;
  }
}


static public class FieldInteractionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*FieldSeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*FieldDateId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*ShowEmoji*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*KeywordLocalize*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*InteractionType*/, 4 /*Global.FieldInteractionType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*InteractionId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 18 /*ConditionClass*/, 4 /*Global.FieldConditionClass*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*ConditionClassParameters*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 22 /*OnceOnly*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 24 /*ConditionIndex*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*ConditionType*/, 4 /*Global.FieldConditionType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 28 /*ConditionId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*NegateCondition*/, 1 /*bool*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
