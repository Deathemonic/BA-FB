// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EliminateRaidStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EliminateRaidStageExcel GetRootAsEliminateRaidStageExcel(ByteBuffer _bb) { return GetRootAsEliminateRaidStageExcel(_bb, new EliminateRaidStageExcel()); }
  public static EliminateRaidStageExcel GetRootAsEliminateRaidStageExcel(ByteBuffer _bb, EliminateRaidStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EliminateRaidStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool UseBossIndex { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseBossAIPhaseSync { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string RaidBossGroup { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaidBossGroupBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRaidBossGroupBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRaidBossGroupArray() { return __p.__vector_as_array<byte>(10); }
  public Global.ParcelType RaidEnterCostType { get { int o = __p.__offset(12); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long RaidEnterCostId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RaidEnterCostAmount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BossSpinePath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBossSpinePathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBossSpinePathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBossSpinePathArray() { return __p.__vector_as_array<byte>(18); }
  public string PortraitPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPortraitPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPortraitPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPortraitPathArray() { return __p.__vector_as_array<byte>(20); }
  public string BGPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBGPathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetBGPathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetBGPathArray() { return __p.__vector_as_array<byte>(22); }
  public long RaidCharacterId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BossCharacterId(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BossCharacterIdLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBossCharacterIdBytes() { return __p.__vector_as_span<long>(26, 8); }
#else
  public ArraySegment<byte>? GetBossCharacterIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public long[] GetBossCharacterIdArray() { return __p.__vector_as_array<long>(26); }
  public Global.Difficulty Difficulty { get { int o = __p.__offset(28); return o != 0 ? (Global.Difficulty)__p.bb.GetInt(o + __p.bb_pos) : Global.Difficulty.Normal; } }
  public bool IsOpen { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long MaxPlayerCount { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RaidRoomLifeTime { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long BattleDuration { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroundId { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string GroundDevName { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundDevNameBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetGroundDevNameBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetGroundDevNameArray() { return __p.__vector_as_array<byte>(40); }
  public string EnterTimeLine { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnterTimeLineBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetEnterTimeLineBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetEnterTimeLineArray() { return __p.__vector_as_array<byte>(42); }
  public Global.TacticEnvironment TacticEnvironment { get { int o = __p.__offset(44); return o != 0 ? (Global.TacticEnvironment)__p.bb.GetInt(o + __p.bb_pos) : Global.TacticEnvironment.None; } }
  public long DefaultClearScore { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaximumScore { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PerSecondMinusScore { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long HPPercentScore { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MinimumAcquisitionScore { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaximumAcquisitionScore { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RaidRewardGroupId { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string BattleReadyTimelinePath(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BattleReadyTimelinePathLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BattleReadyTimelinePhaseStart(int j) { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BattleReadyTimelinePhaseStartLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBattleReadyTimelinePhaseStartBytes() { return __p.__vector_as_span<int>(62, 4); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePhaseStartBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public int[] GetBattleReadyTimelinePhaseStartArray() { return __p.__vector_as_array<int>(62); }
  public int BattleReadyTimelinePhaseEnd(int j) { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BattleReadyTimelinePhaseEndLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBattleReadyTimelinePhaseEndBytes() { return __p.__vector_as_span<int>(64, 4); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePhaseEndBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public int[] GetBattleReadyTimelinePhaseEndArray() { return __p.__vector_as_array<int>(64); }
  public string VictoryTimelinePath { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(66); }
  public string PhaseChangeTimelinePath { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhaseChangeTimelinePathBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetPhaseChangeTimelinePathBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetPhaseChangeTimelinePathArray() { return __p.__vector_as_array<byte>(68); }
  public long TimeLinePhase { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint EnterScenarioKey { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint ClearScenarioKey { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool ShowSkillCard { get { int o = __p.__offset(76); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint BossBGInfoKey { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Global.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(80); return o != 0 ? (Global.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : Global.EchelonExtensionType.Base; } }

  public static Offset<Global.EliminateRaidStageExcel> CreateEliminateRaidStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      bool UseBossIndex = false,
      bool UseBossAIPhaseSync = false,
      StringOffset RaidBossGroupOffset = default(StringOffset),
      Global.ParcelType RaidEnterCostType = Global.ParcelType.None,
      long RaidEnterCostId = 0,
      int RaidEnterCostAmount = 0,
      StringOffset BossSpinePathOffset = default(StringOffset),
      StringOffset PortraitPathOffset = default(StringOffset),
      StringOffset BGPathOffset = default(StringOffset),
      long RaidCharacterId = 0,
      VectorOffset BossCharacterIdOffset = default(VectorOffset),
      Global.Difficulty Difficulty = Global.Difficulty.Normal,
      bool IsOpen = false,
      long MaxPlayerCount = 0,
      int RaidRoomLifeTime = 0,
      long BattleDuration = 0,
      long GroundId = 0,
      StringOffset GroundDevNameOffset = default(StringOffset),
      StringOffset EnterTimeLineOffset = default(StringOffset),
      Global.TacticEnvironment TacticEnvironment = Global.TacticEnvironment.None,
      long DefaultClearScore = 0,
      long MaximumScore = 0,
      long PerSecondMinusScore = 0,
      long HPPercentScore = 0,
      long MinimumAcquisitionScore = 0,
      long MaximumAcquisitionScore = 0,
      long RaidRewardGroupId = 0,
      VectorOffset BattleReadyTimelinePathOffset = default(VectorOffset),
      VectorOffset BattleReadyTimelinePhaseStartOffset = default(VectorOffset),
      VectorOffset BattleReadyTimelinePhaseEndOffset = default(VectorOffset),
      StringOffset VictoryTimelinePathOffset = default(StringOffset),
      StringOffset PhaseChangeTimelinePathOffset = default(StringOffset),
      long TimeLinePhase = 0,
      uint EnterScenarioKey = 0,
      uint ClearScenarioKey = 0,
      bool ShowSkillCard = false,
      uint BossBGInfoKey = 0,
      Global.EchelonExtensionType EchelonExtensionType = Global.EchelonExtensionType.Base) {
    builder.StartTable(39);
    EliminateRaidStageExcel.AddTimeLinePhase(builder, TimeLinePhase);
    EliminateRaidStageExcel.AddRaidRewardGroupId(builder, RaidRewardGroupId);
    EliminateRaidStageExcel.AddMaximumAcquisitionScore(builder, MaximumAcquisitionScore);
    EliminateRaidStageExcel.AddMinimumAcquisitionScore(builder, MinimumAcquisitionScore);
    EliminateRaidStageExcel.AddHPPercentScore(builder, HPPercentScore);
    EliminateRaidStageExcel.AddPerSecondMinusScore(builder, PerSecondMinusScore);
    EliminateRaidStageExcel.AddMaximumScore(builder, MaximumScore);
    EliminateRaidStageExcel.AddDefaultClearScore(builder, DefaultClearScore);
    EliminateRaidStageExcel.AddGroundId(builder, GroundId);
    EliminateRaidStageExcel.AddBattleDuration(builder, BattleDuration);
    EliminateRaidStageExcel.AddMaxPlayerCount(builder, MaxPlayerCount);
    EliminateRaidStageExcel.AddRaidCharacterId(builder, RaidCharacterId);
    EliminateRaidStageExcel.AddRaidEnterCostId(builder, RaidEnterCostId);
    EliminateRaidStageExcel.AddId(builder, Id);
    EliminateRaidStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    EliminateRaidStageExcel.AddBossBGInfoKey(builder, BossBGInfoKey);
    EliminateRaidStageExcel.AddClearScenarioKey(builder, ClearScenarioKey);
    EliminateRaidStageExcel.AddEnterScenarioKey(builder, EnterScenarioKey);
    EliminateRaidStageExcel.AddPhaseChangeTimelinePath(builder, PhaseChangeTimelinePathOffset);
    EliminateRaidStageExcel.AddVictoryTimelinePath(builder, VictoryTimelinePathOffset);
    EliminateRaidStageExcel.AddBattleReadyTimelinePhaseEnd(builder, BattleReadyTimelinePhaseEndOffset);
    EliminateRaidStageExcel.AddBattleReadyTimelinePhaseStart(builder, BattleReadyTimelinePhaseStartOffset);
    EliminateRaidStageExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePathOffset);
    EliminateRaidStageExcel.AddTacticEnvironment(builder, TacticEnvironment);
    EliminateRaidStageExcel.AddEnterTimeLine(builder, EnterTimeLineOffset);
    EliminateRaidStageExcel.AddGroundDevName(builder, GroundDevNameOffset);
    EliminateRaidStageExcel.AddRaidRoomLifeTime(builder, RaidRoomLifeTime);
    EliminateRaidStageExcel.AddDifficulty(builder, Difficulty);
    EliminateRaidStageExcel.AddBossCharacterId(builder, BossCharacterIdOffset);
    EliminateRaidStageExcel.AddBGPath(builder, BGPathOffset);
    EliminateRaidStageExcel.AddPortraitPath(builder, PortraitPathOffset);
    EliminateRaidStageExcel.AddBossSpinePath(builder, BossSpinePathOffset);
    EliminateRaidStageExcel.AddRaidEnterCostAmount(builder, RaidEnterCostAmount);
    EliminateRaidStageExcel.AddRaidEnterCostType(builder, RaidEnterCostType);
    EliminateRaidStageExcel.AddRaidBossGroup(builder, RaidBossGroupOffset);
    EliminateRaidStageExcel.AddShowSkillCard(builder, ShowSkillCard);
    EliminateRaidStageExcel.AddIsOpen(builder, IsOpen);
    EliminateRaidStageExcel.AddUseBossAIPhaseSync(builder, UseBossAIPhaseSync);
    EliminateRaidStageExcel.AddUseBossIndex(builder, UseBossIndex);
    return EliminateRaidStageExcel.EndEliminateRaidStageExcel(builder);
  }

  public static void StartEliminateRaidStageExcel(FlatBufferBuilder builder) { builder.StartTable(39); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddUseBossIndex(FlatBufferBuilder builder, bool useBossIndex) { builder.AddBool(1, useBossIndex, false); }
  public static void AddUseBossAIPhaseSync(FlatBufferBuilder builder, bool useBossAIPhaseSync) { builder.AddBool(2, useBossAIPhaseSync, false); }
  public static void AddRaidBossGroup(FlatBufferBuilder builder, StringOffset raidBossGroupOffset) { builder.AddOffset(3, raidBossGroupOffset.Value, 0); }
  public static void AddRaidEnterCostType(FlatBufferBuilder builder, Global.ParcelType raidEnterCostType) { builder.AddInt(4, (int)raidEnterCostType, 0); }
  public static void AddRaidEnterCostId(FlatBufferBuilder builder, long raidEnterCostId) { builder.AddLong(5, raidEnterCostId, 0); }
  public static void AddRaidEnterCostAmount(FlatBufferBuilder builder, int raidEnterCostAmount) { builder.AddInt(6, raidEnterCostAmount, 0); }
  public static void AddBossSpinePath(FlatBufferBuilder builder, StringOffset bossSpinePathOffset) { builder.AddOffset(7, bossSpinePathOffset.Value, 0); }
  public static void AddPortraitPath(FlatBufferBuilder builder, StringOffset portraitPathOffset) { builder.AddOffset(8, portraitPathOffset.Value, 0); }
  public static void AddBGPath(FlatBufferBuilder builder, StringOffset bGPathOffset) { builder.AddOffset(9, bGPathOffset.Value, 0); }
  public static void AddRaidCharacterId(FlatBufferBuilder builder, long raidCharacterId) { builder.AddLong(10, raidCharacterId, 0); }
  public static void AddBossCharacterId(FlatBufferBuilder builder, VectorOffset bossCharacterIdOffset) { builder.AddOffset(11, bossCharacterIdOffset.Value, 0); }
  public static VectorOffset CreateBossCharacterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBossCharacterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddDifficulty(FlatBufferBuilder builder, Global.Difficulty difficulty) { builder.AddInt(12, (int)difficulty, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, bool isOpen) { builder.AddBool(13, isOpen, false); }
  public static void AddMaxPlayerCount(FlatBufferBuilder builder, long maxPlayerCount) { builder.AddLong(14, maxPlayerCount, 0); }
  public static void AddRaidRoomLifeTime(FlatBufferBuilder builder, int raidRoomLifeTime) { builder.AddInt(15, raidRoomLifeTime, 0); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(16, battleDuration, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(17, groundId, 0); }
  public static void AddGroundDevName(FlatBufferBuilder builder, StringOffset groundDevNameOffset) { builder.AddOffset(18, groundDevNameOffset.Value, 0); }
  public static void AddEnterTimeLine(FlatBufferBuilder builder, StringOffset enterTimeLineOffset) { builder.AddOffset(19, enterTimeLineOffset.Value, 0); }
  public static void AddTacticEnvironment(FlatBufferBuilder builder, Global.TacticEnvironment tacticEnvironment) { builder.AddInt(20, (int)tacticEnvironment, 0); }
  public static void AddDefaultClearScore(FlatBufferBuilder builder, long defaultClearScore) { builder.AddLong(21, defaultClearScore, 0); }
  public static void AddMaximumScore(FlatBufferBuilder builder, long maximumScore) { builder.AddLong(22, maximumScore, 0); }
  public static void AddPerSecondMinusScore(FlatBufferBuilder builder, long perSecondMinusScore) { builder.AddLong(23, perSecondMinusScore, 0); }
  public static void AddHPPercentScore(FlatBufferBuilder builder, long hPPercentScore) { builder.AddLong(24, hPPercentScore, 0); }
  public static void AddMinimumAcquisitionScore(FlatBufferBuilder builder, long minimumAcquisitionScore) { builder.AddLong(25, minimumAcquisitionScore, 0); }
  public static void AddMaximumAcquisitionScore(FlatBufferBuilder builder, long maximumAcquisitionScore) { builder.AddLong(26, maximumAcquisitionScore, 0); }
  public static void AddRaidRewardGroupId(FlatBufferBuilder builder, long raidRewardGroupId) { builder.AddLong(27, raidRewardGroupId, 0); }
  public static void AddBattleReadyTimelinePath(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePathOffset) { builder.AddOffset(28, battleReadyTimelinePathOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattleReadyTimelinePhaseStart(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePhaseStartOffset) { builder.AddOffset(29, battleReadyTimelinePhaseStartOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePhaseStartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattleReadyTimelinePhaseEnd(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePhaseEndOffset) { builder.AddOffset(30, battleReadyTimelinePhaseEndOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePhaseEndVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVictoryTimelinePath(FlatBufferBuilder builder, StringOffset victoryTimelinePathOffset) { builder.AddOffset(31, victoryTimelinePathOffset.Value, 0); }
  public static void AddPhaseChangeTimelinePath(FlatBufferBuilder builder, StringOffset phaseChangeTimelinePathOffset) { builder.AddOffset(32, phaseChangeTimelinePathOffset.Value, 0); }
  public static void AddTimeLinePhase(FlatBufferBuilder builder, long timeLinePhase) { builder.AddLong(33, timeLinePhase, 0); }
  public static void AddEnterScenarioKey(FlatBufferBuilder builder, uint enterScenarioKey) { builder.AddUint(34, enterScenarioKey, 0); }
  public static void AddClearScenarioKey(FlatBufferBuilder builder, uint clearScenarioKey) { builder.AddUint(35, clearScenarioKey, 0); }
  public static void AddShowSkillCard(FlatBufferBuilder builder, bool showSkillCard) { builder.AddBool(36, showSkillCard, false); }
  public static void AddBossBGInfoKey(FlatBufferBuilder builder, uint bossBGInfoKey) { builder.AddUint(37, bossBGInfoKey, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, Global.EchelonExtensionType echelonExtensionType) { builder.AddInt(38, (int)echelonExtensionType, 0); }
  public static Offset<Global.EliminateRaidStageExcel> EndEliminateRaidStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EliminateRaidStageExcel>(o);
  }
  public EliminateRaidStageExcelT UnPack() {
    var _o = new EliminateRaidStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EliminateRaidStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EliminateRaidStage");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.UseBossIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UseBossIndex, key) : this.UseBossIndex;
    _o.UseBossAIPhaseSync = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UseBossAIPhaseSync, key) : this.UseBossAIPhaseSync;
    _o.RaidBossGroup = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.RaidBossGroup, key) : this.RaidBossGroup;
    _o.RaidEnterCostType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.RaidEnterCostType, key) : this.RaidEnterCostType;
    _o.RaidEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RaidEnterCostId, key) : this.RaidEnterCostId;
    _o.RaidEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RaidEnterCostAmount, key) : this.RaidEnterCostAmount;
    _o.BossSpinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BossSpinePath, key) : this.BossSpinePath;
    _o.PortraitPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PortraitPath, key) : this.PortraitPath;
    _o.BGPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BGPath, key) : this.BGPath;
    _o.RaidCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RaidCharacterId, key) : this.RaidCharacterId;
    _o.BossCharacterId = new List<long>();
    for (var _j = 0; _j < this.BossCharacterIdLength; ++_j) {_o.BossCharacterId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BossCharacterId(_j), key) : this.BossCharacterId(_j));}
    _o.Difficulty = TableEncryptionService.UseEncryption ? (Global.Difficulty)TableEncryptionService.Convert((int)this.Difficulty, key) : this.Difficulty;
    _o.IsOpen = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsOpen, key) : this.IsOpen;
    _o.MaxPlayerCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaxPlayerCount, key) : this.MaxPlayerCount;
    _o.RaidRoomLifeTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RaidRoomLifeTime, key) : this.RaidRoomLifeTime;
    _o.BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattleDuration, key) : this.BattleDuration;
    _o.GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundId, key) : this.GroundId;
    _o.GroundDevName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.GroundDevName, key) : this.GroundDevName;
    _o.EnterTimeLine = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EnterTimeLine, key) : this.EnterTimeLine;
    _o.TacticEnvironment = TableEncryptionService.UseEncryption ? (Global.TacticEnvironment)TableEncryptionService.Convert((int)this.TacticEnvironment, key) : this.TacticEnvironment;
    _o.DefaultClearScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DefaultClearScore, key) : this.DefaultClearScore;
    _o.MaximumScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaximumScore, key) : this.MaximumScore;
    _o.PerSecondMinusScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PerSecondMinusScore, key) : this.PerSecondMinusScore;
    _o.HPPercentScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.HPPercentScore, key) : this.HPPercentScore;
    _o.MinimumAcquisitionScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MinimumAcquisitionScore, key) : this.MinimumAcquisitionScore;
    _o.MaximumAcquisitionScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.MaximumAcquisitionScore, key) : this.MaximumAcquisitionScore;
    _o.RaidRewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RaidRewardGroupId, key) : this.RaidRewardGroupId;
    _o.BattleReadyTimelinePath = new List<string>();
    for (var _j = 0; _j < this.BattleReadyTimelinePathLength; ++_j) {_o.BattleReadyTimelinePath.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BattleReadyTimelinePath(_j), key) : this.BattleReadyTimelinePath(_j));}
    _o.BattleReadyTimelinePhaseStart = new List<int>();
    for (var _j = 0; _j < this.BattleReadyTimelinePhaseStartLength; ++_j) {_o.BattleReadyTimelinePhaseStart.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BattleReadyTimelinePhaseStart(_j), key) : this.BattleReadyTimelinePhaseStart(_j));}
    _o.BattleReadyTimelinePhaseEnd = new List<int>();
    for (var _j = 0; _j < this.BattleReadyTimelinePhaseEndLength; ++_j) {_o.BattleReadyTimelinePhaseEnd.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BattleReadyTimelinePhaseEnd(_j), key) : this.BattleReadyTimelinePhaseEnd(_j));}
    _o.VictoryTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.VictoryTimelinePath, key) : this.VictoryTimelinePath;
    _o.PhaseChangeTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PhaseChangeTimelinePath, key) : this.PhaseChangeTimelinePath;
    _o.TimeLinePhase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TimeLinePhase, key) : this.TimeLinePhase;
    _o.EnterScenarioKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.EnterScenarioKey, key) : this.EnterScenarioKey;
    _o.ClearScenarioKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.ClearScenarioKey, key) : this.ClearScenarioKey;
    _o.ShowSkillCard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowSkillCard, key) : this.ShowSkillCard;
    _o.BossBGInfoKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.BossBGInfoKey, key) : this.BossBGInfoKey;
    _o.EchelonExtensionType = TableEncryptionService.UseEncryption ? (Global.EchelonExtensionType)TableEncryptionService.Convert((int)this.EchelonExtensionType, key) : this.EchelonExtensionType;
  }
  public static Offset<Global.EliminateRaidStageExcel> Pack(FlatBufferBuilder builder, EliminateRaidStageExcelT _o) {
    if (_o == null) return default(Offset<Global.EliminateRaidStageExcel>);
		byte[] key = TableEncryptionService.CreateKey("EliminateRaidStage");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _UseBossIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UseBossIndex, key) : _o.UseBossIndex;
		var _UseBossAIPhaseSync = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UseBossAIPhaseSync, key) : _o.UseBossAIPhaseSync;
    var _RaidBossGroup = _o.RaidBossGroup == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.RaidBossGroup, key) : _o.RaidBossGroup));
		var _RaidEnterCostType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.RaidEnterCostType, key) : _o.RaidEnterCostType;
		var _RaidEnterCostId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RaidEnterCostId, key) : _o.RaidEnterCostId;
		var _RaidEnterCostAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RaidEnterCostAmount, key) : _o.RaidEnterCostAmount;
    var _BossSpinePath = _o.BossSpinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BossSpinePath, key) : _o.BossSpinePath));
    var _PortraitPath = _o.PortraitPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PortraitPath, key) : _o.PortraitPath));
    var _BGPath = _o.BGPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BGPath, key) : _o.BGPath));
		var _RaidCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RaidCharacterId, key) : _o.RaidCharacterId;
    var _BossCharacterId = default(VectorOffset);
    if (_o.BossCharacterId != null) {
      var __BossCharacterId = _o.BossCharacterId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _BossCharacterId = CreateBossCharacterIdVector(builder, __BossCharacterId);
    }
		var _Difficulty = TableEncryptionService.UseEncryption ? (Global.Difficulty)TableEncryptionService.Convert((int)_o.Difficulty, key) : _o.Difficulty;
		var _IsOpen = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsOpen, key) : _o.IsOpen;
		var _MaxPlayerCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaxPlayerCount, key) : _o.MaxPlayerCount;
		var _RaidRoomLifeTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RaidRoomLifeTime, key) : _o.RaidRoomLifeTime;
		var _BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattleDuration, key) : _o.BattleDuration;
		var _GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundId, key) : _o.GroundId;
    var _GroundDevName = _o.GroundDevName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.GroundDevName, key) : _o.GroundDevName));
    var _EnterTimeLine = _o.EnterTimeLine == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EnterTimeLine, key) : _o.EnterTimeLine));
		var _TacticEnvironment = TableEncryptionService.UseEncryption ? (Global.TacticEnvironment)TableEncryptionService.Convert((int)_o.TacticEnvironment, key) : _o.TacticEnvironment;
		var _DefaultClearScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DefaultClearScore, key) : _o.DefaultClearScore;
		var _MaximumScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaximumScore, key) : _o.MaximumScore;
		var _PerSecondMinusScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PerSecondMinusScore, key) : _o.PerSecondMinusScore;
		var _HPPercentScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.HPPercentScore, key) : _o.HPPercentScore;
		var _MinimumAcquisitionScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MinimumAcquisitionScore, key) : _o.MinimumAcquisitionScore;
		var _MaximumAcquisitionScore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.MaximumAcquisitionScore, key) : _o.MaximumAcquisitionScore;
		var _RaidRewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RaidRewardGroupId, key) : _o.RaidRewardGroupId;
    var _BattleReadyTimelinePath = default(VectorOffset);
    if (_o.BattleReadyTimelinePath != null) {
      var __BattleReadyTimelinePath = new StringOffset[_o.BattleReadyTimelinePath.Count];
      for (var _j = 0; _j < __BattleReadyTimelinePath.Length; ++_j) { __BattleReadyTimelinePath[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BattleReadyTimelinePath[_j], key) : _o.BattleReadyTimelinePath[_j])); }
      _BattleReadyTimelinePath = CreateBattleReadyTimelinePathVector(builder, __BattleReadyTimelinePath);
    }
    var _BattleReadyTimelinePhaseStart = default(VectorOffset);
    if (_o.BattleReadyTimelinePhaseStart != null) {
      var __BattleReadyTimelinePhaseStart = _o.BattleReadyTimelinePhaseStart.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _BattleReadyTimelinePhaseStart = CreateBattleReadyTimelinePhaseStartVector(builder, __BattleReadyTimelinePhaseStart);
    }
    var _BattleReadyTimelinePhaseEnd = default(VectorOffset);
    if (_o.BattleReadyTimelinePhaseEnd != null) {
      var __BattleReadyTimelinePhaseEnd = _o.BattleReadyTimelinePhaseEnd.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _BattleReadyTimelinePhaseEnd = CreateBattleReadyTimelinePhaseEndVector(builder, __BattleReadyTimelinePhaseEnd);
    }
    var _VictoryTimelinePath = _o.VictoryTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.VictoryTimelinePath, key) : _o.VictoryTimelinePath));
    var _PhaseChangeTimelinePath = _o.PhaseChangeTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PhaseChangeTimelinePath, key) : _o.PhaseChangeTimelinePath));
		var _TimeLinePhase = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TimeLinePhase, key) : _o.TimeLinePhase;
		var _EnterScenarioKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.EnterScenarioKey, key) : _o.EnterScenarioKey;
		var _ClearScenarioKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.ClearScenarioKey, key) : _o.ClearScenarioKey;
		var _ShowSkillCard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowSkillCard, key) : _o.ShowSkillCard;
		var _BossBGInfoKey = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.BossBGInfoKey, key) : _o.BossBGInfoKey;
		var _EchelonExtensionType = TableEncryptionService.UseEncryption ? (Global.EchelonExtensionType)TableEncryptionService.Convert((int)_o.EchelonExtensionType, key) : _o.EchelonExtensionType;
    return CreateEliminateRaidStageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _UseBossIndex : _o.UseBossIndex,
      TableEncryptionService.UseEncryption ? _UseBossAIPhaseSync : _o.UseBossAIPhaseSync,
      _RaidBossGroup,
      TableEncryptionService.UseEncryption ? _RaidEnterCostType : _o.RaidEnterCostType,
      TableEncryptionService.UseEncryption ? _RaidEnterCostId : _o.RaidEnterCostId,
      TableEncryptionService.UseEncryption ? _RaidEnterCostAmount : _o.RaidEnterCostAmount,
      _BossSpinePath,
      _PortraitPath,
      _BGPath,
      TableEncryptionService.UseEncryption ? _RaidCharacterId : _o.RaidCharacterId,
      _BossCharacterId,
      TableEncryptionService.UseEncryption ? _Difficulty : _o.Difficulty,
      TableEncryptionService.UseEncryption ? _IsOpen : _o.IsOpen,
      TableEncryptionService.UseEncryption ? _MaxPlayerCount : _o.MaxPlayerCount,
      TableEncryptionService.UseEncryption ? _RaidRoomLifeTime : _o.RaidRoomLifeTime,
      TableEncryptionService.UseEncryption ? _BattleDuration : _o.BattleDuration,
      TableEncryptionService.UseEncryption ? _GroundId : _o.GroundId,
      _GroundDevName,
      _EnterTimeLine,
      TableEncryptionService.UseEncryption ? _TacticEnvironment : _o.TacticEnvironment,
      TableEncryptionService.UseEncryption ? _DefaultClearScore : _o.DefaultClearScore,
      TableEncryptionService.UseEncryption ? _MaximumScore : _o.MaximumScore,
      TableEncryptionService.UseEncryption ? _PerSecondMinusScore : _o.PerSecondMinusScore,
      TableEncryptionService.UseEncryption ? _HPPercentScore : _o.HPPercentScore,
      TableEncryptionService.UseEncryption ? _MinimumAcquisitionScore : _o.MinimumAcquisitionScore,
      TableEncryptionService.UseEncryption ? _MaximumAcquisitionScore : _o.MaximumAcquisitionScore,
      TableEncryptionService.UseEncryption ? _RaidRewardGroupId : _o.RaidRewardGroupId,
      _BattleReadyTimelinePath,
      _BattleReadyTimelinePhaseStart,
      _BattleReadyTimelinePhaseEnd,
      _VictoryTimelinePath,
      _PhaseChangeTimelinePath,
      TableEncryptionService.UseEncryption ? _TimeLinePhase : _o.TimeLinePhase,
      TableEncryptionService.UseEncryption ? _EnterScenarioKey : _o.EnterScenarioKey,
      TableEncryptionService.UseEncryption ? _ClearScenarioKey : _o.ClearScenarioKey,
      TableEncryptionService.UseEncryption ? _ShowSkillCard : _o.ShowSkillCard,
      TableEncryptionService.UseEncryption ? _BossBGInfoKey : _o.BossBGInfoKey,
      TableEncryptionService.UseEncryption ? _EchelonExtensionType : _o.EchelonExtensionType);
  }
}

public class EliminateRaidStageExcelT
{
  public long Id { get; set; }
  public bool UseBossIndex { get; set; }
  public bool UseBossAIPhaseSync { get; set; }
  public string RaidBossGroup { get; set; }
  public Global.ParcelType RaidEnterCostType { get; set; }
  public long RaidEnterCostId { get; set; }
  public int RaidEnterCostAmount { get; set; }
  public string BossSpinePath { get; set; }
  public string PortraitPath { get; set; }
  public string BGPath { get; set; }
  public long RaidCharacterId { get; set; }
  public List<long> BossCharacterId { get; set; }
  public Global.Difficulty Difficulty { get; set; }
  public bool IsOpen { get; set; }
  public long MaxPlayerCount { get; set; }
  public int RaidRoomLifeTime { get; set; }
  public long BattleDuration { get; set; }
  public long GroundId { get; set; }
  public string GroundDevName { get; set; }
  public string EnterTimeLine { get; set; }
  public Global.TacticEnvironment TacticEnvironment { get; set; }
  public long DefaultClearScore { get; set; }
  public long MaximumScore { get; set; }
  public long PerSecondMinusScore { get; set; }
  public long HPPercentScore { get; set; }
  public long MinimumAcquisitionScore { get; set; }
  public long MaximumAcquisitionScore { get; set; }
  public long RaidRewardGroupId { get; set; }
  public List<string> BattleReadyTimelinePath { get; set; }
  public List<int> BattleReadyTimelinePhaseStart { get; set; }
  public List<int> BattleReadyTimelinePhaseEnd { get; set; }
  public string VictoryTimelinePath { get; set; }
  public string PhaseChangeTimelinePath { get; set; }
  public long TimeLinePhase { get; set; }
  public uint EnterScenarioKey { get; set; }
  public uint ClearScenarioKey { get; set; }
  public bool ShowSkillCard { get; set; }
  public uint BossBGInfoKey { get; set; }
  public Global.EchelonExtensionType EchelonExtensionType { get; set; }

  public EliminateRaidStageExcelT() {
    this.Id = 0;
    this.UseBossIndex = false;
    this.UseBossAIPhaseSync = false;
    this.RaidBossGroup = null;
    this.RaidEnterCostType = Global.ParcelType.None;
    this.RaidEnterCostId = 0;
    this.RaidEnterCostAmount = 0;
    this.BossSpinePath = null;
    this.PortraitPath = null;
    this.BGPath = null;
    this.RaidCharacterId = 0;
    this.BossCharacterId = null;
    this.Difficulty = Global.Difficulty.Normal;
    this.IsOpen = false;
    this.MaxPlayerCount = 0;
    this.RaidRoomLifeTime = 0;
    this.BattleDuration = 0;
    this.GroundId = 0;
    this.GroundDevName = null;
    this.EnterTimeLine = null;
    this.TacticEnvironment = Global.TacticEnvironment.None;
    this.DefaultClearScore = 0;
    this.MaximumScore = 0;
    this.PerSecondMinusScore = 0;
    this.HPPercentScore = 0;
    this.MinimumAcquisitionScore = 0;
    this.MaximumAcquisitionScore = 0;
    this.RaidRewardGroupId = 0;
    this.BattleReadyTimelinePath = null;
    this.BattleReadyTimelinePhaseStart = null;
    this.BattleReadyTimelinePhaseEnd = null;
    this.VictoryTimelinePath = null;
    this.PhaseChangeTimelinePath = null;
    this.TimeLinePhase = 0;
    this.EnterScenarioKey = 0;
    this.ClearScenarioKey = 0;
    this.ShowSkillCard = false;
    this.BossBGInfoKey = 0;
    this.EchelonExtensionType = Global.EchelonExtensionType.Base;
  }
}


static public class EliminateRaidStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UseBossIndex*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*UseBossAIPhaseSync*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*RaidBossGroup*/, false)
      && verifier.VerifyField(tablePos, 12 /*RaidEnterCostType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RaidEnterCostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*RaidEnterCostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*BossSpinePath*/, false)
      && verifier.VerifyString(tablePos, 20 /*PortraitPath*/, false)
      && verifier.VerifyString(tablePos, 22 /*BGPath*/, false)
      && verifier.VerifyField(tablePos, 24 /*RaidCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 26 /*BossCharacterId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 28 /*Difficulty*/, 4 /*Global.Difficulty*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*IsOpen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*MaxPlayerCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*RaidRoomLifeTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 40 /*GroundDevName*/, false)
      && verifier.VerifyString(tablePos, 42 /*EnterTimeLine*/, false)
      && verifier.VerifyField(tablePos, 44 /*TacticEnvironment*/, 4 /*Global.TacticEnvironment*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*DefaultClearScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*MaximumScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*PerSecondMinusScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*HPPercentScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*MinimumAcquisitionScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*MaximumAcquisitionScore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*RaidRewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*BattleReadyTimelinePath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 62 /*BattleReadyTimelinePhaseStart*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 64 /*BattleReadyTimelinePhaseEnd*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 66 /*VictoryTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 68 /*PhaseChangeTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 70 /*TimeLinePhase*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*EnterScenarioKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*ClearScenarioKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*ShowSkillCard*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 78 /*BossBGInfoKey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*EchelonExtensionType*/, 4 /*Global.EchelonExtensionType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
