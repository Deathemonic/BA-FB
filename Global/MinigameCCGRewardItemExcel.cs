// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGRewardItemExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGRewardItemExcel GetRootAsMinigameCCGRewardItemExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGRewardItemExcel(_bb, new MinigameCCGRewardItemExcel()); }
  public static MinigameCCGRewardItemExcel GetRootAsMinigameCCGRewardItemExcel(ByteBuffer _bb, MinigameCCGRewardItemExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGRewardItemExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CCGId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MinPoint { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Global.ParcelType RewardParcelType { get { int o = __p.__offset(10); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int RewardParcelAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long DisplayOrder { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.MinigameCCGRewardItemExcel> CreateMinigameCCGRewardItemExcel(FlatBufferBuilder builder,
      long Id = 0,
      long CCGId = 0,
      int MinPoint = 0,
      Global.ParcelType RewardParcelType = Global.ParcelType.None,
      long RewardParcelId = 0,
      int RewardParcelAmount = 0,
      long DisplayOrder = 0) {
    builder.StartTable(7);
    MinigameCCGRewardItemExcel.AddDisplayOrder(builder, DisplayOrder);
    MinigameCCGRewardItemExcel.AddRewardParcelId(builder, RewardParcelId);
    MinigameCCGRewardItemExcel.AddCCGId(builder, CCGId);
    MinigameCCGRewardItemExcel.AddId(builder, Id);
    MinigameCCGRewardItemExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    MinigameCCGRewardItemExcel.AddRewardParcelType(builder, RewardParcelType);
    MinigameCCGRewardItemExcel.AddMinPoint(builder, MinPoint);
    return MinigameCCGRewardItemExcel.EndMinigameCCGRewardItemExcel(builder);
  }

  public static void StartMinigameCCGRewardItemExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddCCGId(FlatBufferBuilder builder, long cCGId) { builder.AddLong(1, cCGId, 0); }
  public static void AddMinPoint(FlatBufferBuilder builder, int minPoint) { builder.AddInt(2, minPoint, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, Global.ParcelType rewardParcelType) { builder.AddInt(3, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(4, rewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, int rewardParcelAmount) { builder.AddInt(5, rewardParcelAmount, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(6, displayOrder, 0); }
  public static Offset<Global.MinigameCCGRewardItemExcel> EndMinigameCCGRewardItemExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MinigameCCGRewardItemExcel>(o);
  }
  public MinigameCCGRewardItemExcelT UnPack() {
    var _o = new MinigameCCGRewardItemExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGRewardItemExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGRewardItem");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CCGId, key) : this.CCGId;
    _o.MinPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MinPoint, key) : this.MinPoint;
    _o.RewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType, key) : this.RewardParcelType;
    _o.RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId, key) : this.RewardParcelId;
    _o.RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RewardParcelAmount, key) : this.RewardParcelAmount;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
  }
  public static Offset<Global.MinigameCCGRewardItemExcel> Pack(FlatBufferBuilder builder, MinigameCCGRewardItemExcelT _o) {
    if (_o == null) return default(Offset<Global.MinigameCCGRewardItemExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGRewardItem");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _CCGId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CCGId, key) : _o.CCGId;
		var _MinPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MinPoint, key) : _o.MinPoint;
		var _RewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.RewardParcelType, key) : _o.RewardParcelType;
		var _RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelId, key) : _o.RewardParcelId;
		var _RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.RewardParcelAmount, key) : _o.RewardParcelAmount;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
    return CreateMinigameCCGRewardItemExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _CCGId : _o.CCGId,
      TableEncryptionService.UseEncryption ? _MinPoint : _o.MinPoint,
      TableEncryptionService.UseEncryption ? _RewardParcelType : _o.RewardParcelType,
      TableEncryptionService.UseEncryption ? _RewardParcelId : _o.RewardParcelId,
      TableEncryptionService.UseEncryption ? _RewardParcelAmount : _o.RewardParcelAmount,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder);
  }
}

public class MinigameCCGRewardItemExcelT
{
  public long Id { get; set; }
  public long CCGId { get; set; }
  public int MinPoint { get; set; }
  public Global.ParcelType RewardParcelType { get; set; }
  public long RewardParcelId { get; set; }
  public int RewardParcelAmount { get; set; }
  public long DisplayOrder { get; set; }

  public MinigameCCGRewardItemExcelT() {
    this.Id = 0;
    this.CCGId = 0;
    this.MinPoint = 0;
    this.RewardParcelType = Global.ParcelType.None;
    this.RewardParcelId = 0;
    this.RewardParcelAmount = 0;
    this.DisplayOrder = 0;
  }
}


static public class MinigameCCGRewardItemExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CCGId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*MinPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RewardParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*RewardParcelAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
