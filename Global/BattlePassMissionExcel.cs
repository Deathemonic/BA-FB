// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattlePassMissionExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassMissionExcel GetRootAsBattlePassMissionExcel(ByteBuffer _bb) { return GetRootAsBattlePassMissionExcel(_bb, new BattlePassMissionExcel()); }
  public static BattlePassMissionExcel GetRootAsBattlePassMissionExcel(ByteBuffer _bb, BattlePassMissionExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassMissionExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long BattlePassId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.MissionCategory Category { get { int o = __p.__offset(8); return o != 0 ? (Global.MissionCategory)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionCategory.Challenge; } }
  public long PreMissionId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int PreMissionIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetPreMissionIdBytes() { return __p.__vector_as_span<long>(10, 8); }
#else
  public ArraySegment<byte>? GetPreMissionIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetPreMissionIdArray() { return __p.__vector_as_array<long>(10); }
  public uint Description { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Global.MissionResetType ResetType { get { int o = __p.__offset(14); return o != 0 ? (Global.MissionResetType)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionResetType.None; } }
  public Global.MissionToastDisplayConditionType ToastDisplayType { get { int o = __p.__offset(16); return o != 0 ? (Global.MissionToastDisplayConditionType)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionToastDisplayConditionType.Always; } }
  public string ToastImagePath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetToastImagePathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetToastImagePathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetToastImagePathArray() { return __p.__vector_as_array<byte>(18); }
  public bool ViewFlag { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long DisplayOrder { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ShortcutUI(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ShortcutUILength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long ChallengeStageShortcut { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.MissionCompleteConditionType CompleteConditionType { get { int o = __p.__offset(28); return o != 0 ? (Global.MissionCompleteConditionType)__p.bb.GetInt(o + __p.bb_pos) : Global.MissionCompleteConditionType.None; } }
  public long CompleteConditionCount { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CompleteConditionParameter(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int CompleteConditionParameterLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetCompleteConditionParameterBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetCompleteConditionParameterBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetCompleteConditionParameterArray() { return __p.__vector_as_array<long>(32); }
  public Global.Tag CompleteConditionParameterTag(int j) { int o = __p.__offset(34); return o != 0 ? (Global.Tag)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.Tag)0; }
  public int CompleteConditionParameterTagLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.Tag> GetCompleteConditionParameterTagBytes() { return __p.__vector_as_span<Global.Tag>(34, 4); }
#else
  public ArraySegment<byte>? GetCompleteConditionParameterTagBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public Global.Tag[] GetCompleteConditionParameterTagArray() { int o = __p.__offset(34); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.Tag[] a = new Global.Tag[l]; for (int i = 0; i < l; i++) { a[i] = (Global.Tag)__p.bb.GetInt(p + i * 4); } return a; }
  public int BattlePassExpAmount { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Global.BattlePassMissionExcel> CreateBattlePassMissionExcel(FlatBufferBuilder builder,
      long BattlePassId = 0,
      long Id = 0,
      Global.MissionCategory Category = Global.MissionCategory.Challenge,
      VectorOffset PreMissionIdOffset = default(VectorOffset),
      uint Description = 0,
      Global.MissionResetType ResetType = Global.MissionResetType.None,
      Global.MissionToastDisplayConditionType ToastDisplayType = Global.MissionToastDisplayConditionType.Always,
      StringOffset ToastImagePathOffset = default(StringOffset),
      bool ViewFlag = false,
      long DisplayOrder = 0,
      VectorOffset ShortcutUIOffset = default(VectorOffset),
      long ChallengeStageShortcut = 0,
      Global.MissionCompleteConditionType CompleteConditionType = Global.MissionCompleteConditionType.None,
      long CompleteConditionCount = 0,
      VectorOffset CompleteConditionParameterOffset = default(VectorOffset),
      VectorOffset CompleteConditionParameterTagOffset = default(VectorOffset),
      int BattlePassExpAmount = 0) {
    builder.StartTable(17);
    BattlePassMissionExcel.AddCompleteConditionCount(builder, CompleteConditionCount);
    BattlePassMissionExcel.AddChallengeStageShortcut(builder, ChallengeStageShortcut);
    BattlePassMissionExcel.AddDisplayOrder(builder, DisplayOrder);
    BattlePassMissionExcel.AddId(builder, Id);
    BattlePassMissionExcel.AddBattlePassId(builder, BattlePassId);
    BattlePassMissionExcel.AddBattlePassExpAmount(builder, BattlePassExpAmount);
    BattlePassMissionExcel.AddCompleteConditionParameterTag(builder, CompleteConditionParameterTagOffset);
    BattlePassMissionExcel.AddCompleteConditionParameter(builder, CompleteConditionParameterOffset);
    BattlePassMissionExcel.AddCompleteConditionType(builder, CompleteConditionType);
    BattlePassMissionExcel.AddShortcutUI(builder, ShortcutUIOffset);
    BattlePassMissionExcel.AddToastImagePath(builder, ToastImagePathOffset);
    BattlePassMissionExcel.AddToastDisplayType(builder, ToastDisplayType);
    BattlePassMissionExcel.AddResetType(builder, ResetType);
    BattlePassMissionExcel.AddDescription(builder, Description);
    BattlePassMissionExcel.AddPreMissionId(builder, PreMissionIdOffset);
    BattlePassMissionExcel.AddCategory(builder, Category);
    BattlePassMissionExcel.AddViewFlag(builder, ViewFlag);
    return BattlePassMissionExcel.EndBattlePassMissionExcel(builder);
  }

  public static void StartBattlePassMissionExcel(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddBattlePassId(FlatBufferBuilder builder, long battlePassId) { builder.AddLong(0, battlePassId, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddCategory(FlatBufferBuilder builder, Global.MissionCategory category) { builder.AddInt(2, (int)category, 0); }
  public static void AddPreMissionId(FlatBufferBuilder builder, VectorOffset preMissionIdOffset) { builder.AddOffset(3, preMissionIdOffset.Value, 0); }
  public static VectorOffset CreatePreMissionIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePreMissionIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPreMissionIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddDescription(FlatBufferBuilder builder, uint description) { builder.AddUint(4, description, 0); }
  public static void AddResetType(FlatBufferBuilder builder, Global.MissionResetType resetType) { builder.AddInt(5, (int)resetType, 0); }
  public static void AddToastDisplayType(FlatBufferBuilder builder, Global.MissionToastDisplayConditionType toastDisplayType) { builder.AddInt(6, (int)toastDisplayType, 0); }
  public static void AddToastImagePath(FlatBufferBuilder builder, StringOffset toastImagePathOffset) { builder.AddOffset(7, toastImagePathOffset.Value, 0); }
  public static void AddViewFlag(FlatBufferBuilder builder, bool viewFlag) { builder.AddBool(8, viewFlag, false); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(9, displayOrder, 0); }
  public static void AddShortcutUI(FlatBufferBuilder builder, VectorOffset shortcutUIOffset) { builder.AddOffset(10, shortcutUIOffset.Value, 0); }
  public static VectorOffset CreateShortcutUIVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateShortcutUIVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartShortcutUIVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChallengeStageShortcut(FlatBufferBuilder builder, long challengeStageShortcut) { builder.AddLong(11, challengeStageShortcut, 0); }
  public static void AddCompleteConditionType(FlatBufferBuilder builder, Global.MissionCompleteConditionType completeConditionType) { builder.AddInt(12, (int)completeConditionType, 0); }
  public static void AddCompleteConditionCount(FlatBufferBuilder builder, long completeConditionCount) { builder.AddLong(13, completeConditionCount, 0); }
  public static void AddCompleteConditionParameter(FlatBufferBuilder builder, VectorOffset completeConditionParameterOffset) { builder.AddOffset(14, completeConditionParameterOffset.Value, 0); }
  public static VectorOffset CreateCompleteConditionParameterVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompleteConditionParameterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddCompleteConditionParameterTag(FlatBufferBuilder builder, VectorOffset completeConditionParameterTagOffset) { builder.AddOffset(15, completeConditionParameterTagOffset.Value, 0); }
  public static VectorOffset CreateCompleteConditionParameterTagVector(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, Global.Tag[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.Tag> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompleteConditionParameterTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.Tag>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompleteConditionParameterTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattlePassExpAmount(FlatBufferBuilder builder, int battlePassExpAmount) { builder.AddInt(16, battlePassExpAmount, 0); }
  public static Offset<Global.BattlePassMissionExcel> EndBattlePassMissionExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.BattlePassMissionExcel>(o);
  }
  public BattlePassMissionExcelT UnPack() {
    var _o = new BattlePassMissionExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassMissionExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BattlePassMission");
    _o.BattlePassId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattlePassId, key) : this.BattlePassId;
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Category = TableEncryptionService.UseEncryption ? (Global.MissionCategory)TableEncryptionService.Convert((int)this.Category, key) : this.Category;
    _o.PreMissionId = new List<long>();
    for (var _j = 0; _j < this.PreMissionIdLength; ++_j) {_o.PreMissionId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PreMissionId(_j), key) : this.PreMissionId(_j));}
    _o.Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Description, key) : this.Description;
    _o.ResetType = TableEncryptionService.UseEncryption ? (Global.MissionResetType)TableEncryptionService.Convert((int)this.ResetType, key) : this.ResetType;
    _o.ToastDisplayType = TableEncryptionService.UseEncryption ? (Global.MissionToastDisplayConditionType)TableEncryptionService.Convert((int)this.ToastDisplayType, key) : this.ToastDisplayType;
    _o.ToastImagePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ToastImagePath, key) : this.ToastImagePath;
    _o.ViewFlag = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ViewFlag, key) : this.ViewFlag;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.ShortcutUI = new List<string>();
    for (var _j = 0; _j < this.ShortcutUILength; ++_j) {_o.ShortcutUI.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ShortcutUI(_j), key) : this.ShortcutUI(_j));}
    _o.ChallengeStageShortcut = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ChallengeStageShortcut, key) : this.ChallengeStageShortcut;
    _o.CompleteConditionType = TableEncryptionService.UseEncryption ? (Global.MissionCompleteConditionType)TableEncryptionService.Convert((int)this.CompleteConditionType, key) : this.CompleteConditionType;
    _o.CompleteConditionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CompleteConditionCount, key) : this.CompleteConditionCount;
    _o.CompleteConditionParameter = new List<long>();
    for (var _j = 0; _j < this.CompleteConditionParameterLength; ++_j) {_o.CompleteConditionParameter.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CompleteConditionParameter(_j), key) : this.CompleteConditionParameter(_j));}
    _o.CompleteConditionParameterTag = new List<Global.Tag>();
    for (var _j = 0; _j < this.CompleteConditionParameterTagLength; ++_j) {_o.CompleteConditionParameterTag.Add(TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)this.CompleteConditionParameterTag(_j), key) : this.CompleteConditionParameterTag(_j));}
    _o.BattlePassExpAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BattlePassExpAmount, key) : this.BattlePassExpAmount;
  }
  public static Offset<Global.BattlePassMissionExcel> Pack(FlatBufferBuilder builder, BattlePassMissionExcelT _o) {
    if (_o == null) return default(Offset<Global.BattlePassMissionExcel>);
		byte[] key = TableEncryptionService.CreateKey("BattlePassMission");
		var _BattlePassId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattlePassId, key) : _o.BattlePassId;
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Category = TableEncryptionService.UseEncryption ? (Global.MissionCategory)TableEncryptionService.Convert((int)_o.Category, key) : _o.Category;
    var _PreMissionId = default(VectorOffset);
    if (_o.PreMissionId != null) {
      var __PreMissionId = _o.PreMissionId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _PreMissionId = CreatePreMissionIdVector(builder, __PreMissionId);
    }
		var _Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Description, key) : _o.Description;
		var _ResetType = TableEncryptionService.UseEncryption ? (Global.MissionResetType)TableEncryptionService.Convert((int)_o.ResetType, key) : _o.ResetType;
		var _ToastDisplayType = TableEncryptionService.UseEncryption ? (Global.MissionToastDisplayConditionType)TableEncryptionService.Convert((int)_o.ToastDisplayType, key) : _o.ToastDisplayType;
    var _ToastImagePath = _o.ToastImagePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ToastImagePath, key) : _o.ToastImagePath));
		var _ViewFlag = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ViewFlag, key) : _o.ViewFlag;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
    var _ShortcutUI = default(VectorOffset);
    if (_o.ShortcutUI != null) {
      var __ShortcutUI = new StringOffset[_o.ShortcutUI.Count];
      for (var _j = 0; _j < __ShortcutUI.Length; ++_j) { __ShortcutUI[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ShortcutUI[_j], key) : _o.ShortcutUI[_j])); }
      _ShortcutUI = CreateShortcutUIVector(builder, __ShortcutUI);
    }
		var _ChallengeStageShortcut = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ChallengeStageShortcut, key) : _o.ChallengeStageShortcut;
		var _CompleteConditionType = TableEncryptionService.UseEncryption ? (Global.MissionCompleteConditionType)TableEncryptionService.Convert((int)_o.CompleteConditionType, key) : _o.CompleteConditionType;
		var _CompleteConditionCount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CompleteConditionCount, key) : _o.CompleteConditionCount;
    var _CompleteConditionParameter = default(VectorOffset);
    if (_o.CompleteConditionParameter != null) {
      var __CompleteConditionParameter = _o.CompleteConditionParameter.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _CompleteConditionParameter = CreateCompleteConditionParameterVector(builder, __CompleteConditionParameter);
    }
    var _CompleteConditionParameterTag = default(VectorOffset);
    if (_o.CompleteConditionParameterTag != null) {
      var __CompleteConditionParameterTag = _o.CompleteConditionParameterTag.Select(x => TableEncryptionService.UseEncryption ? (Global.Tag)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _CompleteConditionParameterTag = CreateCompleteConditionParameterTagVector(builder, __CompleteConditionParameterTag);
    }
		var _BattlePassExpAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.BattlePassExpAmount, key) : _o.BattlePassExpAmount;
    return CreateBattlePassMissionExcel(
      builder,
      TableEncryptionService.UseEncryption ? _BattlePassId : _o.BattlePassId,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Category : _o.Category,
      _PreMissionId,
      TableEncryptionService.UseEncryption ? _Description : _o.Description,
      TableEncryptionService.UseEncryption ? _ResetType : _o.ResetType,
      TableEncryptionService.UseEncryption ? _ToastDisplayType : _o.ToastDisplayType,
      _ToastImagePath,
      TableEncryptionService.UseEncryption ? _ViewFlag : _o.ViewFlag,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      _ShortcutUI,
      TableEncryptionService.UseEncryption ? _ChallengeStageShortcut : _o.ChallengeStageShortcut,
      TableEncryptionService.UseEncryption ? _CompleteConditionType : _o.CompleteConditionType,
      TableEncryptionService.UseEncryption ? _CompleteConditionCount : _o.CompleteConditionCount,
      _CompleteConditionParameter,
      _CompleteConditionParameterTag,
      TableEncryptionService.UseEncryption ? _BattlePassExpAmount : _o.BattlePassExpAmount);
  }
}

public class BattlePassMissionExcelT
{
  public long BattlePassId { get; set; }
  public long Id { get; set; }
  public Global.MissionCategory Category { get; set; }
  public List<long> PreMissionId { get; set; }
  public uint Description { get; set; }
  public Global.MissionResetType ResetType { get; set; }
  public Global.MissionToastDisplayConditionType ToastDisplayType { get; set; }
  public string ToastImagePath { get; set; }
  public bool ViewFlag { get; set; }
  public long DisplayOrder { get; set; }
  public List<string> ShortcutUI { get; set; }
  public long ChallengeStageShortcut { get; set; }
  public Global.MissionCompleteConditionType CompleteConditionType { get; set; }
  public long CompleteConditionCount { get; set; }
  public List<long> CompleteConditionParameter { get; set; }
  public List<Global.Tag> CompleteConditionParameterTag { get; set; }
  public int BattlePassExpAmount { get; set; }

  public BattlePassMissionExcelT() {
    this.BattlePassId = 0;
    this.Id = 0;
    this.Category = Global.MissionCategory.Challenge;
    this.PreMissionId = null;
    this.Description = 0;
    this.ResetType = Global.MissionResetType.None;
    this.ToastDisplayType = Global.MissionToastDisplayConditionType.Always;
    this.ToastImagePath = null;
    this.ViewFlag = false;
    this.DisplayOrder = 0;
    this.ShortcutUI = null;
    this.ChallengeStageShortcut = 0;
    this.CompleteConditionType = Global.MissionCompleteConditionType.None;
    this.CompleteConditionCount = 0;
    this.CompleteConditionParameter = null;
    this.CompleteConditionParameterTag = null;
    this.BattlePassExpAmount = 0;
  }
}


static public class BattlePassMissionExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BattlePassId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Category*/, 4 /*Global.MissionCategory*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*PreMissionId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 12 /*Description*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ResetType*/, 4 /*Global.MissionResetType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*ToastDisplayType*/, 4 /*Global.MissionToastDisplayConditionType*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*ToastImagePath*/, false)
      && verifier.VerifyField(tablePos, 20 /*ViewFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*ShortcutUI*/, false)
      && verifier.VerifyField(tablePos, 26 /*ChallengeStageShortcut*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*CompleteConditionType*/, 4 /*Global.MissionCompleteConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*CompleteConditionCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*CompleteConditionParameter*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*CompleteConditionParameterTag*/, 4 /*Global.Tag*/, false)
      && verifier.VerifyField(tablePos, 36 /*BattlePassExpAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
