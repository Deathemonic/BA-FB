// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGRewardCardRateExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGRewardCardRateExcel GetRootAsMinigameCCGRewardCardRateExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGRewardCardRateExcel(_bb, new MinigameCCGRewardCardRateExcel()); }
  public static MinigameCCGRewardCardRateExcel GetRootAsMinigameCCGRewardCardRateExcel(ByteBuffer _bb, MinigameCCGRewardCardRateExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGRewardCardRateExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RarityGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CardRarity { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Global.MinigameCCGRewardCardRateExcel> CreateMinigameCCGRewardCardRateExcel(FlatBufferBuilder builder,
      long RarityGroupId = 0,
      int CardRarity = 0,
      int Rate = 0) {
    builder.StartTable(3);
    MinigameCCGRewardCardRateExcel.AddRarityGroupId(builder, RarityGroupId);
    MinigameCCGRewardCardRateExcel.AddRate(builder, Rate);
    MinigameCCGRewardCardRateExcel.AddCardRarity(builder, CardRarity);
    return MinigameCCGRewardCardRateExcel.EndMinigameCCGRewardCardRateExcel(builder);
  }

  public static void StartMinigameCCGRewardCardRateExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddRarityGroupId(FlatBufferBuilder builder, long rarityGroupId) { builder.AddLong(0, rarityGroupId, 0); }
  public static void AddCardRarity(FlatBufferBuilder builder, int cardRarity) { builder.AddInt(1, cardRarity, 0); }
  public static void AddRate(FlatBufferBuilder builder, int rate) { builder.AddInt(2, rate, 0); }
  public static Offset<Global.MinigameCCGRewardCardRateExcel> EndMinigameCCGRewardCardRateExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MinigameCCGRewardCardRateExcel>(o);
  }
  public MinigameCCGRewardCardRateExcelT UnPack() {
    var _o = new MinigameCCGRewardCardRateExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGRewardCardRateExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGRewardCardRate");
    _o.RarityGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RarityGroupId, key) : this.RarityGroupId;
    _o.CardRarity = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.CardRarity, key) : this.CardRarity;
    _o.Rate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Rate, key) : this.Rate;
  }
  public static Offset<Global.MinigameCCGRewardCardRateExcel> Pack(FlatBufferBuilder builder, MinigameCCGRewardCardRateExcelT _o) {
    if (_o == null) return default(Offset<Global.MinigameCCGRewardCardRateExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGRewardCardRate");
		var _RarityGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RarityGroupId, key) : _o.RarityGroupId;
		var _CardRarity = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.CardRarity, key) : _o.CardRarity;
		var _Rate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Rate, key) : _o.Rate;
    return CreateMinigameCCGRewardCardRateExcel(
      builder,
      TableEncryptionService.UseEncryption ? _RarityGroupId : _o.RarityGroupId,
      TableEncryptionService.UseEncryption ? _CardRarity : _o.CardRarity,
      TableEncryptionService.UseEncryption ? _Rate : _o.Rate);
  }
}

public class MinigameCCGRewardCardRateExcelT
{
  public long RarityGroupId { get; set; }
  public int CardRarity { get; set; }
  public int Rate { get; set; }

  public MinigameCCGRewardCardRateExcelT() {
    this.RarityGroupId = 0;
    this.CardRarity = 0;
    this.Rate = 0;
  }
}


static public class MinigameCCGRewardCardRateExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RarityGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CardRarity*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Rate*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
