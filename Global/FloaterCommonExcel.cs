// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct FloaterCommonExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FloaterCommonExcel GetRootAsFloaterCommonExcel(ByteBuffer _bb) { return GetRootAsFloaterCommonExcel(_bb, new FloaterCommonExcel()); }
  public static FloaterCommonExcel GetRootAsFloaterCommonExcel(ByteBuffer _bb, FloaterCommonExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloaterCommonExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.TacticEntityType TacticEntityType { get { int o = __p.__offset(6); return o != 0 ? (Global.TacticEntityType)__p.bb.GetInt(o + __p.bb_pos) : Global.TacticEntityType.None; } }
  public int FloaterOffsetPosX { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FloaterOffsetPosY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FloaterRandomPosRangeX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FloaterRandomPosRangeY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Global.FloaterCommonExcel> CreateFloaterCommonExcel(FlatBufferBuilder builder,
      long Id = 0,
      Global.TacticEntityType TacticEntityType = Global.TacticEntityType.None,
      int FloaterOffsetPosX = 0,
      int FloaterOffsetPosY = 0,
      int FloaterRandomPosRangeX = 0,
      int FloaterRandomPosRangeY = 0) {
    builder.StartTable(6);
    FloaterCommonExcel.AddId(builder, Id);
    FloaterCommonExcel.AddFloaterRandomPosRangeY(builder, FloaterRandomPosRangeY);
    FloaterCommonExcel.AddFloaterRandomPosRangeX(builder, FloaterRandomPosRangeX);
    FloaterCommonExcel.AddFloaterOffsetPosY(builder, FloaterOffsetPosY);
    FloaterCommonExcel.AddFloaterOffsetPosX(builder, FloaterOffsetPosX);
    FloaterCommonExcel.AddTacticEntityType(builder, TacticEntityType);
    return FloaterCommonExcel.EndFloaterCommonExcel(builder);
  }

  public static void StartFloaterCommonExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddTacticEntityType(FlatBufferBuilder builder, Global.TacticEntityType tacticEntityType) { builder.AddInt(1, (int)tacticEntityType, 0); }
  public static void AddFloaterOffsetPosX(FlatBufferBuilder builder, int floaterOffsetPosX) { builder.AddInt(2, floaterOffsetPosX, 0); }
  public static void AddFloaterOffsetPosY(FlatBufferBuilder builder, int floaterOffsetPosY) { builder.AddInt(3, floaterOffsetPosY, 0); }
  public static void AddFloaterRandomPosRangeX(FlatBufferBuilder builder, int floaterRandomPosRangeX) { builder.AddInt(4, floaterRandomPosRangeX, 0); }
  public static void AddFloaterRandomPosRangeY(FlatBufferBuilder builder, int floaterRandomPosRangeY) { builder.AddInt(5, floaterRandomPosRangeY, 0); }
  public static Offset<Global.FloaterCommonExcel> EndFloaterCommonExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.FloaterCommonExcel>(o);
  }
  public FloaterCommonExcelT UnPack() {
    var _o = new FloaterCommonExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloaterCommonExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("FloaterCommon");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.TacticEntityType = TableEncryptionService.UseEncryption ? (Global.TacticEntityType)TableEncryptionService.Convert((int)this.TacticEntityType, key) : this.TacticEntityType;
    _o.FloaterOffsetPosX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FloaterOffsetPosX, key) : this.FloaterOffsetPosX;
    _o.FloaterOffsetPosY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FloaterOffsetPosY, key) : this.FloaterOffsetPosY;
    _o.FloaterRandomPosRangeX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FloaterRandomPosRangeX, key) : this.FloaterRandomPosRangeX;
    _o.FloaterRandomPosRangeY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.FloaterRandomPosRangeY, key) : this.FloaterRandomPosRangeY;
  }
  public static Offset<Global.FloaterCommonExcel> Pack(FlatBufferBuilder builder, FloaterCommonExcelT _o) {
    if (_o == null) return default(Offset<Global.FloaterCommonExcel>);
		byte[] key = TableEncryptionService.CreateKey("FloaterCommon");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _TacticEntityType = TableEncryptionService.UseEncryption ? (Global.TacticEntityType)TableEncryptionService.Convert((int)_o.TacticEntityType, key) : _o.TacticEntityType;
		var _FloaterOffsetPosX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FloaterOffsetPosX, key) : _o.FloaterOffsetPosX;
		var _FloaterOffsetPosY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FloaterOffsetPosY, key) : _o.FloaterOffsetPosY;
		var _FloaterRandomPosRangeX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FloaterRandomPosRangeX, key) : _o.FloaterRandomPosRangeX;
		var _FloaterRandomPosRangeY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.FloaterRandomPosRangeY, key) : _o.FloaterRandomPosRangeY;
    return CreateFloaterCommonExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _TacticEntityType : _o.TacticEntityType,
      TableEncryptionService.UseEncryption ? _FloaterOffsetPosX : _o.FloaterOffsetPosX,
      TableEncryptionService.UseEncryption ? _FloaterOffsetPosY : _o.FloaterOffsetPosY,
      TableEncryptionService.UseEncryption ? _FloaterRandomPosRangeX : _o.FloaterRandomPosRangeX,
      TableEncryptionService.UseEncryption ? _FloaterRandomPosRangeY : _o.FloaterRandomPosRangeY);
  }
}

public class FloaterCommonExcelT
{
  public long Id { get; set; }
  public Global.TacticEntityType TacticEntityType { get; set; }
  public int FloaterOffsetPosX { get; set; }
  public int FloaterOffsetPosY { get; set; }
  public int FloaterRandomPosRangeX { get; set; }
  public int FloaterRandomPosRangeY { get; set; }

  public FloaterCommonExcelT() {
    this.Id = 0;
    this.TacticEntityType = Global.TacticEntityType.None;
    this.FloaterOffsetPosX = 0;
    this.FloaterOffsetPosY = 0;
    this.FloaterRandomPosRangeX = 0;
    this.FloaterRandomPosRangeY = 0;
  }
}


static public class FloaterCommonExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TacticEntityType*/, 4 /*Global.TacticEntityType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*FloaterOffsetPosX*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*FloaterOffsetPosY*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*FloaterRandomPosRangeX*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FloaterRandomPosRangeY*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
