// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct TutorialFailureImageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TutorialFailureImageExcel GetRootAsTutorialFailureImageExcel(ByteBuffer _bb) { return GetRootAsTutorialFailureImageExcel(_bb, new TutorialFailureImageExcel()); }
  public static TutorialFailureImageExcel GetRootAsTutorialFailureImageExcel(ByteBuffer _bb, TutorialFailureImageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TutorialFailureImageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.TutorialFailureContentType Contents { get { int o = __p.__offset(6); return o != 0 ? (Global.TutorialFailureContentType)__p.bb.GetInt(o + __p.bb_pos) : Global.TutorialFailureContentType.None; } }
  public string Type { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(8); }
  public string ImagePathKr { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathKrBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetImagePathKrBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetImagePathKrArray() { return __p.__vector_as_array<byte>(10); }
  public string ImagePathJp { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathJpBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetImagePathJpBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetImagePathJpArray() { return __p.__vector_as_array<byte>(12); }
  public string ImagePathTh { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathThBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetImagePathThBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetImagePathThArray() { return __p.__vector_as_array<byte>(14); }
  public string ImagePathTw { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathTwBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetImagePathTwBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetImagePathTwArray() { return __p.__vector_as_array<byte>(16); }
  public string ImagePathEn { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImagePathEnBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetImagePathEnBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetImagePathEnArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<Global.TutorialFailureImageExcel> CreateTutorialFailureImageExcel(FlatBufferBuilder builder,
      long Id = 0,
      Global.TutorialFailureContentType Contents = Global.TutorialFailureContentType.None,
      StringOffset TypeOffset = default(StringOffset),
      StringOffset ImagePathKrOffset = default(StringOffset),
      StringOffset ImagePathJpOffset = default(StringOffset),
      StringOffset ImagePathThOffset = default(StringOffset),
      StringOffset ImagePathTwOffset = default(StringOffset),
      StringOffset ImagePathEnOffset = default(StringOffset)) {
    builder.StartTable(8);
    TutorialFailureImageExcel.AddId(builder, Id);
    TutorialFailureImageExcel.AddImagePathEn(builder, ImagePathEnOffset);
    TutorialFailureImageExcel.AddImagePathTw(builder, ImagePathTwOffset);
    TutorialFailureImageExcel.AddImagePathTh(builder, ImagePathThOffset);
    TutorialFailureImageExcel.AddImagePathJp(builder, ImagePathJpOffset);
    TutorialFailureImageExcel.AddImagePathKr(builder, ImagePathKrOffset);
    TutorialFailureImageExcel.AddType(builder, TypeOffset);
    TutorialFailureImageExcel.AddContents(builder, Contents);
    return TutorialFailureImageExcel.EndTutorialFailureImageExcel(builder);
  }

  public static void StartTutorialFailureImageExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddContents(FlatBufferBuilder builder, Global.TutorialFailureContentType contents) { builder.AddInt(1, (int)contents, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(2, typeOffset.Value, 0); }
  public static void AddImagePathKr(FlatBufferBuilder builder, StringOffset imagePathKrOffset) { builder.AddOffset(3, imagePathKrOffset.Value, 0); }
  public static void AddImagePathJp(FlatBufferBuilder builder, StringOffset imagePathJpOffset) { builder.AddOffset(4, imagePathJpOffset.Value, 0); }
  public static void AddImagePathTh(FlatBufferBuilder builder, StringOffset imagePathThOffset) { builder.AddOffset(5, imagePathThOffset.Value, 0); }
  public static void AddImagePathTw(FlatBufferBuilder builder, StringOffset imagePathTwOffset) { builder.AddOffset(6, imagePathTwOffset.Value, 0); }
  public static void AddImagePathEn(FlatBufferBuilder builder, StringOffset imagePathEnOffset) { builder.AddOffset(7, imagePathEnOffset.Value, 0); }
  public static Offset<Global.TutorialFailureImageExcel> EndTutorialFailureImageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.TutorialFailureImageExcel>(o);
  }
  public TutorialFailureImageExcelT UnPack() {
    var _o = new TutorialFailureImageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TutorialFailureImageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("TutorialFailureImage");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Contents = TableEncryptionService.UseEncryption ? (Global.TutorialFailureContentType)TableEncryptionService.Convert((int)this.Contents, key) : this.Contents;
    _o.Type = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Type, key) : this.Type;
    _o.ImagePathKr = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePathKr, key) : this.ImagePathKr;
    _o.ImagePathJp = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePathJp, key) : this.ImagePathJp;
    _o.ImagePathTh = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePathTh, key) : this.ImagePathTh;
    _o.ImagePathTw = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePathTw, key) : this.ImagePathTw;
    _o.ImagePathEn = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ImagePathEn, key) : this.ImagePathEn;
  }
  public static Offset<Global.TutorialFailureImageExcel> Pack(FlatBufferBuilder builder, TutorialFailureImageExcelT _o) {
    if (_o == null) return default(Offset<Global.TutorialFailureImageExcel>);
		byte[] key = TableEncryptionService.CreateKey("TutorialFailureImage");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _Contents = TableEncryptionService.UseEncryption ? (Global.TutorialFailureContentType)TableEncryptionService.Convert((int)_o.Contents, key) : _o.Contents;
    var _Type = _o.Type == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Type, key) : _o.Type));
    var _ImagePathKr = _o.ImagePathKr == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePathKr, key) : _o.ImagePathKr));
    var _ImagePathJp = _o.ImagePathJp == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePathJp, key) : _o.ImagePathJp));
    var _ImagePathTh = _o.ImagePathTh == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePathTh, key) : _o.ImagePathTh));
    var _ImagePathTw = _o.ImagePathTw == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePathTw, key) : _o.ImagePathTw));
    var _ImagePathEn = _o.ImagePathEn == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ImagePathEn, key) : _o.ImagePathEn));
    return CreateTutorialFailureImageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _Contents : _o.Contents,
      _Type,
      _ImagePathKr,
      _ImagePathJp,
      _ImagePathTh,
      _ImagePathTw,
      _ImagePathEn);
  }
}

public class TutorialFailureImageExcelT
{
  public long Id { get; set; }
  public Global.TutorialFailureContentType Contents { get; set; }
  public string Type { get; set; }
  public string ImagePathKr { get; set; }
  public string ImagePathJp { get; set; }
  public string ImagePathTh { get; set; }
  public string ImagePathTw { get; set; }
  public string ImagePathEn { get; set; }

  public TutorialFailureImageExcelT() {
    this.Id = 0;
    this.Contents = Global.TutorialFailureContentType.None;
    this.Type = null;
    this.ImagePathKr = null;
    this.ImagePathJp = null;
    this.ImagePathTh = null;
    this.ImagePathTw = null;
    this.ImagePathEn = null;
  }
}


static public class TutorialFailureImageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Contents*/, 4 /*Global.TutorialFailureContentType*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Type*/, false)
      && verifier.VerifyString(tablePos, 10 /*ImagePathKr*/, false)
      && verifier.VerifyString(tablePos, 12 /*ImagePathJp*/, false)
      && verifier.VerifyString(tablePos, 14 /*ImagePathTh*/, false)
      && verifier.VerifyString(tablePos, 16 /*ImagePathTw*/, false)
      && verifier.VerifyString(tablePos, 18 /*ImagePathEn*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
