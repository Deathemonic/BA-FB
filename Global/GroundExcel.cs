// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GroundExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GroundExcel GetRootAsGroundExcel(ByteBuffer _bb) { return GetRootAsGroundExcel(_bb, new GroundExcel()); }
  public static GroundExcel GetRootAsGroundExcel(ByteBuffer _bb, GroundExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GroundExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StageFileName(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StageFileNameLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string GroundSceneName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundSceneNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGroundSceneNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGroundSceneNameArray() { return __p.__vector_as_array<byte>(8); }
  public long FormationGroupId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.StageTopography StageTopography { get { int o = __p.__offset(12); return o != 0 ? (Global.StageTopography)__p.bb.GetInt(o + __p.bb_pos) : Global.StageTopography.Street; } }
  public Global.BulletType EnemyBulletType { get { int o = __p.__offset(14); return o != 0 ? (Global.BulletType)__p.bb.GetInt(o + __p.bb_pos) : Global.BulletType.Normal; } }
  public Global.ArmorType EnemyArmorType { get { int o = __p.__offset(16); return o != 0 ? (Global.ArmorType)__p.bb.GetInt(o + __p.bb_pos) : Global.ArmorType.LightArmor; } }
  public long LevelNPC { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelMinion { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelElite { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelChampion { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LevelBoss { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ObstacleLevel { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeNPC { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeMinion { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeElite { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeChampion { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GradeBoss { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSightPointAdd { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSightPointRate { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerAttackRangeAdd { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerAttackRangeRate { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySightPointAdd { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySightPointRate { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyAttackRangeAdd { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyAttackRangeRate { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSkillRangeAdd { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerSkillRangeRate { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySkillRangeAdd { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemySkillRangeRate { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerMinimumPositionGapRate { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyMinimumPositionGapRate { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool PlayerSightRangeMax { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnemySightRangeMax { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long TSSAirUnitHeight { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsPhaseBGM { get { int o = __p.__offset(74); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long BGMId { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool WarningUI { get { int o = __p.__offset(78); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TSSHatchOpen { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Global.TacticSpeed ForcedTacticSpeed { get { int o = __p.__offset(82); return o != 0 ? (Global.TacticSpeed)__p.bb.GetInt(o + __p.bb_pos) : Global.TacticSpeed.None; } }
  public Global.TacticSkillUse ForcedSkillUse { get { int o = __p.__offset(84); return o != 0 ? (Global.TacticSkillUse)__p.bb.GetInt(o + __p.bb_pos) : Global.TacticSkillUse.None; } }
  public Global.ShowSkillCutIn ShowNPCSkillCutIn { get { int o = __p.__offset(86); return o != 0 ? (Global.ShowSkillCutIn)__p.bb.GetInt(o + __p.bb_pos) : Global.ShowSkillCutIn.None; } }
  public bool ImmuneHitBeforeTimeOutEnd { get { int o = __p.__offset(88); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UIBattleHideFromScratch { get { int o = __p.__offset(90); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Global.UIEnemyCountType UIEnemyCount { get { int o = __p.__offset(92); return o != 0 ? (Global.UIEnemyCountType)__p.bb.GetInt(o + __p.bb_pos) : Global.UIEnemyCountType.Normal; } }
  public string BattleReadyTimelinePath { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBattleReadyTimelinePathBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePathBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetBattleReadyTimelinePathArray() { return __p.__vector_as_array<byte>(94); }
  public string BeforeVictoryTimelinePath { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeforeVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetBeforeVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetBeforeVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(96); }
  public bool SkipBattleEnd { get { int o = __p.__offset(98); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HideNPCWhenBattleEnd { get { int o = __p.__offset(100); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CoverPointOff { get { int o = __p.__offset(102); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float UIHpScale { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UIEmojiScale { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UISkillMainLogScale { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int EffectCountLimit { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AllyPassiveSkillId(int j) { int o = __p.__offset(112); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllyPassiveSkillIdLength { get { int o = __p.__offset(112); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int AllyPassiveSkillLevel(int j) { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AllyPassiveSkillLevelLength { get { int o = __p.__offset(114); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(114, 4); }
#else
  public ArraySegment<byte>? GetAllyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public int[] GetAllyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(114); }
  public string EnemyPassiveSkillId(int j) { int o = __p.__offset(116); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnemyPassiveSkillIdLength { get { int o = __p.__offset(116); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int EnemyPassiveSkillLevel(int j) { int o = __p.__offset(118); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EnemyPassiveSkillLevelLength { get { int o = __p.__offset(118); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_span<int>(118, 4); }
#else
  public ArraySegment<byte>? GetEnemyPassiveSkillLevelBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public int[] GetEnemyPassiveSkillLevelArray() { return __p.__vector_as_array<int>(118); }

  public static Offset<Global.GroundExcel> CreateGroundExcel(FlatBufferBuilder builder,
      long Id = 0,
      VectorOffset StageFileNameOffset = default(VectorOffset),
      StringOffset GroundSceneNameOffset = default(StringOffset),
      long FormationGroupId = 0,
      Global.StageTopography StageTopography = Global.StageTopography.Street,
      Global.BulletType EnemyBulletType = Global.BulletType.Normal,
      Global.ArmorType EnemyArmorType = Global.ArmorType.LightArmor,
      long LevelNPC = 0,
      long LevelMinion = 0,
      long LevelElite = 0,
      long LevelChampion = 0,
      long LevelBoss = 0,
      long ObstacleLevel = 0,
      long GradeNPC = 0,
      long GradeMinion = 0,
      long GradeElite = 0,
      long GradeChampion = 0,
      long GradeBoss = 0,
      long PlayerSightPointAdd = 0,
      long PlayerSightPointRate = 0,
      long PlayerAttackRangeAdd = 0,
      long PlayerAttackRangeRate = 0,
      long EnemySightPointAdd = 0,
      long EnemySightPointRate = 0,
      long EnemyAttackRangeAdd = 0,
      long EnemyAttackRangeRate = 0,
      long PlayerSkillRangeAdd = 0,
      long PlayerSkillRangeRate = 0,
      long EnemySkillRangeAdd = 0,
      long EnemySkillRangeRate = 0,
      long PlayerMinimumPositionGapRate = 0,
      long EnemyMinimumPositionGapRate = 0,
      bool PlayerSightRangeMax = false,
      bool EnemySightRangeMax = false,
      long TSSAirUnitHeight = 0,
      bool IsPhaseBGM = false,
      long BGMId = 0,
      bool WarningUI = false,
      bool TSSHatchOpen = false,
      Global.TacticSpeed ForcedTacticSpeed = Global.TacticSpeed.None,
      Global.TacticSkillUse ForcedSkillUse = Global.TacticSkillUse.None,
      Global.ShowSkillCutIn ShowNPCSkillCutIn = Global.ShowSkillCutIn.None,
      bool ImmuneHitBeforeTimeOutEnd = false,
      bool UIBattleHideFromScratch = false,
      Global.UIEnemyCountType UIEnemyCount = Global.UIEnemyCountType.Normal,
      StringOffset BattleReadyTimelinePathOffset = default(StringOffset),
      StringOffset BeforeVictoryTimelinePathOffset = default(StringOffset),
      bool SkipBattleEnd = false,
      bool HideNPCWhenBattleEnd = false,
      bool CoverPointOff = false,
      float UIHpScale = 0.0f,
      float UIEmojiScale = 0.0f,
      float UISkillMainLogScale = 0.0f,
      int EffectCountLimit = 0,
      VectorOffset AllyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset AllyPassiveSkillLevelOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillIdOffset = default(VectorOffset),
      VectorOffset EnemyPassiveSkillLevelOffset = default(VectorOffset)) {
    builder.StartTable(58);
    GroundExcel.AddBGMId(builder, BGMId);
    GroundExcel.AddTSSAirUnitHeight(builder, TSSAirUnitHeight);
    GroundExcel.AddEnemyMinimumPositionGapRate(builder, EnemyMinimumPositionGapRate);
    GroundExcel.AddPlayerMinimumPositionGapRate(builder, PlayerMinimumPositionGapRate);
    GroundExcel.AddEnemySkillRangeRate(builder, EnemySkillRangeRate);
    GroundExcel.AddEnemySkillRangeAdd(builder, EnemySkillRangeAdd);
    GroundExcel.AddPlayerSkillRangeRate(builder, PlayerSkillRangeRate);
    GroundExcel.AddPlayerSkillRangeAdd(builder, PlayerSkillRangeAdd);
    GroundExcel.AddEnemyAttackRangeRate(builder, EnemyAttackRangeRate);
    GroundExcel.AddEnemyAttackRangeAdd(builder, EnemyAttackRangeAdd);
    GroundExcel.AddEnemySightPointRate(builder, EnemySightPointRate);
    GroundExcel.AddEnemySightPointAdd(builder, EnemySightPointAdd);
    GroundExcel.AddPlayerAttackRangeRate(builder, PlayerAttackRangeRate);
    GroundExcel.AddPlayerAttackRangeAdd(builder, PlayerAttackRangeAdd);
    GroundExcel.AddPlayerSightPointRate(builder, PlayerSightPointRate);
    GroundExcel.AddPlayerSightPointAdd(builder, PlayerSightPointAdd);
    GroundExcel.AddGradeBoss(builder, GradeBoss);
    GroundExcel.AddGradeChampion(builder, GradeChampion);
    GroundExcel.AddGradeElite(builder, GradeElite);
    GroundExcel.AddGradeMinion(builder, GradeMinion);
    GroundExcel.AddGradeNPC(builder, GradeNPC);
    GroundExcel.AddObstacleLevel(builder, ObstacleLevel);
    GroundExcel.AddLevelBoss(builder, LevelBoss);
    GroundExcel.AddLevelChampion(builder, LevelChampion);
    GroundExcel.AddLevelElite(builder, LevelElite);
    GroundExcel.AddLevelMinion(builder, LevelMinion);
    GroundExcel.AddLevelNPC(builder, LevelNPC);
    GroundExcel.AddFormationGroupId(builder, FormationGroupId);
    GroundExcel.AddId(builder, Id);
    GroundExcel.AddEnemyPassiveSkillLevel(builder, EnemyPassiveSkillLevelOffset);
    GroundExcel.AddEnemyPassiveSkillId(builder, EnemyPassiveSkillIdOffset);
    GroundExcel.AddAllyPassiveSkillLevel(builder, AllyPassiveSkillLevelOffset);
    GroundExcel.AddAllyPassiveSkillId(builder, AllyPassiveSkillIdOffset);
    GroundExcel.AddEffectCountLimit(builder, EffectCountLimit);
    GroundExcel.AddUISkillMainLogScale(builder, UISkillMainLogScale);
    GroundExcel.AddUIEmojiScale(builder, UIEmojiScale);
    GroundExcel.AddUIHpScale(builder, UIHpScale);
    GroundExcel.AddBeforeVictoryTimelinePath(builder, BeforeVictoryTimelinePathOffset);
    GroundExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePathOffset);
    GroundExcel.AddUIEnemyCount(builder, UIEnemyCount);
    GroundExcel.AddShowNPCSkillCutIn(builder, ShowNPCSkillCutIn);
    GroundExcel.AddForcedSkillUse(builder, ForcedSkillUse);
    GroundExcel.AddForcedTacticSpeed(builder, ForcedTacticSpeed);
    GroundExcel.AddEnemyArmorType(builder, EnemyArmorType);
    GroundExcel.AddEnemyBulletType(builder, EnemyBulletType);
    GroundExcel.AddStageTopography(builder, StageTopography);
    GroundExcel.AddGroundSceneName(builder, GroundSceneNameOffset);
    GroundExcel.AddStageFileName(builder, StageFileNameOffset);
    GroundExcel.AddCoverPointOff(builder, CoverPointOff);
    GroundExcel.AddHideNPCWhenBattleEnd(builder, HideNPCWhenBattleEnd);
    GroundExcel.AddSkipBattleEnd(builder, SkipBattleEnd);
    GroundExcel.AddUIBattleHideFromScratch(builder, UIBattleHideFromScratch);
    GroundExcel.AddImmuneHitBeforeTimeOutEnd(builder, ImmuneHitBeforeTimeOutEnd);
    GroundExcel.AddTSSHatchOpen(builder, TSSHatchOpen);
    GroundExcel.AddWarningUI(builder, WarningUI);
    GroundExcel.AddIsPhaseBGM(builder, IsPhaseBGM);
    GroundExcel.AddEnemySightRangeMax(builder, EnemySightRangeMax);
    GroundExcel.AddPlayerSightRangeMax(builder, PlayerSightRangeMax);
    return GroundExcel.EndGroundExcel(builder);
  }

  public static void StartGroundExcel(FlatBufferBuilder builder) { builder.StartTable(58); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddStageFileName(FlatBufferBuilder builder, VectorOffset stageFileNameOffset) { builder.AddOffset(1, stageFileNameOffset.Value, 0); }
  public static VectorOffset CreateStageFileNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStageFileNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStageFileNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStageFileNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStageFileNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroundSceneName(FlatBufferBuilder builder, StringOffset groundSceneNameOffset) { builder.AddOffset(2, groundSceneNameOffset.Value, 0); }
  public static void AddFormationGroupId(FlatBufferBuilder builder, long formationGroupId) { builder.AddLong(3, formationGroupId, 0); }
  public static void AddStageTopography(FlatBufferBuilder builder, Global.StageTopography stageTopography) { builder.AddInt(4, (int)stageTopography, 0); }
  public static void AddEnemyBulletType(FlatBufferBuilder builder, Global.BulletType enemyBulletType) { builder.AddInt(5, (int)enemyBulletType, 0); }
  public static void AddEnemyArmorType(FlatBufferBuilder builder, Global.ArmorType enemyArmorType) { builder.AddInt(6, (int)enemyArmorType, 0); }
  public static void AddLevelNPC(FlatBufferBuilder builder, long levelNPC) { builder.AddLong(7, levelNPC, 0); }
  public static void AddLevelMinion(FlatBufferBuilder builder, long levelMinion) { builder.AddLong(8, levelMinion, 0); }
  public static void AddLevelElite(FlatBufferBuilder builder, long levelElite) { builder.AddLong(9, levelElite, 0); }
  public static void AddLevelChampion(FlatBufferBuilder builder, long levelChampion) { builder.AddLong(10, levelChampion, 0); }
  public static void AddLevelBoss(FlatBufferBuilder builder, long levelBoss) { builder.AddLong(11, levelBoss, 0); }
  public static void AddObstacleLevel(FlatBufferBuilder builder, long obstacleLevel) { builder.AddLong(12, obstacleLevel, 0); }
  public static void AddGradeNPC(FlatBufferBuilder builder, long gradeNPC) { builder.AddLong(13, gradeNPC, 0); }
  public static void AddGradeMinion(FlatBufferBuilder builder, long gradeMinion) { builder.AddLong(14, gradeMinion, 0); }
  public static void AddGradeElite(FlatBufferBuilder builder, long gradeElite) { builder.AddLong(15, gradeElite, 0); }
  public static void AddGradeChampion(FlatBufferBuilder builder, long gradeChampion) { builder.AddLong(16, gradeChampion, 0); }
  public static void AddGradeBoss(FlatBufferBuilder builder, long gradeBoss) { builder.AddLong(17, gradeBoss, 0); }
  public static void AddPlayerSightPointAdd(FlatBufferBuilder builder, long playerSightPointAdd) { builder.AddLong(18, playerSightPointAdd, 0); }
  public static void AddPlayerSightPointRate(FlatBufferBuilder builder, long playerSightPointRate) { builder.AddLong(19, playerSightPointRate, 0); }
  public static void AddPlayerAttackRangeAdd(FlatBufferBuilder builder, long playerAttackRangeAdd) { builder.AddLong(20, playerAttackRangeAdd, 0); }
  public static void AddPlayerAttackRangeRate(FlatBufferBuilder builder, long playerAttackRangeRate) { builder.AddLong(21, playerAttackRangeRate, 0); }
  public static void AddEnemySightPointAdd(FlatBufferBuilder builder, long enemySightPointAdd) { builder.AddLong(22, enemySightPointAdd, 0); }
  public static void AddEnemySightPointRate(FlatBufferBuilder builder, long enemySightPointRate) { builder.AddLong(23, enemySightPointRate, 0); }
  public static void AddEnemyAttackRangeAdd(FlatBufferBuilder builder, long enemyAttackRangeAdd) { builder.AddLong(24, enemyAttackRangeAdd, 0); }
  public static void AddEnemyAttackRangeRate(FlatBufferBuilder builder, long enemyAttackRangeRate) { builder.AddLong(25, enemyAttackRangeRate, 0); }
  public static void AddPlayerSkillRangeAdd(FlatBufferBuilder builder, long playerSkillRangeAdd) { builder.AddLong(26, playerSkillRangeAdd, 0); }
  public static void AddPlayerSkillRangeRate(FlatBufferBuilder builder, long playerSkillRangeRate) { builder.AddLong(27, playerSkillRangeRate, 0); }
  public static void AddEnemySkillRangeAdd(FlatBufferBuilder builder, long enemySkillRangeAdd) { builder.AddLong(28, enemySkillRangeAdd, 0); }
  public static void AddEnemySkillRangeRate(FlatBufferBuilder builder, long enemySkillRangeRate) { builder.AddLong(29, enemySkillRangeRate, 0); }
  public static void AddPlayerMinimumPositionGapRate(FlatBufferBuilder builder, long playerMinimumPositionGapRate) { builder.AddLong(30, playerMinimumPositionGapRate, 0); }
  public static void AddEnemyMinimumPositionGapRate(FlatBufferBuilder builder, long enemyMinimumPositionGapRate) { builder.AddLong(31, enemyMinimumPositionGapRate, 0); }
  public static void AddPlayerSightRangeMax(FlatBufferBuilder builder, bool playerSightRangeMax) { builder.AddBool(32, playerSightRangeMax, false); }
  public static void AddEnemySightRangeMax(FlatBufferBuilder builder, bool enemySightRangeMax) { builder.AddBool(33, enemySightRangeMax, false); }
  public static void AddTSSAirUnitHeight(FlatBufferBuilder builder, long tSSAirUnitHeight) { builder.AddLong(34, tSSAirUnitHeight, 0); }
  public static void AddIsPhaseBGM(FlatBufferBuilder builder, bool isPhaseBGM) { builder.AddBool(35, isPhaseBGM, false); }
  public static void AddBGMId(FlatBufferBuilder builder, long bGMId) { builder.AddLong(36, bGMId, 0); }
  public static void AddWarningUI(FlatBufferBuilder builder, bool warningUI) { builder.AddBool(37, warningUI, false); }
  public static void AddTSSHatchOpen(FlatBufferBuilder builder, bool tSSHatchOpen) { builder.AddBool(38, tSSHatchOpen, false); }
  public static void AddForcedTacticSpeed(FlatBufferBuilder builder, Global.TacticSpeed forcedTacticSpeed) { builder.AddInt(39, (int)forcedTacticSpeed, 0); }
  public static void AddForcedSkillUse(FlatBufferBuilder builder, Global.TacticSkillUse forcedSkillUse) { builder.AddInt(40, (int)forcedSkillUse, 0); }
  public static void AddShowNPCSkillCutIn(FlatBufferBuilder builder, Global.ShowSkillCutIn showNPCSkillCutIn) { builder.AddInt(41, (int)showNPCSkillCutIn, 0); }
  public static void AddImmuneHitBeforeTimeOutEnd(FlatBufferBuilder builder, bool immuneHitBeforeTimeOutEnd) { builder.AddBool(42, immuneHitBeforeTimeOutEnd, false); }
  public static void AddUIBattleHideFromScratch(FlatBufferBuilder builder, bool uIBattleHideFromScratch) { builder.AddBool(43, uIBattleHideFromScratch, false); }
  public static void AddUIEnemyCount(FlatBufferBuilder builder, Global.UIEnemyCountType uIEnemyCount) { builder.AddInt(44, (int)uIEnemyCount, 0); }
  public static void AddBattleReadyTimelinePath(FlatBufferBuilder builder, StringOffset battleReadyTimelinePathOffset) { builder.AddOffset(45, battleReadyTimelinePathOffset.Value, 0); }
  public static void AddBeforeVictoryTimelinePath(FlatBufferBuilder builder, StringOffset beforeVictoryTimelinePathOffset) { builder.AddOffset(46, beforeVictoryTimelinePathOffset.Value, 0); }
  public static void AddSkipBattleEnd(FlatBufferBuilder builder, bool skipBattleEnd) { builder.AddBool(47, skipBattleEnd, false); }
  public static void AddHideNPCWhenBattleEnd(FlatBufferBuilder builder, bool hideNPCWhenBattleEnd) { builder.AddBool(48, hideNPCWhenBattleEnd, false); }
  public static void AddCoverPointOff(FlatBufferBuilder builder, bool coverPointOff) { builder.AddBool(49, coverPointOff, false); }
  public static void AddUIHpScale(FlatBufferBuilder builder, float uIHpScale) { builder.AddFloat(50, uIHpScale, 0.0f); }
  public static void AddUIEmojiScale(FlatBufferBuilder builder, float uIEmojiScale) { builder.AddFloat(51, uIEmojiScale, 0.0f); }
  public static void AddUISkillMainLogScale(FlatBufferBuilder builder, float uISkillMainLogScale) { builder.AddFloat(52, uISkillMainLogScale, 0.0f); }
  public static void AddEffectCountLimit(FlatBufferBuilder builder, int effectCountLimit) { builder.AddInt(53, effectCountLimit, 0); }
  public static void AddAllyPassiveSkillId(FlatBufferBuilder builder, VectorOffset allyPassiveSkillIdOffset) { builder.AddOffset(54, allyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset allyPassiveSkillLevelOffset) { builder.AddOffset(55, allyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillId(FlatBufferBuilder builder, VectorOffset enemyPassiveSkillIdOffset) { builder.AddOffset(56, enemyPassiveSkillIdOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyPassiveSkillLevel(FlatBufferBuilder builder, VectorOffset enemyPassiveSkillLevelOffset) { builder.AddOffset(57, enemyPassiveSkillLevelOffset.Value, 0); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyPassiveSkillLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyPassiveSkillLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.GroundExcel> EndGroundExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.GroundExcel>(o);
  }
  public GroundExcelT UnPack() {
    var _o = new GroundExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GroundExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Ground");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.StageFileName = new List<string>();
    for (var _j = 0; _j < this.StageFileNameLength; ++_j) {_o.StageFileName.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StageFileName(_j), key) : this.StageFileName(_j));}
    _o.GroundSceneName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.GroundSceneName, key) : this.GroundSceneName;
    _o.FormationGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FormationGroupId, key) : this.FormationGroupId;
    _o.StageTopography = TableEncryptionService.UseEncryption ? (Global.StageTopography)TableEncryptionService.Convert((int)this.StageTopography, key) : this.StageTopography;
    _o.EnemyBulletType = TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)this.EnemyBulletType, key) : this.EnemyBulletType;
    _o.EnemyArmorType = TableEncryptionService.UseEncryption ? (Global.ArmorType)TableEncryptionService.Convert((int)this.EnemyArmorType, key) : this.EnemyArmorType;
    _o.LevelNPC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LevelNPC, key) : this.LevelNPC;
    _o.LevelMinion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LevelMinion, key) : this.LevelMinion;
    _o.LevelElite = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LevelElite, key) : this.LevelElite;
    _o.LevelChampion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LevelChampion, key) : this.LevelChampion;
    _o.LevelBoss = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LevelBoss, key) : this.LevelBoss;
    _o.ObstacleLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ObstacleLevel, key) : this.ObstacleLevel;
    _o.GradeNPC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GradeNPC, key) : this.GradeNPC;
    _o.GradeMinion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GradeMinion, key) : this.GradeMinion;
    _o.GradeElite = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GradeElite, key) : this.GradeElite;
    _o.GradeChampion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GradeChampion, key) : this.GradeChampion;
    _o.GradeBoss = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GradeBoss, key) : this.GradeBoss;
    _o.PlayerSightPointAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerSightPointAdd, key) : this.PlayerSightPointAdd;
    _o.PlayerSightPointRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerSightPointRate, key) : this.PlayerSightPointRate;
    _o.PlayerAttackRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerAttackRangeAdd, key) : this.PlayerAttackRangeAdd;
    _o.PlayerAttackRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerAttackRangeRate, key) : this.PlayerAttackRangeRate;
    _o.EnemySightPointAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemySightPointAdd, key) : this.EnemySightPointAdd;
    _o.EnemySightPointRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemySightPointRate, key) : this.EnemySightPointRate;
    _o.EnemyAttackRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemyAttackRangeAdd, key) : this.EnemyAttackRangeAdd;
    _o.EnemyAttackRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemyAttackRangeRate, key) : this.EnemyAttackRangeRate;
    _o.PlayerSkillRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerSkillRangeAdd, key) : this.PlayerSkillRangeAdd;
    _o.PlayerSkillRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerSkillRangeRate, key) : this.PlayerSkillRangeRate;
    _o.EnemySkillRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemySkillRangeAdd, key) : this.EnemySkillRangeAdd;
    _o.EnemySkillRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemySkillRangeRate, key) : this.EnemySkillRangeRate;
    _o.PlayerMinimumPositionGapRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PlayerMinimumPositionGapRate, key) : this.PlayerMinimumPositionGapRate;
    _o.EnemyMinimumPositionGapRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnemyMinimumPositionGapRate, key) : this.EnemyMinimumPositionGapRate;
    _o.PlayerSightRangeMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.PlayerSightRangeMax, key) : this.PlayerSightRangeMax;
    _o.EnemySightRangeMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.EnemySightRangeMax, key) : this.EnemySightRangeMax;
    _o.TSSAirUnitHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TSSAirUnitHeight, key) : this.TSSAirUnitHeight;
    _o.IsPhaseBGM = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsPhaseBGM, key) : this.IsPhaseBGM;
    _o.BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BGMId, key) : this.BGMId;
    _o.WarningUI = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.WarningUI, key) : this.WarningUI;
    _o.TSSHatchOpen = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.TSSHatchOpen, key) : this.TSSHatchOpen;
    _o.ForcedTacticSpeed = TableEncryptionService.UseEncryption ? (Global.TacticSpeed)TableEncryptionService.Convert((int)this.ForcedTacticSpeed, key) : this.ForcedTacticSpeed;
    _o.ForcedSkillUse = TableEncryptionService.UseEncryption ? (Global.TacticSkillUse)TableEncryptionService.Convert((int)this.ForcedSkillUse, key) : this.ForcedSkillUse;
    _o.ShowNPCSkillCutIn = TableEncryptionService.UseEncryption ? (Global.ShowSkillCutIn)TableEncryptionService.Convert((int)this.ShowNPCSkillCutIn, key) : this.ShowNPCSkillCutIn;
    _o.ImmuneHitBeforeTimeOutEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ImmuneHitBeforeTimeOutEnd, key) : this.ImmuneHitBeforeTimeOutEnd;
    _o.UIBattleHideFromScratch = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UIBattleHideFromScratch, key) : this.UIBattleHideFromScratch;
    _o.UIEnemyCount = TableEncryptionService.UseEncryption ? (Global.UIEnemyCountType)TableEncryptionService.Convert((int)this.UIEnemyCount, key) : this.UIEnemyCount;
    _o.BattleReadyTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BattleReadyTimelinePath, key) : this.BattleReadyTimelinePath;
    _o.BeforeVictoryTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BeforeVictoryTimelinePath, key) : this.BeforeVictoryTimelinePath;
    _o.SkipBattleEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.SkipBattleEnd, key) : this.SkipBattleEnd;
    _o.HideNPCWhenBattleEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.HideNPCWhenBattleEnd, key) : this.HideNPCWhenBattleEnd;
    _o.CoverPointOff = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.CoverPointOff, key) : this.CoverPointOff;
    _o.UIHpScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.UIHpScale, key) : this.UIHpScale;
    _o.UIEmojiScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.UIEmojiScale, key) : this.UIEmojiScale;
    _o.UISkillMainLogScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.UISkillMainLogScale, key) : this.UISkillMainLogScale;
    _o.EffectCountLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EffectCountLimit, key) : this.EffectCountLimit;
    _o.AllyPassiveSkillId = new List<string>();
    for (var _j = 0; _j < this.AllyPassiveSkillIdLength; ++_j) {_o.AllyPassiveSkillId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.AllyPassiveSkillId(_j), key) : this.AllyPassiveSkillId(_j));}
    _o.AllyPassiveSkillLevel = new List<int>();
    for (var _j = 0; _j < this.AllyPassiveSkillLevelLength; ++_j) {_o.AllyPassiveSkillLevel.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.AllyPassiveSkillLevel(_j), key) : this.AllyPassiveSkillLevel(_j));}
    _o.EnemyPassiveSkillId = new List<string>();
    for (var _j = 0; _j < this.EnemyPassiveSkillIdLength; ++_j) {_o.EnemyPassiveSkillId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EnemyPassiveSkillId(_j), key) : this.EnemyPassiveSkillId(_j));}
    _o.EnemyPassiveSkillLevel = new List<int>();
    for (var _j = 0; _j < this.EnemyPassiveSkillLevelLength; ++_j) {_o.EnemyPassiveSkillLevel.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.EnemyPassiveSkillLevel(_j), key) : this.EnemyPassiveSkillLevel(_j));}
  }
  public static Offset<Global.GroundExcel> Pack(FlatBufferBuilder builder, GroundExcelT _o) {
    if (_o == null) return default(Offset<Global.GroundExcel>);
		byte[] key = TableEncryptionService.CreateKey("Ground");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _StageFileName = default(VectorOffset);
    if (_o.StageFileName != null) {
      var __StageFileName = new StringOffset[_o.StageFileName.Count];
      for (var _j = 0; _j < __StageFileName.Length; ++_j) { __StageFileName[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StageFileName[_j], key) : _o.StageFileName[_j])); }
      _StageFileName = CreateStageFileNameVector(builder, __StageFileName);
    }
    var _GroundSceneName = _o.GroundSceneName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.GroundSceneName, key) : _o.GroundSceneName));
		var _FormationGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FormationGroupId, key) : _o.FormationGroupId;
		var _StageTopography = TableEncryptionService.UseEncryption ? (Global.StageTopography)TableEncryptionService.Convert((int)_o.StageTopography, key) : _o.StageTopography;
		var _EnemyBulletType = TableEncryptionService.UseEncryption ? (Global.BulletType)TableEncryptionService.Convert((int)_o.EnemyBulletType, key) : _o.EnemyBulletType;
		var _EnemyArmorType = TableEncryptionService.UseEncryption ? (Global.ArmorType)TableEncryptionService.Convert((int)_o.EnemyArmorType, key) : _o.EnemyArmorType;
		var _LevelNPC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LevelNPC, key) : _o.LevelNPC;
		var _LevelMinion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LevelMinion, key) : _o.LevelMinion;
		var _LevelElite = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LevelElite, key) : _o.LevelElite;
		var _LevelChampion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LevelChampion, key) : _o.LevelChampion;
		var _LevelBoss = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LevelBoss, key) : _o.LevelBoss;
		var _ObstacleLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ObstacleLevel, key) : _o.ObstacleLevel;
		var _GradeNPC = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GradeNPC, key) : _o.GradeNPC;
		var _GradeMinion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GradeMinion, key) : _o.GradeMinion;
		var _GradeElite = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GradeElite, key) : _o.GradeElite;
		var _GradeChampion = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GradeChampion, key) : _o.GradeChampion;
		var _GradeBoss = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GradeBoss, key) : _o.GradeBoss;
		var _PlayerSightPointAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerSightPointAdd, key) : _o.PlayerSightPointAdd;
		var _PlayerSightPointRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerSightPointRate, key) : _o.PlayerSightPointRate;
		var _PlayerAttackRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerAttackRangeAdd, key) : _o.PlayerAttackRangeAdd;
		var _PlayerAttackRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerAttackRangeRate, key) : _o.PlayerAttackRangeRate;
		var _EnemySightPointAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemySightPointAdd, key) : _o.EnemySightPointAdd;
		var _EnemySightPointRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemySightPointRate, key) : _o.EnemySightPointRate;
		var _EnemyAttackRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemyAttackRangeAdd, key) : _o.EnemyAttackRangeAdd;
		var _EnemyAttackRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemyAttackRangeRate, key) : _o.EnemyAttackRangeRate;
		var _PlayerSkillRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerSkillRangeAdd, key) : _o.PlayerSkillRangeAdd;
		var _PlayerSkillRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerSkillRangeRate, key) : _o.PlayerSkillRangeRate;
		var _EnemySkillRangeAdd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemySkillRangeAdd, key) : _o.EnemySkillRangeAdd;
		var _EnemySkillRangeRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemySkillRangeRate, key) : _o.EnemySkillRangeRate;
		var _PlayerMinimumPositionGapRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PlayerMinimumPositionGapRate, key) : _o.PlayerMinimumPositionGapRate;
		var _EnemyMinimumPositionGapRate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnemyMinimumPositionGapRate, key) : _o.EnemyMinimumPositionGapRate;
		var _PlayerSightRangeMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.PlayerSightRangeMax, key) : _o.PlayerSightRangeMax;
		var _EnemySightRangeMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.EnemySightRangeMax, key) : _o.EnemySightRangeMax;
		var _TSSAirUnitHeight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.TSSAirUnitHeight, key) : _o.TSSAirUnitHeight;
		var _IsPhaseBGM = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsPhaseBGM, key) : _o.IsPhaseBGM;
		var _BGMId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BGMId, key) : _o.BGMId;
		var _WarningUI = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.WarningUI, key) : _o.WarningUI;
		var _TSSHatchOpen = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.TSSHatchOpen, key) : _o.TSSHatchOpen;
		var _ForcedTacticSpeed = TableEncryptionService.UseEncryption ? (Global.TacticSpeed)TableEncryptionService.Convert((int)_o.ForcedTacticSpeed, key) : _o.ForcedTacticSpeed;
		var _ForcedSkillUse = TableEncryptionService.UseEncryption ? (Global.TacticSkillUse)TableEncryptionService.Convert((int)_o.ForcedSkillUse, key) : _o.ForcedSkillUse;
		var _ShowNPCSkillCutIn = TableEncryptionService.UseEncryption ? (Global.ShowSkillCutIn)TableEncryptionService.Convert((int)_o.ShowNPCSkillCutIn, key) : _o.ShowNPCSkillCutIn;
		var _ImmuneHitBeforeTimeOutEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ImmuneHitBeforeTimeOutEnd, key) : _o.ImmuneHitBeforeTimeOutEnd;
		var _UIBattleHideFromScratch = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UIBattleHideFromScratch, key) : _o.UIBattleHideFromScratch;
		var _UIEnemyCount = TableEncryptionService.UseEncryption ? (Global.UIEnemyCountType)TableEncryptionService.Convert((int)_o.UIEnemyCount, key) : _o.UIEnemyCount;
    var _BattleReadyTimelinePath = _o.BattleReadyTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BattleReadyTimelinePath, key) : _o.BattleReadyTimelinePath));
    var _BeforeVictoryTimelinePath = _o.BeforeVictoryTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BeforeVictoryTimelinePath, key) : _o.BeforeVictoryTimelinePath));
		var _SkipBattleEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.SkipBattleEnd, key) : _o.SkipBattleEnd;
		var _HideNPCWhenBattleEnd = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.HideNPCWhenBattleEnd, key) : _o.HideNPCWhenBattleEnd;
		var _CoverPointOff = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.CoverPointOff, key) : _o.CoverPointOff;
		var _UIHpScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.UIHpScale, key) : _o.UIHpScale;
		var _UIEmojiScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.UIEmojiScale, key) : _o.UIEmojiScale;
		var _UISkillMainLogScale = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.UISkillMainLogScale, key) : _o.UISkillMainLogScale;
		var _EffectCountLimit = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.EffectCountLimit, key) : _o.EffectCountLimit;
    var _AllyPassiveSkillId = default(VectorOffset);
    if (_o.AllyPassiveSkillId != null) {
      var __AllyPassiveSkillId = new StringOffset[_o.AllyPassiveSkillId.Count];
      for (var _j = 0; _j < __AllyPassiveSkillId.Length; ++_j) { __AllyPassiveSkillId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.AllyPassiveSkillId[_j], key) : _o.AllyPassiveSkillId[_j])); }
      _AllyPassiveSkillId = CreateAllyPassiveSkillIdVector(builder, __AllyPassiveSkillId);
    }
    var _AllyPassiveSkillLevel = default(VectorOffset);
    if (_o.AllyPassiveSkillLevel != null) {
      var __AllyPassiveSkillLevel = _o.AllyPassiveSkillLevel.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _AllyPassiveSkillLevel = CreateAllyPassiveSkillLevelVector(builder, __AllyPassiveSkillLevel);
    }
    var _EnemyPassiveSkillId = default(VectorOffset);
    if (_o.EnemyPassiveSkillId != null) {
      var __EnemyPassiveSkillId = new StringOffset[_o.EnemyPassiveSkillId.Count];
      for (var _j = 0; _j < __EnemyPassiveSkillId.Length; ++_j) { __EnemyPassiveSkillId[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EnemyPassiveSkillId[_j], key) : _o.EnemyPassiveSkillId[_j])); }
      _EnemyPassiveSkillId = CreateEnemyPassiveSkillIdVector(builder, __EnemyPassiveSkillId);
    }
    var _EnemyPassiveSkillLevel = default(VectorOffset);
    if (_o.EnemyPassiveSkillLevel != null) {
      var __EnemyPassiveSkillLevel = _o.EnemyPassiveSkillLevel.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _EnemyPassiveSkillLevel = CreateEnemyPassiveSkillLevelVector(builder, __EnemyPassiveSkillLevel);
    }
    return CreateGroundExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _StageFileName,
      _GroundSceneName,
      TableEncryptionService.UseEncryption ? _FormationGroupId : _o.FormationGroupId,
      TableEncryptionService.UseEncryption ? _StageTopography : _o.StageTopography,
      TableEncryptionService.UseEncryption ? _EnemyBulletType : _o.EnemyBulletType,
      TableEncryptionService.UseEncryption ? _EnemyArmorType : _o.EnemyArmorType,
      TableEncryptionService.UseEncryption ? _LevelNPC : _o.LevelNPC,
      TableEncryptionService.UseEncryption ? _LevelMinion : _o.LevelMinion,
      TableEncryptionService.UseEncryption ? _LevelElite : _o.LevelElite,
      TableEncryptionService.UseEncryption ? _LevelChampion : _o.LevelChampion,
      TableEncryptionService.UseEncryption ? _LevelBoss : _o.LevelBoss,
      TableEncryptionService.UseEncryption ? _ObstacleLevel : _o.ObstacleLevel,
      TableEncryptionService.UseEncryption ? _GradeNPC : _o.GradeNPC,
      TableEncryptionService.UseEncryption ? _GradeMinion : _o.GradeMinion,
      TableEncryptionService.UseEncryption ? _GradeElite : _o.GradeElite,
      TableEncryptionService.UseEncryption ? _GradeChampion : _o.GradeChampion,
      TableEncryptionService.UseEncryption ? _GradeBoss : _o.GradeBoss,
      TableEncryptionService.UseEncryption ? _PlayerSightPointAdd : _o.PlayerSightPointAdd,
      TableEncryptionService.UseEncryption ? _PlayerSightPointRate : _o.PlayerSightPointRate,
      TableEncryptionService.UseEncryption ? _PlayerAttackRangeAdd : _o.PlayerAttackRangeAdd,
      TableEncryptionService.UseEncryption ? _PlayerAttackRangeRate : _o.PlayerAttackRangeRate,
      TableEncryptionService.UseEncryption ? _EnemySightPointAdd : _o.EnemySightPointAdd,
      TableEncryptionService.UseEncryption ? _EnemySightPointRate : _o.EnemySightPointRate,
      TableEncryptionService.UseEncryption ? _EnemyAttackRangeAdd : _o.EnemyAttackRangeAdd,
      TableEncryptionService.UseEncryption ? _EnemyAttackRangeRate : _o.EnemyAttackRangeRate,
      TableEncryptionService.UseEncryption ? _PlayerSkillRangeAdd : _o.PlayerSkillRangeAdd,
      TableEncryptionService.UseEncryption ? _PlayerSkillRangeRate : _o.PlayerSkillRangeRate,
      TableEncryptionService.UseEncryption ? _EnemySkillRangeAdd : _o.EnemySkillRangeAdd,
      TableEncryptionService.UseEncryption ? _EnemySkillRangeRate : _o.EnemySkillRangeRate,
      TableEncryptionService.UseEncryption ? _PlayerMinimumPositionGapRate : _o.PlayerMinimumPositionGapRate,
      TableEncryptionService.UseEncryption ? _EnemyMinimumPositionGapRate : _o.EnemyMinimumPositionGapRate,
      TableEncryptionService.UseEncryption ? _PlayerSightRangeMax : _o.PlayerSightRangeMax,
      TableEncryptionService.UseEncryption ? _EnemySightRangeMax : _o.EnemySightRangeMax,
      TableEncryptionService.UseEncryption ? _TSSAirUnitHeight : _o.TSSAirUnitHeight,
      TableEncryptionService.UseEncryption ? _IsPhaseBGM : _o.IsPhaseBGM,
      TableEncryptionService.UseEncryption ? _BGMId : _o.BGMId,
      TableEncryptionService.UseEncryption ? _WarningUI : _o.WarningUI,
      TableEncryptionService.UseEncryption ? _TSSHatchOpen : _o.TSSHatchOpen,
      TableEncryptionService.UseEncryption ? _ForcedTacticSpeed : _o.ForcedTacticSpeed,
      TableEncryptionService.UseEncryption ? _ForcedSkillUse : _o.ForcedSkillUse,
      TableEncryptionService.UseEncryption ? _ShowNPCSkillCutIn : _o.ShowNPCSkillCutIn,
      TableEncryptionService.UseEncryption ? _ImmuneHitBeforeTimeOutEnd : _o.ImmuneHitBeforeTimeOutEnd,
      TableEncryptionService.UseEncryption ? _UIBattleHideFromScratch : _o.UIBattleHideFromScratch,
      TableEncryptionService.UseEncryption ? _UIEnemyCount : _o.UIEnemyCount,
      _BattleReadyTimelinePath,
      _BeforeVictoryTimelinePath,
      TableEncryptionService.UseEncryption ? _SkipBattleEnd : _o.SkipBattleEnd,
      TableEncryptionService.UseEncryption ? _HideNPCWhenBattleEnd : _o.HideNPCWhenBattleEnd,
      TableEncryptionService.UseEncryption ? _CoverPointOff : _o.CoverPointOff,
      TableEncryptionService.UseEncryption ? _UIHpScale : _o.UIHpScale,
      TableEncryptionService.UseEncryption ? _UIEmojiScale : _o.UIEmojiScale,
      TableEncryptionService.UseEncryption ? _UISkillMainLogScale : _o.UISkillMainLogScale,
      TableEncryptionService.UseEncryption ? _EffectCountLimit : _o.EffectCountLimit,
      _AllyPassiveSkillId,
      _AllyPassiveSkillLevel,
      _EnemyPassiveSkillId,
      _EnemyPassiveSkillLevel);
  }
}

public class GroundExcelT
{
  public long Id { get; set; }
  public List<string> StageFileName { get; set; }
  public string GroundSceneName { get; set; }
  public long FormationGroupId { get; set; }
  public Global.StageTopography StageTopography { get; set; }
  public Global.BulletType EnemyBulletType { get; set; }
  public Global.ArmorType EnemyArmorType { get; set; }
  public long LevelNPC { get; set; }
  public long LevelMinion { get; set; }
  public long LevelElite { get; set; }
  public long LevelChampion { get; set; }
  public long LevelBoss { get; set; }
  public long ObstacleLevel { get; set; }
  public long GradeNPC { get; set; }
  public long GradeMinion { get; set; }
  public long GradeElite { get; set; }
  public long GradeChampion { get; set; }
  public long GradeBoss { get; set; }
  public long PlayerSightPointAdd { get; set; }
  public long PlayerSightPointRate { get; set; }
  public long PlayerAttackRangeAdd { get; set; }
  public long PlayerAttackRangeRate { get; set; }
  public long EnemySightPointAdd { get; set; }
  public long EnemySightPointRate { get; set; }
  public long EnemyAttackRangeAdd { get; set; }
  public long EnemyAttackRangeRate { get; set; }
  public long PlayerSkillRangeAdd { get; set; }
  public long PlayerSkillRangeRate { get; set; }
  public long EnemySkillRangeAdd { get; set; }
  public long EnemySkillRangeRate { get; set; }
  public long PlayerMinimumPositionGapRate { get; set; }
  public long EnemyMinimumPositionGapRate { get; set; }
  public bool PlayerSightRangeMax { get; set; }
  public bool EnemySightRangeMax { get; set; }
  public long TSSAirUnitHeight { get; set; }
  public bool IsPhaseBGM { get; set; }
  public long BGMId { get; set; }
  public bool WarningUI { get; set; }
  public bool TSSHatchOpen { get; set; }
  public Global.TacticSpeed ForcedTacticSpeed { get; set; }
  public Global.TacticSkillUse ForcedSkillUse { get; set; }
  public Global.ShowSkillCutIn ShowNPCSkillCutIn { get; set; }
  public bool ImmuneHitBeforeTimeOutEnd { get; set; }
  public bool UIBattleHideFromScratch { get; set; }
  public Global.UIEnemyCountType UIEnemyCount { get; set; }
  public string BattleReadyTimelinePath { get; set; }
  public string BeforeVictoryTimelinePath { get; set; }
  public bool SkipBattleEnd { get; set; }
  public bool HideNPCWhenBattleEnd { get; set; }
  public bool CoverPointOff { get; set; }
  public float UIHpScale { get; set; }
  public float UIEmojiScale { get; set; }
  public float UISkillMainLogScale { get; set; }
  public int EffectCountLimit { get; set; }
  public List<string> AllyPassiveSkillId { get; set; }
  public List<int> AllyPassiveSkillLevel { get; set; }
  public List<string> EnemyPassiveSkillId { get; set; }
  public List<int> EnemyPassiveSkillLevel { get; set; }

  public GroundExcelT() {
    this.Id = 0;
    this.StageFileName = null;
    this.GroundSceneName = null;
    this.FormationGroupId = 0;
    this.StageTopography = Global.StageTopography.Street;
    this.EnemyBulletType = Global.BulletType.Normal;
    this.EnemyArmorType = Global.ArmorType.LightArmor;
    this.LevelNPC = 0;
    this.LevelMinion = 0;
    this.LevelElite = 0;
    this.LevelChampion = 0;
    this.LevelBoss = 0;
    this.ObstacleLevel = 0;
    this.GradeNPC = 0;
    this.GradeMinion = 0;
    this.GradeElite = 0;
    this.GradeChampion = 0;
    this.GradeBoss = 0;
    this.PlayerSightPointAdd = 0;
    this.PlayerSightPointRate = 0;
    this.PlayerAttackRangeAdd = 0;
    this.PlayerAttackRangeRate = 0;
    this.EnemySightPointAdd = 0;
    this.EnemySightPointRate = 0;
    this.EnemyAttackRangeAdd = 0;
    this.EnemyAttackRangeRate = 0;
    this.PlayerSkillRangeAdd = 0;
    this.PlayerSkillRangeRate = 0;
    this.EnemySkillRangeAdd = 0;
    this.EnemySkillRangeRate = 0;
    this.PlayerMinimumPositionGapRate = 0;
    this.EnemyMinimumPositionGapRate = 0;
    this.PlayerSightRangeMax = false;
    this.EnemySightRangeMax = false;
    this.TSSAirUnitHeight = 0;
    this.IsPhaseBGM = false;
    this.BGMId = 0;
    this.WarningUI = false;
    this.TSSHatchOpen = false;
    this.ForcedTacticSpeed = Global.TacticSpeed.None;
    this.ForcedSkillUse = Global.TacticSkillUse.None;
    this.ShowNPCSkillCutIn = Global.ShowSkillCutIn.None;
    this.ImmuneHitBeforeTimeOutEnd = false;
    this.UIBattleHideFromScratch = false;
    this.UIEnemyCount = Global.UIEnemyCountType.Normal;
    this.BattleReadyTimelinePath = null;
    this.BeforeVictoryTimelinePath = null;
    this.SkipBattleEnd = false;
    this.HideNPCWhenBattleEnd = false;
    this.CoverPointOff = false;
    this.UIHpScale = 0.0f;
    this.UIEmojiScale = 0.0f;
    this.UISkillMainLogScale = 0.0f;
    this.EffectCountLimit = 0;
    this.AllyPassiveSkillId = null;
    this.AllyPassiveSkillLevel = null;
    this.EnemyPassiveSkillId = null;
    this.EnemyPassiveSkillLevel = null;
  }
}


static public class GroundExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*StageFileName*/, false)
      && verifier.VerifyString(tablePos, 8 /*GroundSceneName*/, false)
      && verifier.VerifyField(tablePos, 10 /*FormationGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*StageTopography*/, 4 /*Global.StageTopography*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*EnemyBulletType*/, 4 /*Global.BulletType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*EnemyArmorType*/, 4 /*Global.ArmorType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*LevelNPC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*LevelMinion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*LevelElite*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*LevelChampion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*LevelBoss*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*ObstacleLevel*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*GradeNPC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*GradeMinion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*GradeElite*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*GradeChampion*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*GradeBoss*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*PlayerSightPointAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*PlayerSightPointRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*PlayerAttackRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*PlayerAttackRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*EnemySightPointAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*EnemySightPointRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*EnemyAttackRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*EnemyAttackRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*PlayerSkillRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*PlayerSkillRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*EnemySkillRangeAdd*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*EnemySkillRangeRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*PlayerMinimumPositionGapRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*EnemyMinimumPositionGapRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*PlayerSightRangeMax*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*EnemySightRangeMax*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*TSSAirUnitHeight*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*IsPhaseBGM*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 76 /*BGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*WarningUI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 80 /*TSSHatchOpen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 82 /*ForcedTacticSpeed*/, 4 /*Global.TacticSpeed*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*ForcedSkillUse*/, 4 /*Global.TacticSkillUse*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*ShowNPCSkillCutIn*/, 4 /*Global.ShowSkillCutIn*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*ImmuneHitBeforeTimeOutEnd*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 90 /*UIBattleHideFromScratch*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 92 /*UIEnemyCount*/, 4 /*Global.UIEnemyCountType*/, 4, false)
      && verifier.VerifyString(tablePos, 94 /*BattleReadyTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 96 /*BeforeVictoryTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 98 /*SkipBattleEnd*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 100 /*HideNPCWhenBattleEnd*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 102 /*CoverPointOff*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 104 /*UIHpScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*UIEmojiScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*UISkillMainLogScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 110 /*EffectCountLimit*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 112 /*AllyPassiveSkillId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 114 /*AllyPassiveSkillLevel*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 116 /*EnemyPassiveSkillId*/, false)
      && verifier.VerifyVectorOfData(tablePos, 118 /*EnemyPassiveSkillLevel*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
