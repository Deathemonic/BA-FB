// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattlePassRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassRewardExcel GetRootAsBattlePassRewardExcel(ByteBuffer _bb) { return GetRootAsBattlePassRewardExcel(_bb, new BattlePassRewardExcel()); }
  public static BattlePassRewardExcel GetRootAsBattlePassRewardExcel(ByteBuffer _bb, BattlePassRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType RewardParcelType { get { int o = __p.__offset(10); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long RewardParcelUniqueId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.BattlePassRewardExcel> CreateBattlePassRewardExcel(FlatBufferBuilder builder,
      long Id = 0,
      long RewardGroupId = 0,
      long Level = 0,
      Global.ParcelType RewardParcelType = Global.ParcelType.None,
      long RewardParcelUniqueId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(6);
    BattlePassRewardExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    BattlePassRewardExcel.AddRewardParcelUniqueId(builder, RewardParcelUniqueId);
    BattlePassRewardExcel.AddLevel(builder, Level);
    BattlePassRewardExcel.AddRewardGroupId(builder, RewardGroupId);
    BattlePassRewardExcel.AddId(builder, Id);
    BattlePassRewardExcel.AddRewardParcelType(builder, RewardParcelType);
    return BattlePassRewardExcel.EndBattlePassRewardExcel(builder);
  }

  public static void StartBattlePassRewardExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddRewardGroupId(FlatBufferBuilder builder, long rewardGroupId) { builder.AddLong(1, rewardGroupId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, long level) { builder.AddLong(2, level, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, Global.ParcelType rewardParcelType) { builder.AddInt(3, (int)rewardParcelType, 0); }
  public static void AddRewardParcelUniqueId(FlatBufferBuilder builder, long rewardParcelUniqueId) { builder.AddLong(4, rewardParcelUniqueId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long rewardParcelAmount) { builder.AddLong(5, rewardParcelAmount, 0); }
  public static Offset<Global.BattlePassRewardExcel> EndBattlePassRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.BattlePassRewardExcel>(o);
  }
  public BattlePassRewardExcelT UnPack() {
    var _o = new BattlePassRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BattlePassReward");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.RewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardGroupId, key) : this.RewardGroupId;
    _o.Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Level, key) : this.Level;
    _o.RewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType, key) : this.RewardParcelType;
    _o.RewardParcelUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelUniqueId, key) : this.RewardParcelUniqueId;
    _o.RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelAmount, key) : this.RewardParcelAmount;
  }
  public static Offset<Global.BattlePassRewardExcel> Pack(FlatBufferBuilder builder, BattlePassRewardExcelT _o) {
    if (_o == null) return default(Offset<Global.BattlePassRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("BattlePassReward");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _RewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardGroupId, key) : _o.RewardGroupId;
		var _Level = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Level, key) : _o.Level;
		var _RewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.RewardParcelType, key) : _o.RewardParcelType;
		var _RewardParcelUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelUniqueId, key) : _o.RewardParcelUniqueId;
		var _RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelAmount, key) : _o.RewardParcelAmount;
    return CreateBattlePassRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _RewardGroupId : _o.RewardGroupId,
      TableEncryptionService.UseEncryption ? _Level : _o.Level,
      TableEncryptionService.UseEncryption ? _RewardParcelType : _o.RewardParcelType,
      TableEncryptionService.UseEncryption ? _RewardParcelUniqueId : _o.RewardParcelUniqueId,
      TableEncryptionService.UseEncryption ? _RewardParcelAmount : _o.RewardParcelAmount);
  }
}

public class BattlePassRewardExcelT
{
  public long Id { get; set; }
  public long RewardGroupId { get; set; }
  public long Level { get; set; }
  public Global.ParcelType RewardParcelType { get; set; }
  public long RewardParcelUniqueId { get; set; }
  public long RewardParcelAmount { get; set; }

  public BattlePassRewardExcelT() {
    this.Id = 0;
    this.RewardGroupId = 0;
    this.Level = 0;
    this.RewardParcelType = Global.ParcelType.None;
    this.RewardParcelUniqueId = 0;
    this.RewardParcelAmount = 0;
  }
}


static public class BattlePassRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*RewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Level*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*RewardParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RewardParcelUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*RewardParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
