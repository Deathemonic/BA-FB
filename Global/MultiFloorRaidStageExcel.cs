// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MultiFloorRaidStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MultiFloorRaidStageExcel GetRootAsMultiFloorRaidStageExcel(ByteBuffer _bb) { return GetRootAsMultiFloorRaidStageExcel(_bb, new MultiFloorRaidStageExcel()); }
  public static MultiFloorRaidStageExcel GetRootAsMultiFloorRaidStageExcel(ByteBuffer _bb, MultiFloorRaidStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MultiFloorRaidStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.EchelonExtensionType EchelonExtensionType { get { int o = __p.__offset(6); return o != 0 ? (Global.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : Global.EchelonExtensionType.Base; } }
  public string BossGroupId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBossGroupIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetBossGroupIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetBossGroupIdArray() { return __p.__vector_as_array<byte>(8); }
  public int AssistSlot { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long StageOpenCondition { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool FloorListSection { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long FloorListSectionOpenCondition { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint FloorListSectionLabel { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int Difficulty { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool UseBossIndex { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseBossAIPhaseSync { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string FloorListImgPath { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFloorListImgPathBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetFloorListImgPathBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetFloorListImgPathArray() { return __p.__vector_as_array<byte>(26); }
  public string FloorImgPath { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFloorImgPathBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetFloorImgPathBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetFloorImgPathArray() { return __p.__vector_as_array<byte>(28); }
  public long RaidCharacterId { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BossCharacterId(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int BossCharacterIdLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetBossCharacterIdBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetBossCharacterIdBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetBossCharacterIdArray() { return __p.__vector_as_array<long>(32); }
  public long StatChangeId(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StatChangeIdLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStatChangeIdBytes() { return __p.__vector_as_span<long>(34, 8); }
#else
  public ArraySegment<byte>? GetStatChangeIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public long[] GetStatChangeIdArray() { return __p.__vector_as_array<long>(34); }
  public long BattleDuration { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroundId { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RecommendLevel { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardGroupId { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string BattleReadyTimelinePath(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BattleReadyTimelinePathLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int BattleReadyTimelinePhaseStart(int j) { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BattleReadyTimelinePhaseStartLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBattleReadyTimelinePhaseStartBytes() { return __p.__vector_as_span<int>(46, 4); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePhaseStartBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public int[] GetBattleReadyTimelinePhaseStartArray() { return __p.__vector_as_array<int>(46); }
  public int BattleReadyTimelinePhaseEnd(int j) { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BattleReadyTimelinePhaseEndLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBattleReadyTimelinePhaseEndBytes() { return __p.__vector_as_span<int>(48, 4); }
#else
  public ArraySegment<byte>? GetBattleReadyTimelinePhaseEndBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public int[] GetBattleReadyTimelinePhaseEndArray() { return __p.__vector_as_array<int>(48); }
  public string VictoryTimelinePath { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(50); }
  public bool ShowSkillCard { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Global.MultiFloorRaidStageExcel> CreateMultiFloorRaidStageExcel(FlatBufferBuilder builder,
      long Id = 0,
      Global.EchelonExtensionType EchelonExtensionType = Global.EchelonExtensionType.Base,
      StringOffset BossGroupIdOffset = default(StringOffset),
      int AssistSlot = 0,
      long StageOpenCondition = 0,
      bool FloorListSection = false,
      long FloorListSectionOpenCondition = 0,
      uint FloorListSectionLabel = 0,
      int Difficulty = 0,
      bool UseBossIndex = false,
      bool UseBossAIPhaseSync = false,
      StringOffset FloorListImgPathOffset = default(StringOffset),
      StringOffset FloorImgPathOffset = default(StringOffset),
      long RaidCharacterId = 0,
      VectorOffset BossCharacterIdOffset = default(VectorOffset),
      VectorOffset StatChangeIdOffset = default(VectorOffset),
      long BattleDuration = 0,
      long GroundId = 0,
      long RecommendLevel = 0,
      long RewardGroupId = 0,
      VectorOffset BattleReadyTimelinePathOffset = default(VectorOffset),
      VectorOffset BattleReadyTimelinePhaseStartOffset = default(VectorOffset),
      VectorOffset BattleReadyTimelinePhaseEndOffset = default(VectorOffset),
      StringOffset VictoryTimelinePathOffset = default(StringOffset),
      bool ShowSkillCard = false) {
    builder.StartTable(25);
    MultiFloorRaidStageExcel.AddRewardGroupId(builder, RewardGroupId);
    MultiFloorRaidStageExcel.AddRecommendLevel(builder, RecommendLevel);
    MultiFloorRaidStageExcel.AddGroundId(builder, GroundId);
    MultiFloorRaidStageExcel.AddBattleDuration(builder, BattleDuration);
    MultiFloorRaidStageExcel.AddRaidCharacterId(builder, RaidCharacterId);
    MultiFloorRaidStageExcel.AddFloorListSectionOpenCondition(builder, FloorListSectionOpenCondition);
    MultiFloorRaidStageExcel.AddStageOpenCondition(builder, StageOpenCondition);
    MultiFloorRaidStageExcel.AddId(builder, Id);
    MultiFloorRaidStageExcel.AddVictoryTimelinePath(builder, VictoryTimelinePathOffset);
    MultiFloorRaidStageExcel.AddBattleReadyTimelinePhaseEnd(builder, BattleReadyTimelinePhaseEndOffset);
    MultiFloorRaidStageExcel.AddBattleReadyTimelinePhaseStart(builder, BattleReadyTimelinePhaseStartOffset);
    MultiFloorRaidStageExcel.AddBattleReadyTimelinePath(builder, BattleReadyTimelinePathOffset);
    MultiFloorRaidStageExcel.AddStatChangeId(builder, StatChangeIdOffset);
    MultiFloorRaidStageExcel.AddBossCharacterId(builder, BossCharacterIdOffset);
    MultiFloorRaidStageExcel.AddFloorImgPath(builder, FloorImgPathOffset);
    MultiFloorRaidStageExcel.AddFloorListImgPath(builder, FloorListImgPathOffset);
    MultiFloorRaidStageExcel.AddDifficulty(builder, Difficulty);
    MultiFloorRaidStageExcel.AddFloorListSectionLabel(builder, FloorListSectionLabel);
    MultiFloorRaidStageExcel.AddAssistSlot(builder, AssistSlot);
    MultiFloorRaidStageExcel.AddBossGroupId(builder, BossGroupIdOffset);
    MultiFloorRaidStageExcel.AddEchelonExtensionType(builder, EchelonExtensionType);
    MultiFloorRaidStageExcel.AddShowSkillCard(builder, ShowSkillCard);
    MultiFloorRaidStageExcel.AddUseBossAIPhaseSync(builder, UseBossAIPhaseSync);
    MultiFloorRaidStageExcel.AddUseBossIndex(builder, UseBossIndex);
    MultiFloorRaidStageExcel.AddFloorListSection(builder, FloorListSection);
    return MultiFloorRaidStageExcel.EndMultiFloorRaidStageExcel(builder);
  }

  public static void StartMultiFloorRaidStageExcel(FlatBufferBuilder builder) { builder.StartTable(25); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEchelonExtensionType(FlatBufferBuilder builder, Global.EchelonExtensionType echelonExtensionType) { builder.AddInt(1, (int)echelonExtensionType, 0); }
  public static void AddBossGroupId(FlatBufferBuilder builder, StringOffset bossGroupIdOffset) { builder.AddOffset(2, bossGroupIdOffset.Value, 0); }
  public static void AddAssistSlot(FlatBufferBuilder builder, int assistSlot) { builder.AddInt(3, assistSlot, 0); }
  public static void AddStageOpenCondition(FlatBufferBuilder builder, long stageOpenCondition) { builder.AddLong(4, stageOpenCondition, 0); }
  public static void AddFloorListSection(FlatBufferBuilder builder, bool floorListSection) { builder.AddBool(5, floorListSection, false); }
  public static void AddFloorListSectionOpenCondition(FlatBufferBuilder builder, long floorListSectionOpenCondition) { builder.AddLong(6, floorListSectionOpenCondition, 0); }
  public static void AddFloorListSectionLabel(FlatBufferBuilder builder, uint floorListSectionLabel) { builder.AddUint(7, floorListSectionLabel, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int difficulty) { builder.AddInt(8, difficulty, 0); }
  public static void AddUseBossIndex(FlatBufferBuilder builder, bool useBossIndex) { builder.AddBool(9, useBossIndex, false); }
  public static void AddUseBossAIPhaseSync(FlatBufferBuilder builder, bool useBossAIPhaseSync) { builder.AddBool(10, useBossAIPhaseSync, false); }
  public static void AddFloorListImgPath(FlatBufferBuilder builder, StringOffset floorListImgPathOffset) { builder.AddOffset(11, floorListImgPathOffset.Value, 0); }
  public static void AddFloorImgPath(FlatBufferBuilder builder, StringOffset floorImgPathOffset) { builder.AddOffset(12, floorImgPathOffset.Value, 0); }
  public static void AddRaidCharacterId(FlatBufferBuilder builder, long raidCharacterId) { builder.AddLong(13, raidCharacterId, 0); }
  public static void AddBossCharacterId(FlatBufferBuilder builder, VectorOffset bossCharacterIdOffset) { builder.AddOffset(14, bossCharacterIdOffset.Value, 0); }
  public static VectorOffset CreateBossCharacterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBossCharacterIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBossCharacterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddStatChangeId(FlatBufferBuilder builder, VectorOffset statChangeIdOffset) { builder.AddOffset(15, statChangeIdOffset.Value, 0); }
  public static VectorOffset CreateStatChangeIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStatChangeIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatChangeIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStatChangeIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStatChangeIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddBattleDuration(FlatBufferBuilder builder, long battleDuration) { builder.AddLong(16, battleDuration, 0); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(17, groundId, 0); }
  public static void AddRecommendLevel(FlatBufferBuilder builder, long recommendLevel) { builder.AddLong(18, recommendLevel, 0); }
  public static void AddRewardGroupId(FlatBufferBuilder builder, long rewardGroupId) { builder.AddLong(19, rewardGroupId, 0); }
  public static void AddBattleReadyTimelinePath(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePathOffset) { builder.AddOffset(20, battleReadyTimelinePathOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattleReadyTimelinePhaseStart(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePhaseStartOffset) { builder.AddOffset(21, battleReadyTimelinePhaseStartOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseStartVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePhaseStartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBattleReadyTimelinePhaseEnd(FlatBufferBuilder builder, VectorOffset battleReadyTimelinePhaseEndOffset) { builder.AddOffset(22, battleReadyTimelinePhaseEndOffset.Value, 0); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBattleReadyTimelinePhaseEndVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBattleReadyTimelinePhaseEndVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVictoryTimelinePath(FlatBufferBuilder builder, StringOffset victoryTimelinePathOffset) { builder.AddOffset(23, victoryTimelinePathOffset.Value, 0); }
  public static void AddShowSkillCard(FlatBufferBuilder builder, bool showSkillCard) { builder.AddBool(24, showSkillCard, false); }
  public static Offset<Global.MultiFloorRaidStageExcel> EndMultiFloorRaidStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MultiFloorRaidStageExcel>(o);
  }
  public MultiFloorRaidStageExcelT UnPack() {
    var _o = new MultiFloorRaidStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MultiFloorRaidStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MultiFloorRaidStage");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.EchelonExtensionType = TableEncryptionService.UseEncryption ? (Global.EchelonExtensionType)TableEncryptionService.Convert((int)this.EchelonExtensionType, key) : this.EchelonExtensionType;
    _o.BossGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BossGroupId, key) : this.BossGroupId;
    _o.AssistSlot = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.AssistSlot, key) : this.AssistSlot;
    _o.StageOpenCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StageOpenCondition, key) : this.StageOpenCondition;
    _o.FloorListSection = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.FloorListSection, key) : this.FloorListSection;
    _o.FloorListSectionOpenCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FloorListSectionOpenCondition, key) : this.FloorListSectionOpenCondition;
    _o.FloorListSectionLabel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.FloorListSectionLabel, key) : this.FloorListSectionLabel;
    _o.Difficulty = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Difficulty, key) : this.Difficulty;
    _o.UseBossIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UseBossIndex, key) : this.UseBossIndex;
    _o.UseBossAIPhaseSync = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UseBossAIPhaseSync, key) : this.UseBossAIPhaseSync;
    _o.FloorListImgPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.FloorListImgPath, key) : this.FloorListImgPath;
    _o.FloorImgPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.FloorImgPath, key) : this.FloorImgPath;
    _o.RaidCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RaidCharacterId, key) : this.RaidCharacterId;
    _o.BossCharacterId = new List<long>();
    for (var _j = 0; _j < this.BossCharacterIdLength; ++_j) {_o.BossCharacterId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BossCharacterId(_j), key) : this.BossCharacterId(_j));}
    _o.StatChangeId = new List<long>();
    for (var _j = 0; _j < this.StatChangeIdLength; ++_j) {_o.StatChangeId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StatChangeId(_j), key) : this.StatChangeId(_j));}
    _o.BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.BattleDuration, key) : this.BattleDuration;
    _o.GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundId, key) : this.GroundId;
    _o.RecommendLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RecommendLevel, key) : this.RecommendLevel;
    _o.RewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardGroupId, key) : this.RewardGroupId;
    _o.BattleReadyTimelinePath = new List<string>();
    for (var _j = 0; _j < this.BattleReadyTimelinePathLength; ++_j) {_o.BattleReadyTimelinePath.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.BattleReadyTimelinePath(_j), key) : this.BattleReadyTimelinePath(_j));}
    _o.BattleReadyTimelinePhaseStart = new List<int>();
    for (var _j = 0; _j < this.BattleReadyTimelinePhaseStartLength; ++_j) {_o.BattleReadyTimelinePhaseStart.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BattleReadyTimelinePhaseStart(_j), key) : this.BattleReadyTimelinePhaseStart(_j));}
    _o.BattleReadyTimelinePhaseEnd = new List<int>();
    for (var _j = 0; _j < this.BattleReadyTimelinePhaseEndLength; ++_j) {_o.BattleReadyTimelinePhaseEnd.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.BattleReadyTimelinePhaseEnd(_j), key) : this.BattleReadyTimelinePhaseEnd(_j));}
    _o.VictoryTimelinePath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.VictoryTimelinePath, key) : this.VictoryTimelinePath;
    _o.ShowSkillCard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.ShowSkillCard, key) : this.ShowSkillCard;
  }
  public static Offset<Global.MultiFloorRaidStageExcel> Pack(FlatBufferBuilder builder, MultiFloorRaidStageExcelT _o) {
    if (_o == null) return default(Offset<Global.MultiFloorRaidStageExcel>);
		byte[] key = TableEncryptionService.CreateKey("MultiFloorRaidStage");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _EchelonExtensionType = TableEncryptionService.UseEncryption ? (Global.EchelonExtensionType)TableEncryptionService.Convert((int)_o.EchelonExtensionType, key) : _o.EchelonExtensionType;
    var _BossGroupId = _o.BossGroupId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BossGroupId, key) : _o.BossGroupId));
		var _AssistSlot = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.AssistSlot, key) : _o.AssistSlot;
		var _StageOpenCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.StageOpenCondition, key) : _o.StageOpenCondition;
		var _FloorListSection = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.FloorListSection, key) : _o.FloorListSection;
		var _FloorListSectionOpenCondition = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FloorListSectionOpenCondition, key) : _o.FloorListSectionOpenCondition;
		var _FloorListSectionLabel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.FloorListSectionLabel, key) : _o.FloorListSectionLabel;
		var _Difficulty = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Difficulty, key) : _o.Difficulty;
		var _UseBossIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UseBossIndex, key) : _o.UseBossIndex;
		var _UseBossAIPhaseSync = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UseBossAIPhaseSync, key) : _o.UseBossAIPhaseSync;
    var _FloorListImgPath = _o.FloorListImgPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.FloorListImgPath, key) : _o.FloorListImgPath));
    var _FloorImgPath = _o.FloorImgPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.FloorImgPath, key) : _o.FloorImgPath));
		var _RaidCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RaidCharacterId, key) : _o.RaidCharacterId;
    var _BossCharacterId = default(VectorOffset);
    if (_o.BossCharacterId != null) {
      var __BossCharacterId = _o.BossCharacterId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _BossCharacterId = CreateBossCharacterIdVector(builder, __BossCharacterId);
    }
    var _StatChangeId = default(VectorOffset);
    if (_o.StatChangeId != null) {
      var __StatChangeId = _o.StatChangeId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _StatChangeId = CreateStatChangeIdVector(builder, __StatChangeId);
    }
		var _BattleDuration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.BattleDuration, key) : _o.BattleDuration;
		var _GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundId, key) : _o.GroundId;
		var _RecommendLevel = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RecommendLevel, key) : _o.RecommendLevel;
		var _RewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardGroupId, key) : _o.RewardGroupId;
    var _BattleReadyTimelinePath = default(VectorOffset);
    if (_o.BattleReadyTimelinePath != null) {
      var __BattleReadyTimelinePath = new StringOffset[_o.BattleReadyTimelinePath.Count];
      for (var _j = 0; _j < __BattleReadyTimelinePath.Length; ++_j) { __BattleReadyTimelinePath[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.BattleReadyTimelinePath[_j], key) : _o.BattleReadyTimelinePath[_j])); }
      _BattleReadyTimelinePath = CreateBattleReadyTimelinePathVector(builder, __BattleReadyTimelinePath);
    }
    var _BattleReadyTimelinePhaseStart = default(VectorOffset);
    if (_o.BattleReadyTimelinePhaseStart != null) {
      var __BattleReadyTimelinePhaseStart = _o.BattleReadyTimelinePhaseStart.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _BattleReadyTimelinePhaseStart = CreateBattleReadyTimelinePhaseStartVector(builder, __BattleReadyTimelinePhaseStart);
    }
    var _BattleReadyTimelinePhaseEnd = default(VectorOffset);
    if (_o.BattleReadyTimelinePhaseEnd != null) {
      var __BattleReadyTimelinePhaseEnd = _o.BattleReadyTimelinePhaseEnd.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _BattleReadyTimelinePhaseEnd = CreateBattleReadyTimelinePhaseEndVector(builder, __BattleReadyTimelinePhaseEnd);
    }
    var _VictoryTimelinePath = _o.VictoryTimelinePath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.VictoryTimelinePath, key) : _o.VictoryTimelinePath));
		var _ShowSkillCard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.ShowSkillCard, key) : _o.ShowSkillCard;
    return CreateMultiFloorRaidStageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _EchelonExtensionType : _o.EchelonExtensionType,
      _BossGroupId,
      TableEncryptionService.UseEncryption ? _AssistSlot : _o.AssistSlot,
      TableEncryptionService.UseEncryption ? _StageOpenCondition : _o.StageOpenCondition,
      TableEncryptionService.UseEncryption ? _FloorListSection : _o.FloorListSection,
      TableEncryptionService.UseEncryption ? _FloorListSectionOpenCondition : _o.FloorListSectionOpenCondition,
      TableEncryptionService.UseEncryption ? _FloorListSectionLabel : _o.FloorListSectionLabel,
      TableEncryptionService.UseEncryption ? _Difficulty : _o.Difficulty,
      TableEncryptionService.UseEncryption ? _UseBossIndex : _o.UseBossIndex,
      TableEncryptionService.UseEncryption ? _UseBossAIPhaseSync : _o.UseBossAIPhaseSync,
      _FloorListImgPath,
      _FloorImgPath,
      TableEncryptionService.UseEncryption ? _RaidCharacterId : _o.RaidCharacterId,
      _BossCharacterId,
      _StatChangeId,
      TableEncryptionService.UseEncryption ? _BattleDuration : _o.BattleDuration,
      TableEncryptionService.UseEncryption ? _GroundId : _o.GroundId,
      TableEncryptionService.UseEncryption ? _RecommendLevel : _o.RecommendLevel,
      TableEncryptionService.UseEncryption ? _RewardGroupId : _o.RewardGroupId,
      _BattleReadyTimelinePath,
      _BattleReadyTimelinePhaseStart,
      _BattleReadyTimelinePhaseEnd,
      _VictoryTimelinePath,
      TableEncryptionService.UseEncryption ? _ShowSkillCard : _o.ShowSkillCard);
  }
}

public class MultiFloorRaidStageExcelT
{
  public long Id { get; set; }
  public Global.EchelonExtensionType EchelonExtensionType { get; set; }
  public string BossGroupId { get; set; }
  public int AssistSlot { get; set; }
  public long StageOpenCondition { get; set; }
  public bool FloorListSection { get; set; }
  public long FloorListSectionOpenCondition { get; set; }
  public uint FloorListSectionLabel { get; set; }
  public int Difficulty { get; set; }
  public bool UseBossIndex { get; set; }
  public bool UseBossAIPhaseSync { get; set; }
  public string FloorListImgPath { get; set; }
  public string FloorImgPath { get; set; }
  public long RaidCharacterId { get; set; }
  public List<long> BossCharacterId { get; set; }
  public List<long> StatChangeId { get; set; }
  public long BattleDuration { get; set; }
  public long GroundId { get; set; }
  public long RecommendLevel { get; set; }
  public long RewardGroupId { get; set; }
  public List<string> BattleReadyTimelinePath { get; set; }
  public List<int> BattleReadyTimelinePhaseStart { get; set; }
  public List<int> BattleReadyTimelinePhaseEnd { get; set; }
  public string VictoryTimelinePath { get; set; }
  public bool ShowSkillCard { get; set; }

  public MultiFloorRaidStageExcelT() {
    this.Id = 0;
    this.EchelonExtensionType = Global.EchelonExtensionType.Base;
    this.BossGroupId = null;
    this.AssistSlot = 0;
    this.StageOpenCondition = 0;
    this.FloorListSection = false;
    this.FloorListSectionOpenCondition = 0;
    this.FloorListSectionLabel = 0;
    this.Difficulty = 0;
    this.UseBossIndex = false;
    this.UseBossAIPhaseSync = false;
    this.FloorListImgPath = null;
    this.FloorImgPath = null;
    this.RaidCharacterId = 0;
    this.BossCharacterId = null;
    this.StatChangeId = null;
    this.BattleDuration = 0;
    this.GroundId = 0;
    this.RecommendLevel = 0;
    this.RewardGroupId = 0;
    this.BattleReadyTimelinePath = null;
    this.BattleReadyTimelinePhaseStart = null;
    this.BattleReadyTimelinePhaseEnd = null;
    this.VictoryTimelinePath = null;
    this.ShowSkillCard = false;
  }
}


static public class MultiFloorRaidStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EchelonExtensionType*/, 4 /*Global.EchelonExtensionType*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*BossGroupId*/, false)
      && verifier.VerifyField(tablePos, 10 /*AssistSlot*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*StageOpenCondition*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*FloorListSection*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*FloorListSectionOpenCondition*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*FloorListSectionLabel*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Difficulty*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*UseBossIndex*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*UseBossAIPhaseSync*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 26 /*FloorListImgPath*/, false)
      && verifier.VerifyString(tablePos, 28 /*FloorImgPath*/, false)
      && verifier.VerifyField(tablePos, 30 /*RaidCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*BossCharacterId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 34 /*StatChangeId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 36 /*BattleDuration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*RecommendLevel*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*RewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*BattleReadyTimelinePath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 46 /*BattleReadyTimelinePhaseStart*/, 4 /*int*/, false)
      && verifier.VerifyVectorOfData(tablePos, 48 /*BattleReadyTimelinePhaseEnd*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 50 /*VictoryTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 52 /*ShowSkillCard*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
