// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CumulativeTimeRewardExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CumulativeTimeRewardExcel GetRootAsCumulativeTimeRewardExcel(ByteBuffer _bb) { return GetRootAsCumulativeTimeRewardExcel(_bb, new CumulativeTimeRewardExcel()); }
  public static CumulativeTimeRewardExcel GetRootAsCumulativeTimeRewardExcel(ByteBuffer _bb, CumulativeTimeRewardExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CumulativeTimeRewardExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Description { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(6); }
  public string StartDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStartDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStartDateArray() { return __p.__vector_as_array<byte>(8); }
  public string EndDate { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndDateBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEndDateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEndDateArray() { return __p.__vector_as_array<byte>(10); }
  public long TimeCondition(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int TimeConditionLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetTimeConditionBytes() { return __p.__vector_as_span<long>(12, 8); }
#else
  public ArraySegment<byte>? GetTimeConditionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public long[] GetTimeConditionArray() { return __p.__vector_as_array<long>(12); }
  public Global.ParcelType RewardParcelType(int j) { int o = __p.__offset(14); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ParcelType)0; }
  public int RewardParcelTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ParcelType> GetRewardParcelTypeBytes() { return __p.__vector_as_span<Global.ParcelType>(14, 4); }
#else
  public ArraySegment<byte>? GetRewardParcelTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public Global.ParcelType[] GetRewardParcelTypeArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ParcelType[] a = new Global.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long RewardId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RewardIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetRewardIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetRewardIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetRewardIdArray() { return __p.__vector_as_array<long>(16); }
  public int RewardAmount(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardAmountLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardAmountBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetRewardAmountBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetRewardAmountArray() { return __p.__vector_as_array<int>(18); }

  public static Offset<Global.CumulativeTimeRewardExcel> CreateCumulativeTimeRewardExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset DescriptionOffset = default(StringOffset),
      StringOffset StartDateOffset = default(StringOffset),
      StringOffset EndDateOffset = default(StringOffset),
      VectorOffset timeConditionOffset = default(VectorOffset),
      VectorOffset rewardParcelTypeOffset = default(VectorOffset),
      VectorOffset rewardIdOffset = default(VectorOffset),
      VectorOffset rewardAmountOffset = default(VectorOffset)) {
    builder.StartTable(8);
    CumulativeTimeRewardExcel.AddId(builder, Id);
    CumulativeTimeRewardExcel.AddRewardAmount(builder, rewardAmountOffset);
    CumulativeTimeRewardExcel.AddRewardId(builder, rewardIdOffset);
    CumulativeTimeRewardExcel.AddRewardParcelType(builder, rewardParcelTypeOffset);
    CumulativeTimeRewardExcel.AddTimeCondition(builder, timeConditionOffset);
    CumulativeTimeRewardExcel.AddEndDate(builder, EndDateOffset);
    CumulativeTimeRewardExcel.AddStartDate(builder, StartDateOffset);
    CumulativeTimeRewardExcel.AddDescription(builder, DescriptionOffset);
    return CumulativeTimeRewardExcel.EndCumulativeTimeRewardExcel(builder);
  }

  public static void StartCumulativeTimeRewardExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(1, descriptionOffset.Value, 0); }
  public static void AddStartDate(FlatBufferBuilder builder, StringOffset startDateOffset) { builder.AddOffset(2, startDateOffset.Value, 0); }
  public static void AddEndDate(FlatBufferBuilder builder, StringOffset endDateOffset) { builder.AddOffset(3, endDateOffset.Value, 0); }
  public static void AddTimeCondition(FlatBufferBuilder builder, VectorOffset timeConditionOffset) { builder.AddOffset(4, timeConditionOffset.Value, 0); }
  public static VectorOffset CreateTimeConditionVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTimeConditionVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTimeConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTimeConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTimeConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, VectorOffset rewardParcelTypeOffset) { builder.AddOffset(5, rewardParcelTypeOffset.Value, 0); }
  public static VectorOffset CreateRewardParcelTypeVector(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardId(FlatBufferBuilder builder, VectorOffset rewardIdOffset) { builder.AddOffset(6, rewardIdOffset.Value, 0); }
  public static VectorOffset CreateRewardIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddRewardAmount(FlatBufferBuilder builder, VectorOffset rewardAmountOffset) { builder.AddOffset(7, rewardAmountOffset.Value, 0); }
  public static VectorOffset CreateRewardAmountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardAmountVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardAmountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.CumulativeTimeRewardExcel> EndCumulativeTimeRewardExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.CumulativeTimeRewardExcel>(o);
  }
  public CumulativeTimeRewardExcelT UnPack() {
    var _o = new CumulativeTimeRewardExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CumulativeTimeRewardExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CumulativeTimeReward");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Description = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.Description, key) : this.Description;
    _o.StartDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.StartDate, key) : this.StartDate;
    _o.EndDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EndDate, key) : this.EndDate;
    _o.TimeCondition = new List<long>();
    for (var _j = 0; _j < this.TimeConditionLength; ++_j) {_o.TimeCondition.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.TimeCondition(_j), key) : this.TimeCondition(_j));}
    _o.RewardParcelType = new List<Global.ParcelType>();
    for (var _j = 0; _j < this.RewardParcelTypeLength; ++_j) {_o.RewardParcelType.Add(TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType(_j), key) : this.RewardParcelType(_j));}
    _o.RewardId = new List<long>();
    for (var _j = 0; _j < this.RewardIdLength; ++_j) {_o.RewardId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardId(_j), key) : this.RewardId(_j));}
    _o.RewardAmount = new List<int>();
    for (var _j = 0; _j < this.RewardAmountLength; ++_j) {_o.RewardAmount.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.RewardAmount(_j), key) : this.RewardAmount(_j));}
  }
  public static Offset<Global.CumulativeTimeRewardExcel> Pack(FlatBufferBuilder builder, CumulativeTimeRewardExcelT _o) {
    if (_o == null) return default(Offset<Global.CumulativeTimeRewardExcel>);
		byte[] key = TableEncryptionService.CreateKey("CumulativeTimeReward");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _Description = _o.Description == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.Description, key) : _o.Description));
    var _StartDate = _o.StartDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.StartDate, key) : _o.StartDate));
    var _EndDate = _o.EndDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EndDate, key) : _o.EndDate));
    var _timeCondition = default(VectorOffset);
    if (_o.TimeCondition != null) {
      var __timeCondition = _o.TimeCondition.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _timeCondition = CreateTimeConditionVector(builder, __timeCondition);
    }
    var _rewardParcelType = default(VectorOffset);
    if (_o.RewardParcelType != null) {
      var __rewardParcelType = _o.RewardParcelType.Select(x => TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _rewardParcelType = CreateRewardParcelTypeVector(builder, __rewardParcelType);
    }
    var _rewardId = default(VectorOffset);
    if (_o.RewardId != null) {
      var __rewardId = _o.RewardId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _rewardId = CreateRewardIdVector(builder, __rewardId);
    }
    var _rewardAmount = default(VectorOffset);
    if (_o.RewardAmount != null) {
      var __rewardAmount = _o.RewardAmount.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _rewardAmount = CreateRewardAmountVector(builder, __rewardAmount);
    }
    return CreateCumulativeTimeRewardExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _Description,
      _StartDate,
      _EndDate,
      _timeCondition,
      _rewardParcelType,
      _rewardId,
      _rewardAmount);
  }
}

public class CumulativeTimeRewardExcelT
{
  public long Id { get; set; }
  public string Description { get; set; }
  public string StartDate { get; set; }
  public string EndDate { get; set; }
  public List<long> TimeCondition { get; set; }
  public List<Global.ParcelType> RewardParcelType { get; set; }
  public List<long> RewardId { get; set; }
  public List<int> RewardAmount { get; set; }

  public CumulativeTimeRewardExcelT() {
    this.Id = 0;
    this.Description = null;
    this.StartDate = null;
    this.EndDate = null;
    this.TimeCondition = null;
    this.RewardParcelType = null;
    this.RewardId = null;
    this.RewardAmount = null;
  }
}


static public class CumulativeTimeRewardExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Description*/, false)
      && verifier.VerifyString(tablePos, 8 /*StartDate*/, false)
      && verifier.VerifyString(tablePos, 10 /*EndDate*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*TimeCondition*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*RewardParcelType*/, 4 /*Global.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*RewardId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*RewardAmount*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
