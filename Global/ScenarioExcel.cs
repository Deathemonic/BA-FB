// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ScenarioExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb) { return GetRootAsScenarioExcel(_bb, new ScenarioExcel()); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb, ScenarioExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Global.ScenarioBGType None(int j) { int o = __p.__offset(4); return o != 0 ? (Global.ScenarioBGType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ScenarioBGType)0; }
  public int NoneLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ScenarioBGType> GetNoneBytes() { return __p.__vector_as_span<Global.ScenarioBGType>(4, 4); }
#else
  public ArraySegment<byte>? GetNoneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public Global.ScenarioBGType[] GetNoneArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ScenarioBGType[] a = new Global.ScenarioBGType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ScenarioBGType)__p.bb.GetInt(p + i * 4); } return a; }
  public Global.ScenarioCharacterAction Idle(int j) { int o = __p.__offset(6); return o != 0 ? (Global.ScenarioCharacterAction)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ScenarioCharacterAction)0; }
  public int IdleLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ScenarioCharacterAction> GetIdleBytes() { return __p.__vector_as_span<Global.ScenarioCharacterAction>(6, 4); }
#else
  public ArraySegment<byte>? GetIdleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Global.ScenarioCharacterAction[] GetIdleArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ScenarioCharacterAction[] a = new Global.ScenarioCharacterAction[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ScenarioCharacterAction)__p.bb.GetInt(p + i * 4); } return a; }
  public Global.DialogCategory Cafe { get { int o = __p.__offset(8); return o != 0 ? (Global.DialogCategory)__p.bb.GetInt(o + __p.bb_pos) : Global.DialogCategory.Cafe; } }
  public Global.DialogType Talk { get { int o = __p.__offset(10); return o != 0 ? (Global.DialogType)__p.bb.GetInt(o + __p.bb_pos) : Global.DialogType.Talk; } }
  public Global.StoryCondition Open { get { int o = __p.__offset(12); return o != 0 ? (Global.StoryCondition)__p.bb.GetInt(o + __p.bb_pos) : Global.StoryCondition.Open; } }
  public Global.EmojiEvent EnterConver { get { int o = __p.__offset(14); return o != 0 ? (Global.EmojiEvent)__p.bb.GetInt(o + __p.bb_pos) : Global.EmojiEvent.EnterConver; } }
  public Global.ScenarioZoomAnchors Center { get { int o = __p.__offset(16); return o != 0 ? (Global.ScenarioZoomAnchors)__p.bb.GetInt(o + __p.bb_pos) : Global.ScenarioZoomAnchors.Center; } }
  public Global.ScenarioZoomType Instant { get { int o = __p.__offset(18); return o != 0 ? (Global.ScenarioZoomType)__p.bb.GetInt(o + __p.bb_pos) : Global.ScenarioZoomType.Instant; } }
  public Global.ScenarioContentType Prologue { get { int o = __p.__offset(20); return o != 0 ? (Global.ScenarioContentType)__p.bb.GetInt(o + __p.bb_pos) : Global.ScenarioContentType.Prologue; } }

  public static Offset<Global.ScenarioExcel> CreateScenarioExcel(FlatBufferBuilder builder,
      VectorOffset noneOffset = default(VectorOffset),
      VectorOffset idleOffset = default(VectorOffset),
      Global.DialogCategory Cafe = Global.DialogCategory.Cafe,
      Global.DialogType Talk = Global.DialogType.Talk,
      Global.StoryCondition Open = Global.StoryCondition.Open,
      Global.EmojiEvent EnterConver = Global.EmojiEvent.EnterConver,
      Global.ScenarioZoomAnchors Center = Global.ScenarioZoomAnchors.Center,
      Global.ScenarioZoomType Instant = Global.ScenarioZoomType.Instant,
      Global.ScenarioContentType Prologue = Global.ScenarioContentType.Prologue) {
    builder.StartTable(9);
    ScenarioExcel.AddPrologue(builder, Prologue);
    ScenarioExcel.AddInstant(builder, Instant);
    ScenarioExcel.AddCenter(builder, Center);
    ScenarioExcel.AddEnterConver(builder, EnterConver);
    ScenarioExcel.AddOpen(builder, Open);
    ScenarioExcel.AddTalk(builder, Talk);
    ScenarioExcel.AddCafe(builder, Cafe);
    ScenarioExcel.AddIdle(builder, idleOffset);
    ScenarioExcel.AddNone(builder, noneOffset);
    return ScenarioExcel.EndScenarioExcel(builder);
  }

  public static void StartScenarioExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddNone(FlatBufferBuilder builder, VectorOffset noneOffset) { builder.AddOffset(0, noneOffset.Value, 0); }
  public static VectorOffset CreateNoneVector(FlatBufferBuilder builder, Global.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, Global.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ScenarioBGType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ScenarioBGType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdle(FlatBufferBuilder builder, VectorOffset idleOffset) { builder.AddOffset(1, idleOffset.Value, 0); }
  public static VectorOffset CreateIdleVector(FlatBufferBuilder builder, Global.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, Global.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ScenarioCharacterAction> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ScenarioCharacterAction>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCafe(FlatBufferBuilder builder, Global.DialogCategory cafe) { builder.AddInt(2, (int)cafe, 0); }
  public static void AddTalk(FlatBufferBuilder builder, Global.DialogType talk) { builder.AddInt(3, (int)talk, 0); }
  public static void AddOpen(FlatBufferBuilder builder, Global.StoryCondition open) { builder.AddInt(4, (int)open, 0); }
  public static void AddEnterConver(FlatBufferBuilder builder, Global.EmojiEvent enterConver) { builder.AddInt(5, (int)enterConver, 0); }
  public static void AddCenter(FlatBufferBuilder builder, Global.ScenarioZoomAnchors center) { builder.AddInt(6, (int)center, 0); }
  public static void AddInstant(FlatBufferBuilder builder, Global.ScenarioZoomType instant) { builder.AddInt(7, (int)instant, 0); }
  public static void AddPrologue(FlatBufferBuilder builder, Global.ScenarioContentType prologue) { builder.AddInt(8, (int)prologue, 0); }
  public static Offset<Global.ScenarioExcel> EndScenarioExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ScenarioExcel>(o);
  }
  public ScenarioExcelT UnPack() {
    var _o = new ScenarioExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Scenario");
    _o.None = new List<Global.ScenarioBGType>();
    for (var _j = 0; _j < this.NoneLength; ++_j) {_o.None.Add(TableEncryptionService.UseEncryption ? (Global.ScenarioBGType)TableEncryptionService.Convert((int)this.None(_j), key) : this.None(_j));}
    _o.Idle = new List<Global.ScenarioCharacterAction>();
    for (var _j = 0; _j < this.IdleLength; ++_j) {_o.Idle.Add(TableEncryptionService.UseEncryption ? (Global.ScenarioCharacterAction)TableEncryptionService.Convert((int)this.Idle(_j), key) : this.Idle(_j));}
    _o.Cafe = TableEncryptionService.UseEncryption ? (Global.DialogCategory)TableEncryptionService.Convert((int)this.Cafe, key) : this.Cafe;
    _o.Talk = TableEncryptionService.UseEncryption ? (Global.DialogType)TableEncryptionService.Convert((int)this.Talk, key) : this.Talk;
    _o.Open = TableEncryptionService.UseEncryption ? (Global.StoryCondition)TableEncryptionService.Convert((int)this.Open, key) : this.Open;
    _o.EnterConver = TableEncryptionService.UseEncryption ? (Global.EmojiEvent)TableEncryptionService.Convert((int)this.EnterConver, key) : this.EnterConver;
    _o.Center = TableEncryptionService.UseEncryption ? (Global.ScenarioZoomAnchors)TableEncryptionService.Convert((int)this.Center, key) : this.Center;
    _o.Instant = TableEncryptionService.UseEncryption ? (Global.ScenarioZoomType)TableEncryptionService.Convert((int)this.Instant, key) : this.Instant;
    _o.Prologue = TableEncryptionService.UseEncryption ? (Global.ScenarioContentType)TableEncryptionService.Convert((int)this.Prologue, key) : this.Prologue;
  }
  public static Offset<Global.ScenarioExcel> Pack(FlatBufferBuilder builder, ScenarioExcelT _o) {
    if (_o == null) return default(Offset<Global.ScenarioExcel>);
		byte[] key = TableEncryptionService.CreateKey("Scenario");
    var _none = default(VectorOffset);
    if (_o.None != null) {
      var __none = _o.None.Select(x => TableEncryptionService.UseEncryption ? (Global.ScenarioBGType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _none = CreateNoneVector(builder, __none);
    }
    var _idle = default(VectorOffset);
    if (_o.Idle != null) {
      var __idle = _o.Idle.Select(x => TableEncryptionService.UseEncryption ? (Global.ScenarioCharacterAction)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _idle = CreateIdleVector(builder, __idle);
    }
		var _Cafe = TableEncryptionService.UseEncryption ? (Global.DialogCategory)TableEncryptionService.Convert((int)_o.Cafe, key) : _o.Cafe;
		var _Talk = TableEncryptionService.UseEncryption ? (Global.DialogType)TableEncryptionService.Convert((int)_o.Talk, key) : _o.Talk;
		var _Open = TableEncryptionService.UseEncryption ? (Global.StoryCondition)TableEncryptionService.Convert((int)_o.Open, key) : _o.Open;
		var _EnterConver = TableEncryptionService.UseEncryption ? (Global.EmojiEvent)TableEncryptionService.Convert((int)_o.EnterConver, key) : _o.EnterConver;
		var _Center = TableEncryptionService.UseEncryption ? (Global.ScenarioZoomAnchors)TableEncryptionService.Convert((int)_o.Center, key) : _o.Center;
		var _Instant = TableEncryptionService.UseEncryption ? (Global.ScenarioZoomType)TableEncryptionService.Convert((int)_o.Instant, key) : _o.Instant;
		var _Prologue = TableEncryptionService.UseEncryption ? (Global.ScenarioContentType)TableEncryptionService.Convert((int)_o.Prologue, key) : _o.Prologue;
    return CreateScenarioExcel(
      builder,
      _none,
      _idle,
      TableEncryptionService.UseEncryption ? _Cafe : _o.Cafe,
      TableEncryptionService.UseEncryption ? _Talk : _o.Talk,
      TableEncryptionService.UseEncryption ? _Open : _o.Open,
      TableEncryptionService.UseEncryption ? _EnterConver : _o.EnterConver,
      TableEncryptionService.UseEncryption ? _Center : _o.Center,
      TableEncryptionService.UseEncryption ? _Instant : _o.Instant,
      TableEncryptionService.UseEncryption ? _Prologue : _o.Prologue);
  }
}

public class ScenarioExcelT
{
  public List<Global.ScenarioBGType> None { get; set; }
  public List<Global.ScenarioCharacterAction> Idle { get; set; }
  public Global.DialogCategory Cafe { get; set; }
  public Global.DialogType Talk { get; set; }
  public Global.StoryCondition Open { get; set; }
  public Global.EmojiEvent EnterConver { get; set; }
  public Global.ScenarioZoomAnchors Center { get; set; }
  public Global.ScenarioZoomType Instant { get; set; }
  public Global.ScenarioContentType Prologue { get; set; }

  public ScenarioExcelT() {
    this.None = null;
    this.Idle = null;
    this.Cafe = Global.DialogCategory.Cafe;
    this.Talk = Global.DialogType.Talk;
    this.Open = Global.StoryCondition.Open;
    this.EnterConver = Global.EmojiEvent.EnterConver;
    this.Center = Global.ScenarioZoomAnchors.Center;
    this.Instant = Global.ScenarioZoomType.Instant;
    this.Prologue = Global.ScenarioContentType.Prologue;
  }
}


static public class ScenarioExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*None*/, 4 /*Global.ScenarioBGType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Idle*/, 4 /*Global.ScenarioCharacterAction*/, false)
      && verifier.VerifyField(tablePos, 8 /*Cafe*/, 4 /*Global.DialogCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Talk*/, 4 /*Global.DialogType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Open*/, 4 /*Global.StoryCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*EnterConver*/, 4 /*Global.EmojiEvent*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Center*/, 4 /*Global.ScenarioZoomAnchors*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Instant*/, 4 /*Global.ScenarioZoomType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Prologue*/, 4 /*Global.ScenarioContentType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
