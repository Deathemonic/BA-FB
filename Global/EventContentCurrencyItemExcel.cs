// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EventContentCurrencyItemExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventContentCurrencyItemExcel GetRootAsEventContentCurrencyItemExcel(ByteBuffer _bb) { return GetRootAsEventContentCurrencyItemExcel(_bb, new EventContentCurrencyItemExcel()); }
  public static EventContentCurrencyItemExcel GetRootAsEventContentCurrencyItemExcel(ByteBuffer _bb, EventContentCurrencyItemExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentCurrencyItemExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.EventContentItemType EventContentItemType { get { int o = __p.__offset(6); return o != 0 ? (Global.EventContentItemType)__p.bb.GetInt(o + __p.bb_pos) : Global.EventContentItemType.EventPoint; } }
  public long ItemUniqueId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string UseShortCutContentType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUseShortCutContentTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetUseShortCutContentTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetUseShortCutContentTypeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Global.EventContentCurrencyItemExcel> CreateEventContentCurrencyItemExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Global.EventContentItemType EventContentItemType = Global.EventContentItemType.EventPoint,
      long ItemUniqueId = 0,
      StringOffset UseShortCutContentTypeOffset = default(StringOffset)) {
    builder.StartTable(4);
    EventContentCurrencyItemExcel.AddItemUniqueId(builder, ItemUniqueId);
    EventContentCurrencyItemExcel.AddEventContentId(builder, EventContentId);
    EventContentCurrencyItemExcel.AddUseShortCutContentType(builder, UseShortCutContentTypeOffset);
    EventContentCurrencyItemExcel.AddEventContentItemType(builder, EventContentItemType);
    return EventContentCurrencyItemExcel.EndEventContentCurrencyItemExcel(builder);
  }

  public static void StartEventContentCurrencyItemExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddEventContentItemType(FlatBufferBuilder builder, Global.EventContentItemType eventContentItemType) { builder.AddInt(1, (int)eventContentItemType, 0); }
  public static void AddItemUniqueId(FlatBufferBuilder builder, long itemUniqueId) { builder.AddLong(2, itemUniqueId, 0); }
  public static void AddUseShortCutContentType(FlatBufferBuilder builder, StringOffset useShortCutContentTypeOffset) { builder.AddOffset(3, useShortCutContentTypeOffset.Value, 0); }
  public static Offset<Global.EventContentCurrencyItemExcel> EndEventContentCurrencyItemExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EventContentCurrencyItemExcel>(o);
  }
  public EventContentCurrencyItemExcelT UnPack() {
    var _o = new EventContentCurrencyItemExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentCurrencyItemExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentCurrencyItem");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.EventContentItemType = TableEncryptionService.UseEncryption ? (Global.EventContentItemType)TableEncryptionService.Convert((int)this.EventContentItemType, key) : this.EventContentItemType;
    _o.ItemUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ItemUniqueId, key) : this.ItemUniqueId;
    _o.UseShortCutContentType = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.UseShortCutContentType, key) : this.UseShortCutContentType;
  }
  public static Offset<Global.EventContentCurrencyItemExcel> Pack(FlatBufferBuilder builder, EventContentCurrencyItemExcelT _o) {
    if (_o == null) return default(Offset<Global.EventContentCurrencyItemExcel>);
		byte[] key = TableEncryptionService.CreateKey("EventContentCurrencyItem");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _EventContentItemType = TableEncryptionService.UseEncryption ? (Global.EventContentItemType)TableEncryptionService.Convert((int)_o.EventContentItemType, key) : _o.EventContentItemType;
		var _ItemUniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ItemUniqueId, key) : _o.ItemUniqueId;
    var _UseShortCutContentType = _o.UseShortCutContentType == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.UseShortCutContentType, key) : _o.UseShortCutContentType));
    return CreateEventContentCurrencyItemExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _EventContentItemType : _o.EventContentItemType,
      TableEncryptionService.UseEncryption ? _ItemUniqueId : _o.ItemUniqueId,
      _UseShortCutContentType);
  }
}

public class EventContentCurrencyItemExcelT
{
  public long EventContentId { get; set; }
  public Global.EventContentItemType EventContentItemType { get; set; }
  public long ItemUniqueId { get; set; }
  public string UseShortCutContentType { get; set; }

  public EventContentCurrencyItemExcelT() {
    this.EventContentId = 0;
    this.EventContentItemType = Global.EventContentItemType.EventPoint;
    this.ItemUniqueId = 0;
    this.UseShortCutContentType = null;
  }
}


static public class EventContentCurrencyItemExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentItemType*/, 4 /*Global.EventContentItemType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ItemUniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*UseShortCutContentType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
