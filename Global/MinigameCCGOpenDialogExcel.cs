// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGOpenDialogExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGOpenDialogExcel GetRootAsMinigameCCGOpenDialogExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGOpenDialogExcel(_bb, new MinigameCCGOpenDialogExcel()); }
  public static MinigameCCGOpenDialogExcel GetRootAsMinigameCCGOpenDialogExcel(ByteBuffer _bb, MinigameCCGOpenDialogExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGOpenDialogExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long DialogId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int PlayOrder { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long ConditionCard { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint Dialog { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public long Duration { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint Voice { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Global.MinigameCCGOpenDialogExcel> CreateMinigameCCGOpenDialogExcel(FlatBufferBuilder builder,
      long DialogId = 0,
      int PlayOrder = 0,
      long ConditionCard = 0,
      uint Dialog = 0,
      long Duration = 0,
      uint Voice = 0) {
    builder.StartTable(6);
    MinigameCCGOpenDialogExcel.AddDuration(builder, Duration);
    MinigameCCGOpenDialogExcel.AddConditionCard(builder, ConditionCard);
    MinigameCCGOpenDialogExcel.AddDialogId(builder, DialogId);
    MinigameCCGOpenDialogExcel.AddVoice(builder, Voice);
    MinigameCCGOpenDialogExcel.AddDialog(builder, Dialog);
    MinigameCCGOpenDialogExcel.AddPlayOrder(builder, PlayOrder);
    return MinigameCCGOpenDialogExcel.EndMinigameCCGOpenDialogExcel(builder);
  }

  public static void StartMinigameCCGOpenDialogExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddDialogId(FlatBufferBuilder builder, long dialogId) { builder.AddLong(0, dialogId, 0); }
  public static void AddPlayOrder(FlatBufferBuilder builder, int playOrder) { builder.AddInt(1, playOrder, 0); }
  public static void AddConditionCard(FlatBufferBuilder builder, long conditionCard) { builder.AddLong(2, conditionCard, 0); }
  public static void AddDialog(FlatBufferBuilder builder, uint dialog) { builder.AddUint(3, dialog, 0); }
  public static void AddDuration(FlatBufferBuilder builder, long duration) { builder.AddLong(4, duration, 0); }
  public static void AddVoice(FlatBufferBuilder builder, uint voice) { builder.AddUint(5, voice, 0); }
  public static Offset<Global.MinigameCCGOpenDialogExcel> EndMinigameCCGOpenDialogExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MinigameCCGOpenDialogExcel>(o);
  }
  public MinigameCCGOpenDialogExcelT UnPack() {
    var _o = new MinigameCCGOpenDialogExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGOpenDialogExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGOpenDialog");
    _o.DialogId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DialogId, key) : this.DialogId;
    _o.PlayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.PlayOrder, key) : this.PlayOrder;
    _o.ConditionCard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionCard, key) : this.ConditionCard;
    _o.Dialog = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Dialog, key) : this.Dialog;
    _o.Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Duration, key) : this.Duration;
    _o.Voice = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.Voice, key) : this.Voice;
  }
  public static Offset<Global.MinigameCCGOpenDialogExcel> Pack(FlatBufferBuilder builder, MinigameCCGOpenDialogExcelT _o) {
    if (_o == null) return default(Offset<Global.MinigameCCGOpenDialogExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGOpenDialog");
		var _DialogId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DialogId, key) : _o.DialogId;
		var _PlayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.PlayOrder, key) : _o.PlayOrder;
		var _ConditionCard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConditionCard, key) : _o.ConditionCard;
		var _Dialog = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Dialog, key) : _o.Dialog;
		var _Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Duration, key) : _o.Duration;
		var _Voice = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.Voice, key) : _o.Voice;
    return CreateMinigameCCGOpenDialogExcel(
      builder,
      TableEncryptionService.UseEncryption ? _DialogId : _o.DialogId,
      TableEncryptionService.UseEncryption ? _PlayOrder : _o.PlayOrder,
      TableEncryptionService.UseEncryption ? _ConditionCard : _o.ConditionCard,
      TableEncryptionService.UseEncryption ? _Dialog : _o.Dialog,
      TableEncryptionService.UseEncryption ? _Duration : _o.Duration,
      TableEncryptionService.UseEncryption ? _Voice : _o.Voice);
  }
}

public class MinigameCCGOpenDialogExcelT
{
  public long DialogId { get; set; }
  public int PlayOrder { get; set; }
  public long ConditionCard { get; set; }
  public uint Dialog { get; set; }
  public long Duration { get; set; }
  public uint Voice { get; set; }

  public MinigameCCGOpenDialogExcelT() {
    this.DialogId = 0;
    this.PlayOrder = 0;
    this.ConditionCard = 0;
    this.Dialog = 0;
    this.Duration = 0;
    this.Voice = 0;
  }
}


static public class MinigameCCGOpenDialogExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*DialogId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*PlayOrder*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ConditionCard*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*Dialog*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Duration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*Voice*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
