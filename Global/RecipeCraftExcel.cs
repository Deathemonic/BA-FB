// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct RecipeCraftExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RecipeCraftExcel GetRootAsRecipeCraftExcel(ByteBuffer _bb) { return GetRootAsRecipeCraftExcel(_bb, new RecipeCraftExcel()); }
  public static RecipeCraftExcel GetRootAsRecipeCraftExcel(ByteBuffer _bb, RecipeCraftExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RecipeCraftExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DevName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDevNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDevNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDevNameArray() { return __p.__vector_as_array<byte>(6); }
  public Global.RecipeType RecipeType { get { int o = __p.__offset(8); return o != 0 ? (Global.RecipeType)__p.bb.GetInt(o + __p.bb_pos) : Global.RecipeType.None; } }
  public long RecipeIngredientId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string RecipeIngredientDevName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecipeIngredientDevNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetRecipeIngredientDevNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetRecipeIngredientDevNameArray() { return __p.__vector_as_array<byte>(12); }
  public Global.ParcelType ParcelType(int j) { int o = __p.__offset(14); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.ParcelType)0; }
  public int ParcelTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.ParcelType> GetParcelTypeBytes() { return __p.__vector_as_span<Global.ParcelType>(14, 4); }
#else
  public ArraySegment<byte>? GetParcelTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public Global.ParcelType[] GetParcelTypeArray() { int o = __p.__offset(14); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.ParcelType[] a = new Global.ParcelType[l]; for (int i = 0; i < l; i++) { a[i] = (Global.ParcelType)__p.bb.GetInt(p + i * 4); } return a; }
  public long ParcelId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ParcelIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetParcelIdBytes() { return __p.__vector_as_span<long>(16, 8); }
#else
  public ArraySegment<byte>? GetParcelIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public long[] GetParcelIdArray() { return __p.__vector_as_array<long>(16); }
  public string ParcelDevName(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ParcelDevNameLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public long ResultAmountMin(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ResultAmountMinLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetResultAmountMinBytes() { return __p.__vector_as_span<long>(20, 8); }
#else
  public ArraySegment<byte>? GetResultAmountMinBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public long[] GetResultAmountMinArray() { return __p.__vector_as_array<long>(20); }
  public long ResultAmountMax(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ResultAmountMaxLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetResultAmountMaxBytes() { return __p.__vector_as_span<long>(22, 8); }
#else
  public ArraySegment<byte>? GetResultAmountMaxBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public long[] GetResultAmountMaxArray() { return __p.__vector_as_array<long>(22); }

  public static Offset<Global.RecipeCraftExcel> CreateRecipeCraftExcel(FlatBufferBuilder builder,
      long Id = 0,
      StringOffset DevNameOffset = default(StringOffset),
      Global.RecipeType RecipeType = Global.RecipeType.None,
      long RecipeIngredientId = 0,
      StringOffset RecipeIngredientDevNameOffset = default(StringOffset),
      VectorOffset ParcelTypeOffset = default(VectorOffset),
      VectorOffset ParcelIdOffset = default(VectorOffset),
      VectorOffset ParcelDevNameOffset = default(VectorOffset),
      VectorOffset ResultAmountMinOffset = default(VectorOffset),
      VectorOffset ResultAmountMaxOffset = default(VectorOffset)) {
    builder.StartTable(10);
    RecipeCraftExcel.AddRecipeIngredientId(builder, RecipeIngredientId);
    RecipeCraftExcel.AddId(builder, Id);
    RecipeCraftExcel.AddResultAmountMax(builder, ResultAmountMaxOffset);
    RecipeCraftExcel.AddResultAmountMin(builder, ResultAmountMinOffset);
    RecipeCraftExcel.AddParcelDevName(builder, ParcelDevNameOffset);
    RecipeCraftExcel.AddParcelId(builder, ParcelIdOffset);
    RecipeCraftExcel.AddParcelType(builder, ParcelTypeOffset);
    RecipeCraftExcel.AddRecipeIngredientDevName(builder, RecipeIngredientDevNameOffset);
    RecipeCraftExcel.AddRecipeType(builder, RecipeType);
    RecipeCraftExcel.AddDevName(builder, DevNameOffset);
    return RecipeCraftExcel.EndRecipeCraftExcel(builder);
  }

  public static void StartRecipeCraftExcel(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddDevName(FlatBufferBuilder builder, StringOffset devNameOffset) { builder.AddOffset(1, devNameOffset.Value, 0); }
  public static void AddRecipeType(FlatBufferBuilder builder, Global.RecipeType recipeType) { builder.AddInt(2, (int)recipeType, 0); }
  public static void AddRecipeIngredientId(FlatBufferBuilder builder, long recipeIngredientId) { builder.AddLong(3, recipeIngredientId, 0); }
  public static void AddRecipeIngredientDevName(FlatBufferBuilder builder, StringOffset recipeIngredientDevNameOffset) { builder.AddOffset(4, recipeIngredientDevNameOffset.Value, 0); }
  public static void AddParcelType(FlatBufferBuilder builder, VectorOffset parcelTypeOffset) { builder.AddOffset(5, parcelTypeOffset.Value, 0); }
  public static VectorOffset CreateParcelTypeVector(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, Global.ParcelType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.ParcelType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.ParcelType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParcelId(FlatBufferBuilder builder, VectorOffset parcelIdOffset) { builder.AddOffset(6, parcelIdOffset.Value, 0); }
  public static VectorOffset CreateParcelIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddParcelDevName(FlatBufferBuilder builder, VectorOffset parcelDevNameOffset) { builder.AddOffset(7, parcelDevNameOffset.Value, 0); }
  public static VectorOffset CreateParcelDevNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParcelDevNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelDevNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParcelDevNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParcelDevNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddResultAmountMin(FlatBufferBuilder builder, VectorOffset resultAmountMinOffset) { builder.AddOffset(8, resultAmountMinOffset.Value, 0); }
  public static VectorOffset CreateResultAmountMinVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateResultAmountMinVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResultAmountMinVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResultAmountMinVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartResultAmountMinVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddResultAmountMax(FlatBufferBuilder builder, VectorOffset resultAmountMaxOffset) { builder.AddOffset(9, resultAmountMaxOffset.Value, 0); }
  public static VectorOffset CreateResultAmountMaxVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateResultAmountMaxVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResultAmountMaxVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResultAmountMaxVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartResultAmountMaxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Global.RecipeCraftExcel> EndRecipeCraftExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.RecipeCraftExcel>(o);
  }
  public RecipeCraftExcelT UnPack() {
    var _o = new RecipeCraftExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RecipeCraftExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("RecipeCraft");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.DevName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DevName, key) : this.DevName;
    _o.RecipeType = TableEncryptionService.UseEncryption ? (Global.RecipeType)TableEncryptionService.Convert((int)this.RecipeType, key) : this.RecipeType;
    _o.RecipeIngredientId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RecipeIngredientId, key) : this.RecipeIngredientId;
    _o.RecipeIngredientDevName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.RecipeIngredientDevName, key) : this.RecipeIngredientDevName;
    _o.ParcelType = new List<Global.ParcelType>();
    for (var _j = 0; _j < this.ParcelTypeLength; ++_j) {_o.ParcelType.Add(TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ParcelType(_j), key) : this.ParcelType(_j));}
    _o.ParcelId = new List<long>();
    for (var _j = 0; _j < this.ParcelIdLength; ++_j) {_o.ParcelId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ParcelId(_j), key) : this.ParcelId(_j));}
    _o.ParcelDevName = new List<string>();
    for (var _j = 0; _j < this.ParcelDevNameLength; ++_j) {_o.ParcelDevName.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ParcelDevName(_j), key) : this.ParcelDevName(_j));}
    _o.ResultAmountMin = new List<long>();
    for (var _j = 0; _j < this.ResultAmountMinLength; ++_j) {_o.ResultAmountMin.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ResultAmountMin(_j), key) : this.ResultAmountMin(_j));}
    _o.ResultAmountMax = new List<long>();
    for (var _j = 0; _j < this.ResultAmountMaxLength; ++_j) {_o.ResultAmountMax.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ResultAmountMax(_j), key) : this.ResultAmountMax(_j));}
  }
  public static Offset<Global.RecipeCraftExcel> Pack(FlatBufferBuilder builder, RecipeCraftExcelT _o) {
    if (_o == null) return default(Offset<Global.RecipeCraftExcel>);
		byte[] key = TableEncryptionService.CreateKey("RecipeCraft");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _DevName = _o.DevName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DevName, key) : _o.DevName));
		var _RecipeType = TableEncryptionService.UseEncryption ? (Global.RecipeType)TableEncryptionService.Convert((int)_o.RecipeType, key) : _o.RecipeType;
		var _RecipeIngredientId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RecipeIngredientId, key) : _o.RecipeIngredientId;
    var _RecipeIngredientDevName = _o.RecipeIngredientDevName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.RecipeIngredientDevName, key) : _o.RecipeIngredientDevName));
    var _ParcelType = default(VectorOffset);
    if (_o.ParcelType != null) {
      var __ParcelType = _o.ParcelType.Select(x => TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _ParcelType = CreateParcelTypeVector(builder, __ParcelType);
    }
    var _ParcelId = default(VectorOffset);
    if (_o.ParcelId != null) {
      var __ParcelId = _o.ParcelId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ParcelId = CreateParcelIdVector(builder, __ParcelId);
    }
    var _ParcelDevName = default(VectorOffset);
    if (_o.ParcelDevName != null) {
      var __ParcelDevName = new StringOffset[_o.ParcelDevName.Count];
      for (var _j = 0; _j < __ParcelDevName.Length; ++_j) { __ParcelDevName[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ParcelDevName[_j], key) : _o.ParcelDevName[_j])); }
      _ParcelDevName = CreateParcelDevNameVector(builder, __ParcelDevName);
    }
    var _ResultAmountMin = default(VectorOffset);
    if (_o.ResultAmountMin != null) {
      var __ResultAmountMin = _o.ResultAmountMin.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ResultAmountMin = CreateResultAmountMinVector(builder, __ResultAmountMin);
    }
    var _ResultAmountMax = default(VectorOffset);
    if (_o.ResultAmountMax != null) {
      var __ResultAmountMax = _o.ResultAmountMax.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _ResultAmountMax = CreateResultAmountMaxVector(builder, __ResultAmountMax);
    }
    return CreateRecipeCraftExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _DevName,
      TableEncryptionService.UseEncryption ? _RecipeType : _o.RecipeType,
      TableEncryptionService.UseEncryption ? _RecipeIngredientId : _o.RecipeIngredientId,
      _RecipeIngredientDevName,
      _ParcelType,
      _ParcelId,
      _ParcelDevName,
      _ResultAmountMin,
      _ResultAmountMax);
  }
}

public class RecipeCraftExcelT
{
  public long Id { get; set; }
  public string DevName { get; set; }
  public Global.RecipeType RecipeType { get; set; }
  public long RecipeIngredientId { get; set; }
  public string RecipeIngredientDevName { get; set; }
  public List<Global.ParcelType> ParcelType { get; set; }
  public List<long> ParcelId { get; set; }
  public List<string> ParcelDevName { get; set; }
  public List<long> ResultAmountMin { get; set; }
  public List<long> ResultAmountMax { get; set; }

  public RecipeCraftExcelT() {
    this.Id = 0;
    this.DevName = null;
    this.RecipeType = Global.RecipeType.None;
    this.RecipeIngredientId = 0;
    this.RecipeIngredientDevName = null;
    this.ParcelType = null;
    this.ParcelId = null;
    this.ParcelDevName = null;
    this.ResultAmountMin = null;
    this.ResultAmountMax = null;
  }
}


static public class RecipeCraftExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*DevName*/, false)
      && verifier.VerifyField(tablePos, 8 /*RecipeType*/, 4 /*Global.RecipeType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RecipeIngredientId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 12 /*RecipeIngredientDevName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*ParcelType*/, 4 /*Global.ParcelType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*ParcelId*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*ParcelDevName*/, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*ResultAmountMin*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 22 /*ResultAmountMax*/, 8 /*long*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
