// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CafeInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CafeInfoExcel GetRootAsCafeInfoExcel(ByteBuffer _bb) { return GetRootAsCafeInfoExcel(_bb, new CafeInfoExcel()); }
  public static CafeInfoExcel GetRootAsCafeInfoExcel(ByteBuffer _bb, CafeInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CafeInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CafeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool IsDefault { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Global.OpenConditionContent OpenConditionCafeId { get { int o = __p.__offset(8); return o != 0 ? (Global.OpenConditionContent)__p.bb.GetInt(o + __p.bb_pos) : Global.OpenConditionContent.Shop; } }
  public Global.OpenConditionContent OpenConditionCafeInvite { get { int o = __p.__offset(10); return o != 0 ? (Global.OpenConditionContent)__p.bb.GetInt(o + __p.bb_pos) : Global.OpenConditionContent.Shop; } }

  public static Offset<Global.CafeInfoExcel> CreateCafeInfoExcel(FlatBufferBuilder builder,
      long CafeId = 0,
      bool IsDefault = false,
      Global.OpenConditionContent OpenConditionCafeId = Global.OpenConditionContent.Shop,
      Global.OpenConditionContent OpenConditionCafeInvite = Global.OpenConditionContent.Shop) {
    builder.StartTable(4);
    CafeInfoExcel.AddCafeId(builder, CafeId);
    CafeInfoExcel.AddOpenConditionCafeInvite(builder, OpenConditionCafeInvite);
    CafeInfoExcel.AddOpenConditionCafeId(builder, OpenConditionCafeId);
    CafeInfoExcel.AddIsDefault(builder, IsDefault);
    return CafeInfoExcel.EndCafeInfoExcel(builder);
  }

  public static void StartCafeInfoExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCafeId(FlatBufferBuilder builder, long cafeId) { builder.AddLong(0, cafeId, 0); }
  public static void AddIsDefault(FlatBufferBuilder builder, bool isDefault) { builder.AddBool(1, isDefault, false); }
  public static void AddOpenConditionCafeId(FlatBufferBuilder builder, Global.OpenConditionContent openConditionCafeId) { builder.AddInt(2, (int)openConditionCafeId, 0); }
  public static void AddOpenConditionCafeInvite(FlatBufferBuilder builder, Global.OpenConditionContent openConditionCafeInvite) { builder.AddInt(3, (int)openConditionCafeInvite, 0); }
  public static Offset<Global.CafeInfoExcel> EndCafeInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.CafeInfoExcel>(o);
  }
  public CafeInfoExcelT UnPack() {
    var _o = new CafeInfoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CafeInfoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CafeInfo");
    _o.CafeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CafeId, key) : this.CafeId;
    _o.IsDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IsDefault, key) : this.IsDefault;
    _o.OpenConditionCafeId = TableEncryptionService.UseEncryption ? (Global.OpenConditionContent)TableEncryptionService.Convert((int)this.OpenConditionCafeId, key) : this.OpenConditionCafeId;
    _o.OpenConditionCafeInvite = TableEncryptionService.UseEncryption ? (Global.OpenConditionContent)TableEncryptionService.Convert((int)this.OpenConditionCafeInvite, key) : this.OpenConditionCafeInvite;
  }
  public static Offset<Global.CafeInfoExcel> Pack(FlatBufferBuilder builder, CafeInfoExcelT _o) {
    if (_o == null) return default(Offset<Global.CafeInfoExcel>);
		byte[] key = TableEncryptionService.CreateKey("CafeInfo");
		var _CafeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CafeId, key) : _o.CafeId;
		var _IsDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IsDefault, key) : _o.IsDefault;
		var _OpenConditionCafeId = TableEncryptionService.UseEncryption ? (Global.OpenConditionContent)TableEncryptionService.Convert((int)_o.OpenConditionCafeId, key) : _o.OpenConditionCafeId;
		var _OpenConditionCafeInvite = TableEncryptionService.UseEncryption ? (Global.OpenConditionContent)TableEncryptionService.Convert((int)_o.OpenConditionCafeInvite, key) : _o.OpenConditionCafeInvite;
    return CreateCafeInfoExcel(
      builder,
      TableEncryptionService.UseEncryption ? _CafeId : _o.CafeId,
      TableEncryptionService.UseEncryption ? _IsDefault : _o.IsDefault,
      TableEncryptionService.UseEncryption ? _OpenConditionCafeId : _o.OpenConditionCafeId,
      TableEncryptionService.UseEncryption ? _OpenConditionCafeInvite : _o.OpenConditionCafeInvite);
  }
}

public class CafeInfoExcelT
{
  public long CafeId { get; set; }
  public bool IsDefault { get; set; }
  public Global.OpenConditionContent OpenConditionCafeId { get; set; }
  public Global.OpenConditionContent OpenConditionCafeInvite { get; set; }

  public CafeInfoExcelT() {
    this.CafeId = 0;
    this.IsDefault = false;
    this.OpenConditionCafeId = Global.OpenConditionContent.Shop;
    this.OpenConditionCafeInvite = Global.OpenConditionContent.Shop;
  }
}


static public class CafeInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CafeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*IsDefault*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*OpenConditionCafeId*/, 4 /*Global.OpenConditionContent*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*OpenConditionCafeInvite*/, 4 /*Global.OpenConditionContent*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
