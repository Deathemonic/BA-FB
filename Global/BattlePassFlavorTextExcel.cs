// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct BattlePassFlavorTextExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BattlePassFlavorTextExcel GetRootAsBattlePassFlavorTextExcel(ByteBuffer _bb) { return GetRootAsBattlePassFlavorTextExcel(_bb, new BattlePassFlavorTextExcel()); }
  public static BattlePassFlavorTextExcel GetRootAsBattlePassFlavorTextExcel(ByteBuffer _bb, BattlePassFlavorTextExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattlePassFlavorTextExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public uint LocalizeCodeId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Global.BattlePassFlavorTextExcel> CreateBattlePassFlavorTextExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      long Id = 0,
      uint LocalizeCodeId = 0) {
    builder.StartTable(3);
    BattlePassFlavorTextExcel.AddId(builder, Id);
    BattlePassFlavorTextExcel.AddGroupId(builder, GroupId);
    BattlePassFlavorTextExcel.AddLocalizeCodeId(builder, LocalizeCodeId);
    return BattlePassFlavorTextExcel.EndBattlePassFlavorTextExcel(builder);
  }

  public static void StartBattlePassFlavorTextExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static void AddLocalizeCodeId(FlatBufferBuilder builder, uint localizeCodeId) { builder.AddUint(2, localizeCodeId, 0); }
  public static Offset<Global.BattlePassFlavorTextExcel> EndBattlePassFlavorTextExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.BattlePassFlavorTextExcel>(o);
  }
  public BattlePassFlavorTextExcelT UnPack() {
    var _o = new BattlePassFlavorTextExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BattlePassFlavorTextExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("BattlePassFlavorText");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.LocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.LocalizeCodeId, key) : this.LocalizeCodeId;
  }
  public static Offset<Global.BattlePassFlavorTextExcel> Pack(FlatBufferBuilder builder, BattlePassFlavorTextExcelT _o) {
    if (_o == null) return default(Offset<Global.BattlePassFlavorTextExcel>);
		byte[] key = TableEncryptionService.CreateKey("BattlePassFlavorText");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _LocalizeCodeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.LocalizeCodeId, key) : _o.LocalizeCodeId;
    return CreateBattlePassFlavorTextExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _LocalizeCodeId : _o.LocalizeCodeId);
  }
}

public class BattlePassFlavorTextExcelT
{
  public long GroupId { get; set; }
  public long Id { get; set; }
  public uint LocalizeCodeId { get; set; }

  public BattlePassFlavorTextExcelT() {
    this.GroupId = 0;
    this.Id = 0;
    this.LocalizeCodeId = 0;
  }
}


static public class BattlePassFlavorTextExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*LocalizeCodeId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
