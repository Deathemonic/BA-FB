// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct KeyMappingPopupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static KeyMappingPopupExcel GetRootAsKeyMappingPopupExcel(ByteBuffer _bb) { return GetRootAsKeyMappingPopupExcel(_bb, new KeyMappingPopupExcel()); }
  public static KeyMappingPopupExcel GetRootAsKeyMappingPopupExcel(ByteBuffer _bb, KeyMappingPopupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyMappingPopupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PrefabName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(4); }
  public string ButtonName01 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName01Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetButtonName01Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetButtonName01Array() { return __p.__vector_as_array<byte>(6); }
  public string KeyMappingId01 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId01Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId01Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetKeyMappingId01Array() { return __p.__vector_as_array<byte>(8); }
  public string ButtonName02 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName02Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetButtonName02Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetButtonName02Array() { return __p.__vector_as_array<byte>(10); }
  public string KeyMappingId02 { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId02Bytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId02Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetKeyMappingId02Array() { return __p.__vector_as_array<byte>(12); }
  public string ButtonName03 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName03Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetButtonName03Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetButtonName03Array() { return __p.__vector_as_array<byte>(14); }
  public string KeyMappingId03 { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId03Bytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId03Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetKeyMappingId03Array() { return __p.__vector_as_array<byte>(16); }
  public string ButtonName04 { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName04Bytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetButtonName04Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetButtonName04Array() { return __p.__vector_as_array<byte>(18); }
  public string KeyMappingId04 { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId04Bytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId04Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetKeyMappingId04Array() { return __p.__vector_as_array<byte>(20); }
  public string ButtonName05 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonName05Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetButtonName05Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetButtonName05Array() { return __p.__vector_as_array<byte>(22); }
  public string KeyMappingId05 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyMappingId05Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetKeyMappingId05Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetKeyMappingId05Array() { return __p.__vector_as_array<byte>(24); }

  public static Offset<Global.KeyMappingPopupExcel> CreateKeyMappingPopupExcel(FlatBufferBuilder builder,
      StringOffset PrefabNameOffset = default(StringOffset),
      StringOffset ButtonName01Offset = default(StringOffset),
      StringOffset KeyMappingId01Offset = default(StringOffset),
      StringOffset ButtonName02Offset = default(StringOffset),
      StringOffset KeyMappingId02Offset = default(StringOffset),
      StringOffset ButtonName03Offset = default(StringOffset),
      StringOffset KeyMappingId03Offset = default(StringOffset),
      StringOffset ButtonName04Offset = default(StringOffset),
      StringOffset KeyMappingId04Offset = default(StringOffset),
      StringOffset ButtonName05Offset = default(StringOffset),
      StringOffset KeyMappingId05Offset = default(StringOffset)) {
    builder.StartTable(11);
    KeyMappingPopupExcel.AddKeyMappingId05(builder, KeyMappingId05Offset);
    KeyMappingPopupExcel.AddButtonName05(builder, ButtonName05Offset);
    KeyMappingPopupExcel.AddKeyMappingId04(builder, KeyMappingId04Offset);
    KeyMappingPopupExcel.AddButtonName04(builder, ButtonName04Offset);
    KeyMappingPopupExcel.AddKeyMappingId03(builder, KeyMappingId03Offset);
    KeyMappingPopupExcel.AddButtonName03(builder, ButtonName03Offset);
    KeyMappingPopupExcel.AddKeyMappingId02(builder, KeyMappingId02Offset);
    KeyMappingPopupExcel.AddButtonName02(builder, ButtonName02Offset);
    KeyMappingPopupExcel.AddKeyMappingId01(builder, KeyMappingId01Offset);
    KeyMappingPopupExcel.AddButtonName01(builder, ButtonName01Offset);
    KeyMappingPopupExcel.AddPrefabName(builder, PrefabNameOffset);
    return KeyMappingPopupExcel.EndKeyMappingPopupExcel(builder);
  }

  public static void StartKeyMappingPopupExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset prefabNameOffset) { builder.AddOffset(0, prefabNameOffset.Value, 0); }
  public static void AddButtonName01(FlatBufferBuilder builder, StringOffset buttonName01Offset) { builder.AddOffset(1, buttonName01Offset.Value, 0); }
  public static void AddKeyMappingId01(FlatBufferBuilder builder, StringOffset keyMappingId01Offset) { builder.AddOffset(2, keyMappingId01Offset.Value, 0); }
  public static void AddButtonName02(FlatBufferBuilder builder, StringOffset buttonName02Offset) { builder.AddOffset(3, buttonName02Offset.Value, 0); }
  public static void AddKeyMappingId02(FlatBufferBuilder builder, StringOffset keyMappingId02Offset) { builder.AddOffset(4, keyMappingId02Offset.Value, 0); }
  public static void AddButtonName03(FlatBufferBuilder builder, StringOffset buttonName03Offset) { builder.AddOffset(5, buttonName03Offset.Value, 0); }
  public static void AddKeyMappingId03(FlatBufferBuilder builder, StringOffset keyMappingId03Offset) { builder.AddOffset(6, keyMappingId03Offset.Value, 0); }
  public static void AddButtonName04(FlatBufferBuilder builder, StringOffset buttonName04Offset) { builder.AddOffset(7, buttonName04Offset.Value, 0); }
  public static void AddKeyMappingId04(FlatBufferBuilder builder, StringOffset keyMappingId04Offset) { builder.AddOffset(8, keyMappingId04Offset.Value, 0); }
  public static void AddButtonName05(FlatBufferBuilder builder, StringOffset buttonName05Offset) { builder.AddOffset(9, buttonName05Offset.Value, 0); }
  public static void AddKeyMappingId05(FlatBufferBuilder builder, StringOffset keyMappingId05Offset) { builder.AddOffset(10, keyMappingId05Offset.Value, 0); }
  public static Offset<Global.KeyMappingPopupExcel> EndKeyMappingPopupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.KeyMappingPopupExcel>(o);
  }
  public KeyMappingPopupExcelT UnPack() {
    var _o = new KeyMappingPopupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyMappingPopupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("KeyMappingPopup");
    _o.PrefabName = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.PrefabName, key) : this.PrefabName;
    _o.ButtonName01 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ButtonName01, key) : this.ButtonName01;
    _o.KeyMappingId01 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.KeyMappingId01, key) : this.KeyMappingId01;
    _o.ButtonName02 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ButtonName02, key) : this.ButtonName02;
    _o.KeyMappingId02 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.KeyMappingId02, key) : this.KeyMappingId02;
    _o.ButtonName03 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ButtonName03, key) : this.ButtonName03;
    _o.KeyMappingId03 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.KeyMappingId03, key) : this.KeyMappingId03;
    _o.ButtonName04 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ButtonName04, key) : this.ButtonName04;
    _o.KeyMappingId04 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.KeyMappingId04, key) : this.KeyMappingId04;
    _o.ButtonName05 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ButtonName05, key) : this.ButtonName05;
    _o.KeyMappingId05 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.KeyMappingId05, key) : this.KeyMappingId05;
  }
  public static Offset<Global.KeyMappingPopupExcel> Pack(FlatBufferBuilder builder, KeyMappingPopupExcelT _o) {
    if (_o == null) return default(Offset<Global.KeyMappingPopupExcel>);
		byte[] key = TableEncryptionService.CreateKey("KeyMappingPopup");
    var _PrefabName = _o.PrefabName == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.PrefabName, key) : _o.PrefabName));
    var _ButtonName01 = _o.ButtonName01 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ButtonName01, key) : _o.ButtonName01));
    var _KeyMappingId01 = _o.KeyMappingId01 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.KeyMappingId01, key) : _o.KeyMappingId01));
    var _ButtonName02 = _o.ButtonName02 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ButtonName02, key) : _o.ButtonName02));
    var _KeyMappingId02 = _o.KeyMappingId02 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.KeyMappingId02, key) : _o.KeyMappingId02));
    var _ButtonName03 = _o.ButtonName03 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ButtonName03, key) : _o.ButtonName03));
    var _KeyMappingId03 = _o.KeyMappingId03 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.KeyMappingId03, key) : _o.KeyMappingId03));
    var _ButtonName04 = _o.ButtonName04 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ButtonName04, key) : _o.ButtonName04));
    var _KeyMappingId04 = _o.KeyMappingId04 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.KeyMappingId04, key) : _o.KeyMappingId04));
    var _ButtonName05 = _o.ButtonName05 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ButtonName05, key) : _o.ButtonName05));
    var _KeyMappingId05 = _o.KeyMappingId05 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.KeyMappingId05, key) : _o.KeyMappingId05));
    return CreateKeyMappingPopupExcel(
      builder,
      _PrefabName,
      _ButtonName01,
      _KeyMappingId01,
      _ButtonName02,
      _KeyMappingId02,
      _ButtonName03,
      _KeyMappingId03,
      _ButtonName04,
      _KeyMappingId04,
      _ButtonName05,
      _KeyMappingId05);
  }
}

public class KeyMappingPopupExcelT
{
  public string PrefabName { get; set; }
  public string ButtonName01 { get; set; }
  public string KeyMappingId01 { get; set; }
  public string ButtonName02 { get; set; }
  public string KeyMappingId02 { get; set; }
  public string ButtonName03 { get; set; }
  public string KeyMappingId03 { get; set; }
  public string ButtonName04 { get; set; }
  public string KeyMappingId04 { get; set; }
  public string ButtonName05 { get; set; }
  public string KeyMappingId05 { get; set; }

  public KeyMappingPopupExcelT() {
    this.PrefabName = null;
    this.ButtonName01 = null;
    this.KeyMappingId01 = null;
    this.ButtonName02 = null;
    this.KeyMappingId02 = null;
    this.ButtonName03 = null;
    this.KeyMappingId03 = null;
    this.ButtonName04 = null;
    this.KeyMappingId04 = null;
    this.ButtonName05 = null;
    this.KeyMappingId05 = null;
  }
}


static public class KeyMappingPopupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PrefabName*/, false)
      && verifier.VerifyString(tablePos, 6 /*ButtonName01*/, false)
      && verifier.VerifyString(tablePos, 8 /*KeyMappingId01*/, false)
      && verifier.VerifyString(tablePos, 10 /*ButtonName02*/, false)
      && verifier.VerifyString(tablePos, 12 /*KeyMappingId02*/, false)
      && verifier.VerifyString(tablePos, 14 /*ButtonName03*/, false)
      && verifier.VerifyString(tablePos, 16 /*KeyMappingId03*/, false)
      && verifier.VerifyString(tablePos, 18 /*ButtonName04*/, false)
      && verifier.VerifyString(tablePos, 20 /*KeyMappingId04*/, false)
      && verifier.VerifyString(tablePos, 22 /*ButtonName05*/, false)
      && verifier.VerifyString(tablePos, 24 /*KeyMappingId05*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
