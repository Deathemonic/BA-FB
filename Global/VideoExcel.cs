// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct VideoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static VideoExcel GetRootAsVideoExcel(ByteBuffer _bb) { return GetRootAsVideoExcel(_bb, new VideoExcel()); }
  public static VideoExcel GetRootAsVideoExcel(ByteBuffer _bb, VideoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VideoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.Nation Nation(int j) { int o = __p.__offset(6); return o != 0 ? (Global.Nation)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.Nation)0; }
  public int NationLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.Nation> GetNationBytes() { return __p.__vector_as_span<Global.Nation>(6, 4); }
#else
  public ArraySegment<byte>? GetNationBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Global.Nation[] GetNationArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.Nation[] a = new Global.Nation[l]; for (int i = 0; i < l; i++) { a[i] = (Global.Nation)__p.bb.GetInt(p + i * 4); } return a; }
  public string VideoPath(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int VideoPathLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string VideoTeenPath(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int VideoTeenPathLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string SoundPath(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SoundPathLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float SoundVolume(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int SoundVolumeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetSoundVolumeBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetSoundVolumeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetSoundVolumeArray() { return __p.__vector_as_array<float>(14); }

  public static Offset<Global.VideoExcel> CreateVideoExcel(FlatBufferBuilder builder,
      long Id = 0,
      VectorOffset NationOffset = default(VectorOffset),
      VectorOffset VideoPathOffset = default(VectorOffset),
      VectorOffset VideoTeenPathOffset = default(VectorOffset),
      VectorOffset SoundPathOffset = default(VectorOffset),
      VectorOffset SoundVolumeOffset = default(VectorOffset)) {
    builder.StartTable(6);
    VideoExcel.AddId(builder, Id);
    VideoExcel.AddSoundVolume(builder, SoundVolumeOffset);
    VideoExcel.AddSoundPath(builder, SoundPathOffset);
    VideoExcel.AddVideoTeenPath(builder, VideoTeenPathOffset);
    VideoExcel.AddVideoPath(builder, VideoPathOffset);
    VideoExcel.AddNation(builder, NationOffset);
    return VideoExcel.EndVideoExcel(builder);
  }

  public static void StartVideoExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddNation(FlatBufferBuilder builder, VectorOffset nationOffset) { builder.AddOffset(1, nationOffset.Value, 0); }
  public static VectorOffset CreateNationVector(FlatBufferBuilder builder, Global.Nation[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, Global.Nation[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.Nation> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.Nation>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVideoPath(FlatBufferBuilder builder, VectorOffset videoPathOffset) { builder.AddOffset(2, videoPathOffset.Value, 0); }
  public static VectorOffset CreateVideoPathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVideoPathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVideoPathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVideoPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVideoPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVideoTeenPath(FlatBufferBuilder builder, VectorOffset videoTeenPathOffset) { builder.AddOffset(3, videoTeenPathOffset.Value, 0); }
  public static VectorOffset CreateVideoTeenPathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVideoTeenPathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVideoTeenPathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVideoTeenPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVideoTeenPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSoundPath(FlatBufferBuilder builder, VectorOffset soundPathOffset) { builder.AddOffset(4, soundPathOffset.Value, 0); }
  public static VectorOffset CreateSoundPathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSoundPathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSoundPathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSoundPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSoundPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSoundVolume(FlatBufferBuilder builder, VectorOffset soundVolumeOffset) { builder.AddOffset(5, soundVolumeOffset.Value, 0); }
  public static VectorOffset CreateSoundVolumeVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSoundVolumeVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSoundVolumeVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSoundVolumeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSoundVolumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Global.VideoExcel> EndVideoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.VideoExcel>(o);
  }
  public VideoExcelT UnPack() {
    var _o = new VideoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VideoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Video");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.Nation = new List<Global.Nation>();
    for (var _j = 0; _j < this.NationLength; ++_j) {_o.Nation.Add(TableEncryptionService.UseEncryption ? (Global.Nation)TableEncryptionService.Convert((int)this.Nation(_j), key) : this.Nation(_j));}
    _o.VideoPath = new List<string>();
    for (var _j = 0; _j < this.VideoPathLength; ++_j) {_o.VideoPath.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.VideoPath(_j), key) : this.VideoPath(_j));}
    _o.VideoTeenPath = new List<string>();
    for (var _j = 0; _j < this.VideoTeenPathLength; ++_j) {_o.VideoTeenPath.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.VideoTeenPath(_j), key) : this.VideoTeenPath(_j));}
    _o.SoundPath = new List<string>();
    for (var _j = 0; _j < this.SoundPathLength; ++_j) {_o.SoundPath.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SoundPath(_j), key) : this.SoundPath(_j));}
    _o.SoundVolume = new List<float>();
    for (var _j = 0; _j < this.SoundVolumeLength; ++_j) {_o.SoundVolume.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.SoundVolume(_j), key) : this.SoundVolume(_j));}
  }
  public static Offset<Global.VideoExcel> Pack(FlatBufferBuilder builder, VideoExcelT _o) {
    if (_o == null) return default(Offset<Global.VideoExcel>);
		byte[] key = TableEncryptionService.CreateKey("Video");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
    var _Nation = default(VectorOffset);
    if (_o.Nation != null) {
      var __Nation = _o.Nation.Select(x => TableEncryptionService.UseEncryption ? (Global.Nation)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _Nation = CreateNationVector(builder, __Nation);
    }
    var _VideoPath = default(VectorOffset);
    if (_o.VideoPath != null) {
      var __VideoPath = new StringOffset[_o.VideoPath.Count];
      for (var _j = 0; _j < __VideoPath.Length; ++_j) { __VideoPath[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.VideoPath[_j], key) : _o.VideoPath[_j])); }
      _VideoPath = CreateVideoPathVector(builder, __VideoPath);
    }
    var _VideoTeenPath = default(VectorOffset);
    if (_o.VideoTeenPath != null) {
      var __VideoTeenPath = new StringOffset[_o.VideoTeenPath.Count];
      for (var _j = 0; _j < __VideoTeenPath.Length; ++_j) { __VideoTeenPath[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.VideoTeenPath[_j], key) : _o.VideoTeenPath[_j])); }
      _VideoTeenPath = CreateVideoTeenPathVector(builder, __VideoTeenPath);
    }
    var _SoundPath = default(VectorOffset);
    if (_o.SoundPath != null) {
      var __SoundPath = new StringOffset[_o.SoundPath.Count];
      for (var _j = 0; _j < __SoundPath.Length; ++_j) { __SoundPath[_j] = builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SoundPath[_j], key) : _o.SoundPath[_j])); }
      _SoundPath = CreateSoundPathVector(builder, __SoundPath);
    }
    var _SoundVolume = default(VectorOffset);
    if (_o.SoundVolume != null) {
      var __SoundVolume = _o.SoundVolume.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)x, key) : x).ToArray();
      _SoundVolume = CreateSoundVolumeVector(builder, __SoundVolume);
    }
    return CreateVideoExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      _Nation,
      _VideoPath,
      _VideoTeenPath,
      _SoundPath,
      _SoundVolume);
  }
}

public class VideoExcelT
{
  public long Id { get; set; }
  public List<Global.Nation> Nation { get; set; }
  public List<string> VideoPath { get; set; }
  public List<string> VideoTeenPath { get; set; }
  public List<string> SoundPath { get; set; }
  public List<float> SoundVolume { get; set; }

  public VideoExcelT() {
    this.Id = 0;
    this.Nation = null;
    this.VideoPath = null;
    this.VideoTeenPath = null;
    this.SoundPath = null;
    this.SoundVolume = null;
  }
}


static public class VideoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Nation*/, 4 /*Global.Nation*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*VideoPath*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*VideoTeenPath*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*SoundPath*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*SoundVolume*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
