// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct PickupFirstGetBonusExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PickupFirstGetBonusExcel GetRootAsPickupFirstGetBonusExcel(ByteBuffer _bb) { return GetRootAsPickupFirstGetBonusExcel(_bb, new PickupFirstGetBonusExcel()); }
  public static PickupFirstGetBonusExcel GetRootAsPickupFirstGetBonusExcel(ByteBuffer _bb, PickupFirstGetBonusExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PickupFirstGetBonusExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ShopRecruitId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RecruitSellectionShopId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PickupCharacterId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType RewardParcelType { get { int o = __p.__offset(10); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long RewardParcelId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RewardParcelAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.PickupFirstGetBonusExcel> CreatePickupFirstGetBonusExcel(FlatBufferBuilder builder,
      long ShopRecruitId = 0,
      long RecruitSellectionShopId = 0,
      long PickupCharacterId = 0,
      Global.ParcelType RewardParcelType = Global.ParcelType.None,
      long RewardParcelId = 0,
      long RewardParcelAmount = 0) {
    builder.StartTable(6);
    PickupFirstGetBonusExcel.AddRewardParcelAmount(builder, RewardParcelAmount);
    PickupFirstGetBonusExcel.AddRewardParcelId(builder, RewardParcelId);
    PickupFirstGetBonusExcel.AddPickupCharacterId(builder, PickupCharacterId);
    PickupFirstGetBonusExcel.AddRecruitSellectionShopId(builder, RecruitSellectionShopId);
    PickupFirstGetBonusExcel.AddShopRecruitId(builder, ShopRecruitId);
    PickupFirstGetBonusExcel.AddRewardParcelType(builder, RewardParcelType);
    return PickupFirstGetBonusExcel.EndPickupFirstGetBonusExcel(builder);
  }

  public static void StartPickupFirstGetBonusExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddShopRecruitId(FlatBufferBuilder builder, long shopRecruitId) { builder.AddLong(0, shopRecruitId, 0); }
  public static void AddRecruitSellectionShopId(FlatBufferBuilder builder, long recruitSellectionShopId) { builder.AddLong(1, recruitSellectionShopId, 0); }
  public static void AddPickupCharacterId(FlatBufferBuilder builder, long pickupCharacterId) { builder.AddLong(2, pickupCharacterId, 0); }
  public static void AddRewardParcelType(FlatBufferBuilder builder, Global.ParcelType rewardParcelType) { builder.AddInt(3, (int)rewardParcelType, 0); }
  public static void AddRewardParcelId(FlatBufferBuilder builder, long rewardParcelId) { builder.AddLong(4, rewardParcelId, 0); }
  public static void AddRewardParcelAmount(FlatBufferBuilder builder, long rewardParcelAmount) { builder.AddLong(5, rewardParcelAmount, 0); }
  public static Offset<Global.PickupFirstGetBonusExcel> EndPickupFirstGetBonusExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.PickupFirstGetBonusExcel>(o);
  }
  public PickupFirstGetBonusExcelT UnPack() {
    var _o = new PickupFirstGetBonusExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PickupFirstGetBonusExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("PickupFirstGetBonus");
    _o.ShopRecruitId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ShopRecruitId, key) : this.ShopRecruitId;
    _o.RecruitSellectionShopId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RecruitSellectionShopId, key) : this.RecruitSellectionShopId;
    _o.PickupCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.PickupCharacterId, key) : this.PickupCharacterId;
    _o.RewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.RewardParcelType, key) : this.RewardParcelType;
    _o.RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelId, key) : this.RewardParcelId;
    _o.RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RewardParcelAmount, key) : this.RewardParcelAmount;
  }
  public static Offset<Global.PickupFirstGetBonusExcel> Pack(FlatBufferBuilder builder, PickupFirstGetBonusExcelT _o) {
    if (_o == null) return default(Offset<Global.PickupFirstGetBonusExcel>);
		byte[] key = TableEncryptionService.CreateKey("PickupFirstGetBonus");
		var _ShopRecruitId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ShopRecruitId, key) : _o.ShopRecruitId;
		var _RecruitSellectionShopId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RecruitSellectionShopId, key) : _o.RecruitSellectionShopId;
		var _PickupCharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.PickupCharacterId, key) : _o.PickupCharacterId;
		var _RewardParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.RewardParcelType, key) : _o.RewardParcelType;
		var _RewardParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelId, key) : _o.RewardParcelId;
		var _RewardParcelAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RewardParcelAmount, key) : _o.RewardParcelAmount;
    return CreatePickupFirstGetBonusExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ShopRecruitId : _o.ShopRecruitId,
      TableEncryptionService.UseEncryption ? _RecruitSellectionShopId : _o.RecruitSellectionShopId,
      TableEncryptionService.UseEncryption ? _PickupCharacterId : _o.PickupCharacterId,
      TableEncryptionService.UseEncryption ? _RewardParcelType : _o.RewardParcelType,
      TableEncryptionService.UseEncryption ? _RewardParcelId : _o.RewardParcelId,
      TableEncryptionService.UseEncryption ? _RewardParcelAmount : _o.RewardParcelAmount);
  }
}

public class PickupFirstGetBonusExcelT
{
  public long ShopRecruitId { get; set; }
  public long RecruitSellectionShopId { get; set; }
  public long PickupCharacterId { get; set; }
  public Global.ParcelType RewardParcelType { get; set; }
  public long RewardParcelId { get; set; }
  public long RewardParcelAmount { get; set; }

  public PickupFirstGetBonusExcelT() {
    this.ShopRecruitId = 0;
    this.RecruitSellectionShopId = 0;
    this.PickupCharacterId = 0;
    this.RewardParcelType = Global.ParcelType.None;
    this.RewardParcelId = 0;
    this.RewardParcelAmount = 0;
  }
}


static public class PickupFirstGetBonusExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ShopRecruitId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*RecruitSellectionShopId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PickupCharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*RewardParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RewardParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*RewardParcelAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
