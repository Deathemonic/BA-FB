// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct GroundNodeLayerFlat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GroundNodeLayerFlat GetRootAsGroundNodeLayerFlat(ByteBuffer _bb) { return GetRootAsGroundNodeLayerFlat(_bb, new GroundNodeLayerFlat()); }
  public static GroundNodeLayerFlat GetRootAsGroundNodeLayerFlat(ByteBuffer _bb, GroundNodeLayerFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GroundNodeLayerFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Layers(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int LayersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetLayersBytes() { return __p.__vector_as_span<sbyte>(4, 1); }
#else
  public ArraySegment<byte>? GetLayersBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetLayersArray() { return __p.__vector_as_array<sbyte>(4); }

  public static Offset<Global.GroundNodeLayerFlat> CreateGroundNodeLayerFlat(FlatBufferBuilder builder,
      VectorOffset LayersOffset = default(VectorOffset)) {
    builder.StartTable(1);
    GroundNodeLayerFlat.AddLayers(builder, LayersOffset);
    return GroundNodeLayerFlat.EndGroundNodeLayerFlat(builder);
  }

  public static void StartGroundNodeLayerFlat(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLayers(FlatBufferBuilder builder, VectorOffset layersOffset) { builder.AddOffset(0, layersOffset.Value, 0); }
  public static VectorOffset CreateLayersVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLayersVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLayersVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLayersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Global.GroundNodeLayerFlat> EndGroundNodeLayerFlat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.GroundNodeLayerFlat>(o);
  }
  public GroundNodeLayerFlatT UnPack() {
    var _o = new GroundNodeLayerFlatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GroundNodeLayerFlatT _o) {
		byte[] key = TableEncryptionService.CreateKey("GroundNodeLaye");
    _o.Layers = new List<sbyte>();
    for (var _j = 0; _j < this.LayersLength; ++_j) {_o.Layers.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((sbyte)this.Layers(_j), key) : this.Layers(_j));}
  }
  public static Offset<Global.GroundNodeLayerFlat> Pack(FlatBufferBuilder builder, GroundNodeLayerFlatT _o) {
    if (_o == null) return default(Offset<Global.GroundNodeLayerFlat>);
		byte[] key = TableEncryptionService.CreateKey("GroundNodeLaye");
    var _Layers = default(VectorOffset);
    if (_o.Layers != null) {
      var __Layers = _o.Layers.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((sbyte)x, key) : x).ToArray();
      _Layers = CreateLayersVector(builder, __Layers);
    }
    return CreateGroundNodeLayerFlat(
      builder,
      _Layers);
  }
}

public class GroundNodeLayerFlatT
{
  public List<sbyte> Layers { get; set; }

  public GroundNodeLayerFlatT() {
    this.Layers = null;
  }
}


static public class GroundNodeLayerFlatVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Layers*/, 1 /*sbyte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
