// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDreamTimelineExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MiniGameDreamTimelineExcel GetRootAsMiniGameDreamTimelineExcel(ByteBuffer _bb) { return GetRootAsMiniGameDreamTimelineExcel(_bb, new MiniGameDreamTimelineExcel()); }
  public static MiniGameDreamTimelineExcel GetRootAsMiniGameDreamTimelineExcel(ByteBuffer _bb, MiniGameDreamTimelineExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDreamTimelineExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EventContentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerDays { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DreamMakerActionPoint { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnterScenarioGroupId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Bgm { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ArtLevelPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArtLevelPathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetArtLevelPathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetArtLevelPathArray() { return __p.__vector_as_array<byte>(18); }
  public string DesignLevelPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesignLevelPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDesignLevelPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDesignLevelPathArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<Global.MiniGameDreamTimelineExcel> CreateMiniGameDreamTimelineExcel(FlatBufferBuilder builder,
      long Id = 0,
      long EventContentId = 0,
      long GroupId = 0,
      long DreamMakerDays = 0,
      long DreamMakerActionPoint = 0,
      long EnterScenarioGroupId = 0,
      long Bgm = 0,
      StringOffset ArtLevelPathOffset = default(StringOffset),
      StringOffset DesignLevelPathOffset = default(StringOffset)) {
    builder.StartTable(9);
    MiniGameDreamTimelineExcel.AddBgm(builder, Bgm);
    MiniGameDreamTimelineExcel.AddEnterScenarioGroupId(builder, EnterScenarioGroupId);
    MiniGameDreamTimelineExcel.AddDreamMakerActionPoint(builder, DreamMakerActionPoint);
    MiniGameDreamTimelineExcel.AddDreamMakerDays(builder, DreamMakerDays);
    MiniGameDreamTimelineExcel.AddGroupId(builder, GroupId);
    MiniGameDreamTimelineExcel.AddEventContentId(builder, EventContentId);
    MiniGameDreamTimelineExcel.AddId(builder, Id);
    MiniGameDreamTimelineExcel.AddDesignLevelPath(builder, DesignLevelPathOffset);
    MiniGameDreamTimelineExcel.AddArtLevelPath(builder, ArtLevelPathOffset);
    return MiniGameDreamTimelineExcel.EndMiniGameDreamTimelineExcel(builder);
  }

  public static void StartMiniGameDreamTimelineExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(1, eventContentId, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(2, groupId, 0); }
  public static void AddDreamMakerDays(FlatBufferBuilder builder, long dreamMakerDays) { builder.AddLong(3, dreamMakerDays, 0); }
  public static void AddDreamMakerActionPoint(FlatBufferBuilder builder, long dreamMakerActionPoint) { builder.AddLong(4, dreamMakerActionPoint, 0); }
  public static void AddEnterScenarioGroupId(FlatBufferBuilder builder, long enterScenarioGroupId) { builder.AddLong(5, enterScenarioGroupId, 0); }
  public static void AddBgm(FlatBufferBuilder builder, long bgm) { builder.AddLong(6, bgm, 0); }
  public static void AddArtLevelPath(FlatBufferBuilder builder, StringOffset artLevelPathOffset) { builder.AddOffset(7, artLevelPathOffset.Value, 0); }
  public static void AddDesignLevelPath(FlatBufferBuilder builder, StringOffset designLevelPathOffset) { builder.AddOffset(8, designLevelPathOffset.Value, 0); }
  public static Offset<Global.MiniGameDreamTimelineExcel> EndMiniGameDreamTimelineExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MiniGameDreamTimelineExcel>(o);
  }
  public MiniGameDreamTimelineExcelT UnPack() {
    var _o = new MiniGameDreamTimelineExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDreamTimelineExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamTimeline");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.DreamMakerDays = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerDays, key) : this.DreamMakerDays;
    _o.DreamMakerActionPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DreamMakerActionPoint, key) : this.DreamMakerActionPoint;
    _o.EnterScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EnterScenarioGroupId, key) : this.EnterScenarioGroupId;
    _o.Bgm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Bgm, key) : this.Bgm;
    _o.ArtLevelPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.ArtLevelPath, key) : this.ArtLevelPath;
    _o.DesignLevelPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DesignLevelPath, key) : this.DesignLevelPath;
  }
  public static Offset<Global.MiniGameDreamTimelineExcel> Pack(FlatBufferBuilder builder, MiniGameDreamTimelineExcelT _o) {
    if (_o == null) return default(Offset<Global.MiniGameDreamTimelineExcel>);
		byte[] key = TableEncryptionService.CreateKey("MiniGameDreamTimeline");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _DreamMakerDays = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerDays, key) : _o.DreamMakerDays;
		var _DreamMakerActionPoint = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DreamMakerActionPoint, key) : _o.DreamMakerActionPoint;
		var _EnterScenarioGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EnterScenarioGroupId, key) : _o.EnterScenarioGroupId;
		var _Bgm = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Bgm, key) : _o.Bgm;
    var _ArtLevelPath = _o.ArtLevelPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.ArtLevelPath, key) : _o.ArtLevelPath));
    var _DesignLevelPath = _o.DesignLevelPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DesignLevelPath, key) : _o.DesignLevelPath));
    return CreateMiniGameDreamTimelineExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _DreamMakerDays : _o.DreamMakerDays,
      TableEncryptionService.UseEncryption ? _DreamMakerActionPoint : _o.DreamMakerActionPoint,
      TableEncryptionService.UseEncryption ? _EnterScenarioGroupId : _o.EnterScenarioGroupId,
      TableEncryptionService.UseEncryption ? _Bgm : _o.Bgm,
      _ArtLevelPath,
      _DesignLevelPath);
  }
}

public class MiniGameDreamTimelineExcelT
{
  public long Id { get; set; }
  public long EventContentId { get; set; }
  public long GroupId { get; set; }
  public long DreamMakerDays { get; set; }
  public long DreamMakerActionPoint { get; set; }
  public long EnterScenarioGroupId { get; set; }
  public long Bgm { get; set; }
  public string ArtLevelPath { get; set; }
  public string DesignLevelPath { get; set; }

  public MiniGameDreamTimelineExcelT() {
    this.Id = 0;
    this.EventContentId = 0;
    this.GroupId = 0;
    this.DreamMakerDays = 0;
    this.DreamMakerActionPoint = 0;
    this.EnterScenarioGroupId = 0;
    this.Bgm = 0;
    this.ArtLevelPath = null;
    this.DesignLevelPath = null;
  }
}


static public class MiniGameDreamTimelineExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*DreamMakerDays*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*DreamMakerActionPoint*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*EnterScenarioGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Bgm*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*ArtLevelPath*/, false)
      && verifier.VerifyString(tablePos, 20 /*DesignLevelPath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
