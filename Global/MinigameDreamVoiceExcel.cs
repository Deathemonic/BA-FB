// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameDreamVoiceExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameDreamVoiceExcel GetRootAsMinigameDreamVoiceExcel(ByteBuffer _bb) { return GetRootAsMinigameDreamVoiceExcel(_bb, new MinigameDreamVoiceExcel()); }
  public static MinigameDreamVoiceExcel GetRootAsMinigameDreamVoiceExcel(ByteBuffer _bb, MinigameDreamVoiceExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameDreamVoiceExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.DreamMakerVoiceCondition VoiceCondition { get { int o = __p.__offset(8); return o != 0 ? (Global.DreamMakerVoiceCondition)__p.bb.GetInt(o + __p.bb_pos) : Global.DreamMakerVoiceCondition.None; } }
  public uint VoiceClip { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Global.MinigameDreamVoiceExcel> CreateMinigameDreamVoiceExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      long UniqueId = 0,
      Global.DreamMakerVoiceCondition VoiceCondition = Global.DreamMakerVoiceCondition.None,
      uint VoiceClip = 0) {
    builder.StartTable(4);
    MinigameDreamVoiceExcel.AddUniqueId(builder, UniqueId);
    MinigameDreamVoiceExcel.AddEventContentId(builder, EventContentId);
    MinigameDreamVoiceExcel.AddVoiceClip(builder, VoiceClip);
    MinigameDreamVoiceExcel.AddVoiceCondition(builder, VoiceCondition);
    return MinigameDreamVoiceExcel.EndMinigameDreamVoiceExcel(builder);
  }

  public static void StartMinigameDreamVoiceExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddVoiceCondition(FlatBufferBuilder builder, Global.DreamMakerVoiceCondition voiceCondition) { builder.AddInt(2, (int)voiceCondition, 0); }
  public static void AddVoiceClip(FlatBufferBuilder builder, uint voiceClip) { builder.AddUint(3, voiceClip, 0); }
  public static Offset<Global.MinigameDreamVoiceExcel> EndMinigameDreamVoiceExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MinigameDreamVoiceExcel>(o);
  }
  public MinigameDreamVoiceExcelT UnPack() {
    var _o = new MinigameDreamVoiceExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameDreamVoiceExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameDreamVoice");
    _o.EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.EventContentId, key) : this.EventContentId;
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.VoiceCondition = TableEncryptionService.UseEncryption ? (Global.DreamMakerVoiceCondition)TableEncryptionService.Convert((int)this.VoiceCondition, key) : this.VoiceCondition;
    _o.VoiceClip = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.VoiceClip, key) : this.VoiceClip;
  }
  public static Offset<Global.MinigameDreamVoiceExcel> Pack(FlatBufferBuilder builder, MinigameDreamVoiceExcelT _o) {
    if (_o == null) return default(Offset<Global.MinigameDreamVoiceExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameDreamVoice");
		var _EventContentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.EventContentId, key) : _o.EventContentId;
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _VoiceCondition = TableEncryptionService.UseEncryption ? (Global.DreamMakerVoiceCondition)TableEncryptionService.Convert((int)_o.VoiceCondition, key) : _o.VoiceCondition;
		var _VoiceClip = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.VoiceClip, key) : _o.VoiceClip;
    return CreateMinigameDreamVoiceExcel(
      builder,
      TableEncryptionService.UseEncryption ? _EventContentId : _o.EventContentId,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _VoiceCondition : _o.VoiceCondition,
      TableEncryptionService.UseEncryption ? _VoiceClip : _o.VoiceClip);
  }
}

public class MinigameDreamVoiceExcelT
{
  public long EventContentId { get; set; }
  public long UniqueId { get; set; }
  public Global.DreamMakerVoiceCondition VoiceCondition { get; set; }
  public uint VoiceClip { get; set; }

  public MinigameDreamVoiceExcelT() {
    this.EventContentId = 0;
    this.UniqueId = 0;
    this.VoiceCondition = Global.DreamMakerVoiceCondition.None;
    this.VoiceClip = 0;
  }
}


static public class MinigameDreamVoiceExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*VoiceCondition*/, 4 /*Global.DreamMakerVoiceCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*VoiceClip*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
