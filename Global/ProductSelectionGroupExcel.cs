// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ProductSelectionGroupExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ProductSelectionGroupExcel GetRootAsProductSelectionGroupExcel(ByteBuffer _bb) { return GetRootAsProductSelectionGroupExcel(_bb, new ProductSelectionGroupExcel()); }
  public static ProductSelectionGroupExcel GetRootAsProductSelectionGroupExcel(ByteBuffer _bb, ProductSelectionGroupExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProductSelectionGroupExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ProductSelectionGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ProductSelectionGroupComponentId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DisplayOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType ParcelType { get { int o = __p.__offset(10); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long ParcelId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ResultAmount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.ParcelType ConditionParcelType { get { int o = __p.__offset(16); return o != 0 ? (Global.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Global.ParcelType.None; } }
  public long ConditionParcelId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.ProductSelectionGroupExcel> CreateProductSelectionGroupExcel(FlatBufferBuilder builder,
      long ProductSelectionGroupId = 0,
      long ProductSelectionGroupComponentId = 0,
      long DisplayOrder = 0,
      Global.ParcelType ParcelType = Global.ParcelType.None,
      long ParcelId = 0,
      long ResultAmount = 0,
      Global.ParcelType ConditionParcelType = Global.ParcelType.None,
      long ConditionParcelId = 0) {
    builder.StartTable(8);
    ProductSelectionGroupExcel.AddConditionParcelId(builder, ConditionParcelId);
    ProductSelectionGroupExcel.AddResultAmount(builder, ResultAmount);
    ProductSelectionGroupExcel.AddParcelId(builder, ParcelId);
    ProductSelectionGroupExcel.AddDisplayOrder(builder, DisplayOrder);
    ProductSelectionGroupExcel.AddProductSelectionGroupComponentId(builder, ProductSelectionGroupComponentId);
    ProductSelectionGroupExcel.AddProductSelectionGroupId(builder, ProductSelectionGroupId);
    ProductSelectionGroupExcel.AddConditionParcelType(builder, ConditionParcelType);
    ProductSelectionGroupExcel.AddParcelType(builder, ParcelType);
    return ProductSelectionGroupExcel.EndProductSelectionGroupExcel(builder);
  }

  public static void StartProductSelectionGroupExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddProductSelectionGroupId(FlatBufferBuilder builder, long productSelectionGroupId) { builder.AddLong(0, productSelectionGroupId, 0); }
  public static void AddProductSelectionGroupComponentId(FlatBufferBuilder builder, long productSelectionGroupComponentId) { builder.AddLong(1, productSelectionGroupComponentId, 0); }
  public static void AddDisplayOrder(FlatBufferBuilder builder, long displayOrder) { builder.AddLong(2, displayOrder, 0); }
  public static void AddParcelType(FlatBufferBuilder builder, Global.ParcelType parcelType) { builder.AddInt(3, (int)parcelType, 0); }
  public static void AddParcelId(FlatBufferBuilder builder, long parcelId) { builder.AddLong(4, parcelId, 0); }
  public static void AddResultAmount(FlatBufferBuilder builder, long resultAmount) { builder.AddLong(5, resultAmount, 0); }
  public static void AddConditionParcelType(FlatBufferBuilder builder, Global.ParcelType conditionParcelType) { builder.AddInt(6, (int)conditionParcelType, 0); }
  public static void AddConditionParcelId(FlatBufferBuilder builder, long conditionParcelId) { builder.AddLong(7, conditionParcelId, 0); }
  public static Offset<Global.ProductSelectionGroupExcel> EndProductSelectionGroupExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ProductSelectionGroupExcel>(o);
  }
  public ProductSelectionGroupExcelT UnPack() {
    var _o = new ProductSelectionGroupExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProductSelectionGroupExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ProductSelectionGroup");
    _o.ProductSelectionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ProductSelectionGroupId, key) : this.ProductSelectionGroupId;
    _o.ProductSelectionGroupComponentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ProductSelectionGroupComponentId, key) : this.ProductSelectionGroupComponentId;
    _o.DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DisplayOrder, key) : this.DisplayOrder;
    _o.ParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ParcelType, key) : this.ParcelType;
    _o.ParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ParcelId, key) : this.ParcelId;
    _o.ResultAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ResultAmount, key) : this.ResultAmount;
    _o.ConditionParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)this.ConditionParcelType, key) : this.ConditionParcelType;
    _o.ConditionParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConditionParcelId, key) : this.ConditionParcelId;
  }
  public static Offset<Global.ProductSelectionGroupExcel> Pack(FlatBufferBuilder builder, ProductSelectionGroupExcelT _o) {
    if (_o == null) return default(Offset<Global.ProductSelectionGroupExcel>);
		byte[] key = TableEncryptionService.CreateKey("ProductSelectionGroup");
		var _ProductSelectionGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ProductSelectionGroupId, key) : _o.ProductSelectionGroupId;
		var _ProductSelectionGroupComponentId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ProductSelectionGroupComponentId, key) : _o.ProductSelectionGroupComponentId;
		var _DisplayOrder = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DisplayOrder, key) : _o.DisplayOrder;
		var _ParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.ParcelType, key) : _o.ParcelType;
		var _ParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ParcelId, key) : _o.ParcelId;
		var _ResultAmount = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ResultAmount, key) : _o.ResultAmount;
		var _ConditionParcelType = TableEncryptionService.UseEncryption ? (Global.ParcelType)TableEncryptionService.Convert((int)_o.ConditionParcelType, key) : _o.ConditionParcelType;
		var _ConditionParcelId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConditionParcelId, key) : _o.ConditionParcelId;
    return CreateProductSelectionGroupExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ProductSelectionGroupId : _o.ProductSelectionGroupId,
      TableEncryptionService.UseEncryption ? _ProductSelectionGroupComponentId : _o.ProductSelectionGroupComponentId,
      TableEncryptionService.UseEncryption ? _DisplayOrder : _o.DisplayOrder,
      TableEncryptionService.UseEncryption ? _ParcelType : _o.ParcelType,
      TableEncryptionService.UseEncryption ? _ParcelId : _o.ParcelId,
      TableEncryptionService.UseEncryption ? _ResultAmount : _o.ResultAmount,
      TableEncryptionService.UseEncryption ? _ConditionParcelType : _o.ConditionParcelType,
      TableEncryptionService.UseEncryption ? _ConditionParcelId : _o.ConditionParcelId);
  }
}

public class ProductSelectionGroupExcelT
{
  public long ProductSelectionGroupId { get; set; }
  public long ProductSelectionGroupComponentId { get; set; }
  public long DisplayOrder { get; set; }
  public Global.ParcelType ParcelType { get; set; }
  public long ParcelId { get; set; }
  public long ResultAmount { get; set; }
  public Global.ParcelType ConditionParcelType { get; set; }
  public long ConditionParcelId { get; set; }

  public ProductSelectionGroupExcelT() {
    this.ProductSelectionGroupId = 0;
    this.ProductSelectionGroupComponentId = 0;
    this.DisplayOrder = 0;
    this.ParcelType = Global.ParcelType.None;
    this.ParcelId = 0;
    this.ResultAmount = 0;
    this.ConditionParcelType = Global.ParcelType.None;
    this.ConditionParcelId = 0;
  }
}


static public class ProductSelectionGroupExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ProductSelectionGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ProductSelectionGroupComponentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*DisplayOrder*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*ParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*ParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*ResultAmount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*ConditionParcelType*/, 4 /*Global.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*ConditionParcelId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
