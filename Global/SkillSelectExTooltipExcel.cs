// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct SkillSelectExTooltipExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillSelectExTooltipExcel GetRootAsSkillSelectExTooltipExcel(ByteBuffer _bb) { return GetRootAsSkillSelectExTooltipExcel(_bb, new SkillSelectExTooltipExcel()); }
  public static SkillSelectExTooltipExcel GetRootAsSkillSelectExTooltipExcel(ByteBuffer _bb, SkillSelectExTooltipExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillSelectExTooltipExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string SelectableExSkillGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSelectableExSkillGroupIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSelectableExSkillGroupIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSelectableExSkillGroupIdArray() { return __p.__vector_as_array<byte>(6); }
  public string SkillUseConditionLocalizeId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillUseConditionLocalizeIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSkillUseConditionLocalizeIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSkillUseConditionLocalizeIdArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<Global.SkillSelectExTooltipExcel> CreateSkillSelectExTooltipExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      StringOffset SelectableExSkillGroupIdOffset = default(StringOffset),
      StringOffset SkillUseConditionLocalizeIdOffset = default(StringOffset)) {
    builder.StartTable(3);
    SkillSelectExTooltipExcel.AddGroupId(builder, GroupId);
    SkillSelectExTooltipExcel.AddSkillUseConditionLocalizeId(builder, SkillUseConditionLocalizeIdOffset);
    SkillSelectExTooltipExcel.AddSelectableExSkillGroupId(builder, SelectableExSkillGroupIdOffset);
    return SkillSelectExTooltipExcel.EndSkillSelectExTooltipExcel(builder);
  }

  public static void StartSkillSelectExTooltipExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddSelectableExSkillGroupId(FlatBufferBuilder builder, StringOffset selectableExSkillGroupIdOffset) { builder.AddOffset(1, selectableExSkillGroupIdOffset.Value, 0); }
  public static void AddSkillUseConditionLocalizeId(FlatBufferBuilder builder, StringOffset skillUseConditionLocalizeIdOffset) { builder.AddOffset(2, skillUseConditionLocalizeIdOffset.Value, 0); }
  public static Offset<Global.SkillSelectExTooltipExcel> EndSkillSelectExTooltipExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.SkillSelectExTooltipExcel>(o);
  }
  public SkillSelectExTooltipExcelT UnPack() {
    var _o = new SkillSelectExTooltipExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillSelectExTooltipExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("SkillSelectExTooltip");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.SelectableExSkillGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SelectableExSkillGroupId, key) : this.SelectableExSkillGroupId;
    _o.SkillUseConditionLocalizeId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SkillUseConditionLocalizeId, key) : this.SkillUseConditionLocalizeId;
  }
  public static Offset<Global.SkillSelectExTooltipExcel> Pack(FlatBufferBuilder builder, SkillSelectExTooltipExcelT _o) {
    if (_o == null) return default(Offset<Global.SkillSelectExTooltipExcel>);
		byte[] key = TableEncryptionService.CreateKey("SkillSelectExTooltip");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
    var _SelectableExSkillGroupId = _o.SelectableExSkillGroupId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SelectableExSkillGroupId, key) : _o.SelectableExSkillGroupId));
    var _SkillUseConditionLocalizeId = _o.SkillUseConditionLocalizeId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SkillUseConditionLocalizeId, key) : _o.SkillUseConditionLocalizeId));
    return CreateSkillSelectExTooltipExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      _SelectableExSkillGroupId,
      _SkillUseConditionLocalizeId);
  }
}

public class SkillSelectExTooltipExcelT
{
  public long GroupId { get; set; }
  public string SelectableExSkillGroupId { get; set; }
  public string SkillUseConditionLocalizeId { get; set; }

  public SkillSelectExTooltipExcelT() {
    this.GroupId = 0;
    this.SelectableExSkillGroupId = null;
    this.SkillUseConditionLocalizeId = null;
  }
}


static public class SkillSelectExTooltipExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*SelectableExSkillGroupId*/, false)
      && verifier.VerifyString(tablePos, 8 /*SkillUseConditionLocalizeId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
