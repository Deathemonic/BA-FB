// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct TacticSimulatorSettingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TacticSimulatorSettingExcel GetRootAsTacticSimulatorSettingExcel(ByteBuffer _bb) { return GetRootAsTacticSimulatorSettingExcel(_bb, new TacticSimulatorSettingExcel()); }
  public static TacticSimulatorSettingExcel GetRootAsTacticSimulatorSettingExcel(ByteBuffer _bb, TacticSimulatorSettingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TacticSimulatorSettingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroundId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FixedEchelonId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.TacticSimulatorSettingExcel> CreateTacticSimulatorSettingExcel(FlatBufferBuilder builder,
      long GroundId = 0,
      long FixedEchelonId = 0) {
    builder.StartTable(2);
    TacticSimulatorSettingExcel.AddFixedEchelonId(builder, FixedEchelonId);
    TacticSimulatorSettingExcel.AddGroundId(builder, GroundId);
    return TacticSimulatorSettingExcel.EndTacticSimulatorSettingExcel(builder);
  }

  public static void StartTacticSimulatorSettingExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddGroundId(FlatBufferBuilder builder, long groundId) { builder.AddLong(0, groundId, 0); }
  public static void AddFixedEchelonId(FlatBufferBuilder builder, long fixedEchelonId) { builder.AddLong(1, fixedEchelonId, 0); }
  public static Offset<Global.TacticSimulatorSettingExcel> EndTacticSimulatorSettingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.TacticSimulatorSettingExcel>(o);
  }
  public TacticSimulatorSettingExcelT UnPack() {
    var _o = new TacticSimulatorSettingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TacticSimulatorSettingExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("TacticSimulatorSetting");
    _o.GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroundId, key) : this.GroundId;
    _o.FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.FixedEchelonId, key) : this.FixedEchelonId;
  }
  public static Offset<Global.TacticSimulatorSettingExcel> Pack(FlatBufferBuilder builder, TacticSimulatorSettingExcelT _o) {
    if (_o == null) return default(Offset<Global.TacticSimulatorSettingExcel>);
		byte[] key = TableEncryptionService.CreateKey("TacticSimulatorSetting");
		var _GroundId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroundId, key) : _o.GroundId;
		var _FixedEchelonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.FixedEchelonId, key) : _o.FixedEchelonId;
    return CreateTacticSimulatorSettingExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroundId : _o.GroundId,
      TableEncryptionService.UseEncryption ? _FixedEchelonId : _o.FixedEchelonId);
  }
}

public class TacticSimulatorSettingExcelT
{
  public long GroundId { get; set; }
  public long FixedEchelonId { get; set; }

  public TacticSimulatorSettingExcelT() {
    this.GroundId = 0;
    this.FixedEchelonId = 0;
  }
}


static public class TacticSimulatorSettingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroundId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*FixedEchelonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
