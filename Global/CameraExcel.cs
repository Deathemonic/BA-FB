// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CameraExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CameraExcel GetRootAsCameraExcel(ByteBuffer _bb) { return GetRootAsCameraExcel(_bb, new CameraExcel()); }
  public static CameraExcel GetRootAsCameraExcel(ByteBuffer _bb, CameraExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CameraExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float MinDistance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RotationX { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RotationY { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MoveInstantly { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MoveInstantlyRotationSave { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float LeftMargin { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float BottomMargin { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool IgnoreEnemies { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseRailPointCompensation { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Global.CameraExcel> CreateCameraExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      float MinDistance = 0.0f,
      float MaxDistance = 0.0f,
      float RotationX = 0.0f,
      float RotationY = 0.0f,
      bool MoveInstantly = false,
      bool MoveInstantlyRotationSave = false,
      float LeftMargin = 0.0f,
      float BottomMargin = 0.0f,
      bool IgnoreEnemies = false,
      bool UseRailPointCompensation = false) {
    builder.StartTable(11);
    CameraExcel.AddUniqueId(builder, UniqueId);
    CameraExcel.AddBottomMargin(builder, BottomMargin);
    CameraExcel.AddLeftMargin(builder, LeftMargin);
    CameraExcel.AddRotationY(builder, RotationY);
    CameraExcel.AddRotationX(builder, RotationX);
    CameraExcel.AddMaxDistance(builder, MaxDistance);
    CameraExcel.AddMinDistance(builder, MinDistance);
    CameraExcel.AddUseRailPointCompensation(builder, UseRailPointCompensation);
    CameraExcel.AddIgnoreEnemies(builder, IgnoreEnemies);
    CameraExcel.AddMoveInstantlyRotationSave(builder, MoveInstantlyRotationSave);
    CameraExcel.AddMoveInstantly(builder, MoveInstantly);
    return CameraExcel.EndCameraExcel(builder);
  }

  public static void StartCameraExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddMinDistance(FlatBufferBuilder builder, float minDistance) { builder.AddFloat(1, minDistance, 0.0f); }
  public static void AddMaxDistance(FlatBufferBuilder builder, float maxDistance) { builder.AddFloat(2, maxDistance, 0.0f); }
  public static void AddRotationX(FlatBufferBuilder builder, float rotationX) { builder.AddFloat(3, rotationX, 0.0f); }
  public static void AddRotationY(FlatBufferBuilder builder, float rotationY) { builder.AddFloat(4, rotationY, 0.0f); }
  public static void AddMoveInstantly(FlatBufferBuilder builder, bool moveInstantly) { builder.AddBool(5, moveInstantly, false); }
  public static void AddMoveInstantlyRotationSave(FlatBufferBuilder builder, bool moveInstantlyRotationSave) { builder.AddBool(6, moveInstantlyRotationSave, false); }
  public static void AddLeftMargin(FlatBufferBuilder builder, float leftMargin) { builder.AddFloat(7, leftMargin, 0.0f); }
  public static void AddBottomMargin(FlatBufferBuilder builder, float bottomMargin) { builder.AddFloat(8, bottomMargin, 0.0f); }
  public static void AddIgnoreEnemies(FlatBufferBuilder builder, bool ignoreEnemies) { builder.AddBool(9, ignoreEnemies, false); }
  public static void AddUseRailPointCompensation(FlatBufferBuilder builder, bool useRailPointCompensation) { builder.AddBool(10, useRailPointCompensation, false); }
  public static Offset<Global.CameraExcel> EndCameraExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.CameraExcel>(o);
  }
  public CameraExcelT UnPack() {
    var _o = new CameraExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Camera");
    _o.UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.UniqueId, key) : this.UniqueId;
    _o.MinDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.MinDistance, key) : this.MinDistance;
    _o.MaxDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.MaxDistance, key) : this.MaxDistance;
    _o.RotationX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RotationX, key) : this.RotationX;
    _o.RotationY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RotationY, key) : this.RotationY;
    _o.MoveInstantly = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.MoveInstantly, key) : this.MoveInstantly;
    _o.MoveInstantlyRotationSave = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.MoveInstantlyRotationSave, key) : this.MoveInstantlyRotationSave;
    _o.LeftMargin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.LeftMargin, key) : this.LeftMargin;
    _o.BottomMargin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.BottomMargin, key) : this.BottomMargin;
    _o.IgnoreEnemies = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.IgnoreEnemies, key) : this.IgnoreEnemies;
    _o.UseRailPointCompensation = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.UseRailPointCompensation, key) : this.UseRailPointCompensation;
  }
  public static Offset<Global.CameraExcel> Pack(FlatBufferBuilder builder, CameraExcelT _o) {
    if (_o == null) return default(Offset<Global.CameraExcel>);
		byte[] key = TableEncryptionService.CreateKey("Camera");
		var _UniqueId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.UniqueId, key) : _o.UniqueId;
		var _MinDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.MinDistance, key) : _o.MinDistance;
		var _MaxDistance = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.MaxDistance, key) : _o.MaxDistance;
		var _RotationX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RotationX, key) : _o.RotationX;
		var _RotationY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RotationY, key) : _o.RotationY;
		var _MoveInstantly = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.MoveInstantly, key) : _o.MoveInstantly;
		var _MoveInstantlyRotationSave = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.MoveInstantlyRotationSave, key) : _o.MoveInstantlyRotationSave;
		var _LeftMargin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.LeftMargin, key) : _o.LeftMargin;
		var _BottomMargin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.BottomMargin, key) : _o.BottomMargin;
		var _IgnoreEnemies = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.IgnoreEnemies, key) : _o.IgnoreEnemies;
		var _UseRailPointCompensation = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.UseRailPointCompensation, key) : _o.UseRailPointCompensation;
    return CreateCameraExcel(
      builder,
      TableEncryptionService.UseEncryption ? _UniqueId : _o.UniqueId,
      TableEncryptionService.UseEncryption ? _MinDistance : _o.MinDistance,
      TableEncryptionService.UseEncryption ? _MaxDistance : _o.MaxDistance,
      TableEncryptionService.UseEncryption ? _RotationX : _o.RotationX,
      TableEncryptionService.UseEncryption ? _RotationY : _o.RotationY,
      TableEncryptionService.UseEncryption ? _MoveInstantly : _o.MoveInstantly,
      TableEncryptionService.UseEncryption ? _MoveInstantlyRotationSave : _o.MoveInstantlyRotationSave,
      TableEncryptionService.UseEncryption ? _LeftMargin : _o.LeftMargin,
      TableEncryptionService.UseEncryption ? _BottomMargin : _o.BottomMargin,
      TableEncryptionService.UseEncryption ? _IgnoreEnemies : _o.IgnoreEnemies,
      TableEncryptionService.UseEncryption ? _UseRailPointCompensation : _o.UseRailPointCompensation);
  }
}

public class CameraExcelT
{
  public long UniqueId { get; set; }
  public float MinDistance { get; set; }
  public float MaxDistance { get; set; }
  public float RotationX { get; set; }
  public float RotationY { get; set; }
  public bool MoveInstantly { get; set; }
  public bool MoveInstantlyRotationSave { get; set; }
  public float LeftMargin { get; set; }
  public float BottomMargin { get; set; }
  public bool IgnoreEnemies { get; set; }
  public bool UseRailPointCompensation { get; set; }

  public CameraExcelT() {
    this.UniqueId = 0;
    this.MinDistance = 0.0f;
    this.MaxDistance = 0.0f;
    this.RotationX = 0.0f;
    this.RotationY = 0.0f;
    this.MoveInstantly = false;
    this.MoveInstantlyRotationSave = false;
    this.LeftMargin = 0.0f;
    this.BottomMargin = 0.0f;
    this.IgnoreEnemies = false;
    this.UseRailPointCompensation = false;
  }
}


static public class CameraExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*MinDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MaxDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RotationX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RotationY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MoveInstantly*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*MoveInstantlyRotationSave*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*LeftMargin*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*BottomMargin*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*IgnoreEnemies*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*UseRailPointCompensation*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
