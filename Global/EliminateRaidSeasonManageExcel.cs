// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct EliminateRaidSeasonManageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EliminateRaidSeasonManageExcel GetRootAsEliminateRaidSeasonManageExcel(ByteBuffer _bb) { return GetRootAsEliminateRaidSeasonManageExcel(_bb, new EliminateRaidSeasonManageExcel()); }
  public static EliminateRaidSeasonManageExcel GetRootAsEliminateRaidSeasonManageExcel(ByteBuffer _bb, EliminateRaidSeasonManageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EliminateRaidSeasonManageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long SeasonId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SeasonDisplay { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string SeasonStartData { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSeasonStartDataBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSeasonStartDataBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSeasonStartDataArray() { return __p.__vector_as_array<byte>(8); }
  public string EndNoteLabelStartDate { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndNoteLabelStartDateBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEndNoteLabelStartDateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEndNoteLabelStartDateArray() { return __p.__vector_as_array<byte>(10); }
  public string SeasonEndData { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSeasonEndDataBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSeasonEndDataBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSeasonEndDataArray() { return __p.__vector_as_array<byte>(12); }
  public string SettlementEndDate { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSettlementEndDateBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSettlementEndDateBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSettlementEndDateArray() { return __p.__vector_as_array<byte>(14); }
  public string LobbyTableBGPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyTableBGPathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLobbyTableBGPathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLobbyTableBGPathArray() { return __p.__vector_as_array<byte>(16); }
  public string LobbyScreenBGPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLobbyScreenBGPathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLobbyScreenBGPathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLobbyScreenBGPathArray() { return __p.__vector_as_array<byte>(18); }
  public string OpenRaidBossGroup01 { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenRaidBossGroup01Bytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOpenRaidBossGroup01Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOpenRaidBossGroup01Array() { return __p.__vector_as_array<byte>(20); }
  public string OpenRaidBossGroup02 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenRaidBossGroup02Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOpenRaidBossGroup02Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOpenRaidBossGroup02Array() { return __p.__vector_as_array<byte>(22); }
  public string OpenRaidBossGroup03 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpenRaidBossGroup03Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOpenRaidBossGroup03Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOpenRaidBossGroup03Array() { return __p.__vector_as_array<byte>(24); }
  public long RankingRewardGroupId { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxSeasonRewardGauage { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long StackedSeasonRewardGauge(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int StackedSeasonRewardGaugeLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetStackedSeasonRewardGaugeBytes() { return __p.__vector_as_span<long>(30, 8); }
#else
  public ArraySegment<byte>? GetStackedSeasonRewardGaugeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public long[] GetStackedSeasonRewardGaugeArray() { return __p.__vector_as_array<long>(30); }
  public long SeasonRewardId(int j) { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int SeasonRewardIdLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetSeasonRewardIdBytes() { return __p.__vector_as_span<long>(32, 8); }
#else
  public ArraySegment<byte>? GetSeasonRewardIdBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public long[] GetSeasonRewardIdArray() { return __p.__vector_as_array<long>(32); }
  public long LimitedRewardIdNormal { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedRewardIdHard { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedRewardIdVeryhard { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedRewardIdHardcore { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedRewardIdExtreme { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedRewardIdInsane { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long LimitedRewardIdTorment { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.EliminateRaidSeasonManageExcel> CreateEliminateRaidSeasonManageExcel(FlatBufferBuilder builder,
      long SeasonId = 0,
      long SeasonDisplay = 0,
      StringOffset SeasonStartDataOffset = default(StringOffset),
      StringOffset EndNoteLabelStartDateOffset = default(StringOffset),
      StringOffset SeasonEndDataOffset = default(StringOffset),
      StringOffset SettlementEndDateOffset = default(StringOffset),
      StringOffset LobbyTableBGPathOffset = default(StringOffset),
      StringOffset LobbyScreenBGPathOffset = default(StringOffset),
      StringOffset OpenRaidBossGroup01Offset = default(StringOffset),
      StringOffset OpenRaidBossGroup02Offset = default(StringOffset),
      StringOffset OpenRaidBossGroup03Offset = default(StringOffset),
      long RankingRewardGroupId = 0,
      int MaxSeasonRewardGauage = 0,
      VectorOffset StackedSeasonRewardGaugeOffset = default(VectorOffset),
      VectorOffset SeasonRewardIdOffset = default(VectorOffset),
      long LimitedRewardIdNormal = 0,
      long LimitedRewardIdHard = 0,
      long LimitedRewardIdVeryhard = 0,
      long LimitedRewardIdHardcore = 0,
      long LimitedRewardIdExtreme = 0,
      long LimitedRewardIdInsane = 0,
      long LimitedRewardIdTorment = 0) {
    builder.StartTable(22);
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdTorment(builder, LimitedRewardIdTorment);
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdInsane(builder, LimitedRewardIdInsane);
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdExtreme(builder, LimitedRewardIdExtreme);
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdHardcore(builder, LimitedRewardIdHardcore);
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdVeryhard(builder, LimitedRewardIdVeryhard);
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdHard(builder, LimitedRewardIdHard);
    EliminateRaidSeasonManageExcel.AddLimitedRewardIdNormal(builder, LimitedRewardIdNormal);
    EliminateRaidSeasonManageExcel.AddRankingRewardGroupId(builder, RankingRewardGroupId);
    EliminateRaidSeasonManageExcel.AddSeasonDisplay(builder, SeasonDisplay);
    EliminateRaidSeasonManageExcel.AddSeasonId(builder, SeasonId);
    EliminateRaidSeasonManageExcel.AddSeasonRewardId(builder, SeasonRewardIdOffset);
    EliminateRaidSeasonManageExcel.AddStackedSeasonRewardGauge(builder, StackedSeasonRewardGaugeOffset);
    EliminateRaidSeasonManageExcel.AddMaxSeasonRewardGauage(builder, MaxSeasonRewardGauage);
    EliminateRaidSeasonManageExcel.AddOpenRaidBossGroup03(builder, OpenRaidBossGroup03Offset);
    EliminateRaidSeasonManageExcel.AddOpenRaidBossGroup02(builder, OpenRaidBossGroup02Offset);
    EliminateRaidSeasonManageExcel.AddOpenRaidBossGroup01(builder, OpenRaidBossGroup01Offset);
    EliminateRaidSeasonManageExcel.AddLobbyScreenBGPath(builder, LobbyScreenBGPathOffset);
    EliminateRaidSeasonManageExcel.AddLobbyTableBGPath(builder, LobbyTableBGPathOffset);
    EliminateRaidSeasonManageExcel.AddSettlementEndDate(builder, SettlementEndDateOffset);
    EliminateRaidSeasonManageExcel.AddSeasonEndData(builder, SeasonEndDataOffset);
    EliminateRaidSeasonManageExcel.AddEndNoteLabelStartDate(builder, EndNoteLabelStartDateOffset);
    EliminateRaidSeasonManageExcel.AddSeasonStartData(builder, SeasonStartDataOffset);
    return EliminateRaidSeasonManageExcel.EndEliminateRaidSeasonManageExcel(builder);
  }

  public static void StartEliminateRaidSeasonManageExcel(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddSeasonId(FlatBufferBuilder builder, long seasonId) { builder.AddLong(0, seasonId, 0); }
  public static void AddSeasonDisplay(FlatBufferBuilder builder, long seasonDisplay) { builder.AddLong(1, seasonDisplay, 0); }
  public static void AddSeasonStartData(FlatBufferBuilder builder, StringOffset seasonStartDataOffset) { builder.AddOffset(2, seasonStartDataOffset.Value, 0); }
  public static void AddEndNoteLabelStartDate(FlatBufferBuilder builder, StringOffset endNoteLabelStartDateOffset) { builder.AddOffset(3, endNoteLabelStartDateOffset.Value, 0); }
  public static void AddSeasonEndData(FlatBufferBuilder builder, StringOffset seasonEndDataOffset) { builder.AddOffset(4, seasonEndDataOffset.Value, 0); }
  public static void AddSettlementEndDate(FlatBufferBuilder builder, StringOffset settlementEndDateOffset) { builder.AddOffset(5, settlementEndDateOffset.Value, 0); }
  public static void AddLobbyTableBGPath(FlatBufferBuilder builder, StringOffset lobbyTableBGPathOffset) { builder.AddOffset(6, lobbyTableBGPathOffset.Value, 0); }
  public static void AddLobbyScreenBGPath(FlatBufferBuilder builder, StringOffset lobbyScreenBGPathOffset) { builder.AddOffset(7, lobbyScreenBGPathOffset.Value, 0); }
  public static void AddOpenRaidBossGroup01(FlatBufferBuilder builder, StringOffset openRaidBossGroup01Offset) { builder.AddOffset(8, openRaidBossGroup01Offset.Value, 0); }
  public static void AddOpenRaidBossGroup02(FlatBufferBuilder builder, StringOffset openRaidBossGroup02Offset) { builder.AddOffset(9, openRaidBossGroup02Offset.Value, 0); }
  public static void AddOpenRaidBossGroup03(FlatBufferBuilder builder, StringOffset openRaidBossGroup03Offset) { builder.AddOffset(10, openRaidBossGroup03Offset.Value, 0); }
  public static void AddRankingRewardGroupId(FlatBufferBuilder builder, long rankingRewardGroupId) { builder.AddLong(11, rankingRewardGroupId, 0); }
  public static void AddMaxSeasonRewardGauage(FlatBufferBuilder builder, int maxSeasonRewardGauage) { builder.AddInt(12, maxSeasonRewardGauage, 0); }
  public static void AddStackedSeasonRewardGauge(FlatBufferBuilder builder, VectorOffset stackedSeasonRewardGaugeOffset) { builder.AddOffset(13, stackedSeasonRewardGaugeOffset.Value, 0); }
  public static VectorOffset CreateStackedSeasonRewardGaugeVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStackedSeasonRewardGaugeVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStackedSeasonRewardGaugeVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStackedSeasonRewardGaugeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStackedSeasonRewardGaugeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddSeasonRewardId(FlatBufferBuilder builder, VectorOffset seasonRewardIdOffset) { builder.AddOffset(14, seasonRewardIdOffset.Value, 0); }
  public static VectorOffset CreateSeasonRewardIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardIdVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardIdVectorBlock(FlatBufferBuilder builder, ArraySegment<long> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeasonRewardIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<long>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSeasonRewardIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddLimitedRewardIdNormal(FlatBufferBuilder builder, long limitedRewardIdNormal) { builder.AddLong(15, limitedRewardIdNormal, 0); }
  public static void AddLimitedRewardIdHard(FlatBufferBuilder builder, long limitedRewardIdHard) { builder.AddLong(16, limitedRewardIdHard, 0); }
  public static void AddLimitedRewardIdVeryhard(FlatBufferBuilder builder, long limitedRewardIdVeryhard) { builder.AddLong(17, limitedRewardIdVeryhard, 0); }
  public static void AddLimitedRewardIdHardcore(FlatBufferBuilder builder, long limitedRewardIdHardcore) { builder.AddLong(18, limitedRewardIdHardcore, 0); }
  public static void AddLimitedRewardIdExtreme(FlatBufferBuilder builder, long limitedRewardIdExtreme) { builder.AddLong(19, limitedRewardIdExtreme, 0); }
  public static void AddLimitedRewardIdInsane(FlatBufferBuilder builder, long limitedRewardIdInsane) { builder.AddLong(20, limitedRewardIdInsane, 0); }
  public static void AddLimitedRewardIdTorment(FlatBufferBuilder builder, long limitedRewardIdTorment) { builder.AddLong(21, limitedRewardIdTorment, 0); }
  public static Offset<Global.EliminateRaidSeasonManageExcel> EndEliminateRaidSeasonManageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.EliminateRaidSeasonManageExcel>(o);
  }
  public EliminateRaidSeasonManageExcelT UnPack() {
    var _o = new EliminateRaidSeasonManageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EliminateRaidSeasonManageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EliminateRaidSeasonManage");
    _o.SeasonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SeasonId, key) : this.SeasonId;
    _o.SeasonDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SeasonDisplay, key) : this.SeasonDisplay;
    _o.SeasonStartData = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SeasonStartData, key) : this.SeasonStartData;
    _o.EndNoteLabelStartDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.EndNoteLabelStartDate, key) : this.EndNoteLabelStartDate;
    _o.SeasonEndData = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SeasonEndData, key) : this.SeasonEndData;
    _o.SettlementEndDate = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SettlementEndDate, key) : this.SettlementEndDate;
    _o.LobbyTableBGPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LobbyTableBGPath, key) : this.LobbyTableBGPath;
    _o.LobbyScreenBGPath = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LobbyScreenBGPath, key) : this.LobbyScreenBGPath;
    _o.OpenRaidBossGroup01 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.OpenRaidBossGroup01, key) : this.OpenRaidBossGroup01;
    _o.OpenRaidBossGroup02 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.OpenRaidBossGroup02, key) : this.OpenRaidBossGroup02;
    _o.OpenRaidBossGroup03 = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.OpenRaidBossGroup03, key) : this.OpenRaidBossGroup03;
    _o.RankingRewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.RankingRewardGroupId, key) : this.RankingRewardGroupId;
    _o.MaxSeasonRewardGauage = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.MaxSeasonRewardGauage, key) : this.MaxSeasonRewardGauage;
    _o.StackedSeasonRewardGauge = new List<long>();
    for (var _j = 0; _j < this.StackedSeasonRewardGaugeLength; ++_j) {_o.StackedSeasonRewardGauge.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.StackedSeasonRewardGauge(_j), key) : this.StackedSeasonRewardGauge(_j));}
    _o.SeasonRewardId = new List<long>();
    for (var _j = 0; _j < this.SeasonRewardIdLength; ++_j) {_o.SeasonRewardId.Add(TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.SeasonRewardId(_j), key) : this.SeasonRewardId(_j));}
    _o.LimitedRewardIdNormal = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LimitedRewardIdNormal, key) : this.LimitedRewardIdNormal;
    _o.LimitedRewardIdHard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LimitedRewardIdHard, key) : this.LimitedRewardIdHard;
    _o.LimitedRewardIdVeryhard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LimitedRewardIdVeryhard, key) : this.LimitedRewardIdVeryhard;
    _o.LimitedRewardIdHardcore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LimitedRewardIdHardcore, key) : this.LimitedRewardIdHardcore;
    _o.LimitedRewardIdExtreme = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LimitedRewardIdExtreme, key) : this.LimitedRewardIdExtreme;
    _o.LimitedRewardIdInsane = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LimitedRewardIdInsane, key) : this.LimitedRewardIdInsane;
    _o.LimitedRewardIdTorment = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.LimitedRewardIdTorment, key) : this.LimitedRewardIdTorment;
  }
  public static Offset<Global.EliminateRaidSeasonManageExcel> Pack(FlatBufferBuilder builder, EliminateRaidSeasonManageExcelT _o) {
    if (_o == null) return default(Offset<Global.EliminateRaidSeasonManageExcel>);
		byte[] key = TableEncryptionService.CreateKey("EliminateRaidSeasonManage");
		var _SeasonId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SeasonId, key) : _o.SeasonId;
		var _SeasonDisplay = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.SeasonDisplay, key) : _o.SeasonDisplay;
    var _SeasonStartData = _o.SeasonStartData == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SeasonStartData, key) : _o.SeasonStartData));
    var _EndNoteLabelStartDate = _o.EndNoteLabelStartDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.EndNoteLabelStartDate, key) : _o.EndNoteLabelStartDate));
    var _SeasonEndData = _o.SeasonEndData == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SeasonEndData, key) : _o.SeasonEndData));
    var _SettlementEndDate = _o.SettlementEndDate == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SettlementEndDate, key) : _o.SettlementEndDate));
    var _LobbyTableBGPath = _o.LobbyTableBGPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LobbyTableBGPath, key) : _o.LobbyTableBGPath));
    var _LobbyScreenBGPath = _o.LobbyScreenBGPath == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LobbyScreenBGPath, key) : _o.LobbyScreenBGPath));
    var _OpenRaidBossGroup01 = _o.OpenRaidBossGroup01 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.OpenRaidBossGroup01, key) : _o.OpenRaidBossGroup01));
    var _OpenRaidBossGroup02 = _o.OpenRaidBossGroup02 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.OpenRaidBossGroup02, key) : _o.OpenRaidBossGroup02));
    var _OpenRaidBossGroup03 = _o.OpenRaidBossGroup03 == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.OpenRaidBossGroup03, key) : _o.OpenRaidBossGroup03));
		var _RankingRewardGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.RankingRewardGroupId, key) : _o.RankingRewardGroupId;
		var _MaxSeasonRewardGauage = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.MaxSeasonRewardGauage, key) : _o.MaxSeasonRewardGauage;
    var _StackedSeasonRewardGauge = default(VectorOffset);
    if (_o.StackedSeasonRewardGauge != null) {
      var __StackedSeasonRewardGauge = _o.StackedSeasonRewardGauge.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _StackedSeasonRewardGauge = CreateStackedSeasonRewardGaugeVector(builder, __StackedSeasonRewardGauge);
    }
    var _SeasonRewardId = default(VectorOffset);
    if (_o.SeasonRewardId != null) {
      var __SeasonRewardId = _o.SeasonRewardId.Select(x => TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)x, key) : x).ToArray();
      _SeasonRewardId = CreateSeasonRewardIdVector(builder, __SeasonRewardId);
    }
		var _LimitedRewardIdNormal = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LimitedRewardIdNormal, key) : _o.LimitedRewardIdNormal;
		var _LimitedRewardIdHard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LimitedRewardIdHard, key) : _o.LimitedRewardIdHard;
		var _LimitedRewardIdVeryhard = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LimitedRewardIdVeryhard, key) : _o.LimitedRewardIdVeryhard;
		var _LimitedRewardIdHardcore = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LimitedRewardIdHardcore, key) : _o.LimitedRewardIdHardcore;
		var _LimitedRewardIdExtreme = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LimitedRewardIdExtreme, key) : _o.LimitedRewardIdExtreme;
		var _LimitedRewardIdInsane = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LimitedRewardIdInsane, key) : _o.LimitedRewardIdInsane;
		var _LimitedRewardIdTorment = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.LimitedRewardIdTorment, key) : _o.LimitedRewardIdTorment;
    return CreateEliminateRaidSeasonManageExcel(
      builder,
      TableEncryptionService.UseEncryption ? _SeasonId : _o.SeasonId,
      TableEncryptionService.UseEncryption ? _SeasonDisplay : _o.SeasonDisplay,
      _SeasonStartData,
      _EndNoteLabelStartDate,
      _SeasonEndData,
      _SettlementEndDate,
      _LobbyTableBGPath,
      _LobbyScreenBGPath,
      _OpenRaidBossGroup01,
      _OpenRaidBossGroup02,
      _OpenRaidBossGroup03,
      TableEncryptionService.UseEncryption ? _RankingRewardGroupId : _o.RankingRewardGroupId,
      TableEncryptionService.UseEncryption ? _MaxSeasonRewardGauage : _o.MaxSeasonRewardGauage,
      _StackedSeasonRewardGauge,
      _SeasonRewardId,
      TableEncryptionService.UseEncryption ? _LimitedRewardIdNormal : _o.LimitedRewardIdNormal,
      TableEncryptionService.UseEncryption ? _LimitedRewardIdHard : _o.LimitedRewardIdHard,
      TableEncryptionService.UseEncryption ? _LimitedRewardIdVeryhard : _o.LimitedRewardIdVeryhard,
      TableEncryptionService.UseEncryption ? _LimitedRewardIdHardcore : _o.LimitedRewardIdHardcore,
      TableEncryptionService.UseEncryption ? _LimitedRewardIdExtreme : _o.LimitedRewardIdExtreme,
      TableEncryptionService.UseEncryption ? _LimitedRewardIdInsane : _o.LimitedRewardIdInsane,
      TableEncryptionService.UseEncryption ? _LimitedRewardIdTorment : _o.LimitedRewardIdTorment);
  }
}

public class EliminateRaidSeasonManageExcelT
{
  public long SeasonId { get; set; }
  public long SeasonDisplay { get; set; }
  public string SeasonStartData { get; set; }
  public string EndNoteLabelStartDate { get; set; }
  public string SeasonEndData { get; set; }
  public string SettlementEndDate { get; set; }
  public string LobbyTableBGPath { get; set; }
  public string LobbyScreenBGPath { get; set; }
  public string OpenRaidBossGroup01 { get; set; }
  public string OpenRaidBossGroup02 { get; set; }
  public string OpenRaidBossGroup03 { get; set; }
  public long RankingRewardGroupId { get; set; }
  public int MaxSeasonRewardGauage { get; set; }
  public List<long> StackedSeasonRewardGauge { get; set; }
  public List<long> SeasonRewardId { get; set; }
  public long LimitedRewardIdNormal { get; set; }
  public long LimitedRewardIdHard { get; set; }
  public long LimitedRewardIdVeryhard { get; set; }
  public long LimitedRewardIdHardcore { get; set; }
  public long LimitedRewardIdExtreme { get; set; }
  public long LimitedRewardIdInsane { get; set; }
  public long LimitedRewardIdTorment { get; set; }

  public EliminateRaidSeasonManageExcelT() {
    this.SeasonId = 0;
    this.SeasonDisplay = 0;
    this.SeasonStartData = null;
    this.EndNoteLabelStartDate = null;
    this.SeasonEndData = null;
    this.SettlementEndDate = null;
    this.LobbyTableBGPath = null;
    this.LobbyScreenBGPath = null;
    this.OpenRaidBossGroup01 = null;
    this.OpenRaidBossGroup02 = null;
    this.OpenRaidBossGroup03 = null;
    this.RankingRewardGroupId = 0;
    this.MaxSeasonRewardGauage = 0;
    this.StackedSeasonRewardGauge = null;
    this.SeasonRewardId = null;
    this.LimitedRewardIdNormal = 0;
    this.LimitedRewardIdHard = 0;
    this.LimitedRewardIdVeryhard = 0;
    this.LimitedRewardIdHardcore = 0;
    this.LimitedRewardIdExtreme = 0;
    this.LimitedRewardIdInsane = 0;
    this.LimitedRewardIdTorment = 0;
  }
}


static public class EliminateRaidSeasonManageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*SeasonDisplay*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*SeasonStartData*/, false)
      && verifier.VerifyString(tablePos, 10 /*EndNoteLabelStartDate*/, false)
      && verifier.VerifyString(tablePos, 12 /*SeasonEndData*/, false)
      && verifier.VerifyString(tablePos, 14 /*SettlementEndDate*/, false)
      && verifier.VerifyString(tablePos, 16 /*LobbyTableBGPath*/, false)
      && verifier.VerifyString(tablePos, 18 /*LobbyScreenBGPath*/, false)
      && verifier.VerifyString(tablePos, 20 /*OpenRaidBossGroup01*/, false)
      && verifier.VerifyString(tablePos, 22 /*OpenRaidBossGroup02*/, false)
      && verifier.VerifyString(tablePos, 24 /*OpenRaidBossGroup03*/, false)
      && verifier.VerifyField(tablePos, 26 /*RankingRewardGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*MaxSeasonRewardGauage*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 30 /*StackedSeasonRewardGauge*/, 8 /*long*/, false)
      && verifier.VerifyVectorOfData(tablePos, 32 /*SeasonRewardId*/, 8 /*long*/, false)
      && verifier.VerifyField(tablePos, 34 /*LimitedRewardIdNormal*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*LimitedRewardIdHard*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*LimitedRewardIdVeryhard*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*LimitedRewardIdHardcore*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*LimitedRewardIdExtreme*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*LimitedRewardIdInsane*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*LimitedRewardIdTorment*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
