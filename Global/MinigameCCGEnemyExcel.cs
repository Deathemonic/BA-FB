// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct MinigameCCGEnemyExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MinigameCCGEnemyExcel GetRootAsMinigameCCGEnemyExcel(ByteBuffer _bb) { return GetRootAsMinigameCCGEnemyExcel(_bb, new MinigameCCGEnemyExcel()); }
  public static MinigameCCGEnemyExcel GetRootAsMinigameCCGEnemyExcel(ByteBuffer _bb, MinigameCCGEnemyExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MinigameCCGEnemyExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long GroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.CCGCharacterType CharacterType { get { int o = __p.__offset(8); return o != 0 ? (Global.CCGCharacterType)__p.bb.GetInt(o + __p.bb_pos) : Global.CCGCharacterType.None; } }
  public int Order { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long CharacterId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Global.MinigameCCGEnemyExcel> CreateMinigameCCGEnemyExcel(FlatBufferBuilder builder,
      long Id = 0,
      long GroupId = 0,
      Global.CCGCharacterType CharacterType = Global.CCGCharacterType.None,
      int Order = 0,
      long CharacterId = 0) {
    builder.StartTable(5);
    MinigameCCGEnemyExcel.AddCharacterId(builder, CharacterId);
    MinigameCCGEnemyExcel.AddGroupId(builder, GroupId);
    MinigameCCGEnemyExcel.AddId(builder, Id);
    MinigameCCGEnemyExcel.AddOrder(builder, Order);
    MinigameCCGEnemyExcel.AddCharacterType(builder, CharacterType);
    return MinigameCCGEnemyExcel.EndMinigameCCGEnemyExcel(builder);
  }

  public static void StartMinigameCCGEnemyExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(1, groupId, 0); }
  public static void AddCharacterType(FlatBufferBuilder builder, Global.CCGCharacterType characterType) { builder.AddInt(2, (int)characterType, 0); }
  public static void AddOrder(FlatBufferBuilder builder, int order) { builder.AddInt(3, order, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(4, characterId, 0); }
  public static Offset<Global.MinigameCCGEnemyExcel> EndMinigameCCGEnemyExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.MinigameCCGEnemyExcel>(o);
  }
  public MinigameCCGEnemyExcelT UnPack() {
    var _o = new MinigameCCGEnemyExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MinigameCCGEnemyExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGEnemy");
    _o.Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Id, key) : this.Id;
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.CharacterType = TableEncryptionService.UseEncryption ? (Global.CCGCharacterType)TableEncryptionService.Convert((int)this.CharacterType, key) : this.CharacterType;
    _o.Order = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.Order, key) : this.Order;
    _o.CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.CharacterId, key) : this.CharacterId;
  }
  public static Offset<Global.MinigameCCGEnemyExcel> Pack(FlatBufferBuilder builder, MinigameCCGEnemyExcelT _o) {
    if (_o == null) return default(Offset<Global.MinigameCCGEnemyExcel>);
		byte[] key = TableEncryptionService.CreateKey("MinigameCCGEnemy");
		var _Id = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Id, key) : _o.Id;
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _CharacterType = TableEncryptionService.UseEncryption ? (Global.CCGCharacterType)TableEncryptionService.Convert((int)_o.CharacterType, key) : _o.CharacterType;
		var _Order = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.Order, key) : _o.Order;
		var _CharacterId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.CharacterId, key) : _o.CharacterId;
    return CreateMinigameCCGEnemyExcel(
      builder,
      TableEncryptionService.UseEncryption ? _Id : _o.Id,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _CharacterType : _o.CharacterType,
      TableEncryptionService.UseEncryption ? _Order : _o.Order,
      TableEncryptionService.UseEncryption ? _CharacterId : _o.CharacterId);
  }
}

public class MinigameCCGEnemyExcelT
{
  public long Id { get; set; }
  public long GroupId { get; set; }
  public Global.CCGCharacterType CharacterType { get; set; }
  public int Order { get; set; }
  public long CharacterId { get; set; }

  public MinigameCCGEnemyExcelT() {
    this.Id = 0;
    this.GroupId = 0;
    this.CharacterType = Global.CCGCharacterType.None;
    this.Order = 0;
    this.CharacterId = 0;
  }
}


static public class MinigameCCGEnemyExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CharacterType*/, 4 /*Global.CCGCharacterType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Order*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
