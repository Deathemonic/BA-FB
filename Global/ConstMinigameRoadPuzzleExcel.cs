// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConstMinigameRoadPuzzleExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConstMinigameRoadPuzzleExcel GetRootAsConstMinigameRoadPuzzleExcel(ByteBuffer _bb) { return GetRootAsConstMinigameRoadPuzzleExcel(_bb, new ConstMinigameRoadPuzzleExcel()); }
  public static ConstMinigameRoadPuzzleExcel GetRootAsConstMinigameRoadPuzzleExcel(ByteBuffer _bb, ConstMinigameRoadPuzzleExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstMinigameRoadPuzzleExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float RoadPuzzleMapBoundaryOffsetLeft { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RoadPuzzleMapBoundaryOffsetRight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RoadPuzzleMapBoundaryOffsetTop { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RoadPuzzleMapBoundaryOffsetBottom { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RoadPuzzleMapCenterOffsetX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RoadPuzzleMapCenterOffsetY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraAngle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMax { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMin { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomDefault { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float StageLoadingProgressTime { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int TileRotationDegree { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StartStageIndex { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LoopStageIndex { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Global.ConstMinigameRoadPuzzleExcel> CreateConstMinigameRoadPuzzleExcel(FlatBufferBuilder builder,
      float RoadPuzzleMapBoundaryOffsetLeft = 0.0f,
      float RoadPuzzleMapBoundaryOffsetRight = 0.0f,
      float RoadPuzzleMapBoundaryOffsetTop = 0.0f,
      float RoadPuzzleMapBoundaryOffsetBottom = 0.0f,
      float RoadPuzzleMapCenterOffsetX = 0.0f,
      float RoadPuzzleMapCenterOffsetY = 0.0f,
      float CameraAngle = 0.0f,
      float CameraZoomMax = 0.0f,
      float CameraZoomMin = 0.0f,
      float CameraZoomDefault = 0.0f,
      float StageLoadingProgressTime = 0.0f,
      int TileRotationDegree = 0,
      int StartStageIndex = 0,
      int LoopStageIndex = 0) {
    builder.StartTable(14);
    ConstMinigameRoadPuzzleExcel.AddLoopStageIndex(builder, LoopStageIndex);
    ConstMinigameRoadPuzzleExcel.AddStartStageIndex(builder, StartStageIndex);
    ConstMinigameRoadPuzzleExcel.AddTileRotationDegree(builder, TileRotationDegree);
    ConstMinigameRoadPuzzleExcel.AddStageLoadingProgressTime(builder, StageLoadingProgressTime);
    ConstMinigameRoadPuzzleExcel.AddCameraZoomDefault(builder, CameraZoomDefault);
    ConstMinigameRoadPuzzleExcel.AddCameraZoomMin(builder, CameraZoomMin);
    ConstMinigameRoadPuzzleExcel.AddCameraZoomMax(builder, CameraZoomMax);
    ConstMinigameRoadPuzzleExcel.AddCameraAngle(builder, CameraAngle);
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapCenterOffsetY(builder, RoadPuzzleMapCenterOffsetY);
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapCenterOffsetX(builder, RoadPuzzleMapCenterOffsetX);
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetBottom(builder, RoadPuzzleMapBoundaryOffsetBottom);
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetTop(builder, RoadPuzzleMapBoundaryOffsetTop);
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetRight(builder, RoadPuzzleMapBoundaryOffsetRight);
    ConstMinigameRoadPuzzleExcel.AddRoadPuzzleMapBoundaryOffsetLeft(builder, RoadPuzzleMapBoundaryOffsetLeft);
    return ConstMinigameRoadPuzzleExcel.EndConstMinigameRoadPuzzleExcel(builder);
  }

  public static void StartConstMinigameRoadPuzzleExcel(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddRoadPuzzleMapBoundaryOffsetLeft(FlatBufferBuilder builder, float roadPuzzleMapBoundaryOffsetLeft) { builder.AddFloat(0, roadPuzzleMapBoundaryOffsetLeft, 0.0f); }
  public static void AddRoadPuzzleMapBoundaryOffsetRight(FlatBufferBuilder builder, float roadPuzzleMapBoundaryOffsetRight) { builder.AddFloat(1, roadPuzzleMapBoundaryOffsetRight, 0.0f); }
  public static void AddRoadPuzzleMapBoundaryOffsetTop(FlatBufferBuilder builder, float roadPuzzleMapBoundaryOffsetTop) { builder.AddFloat(2, roadPuzzleMapBoundaryOffsetTop, 0.0f); }
  public static void AddRoadPuzzleMapBoundaryOffsetBottom(FlatBufferBuilder builder, float roadPuzzleMapBoundaryOffsetBottom) { builder.AddFloat(3, roadPuzzleMapBoundaryOffsetBottom, 0.0f); }
  public static void AddRoadPuzzleMapCenterOffsetX(FlatBufferBuilder builder, float roadPuzzleMapCenterOffsetX) { builder.AddFloat(4, roadPuzzleMapCenterOffsetX, 0.0f); }
  public static void AddRoadPuzzleMapCenterOffsetY(FlatBufferBuilder builder, float roadPuzzleMapCenterOffsetY) { builder.AddFloat(5, roadPuzzleMapCenterOffsetY, 0.0f); }
  public static void AddCameraAngle(FlatBufferBuilder builder, float cameraAngle) { builder.AddFloat(6, cameraAngle, 0.0f); }
  public static void AddCameraZoomMax(FlatBufferBuilder builder, float cameraZoomMax) { builder.AddFloat(7, cameraZoomMax, 0.0f); }
  public static void AddCameraZoomMin(FlatBufferBuilder builder, float cameraZoomMin) { builder.AddFloat(8, cameraZoomMin, 0.0f); }
  public static void AddCameraZoomDefault(FlatBufferBuilder builder, float cameraZoomDefault) { builder.AddFloat(9, cameraZoomDefault, 0.0f); }
  public static void AddStageLoadingProgressTime(FlatBufferBuilder builder, float stageLoadingProgressTime) { builder.AddFloat(10, stageLoadingProgressTime, 0.0f); }
  public static void AddTileRotationDegree(FlatBufferBuilder builder, int tileRotationDegree) { builder.AddInt(11, tileRotationDegree, 0); }
  public static void AddStartStageIndex(FlatBufferBuilder builder, int startStageIndex) { builder.AddInt(12, startStageIndex, 0); }
  public static void AddLoopStageIndex(FlatBufferBuilder builder, int loopStageIndex) { builder.AddInt(13, loopStageIndex, 0); }
  public static Offset<Global.ConstMinigameRoadPuzzleExcel> EndConstMinigameRoadPuzzleExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ConstMinigameRoadPuzzleExcel>(o);
  }
  public ConstMinigameRoadPuzzleExcelT UnPack() {
    var _o = new ConstMinigameRoadPuzzleExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstMinigameRoadPuzzleExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConstMinigameRoadPuzzle");
    _o.RoadPuzzleMapBoundaryOffsetLeft = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RoadPuzzleMapBoundaryOffsetLeft, key) : this.RoadPuzzleMapBoundaryOffsetLeft;
    _o.RoadPuzzleMapBoundaryOffsetRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RoadPuzzleMapBoundaryOffsetRight, key) : this.RoadPuzzleMapBoundaryOffsetRight;
    _o.RoadPuzzleMapBoundaryOffsetTop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RoadPuzzleMapBoundaryOffsetTop, key) : this.RoadPuzzleMapBoundaryOffsetTop;
    _o.RoadPuzzleMapBoundaryOffsetBottom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RoadPuzzleMapBoundaryOffsetBottom, key) : this.RoadPuzzleMapBoundaryOffsetBottom;
    _o.RoadPuzzleMapCenterOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RoadPuzzleMapCenterOffsetX, key) : this.RoadPuzzleMapCenterOffsetX;
    _o.RoadPuzzleMapCenterOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.RoadPuzzleMapCenterOffsetY, key) : this.RoadPuzzleMapCenterOffsetY;
    _o.CameraAngle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraAngle, key) : this.CameraAngle;
    _o.CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMax, key) : this.CameraZoomMax;
    _o.CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomMin, key) : this.CameraZoomMin;
    _o.CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.CameraZoomDefault, key) : this.CameraZoomDefault;
    _o.StageLoadingProgressTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)this.StageLoadingProgressTime, key) : this.StageLoadingProgressTime;
    _o.TileRotationDegree = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.TileRotationDegree, key) : this.TileRotationDegree;
    _o.StartStageIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.StartStageIndex, key) : this.StartStageIndex;
    _o.LoopStageIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.LoopStageIndex, key) : this.LoopStageIndex;
  }
  public static Offset<Global.ConstMinigameRoadPuzzleExcel> Pack(FlatBufferBuilder builder, ConstMinigameRoadPuzzleExcelT _o) {
    if (_o == null) return default(Offset<Global.ConstMinigameRoadPuzzleExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConstMinigameRoadPuzzle");
		var _RoadPuzzleMapBoundaryOffsetLeft = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RoadPuzzleMapBoundaryOffsetLeft, key) : _o.RoadPuzzleMapBoundaryOffsetLeft;
		var _RoadPuzzleMapBoundaryOffsetRight = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RoadPuzzleMapBoundaryOffsetRight, key) : _o.RoadPuzzleMapBoundaryOffsetRight;
		var _RoadPuzzleMapBoundaryOffsetTop = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RoadPuzzleMapBoundaryOffsetTop, key) : _o.RoadPuzzleMapBoundaryOffsetTop;
		var _RoadPuzzleMapBoundaryOffsetBottom = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RoadPuzzleMapBoundaryOffsetBottom, key) : _o.RoadPuzzleMapBoundaryOffsetBottom;
		var _RoadPuzzleMapCenterOffsetX = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RoadPuzzleMapCenterOffsetX, key) : _o.RoadPuzzleMapCenterOffsetX;
		var _RoadPuzzleMapCenterOffsetY = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.RoadPuzzleMapCenterOffsetY, key) : _o.RoadPuzzleMapCenterOffsetY;
		var _CameraAngle = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraAngle, key) : _o.CameraAngle;
		var _CameraZoomMax = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMax, key) : _o.CameraZoomMax;
		var _CameraZoomMin = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomMin, key) : _o.CameraZoomMin;
		var _CameraZoomDefault = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.CameraZoomDefault, key) : _o.CameraZoomDefault;
		var _StageLoadingProgressTime = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((float)_o.StageLoadingProgressTime, key) : _o.StageLoadingProgressTime;
		var _TileRotationDegree = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.TileRotationDegree, key) : _o.TileRotationDegree;
		var _StartStageIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.StartStageIndex, key) : _o.StartStageIndex;
		var _LoopStageIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.LoopStageIndex, key) : _o.LoopStageIndex;
    return CreateConstMinigameRoadPuzzleExcel(
      builder,
      TableEncryptionService.UseEncryption ? _RoadPuzzleMapBoundaryOffsetLeft : _o.RoadPuzzleMapBoundaryOffsetLeft,
      TableEncryptionService.UseEncryption ? _RoadPuzzleMapBoundaryOffsetRight : _o.RoadPuzzleMapBoundaryOffsetRight,
      TableEncryptionService.UseEncryption ? _RoadPuzzleMapBoundaryOffsetTop : _o.RoadPuzzleMapBoundaryOffsetTop,
      TableEncryptionService.UseEncryption ? _RoadPuzzleMapBoundaryOffsetBottom : _o.RoadPuzzleMapBoundaryOffsetBottom,
      TableEncryptionService.UseEncryption ? _RoadPuzzleMapCenterOffsetX : _o.RoadPuzzleMapCenterOffsetX,
      TableEncryptionService.UseEncryption ? _RoadPuzzleMapCenterOffsetY : _o.RoadPuzzleMapCenterOffsetY,
      TableEncryptionService.UseEncryption ? _CameraAngle : _o.CameraAngle,
      TableEncryptionService.UseEncryption ? _CameraZoomMax : _o.CameraZoomMax,
      TableEncryptionService.UseEncryption ? _CameraZoomMin : _o.CameraZoomMin,
      TableEncryptionService.UseEncryption ? _CameraZoomDefault : _o.CameraZoomDefault,
      TableEncryptionService.UseEncryption ? _StageLoadingProgressTime : _o.StageLoadingProgressTime,
      TableEncryptionService.UseEncryption ? _TileRotationDegree : _o.TileRotationDegree,
      TableEncryptionService.UseEncryption ? _StartStageIndex : _o.StartStageIndex,
      TableEncryptionService.UseEncryption ? _LoopStageIndex : _o.LoopStageIndex);
  }
}

public class ConstMinigameRoadPuzzleExcelT
{
  public float RoadPuzzleMapBoundaryOffsetLeft { get; set; }
  public float RoadPuzzleMapBoundaryOffsetRight { get; set; }
  public float RoadPuzzleMapBoundaryOffsetTop { get; set; }
  public float RoadPuzzleMapBoundaryOffsetBottom { get; set; }
  public float RoadPuzzleMapCenterOffsetX { get; set; }
  public float RoadPuzzleMapCenterOffsetY { get; set; }
  public float CameraAngle { get; set; }
  public float CameraZoomMax { get; set; }
  public float CameraZoomMin { get; set; }
  public float CameraZoomDefault { get; set; }
  public float StageLoadingProgressTime { get; set; }
  public int TileRotationDegree { get; set; }
  public int StartStageIndex { get; set; }
  public int LoopStageIndex { get; set; }

  public ConstMinigameRoadPuzzleExcelT() {
    this.RoadPuzzleMapBoundaryOffsetLeft = 0.0f;
    this.RoadPuzzleMapBoundaryOffsetRight = 0.0f;
    this.RoadPuzzleMapBoundaryOffsetTop = 0.0f;
    this.RoadPuzzleMapBoundaryOffsetBottom = 0.0f;
    this.RoadPuzzleMapCenterOffsetX = 0.0f;
    this.RoadPuzzleMapCenterOffsetY = 0.0f;
    this.CameraAngle = 0.0f;
    this.CameraZoomMax = 0.0f;
    this.CameraZoomMin = 0.0f;
    this.CameraZoomDefault = 0.0f;
    this.StageLoadingProgressTime = 0.0f;
    this.TileRotationDegree = 0;
    this.StartStageIndex = 0;
    this.LoopStageIndex = 0;
  }
}


static public class ConstMinigameRoadPuzzleExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*RoadPuzzleMapBoundaryOffsetLeft*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*RoadPuzzleMapBoundaryOffsetRight*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RoadPuzzleMapBoundaryOffsetTop*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*RoadPuzzleMapBoundaryOffsetBottom*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*RoadPuzzleMapCenterOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*RoadPuzzleMapCenterOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*CameraAngle*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*CameraZoomMax*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*CameraZoomMin*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*CameraZoomDefault*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*StageLoadingProgressTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*TileRotationDegree*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*StartStageIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*LoopStageIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
