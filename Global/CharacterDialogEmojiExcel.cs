// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct CharacterDialogEmojiExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static CharacterDialogEmojiExcel GetRootAsCharacterDialogEmojiExcel(ByteBuffer _bb) { return GetRootAsCharacterDialogEmojiExcel(_bb, new CharacterDialogEmojiExcel()); }
  public static CharacterDialogEmojiExcel GetRootAsCharacterDialogEmojiExcel(ByteBuffer _bb, CharacterDialogEmojiExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterDialogEmojiExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int TargetIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DialogType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDialogTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDialogTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDialogTypeArray() { return __p.__vector_as_array<byte>(8); }
  public long Duration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DurationKr { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool HideUI { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LocalizeKR { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeKRBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLocalizeKRBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLocalizeKRArray() { return __p.__vector_as_array<byte>(16); }
  public string LocalizeJP { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeJPBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLocalizeJPBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLocalizeJPArray() { return __p.__vector_as_array<byte>(18); }
  public string LocalizeTH { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeTHBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetLocalizeTHBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetLocalizeTHArray() { return __p.__vector_as_array<byte>(20); }
  public string LocalizeTW { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeTWBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetLocalizeTWBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetLocalizeTWArray() { return __p.__vector_as_array<byte>(22); }
  public string LocalizeEN { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeENBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLocalizeENBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLocalizeENArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<Global.CharacterDialogEmojiExcel> CreateCharacterDialogEmojiExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      int TargetIndex = 0,
      StringOffset DialogTypeOffset = default(StringOffset),
      long Duration = 0,
      long DurationKr = 0,
      bool HideUI = false,
      StringOffset LocalizeKROffset = default(StringOffset),
      StringOffset LocalizeJPOffset = default(StringOffset),
      StringOffset LocalizeTHOffset = default(StringOffset),
      StringOffset LocalizeTWOffset = default(StringOffset),
      StringOffset LocalizeENOffset = default(StringOffset)) {
    builder.StartTable(11);
    CharacterDialogEmojiExcel.AddDurationKr(builder, DurationKr);
    CharacterDialogEmojiExcel.AddDuration(builder, Duration);
    CharacterDialogEmojiExcel.AddGroupId(builder, GroupId);
    CharacterDialogEmojiExcel.AddLocalizeEN(builder, LocalizeENOffset);
    CharacterDialogEmojiExcel.AddLocalizeTW(builder, LocalizeTWOffset);
    CharacterDialogEmojiExcel.AddLocalizeTH(builder, LocalizeTHOffset);
    CharacterDialogEmojiExcel.AddLocalizeJP(builder, LocalizeJPOffset);
    CharacterDialogEmojiExcel.AddLocalizeKR(builder, LocalizeKROffset);
    CharacterDialogEmojiExcel.AddDialogType(builder, DialogTypeOffset);
    CharacterDialogEmojiExcel.AddTargetIndex(builder, TargetIndex);
    CharacterDialogEmojiExcel.AddHideUI(builder, HideUI);
    return CharacterDialogEmojiExcel.EndCharacterDialogEmojiExcel(builder);
  }

  public static void StartCharacterDialogEmojiExcel(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddTargetIndex(FlatBufferBuilder builder, int targetIndex) { builder.AddInt(1, targetIndex, 0); }
  public static void AddDialogType(FlatBufferBuilder builder, StringOffset dialogTypeOffset) { builder.AddOffset(2, dialogTypeOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, long duration) { builder.AddLong(3, duration, 0); }
  public static void AddDurationKr(FlatBufferBuilder builder, long durationKr) { builder.AddLong(4, durationKr, 0); }
  public static void AddHideUI(FlatBufferBuilder builder, bool hideUI) { builder.AddBool(5, hideUI, false); }
  public static void AddLocalizeKR(FlatBufferBuilder builder, StringOffset localizeKROffset) { builder.AddOffset(6, localizeKROffset.Value, 0); }
  public static void AddLocalizeJP(FlatBufferBuilder builder, StringOffset localizeJPOffset) { builder.AddOffset(7, localizeJPOffset.Value, 0); }
  public static void AddLocalizeTH(FlatBufferBuilder builder, StringOffset localizeTHOffset) { builder.AddOffset(8, localizeTHOffset.Value, 0); }
  public static void AddLocalizeTW(FlatBufferBuilder builder, StringOffset localizeTWOffset) { builder.AddOffset(9, localizeTWOffset.Value, 0); }
  public static void AddLocalizeEN(FlatBufferBuilder builder, StringOffset localizeENOffset) { builder.AddOffset(10, localizeENOffset.Value, 0); }
  public static Offset<Global.CharacterDialogEmojiExcel> EndCharacterDialogEmojiExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.CharacterDialogEmojiExcel>(o);
  }
  public CharacterDialogEmojiExcelT UnPack() {
    var _o = new CharacterDialogEmojiExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterDialogEmojiExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterDialogEmoji");
    _o.GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.GroupId, key) : this.GroupId;
    _o.TargetIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)this.TargetIndex, key) : this.TargetIndex;
    _o.DialogType = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.DialogType, key) : this.DialogType;
    _o.Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.Duration, key) : this.Duration;
    _o.DurationKr = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.DurationKr, key) : this.DurationKr;
    _o.HideUI = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)this.HideUI, key) : this.HideUI;
    _o.LocalizeKR = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeKR, key) : this.LocalizeKR;
    _o.LocalizeJP = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeJP, key) : this.LocalizeJP;
    _o.LocalizeTH = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeTH, key) : this.LocalizeTH;
    _o.LocalizeTW = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeTW, key) : this.LocalizeTW;
    _o.LocalizeEN = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.LocalizeEN, key) : this.LocalizeEN;
  }
  public static Offset<Global.CharacterDialogEmojiExcel> Pack(FlatBufferBuilder builder, CharacterDialogEmojiExcelT _o) {
    if (_o == null) return default(Offset<Global.CharacterDialogEmojiExcel>);
		byte[] key = TableEncryptionService.CreateKey("CharacterDialogEmoji");
		var _GroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.GroupId, key) : _o.GroupId;
		var _TargetIndex = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((int)_o.TargetIndex, key) : _o.TargetIndex;
    var _DialogType = _o.DialogType == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.DialogType, key) : _o.DialogType));
		var _Duration = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.Duration, key) : _o.Duration;
		var _DurationKr = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.DurationKr, key) : _o.DurationKr;
		var _HideUI = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((bool)_o.HideUI, key) : _o.HideUI;
    var _LocalizeKR = _o.LocalizeKR == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeKR, key) : _o.LocalizeKR));
    var _LocalizeJP = _o.LocalizeJP == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeJP, key) : _o.LocalizeJP));
    var _LocalizeTH = _o.LocalizeTH == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeTH, key) : _o.LocalizeTH));
    var _LocalizeTW = _o.LocalizeTW == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeTW, key) : _o.LocalizeTW));
    var _LocalizeEN = _o.LocalizeEN == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.LocalizeEN, key) : _o.LocalizeEN));
    return CreateCharacterDialogEmojiExcel(
      builder,
      TableEncryptionService.UseEncryption ? _GroupId : _o.GroupId,
      TableEncryptionService.UseEncryption ? _TargetIndex : _o.TargetIndex,
      _DialogType,
      TableEncryptionService.UseEncryption ? _Duration : _o.Duration,
      TableEncryptionService.UseEncryption ? _DurationKr : _o.DurationKr,
      TableEncryptionService.UseEncryption ? _HideUI : _o.HideUI,
      _LocalizeKR,
      _LocalizeJP,
      _LocalizeTH,
      _LocalizeTW,
      _LocalizeEN);
  }
}

public class CharacterDialogEmojiExcelT
{
  public long GroupId { get; set; }
  public int TargetIndex { get; set; }
  public string DialogType { get; set; }
  public long Duration { get; set; }
  public long DurationKr { get; set; }
  public bool HideUI { get; set; }
  public string LocalizeKR { get; set; }
  public string LocalizeJP { get; set; }
  public string LocalizeTH { get; set; }
  public string LocalizeTW { get; set; }
  public string LocalizeEN { get; set; }

  public CharacterDialogEmojiExcelT() {
    this.GroupId = 0;
    this.TargetIndex = 0;
    this.DialogType = null;
    this.Duration = 0;
    this.DurationKr = 0;
    this.HideUI = false;
    this.LocalizeKR = null;
    this.LocalizeJP = null;
    this.LocalizeTH = null;
    this.LocalizeTW = null;
    this.LocalizeEN = null;
  }
}


static public class CharacterDialogEmojiExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TargetIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*DialogType*/, false)
      && verifier.VerifyField(tablePos, 10 /*Duration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*DurationKr*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*HideUI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*LocalizeKR*/, false)
      && verifier.VerifyString(tablePos, 18 /*LocalizeJP*/, false)
      && verifier.VerifyString(tablePos, 20 /*LocalizeTH*/, false)
      && verifier.VerifyString(tablePos, 22 /*LocalizeTW*/, false)
      && verifier.VerifyString(tablePos, 24 /*LocalizeEN*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
