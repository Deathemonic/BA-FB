// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Global
{

using global::System;
using global::System.Collections.Generic;
using global::Kuroko.Crypto;
using global::Google.FlatBuffers;

public struct ConquestGroupBuffExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConquestGroupBuffExcel GetRootAsConquestGroupBuffExcel(ByteBuffer _bb) { return GetRootAsConquestGroupBuffExcel(_bb, new ConquestGroupBuffExcel()); }
  public static ConquestGroupBuffExcel GetRootAsConquestGroupBuffExcel(ByteBuffer _bb, ConquestGroupBuffExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConquestGroupBuffExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ConquestBuffId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Global.School School(int j) { int o = __p.__offset(6); return o != 0 ? (Global.School)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Global.School)0; }
  public int SchoolLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Global.School> GetSchoolBytes() { return __p.__vector_as_span<Global.School>(6, 4); }
#else
  public ArraySegment<byte>? GetSchoolBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Global.School[] GetSchoolArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Global.School[] a = new Global.School[l]; for (int i = 0; i < l; i++) { a[i] = (Global.School)__p.bb.GetInt(p + i * 4); } return a; }
  public uint RecommandLocalizeEtcId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string SkillGroupId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillGroupIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSkillGroupIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSkillGroupIdArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<Global.ConquestGroupBuffExcel> CreateConquestGroupBuffExcel(FlatBufferBuilder builder,
      long ConquestBuffId = 0,
      VectorOffset SchoolOffset = default(VectorOffset),
      uint RecommandLocalizeEtcId = 0,
      StringOffset SkillGroupIdOffset = default(StringOffset)) {
    builder.StartTable(4);
    ConquestGroupBuffExcel.AddConquestBuffId(builder, ConquestBuffId);
    ConquestGroupBuffExcel.AddSkillGroupId(builder, SkillGroupIdOffset);
    ConquestGroupBuffExcel.AddRecommandLocalizeEtcId(builder, RecommandLocalizeEtcId);
    ConquestGroupBuffExcel.AddSchool(builder, SchoolOffset);
    return ConquestGroupBuffExcel.EndConquestGroupBuffExcel(builder);
  }

  public static void StartConquestGroupBuffExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddConquestBuffId(FlatBufferBuilder builder, long conquestBuffId) { builder.AddLong(0, conquestBuffId, 0); }
  public static void AddSchool(FlatBufferBuilder builder, VectorOffset schoolOffset) { builder.AddOffset(1, schoolOffset.Value, 0); }
  public static VectorOffset CreateSchoolVector(FlatBufferBuilder builder, Global.School[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSchoolVectorBlock(FlatBufferBuilder builder, Global.School[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSchoolVectorBlock(FlatBufferBuilder builder, ArraySegment<Global.School> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSchoolVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Global.School>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSchoolVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRecommandLocalizeEtcId(FlatBufferBuilder builder, uint recommandLocalizeEtcId) { builder.AddUint(2, recommandLocalizeEtcId, 0); }
  public static void AddSkillGroupId(FlatBufferBuilder builder, StringOffset skillGroupIdOffset) { builder.AddOffset(3, skillGroupIdOffset.Value, 0); }
  public static Offset<Global.ConquestGroupBuffExcel> EndConquestGroupBuffExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Global.ConquestGroupBuffExcel>(o);
  }
  public ConquestGroupBuffExcelT UnPack() {
    var _o = new ConquestGroupBuffExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConquestGroupBuffExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ConquestGroupBuff");
    _o.ConquestBuffId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)this.ConquestBuffId, key) : this.ConquestBuffId;
    _o.School = new List<Global.School>();
    for (var _j = 0; _j < this.SchoolLength; ++_j) {_o.School.Add(TableEncryptionService.UseEncryption ? (Global.School)TableEncryptionService.Convert((int)this.School(_j), key) : this.School(_j));}
    _o.RecommandLocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)this.RecommandLocalizeEtcId, key) : this.RecommandLocalizeEtcId;
    _o.SkillGroupId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert(this.SkillGroupId, key) : this.SkillGroupId;
  }
  public static Offset<Global.ConquestGroupBuffExcel> Pack(FlatBufferBuilder builder, ConquestGroupBuffExcelT _o) {
    if (_o == null) return default(Offset<Global.ConquestGroupBuffExcel>);
		byte[] key = TableEncryptionService.CreateKey("ConquestGroupBuff");
		var _ConquestBuffId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((long)_o.ConquestBuffId, key) : _o.ConquestBuffId;
    var _School = default(VectorOffset);
    if (_o.School != null) {
      var __School = _o.School.Select(x => TableEncryptionService.UseEncryption ? (Global.School)TableEncryptionService.Convert((int)x, key) : x).ToArray();
      _School = CreateSchoolVector(builder, __School);
    }
		var _RecommandLocalizeEtcId = TableEncryptionService.UseEncryption ? TableEncryptionService.Convert((uint)_o.RecommandLocalizeEtcId, key) : _o.RecommandLocalizeEtcId;
    var _SkillGroupId = _o.SkillGroupId == null ? default(StringOffset) : builder.CreateString((TableEncryptionService.UseEncryption ? TableEncryptionService.ConvertPack((string)_o.SkillGroupId, key) : _o.SkillGroupId));
    return CreateConquestGroupBuffExcel(
      builder,
      TableEncryptionService.UseEncryption ? _ConquestBuffId : _o.ConquestBuffId,
      _School,
      TableEncryptionService.UseEncryption ? _RecommandLocalizeEtcId : _o.RecommandLocalizeEtcId,
      _SkillGroupId);
  }
}

public class ConquestGroupBuffExcelT
{
  public long ConquestBuffId { get; set; }
  public List<Global.School> School { get; set; }
  public uint RecommandLocalizeEtcId { get; set; }
  public string SkillGroupId { get; set; }

  public ConquestGroupBuffExcelT() {
    this.ConquestBuffId = 0;
    this.School = null;
    this.RecommandLocalizeEtcId = 0;
    this.SkillGroupId = null;
  }
}


static public class ConquestGroupBuffExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ConquestBuffId*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*School*/, 4 /*Global.School*/, false)
      && verifier.VerifyField(tablePos, 8 /*RecommandLocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*SkillGroupId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
