name: Dump Data

on:
  schedule:
    - cron: '0 3 * * 2,4'
    - cron: '0 5 * * 2,4'
    - cron: '0 7 * * 2,4'
    - cron: '0 9 * * 2,4'
  
  workflow_dispatch:

jobs:
  dump-data:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Download latest release
        run: |
          Invoke-WebRequest -Uri "https://github.com/Deathemonic/BA-FB/releases/latest/download/bafb-windows-x86_64.zip" -OutFile "bafb-windows-x86_64.zip"

      - name: Extract executable
        run: |
          Expand-Archive -Path "bafb-windows-x86_64.zip" -DestinationPath "."

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Switch to data branch
        run: |
          git checkout -B data

      - name: Setup Git LFS
        run: |
          git lfs install
          
          git lfs track "*.json"
          git lfs track "*.h"
          git lfs track "*.cpp"
          git lfs track "*.c"
          git lfs track "*.hpp"
          git lfs track "*.zip"
          git lfs track "*.bin"
          git lfs track "*.dat"
          git lfs track "*.db"
          git lfs track "*.txt"
          
          # Find large files and track them with LFS
          Get-ChildItem -Recurse -File | Where-Object { 
            $_.Length -gt 50MB -and 
            $_.FullName -notlike "*\.git\*" -and 
            $_.Name -ne "bafb.exe" -and 
            $_.Name -notlike "*.zip" 
          } | ForEach-Object {
            Write-Host "Tracking large file: $($_.FullName)"
            git lfs track "$($_.FullName)"
          }
          
          git add .gitattributes
          
          $staged = git diff --staged --quiet
          if ($LASTEXITCODE -ne 0) {
            git commit -m "Add Git LFS tracking for large files"
          }

      - name: Clean previous data
        run: |
          Remove-Item -Path "Japan", "Global" -Recurse -Force -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -File | Where-Object { 
            $_.FullName -notlike "*\.git\*" -and 
            $_.Name -ne "bafb.exe" -and 
            $_.Name -notlike "*.zip" -and 
            $_.Name -ne ".gitattributes" 
          } | Remove-Item -Force
          Get-ChildItem -Recurse -Directory | Where-Object { 
            $_.FullName -notlike "*\.git\*" -and 
            $_.Name -ne "bafb.exe" -and 
            (Get-ChildItem $_.FullName -Force | Measure-Object).Count -eq 0 
          } | Remove-Item -Force -ErrorAction SilentlyContinue

      - name: Run Japan dump
        timeout-minutes: 10
        run: |
          .\bafb.exe dump japan --output .\Japan

      - name: Run Global dump
        timeout-minutes: 10
        run: |
          .\bafb.exe dump global --output .\Global

      - name: Clean up executable and zip file
        run: |
          Remove-Item -Path "bafb.exe", "bafb-windows-x86_64.zip" -ErrorAction SilentlyContinue

      - name: Check for large files and update LFS tracking
        run: |
          $largeFiles = Get-ChildItem -Path "Japan", "Global" -Recurse -File -ErrorAction SilentlyContinue | Where-Object { $_.Length -gt 50MB }
          
          if ($largeFiles) {
            foreach ($file in $largeFiles) {
              git lfs track "$($file.FullName)"
            }
            
            git add .gitattributes
            $staged = git diff --staged --quiet .gitattributes
            if ($LASTEXITCODE -ne 0) {
              git commit -m "Update LFS tracking for new large files"
            }
          }

      - name: Add and commit changes with LFS
        run: |
          git add .
          $staged = git diff --staged --quiet
          if ($LASTEXITCODE -eq 0) {
            exit 0
          }
          
          $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          git commit -m "Update data dumps - $timestamp"
          git push origin data --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}