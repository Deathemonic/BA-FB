name: Dump Data

on:
  schedule:
    - cron: '0 3 * * 2,4'
    - cron: '0 5 * * 2,4'
    - cron: '0 7 * * 2,4'
    - cron: '0 9 * * 2,4'
  
  workflow_dispatch:

jobs:
  dump-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Download latest release
        run: |
          wget https://github.com/Deathemonic/BA-FB/releases/latest/download/bafb-linux-x86_64.zip

      - name: Extract executable
        run: |
          unzip bafb-linux-x86_64.zip
          chmod +x bafb

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config --local http.postBuffer 524288000
          git config --local http.lowSpeedLimit 0
          git config --local http.lowSpeedTime 999999

      - name: Switch to data branch
        run: |
          git checkout -B data

      - name: Setup Git LFS
        run: |
          git lfs install
          
          git lfs track "*.json"
          git lfs track "*.h"
          git lfs track "*.cpp"
          git lfs track "*.c"
          git lfs track "*.hpp"
          git lfs track "*.zip"
          git lfs track "*.bin"
          git lfs track "*.dat"
          git lfs track "*.db"
          git lfs track "*.txt"
          
          find . -type f -size +50M -not -path "./.git/*" -not -name "bafb" -not -name "*.zip" | while read file; do
            echo "Tracking large file: $file"
            git lfs track "$file"
          done
          
          git add .gitattributes
          
          if ! git diff --staged --quiet; then
            git commit -m "Add Git LFS tracking for large files"
          fi

      - name: Clean previous data
        run: |
          rm -rf Japan Global
          find . -name ".git" -prune -o -name "bafb" -prune -o -name "*.zip" -prune -o -name ".gitattributes" -prune -o -type f -exec rm {} +
          find . -name ".git" -prune -o -name "bafb" -prune -o -type d -empty -delete 2>/dev/null || true

      - name: Run Japan dump
        timeout-minutes: 10
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_NOLOGO: 1
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        run: |
          echo "Starting Japan dump..."
          echo "Process tree before:"
          ps aux | head -20
          
          # Try running with explicit timeout and process cleanup
          timeout --preserve-status 8m ./bafb dump japan --output ./Japan
          exit_code=$?
          
          echo "Process tree after:"
          ps aux | head -20
          
          if [ $exit_code -eq 124 ]; then
            echo "Japan dump timed out"
            # Kill any remaining processes
            pkill -f "Il2CppInspector" || true
            pkill -f "FbsDumper" || true
            exit 1
          elif [ $exit_code -ne 0 ]; then
            echo "Japan dump failed with exit code $exit_code"
            exit $exit_code
          else
            echo "Japan dump completed successfully"
          fi

      - name: Run Global dump
        timeout-minutes: 10
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_NOLOGO: 1
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        run: |
          echo "Starting Global dump..."
          echo "Process tree before:"
          ps aux | head -20
          
          # Try running with explicit timeout and process cleanup
          timeout --preserve-status 8m ./bafb dump global --output ./Global
          exit_code=$?
          
          echo "Process tree after:"
          ps aux | head -20
          
          if [ $exit_code -eq 124 ]; then
            echo "Global dump timed out"
            # Kill any remaining processes
            pkill -f "Il2CppInspector" || true
            pkill -f "FbsDumper" || true
            exit 1
          elif [ $exit_code -ne 0 ]; then
            echo "Global dump failed with exit code $exit_code"
            exit $exit_code
          else
            echo "Global dump completed successfully"
          fi

      - name: Clean up executable and zip file
        run: |
          rm -f bafb bafb-linux-x86_64.zip

      - name: Check for large files and update LFS tracking
        run: |
          echo "=== Checking for large files ==="
          find Japan Global -type f -size +50M 2>/dev/null || echo "No large files found"
          
          find Japan Global -type f -size +50M 2>/dev/null | while read file; do
            echo "Adding LFS tracking for: $file"
            git lfs track "$file"
          done
          
          git add .gitattributes
          if ! git diff --staged --quiet .gitattributes; then
            git commit -m "Update LFS tracking for new large files"
          fi
          
          echo "=== LFS tracked files ==="
          git lfs ls-files

      - name: Add and commit changes with LFS
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "Update data dumps - $(date '+%Y-%m-%d %H:%M:%S')"
          
          for i in {1..5}; do
            echo "Push attempt $i of 5"
            if git push origin data --force; then
              echo "Push successful!"
              exit 0
            else
              echo "Push failed, waiting before retry..."
              sleep $((i * 15))
            fi
          done
          
          echo "All push attempts failed"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}