// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldInteractionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldInteractionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldInteractionExcel<'a> {
  type Inner = FieldInteractionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldInteractionExcel<'a> {
  pub const VT_FIELDSEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_FIELDDATEID: flatbuffers::VOffsetT = 8;
  pub const VT_SHOWEMOJI: flatbuffers::VOffsetT = 10;
  pub const VT_KEYWORDLOCALIZE: flatbuffers::VOffsetT = 12;
  pub const VT_INTERACTIONTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_INTERACTIONID: flatbuffers::VOffsetT = 16;
  pub const VT_CONDITIONCLASS: flatbuffers::VOffsetT = 18;
  pub const VT_CONDITIONCLASSPARAMETERS: flatbuffers::VOffsetT = 20;
  pub const VT_ONCEONLY: flatbuffers::VOffsetT = 22;
  pub const VT_CONDITIONINDEX: flatbuffers::VOffsetT = 24;
  pub const VT_CONDITIONTYPE: flatbuffers::VOffsetT = 26;
  pub const VT_CONDITIONID: flatbuffers::VOffsetT = 28;
  pub const VT_NEGATECONDITION: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldInteractionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldInteractionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldInteractionExcel<'bldr>> {
    let mut builder = FieldInteractionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldInteraction");
      let x = args.FieldDateId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FieldDateId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.FieldSeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FieldSeasonId(x);
      if let Some(x) = args.negateCondition {
        builder.add_negateCondition(x);
      }
      if let Some(x) = args.conditionId {
        builder.add_conditionId(x);
      }
      if let Some(x) = args.conditionType {
        builder.add_conditionType(x);
      }
      if let Some(x) = args.conditionIndex {
        builder.add_conditionIndex(x);
      }
      if let Some(x) = args.conditionClassParameters {
        builder.add_conditionClassParameters(x);
      }
      let x = args.ConditionClass;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConditionClass(x);
      if let Some(x) = args.interactionId {
        builder.add_interactionId(x);
      }
      if let Some(x) = args.interactionType {
        builder.add_interactionType(x);
      }
      if let Some(x) = args.KeywordLocalize {
        builder.add_KeywordLocalize(x);
      }
      builder.add_OnceOnly(args.OnceOnly);
      builder.add_ShowEmoji(args.ShowEmoji);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldInteractionExcelT {
    let key = table_encryption_service::create_key(b"FieldInteraction");
      let FieldSeasonId = self.FieldSeasonId();
      let UniqueId = self.UniqueId();
      let FieldDateId = self.FieldDateId();
      let ShowEmoji = self.ShowEmoji();
    let KeywordLocalize = self.KeywordLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let interactionType = self.interactionType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let interactionId = self.interactionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let ConditionClass = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConditionClass(), &key)
      } else {
        self.ConditionClass()
      };
    let conditionClassParameters = self.conditionClassParameters().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let OnceOnly = self.OnceOnly();
    let conditionIndex = self.conditionIndex().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let conditionType = self.conditionType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let conditionId = self.conditionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let negateCondition = self.negateCondition().map(|x| {
      x.into_iter().collect()
    });
    FieldInteractionExcelT {
      FieldSeasonId,
      UniqueId,
      FieldDateId,
      ShowEmoji,
      KeywordLocalize,
      interactionType,
      interactionId,
      ConditionClass,
      conditionClassParameters,
      OnceOnly,
      conditionIndex,
      conditionType,
      conditionId,
      negateCondition,
    }
  }

  #[inline]
  pub fn FieldSeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldInteractionExcel::VT_FIELDSEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldInteractionExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FieldDateId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldInteractionExcel::VT_FIELDDATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShowEmoji(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FieldInteractionExcel::VT_SHOWEMOJI, Some(false)).unwrap()}
  }
  #[inline]
  pub fn KeywordLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldInteractionExcel::VT_KEYWORDLOCALIZE, None)}
  }
  #[inline]
  pub fn interactionType(&self) -> Option<flatbuffers::Vector<'a, FieldInteractionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, FieldInteractionType>>>(FieldInteractionExcel::VT_INTERACTIONTYPE, None)}
  }
  #[inline]
  pub fn interactionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldInteractionExcel::VT_INTERACTIONID, None)}
  }
  #[inline]
  pub fn ConditionClass(&self) -> FieldConditionClass {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldConditionClass>(FieldInteractionExcel::VT_CONDITIONCLASS, Some(FieldConditionClass::AndOr)).unwrap()}
  }
  #[inline]
  pub fn conditionClassParameters(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldInteractionExcel::VT_CONDITIONCLASSPARAMETERS, None)}
  }
  #[inline]
  pub fn OnceOnly(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FieldInteractionExcel::VT_ONCEONLY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn conditionIndex(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldInteractionExcel::VT_CONDITIONINDEX, None)}
  }
  #[inline]
  pub fn conditionType(&self) -> Option<flatbuffers::Vector<'a, FieldConditionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, FieldConditionType>>>(FieldInteractionExcel::VT_CONDITIONTYPE, None)}
  }
  #[inline]
  pub fn conditionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldInteractionExcel::VT_CONDITIONID, None)}
  }
  #[inline]
  pub fn negateCondition(&self) -> Option<flatbuffers::Vector<'a, bool>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, bool>>>(FieldInteractionExcel::VT_NEGATECONDITION, None)}
  }
}

impl flatbuffers::Verifiable for FieldInteractionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("FieldSeasonId", Self::VT_FIELDSEASONID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("FieldDateId", Self::VT_FIELDDATEID, false)?
     .visit_field::<bool>("ShowEmoji", Self::VT_SHOWEMOJI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("KeywordLocalize", Self::VT_KEYWORDLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, FieldInteractionType>>>("interactionType", Self::VT_INTERACTIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("interactionId", Self::VT_INTERACTIONID, false)?
     .visit_field::<FieldConditionClass>("ConditionClass", Self::VT_CONDITIONCLASS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("conditionClassParameters", Self::VT_CONDITIONCLASSPARAMETERS, false)?
     .visit_field::<bool>("OnceOnly", Self::VT_ONCEONLY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("conditionIndex", Self::VT_CONDITIONINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, FieldConditionType>>>("conditionType", Self::VT_CONDITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("conditionId", Self::VT_CONDITIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, bool>>>("negateCondition", Self::VT_NEGATECONDITION, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldInteractionExcelArgs<'a> {
    pub FieldSeasonId: i64,
    pub UniqueId: i64,
    pub FieldDateId: i64,
    pub ShowEmoji: bool,
    pub KeywordLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub interactionType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, FieldInteractionType>>>,
    pub interactionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ConditionClass: FieldConditionClass,
    pub conditionClassParameters: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub OnceOnly: bool,
    pub conditionIndex: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub conditionType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, FieldConditionType>>>,
    pub conditionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub negateCondition: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, bool>>>,
}
impl<'a> Default for FieldInteractionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldInteractionExcelArgs {
      FieldSeasonId: 0,
      UniqueId: 0,
      FieldDateId: 0,
      ShowEmoji: false,
      KeywordLocalize: None,
      interactionType: None,
      interactionId: None,
      ConditionClass: FieldConditionClass::AndOr,
      conditionClassParameters: None,
      OnceOnly: false,
      conditionIndex: None,
      conditionType: None,
      conditionId: None,
      negateCondition: None,
    }
  }
}

impl Serialize for FieldInteractionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldInteractionExcel", 14)?;
      s.serialize_field("FieldSeasonId", &self.FieldSeasonId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("FieldDateId", &self.FieldDateId())?;
      s.serialize_field("ShowEmoji", &self.ShowEmoji())?;
      if let Some(f) = self.KeywordLocalize() {
        s.serialize_field("KeywordLocalize", &f)?;
      } else {
        s.skip_field("KeywordLocalize")?;
      }
      if let Some(f) = self.interactionType() {
        s.serialize_field("interactionType", &f)?;
      } else {
        s.skip_field("interactionType")?;
      }
      if let Some(f) = self.interactionId() {
        s.serialize_field("interactionId", &f)?;
      } else {
        s.skip_field("interactionId")?;
      }
      s.serialize_field("ConditionClass", &self.ConditionClass())?;
      if let Some(f) = self.conditionClassParameters() {
        s.serialize_field("conditionClassParameters", &f)?;
      } else {
        s.skip_field("conditionClassParameters")?;
      }
      s.serialize_field("OnceOnly", &self.OnceOnly())?;
      if let Some(f) = self.conditionIndex() {
        s.serialize_field("conditionIndex", &f)?;
      } else {
        s.skip_field("conditionIndex")?;
      }
      if let Some(f) = self.conditionType() {
        s.serialize_field("conditionType", &f)?;
      } else {
        s.skip_field("conditionType")?;
      }
      if let Some(f) = self.conditionId() {
        s.serialize_field("conditionId", &f)?;
      } else {
        s.skip_field("conditionId")?;
      }
      if let Some(f) = self.negateCondition() {
        s.serialize_field("negateCondition", &f)?;
      } else {
        s.skip_field("negateCondition")?;
      }
    s.end()
  }
}

pub struct FieldInteractionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldInteractionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FieldSeasonId(&mut self, FieldSeasonId: i64) {
    self.fbb_.push_slot::<i64>(FieldInteractionExcel::VT_FIELDSEASONID, FieldSeasonId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldInteractionExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_FieldDateId(&mut self, FieldDateId: i64) {
    self.fbb_.push_slot::<i64>(FieldInteractionExcel::VT_FIELDDATEID, FieldDateId, 0);
  }
  #[inline]
  pub fn add_ShowEmoji(&mut self, ShowEmoji: bool) {
    self.fbb_.push_slot::<bool>(FieldInteractionExcel::VT_SHOWEMOJI, ShowEmoji, false);
  }
  #[inline]
  pub fn add_KeywordLocalize(&mut self, KeywordLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_KEYWORDLOCALIZE, KeywordLocalize);
  }
  #[inline]
  pub fn add_interactionType(&mut self, interactionType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , FieldInteractionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_INTERACTIONTYPE, interactionType);
  }
  #[inline]
  pub fn add_interactionId(&mut self, interactionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_INTERACTIONID, interactionId);
  }
  #[inline]
  pub fn add_ConditionClass(&mut self, ConditionClass: FieldConditionClass) {
    self.fbb_.push_slot::<FieldConditionClass>(FieldInteractionExcel::VT_CONDITIONCLASS, ConditionClass, FieldConditionClass::AndOr);
  }
  #[inline]
  pub fn add_conditionClassParameters(&mut self, conditionClassParameters: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_CONDITIONCLASSPARAMETERS, conditionClassParameters);
  }
  #[inline]
  pub fn add_OnceOnly(&mut self, OnceOnly: bool) {
    self.fbb_.push_slot::<bool>(FieldInteractionExcel::VT_ONCEONLY, OnceOnly, false);
  }
  #[inline]
  pub fn add_conditionIndex(&mut self, conditionIndex: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_CONDITIONINDEX, conditionIndex);
  }
  #[inline]
  pub fn add_conditionType(&mut self, conditionType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , FieldConditionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_CONDITIONTYPE, conditionType);
  }
  #[inline]
  pub fn add_conditionId(&mut self, conditionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_CONDITIONID, conditionId);
  }
  #[inline]
  pub fn add_negateCondition(&mut self, negateCondition: flatbuffers::WIPOffset<flatbuffers::Vector<'b , bool>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldInteractionExcel::VT_NEGATECONDITION, negateCondition);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldInteractionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldInteractionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldInteractionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldInteractionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldInteractionExcel");
      ds.field("FieldSeasonId", &self.FieldSeasonId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("FieldDateId", &self.FieldDateId());
      ds.field("ShowEmoji", &self.ShowEmoji());
      ds.field("KeywordLocalize", &self.KeywordLocalize());
      ds.field("interactionType", &self.interactionType());
      ds.field("interactionId", &self.interactionId());
      ds.field("ConditionClass", &self.ConditionClass());
      ds.field("conditionClassParameters", &self.conditionClassParameters());
      ds.field("OnceOnly", &self.OnceOnly());
      ds.field("conditionIndex", &self.conditionIndex());
      ds.field("conditionType", &self.conditionType());
      ds.field("conditionId", &self.conditionId());
      ds.field("negateCondition", &self.negateCondition());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldInteractionExcelT {
  pub FieldSeasonId: i64,
  pub UniqueId: i64,
  pub FieldDateId: i64,
  pub ShowEmoji: bool,
  pub KeywordLocalize: Option<String>,
  pub interactionType: Option<Vec<FieldInteractionType>>,
  pub interactionId: Option<Vec<i64>>,
  pub ConditionClass: FieldConditionClass,
  pub conditionClassParameters: Option<Vec<i64>>,
  pub OnceOnly: bool,
  pub conditionIndex: Option<Vec<i64>>,
  pub conditionType: Option<Vec<FieldConditionType>>,
  pub conditionId: Option<Vec<i64>>,
  pub negateCondition: Option<Vec<bool>>,
}
impl Default for FieldInteractionExcelT {
  fn default() -> Self {
    Self {
      FieldSeasonId: 0,
      UniqueId: 0,
      FieldDateId: 0,
      ShowEmoji: false,
      KeywordLocalize: None,
      interactionType: None,
      interactionId: None,
      ConditionClass: FieldConditionClass::AndOr,
      conditionClassParameters: None,
      OnceOnly: false,
      conditionIndex: None,
      conditionType: None,
      conditionId: None,
      negateCondition: None,
    }
  }
}
impl FieldInteractionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldInteractionExcel<'b>> {
    let FieldSeasonId = self.FieldSeasonId;
    let UniqueId = self.UniqueId;
    let FieldDateId = self.FieldDateId;
    let ShowEmoji = self.ShowEmoji;
    let KeywordLocalize = self.KeywordLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let interactionType = self.interactionType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let interactionId = self.interactionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ConditionClass = self.ConditionClass;
    let conditionClassParameters = self.conditionClassParameters.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let OnceOnly = self.OnceOnly;
    let conditionIndex = self.conditionIndex.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionType = self.conditionType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionId = self.conditionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let negateCondition = self.negateCondition.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    FieldInteractionExcel::create(_fbb, &FieldInteractionExcelArgs{
      FieldSeasonId,
      UniqueId,
      FieldDateId,
      ShowEmoji,
      KeywordLocalize,
      interactionType,
      interactionId,
      ConditionClass,
      conditionClassParameters,
      OnceOnly,
      conditionIndex,
      conditionType,
      conditionId,
      negateCondition,
    })
  }
}
