// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameAudioAnimatorExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameAudioAnimatorExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameAudioAnimatorExcel<'a> {
  type Inner = MiniGameAudioAnimatorExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameAudioAnimatorExcel<'a> {
  pub const VT_CONTROLLERNAMEHASH: flatbuffers::VOffsetT = 4;
  pub const VT_VOICENAMEPREFIX: flatbuffers::VOffsetT = 6;
  pub const VT_STATENAMEHASH: flatbuffers::VOffsetT = 8;
  pub const VT_STATENAME: flatbuffers::VOffsetT = 10;
  pub const VT_IGNOREINTERRUPTDELAY: flatbuffers::VOffsetT = 12;
  pub const VT_IGNOREINTERRUPTPLAY: flatbuffers::VOffsetT = 14;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 16;
  pub const VT_DELAY: flatbuffers::VOffsetT = 18;
  pub const VT_AUDIOPRIORITY: flatbuffers::VOffsetT = 20;
  pub const VT_AUDIOCLIPPATH: flatbuffers::VOffsetT = 22;
  pub const VT_VOICEHASH: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameAudioAnimatorExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameAudioAnimatorExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameAudioAnimatorExcel<'bldr>> {
    let mut builder = MiniGameAudioAnimatorExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameAudioAnimator");
      if let Some(x) = args.VoiceHash {
        builder.add_VoiceHash(x);
      }
      if let Some(x) = args.AudioClipPath {
        builder.add_AudioClipPath(x);
      }
      let x = args.AudioPriority;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_AudioPriority(x);
      let x = args.Delay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Delay(x);
      let x = args.Volume;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Volume(x);
      if let Some(x) = args.StateName {
        builder.add_StateName(x);
      }
      let x = args.StateNameHash;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StateNameHash(x);
      if let Some(x) = args.VoiceNamePrefix {
        builder.add_VoiceNamePrefix(x);
      }
      let x = args.ControllerNameHash;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_ControllerNameHash(x);
      builder.add_IgnoreInterruptPlay(args.IgnoreInterruptPlay);
      builder.add_IgnoreInterruptDelay(args.IgnoreInterruptDelay);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameAudioAnimatorExcelT {
    let key = table_encryption_service::create_key(b"MiniGameAudioAnimator");
      let ControllerNameHash = self.ControllerNameHash();
    let VoiceNamePrefix = self.VoiceNamePrefix().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StateNameHash = self.StateNameHash();
    let StateName = self.StateName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IgnoreInterruptDelay = self.IgnoreInterruptDelay();
      let IgnoreInterruptPlay = self.IgnoreInterruptPlay();
      let Volume = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Volume(), &key)
      } else {
        self.Volume()
      };
      let Delay = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Delay(), &key)
      } else {
        self.Delay()
      };
      let AudioPriority = self.AudioPriority();
    let AudioClipPath = self.AudioClipPath().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let VoiceHash = self.VoiceHash().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
    MiniGameAudioAnimatorExcelT {
      ControllerNameHash,
      VoiceNamePrefix,
      StateNameHash,
      StateName,
      IgnoreInterruptDelay,
      IgnoreInterruptPlay,
      Volume,
      Delay,
      AudioPriority,
      AudioClipPath,
      VoiceHash,
    }
  }

  #[inline]
  pub fn ControllerNameHash(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameAudioAnimatorExcel::VT_CONTROLLERNAMEHASH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VoiceNamePrefix(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameAudioAnimatorExcel::VT_VOICENAMEPREFIX, None)}
  }
  #[inline]
  pub fn StateNameHash(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameAudioAnimatorExcel::VT_STATENAMEHASH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StateName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameAudioAnimatorExcel::VT_STATENAME, None)}
  }
  #[inline]
  pub fn IgnoreInterruptDelay(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MiniGameAudioAnimatorExcel::VT_IGNOREINTERRUPTDELAY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IgnoreInterruptPlay(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MiniGameAudioAnimatorExcel::VT_IGNOREINTERRUPTPLAY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Volume(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MiniGameAudioAnimatorExcel::VT_VOLUME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Delay(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MiniGameAudioAnimatorExcel::VT_DELAY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn AudioPriority(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameAudioAnimatorExcel::VT_AUDIOPRIORITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AudioClipPath(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(MiniGameAudioAnimatorExcel::VT_AUDIOCLIPPATH, None)}
  }
  #[inline]
  pub fn VoiceHash(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(MiniGameAudioAnimatorExcel::VT_VOICEHASH, None)}
  }
}

impl flatbuffers::Verifiable for MiniGameAudioAnimatorExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("ControllerNameHash", Self::VT_CONTROLLERNAMEHASH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VoiceNamePrefix", Self::VT_VOICENAMEPREFIX, false)?
     .visit_field::<u32>("StateNameHash", Self::VT_STATENAMEHASH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StateName", Self::VT_STATENAME, false)?
     .visit_field::<bool>("IgnoreInterruptDelay", Self::VT_IGNOREINTERRUPTDELAY, false)?
     .visit_field::<bool>("IgnoreInterruptPlay", Self::VT_IGNOREINTERRUPTPLAY, false)?
     .visit_field::<f32>("Volume", Self::VT_VOLUME, false)?
     .visit_field::<f32>("Delay", Self::VT_DELAY, false)?
     .visit_field::<i32>("AudioPriority", Self::VT_AUDIOPRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("AudioClipPath", Self::VT_AUDIOCLIPPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("VoiceHash", Self::VT_VOICEHASH, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameAudioAnimatorExcelArgs<'a> {
    pub ControllerNameHash: u32,
    pub VoiceNamePrefix: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StateNameHash: u32,
    pub StateName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IgnoreInterruptDelay: bool,
    pub IgnoreInterruptPlay: bool,
    pub Volume: f32,
    pub Delay: f32,
    pub AudioPriority: i32,
    pub AudioClipPath: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub VoiceHash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for MiniGameAudioAnimatorExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameAudioAnimatorExcelArgs {
      ControllerNameHash: 0,
      VoiceNamePrefix: None,
      StateNameHash: 0,
      StateName: None,
      IgnoreInterruptDelay: false,
      IgnoreInterruptPlay: false,
      Volume: 0.0,
      Delay: 0.0,
      AudioPriority: 0,
      AudioClipPath: None,
      VoiceHash: None,
    }
  }
}

impl Serialize for MiniGameAudioAnimatorExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameAudioAnimatorExcel", 11)?;
      s.serialize_field("ControllerNameHash", &self.ControllerNameHash())?;
      if let Some(f) = self.VoiceNamePrefix() {
        s.serialize_field("VoiceNamePrefix", &f)?;
      } else {
        s.skip_field("VoiceNamePrefix")?;
      }
      s.serialize_field("StateNameHash", &self.StateNameHash())?;
      if let Some(f) = self.StateName() {
        s.serialize_field("StateName", &f)?;
      } else {
        s.skip_field("StateName")?;
      }
      s.serialize_field("IgnoreInterruptDelay", &self.IgnoreInterruptDelay())?;
      s.serialize_field("IgnoreInterruptPlay", &self.IgnoreInterruptPlay())?;
      s.serialize_field("Volume", &self.Volume())?;
      s.serialize_field("Delay", &self.Delay())?;
      s.serialize_field("AudioPriority", &self.AudioPriority())?;
      if let Some(f) = self.AudioClipPath() {
        s.serialize_field("AudioClipPath", &f)?;
      } else {
        s.skip_field("AudioClipPath")?;
      }
      if let Some(f) = self.VoiceHash() {
        s.serialize_field("VoiceHash", &f)?;
      } else {
        s.skip_field("VoiceHash")?;
      }
    s.end()
  }
}

pub struct MiniGameAudioAnimatorExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameAudioAnimatorExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ControllerNameHash(&mut self, ControllerNameHash: u32) {
    self.fbb_.push_slot::<u32>(MiniGameAudioAnimatorExcel::VT_CONTROLLERNAMEHASH, ControllerNameHash, 0);
  }
  #[inline]
  pub fn add_VoiceNamePrefix(&mut self, VoiceNamePrefix: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameAudioAnimatorExcel::VT_VOICENAMEPREFIX, VoiceNamePrefix);
  }
  #[inline]
  pub fn add_StateNameHash(&mut self, StateNameHash: u32) {
    self.fbb_.push_slot::<u32>(MiniGameAudioAnimatorExcel::VT_STATENAMEHASH, StateNameHash, 0);
  }
  #[inline]
  pub fn add_StateName(&mut self, StateName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameAudioAnimatorExcel::VT_STATENAME, StateName);
  }
  #[inline]
  pub fn add_IgnoreInterruptDelay(&mut self, IgnoreInterruptDelay: bool) {
    self.fbb_.push_slot::<bool>(MiniGameAudioAnimatorExcel::VT_IGNOREINTERRUPTDELAY, IgnoreInterruptDelay, false);
  }
  #[inline]
  pub fn add_IgnoreInterruptPlay(&mut self, IgnoreInterruptPlay: bool) {
    self.fbb_.push_slot::<bool>(MiniGameAudioAnimatorExcel::VT_IGNOREINTERRUPTPLAY, IgnoreInterruptPlay, false);
  }
  #[inline]
  pub fn add_Volume(&mut self, Volume: f32) {
    self.fbb_.push_slot::<f32>(MiniGameAudioAnimatorExcel::VT_VOLUME, Volume, 0.0);
  }
  #[inline]
  pub fn add_Delay(&mut self, Delay: f32) {
    self.fbb_.push_slot::<f32>(MiniGameAudioAnimatorExcel::VT_DELAY, Delay, 0.0);
  }
  #[inline]
  pub fn add_AudioPriority(&mut self, AudioPriority: i32) {
    self.fbb_.push_slot::<i32>(MiniGameAudioAnimatorExcel::VT_AUDIOPRIORITY, AudioPriority, 0);
  }
  #[inline]
  pub fn add_AudioClipPath(&mut self, AudioClipPath: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameAudioAnimatorExcel::VT_AUDIOCLIPPATH, AudioClipPath);
  }
  #[inline]
  pub fn add_VoiceHash(&mut self, VoiceHash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameAudioAnimatorExcel::VT_VOICEHASH, VoiceHash);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameAudioAnimatorExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameAudioAnimatorExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameAudioAnimatorExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameAudioAnimatorExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameAudioAnimatorExcel");
      ds.field("ControllerNameHash", &self.ControllerNameHash());
      ds.field("VoiceNamePrefix", &self.VoiceNamePrefix());
      ds.field("StateNameHash", &self.StateNameHash());
      ds.field("StateName", &self.StateName());
      ds.field("IgnoreInterruptDelay", &self.IgnoreInterruptDelay());
      ds.field("IgnoreInterruptPlay", &self.IgnoreInterruptPlay());
      ds.field("Volume", &self.Volume());
      ds.field("Delay", &self.Delay());
      ds.field("AudioPriority", &self.AudioPriority());
      ds.field("AudioClipPath", &self.AudioClipPath());
      ds.field("VoiceHash", &self.VoiceHash());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameAudioAnimatorExcelT {
  pub ControllerNameHash: u32,
  pub VoiceNamePrefix: Option<String>,
  pub StateNameHash: u32,
  pub StateName: Option<String>,
  pub IgnoreInterruptDelay: bool,
  pub IgnoreInterruptPlay: bool,
  pub Volume: f32,
  pub Delay: f32,
  pub AudioPriority: i32,
  pub AudioClipPath: Option<Vec<String>>,
  pub VoiceHash: Option<Vec<u32>>,
}
impl Default for MiniGameAudioAnimatorExcelT {
  fn default() -> Self {
    Self {
      ControllerNameHash: 0,
      VoiceNamePrefix: None,
      StateNameHash: 0,
      StateName: None,
      IgnoreInterruptDelay: false,
      IgnoreInterruptPlay: false,
      Volume: 0.0,
      Delay: 0.0,
      AudioPriority: 0,
      AudioClipPath: None,
      VoiceHash: None,
    }
  }
}
impl MiniGameAudioAnimatorExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameAudioAnimatorExcel<'b>> {
    let ControllerNameHash = self.ControllerNameHash;
    let VoiceNamePrefix = self.VoiceNamePrefix.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StateNameHash = self.StateNameHash;
    let StateName = self.StateName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IgnoreInterruptDelay = self.IgnoreInterruptDelay;
    let IgnoreInterruptPlay = self.IgnoreInterruptPlay;
    let Volume = self.Volume;
    let Delay = self.Delay;
    let AudioPriority = self.AudioPriority;
    let AudioClipPath = self.AudioClipPath.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let VoiceHash = self.VoiceHash.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MiniGameAudioAnimatorExcel::create(_fbb, &MiniGameAudioAnimatorExcelArgs{
      ControllerNameHash,
      VoiceNamePrefix,
      StateNameHash,
      StateName,
      IgnoreInterruptDelay,
      IgnoreInterruptPlay,
      Volume,
      Delay,
      AudioPriority,
      AudioClipPath,
      VoiceHash,
    })
  }
}
