// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGCharacterExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGCharacterExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGCharacterExcel<'a> {
  type Inner = MinigameCCGCharacterExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGCharacterExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ACTIVESKILLID: flatbuffers::VOffsetT = 8;
  pub const VT_ACTIVESKILLCOST: flatbuffers::VOffsetT = 10;
  pub const VT_ACTIVESKILLECOSTVISIBLE: flatbuffers::VOffsetT = 12;
  pub const VT_ACTIVESKILLCOOLDOWN: flatbuffers::VOffsetT = 14;
  pub const VT_MAXHEALTH: flatbuffers::VOffsetT = 16;
  pub const VT_PASSIVESKILLID: flatbuffers::VOffsetT = 18;
  pub const VT_NAME: flatbuffers::VOffsetT = 20;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 22;
  pub const VT_IMAGEPATH: flatbuffers::VOffsetT = 24;
  pub const VT_UIIMAGEPATH: flatbuffers::VOffsetT = 26;
  pub const VT_TAGS: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGCharacterExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGCharacterExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGCharacterExcel<'bldr>> {
    let mut builder = MinigameCCGCharacterExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGCharacter");
      let x = args.ActiveSkillId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ActiveSkillId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.Tags {
        builder.add_Tags(x);
      }
      if let Some(x) = args.UIImagePath {
        builder.add_UIImagePath(x);
      }
      if let Some(x) = args.ImagePath {
        builder.add_ImagePath(x);
      }
      if let Some(x) = args.Description {
        builder.add_Description(x);
      }
      let x = args.Name;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Name(x);
      if let Some(x) = args.PassiveSkillId {
        builder.add_PassiveSkillId(x);
      }
      let x = args.MaxHealth;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxHealth(x);
      let x = args.ActiveSkillCooldown;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ActiveSkillCooldown(x);
      let x = args.ActiveSkillCost;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ActiveSkillCost(x);
      let x = args.Type;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Type(x);
      builder.add_ActiveSkilleCostVisible(args.ActiveSkilleCostVisible);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGCharacterExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGCharacter");
      let Id = self.Id();
      let Type = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Type(), &key)
      } else {
        self.Type()
      };
      let ActiveSkillId = self.ActiveSkillId();
      let ActiveSkillCost = self.ActiveSkillCost();
      let ActiveSkilleCostVisible = self.ActiveSkilleCostVisible();
      let ActiveSkillCooldown = self.ActiveSkillCooldown();
      let MaxHealth = self.MaxHealth();
    let PassiveSkillId = self.PassiveSkillId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let Name = self.Name();
    let Description = self.Description().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePath = self.ImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let UIImagePath = self.UIImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Tags = self.Tags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    MinigameCCGCharacterExcelT {
      Id,
      Type,
      ActiveSkillId,
      ActiveSkillCost,
      ActiveSkilleCostVisible,
      ActiveSkillCooldown,
      MaxHealth,
      PassiveSkillId,
      Name,
      Description,
      ImagePath,
      UIImagePath,
      Tags,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGCharacterExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Type(&self) -> CCGCharacterType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CCGCharacterType>(MinigameCCGCharacterExcel::VT_TYPE, Some(CCGCharacterType::None)).unwrap()}
  }
  #[inline]
  pub fn ActiveSkillId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGCharacterExcel::VT_ACTIVESKILLID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ActiveSkillCost(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGCharacterExcel::VT_ACTIVESKILLCOST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ActiveSkilleCostVisible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameCCGCharacterExcel::VT_ACTIVESKILLECOSTVISIBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ActiveSkillCooldown(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGCharacterExcel::VT_ACTIVESKILLCOOLDOWN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxHealth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGCharacterExcel::VT_MAXHEALTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PassiveSkillId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameCCGCharacterExcel::VT_PASSIVESKILLID, None)}
  }
  #[inline]
  pub fn Name(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGCharacterExcel::VT_NAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGCharacterExcel::VT_DESCRIPTION, None)}
  }
  #[inline]
  pub fn ImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGCharacterExcel::VT_IMAGEPATH, None)}
  }
  #[inline]
  pub fn UIImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGCharacterExcel::VT_UIIMAGEPATH, None)}
  }
  #[inline]
  pub fn Tags(&self) -> Option<flatbuffers::Vector<'a, CCGTagType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, CCGTagType>>>(MinigameCCGCharacterExcel::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for MinigameCCGCharacterExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<CCGCharacterType>("Type", Self::VT_TYPE, false)?
     .visit_field::<i64>("ActiveSkillId", Self::VT_ACTIVESKILLID, false)?
     .visit_field::<i32>("ActiveSkillCost", Self::VT_ACTIVESKILLCOST, false)?
     .visit_field::<bool>("ActiveSkilleCostVisible", Self::VT_ACTIVESKILLECOSTVISIBLE, false)?
     .visit_field::<i32>("ActiveSkillCooldown", Self::VT_ACTIVESKILLCOOLDOWN, false)?
     .visit_field::<i32>("MaxHealth", Self::VT_MAXHEALTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("PassiveSkillId", Self::VT_PASSIVESKILLID, false)?
     .visit_field::<u32>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePath", Self::VT_IMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("UIImagePath", Self::VT_UIIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, CCGTagType>>>("Tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGCharacterExcelArgs<'a> {
    pub Id: i64,
    pub Type: CCGCharacterType,
    pub ActiveSkillId: i64,
    pub ActiveSkillCost: i32,
    pub ActiveSkilleCostVisible: bool,
    pub ActiveSkillCooldown: i32,
    pub MaxHealth: i32,
    pub PassiveSkillId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub Name: u32,
    pub Description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub UIImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, CCGTagType>>>,
}
impl<'a> Default for MinigameCCGCharacterExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGCharacterExcelArgs {
      Id: 0,
      Type: CCGCharacterType::None,
      ActiveSkillId: 0,
      ActiveSkillCost: 0,
      ActiveSkilleCostVisible: false,
      ActiveSkillCooldown: 0,
      MaxHealth: 0,
      PassiveSkillId: None,
      Name: 0,
      Description: None,
      ImagePath: None,
      UIImagePath: None,
      Tags: None,
    }
  }
}

impl Serialize for MinigameCCGCharacterExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGCharacterExcel", 13)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Type", &self.Type())?;
      s.serialize_field("ActiveSkillId", &self.ActiveSkillId())?;
      s.serialize_field("ActiveSkillCost", &self.ActiveSkillCost())?;
      s.serialize_field("ActiveSkilleCostVisible", &self.ActiveSkilleCostVisible())?;
      s.serialize_field("ActiveSkillCooldown", &self.ActiveSkillCooldown())?;
      s.serialize_field("MaxHealth", &self.MaxHealth())?;
      if let Some(f) = self.PassiveSkillId() {
        s.serialize_field("PassiveSkillId", &f)?;
      } else {
        s.skip_field("PassiveSkillId")?;
      }
      s.serialize_field("Name", &self.Name())?;
      if let Some(f) = self.Description() {
        s.serialize_field("Description", &f)?;
      } else {
        s.skip_field("Description")?;
      }
      if let Some(f) = self.ImagePath() {
        s.serialize_field("ImagePath", &f)?;
      } else {
        s.skip_field("ImagePath")?;
      }
      if let Some(f) = self.UIImagePath() {
        s.serialize_field("UIImagePath", &f)?;
      } else {
        s.skip_field("UIImagePath")?;
      }
      if let Some(f) = self.Tags() {
        s.serialize_field("Tags", &f)?;
      } else {
        s.skip_field("Tags")?;
      }
    s.end()
  }
}

pub struct MinigameCCGCharacterExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGCharacterExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGCharacterExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Type(&mut self, Type: CCGCharacterType) {
    self.fbb_.push_slot::<CCGCharacterType>(MinigameCCGCharacterExcel::VT_TYPE, Type, CCGCharacterType::None);
  }
  #[inline]
  pub fn add_ActiveSkillId(&mut self, ActiveSkillId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGCharacterExcel::VT_ACTIVESKILLID, ActiveSkillId, 0);
  }
  #[inline]
  pub fn add_ActiveSkillCost(&mut self, ActiveSkillCost: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGCharacterExcel::VT_ACTIVESKILLCOST, ActiveSkillCost, 0);
  }
  #[inline]
  pub fn add_ActiveSkilleCostVisible(&mut self, ActiveSkilleCostVisible: bool) {
    self.fbb_.push_slot::<bool>(MinigameCCGCharacterExcel::VT_ACTIVESKILLECOSTVISIBLE, ActiveSkilleCostVisible, false);
  }
  #[inline]
  pub fn add_ActiveSkillCooldown(&mut self, ActiveSkillCooldown: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGCharacterExcel::VT_ACTIVESKILLCOOLDOWN, ActiveSkillCooldown, 0);
  }
  #[inline]
  pub fn add_MaxHealth(&mut self, MaxHealth: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGCharacterExcel::VT_MAXHEALTH, MaxHealth, 0);
  }
  #[inline]
  pub fn add_PassiveSkillId(&mut self, PassiveSkillId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGCharacterExcel::VT_PASSIVESKILLID, PassiveSkillId);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGCharacterExcel::VT_NAME, Name, 0);
  }
  #[inline]
  pub fn add_Description(&mut self, Description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGCharacterExcel::VT_DESCRIPTION, Description);
  }
  #[inline]
  pub fn add_ImagePath(&mut self, ImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGCharacterExcel::VT_IMAGEPATH, ImagePath);
  }
  #[inline]
  pub fn add_UIImagePath(&mut self, UIImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGCharacterExcel::VT_UIIMAGEPATH, UIImagePath);
  }
  #[inline]
  pub fn add_Tags(&mut self, Tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , CCGTagType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGCharacterExcel::VT_TAGS, Tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGCharacterExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGCharacterExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGCharacterExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGCharacterExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGCharacterExcel");
      ds.field("Id", &self.Id());
      ds.field("Type", &self.Type());
      ds.field("ActiveSkillId", &self.ActiveSkillId());
      ds.field("ActiveSkillCost", &self.ActiveSkillCost());
      ds.field("ActiveSkilleCostVisible", &self.ActiveSkilleCostVisible());
      ds.field("ActiveSkillCooldown", &self.ActiveSkillCooldown());
      ds.field("MaxHealth", &self.MaxHealth());
      ds.field("PassiveSkillId", &self.PassiveSkillId());
      ds.field("Name", &self.Name());
      ds.field("Description", &self.Description());
      ds.field("ImagePath", &self.ImagePath());
      ds.field("UIImagePath", &self.UIImagePath());
      ds.field("Tags", &self.Tags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGCharacterExcelT {
  pub Id: i64,
  pub Type: CCGCharacterType,
  pub ActiveSkillId: i64,
  pub ActiveSkillCost: i32,
  pub ActiveSkilleCostVisible: bool,
  pub ActiveSkillCooldown: i32,
  pub MaxHealth: i32,
  pub PassiveSkillId: Option<Vec<i64>>,
  pub Name: u32,
  pub Description: Option<String>,
  pub ImagePath: Option<String>,
  pub UIImagePath: Option<String>,
  pub Tags: Option<Vec<CCGTagType>>,
}
impl Default for MinigameCCGCharacterExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Type: CCGCharacterType::None,
      ActiveSkillId: 0,
      ActiveSkillCost: 0,
      ActiveSkilleCostVisible: false,
      ActiveSkillCooldown: 0,
      MaxHealth: 0,
      PassiveSkillId: None,
      Name: 0,
      Description: None,
      ImagePath: None,
      UIImagePath: None,
      Tags: None,
    }
  }
}
impl MinigameCCGCharacterExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGCharacterExcel<'b>> {
    let Id = self.Id;
    let Type = self.Type;
    let ActiveSkillId = self.ActiveSkillId;
    let ActiveSkillCost = self.ActiveSkillCost;
    let ActiveSkilleCostVisible = self.ActiveSkilleCostVisible;
    let ActiveSkillCooldown = self.ActiveSkillCooldown;
    let MaxHealth = self.MaxHealth;
    let PassiveSkillId = self.PassiveSkillId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let Name = self.Name;
    let Description = self.Description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePath = self.ImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let UIImagePath = self.UIImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Tags = self.Tags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MinigameCCGCharacterExcel::create(_fbb, &MinigameCCGCharacterExcelArgs{
      Id,
      Type,
      ActiveSkillId,
      ActiveSkillCost,
      ActiveSkilleCostVisible,
      ActiveSkillCooldown,
      MaxHealth,
      PassiveSkillId,
      Name,
      Description,
      ImagePath,
      UIImagePath,
      Tags,
    })
  }
}
