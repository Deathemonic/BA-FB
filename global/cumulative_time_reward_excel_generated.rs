// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CumulativeTimeRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CumulativeTimeRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CumulativeTimeRewardExcel<'a> {
  type Inner = CumulativeTimeRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CumulativeTimeRewardExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 6;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 8;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 10;
  pub const VT_TIMECONDITION: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CumulativeTimeRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CumulativeTimeRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CumulativeTimeRewardExcel<'bldr>> {
    let mut builder = CumulativeTimeRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CumulativeTimeReward");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.rewardAmount {
        builder.add_rewardAmount(x);
      }
      if let Some(x) = args.rewardId {
        builder.add_rewardId(x);
      }
      if let Some(x) = args.rewardParcelType {
        builder.add_rewardParcelType(x);
      }
      if let Some(x) = args.timeCondition {
        builder.add_timeCondition(x);
      }
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
      if let Some(x) = args.Description {
        builder.add_Description(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CumulativeTimeRewardExcelT {
    let key = table_encryption_service::create_key(b"CumulativeTimeReward");
      let Id = self.Id();
    let Description = self.Description().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let timeCondition = self.timeCondition().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let rewardParcelType = self.rewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let rewardId = self.rewardId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let rewardAmount = self.rewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    CumulativeTimeRewardExcelT {
      Id,
      Description,
      StartDate,
      EndDate,
      timeCondition,
      rewardParcelType,
      rewardId,
      rewardAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CumulativeTimeRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CumulativeTimeRewardExcel::VT_DESCRIPTION, None)}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CumulativeTimeRewardExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CumulativeTimeRewardExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn timeCondition(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CumulativeTimeRewardExcel::VT_TIMECONDITION, None)}
  }
  #[inline]
  pub fn rewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(CumulativeTimeRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn rewardId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CumulativeTimeRewardExcel::VT_REWARDID, None)}
  }
  #[inline]
  pub fn rewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CumulativeTimeRewardExcel::VT_REWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for CumulativeTimeRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("timeCondition", Self::VT_TIMECONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("rewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("rewardId", Self::VT_REWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("rewardAmount", Self::VT_REWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct CumulativeTimeRewardExcelArgs<'a> {
    pub Id: i64,
    pub Description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeCondition: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub rewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub rewardId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub rewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for CumulativeTimeRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CumulativeTimeRewardExcelArgs {
      Id: 0,
      Description: None,
      StartDate: None,
      EndDate: None,
      timeCondition: None,
      rewardParcelType: None,
      rewardId: None,
      rewardAmount: None,
    }
  }
}

impl Serialize for CumulativeTimeRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CumulativeTimeRewardExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Description() {
        s.serialize_field("Description", &f)?;
      } else {
        s.skip_field("Description")?;
      }
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      if let Some(f) = self.timeCondition() {
        s.serialize_field("timeCondition", &f)?;
      } else {
        s.skip_field("timeCondition")?;
      }
      if let Some(f) = self.rewardParcelType() {
        s.serialize_field("rewardParcelType", &f)?;
      } else {
        s.skip_field("rewardParcelType")?;
      }
      if let Some(f) = self.rewardId() {
        s.serialize_field("rewardId", &f)?;
      } else {
        s.skip_field("rewardId")?;
      }
      if let Some(f) = self.rewardAmount() {
        s.serialize_field("rewardAmount", &f)?;
      } else {
        s.skip_field("rewardAmount")?;
      }
    s.end()
  }
}

pub struct CumulativeTimeRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CumulativeTimeRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CumulativeTimeRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Description(&mut self, Description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CumulativeTimeRewardExcel::VT_DESCRIPTION, Description);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CumulativeTimeRewardExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CumulativeTimeRewardExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_timeCondition(&mut self, timeCondition: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CumulativeTimeRewardExcel::VT_TIMECONDITION, timeCondition);
  }
  #[inline]
  pub fn add_rewardParcelType(&mut self, rewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CumulativeTimeRewardExcel::VT_REWARDPARCELTYPE, rewardParcelType);
  }
  #[inline]
  pub fn add_rewardId(&mut self, rewardId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CumulativeTimeRewardExcel::VT_REWARDID, rewardId);
  }
  #[inline]
  pub fn add_rewardAmount(&mut self, rewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CumulativeTimeRewardExcel::VT_REWARDAMOUNT, rewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CumulativeTimeRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CumulativeTimeRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CumulativeTimeRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CumulativeTimeRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CumulativeTimeRewardExcel");
      ds.field("Id", &self.Id());
      ds.field("Description", &self.Description());
      ds.field("StartDate", &self.StartDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("timeCondition", &self.timeCondition());
      ds.field("rewardParcelType", &self.rewardParcelType());
      ds.field("rewardId", &self.rewardId());
      ds.field("rewardAmount", &self.rewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CumulativeTimeRewardExcelT {
  pub Id: i64,
  pub Description: Option<String>,
  pub StartDate: Option<String>,
  pub EndDate: Option<String>,
  pub timeCondition: Option<Vec<i64>>,
  pub rewardParcelType: Option<Vec<ParcelType>>,
  pub rewardId: Option<Vec<i64>>,
  pub rewardAmount: Option<Vec<i32>>,
}
impl Default for CumulativeTimeRewardExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Description: None,
      StartDate: None,
      EndDate: None,
      timeCondition: None,
      rewardParcelType: None,
      rewardId: None,
      rewardAmount: None,
    }
  }
}
impl CumulativeTimeRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CumulativeTimeRewardExcel<'b>> {
    let Id = self.Id;
    let Description = self.Description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let timeCondition = self.timeCondition.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardParcelType = self.rewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardId = self.rewardId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardAmount = self.rewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CumulativeTimeRewardExcel::create(_fbb, &CumulativeTimeRewardExcelArgs{
      Id,
      Description,
      StartDate,
      EndDate,
      timeCondition,
      rewardParcelType,
      rewardId,
      rewardAmount,
    })
  }
}
