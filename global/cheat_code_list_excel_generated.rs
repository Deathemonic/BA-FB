// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CheatCodeListExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CheatCodeListExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CheatCodeListExcel<'a> {
  type Inner = CheatCodeListExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CheatCodeListExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CHEATCODE: flatbuffers::VOffsetT = 6;
  pub const VT_INPUTTITLE: flatbuffers::VOffsetT = 8;
  pub const VT_DESC: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CheatCodeListExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CheatCodeListExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CheatCodeListExcel<'bldr>> {
    let mut builder = CheatCodeListExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CheatCodeList");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.Desc {
        builder.add_Desc(x);
      }
      if let Some(x) = args.inputTitle {
        builder.add_inputTitle(x);
      }
      if let Some(x) = args.cheatCode {
        builder.add_cheatCode(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CheatCodeListExcelT {
    let key = table_encryption_service::create_key(b"CheatCodeList");
      let Id = self.Id();
    let cheatCode = self.cheatCode().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let inputTitle = self.inputTitle().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let Desc = self.Desc().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CheatCodeListExcelT {
      Id,
      cheatCode,
      inputTitle,
      Desc,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CheatCodeListExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn cheatCode(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CheatCodeListExcel::VT_CHEATCODE, None)}
  }
  #[inline]
  pub fn inputTitle(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CheatCodeListExcel::VT_INPUTTITLE, None)}
  }
  #[inline]
  pub fn Desc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CheatCodeListExcel::VT_DESC, None)}
  }
}

impl flatbuffers::Verifiable for CheatCodeListExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("cheatCode", Self::VT_CHEATCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("inputTitle", Self::VT_INPUTTITLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Desc", Self::VT_DESC, false)?
     .finish();
    Ok(())
  }
}
pub struct CheatCodeListExcelArgs<'a> {
    pub Id: i64,
    pub cheatCode: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub inputTitle: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub Desc: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CheatCodeListExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CheatCodeListExcelArgs {
      Id: 0,
      cheatCode: None,
      inputTitle: None,
      Desc: None,
    }
  }
}

impl Serialize for CheatCodeListExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CheatCodeListExcel", 4)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.cheatCode() {
        s.serialize_field("cheatCode", &f)?;
      } else {
        s.skip_field("cheatCode")?;
      }
      if let Some(f) = self.inputTitle() {
        s.serialize_field("inputTitle", &f)?;
      } else {
        s.skip_field("inputTitle")?;
      }
      if let Some(f) = self.Desc() {
        s.serialize_field("Desc", &f)?;
      } else {
        s.skip_field("Desc")?;
      }
    s.end()
  }
}

pub struct CheatCodeListExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CheatCodeListExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CheatCodeListExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_cheatCode(&mut self, cheatCode: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CheatCodeListExcel::VT_CHEATCODE, cheatCode);
  }
  #[inline]
  pub fn add_inputTitle(&mut self, inputTitle: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CheatCodeListExcel::VT_INPUTTITLE, inputTitle);
  }
  #[inline]
  pub fn add_Desc(&mut self, Desc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CheatCodeListExcel::VT_DESC, Desc);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CheatCodeListExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CheatCodeListExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CheatCodeListExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CheatCodeListExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CheatCodeListExcel");
      ds.field("Id", &self.Id());
      ds.field("cheatCode", &self.cheatCode());
      ds.field("inputTitle", &self.inputTitle());
      ds.field("Desc", &self.Desc());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CheatCodeListExcelT {
  pub Id: i64,
  pub cheatCode: Option<Vec<String>>,
  pub inputTitle: Option<Vec<String>>,
  pub Desc: Option<String>,
}
impl Default for CheatCodeListExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      cheatCode: None,
      inputTitle: None,
      Desc: None,
    }
  }
}
impl CheatCodeListExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CheatCodeListExcel<'b>> {
    let Id = self.Id;
    let cheatCode = self.cheatCode.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let inputTitle = self.inputTitle.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let Desc = self.Desc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CheatCodeListExcel::create(_fbb, &CheatCodeListExcelArgs{
      Id,
      cheatCode,
      inputTitle,
      Desc,
    })
  }
}
