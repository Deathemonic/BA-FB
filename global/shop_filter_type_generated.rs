// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SHOP_FILTER_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SHOP_FILTER_TYPE: i32 = 37;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SHOP_FILTER_TYPE: [ShopFilterType; 38] = [
  ShopFilterType::GachaTicket,
  ShopFilterType::SecretStone,
  ShopFilterType::SecretStone_1,
  ShopFilterType::SkillBook_Ultimate,
  ShopFilterType::ExSkill,
  ShopFilterType::SkillBook,
  ShopFilterType::Craft,
  ShopFilterType::AP,
  ShopFilterType::CharacterExpItem,
  ShopFilterType::Equip,
  ShopFilterType::Material,
  ShopFilterType::Creddit,
  ShopFilterType::Furniture,
  ShopFilterType::SelectItem,
  ShopFilterType::Currency,
  ShopFilterType::Hyakkiyako,
  ShopFilterType::RedWinter,
  ShopFilterType::Trinity,
  ShopFilterType::Gehenna,
  ShopFilterType::Abydos,
  ShopFilterType::Millennium,
  ShopFilterType::Arius,
  ShopFilterType::Shanhaijing,
  ShopFilterType::Valkyrie,
  ShopFilterType::SRT,
  ShopFilterType::Event,
  ShopFilterType::ChaserTotalTicket,
  ShopFilterType::SchoolTotalTicket,
  ShopFilterType::Highlander,
  ShopFilterType::ShopFilterDUMMY_2,
  ShopFilterType::ShopFilterDUMMY_3,
  ShopFilterType::ShopFilterDUMMY_4,
  ShopFilterType::ShopFilterDUMMY_5,
  ShopFilterType::ShopFilterDUMMY_6,
  ShopFilterType::ShopFilterDUMMY_7,
  ShopFilterType::ETC,
  ShopFilterType::Bundle,
  ShopFilterType::FavorItem,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ShopFilterType(pub i32);
#[allow(non_upper_case_globals)]
impl ShopFilterType {
  pub const GachaTicket: Self = Self(0);
  pub const SecretStone: Self = Self(1);
  pub const SecretStone_1: Self = Self(2);
  pub const SkillBook_Ultimate: Self = Self(3);
  pub const ExSkill: Self = Self(4);
  pub const SkillBook: Self = Self(5);
  pub const Craft: Self = Self(6);
  pub const AP: Self = Self(7);
  pub const CharacterExpItem: Self = Self(8);
  pub const Equip: Self = Self(9);
  pub const Material: Self = Self(10);
  pub const Creddit: Self = Self(11);
  pub const Furniture: Self = Self(12);
  pub const SelectItem: Self = Self(13);
  pub const Currency: Self = Self(14);
  pub const Hyakkiyako: Self = Self(15);
  pub const RedWinter: Self = Self(16);
  pub const Trinity: Self = Self(17);
  pub const Gehenna: Self = Self(18);
  pub const Abydos: Self = Self(19);
  pub const Millennium: Self = Self(20);
  pub const Arius: Self = Self(21);
  pub const Shanhaijing: Self = Self(22);
  pub const Valkyrie: Self = Self(23);
  pub const SRT: Self = Self(24);
  pub const Event: Self = Self(25);
  pub const ChaserTotalTicket: Self = Self(26);
  pub const SchoolTotalTicket: Self = Self(27);
  pub const Highlander: Self = Self(28);
  pub const ShopFilterDUMMY_2: Self = Self(29);
  pub const ShopFilterDUMMY_3: Self = Self(30);
  pub const ShopFilterDUMMY_4: Self = Self(31);
  pub const ShopFilterDUMMY_5: Self = Self(32);
  pub const ShopFilterDUMMY_6: Self = Self(33);
  pub const ShopFilterDUMMY_7: Self = Self(34);
  pub const ETC: Self = Self(35);
  pub const Bundle: Self = Self(36);
  pub const FavorItem: Self = Self(37);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 37;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::GachaTicket,
    Self::SecretStone,
    Self::SecretStone_1,
    Self::SkillBook_Ultimate,
    Self::ExSkill,
    Self::SkillBook,
    Self::Craft,
    Self::AP,
    Self::CharacterExpItem,
    Self::Equip,
    Self::Material,
    Self::Creddit,
    Self::Furniture,
    Self::SelectItem,
    Self::Currency,
    Self::Hyakkiyako,
    Self::RedWinter,
    Self::Trinity,
    Self::Gehenna,
    Self::Abydos,
    Self::Millennium,
    Self::Arius,
    Self::Shanhaijing,
    Self::Valkyrie,
    Self::SRT,
    Self::Event,
    Self::ChaserTotalTicket,
    Self::SchoolTotalTicket,
    Self::Highlander,
    Self::ShopFilterDUMMY_2,
    Self::ShopFilterDUMMY_3,
    Self::ShopFilterDUMMY_4,
    Self::ShopFilterDUMMY_5,
    Self::ShopFilterDUMMY_6,
    Self::ShopFilterDUMMY_7,
    Self::ETC,
    Self::Bundle,
    Self::FavorItem,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::GachaTicket => Some("GachaTicket"),
      Self::SecretStone => Some("SecretStone"),
      Self::SecretStone_1 => Some("SecretStone_1"),
      Self::SkillBook_Ultimate => Some("SkillBook_Ultimate"),
      Self::ExSkill => Some("ExSkill"),
      Self::SkillBook => Some("SkillBook"),
      Self::Craft => Some("Craft"),
      Self::AP => Some("AP"),
      Self::CharacterExpItem => Some("CharacterExpItem"),
      Self::Equip => Some("Equip"),
      Self::Material => Some("Material"),
      Self::Creddit => Some("Creddit"),
      Self::Furniture => Some("Furniture"),
      Self::SelectItem => Some("SelectItem"),
      Self::Currency => Some("Currency"),
      Self::Hyakkiyako => Some("Hyakkiyako"),
      Self::RedWinter => Some("RedWinter"),
      Self::Trinity => Some("Trinity"),
      Self::Gehenna => Some("Gehenna"),
      Self::Abydos => Some("Abydos"),
      Self::Millennium => Some("Millennium"),
      Self::Arius => Some("Arius"),
      Self::Shanhaijing => Some("Shanhaijing"),
      Self::Valkyrie => Some("Valkyrie"),
      Self::SRT => Some("SRT"),
      Self::Event => Some("Event"),
      Self::ChaserTotalTicket => Some("ChaserTotalTicket"),
      Self::SchoolTotalTicket => Some("SchoolTotalTicket"),
      Self::Highlander => Some("Highlander"),
      Self::ShopFilterDUMMY_2 => Some("ShopFilterDUMMY_2"),
      Self::ShopFilterDUMMY_3 => Some("ShopFilterDUMMY_3"),
      Self::ShopFilterDUMMY_4 => Some("ShopFilterDUMMY_4"),
      Self::ShopFilterDUMMY_5 => Some("ShopFilterDUMMY_5"),
      Self::ShopFilterDUMMY_6 => Some("ShopFilterDUMMY_6"),
      Self::ShopFilterDUMMY_7 => Some("ShopFilterDUMMY_7"),
      Self::ETC => Some("ETC"),
      Self::Bundle => Some("Bundle"),
      Self::FavorItem => Some("FavorItem"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ShopFilterType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for ShopFilterType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("ShopFilterType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for ShopFilterType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ShopFilterType {
    type Output = ShopFilterType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ShopFilterType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ShopFilterType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ShopFilterType {}
