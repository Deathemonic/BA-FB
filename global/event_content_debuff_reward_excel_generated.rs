// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentDebuffRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentDebuffRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentDebuffRewardExcel<'a> {
  type Inner = EventContentDebuffRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentDebuffRewardExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTSTAGEID: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTCONTENTITEMTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPERCENTAGE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentDebuffRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentDebuffRewardExcelArgs
  ) -> flatbuffers::WIPOffset<EventContentDebuffRewardExcel<'bldr>> {
    let mut builder = EventContentDebuffRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentDebuffReward");
      let x = args.RewardPercentage;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardPercentage(x);
      let x = args.EventStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventStageId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.EventContentItemType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventContentItemType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentDebuffRewardExcelT {
    let key = table_encryption_service::create_key(b"EventContentDebuffReward");
      let EventContentId = self.EventContentId();
      let EventStageId = self.EventStageId();
      let EventContentItemType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventContentItemType(), &key)
      } else {
        self.EventContentItemType()
      };
      let RewardPercentage = self.RewardPercentage();
    EventContentDebuffRewardExcelT {
      EventContentId,
      EventStageId,
      EventContentItemType,
      RewardPercentage,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDebuffRewardExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDebuffRewardExcel::VT_EVENTSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentItemType(&self) -> EventContentItemType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentItemType>(EventContentDebuffRewardExcel::VT_EVENTCONTENTITEMTYPE, Some(EventContentItemType::EventPoint)).unwrap()}
  }
  #[inline]
  pub fn RewardPercentage(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDebuffRewardExcel::VT_REWARDPERCENTAGE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentDebuffRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("EventStageId", Self::VT_EVENTSTAGEID, false)?
     .visit_field::<EventContentItemType>("EventContentItemType", Self::VT_EVENTCONTENTITEMTYPE, false)?
     .visit_field::<i64>("RewardPercentage", Self::VT_REWARDPERCENTAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentDebuffRewardExcelArgs {
    pub EventContentId: i64,
    pub EventStageId: i64,
    pub EventContentItemType: EventContentItemType,
    pub RewardPercentage: i64,
}
impl<'a> Default for EventContentDebuffRewardExcelArgs {
  #[inline]
  fn default() -> Self {
    EventContentDebuffRewardExcelArgs {
      EventContentId: 0,
      EventStageId: 0,
      EventContentItemType: EventContentItemType::EventPoint,
      RewardPercentage: 0,
    }
  }
}

impl Serialize for EventContentDebuffRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentDebuffRewardExcel", 4)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventStageId", &self.EventStageId())?;
      s.serialize_field("EventContentItemType", &self.EventContentItemType())?;
      s.serialize_field("RewardPercentage", &self.RewardPercentage())?;
    s.end()
  }
}

pub struct EventContentDebuffRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentDebuffRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentDebuffRewardExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventStageId(&mut self, EventStageId: i64) {
    self.fbb_.push_slot::<i64>(EventContentDebuffRewardExcel::VT_EVENTSTAGEID, EventStageId, 0);
  }
  #[inline]
  pub fn add_EventContentItemType(&mut self, EventContentItemType: EventContentItemType) {
    self.fbb_.push_slot::<EventContentItemType>(EventContentDebuffRewardExcel::VT_EVENTCONTENTITEMTYPE, EventContentItemType, EventContentItemType::EventPoint);
  }
  #[inline]
  pub fn add_RewardPercentage(&mut self, RewardPercentage: i64) {
    self.fbb_.push_slot::<i64>(EventContentDebuffRewardExcel::VT_REWARDPERCENTAGE, RewardPercentage, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentDebuffRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentDebuffRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentDebuffRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentDebuffRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentDebuffRewardExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventStageId", &self.EventStageId());
      ds.field("EventContentItemType", &self.EventContentItemType());
      ds.field("RewardPercentage", &self.RewardPercentage());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentDebuffRewardExcelT {
  pub EventContentId: i64,
  pub EventStageId: i64,
  pub EventContentItemType: EventContentItemType,
  pub RewardPercentage: i64,
}
impl Default for EventContentDebuffRewardExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventStageId: 0,
      EventContentItemType: EventContentItemType::EventPoint,
      RewardPercentage: 0,
    }
  }
}
impl EventContentDebuffRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentDebuffRewardExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventStageId = self.EventStageId;
    let EventContentItemType = self.EventContentItemType;
    let RewardPercentage = self.RewardPercentage;
    EventContentDebuffRewardExcel::create(_fbb, &EventContentDebuffRewardExcelArgs{
      EventContentId,
      EventStageId,
      EventContentItemType,
      RewardPercentage,
    })
  }
}
