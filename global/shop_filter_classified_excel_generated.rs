// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopFilterClassifiedExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopFilterClassifiedExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopFilterClassifiedExcel<'a> {
  type Inner = ShopFilterClassifiedExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopFilterClassifiedExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CATEGORYTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_CONSUMEPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_CONSUMEPARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_SHOPFILTERTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_GOODSID: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopFilterClassifiedExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopFilterClassifiedExcelArgs
  ) -> flatbuffers::WIPOffset<ShopFilterClassifiedExcel<'bldr>> {
    let mut builder = ShopFilterClassifiedExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShopFilterClassified");
      let x = args.GoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GoodsId(x);
      let x = args.ConsumeParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConsumeParcelId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.ShopFilterType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ShopFilterType(x);
      let x = args.ConsumeParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConsumeParcelType(x);
      let x = args.CategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CategoryType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ShopFilterClassifiedExcelT {
    let key = table_encryption_service::create_key(b"ShopFilterClassified");
      let Id = self.Id();
      let CategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CategoryType(), &key)
      } else {
        self.CategoryType()
      };
      let ConsumeParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConsumeParcelType(), &key)
      } else {
        self.ConsumeParcelType()
      };
      let ConsumeParcelId = self.ConsumeParcelId();
      let ShopFilterType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ShopFilterType(), &key)
      } else {
        self.ShopFilterType()
      };
      let GoodsId = self.GoodsId();
    ShopFilterClassifiedExcelT {
      Id,
      CategoryType,
      ConsumeParcelType,
      ConsumeParcelId,
      ShopFilterType,
      GoodsId,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopFilterClassifiedExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CategoryType(&self) -> ShopCategoryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopCategoryType>(ShopFilterClassifiedExcel::VT_CATEGORYTYPE, Some(ShopCategoryType::General)).unwrap()}
  }
  #[inline]
  pub fn ConsumeParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ShopFilterClassifiedExcel::VT_CONSUMEPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ConsumeParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopFilterClassifiedExcel::VT_CONSUMEPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopFilterType(&self) -> ShopFilterType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopFilterType>(ShopFilterClassifiedExcel::VT_SHOPFILTERTYPE, Some(ShopFilterType::GachaTicket)).unwrap()}
  }
  #[inline]
  pub fn GoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopFilterClassifiedExcel::VT_GOODSID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ShopFilterClassifiedExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ShopCategoryType>("CategoryType", Self::VT_CATEGORYTYPE, false)?
     .visit_field::<ParcelType>("ConsumeParcelType", Self::VT_CONSUMEPARCELTYPE, false)?
     .visit_field::<i64>("ConsumeParcelId", Self::VT_CONSUMEPARCELID, false)?
     .visit_field::<ShopFilterType>("ShopFilterType", Self::VT_SHOPFILTERTYPE, false)?
     .visit_field::<i64>("GoodsId", Self::VT_GOODSID, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopFilterClassifiedExcelArgs {
    pub Id: i64,
    pub CategoryType: ShopCategoryType,
    pub ConsumeParcelType: ParcelType,
    pub ConsumeParcelId: i64,
    pub ShopFilterType: ShopFilterType,
    pub GoodsId: i64,
}
impl<'a> Default for ShopFilterClassifiedExcelArgs {
  #[inline]
  fn default() -> Self {
    ShopFilterClassifiedExcelArgs {
      Id: 0,
      CategoryType: ShopCategoryType::General,
      ConsumeParcelType: ParcelType::None,
      ConsumeParcelId: 0,
      ShopFilterType: ShopFilterType::GachaTicket,
      GoodsId: 0,
    }
  }
}

impl Serialize for ShopFilterClassifiedExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopFilterClassifiedExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CategoryType", &self.CategoryType())?;
      s.serialize_field("ConsumeParcelType", &self.ConsumeParcelType())?;
      s.serialize_field("ConsumeParcelId", &self.ConsumeParcelId())?;
      s.serialize_field("ShopFilterType", &self.ShopFilterType())?;
      s.serialize_field("GoodsId", &self.GoodsId())?;
    s.end()
  }
}

pub struct ShopFilterClassifiedExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopFilterClassifiedExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ShopFilterClassifiedExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CategoryType(&mut self, CategoryType: ShopCategoryType) {
    self.fbb_.push_slot::<ShopCategoryType>(ShopFilterClassifiedExcel::VT_CATEGORYTYPE, CategoryType, ShopCategoryType::General);
  }
  #[inline]
  pub fn add_ConsumeParcelType(&mut self, ConsumeParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ShopFilterClassifiedExcel::VT_CONSUMEPARCELTYPE, ConsumeParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ConsumeParcelId(&mut self, ConsumeParcelId: i64) {
    self.fbb_.push_slot::<i64>(ShopFilterClassifiedExcel::VT_CONSUMEPARCELID, ConsumeParcelId, 0);
  }
  #[inline]
  pub fn add_ShopFilterType(&mut self, ShopFilterType: ShopFilterType) {
    self.fbb_.push_slot::<ShopFilterType>(ShopFilterClassifiedExcel::VT_SHOPFILTERTYPE, ShopFilterType, ShopFilterType::GachaTicket);
  }
  #[inline]
  pub fn add_GoodsId(&mut self, GoodsId: i64) {
    self.fbb_.push_slot::<i64>(ShopFilterClassifiedExcel::VT_GOODSID, GoodsId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopFilterClassifiedExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopFilterClassifiedExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopFilterClassifiedExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopFilterClassifiedExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopFilterClassifiedExcel");
      ds.field("Id", &self.Id());
      ds.field("CategoryType", &self.CategoryType());
      ds.field("ConsumeParcelType", &self.ConsumeParcelType());
      ds.field("ConsumeParcelId", &self.ConsumeParcelId());
      ds.field("ShopFilterType", &self.ShopFilterType());
      ds.field("GoodsId", &self.GoodsId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopFilterClassifiedExcelT {
  pub Id: i64,
  pub CategoryType: ShopCategoryType,
  pub ConsumeParcelType: ParcelType,
  pub ConsumeParcelId: i64,
  pub ShopFilterType: ShopFilterType,
  pub GoodsId: i64,
}
impl Default for ShopFilterClassifiedExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CategoryType: ShopCategoryType::General,
      ConsumeParcelType: ParcelType::None,
      ConsumeParcelId: 0,
      ShopFilterType: ShopFilterType::GachaTicket,
      GoodsId: 0,
    }
  }
}
impl ShopFilterClassifiedExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopFilterClassifiedExcel<'b>> {
    let Id = self.Id;
    let CategoryType = self.CategoryType;
    let ConsumeParcelType = self.ConsumeParcelType;
    let ConsumeParcelId = self.ConsumeParcelId;
    let ShopFilterType = self.ShopFilterType;
    let GoodsId = self.GoodsId;
    ShopFilterClassifiedExcel::create(_fbb, &ShopFilterClassifiedExcelArgs{
      Id,
      CategoryType,
      ConsumeParcelType,
      ConsumeParcelId,
      ShopFilterType,
      GoodsId,
    })
  }
}
