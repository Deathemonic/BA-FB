// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RootMotionFlatOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RootMotionFlat<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RootMotionFlat<'a> {
  type Inner = RootMotionFlat<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RootMotionFlat<'a> {
  pub const VT_FORMS: flatbuffers::VOffsetT = 4;
  pub const VT_EXSKILLS: flatbuffers::VOffsetT = 6;
  pub const VT_MOVELEFTOFFSET: flatbuffers::VOffsetT = 8;
  pub const VT_MOVERIGHTOFFSET: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RootMotionFlat { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RootMotionFlatArgs<'args>
  ) -> flatbuffers::WIPOffset<RootMotionFlat<'bldr>> {
    let mut builder = RootMotionFlatBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"RootMotio");
      if let Some(x) = args.MoveRightOffset {
        builder.add_MoveRightOffset(x);
      }
      if let Some(x) = args.MoveLeftOffset {
        builder.add_MoveLeftOffset(x);
      }
      if let Some(x) = args.ExSkills {
        builder.add_ExSkills(x);
      }
      if let Some(x) = args.Forms {
        builder.add_Forms(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> RootMotionFlatT {
    let key = table_encryption_service::create_key(b"RootMotio");
    let Forms = self.Forms().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let ExSkills = self.ExSkills().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let MoveLeftOffset = self.MoveLeftOffset().map(|x| {
      Box::new(x.unpack())
    });
    let MoveRightOffset = self.MoveRightOffset().map(|x| {
      Box::new(x.unpack())
    });
    RootMotionFlatT {
      Forms,
      ExSkills,
      MoveLeftOffset,
      MoveRightOffset,
    }
  }

  #[inline]
  pub fn Forms(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Form<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Form>>>>(RootMotionFlat::VT_FORMS, None)}
  }
  #[inline]
  pub fn ExSkills(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Motion<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Motion>>>>(RootMotionFlat::VT_EXSKILLS, None)}
  }
  #[inline]
  pub fn MoveLeftOffset(&self) -> Option<Motion<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Motion>>(RootMotionFlat::VT_MOVELEFTOFFSET, None)}
  }
  #[inline]
  pub fn MoveRightOffset(&self) -> Option<Motion<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Motion>>(RootMotionFlat::VT_MOVERIGHTOFFSET, None)}
  }
}

impl flatbuffers::Verifiable for RootMotionFlat<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Form>>>>("Forms", Self::VT_FORMS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Motion>>>>("ExSkills", Self::VT_EXSKILLS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Motion>>("MoveLeftOffset", Self::VT_MOVELEFTOFFSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Motion>>("MoveRightOffset", Self::VT_MOVERIGHTOFFSET, false)?
     .finish();
    Ok(())
  }
}
pub struct RootMotionFlatArgs<'a> {
    pub Forms: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Form<'a>>>>>,
    pub ExSkills: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Motion<'a>>>>>,
    pub MoveLeftOffset: Option<flatbuffers::WIPOffset<Motion<'a>>>,
    pub MoveRightOffset: Option<flatbuffers::WIPOffset<Motion<'a>>>,
}
impl<'a> Default for RootMotionFlatArgs<'a> {
  #[inline]
  fn default() -> Self {
    RootMotionFlatArgs {
      Forms: None,
      ExSkills: None,
      MoveLeftOffset: None,
      MoveRightOffset: None,
    }
  }
}

impl Serialize for RootMotionFlat<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RootMotionFlat", 4)?;
      if let Some(f) = self.Forms() {
        s.serialize_field("Forms", &f)?;
      } else {
        s.skip_field("Forms")?;
      }
      if let Some(f) = self.ExSkills() {
        s.serialize_field("ExSkills", &f)?;
      } else {
        s.skip_field("ExSkills")?;
      }
      if let Some(f) = self.MoveLeftOffset() {
        s.serialize_field("MoveLeftOffset", &f)?;
      } else {
        s.skip_field("MoveLeftOffset")?;
      }
      if let Some(f) = self.MoveRightOffset() {
        s.serialize_field("MoveRightOffset", &f)?;
      } else {
        s.skip_field("MoveRightOffset")?;
      }
    s.end()
  }
}

pub struct RootMotionFlatBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RootMotionFlatBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Forms(&mut self, Forms: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Form<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RootMotionFlat::VT_FORMS, Forms);
  }
  #[inline]
  pub fn add_ExSkills(&mut self, ExSkills: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Motion<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RootMotionFlat::VT_EXSKILLS, ExSkills);
  }
  #[inline]
  pub fn add_MoveLeftOffset(&mut self, MoveLeftOffset: flatbuffers::WIPOffset<Motion<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Motion>>(RootMotionFlat::VT_MOVELEFTOFFSET, MoveLeftOffset);
  }
  #[inline]
  pub fn add_MoveRightOffset(&mut self, MoveRightOffset: flatbuffers::WIPOffset<Motion<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Motion>>(RootMotionFlat::VT_MOVERIGHTOFFSET, MoveRightOffset);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RootMotionFlatBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RootMotionFlatBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RootMotionFlat<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RootMotionFlat<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RootMotionFlat");
      ds.field("Forms", &self.Forms());
      ds.field("ExSkills", &self.ExSkills());
      ds.field("MoveLeftOffset", &self.MoveLeftOffset());
      ds.field("MoveRightOffset", &self.MoveRightOffset());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RootMotionFlatT {
  pub Forms: Option<Vec<FormT>>,
  pub ExSkills: Option<Vec<MotionT>>,
  pub MoveLeftOffset: Option<Box<MotionT>>,
  pub MoveRightOffset: Option<Box<MotionT>>,
}
impl Default for RootMotionFlatT {
  fn default() -> Self {
    Self {
      Forms: None,
      ExSkills: None,
      MoveLeftOffset: None,
      MoveRightOffset: None,
    }
  }
}
impl RootMotionFlatT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RootMotionFlat<'b>> {
    let Forms = self.Forms.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let ExSkills = self.ExSkills.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let MoveLeftOffset = self.MoveLeftOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let MoveRightOffset = self.MoveRightOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    RootMotionFlat::create(_fbb, &RootMotionFlatArgs{
      Forms,
      ExSkills,
      MoveLeftOffset,
      MoveRightOffset,
    })
  }
}
