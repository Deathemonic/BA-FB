// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AniStateDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AniStateData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AniStateData<'a> {
  type Inner = AniStateData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AniStateData<'a> {
  pub const VT_STATENAME: flatbuffers::VOffsetT = 4;
  pub const VT_STATEPREFIX: flatbuffers::VOffsetT = 6;
  pub const VT_STATENAMEWITHPREFIX: flatbuffers::VOffsetT = 8;
  pub const VT_TAG: flatbuffers::VOffsetT = 10;
  pub const VT_SPEEDPARAMETERNAME: flatbuffers::VOffsetT = 12;
  pub const VT_SPEEDPARAMTER: flatbuffers::VOffsetT = 14;
  pub const VT_STATESPEED: flatbuffers::VOffsetT = 16;
  pub const VT_CLIPNAME: flatbuffers::VOffsetT = 18;
  pub const VT_LENGTH: flatbuffers::VOffsetT = 20;
  pub const VT_FRAMERATE: flatbuffers::VOffsetT = 22;
  pub const VT_ISLOOPING: flatbuffers::VOffsetT = 24;
  pub const VT_EVENTS: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AniStateData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AniStateDataArgs<'args>
  ) -> flatbuffers::WIPOffset<AniStateData<'bldr>> {
    let mut builder = AniStateDataBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AniStat");
      if let Some(x) = args.Events {
        builder.add_Events(x);
      }
      let x = args.FrameRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_FrameRate(x);
      let x = args.Length;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Length(x);
      if let Some(x) = args.ClipName {
        builder.add_ClipName(x);
      }
      let x = args.StateSpeed;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_StateSpeed(x);
      let x = args.SpeedParamter;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_SpeedParamter(x);
      if let Some(x) = args.SpeedParameterName {
        builder.add_SpeedParameterName(x);
      }
      if let Some(x) = args.Tag {
        builder.add_Tag(x);
      }
      if let Some(x) = args.StateNameWithPrefix {
        builder.add_StateNameWithPrefix(x);
      }
      if let Some(x) = args.StatePrefix {
        builder.add_StatePrefix(x);
      }
      if let Some(x) = args.StateName {
        builder.add_StateName(x);
      }
      builder.add_IsLooping(args.IsLooping);
    builder.finish()
  }

  pub fn unpack(&self) -> AniStateDataT {
    let key = table_encryption_service::create_key(b"AniStat");
    let StateName = self.StateName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StatePrefix = self.StatePrefix().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StateNameWithPrefix = self.StateNameWithPrefix().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Tag = self.Tag().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SpeedParameterName = self.SpeedParameterName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let SpeedParamter = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.SpeedParamter(), &key)
      } else {
        self.SpeedParamter()
      };
      let StateSpeed = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.StateSpeed(), &key)
      } else {
        self.StateSpeed()
      };
    let ClipName = self.ClipName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Length = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Length(), &key)
      } else {
        self.Length()
      };
      let FrameRate = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.FrameRate(), &key)
      } else {
        self.FrameRate()
      };
      let IsLooping = self.IsLooping();
    let Events = self.Events().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    AniStateDataT {
      StateName,
      StatePrefix,
      StateNameWithPrefix,
      Tag,
      SpeedParameterName,
      SpeedParamter,
      StateSpeed,
      ClipName,
      Length,
      FrameRate,
      IsLooping,
      Events,
    }
  }

  #[inline]
  pub fn StateName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniStateData::VT_STATENAME, None)}
  }
  #[inline]
  pub fn StatePrefix(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniStateData::VT_STATEPREFIX, None)}
  }
  #[inline]
  pub fn StateNameWithPrefix(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniStateData::VT_STATENAMEWITHPREFIX, None)}
  }
  #[inline]
  pub fn Tag(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniStateData::VT_TAG, None)}
  }
  #[inline]
  pub fn SpeedParameterName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniStateData::VT_SPEEDPARAMETERNAME, None)}
  }
  #[inline]
  pub fn SpeedParamter(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AniStateData::VT_SPEEDPARAMTER, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn StateSpeed(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AniStateData::VT_STATESPEED, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ClipName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniStateData::VT_CLIPNAME, None)}
  }
  #[inline]
  pub fn Length(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AniStateData::VT_LENGTH, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn FrameRate(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AniStateData::VT_FRAMERATE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IsLooping(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AniStateData::VT_ISLOOPING, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Events(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AniEventData<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AniEventData>>>>(AniStateData::VT_EVENTS, None)}
  }
}

impl flatbuffers::Verifiable for AniStateData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StateName", Self::VT_STATENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatePrefix", Self::VT_STATEPREFIX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StateNameWithPrefix", Self::VT_STATENAMEWITHPREFIX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Tag", Self::VT_TAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpeedParameterName", Self::VT_SPEEDPARAMETERNAME, false)?
     .visit_field::<f32>("SpeedParamter", Self::VT_SPEEDPARAMTER, false)?
     .visit_field::<f32>("StateSpeed", Self::VT_STATESPEED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ClipName", Self::VT_CLIPNAME, false)?
     .visit_field::<f32>("Length", Self::VT_LENGTH, false)?
     .visit_field::<f32>("FrameRate", Self::VT_FRAMERATE, false)?
     .visit_field::<bool>("IsLooping", Self::VT_ISLOOPING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AniEventData>>>>("Events", Self::VT_EVENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct AniStateDataArgs<'a> {
    pub StateName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StatePrefix: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StateNameWithPrefix: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Tag: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpeedParameterName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpeedParamter: f32,
    pub StateSpeed: f32,
    pub ClipName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Length: f32,
    pub FrameRate: f32,
    pub IsLooping: bool,
    pub Events: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AniEventData<'a>>>>>,
}
impl<'a> Default for AniStateDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    AniStateDataArgs {
      StateName: None,
      StatePrefix: None,
      StateNameWithPrefix: None,
      Tag: None,
      SpeedParameterName: None,
      SpeedParamter: 0.0,
      StateSpeed: 0.0,
      ClipName: None,
      Length: 0.0,
      FrameRate: 0.0,
      IsLooping: false,
      Events: None,
    }
  }
}

impl Serialize for AniStateData<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AniStateData", 12)?;
      if let Some(f) = self.StateName() {
        s.serialize_field("StateName", &f)?;
      } else {
        s.skip_field("StateName")?;
      }
      if let Some(f) = self.StatePrefix() {
        s.serialize_field("StatePrefix", &f)?;
      } else {
        s.skip_field("StatePrefix")?;
      }
      if let Some(f) = self.StateNameWithPrefix() {
        s.serialize_field("StateNameWithPrefix", &f)?;
      } else {
        s.skip_field("StateNameWithPrefix")?;
      }
      if let Some(f) = self.Tag() {
        s.serialize_field("Tag", &f)?;
      } else {
        s.skip_field("Tag")?;
      }
      if let Some(f) = self.SpeedParameterName() {
        s.serialize_field("SpeedParameterName", &f)?;
      } else {
        s.skip_field("SpeedParameterName")?;
      }
      s.serialize_field("SpeedParamter", &self.SpeedParamter())?;
      s.serialize_field("StateSpeed", &self.StateSpeed())?;
      if let Some(f) = self.ClipName() {
        s.serialize_field("ClipName", &f)?;
      } else {
        s.skip_field("ClipName")?;
      }
      s.serialize_field("Length", &self.Length())?;
      s.serialize_field("FrameRate", &self.FrameRate())?;
      s.serialize_field("IsLooping", &self.IsLooping())?;
      if let Some(f) = self.Events() {
        s.serialize_field("Events", &f)?;
      } else {
        s.skip_field("Events")?;
      }
    s.end()
  }
}

pub struct AniStateDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AniStateDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StateName(&mut self, StateName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniStateData::VT_STATENAME, StateName);
  }
  #[inline]
  pub fn add_StatePrefix(&mut self, StatePrefix: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniStateData::VT_STATEPREFIX, StatePrefix);
  }
  #[inline]
  pub fn add_StateNameWithPrefix(&mut self, StateNameWithPrefix: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniStateData::VT_STATENAMEWITHPREFIX, StateNameWithPrefix);
  }
  #[inline]
  pub fn add_Tag(&mut self, Tag: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniStateData::VT_TAG, Tag);
  }
  #[inline]
  pub fn add_SpeedParameterName(&mut self, SpeedParameterName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniStateData::VT_SPEEDPARAMETERNAME, SpeedParameterName);
  }
  #[inline]
  pub fn add_SpeedParamter(&mut self, SpeedParamter: f32) {
    self.fbb_.push_slot::<f32>(AniStateData::VT_SPEEDPARAMTER, SpeedParamter, 0.0);
  }
  #[inline]
  pub fn add_StateSpeed(&mut self, StateSpeed: f32) {
    self.fbb_.push_slot::<f32>(AniStateData::VT_STATESPEED, StateSpeed, 0.0);
  }
  #[inline]
  pub fn add_ClipName(&mut self, ClipName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniStateData::VT_CLIPNAME, ClipName);
  }
  #[inline]
  pub fn add_Length(&mut self, Length: f32) {
    self.fbb_.push_slot::<f32>(AniStateData::VT_LENGTH, Length, 0.0);
  }
  #[inline]
  pub fn add_FrameRate(&mut self, FrameRate: f32) {
    self.fbb_.push_slot::<f32>(AniStateData::VT_FRAMERATE, FrameRate, 0.0);
  }
  #[inline]
  pub fn add_IsLooping(&mut self, IsLooping: bool) {
    self.fbb_.push_slot::<bool>(AniStateData::VT_ISLOOPING, IsLooping, false);
  }
  #[inline]
  pub fn add_Events(&mut self, Events: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AniEventData<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniStateData::VT_EVENTS, Events);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AniStateDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AniStateDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AniStateData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AniStateData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AniStateData");
      ds.field("StateName", &self.StateName());
      ds.field("StatePrefix", &self.StatePrefix());
      ds.field("StateNameWithPrefix", &self.StateNameWithPrefix());
      ds.field("Tag", &self.Tag());
      ds.field("SpeedParameterName", &self.SpeedParameterName());
      ds.field("SpeedParamter", &self.SpeedParamter());
      ds.field("StateSpeed", &self.StateSpeed());
      ds.field("ClipName", &self.ClipName());
      ds.field("Length", &self.Length());
      ds.field("FrameRate", &self.FrameRate());
      ds.field("IsLooping", &self.IsLooping());
      ds.field("Events", &self.Events());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AniStateDataT {
  pub StateName: Option<String>,
  pub StatePrefix: Option<String>,
  pub StateNameWithPrefix: Option<String>,
  pub Tag: Option<String>,
  pub SpeedParameterName: Option<String>,
  pub SpeedParamter: f32,
  pub StateSpeed: f32,
  pub ClipName: Option<String>,
  pub Length: f32,
  pub FrameRate: f32,
  pub IsLooping: bool,
  pub Events: Option<Vec<AniEventDataT>>,
}
impl Default for AniStateDataT {
  fn default() -> Self {
    Self {
      StateName: None,
      StatePrefix: None,
      StateNameWithPrefix: None,
      Tag: None,
      SpeedParameterName: None,
      SpeedParamter: 0.0,
      StateSpeed: 0.0,
      ClipName: None,
      Length: 0.0,
      FrameRate: 0.0,
      IsLooping: false,
      Events: None,
    }
  }
}
impl AniStateDataT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AniStateData<'b>> {
    let StateName = self.StateName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StatePrefix = self.StatePrefix.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StateNameWithPrefix = self.StateNameWithPrefix.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Tag = self.Tag.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpeedParameterName = self.SpeedParameterName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpeedParamter = self.SpeedParamter;
    let StateSpeed = self.StateSpeed;
    let ClipName = self.ClipName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Length = self.Length;
    let FrameRate = self.FrameRate;
    let IsLooping = self.IsLooping;
    let Events = self.Events.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    AniStateData::create(_fbb, &AniStateDataArgs{
      StateName,
      StatePrefix,
      StateNameWithPrefix,
      Tag,
      SpeedParameterName,
      SpeedParamter,
      StateSpeed,
      ClipName,
      Length,
      FrameRate,
      IsLooping,
      Events,
    })
  }
}
