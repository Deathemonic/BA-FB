// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentCharacterBonusExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentCharacterBonusExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentCharacterBonusExcel<'a> {
  type Inner = EventContentCharacterBonusExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentCharacterBonusExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTCONTENTITEMTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_BONUSPERCENTAGE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentCharacterBonusExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentCharacterBonusExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentCharacterBonusExcel<'bldr>> {
    let mut builder = EventContentCharacterBonusExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentCharacterBonus");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.bonusPercentage {
        builder.add_bonusPercentage(x);
      }
      if let Some(x) = args.eventContentItemType {
        builder.add_eventContentItemType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentCharacterBonusExcelT {
    let key = table_encryption_service::create_key(b"EventContentCharacterBonus");
      let EventContentId = self.EventContentId();
      let CharacterId = self.CharacterId();
    let eventContentItemType = self.eventContentItemType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let bonusPercentage = self.bonusPercentage().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EventContentCharacterBonusExcelT {
      EventContentId,
      CharacterId,
      eventContentItemType,
      bonusPercentage,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentCharacterBonusExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentCharacterBonusExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn eventContentItemType(&self) -> Option<flatbuffers::Vector<'a, EventContentItemType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, EventContentItemType>>>(EventContentCharacterBonusExcel::VT_EVENTCONTENTITEMTYPE, None)}
  }
  #[inline]
  pub fn bonusPercentage(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentCharacterBonusExcel::VT_BONUSPERCENTAGE, None)}
  }
}

impl flatbuffers::Verifiable for EventContentCharacterBonusExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, EventContentItemType>>>("eventContentItemType", Self::VT_EVENTCONTENTITEMTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("bonusPercentage", Self::VT_BONUSPERCENTAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentCharacterBonusExcelArgs<'a> {
    pub EventContentId: i64,
    pub CharacterId: i64,
    pub eventContentItemType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, EventContentItemType>>>,
    pub bonusPercentage: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EventContentCharacterBonusExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentCharacterBonusExcelArgs {
      EventContentId: 0,
      CharacterId: 0,
      eventContentItemType: None,
      bonusPercentage: None,
    }
  }
}

impl Serialize for EventContentCharacterBonusExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentCharacterBonusExcel", 4)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.eventContentItemType() {
        s.serialize_field("eventContentItemType", &f)?;
      } else {
        s.skip_field("eventContentItemType")?;
      }
      if let Some(f) = self.bonusPercentage() {
        s.serialize_field("bonusPercentage", &f)?;
      } else {
        s.skip_field("bonusPercentage")?;
      }
    s.end()
  }
}

pub struct EventContentCharacterBonusExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentCharacterBonusExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentCharacterBonusExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(EventContentCharacterBonusExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_eventContentItemType(&mut self, eventContentItemType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , EventContentItemType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentCharacterBonusExcel::VT_EVENTCONTENTITEMTYPE, eventContentItemType);
  }
  #[inline]
  pub fn add_bonusPercentage(&mut self, bonusPercentage: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentCharacterBonusExcel::VT_BONUSPERCENTAGE, bonusPercentage);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentCharacterBonusExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentCharacterBonusExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentCharacterBonusExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentCharacterBonusExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentCharacterBonusExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("eventContentItemType", &self.eventContentItemType());
      ds.field("bonusPercentage", &self.bonusPercentage());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentCharacterBonusExcelT {
  pub EventContentId: i64,
  pub CharacterId: i64,
  pub eventContentItemType: Option<Vec<EventContentItemType>>,
  pub bonusPercentage: Option<Vec<i64>>,
}
impl Default for EventContentCharacterBonusExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      CharacterId: 0,
      eventContentItemType: None,
      bonusPercentage: None,
    }
  }
}
impl EventContentCharacterBonusExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentCharacterBonusExcel<'b>> {
    let EventContentId = self.EventContentId;
    let CharacterId = self.CharacterId;
    let eventContentItemType = self.eventContentItemType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let bonusPercentage = self.bonusPercentage.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentCharacterBonusExcel::create(_fbb, &EventContentCharacterBonusExcelArgs{
      EventContentId,
      CharacterId,
      eventContentItemType,
      bonusPercentage,
    })
  }
}
