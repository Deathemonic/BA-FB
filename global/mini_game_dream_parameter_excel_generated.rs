// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamParameterExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamParameterExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamParameterExcel<'a> {
  type Inner = MiniGameDreamParameterExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamParameterExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_PARAMETERTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 10;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 12;
  pub const VT_PARAMETERBASE: flatbuffers::VOffsetT = 14;
  pub const VT_PARAMETERBASEMAX: flatbuffers::VOffsetT = 16;
  pub const VT_PARAMETERMIN: flatbuffers::VOffsetT = 18;
  pub const VT_PARAMETERMAX: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamParameterExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamParameterExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamParameterExcel<'bldr>> {
    let mut builder = MiniGameDreamParameterExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamParameter");
      let x = args.ParameterMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParameterMax(x);
      let x = args.ParameterMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParameterMin(x);
      let x = args.ParameterBaseMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParameterBaseMax(x);
      let x = args.ParameterBase;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParameterBase(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.ParameterType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParameterType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamParameterExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamParameter");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let ParameterType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParameterType(), &key)
      } else {
        self.ParameterType()
      };
      let LocalizeEtcId = self.LocalizeEtcId();
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ParameterBase = self.ParameterBase();
      let ParameterBaseMax = self.ParameterBaseMax();
      let ParameterMin = self.ParameterMin();
      let ParameterMax = self.ParameterMax();
    MiniGameDreamParameterExcelT {
      Id,
      EventContentId,
      ParameterType,
      LocalizeEtcId,
      IconPath,
      ParameterBase,
      ParameterBaseMax,
      ParameterMin,
      ParameterMax,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamParameterExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamParameterExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParameterType(&self) -> DreamMakerParameterType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DreamMakerParameterType>(MiniGameDreamParameterExcel::VT_PARAMETERTYPE, Some(DreamMakerParameterType::None)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameDreamParameterExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamParameterExcel::VT_ICONPATH, None)}
  }
  #[inline]
  pub fn ParameterBase(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERBASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParameterBaseMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERBASEMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParameterMin(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParameterMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERMAX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamParameterExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<DreamMakerParameterType>("ParameterType", Self::VT_PARAMETERTYPE, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .visit_field::<i64>("ParameterBase", Self::VT_PARAMETERBASE, false)?
     .visit_field::<i64>("ParameterBaseMax", Self::VT_PARAMETERBASEMAX, false)?
     .visit_field::<i64>("ParameterMin", Self::VT_PARAMETERMIN, false)?
     .visit_field::<i64>("ParameterMax", Self::VT_PARAMETERMAX, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamParameterExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub ParameterType: DreamMakerParameterType,
    pub LocalizeEtcId: u32,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ParameterBase: i64,
    pub ParameterBaseMax: i64,
    pub ParameterMin: i64,
    pub ParameterMax: i64,
}
impl<'a> Default for MiniGameDreamParameterExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamParameterExcelArgs {
      Id: 0,
      EventContentId: 0,
      ParameterType: DreamMakerParameterType::None,
      LocalizeEtcId: 0,
      IconPath: None,
      ParameterBase: 0,
      ParameterBaseMax: 0,
      ParameterMin: 0,
      ParameterMax: 0,
    }
  }
}

impl Serialize for MiniGameDreamParameterExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamParameterExcel", 9)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("ParameterType", &self.ParameterType())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
      s.serialize_field("ParameterBase", &self.ParameterBase())?;
      s.serialize_field("ParameterBaseMax", &self.ParameterBaseMax())?;
      s.serialize_field("ParameterMin", &self.ParameterMin())?;
      s.serialize_field("ParameterMax", &self.ParameterMax())?;
    s.end()
  }
}

pub struct MiniGameDreamParameterExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamParameterExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamParameterExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamParameterExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_ParameterType(&mut self, ParameterType: DreamMakerParameterType) {
    self.fbb_.push_slot::<DreamMakerParameterType>(MiniGameDreamParameterExcel::VT_PARAMETERTYPE, ParameterType, DreamMakerParameterType::None);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(MiniGameDreamParameterExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamParameterExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn add_ParameterBase(&mut self, ParameterBase: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERBASE, ParameterBase, 0);
  }
  #[inline]
  pub fn add_ParameterBaseMax(&mut self, ParameterBaseMax: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERBASEMAX, ParameterBaseMax, 0);
  }
  #[inline]
  pub fn add_ParameterMin(&mut self, ParameterMin: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERMIN, ParameterMin, 0);
  }
  #[inline]
  pub fn add_ParameterMax(&mut self, ParameterMax: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamParameterExcel::VT_PARAMETERMAX, ParameterMax, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamParameterExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamParameterExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamParameterExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamParameterExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamParameterExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("ParameterType", &self.ParameterType());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("IconPath", &self.IconPath());
      ds.field("ParameterBase", &self.ParameterBase());
      ds.field("ParameterBaseMax", &self.ParameterBaseMax());
      ds.field("ParameterMin", &self.ParameterMin());
      ds.field("ParameterMax", &self.ParameterMax());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamParameterExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub ParameterType: DreamMakerParameterType,
  pub LocalizeEtcId: u32,
  pub IconPath: Option<String>,
  pub ParameterBase: i64,
  pub ParameterBaseMax: i64,
  pub ParameterMin: i64,
  pub ParameterMax: i64,
}
impl Default for MiniGameDreamParameterExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      ParameterType: DreamMakerParameterType::None,
      LocalizeEtcId: 0,
      IconPath: None,
      ParameterBase: 0,
      ParameterBaseMax: 0,
      ParameterMin: 0,
      ParameterMax: 0,
    }
  }
}
impl MiniGameDreamParameterExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamParameterExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let ParameterType = self.ParameterType;
    let LocalizeEtcId = self.LocalizeEtcId;
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ParameterBase = self.ParameterBase;
    let ParameterBaseMax = self.ParameterBaseMax;
    let ParameterMin = self.ParameterMin;
    let ParameterMax = self.ParameterMax;
    MiniGameDreamParameterExcel::create(_fbb, &MiniGameDreamParameterExcelArgs{
      Id,
      EventContentId,
      ParameterType,
      LocalizeEtcId,
      IconPath,
      ParameterBase,
      ParameterBaseMax,
      ParameterMin,
      ParameterMax,
    })
  }
}
