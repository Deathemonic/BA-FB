// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentShopInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentShopInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentShopInfoExcel<'a> {
  type Inner = EventContentShopInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentShopInfoExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_CATEGORYTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZECODE: flatbuffers::VOffsetT = 8;
  pub const VT_COSTPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_COSTPARCELID: flatbuffers::VOffsetT = 12;
  pub const VT_ISREFRESH: flatbuffers::VOffsetT = 14;
  pub const VT_ISSOLDOUTDIMMED: flatbuffers::VOffsetT = 16;
  pub const VT_AUTOREFRESHCOOLTIME: flatbuffers::VOffsetT = 18;
  pub const VT_REFRESHABLECOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_GOODSID: flatbuffers::VOffsetT = 22;
  pub const VT_OPENPERIODFROM: flatbuffers::VOffsetT = 24;
  pub const VT_OPENPERIODTO: flatbuffers::VOffsetT = 26;
  pub const VT_SHOPPRODUCTUPDATEDATE: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentShopInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentShopInfoExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentShopInfoExcel<'bldr>> {
    let mut builder = EventContentShopInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentShopInfo");
      let x = args.RefreshAbleCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RefreshAbleCount(x);
      let x = args.AutoRefreshCoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AutoRefreshCoolTime(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.ShopProductUpdateDate {
        builder.add_ShopProductUpdateDate(x);
      }
      if let Some(x) = args.OpenPeriodTo {
        builder.add_OpenPeriodTo(x);
      }
      if let Some(x) = args.OpenPeriodFrom {
        builder.add_OpenPeriodFrom(x);
      }
      if let Some(x) = args.goodsId {
        builder.add_goodsId(x);
      }
      if let Some(x) = args.costParcelId {
        builder.add_costParcelId(x);
      }
      if let Some(x) = args.costParcelType {
        builder.add_costParcelType(x);
      }
      let x = args.LocalizeCode;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeCode(x);
      let x = args.CategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CategoryType(x);
      builder.add_IsSoldOutDimmed(args.IsSoldOutDimmed);
      builder.add_IsRefresh(args.IsRefresh);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentShopInfoExcelT {
    let key = table_encryption_service::create_key(b"EventContentShopInfo");
      let EventContentId = self.EventContentId();
      let CategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CategoryType(), &key)
      } else {
        self.CategoryType()
      };
      let LocalizeCode = self.LocalizeCode();
    let costParcelType = self.costParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let costParcelId = self.costParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let IsRefresh = self.IsRefresh();
      let IsSoldOutDimmed = self.IsSoldOutDimmed();
      let AutoRefreshCoolTime = self.AutoRefreshCoolTime();
      let RefreshAbleCount = self.RefreshAbleCount();
    let goodsId = self.goodsId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let OpenPeriodFrom = self.OpenPeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let OpenPeriodTo = self.OpenPeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ShopProductUpdateDate = self.ShopProductUpdateDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentShopInfoExcelT {
      EventContentId,
      CategoryType,
      LocalizeCode,
      costParcelType,
      costParcelId,
      IsRefresh,
      IsSoldOutDimmed,
      AutoRefreshCoolTime,
      RefreshAbleCount,
      goodsId,
      OpenPeriodFrom,
      OpenPeriodTo,
      ShopProductUpdateDate,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentShopInfoExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CategoryType(&self) -> ShopCategoryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopCategoryType>(EventContentShopInfoExcel::VT_CATEGORYTYPE, Some(ShopCategoryType::General)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCode(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentShopInfoExcel::VT_LOCALIZECODE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn costParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentShopInfoExcel::VT_COSTPARCELTYPE, None)}
  }
  #[inline]
  pub fn costParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentShopInfoExcel::VT_COSTPARCELID, None)}
  }
  #[inline]
  pub fn IsRefresh(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentShopInfoExcel::VT_ISREFRESH, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsSoldOutDimmed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentShopInfoExcel::VT_ISSOLDOUTDIMMED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn AutoRefreshCoolTime(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentShopInfoExcel::VT_AUTOREFRESHCOOLTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RefreshAbleCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentShopInfoExcel::VT_REFRESHABLECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn goodsId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentShopInfoExcel::VT_GOODSID, None)}
  }
  #[inline]
  pub fn OpenPeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentShopInfoExcel::VT_OPENPERIODFROM, None)}
  }
  #[inline]
  pub fn OpenPeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentShopInfoExcel::VT_OPENPERIODTO, None)}
  }
  #[inline]
  pub fn ShopProductUpdateDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentShopInfoExcel::VT_SHOPPRODUCTUPDATEDATE, None)}
  }
}

impl flatbuffers::Verifiable for EventContentShopInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<ShopCategoryType>("CategoryType", Self::VT_CATEGORYTYPE, false)?
     .visit_field::<u32>("LocalizeCode", Self::VT_LOCALIZECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("costParcelType", Self::VT_COSTPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("costParcelId", Self::VT_COSTPARCELID, false)?
     .visit_field::<bool>("IsRefresh", Self::VT_ISREFRESH, false)?
     .visit_field::<bool>("IsSoldOutDimmed", Self::VT_ISSOLDOUTDIMMED, false)?
     .visit_field::<i64>("AutoRefreshCoolTime", Self::VT_AUTOREFRESHCOOLTIME, false)?
     .visit_field::<i64>("RefreshAbleCount", Self::VT_REFRESHABLECOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("goodsId", Self::VT_GOODSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OpenPeriodFrom", Self::VT_OPENPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OpenPeriodTo", Self::VT_OPENPERIODTO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShopProductUpdateDate", Self::VT_SHOPPRODUCTUPDATEDATE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentShopInfoExcelArgs<'a> {
    pub EventContentId: i64,
    pub CategoryType: ShopCategoryType,
    pub LocalizeCode: u32,
    pub costParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub costParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub IsRefresh: bool,
    pub IsSoldOutDimmed: bool,
    pub AutoRefreshCoolTime: i64,
    pub RefreshAbleCount: i64,
    pub goodsId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub OpenPeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OpenPeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShopProductUpdateDate: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentShopInfoExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentShopInfoExcelArgs {
      EventContentId: 0,
      CategoryType: ShopCategoryType::General,
      LocalizeCode: 0,
      costParcelType: None,
      costParcelId: None,
      IsRefresh: false,
      IsSoldOutDimmed: false,
      AutoRefreshCoolTime: 0,
      RefreshAbleCount: 0,
      goodsId: None,
      OpenPeriodFrom: None,
      OpenPeriodTo: None,
      ShopProductUpdateDate: None,
    }
  }
}

impl Serialize for EventContentShopInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentShopInfoExcel", 13)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("CategoryType", &self.CategoryType())?;
      s.serialize_field("LocalizeCode", &self.LocalizeCode())?;
      if let Some(f) = self.costParcelType() {
        s.serialize_field("costParcelType", &f)?;
      } else {
        s.skip_field("costParcelType")?;
      }
      if let Some(f) = self.costParcelId() {
        s.serialize_field("costParcelId", &f)?;
      } else {
        s.skip_field("costParcelId")?;
      }
      s.serialize_field("IsRefresh", &self.IsRefresh())?;
      s.serialize_field("IsSoldOutDimmed", &self.IsSoldOutDimmed())?;
      s.serialize_field("AutoRefreshCoolTime", &self.AutoRefreshCoolTime())?;
      s.serialize_field("RefreshAbleCount", &self.RefreshAbleCount())?;
      if let Some(f) = self.goodsId() {
        s.serialize_field("goodsId", &f)?;
      } else {
        s.skip_field("goodsId")?;
      }
      if let Some(f) = self.OpenPeriodFrom() {
        s.serialize_field("OpenPeriodFrom", &f)?;
      } else {
        s.skip_field("OpenPeriodFrom")?;
      }
      if let Some(f) = self.OpenPeriodTo() {
        s.serialize_field("OpenPeriodTo", &f)?;
      } else {
        s.skip_field("OpenPeriodTo")?;
      }
      if let Some(f) = self.ShopProductUpdateDate() {
        s.serialize_field("ShopProductUpdateDate", &f)?;
      } else {
        s.skip_field("ShopProductUpdateDate")?;
      }
    s.end()
  }
}

pub struct EventContentShopInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentShopInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentShopInfoExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_CategoryType(&mut self, CategoryType: ShopCategoryType) {
    self.fbb_.push_slot::<ShopCategoryType>(EventContentShopInfoExcel::VT_CATEGORYTYPE, CategoryType, ShopCategoryType::General);
  }
  #[inline]
  pub fn add_LocalizeCode(&mut self, LocalizeCode: u32) {
    self.fbb_.push_slot::<u32>(EventContentShopInfoExcel::VT_LOCALIZECODE, LocalizeCode, 0);
  }
  #[inline]
  pub fn add_costParcelType(&mut self, costParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentShopInfoExcel::VT_COSTPARCELTYPE, costParcelType);
  }
  #[inline]
  pub fn add_costParcelId(&mut self, costParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentShopInfoExcel::VT_COSTPARCELID, costParcelId);
  }
  #[inline]
  pub fn add_IsRefresh(&mut self, IsRefresh: bool) {
    self.fbb_.push_slot::<bool>(EventContentShopInfoExcel::VT_ISREFRESH, IsRefresh, false);
  }
  #[inline]
  pub fn add_IsSoldOutDimmed(&mut self, IsSoldOutDimmed: bool) {
    self.fbb_.push_slot::<bool>(EventContentShopInfoExcel::VT_ISSOLDOUTDIMMED, IsSoldOutDimmed, false);
  }
  #[inline]
  pub fn add_AutoRefreshCoolTime(&mut self, AutoRefreshCoolTime: i64) {
    self.fbb_.push_slot::<i64>(EventContentShopInfoExcel::VT_AUTOREFRESHCOOLTIME, AutoRefreshCoolTime, 0);
  }
  #[inline]
  pub fn add_RefreshAbleCount(&mut self, RefreshAbleCount: i64) {
    self.fbb_.push_slot::<i64>(EventContentShopInfoExcel::VT_REFRESHABLECOUNT, RefreshAbleCount, 0);
  }
  #[inline]
  pub fn add_goodsId(&mut self, goodsId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentShopInfoExcel::VT_GOODSID, goodsId);
  }
  #[inline]
  pub fn add_OpenPeriodFrom(&mut self, OpenPeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentShopInfoExcel::VT_OPENPERIODFROM, OpenPeriodFrom);
  }
  #[inline]
  pub fn add_OpenPeriodTo(&mut self, OpenPeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentShopInfoExcel::VT_OPENPERIODTO, OpenPeriodTo);
  }
  #[inline]
  pub fn add_ShopProductUpdateDate(&mut self, ShopProductUpdateDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentShopInfoExcel::VT_SHOPPRODUCTUPDATEDATE, ShopProductUpdateDate);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentShopInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentShopInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentShopInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentShopInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentShopInfoExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("CategoryType", &self.CategoryType());
      ds.field("LocalizeCode", &self.LocalizeCode());
      ds.field("costParcelType", &self.costParcelType());
      ds.field("costParcelId", &self.costParcelId());
      ds.field("IsRefresh", &self.IsRefresh());
      ds.field("IsSoldOutDimmed", &self.IsSoldOutDimmed());
      ds.field("AutoRefreshCoolTime", &self.AutoRefreshCoolTime());
      ds.field("RefreshAbleCount", &self.RefreshAbleCount());
      ds.field("goodsId", &self.goodsId());
      ds.field("OpenPeriodFrom", &self.OpenPeriodFrom());
      ds.field("OpenPeriodTo", &self.OpenPeriodTo());
      ds.field("ShopProductUpdateDate", &self.ShopProductUpdateDate());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentShopInfoExcelT {
  pub EventContentId: i64,
  pub CategoryType: ShopCategoryType,
  pub LocalizeCode: u32,
  pub costParcelType: Option<Vec<ParcelType>>,
  pub costParcelId: Option<Vec<i64>>,
  pub IsRefresh: bool,
  pub IsSoldOutDimmed: bool,
  pub AutoRefreshCoolTime: i64,
  pub RefreshAbleCount: i64,
  pub goodsId: Option<Vec<i64>>,
  pub OpenPeriodFrom: Option<String>,
  pub OpenPeriodTo: Option<String>,
  pub ShopProductUpdateDate: Option<String>,
}
impl Default for EventContentShopInfoExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      CategoryType: ShopCategoryType::General,
      LocalizeCode: 0,
      costParcelType: None,
      costParcelId: None,
      IsRefresh: false,
      IsSoldOutDimmed: false,
      AutoRefreshCoolTime: 0,
      RefreshAbleCount: 0,
      goodsId: None,
      OpenPeriodFrom: None,
      OpenPeriodTo: None,
      ShopProductUpdateDate: None,
    }
  }
}
impl EventContentShopInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentShopInfoExcel<'b>> {
    let EventContentId = self.EventContentId;
    let CategoryType = self.CategoryType;
    let LocalizeCode = self.LocalizeCode;
    let costParcelType = self.costParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let costParcelId = self.costParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IsRefresh = self.IsRefresh;
    let IsSoldOutDimmed = self.IsSoldOutDimmed;
    let AutoRefreshCoolTime = self.AutoRefreshCoolTime;
    let RefreshAbleCount = self.RefreshAbleCount;
    let goodsId = self.goodsId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let OpenPeriodFrom = self.OpenPeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OpenPeriodTo = self.OpenPeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShopProductUpdateDate = self.ShopProductUpdateDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentShopInfoExcel::create(_fbb, &EventContentShopInfoExcelArgs{
      EventContentId,
      CategoryType,
      LocalizeCode,
      costParcelType,
      costParcelId,
      IsRefresh,
      IsSoldOutDimmed,
      AutoRefreshCoolTime,
      RefreshAbleCount,
      goodsId,
      OpenPeriodFrom,
      OpenPeriodTo,
      ShopProductUpdateDate,
    })
  }
}
