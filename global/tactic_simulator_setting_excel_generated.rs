// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TacticSimulatorSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TacticSimulatorSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TacticSimulatorSettingExcel<'a> {
  type Inner = TacticSimulatorSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TacticSimulatorSettingExcel<'a> {
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 4;
  pub const VT_FIXEDECHELONID: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TacticSimulatorSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TacticSimulatorSettingExcelArgs
  ) -> flatbuffers::WIPOffset<TacticSimulatorSettingExcel<'bldr>> {
    let mut builder = TacticSimulatorSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TacticSimulatorSetting");
      let x = args.FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FixedEchelonId(x);
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TacticSimulatorSettingExcelT {
    let key = table_encryption_service::create_key(b"TacticSimulatorSetting");
      let GroundId = self.GroundId();
      let FixedEchelonId = self.FixedEchelonId();
    TacticSimulatorSettingExcelT {
      GroundId,
      FixedEchelonId,
    }
  }

  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticSimulatorSettingExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticSimulatorSettingExcel::VT_FIXEDECHELONID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TacticSimulatorSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<i64>("FixedEchelonId", Self::VT_FIXEDECHELONID, false)?
     .finish();
    Ok(())
  }
}
pub struct TacticSimulatorSettingExcelArgs {
    pub GroundId: i64,
    pub FixedEchelonId: i64,
}
impl<'a> Default for TacticSimulatorSettingExcelArgs {
  #[inline]
  fn default() -> Self {
    TacticSimulatorSettingExcelArgs {
      GroundId: 0,
      FixedEchelonId: 0,
    }
  }
}

impl Serialize for TacticSimulatorSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TacticSimulatorSettingExcel", 2)?;
      s.serialize_field("GroundId", &self.GroundId())?;
      s.serialize_field("FixedEchelonId", &self.FixedEchelonId())?;
    s.end()
  }
}

pub struct TacticSimulatorSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TacticSimulatorSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(TacticSimulatorSettingExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_FixedEchelonId(&mut self, FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(TacticSimulatorSettingExcel::VT_FIXEDECHELONID, FixedEchelonId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TacticSimulatorSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TacticSimulatorSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TacticSimulatorSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TacticSimulatorSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TacticSimulatorSettingExcel");
      ds.field("GroundId", &self.GroundId());
      ds.field("FixedEchelonId", &self.FixedEchelonId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TacticSimulatorSettingExcelT {
  pub GroundId: i64,
  pub FixedEchelonId: i64,
}
impl Default for TacticSimulatorSettingExcelT {
  fn default() -> Self {
    Self {
      GroundId: 0,
      FixedEchelonId: 0,
    }
  }
}
impl TacticSimulatorSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TacticSimulatorSettingExcel<'b>> {
    let GroundId = self.GroundId;
    let FixedEchelonId = self.FixedEchelonId;
    TacticSimulatorSettingExcel::create(_fbb, &TacticSimulatorSettingExcelArgs{
      GroundId,
      FixedEchelonId,
    })
  }
}
