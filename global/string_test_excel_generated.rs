// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StringTestExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StringTestExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StringTestExcel<'a> {
  type Inner = StringTestExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StringTestExcel<'a> {
  pub const VT_STRING: flatbuffers::VOffsetT = 4;
  pub const VT_SENTENCE1: flatbuffers::VOffsetT = 6;
  pub const VT_SCRIPT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StringTestExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StringTestExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<StringTestExcel<'bldr>> {
    let mut builder = StringTestExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"StringTest");
      if let Some(x) = args.Script {
        builder.add_Script(x);
      }
      if let Some(x) = args.sentence1 {
        builder.add_sentence1(x);
      }
      if let Some(x) = args.String {
        builder.add_String(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> StringTestExcelT {
    let key = table_encryption_service::create_key(b"StringTest");
    let String = self.String().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let sentence1 = self.sentence1().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Script = self.Script().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    StringTestExcelT {
      String,
      sentence1,
      Script,
    }
  }

  #[inline]
  pub fn String(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(StringTestExcel::VT_STRING, None)}
  }
  #[inline]
  pub fn sentence1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StringTestExcel::VT_SENTENCE1, None)}
  }
  #[inline]
  pub fn Script(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StringTestExcel::VT_SCRIPT, None)}
  }
}

impl flatbuffers::Verifiable for StringTestExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("String", Self::VT_STRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sentence1", Self::VT_SENTENCE1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Script", Self::VT_SCRIPT, false)?
     .finish();
    Ok(())
  }
}
pub struct StringTestExcelArgs<'a> {
    pub String: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sentence1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Script: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for StringTestExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    StringTestExcelArgs {
      String: None,
      sentence1: None,
      Script: None,
    }
  }
}

impl Serialize for StringTestExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StringTestExcel", 3)?;
      if let Some(f) = self.String() {
        s.serialize_field("String", &f)?;
      } else {
        s.skip_field("String")?;
      }
      if let Some(f) = self.sentence1() {
        s.serialize_field("sentence1", &f)?;
      } else {
        s.skip_field("sentence1")?;
      }
      if let Some(f) = self.Script() {
        s.serialize_field("Script", &f)?;
      } else {
        s.skip_field("Script")?;
      }
    s.end()
  }
}

pub struct StringTestExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StringTestExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_String(&mut self, String: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StringTestExcel::VT_STRING, String);
  }
  #[inline]
  pub fn add_sentence1(&mut self, sentence1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StringTestExcel::VT_SENTENCE1, sentence1);
  }
  #[inline]
  pub fn add_Script(&mut self, Script: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StringTestExcel::VT_SCRIPT, Script);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StringTestExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StringTestExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StringTestExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StringTestExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StringTestExcel");
      ds.field("String", &self.String());
      ds.field("sentence1", &self.sentence1());
      ds.field("Script", &self.Script());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StringTestExcelT {
  pub String: Option<Vec<String>>,
  pub sentence1: Option<String>,
  pub Script: Option<String>,
}
impl Default for StringTestExcelT {
  fn default() -> Self {
    Self {
      String: None,
      sentence1: None,
      Script: None,
    }
  }
}
impl StringTestExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<StringTestExcel<'b>> {
    let String = self.String.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sentence1 = self.sentence1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Script = self.Script.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    StringTestExcel::create(_fbb, &StringTestExcelArgs{
      String,
      sentence1,
      Script,
    })
  }
}
