// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocalizeCharProfileChangeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeCharProfileChangeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeCharProfileChangeExcel<'a> {
  type Inner = LocalizeCharProfileChangeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeCharProfileChangeExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_SCENARIOMODEID: flatbuffers::VOffsetT = 6;
  pub const VT_CHANGECHARACTERID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeCharProfileChangeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeCharProfileChangeExcelArgs
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileChangeExcel<'bldr>> {
    let mut builder = LocalizeCharProfileChangeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LocalizeCharProfileChange");
      let x = args.ChangeCharacterID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChangeCharacterID(x);
      let x = args.ScenarioModeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioModeId(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> LocalizeCharProfileChangeExcelT {
    let key = table_encryption_service::create_key(b"LocalizeCharProfileChange");
      let CharacterId = self.CharacterId();
      let ScenarioModeId = self.ScenarioModeId();
      let ChangeCharacterID = self.ChangeCharacterID();
    LocalizeCharProfileChangeExcelT {
      CharacterId,
      ScenarioModeId,
      ChangeCharacterID,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeCharProfileChangeExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioModeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeCharProfileChangeExcel::VT_SCENARIOMODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChangeCharacterID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeCharProfileChangeExcel::VT_CHANGECHARACTERID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LocalizeCharProfileChangeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<i64>("ScenarioModeId", Self::VT_SCENARIOMODEID, false)?
     .visit_field::<i64>("ChangeCharacterID", Self::VT_CHANGECHARACTERID, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeCharProfileChangeExcelArgs {
    pub CharacterId: i64,
    pub ScenarioModeId: i64,
    pub ChangeCharacterID: i64,
}
impl<'a> Default for LocalizeCharProfileChangeExcelArgs {
  #[inline]
  fn default() -> Self {
    LocalizeCharProfileChangeExcelArgs {
      CharacterId: 0,
      ScenarioModeId: 0,
      ChangeCharacterID: 0,
    }
  }
}

impl Serialize for LocalizeCharProfileChangeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LocalizeCharProfileChangeExcel", 3)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("ScenarioModeId", &self.ScenarioModeId())?;
      s.serialize_field("ChangeCharacterID", &self.ChangeCharacterID())?;
    s.end()
  }
}

pub struct LocalizeCharProfileChangeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeCharProfileChangeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(LocalizeCharProfileChangeExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_ScenarioModeId(&mut self, ScenarioModeId: i64) {
    self.fbb_.push_slot::<i64>(LocalizeCharProfileChangeExcel::VT_SCENARIOMODEID, ScenarioModeId, 0);
  }
  #[inline]
  pub fn add_ChangeCharacterID(&mut self, ChangeCharacterID: i64) {
    self.fbb_.push_slot::<i64>(LocalizeCharProfileChangeExcel::VT_CHANGECHARACTERID, ChangeCharacterID, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeCharProfileChangeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeCharProfileChangeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeCharProfileChangeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeCharProfileChangeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeCharProfileChangeExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("ScenarioModeId", &self.ScenarioModeId());
      ds.field("ChangeCharacterID", &self.ChangeCharacterID());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LocalizeCharProfileChangeExcelT {
  pub CharacterId: i64,
  pub ScenarioModeId: i64,
  pub ChangeCharacterID: i64,
}
impl Default for LocalizeCharProfileChangeExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      ScenarioModeId: 0,
      ChangeCharacterID: 0,
    }
  }
}
impl LocalizeCharProfileChangeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileChangeExcel<'b>> {
    let CharacterId = self.CharacterId;
    let ScenarioModeId = self.ScenarioModeId;
    let ChangeCharacterID = self.ChangeCharacterID;
    LocalizeCharProfileChangeExcel::create(_fbb, &LocalizeCharProfileChangeExcelArgs{
      CharacterId,
      ScenarioModeId,
      ChangeCharacterID,
    })
  }
}
