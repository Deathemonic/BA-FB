// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VoiceSkillUseExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VoiceSkillUseExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VoiceSkillUseExcel<'a> {
  type Inner = VoiceSkillUseExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VoiceSkillUseExcel<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_VOICEHASH: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VoiceSkillUseExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VoiceSkillUseExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<VoiceSkillUseExcel<'bldr>> {
    let mut builder = VoiceSkillUseExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"VoiceSkillUse");
      if let Some(x) = args.voiceHash {
        builder.add_voiceHash(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> VoiceSkillUseExcelT {
    let key = table_encryption_service::create_key(b"VoiceSkillUse");
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let voiceHash = self.voiceHash().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
    VoiceSkillUseExcelT {
      Name,
      voiceHash,
    }
  }

  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VoiceSkillUseExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn voiceHash(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(VoiceSkillUseExcel::VT_VOICEHASH, None)}
  }
}

impl flatbuffers::Verifiable for VoiceSkillUseExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("voiceHash", Self::VT_VOICEHASH, false)?
     .finish();
    Ok(())
  }
}
pub struct VoiceSkillUseExcelArgs<'a> {
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub voiceHash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for VoiceSkillUseExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    VoiceSkillUseExcelArgs {
      Name: None,
      voiceHash: None,
    }
  }
}

impl Serialize for VoiceSkillUseExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VoiceSkillUseExcel", 2)?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.voiceHash() {
        s.serialize_field("voiceHash", &f)?;
      } else {
        s.skip_field("voiceHash")?;
      }
    s.end()
  }
}

pub struct VoiceSkillUseExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VoiceSkillUseExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VoiceSkillUseExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_voiceHash(&mut self, voiceHash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VoiceSkillUseExcel::VT_VOICEHASH, voiceHash);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VoiceSkillUseExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VoiceSkillUseExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VoiceSkillUseExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VoiceSkillUseExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VoiceSkillUseExcel");
      ds.field("Name", &self.Name());
      ds.field("voiceHash", &self.voiceHash());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VoiceSkillUseExcelT {
  pub Name: Option<String>,
  pub voiceHash: Option<Vec<u32>>,
}
impl Default for VoiceSkillUseExcelT {
  fn default() -> Self {
    Self {
      Name: None,
      voiceHash: None,
    }
  }
}
impl VoiceSkillUseExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<VoiceSkillUseExcel<'b>> {
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let voiceHash = self.voiceHash.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    VoiceSkillUseExcel::create(_fbb, &VoiceSkillUseExcelArgs{
      Name,
      voiceHash,
    })
  }
}
