// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGOpenDialogExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGOpenDialogExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGOpenDialogExcel<'a> {
  type Inner = MinigameCCGOpenDialogExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGOpenDialogExcel<'a> {
  pub const VT_DIALOGID: flatbuffers::VOffsetT = 4;
  pub const VT_PLAYORDER: flatbuffers::VOffsetT = 6;
  pub const VT_CONDITIONCARD: flatbuffers::VOffsetT = 8;
  pub const VT_DIALOG: flatbuffers::VOffsetT = 10;
  pub const VT_DURATION: flatbuffers::VOffsetT = 12;
  pub const VT_VOICE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGOpenDialogExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGOpenDialogExcelArgs
  ) -> flatbuffers::WIPOffset<MinigameCCGOpenDialogExcel<'bldr>> {
    let mut builder = MinigameCCGOpenDialogExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGOpenDialog");
      let x = args.Duration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Duration(x);
      let x = args.ConditionCard;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionCard(x);
      let x = args.DialogId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DialogId(x);
      let x = args.Voice;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Voice(x);
      let x = args.Dialog;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Dialog(x);
      let x = args.PlayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PlayOrder(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGOpenDialogExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGOpenDialog");
      let DialogId = self.DialogId();
      let PlayOrder = self.PlayOrder();
      let ConditionCard = self.ConditionCard();
      let Dialog = self.Dialog();
      let Duration = self.Duration();
      let Voice = self.Voice();
    MinigameCCGOpenDialogExcelT {
      DialogId,
      PlayOrder,
      ConditionCard,
      Dialog,
      Duration,
      Voice,
    }
  }

  #[inline]
  pub fn DialogId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGOpenDialogExcel::VT_DIALOGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PlayOrder(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGOpenDialogExcel::VT_PLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConditionCard(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGOpenDialogExcel::VT_CONDITIONCARD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Dialog(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGOpenDialogExcel::VT_DIALOG, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Duration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGOpenDialogExcel::VT_DURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Voice(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGOpenDialogExcel::VT_VOICE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGOpenDialogExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("DialogId", Self::VT_DIALOGID, false)?
     .visit_field::<i32>("PlayOrder", Self::VT_PLAYORDER, false)?
     .visit_field::<i64>("ConditionCard", Self::VT_CONDITIONCARD, false)?
     .visit_field::<u32>("Dialog", Self::VT_DIALOG, false)?
     .visit_field::<i64>("Duration", Self::VT_DURATION, false)?
     .visit_field::<u32>("Voice", Self::VT_VOICE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGOpenDialogExcelArgs {
    pub DialogId: i64,
    pub PlayOrder: i32,
    pub ConditionCard: i64,
    pub Dialog: u32,
    pub Duration: i64,
    pub Voice: u32,
}
impl<'a> Default for MinigameCCGOpenDialogExcelArgs {
  #[inline]
  fn default() -> Self {
    MinigameCCGOpenDialogExcelArgs {
      DialogId: 0,
      PlayOrder: 0,
      ConditionCard: 0,
      Dialog: 0,
      Duration: 0,
      Voice: 0,
    }
  }
}

impl Serialize for MinigameCCGOpenDialogExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGOpenDialogExcel", 6)?;
      s.serialize_field("DialogId", &self.DialogId())?;
      s.serialize_field("PlayOrder", &self.PlayOrder())?;
      s.serialize_field("ConditionCard", &self.ConditionCard())?;
      s.serialize_field("Dialog", &self.Dialog())?;
      s.serialize_field("Duration", &self.Duration())?;
      s.serialize_field("Voice", &self.Voice())?;
    s.end()
  }
}

pub struct MinigameCCGOpenDialogExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGOpenDialogExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_DialogId(&mut self, DialogId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGOpenDialogExcel::VT_DIALOGID, DialogId, 0);
  }
  #[inline]
  pub fn add_PlayOrder(&mut self, PlayOrder: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGOpenDialogExcel::VT_PLAYORDER, PlayOrder, 0);
  }
  #[inline]
  pub fn add_ConditionCard(&mut self, ConditionCard: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGOpenDialogExcel::VT_CONDITIONCARD, ConditionCard, 0);
  }
  #[inline]
  pub fn add_Dialog(&mut self, Dialog: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGOpenDialogExcel::VT_DIALOG, Dialog, 0);
  }
  #[inline]
  pub fn add_Duration(&mut self, Duration: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGOpenDialogExcel::VT_DURATION, Duration, 0);
  }
  #[inline]
  pub fn add_Voice(&mut self, Voice: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGOpenDialogExcel::VT_VOICE, Voice, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGOpenDialogExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGOpenDialogExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGOpenDialogExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGOpenDialogExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGOpenDialogExcel");
      ds.field("DialogId", &self.DialogId());
      ds.field("PlayOrder", &self.PlayOrder());
      ds.field("ConditionCard", &self.ConditionCard());
      ds.field("Dialog", &self.Dialog());
      ds.field("Duration", &self.Duration());
      ds.field("Voice", &self.Voice());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGOpenDialogExcelT {
  pub DialogId: i64,
  pub PlayOrder: i32,
  pub ConditionCard: i64,
  pub Dialog: u32,
  pub Duration: i64,
  pub Voice: u32,
}
impl Default for MinigameCCGOpenDialogExcelT {
  fn default() -> Self {
    Self {
      DialogId: 0,
      PlayOrder: 0,
      ConditionCard: 0,
      Dialog: 0,
      Duration: 0,
      Voice: 0,
    }
  }
}
impl MinigameCCGOpenDialogExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGOpenDialogExcel<'b>> {
    let DialogId = self.DialogId;
    let PlayOrder = self.PlayOrder;
    let ConditionCard = self.ConditionCard;
    let Dialog = self.Dialog;
    let Duration = self.Duration;
    let Voice = self.Voice;
    MinigameCCGOpenDialogExcel::create(_fbb, &MinigameCCGOpenDialogExcelArgs{
      DialogId,
      PlayOrder,
      ConditionCard,
      Dialog,
      Duration,
      Voice,
    })
  }
}
