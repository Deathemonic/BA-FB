// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AssistEchelonTypeConvertExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AssistEchelonTypeConvertExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AssistEchelonTypeConvertExcel<'a> {
  type Inner = AssistEchelonTypeConvertExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AssistEchelonTypeConvertExcel<'a> {
  pub const VT_CONTENTS: flatbuffers::VOffsetT = 4;
  pub const VT_CONVERTTO: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AssistEchelonTypeConvertExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AssistEchelonTypeConvertExcelArgs
  ) -> flatbuffers::WIPOffset<AssistEchelonTypeConvertExcel<'bldr>> {
    let mut builder = AssistEchelonTypeConvertExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AssistEchelonTypeConvert");
      let x = args.ConvertTo;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConvertTo(x);
      let x = args.Contents;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Contents(x);
    builder.finish()
  }

  pub fn unpack(&self) -> AssistEchelonTypeConvertExcelT {
    let key = table_encryption_service::create_key(b"AssistEchelonTypeConvert");
      let Contents = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Contents(), &key)
      } else {
        self.Contents()
      };
      let ConvertTo = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConvertTo(), &key)
      } else {
        self.ConvertTo()
      };
    AssistEchelonTypeConvertExcelT {
      Contents,
      ConvertTo,
    }
  }

  #[inline]
  pub fn Contents(&self) -> EchelonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonType>(AssistEchelonTypeConvertExcel::VT_CONTENTS, Some(EchelonType::None)).unwrap()}
  }
  #[inline]
  pub fn ConvertTo(&self) -> EchelonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonType>(AssistEchelonTypeConvertExcel::VT_CONVERTTO, Some(EchelonType::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AssistEchelonTypeConvertExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<EchelonType>("Contents", Self::VT_CONTENTS, false)?
     .visit_field::<EchelonType>("ConvertTo", Self::VT_CONVERTTO, false)?
     .finish();
    Ok(())
  }
}
pub struct AssistEchelonTypeConvertExcelArgs {
    pub Contents: EchelonType,
    pub ConvertTo: EchelonType,
}
impl<'a> Default for AssistEchelonTypeConvertExcelArgs {
  #[inline]
  fn default() -> Self {
    AssistEchelonTypeConvertExcelArgs {
      Contents: EchelonType::None,
      ConvertTo: EchelonType::None,
    }
  }
}

impl Serialize for AssistEchelonTypeConvertExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AssistEchelonTypeConvertExcel", 2)?;
      s.serialize_field("Contents", &self.Contents())?;
      s.serialize_field("ConvertTo", &self.ConvertTo())?;
    s.end()
  }
}

pub struct AssistEchelonTypeConvertExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AssistEchelonTypeConvertExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Contents(&mut self, Contents: EchelonType) {
    self.fbb_.push_slot::<EchelonType>(AssistEchelonTypeConvertExcel::VT_CONTENTS, Contents, EchelonType::None);
  }
  #[inline]
  pub fn add_ConvertTo(&mut self, ConvertTo: EchelonType) {
    self.fbb_.push_slot::<EchelonType>(AssistEchelonTypeConvertExcel::VT_CONVERTTO, ConvertTo, EchelonType::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AssistEchelonTypeConvertExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AssistEchelonTypeConvertExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AssistEchelonTypeConvertExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AssistEchelonTypeConvertExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AssistEchelonTypeConvertExcel");
      ds.field("Contents", &self.Contents());
      ds.field("ConvertTo", &self.ConvertTo());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AssistEchelonTypeConvertExcelT {
  pub Contents: EchelonType,
  pub ConvertTo: EchelonType,
}
impl Default for AssistEchelonTypeConvertExcelT {
  fn default() -> Self {
    Self {
      Contents: EchelonType::None,
      ConvertTo: EchelonType::None,
    }
  }
}
impl AssistEchelonTypeConvertExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AssistEchelonTypeConvertExcel<'b>> {
    let Contents = self.Contents;
    let ConvertTo = self.ConvertTo;
    AssistEchelonTypeConvertExcel::create(_fbb, &AssistEchelonTypeConvertExcelArgs{
      Contents,
      ConvertTo,
    })
  }
}
