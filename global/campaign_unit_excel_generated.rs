// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CampaignUnitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CampaignUnitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CampaignUnitExcel<'a> {
  type Inner = CampaignUnitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CampaignUnitExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_KEY: flatbuffers::VOffsetT = 6;
  pub const VT_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 10;
  pub const VT_STRATEGYPREFABNAME: flatbuffers::VOffsetT = 12;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_CLEARSCENARIOGROUPID: flatbuffers::VOffsetT = 16;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 18;
  pub const VT_MOVERANGE: flatbuffers::VOffsetT = 20;
  pub const VT_AIMOVETYPE: flatbuffers::VOffsetT = 22;
  pub const VT_GRADE: flatbuffers::VOffsetT = 24;
  pub const VT_ENVIRONMENTTYPE: flatbuffers::VOffsetT = 26;
  pub const VT_SCALE: flatbuffers::VOffsetT = 28;
  pub const VT_ISTACTICSKIP: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CampaignUnitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CampaignUnitExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CampaignUnitExcel<'bldr>> {
    let mut builder = CampaignUnitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CampaignUnit");
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.Scale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Scale(x);
      let x = args.EnvironmentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EnvironmentType(x);
      let x = args.Grade;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Grade(x);
      let x = args.AIMoveType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_AIMoveType(x);
      let x = args.MoveRange;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MoveRange(x);
      if let Some(x) = args.ClearScenarioGroupId {
        builder.add_ClearScenarioGroupId(x);
      }
      if let Some(x) = args.EnterScenarioGroupId {
        builder.add_EnterScenarioGroupId(x);
      }
      if let Some(x) = args.StrategyPrefabName {
        builder.add_StrategyPrefabName(x);
      }
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      let x = args.Key;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Key(x);
      builder.add_IsTacticSkip(args.IsTacticSkip);
    builder.finish()
  }

  pub fn unpack(&self) -> CampaignUnitExcelT {
    let key = table_encryption_service::create_key(b"CampaignUnit");
      let Id = self.Id();
      let Key = self.Key();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StrategyPrefabName = self.StrategyPrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EnterScenarioGroupId = self.EnterScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let GroundId = self.GroundId();
      let MoveRange = self.MoveRange();
      let AIMoveType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.AIMoveType(), &key)
      } else {
        self.AIMoveType()
      };
      let Grade = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Grade(), &key)
      } else {
        self.Grade()
      };
      let EnvironmentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EnvironmentType(), &key)
      } else {
        self.EnvironmentType()
      };
      let Scale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Scale(), &key)
      } else {
        self.Scale()
      };
      let IsTacticSkip = self.IsTacticSkip();
    CampaignUnitExcelT {
      Id,
      Key,
      Name,
      PrefabName,
      StrategyPrefabName,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      GroundId,
      MoveRange,
      AIMoveType,
      Grade,
      EnvironmentType,
      Scale,
      IsTacticSkip,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignUnitExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Key(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CampaignUnitExcel::VT_KEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignUnitExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignUnitExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn StrategyPrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignUnitExcel::VT_STRATEGYPREFABNAME, None)}
  }
  #[inline]
  pub fn EnterScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignUnitExcel::VT_ENTERSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn ClearScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignUnitExcel::VT_CLEARSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignUnitExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MoveRange(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CampaignUnitExcel::VT_MOVERANGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AIMoveType(&self) -> StrategyAIType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StrategyAIType>(CampaignUnitExcel::VT_AIMOVETYPE, Some(StrategyAIType::None)).unwrap()}
  }
  #[inline]
  pub fn Grade(&self) -> HexaUnitGrade {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<HexaUnitGrade>(CampaignUnitExcel::VT_GRADE, Some(HexaUnitGrade::Grade1)).unwrap()}
  }
  #[inline]
  pub fn EnvironmentType(&self) -> TacticEnvironment {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticEnvironment>(CampaignUnitExcel::VT_ENVIRONMENTTYPE, Some(TacticEnvironment::None)).unwrap()}
  }
  #[inline]
  pub fn Scale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CampaignUnitExcel::VT_SCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IsTacticSkip(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CampaignUnitExcel::VT_ISTACTICSKIP, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CampaignUnitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("Key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyPrefabName", Self::VT_STRATEGYPREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("EnterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ClearScenarioGroupId", Self::VT_CLEARSCENARIOGROUPID, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<i32>("MoveRange", Self::VT_MOVERANGE, false)?
     .visit_field::<StrategyAIType>("AIMoveType", Self::VT_AIMOVETYPE, false)?
     .visit_field::<HexaUnitGrade>("Grade", Self::VT_GRADE, false)?
     .visit_field::<TacticEnvironment>("EnvironmentType", Self::VT_ENVIRONMENTTYPE, false)?
     .visit_field::<f32>("Scale", Self::VT_SCALE, false)?
     .visit_field::<bool>("IsTacticSkip", Self::VT_ISTACTICSKIP, false)?
     .finish();
    Ok(())
  }
}
pub struct CampaignUnitExcelArgs<'a> {
    pub Id: i64,
    pub Key: u32,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyPrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EnterScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ClearScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub GroundId: i64,
    pub MoveRange: i32,
    pub AIMoveType: StrategyAIType,
    pub Grade: HexaUnitGrade,
    pub EnvironmentType: TacticEnvironment,
    pub Scale: f32,
    pub IsTacticSkip: bool,
}
impl<'a> Default for CampaignUnitExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CampaignUnitExcelArgs {
      Id: 0,
      Key: 0,
      Name: None,
      PrefabName: None,
      StrategyPrefabName: None,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      GroundId: 0,
      MoveRange: 0,
      AIMoveType: StrategyAIType::None,
      Grade: HexaUnitGrade::Grade1,
      EnvironmentType: TacticEnvironment::None,
      Scale: 0.0,
      IsTacticSkip: false,
    }
  }
}

impl Serialize for CampaignUnitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CampaignUnitExcel", 14)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Key", &self.Key())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      if let Some(f) = self.StrategyPrefabName() {
        s.serialize_field("StrategyPrefabName", &f)?;
      } else {
        s.skip_field("StrategyPrefabName")?;
      }
      if let Some(f) = self.EnterScenarioGroupId() {
        s.serialize_field("EnterScenarioGroupId", &f)?;
      } else {
        s.skip_field("EnterScenarioGroupId")?;
      }
      if let Some(f) = self.ClearScenarioGroupId() {
        s.serialize_field("ClearScenarioGroupId", &f)?;
      } else {
        s.skip_field("ClearScenarioGroupId")?;
      }
      s.serialize_field("GroundId", &self.GroundId())?;
      s.serialize_field("MoveRange", &self.MoveRange())?;
      s.serialize_field("AIMoveType", &self.AIMoveType())?;
      s.serialize_field("Grade", &self.Grade())?;
      s.serialize_field("EnvironmentType", &self.EnvironmentType())?;
      s.serialize_field("Scale", &self.Scale())?;
      s.serialize_field("IsTacticSkip", &self.IsTacticSkip())?;
    s.end()
  }
}

pub struct CampaignUnitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CampaignUnitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CampaignUnitExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Key(&mut self, Key: u32) {
    self.fbb_.push_slot::<u32>(CampaignUnitExcel::VT_KEY, Key, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignUnitExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignUnitExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_StrategyPrefabName(&mut self, StrategyPrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignUnitExcel::VT_STRATEGYPREFABNAME, StrategyPrefabName);
  }
  #[inline]
  pub fn add_EnterScenarioGroupId(&mut self, EnterScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignUnitExcel::VT_ENTERSCENARIOGROUPID, EnterScenarioGroupId);
  }
  #[inline]
  pub fn add_ClearScenarioGroupId(&mut self, ClearScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignUnitExcel::VT_CLEARSCENARIOGROUPID, ClearScenarioGroupId);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(CampaignUnitExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_MoveRange(&mut self, MoveRange: i32) {
    self.fbb_.push_slot::<i32>(CampaignUnitExcel::VT_MOVERANGE, MoveRange, 0);
  }
  #[inline]
  pub fn add_AIMoveType(&mut self, AIMoveType: StrategyAIType) {
    self.fbb_.push_slot::<StrategyAIType>(CampaignUnitExcel::VT_AIMOVETYPE, AIMoveType, StrategyAIType::None);
  }
  #[inline]
  pub fn add_Grade(&mut self, Grade: HexaUnitGrade) {
    self.fbb_.push_slot::<HexaUnitGrade>(CampaignUnitExcel::VT_GRADE, Grade, HexaUnitGrade::Grade1);
  }
  #[inline]
  pub fn add_EnvironmentType(&mut self, EnvironmentType: TacticEnvironment) {
    self.fbb_.push_slot::<TacticEnvironment>(CampaignUnitExcel::VT_ENVIRONMENTTYPE, EnvironmentType, TacticEnvironment::None);
  }
  #[inline]
  pub fn add_Scale(&mut self, Scale: f32) {
    self.fbb_.push_slot::<f32>(CampaignUnitExcel::VT_SCALE, Scale, 0.0);
  }
  #[inline]
  pub fn add_IsTacticSkip(&mut self, IsTacticSkip: bool) {
    self.fbb_.push_slot::<bool>(CampaignUnitExcel::VT_ISTACTICSKIP, IsTacticSkip, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CampaignUnitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CampaignUnitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CampaignUnitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CampaignUnitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CampaignUnitExcel");
      ds.field("Id", &self.Id());
      ds.field("Key", &self.Key());
      ds.field("Name", &self.Name());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("StrategyPrefabName", &self.StrategyPrefabName());
      ds.field("EnterScenarioGroupId", &self.EnterScenarioGroupId());
      ds.field("ClearScenarioGroupId", &self.ClearScenarioGroupId());
      ds.field("GroundId", &self.GroundId());
      ds.field("MoveRange", &self.MoveRange());
      ds.field("AIMoveType", &self.AIMoveType());
      ds.field("Grade", &self.Grade());
      ds.field("EnvironmentType", &self.EnvironmentType());
      ds.field("Scale", &self.Scale());
      ds.field("IsTacticSkip", &self.IsTacticSkip());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CampaignUnitExcelT {
  pub Id: i64,
  pub Key: u32,
  pub Name: Option<String>,
  pub PrefabName: Option<String>,
  pub StrategyPrefabName: Option<String>,
  pub EnterScenarioGroupId: Option<Vec<i64>>,
  pub ClearScenarioGroupId: Option<Vec<i64>>,
  pub GroundId: i64,
  pub MoveRange: i32,
  pub AIMoveType: StrategyAIType,
  pub Grade: HexaUnitGrade,
  pub EnvironmentType: TacticEnvironment,
  pub Scale: f32,
  pub IsTacticSkip: bool,
}
impl Default for CampaignUnitExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Key: 0,
      Name: None,
      PrefabName: None,
      StrategyPrefabName: None,
      EnterScenarioGroupId: None,
      ClearScenarioGroupId: None,
      GroundId: 0,
      MoveRange: 0,
      AIMoveType: StrategyAIType::None,
      Grade: HexaUnitGrade::Grade1,
      EnvironmentType: TacticEnvironment::None,
      Scale: 0.0,
      IsTacticSkip: false,
    }
  }
}
impl CampaignUnitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CampaignUnitExcel<'b>> {
    let Id = self.Id;
    let Key = self.Key;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyPrefabName = self.StrategyPrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EnterScenarioGroupId = self.EnterScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ClearScenarioGroupId = self.ClearScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let GroundId = self.GroundId;
    let MoveRange = self.MoveRange;
    let AIMoveType = self.AIMoveType;
    let Grade = self.Grade;
    let EnvironmentType = self.EnvironmentType;
    let Scale = self.Scale;
    let IsTacticSkip = self.IsTacticSkip;
    CampaignUnitExcel::create(_fbb, &CampaignUnitExcelArgs{
      Id,
      Key,
      Name,
      PrefabName,
      StrategyPrefabName,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      GroundId,
      MoveRange,
      AIMoveType,
      Grade,
      EnvironmentType,
      Scale,
      IsTacticSkip,
    })
  }
}
