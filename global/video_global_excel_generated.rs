// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum Video_GlobalExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Video_GlobalExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Video_GlobalExcel<'a> {
  type Inner = Video_GlobalExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Video_GlobalExcel<'a> {
  pub const VT_VIDEOID: flatbuffers::VOffsetT = 4;
  pub const VT_VIDEOPATHKR: flatbuffers::VOffsetT = 6;
  pub const VT_VIDEOTEENPATHKR: flatbuffers::VOffsetT = 8;
  pub const VT_VIDEOPATHTH: flatbuffers::VOffsetT = 10;
  pub const VT_VIDEOTEENPATHTH: flatbuffers::VOffsetT = 12;
  pub const VT_VIDEOPATHTW: flatbuffers::VOffsetT = 14;
  pub const VT_VIDEOTEENPATHTW: flatbuffers::VOffsetT = 16;
  pub const VT_VIDEOPATHEN: flatbuffers::VOffsetT = 18;
  pub const VT_VIDEOTEENPATHEN: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Video_GlobalExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Video_GlobalExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<Video_GlobalExcel<'bldr>> {
    let mut builder = Video_GlobalExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Video_Global");
      let x = args.VideoId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_VideoId(x);
      if let Some(x) = args.VideoTeenPathEn {
        builder.add_VideoTeenPathEn(x);
      }
      if let Some(x) = args.VideoPathEn {
        builder.add_VideoPathEn(x);
      }
      if let Some(x) = args.VideoTeenPathTw {
        builder.add_VideoTeenPathTw(x);
      }
      if let Some(x) = args.VideoPathTw {
        builder.add_VideoPathTw(x);
      }
      if let Some(x) = args.VideoTeenPathTh {
        builder.add_VideoTeenPathTh(x);
      }
      if let Some(x) = args.VideoPathTh {
        builder.add_VideoPathTh(x);
      }
      if let Some(x) = args.VideoTeenPathKr {
        builder.add_VideoTeenPathKr(x);
      }
      if let Some(x) = args.VideoPathKr {
        builder.add_VideoPathKr(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> Video_GlobalExcelT {
    let key = table_encryption_service::create_key(b"Video_Global");
      let VideoId = self.VideoId();
    let VideoPathKr = self.VideoPathKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoTeenPathKr = self.VideoTeenPathKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoPathTh = self.VideoPathTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoTeenPathTh = self.VideoTeenPathTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoPathTw = self.VideoPathTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoTeenPathTw = self.VideoTeenPathTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoPathEn = self.VideoPathEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoTeenPathEn = self.VideoTeenPathEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    Video_GlobalExcelT {
      VideoId,
      VideoPathKr,
      VideoTeenPathKr,
      VideoPathTh,
      VideoTeenPathTh,
      VideoPathTw,
      VideoTeenPathTw,
      VideoPathEn,
      VideoTeenPathEn,
    }
  }

  #[inline]
  pub fn VideoId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(Video_GlobalExcel::VT_VIDEOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VideoPathKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOPATHKR, None)}
  }
  #[inline]
  pub fn VideoTeenPathKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOTEENPATHKR, None)}
  }
  #[inline]
  pub fn VideoPathTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOPATHTH, None)}
  }
  #[inline]
  pub fn VideoTeenPathTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOTEENPATHTH, None)}
  }
  #[inline]
  pub fn VideoPathTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOPATHTW, None)}
  }
  #[inline]
  pub fn VideoTeenPathTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOTEENPATHTW, None)}
  }
  #[inline]
  pub fn VideoPathEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOPATHEN, None)}
  }
  #[inline]
  pub fn VideoTeenPathEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Video_GlobalExcel::VT_VIDEOTEENPATHEN, None)}
  }
}

impl flatbuffers::Verifiable for Video_GlobalExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("VideoId", Self::VT_VIDEOID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoPathKr", Self::VT_VIDEOPATHKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoTeenPathKr", Self::VT_VIDEOTEENPATHKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoPathTh", Self::VT_VIDEOPATHTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoTeenPathTh", Self::VT_VIDEOTEENPATHTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoPathTw", Self::VT_VIDEOPATHTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoTeenPathTw", Self::VT_VIDEOTEENPATHTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoPathEn", Self::VT_VIDEOPATHEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VideoTeenPathEn", Self::VT_VIDEOTEENPATHEN, false)?
     .finish();
    Ok(())
  }
}
pub struct Video_GlobalExcelArgs<'a> {
    pub VideoId: i64,
    pub VideoPathKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoTeenPathKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoPathTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoTeenPathTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoPathTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoTeenPathTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoPathEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoTeenPathEn: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Video_GlobalExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    Video_GlobalExcelArgs {
      VideoId: 0,
      VideoPathKr: None,
      VideoTeenPathKr: None,
      VideoPathTh: None,
      VideoTeenPathTh: None,
      VideoPathTw: None,
      VideoTeenPathTw: None,
      VideoPathEn: None,
      VideoTeenPathEn: None,
    }
  }
}

impl Serialize for Video_GlobalExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Video_GlobalExcel", 9)?;
      s.serialize_field("VideoId", &self.VideoId())?;
      if let Some(f) = self.VideoPathKr() {
        s.serialize_field("VideoPathKr", &f)?;
      } else {
        s.skip_field("VideoPathKr")?;
      }
      if let Some(f) = self.VideoTeenPathKr() {
        s.serialize_field("VideoTeenPathKr", &f)?;
      } else {
        s.skip_field("VideoTeenPathKr")?;
      }
      if let Some(f) = self.VideoPathTh() {
        s.serialize_field("VideoPathTh", &f)?;
      } else {
        s.skip_field("VideoPathTh")?;
      }
      if let Some(f) = self.VideoTeenPathTh() {
        s.serialize_field("VideoTeenPathTh", &f)?;
      } else {
        s.skip_field("VideoTeenPathTh")?;
      }
      if let Some(f) = self.VideoPathTw() {
        s.serialize_field("VideoPathTw", &f)?;
      } else {
        s.skip_field("VideoPathTw")?;
      }
      if let Some(f) = self.VideoTeenPathTw() {
        s.serialize_field("VideoTeenPathTw", &f)?;
      } else {
        s.skip_field("VideoTeenPathTw")?;
      }
      if let Some(f) = self.VideoPathEn() {
        s.serialize_field("VideoPathEn", &f)?;
      } else {
        s.skip_field("VideoPathEn")?;
      }
      if let Some(f) = self.VideoTeenPathEn() {
        s.serialize_field("VideoTeenPathEn", &f)?;
      } else {
        s.skip_field("VideoTeenPathEn")?;
      }
    s.end()
  }
}

pub struct Video_GlobalExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Video_GlobalExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_VideoId(&mut self, VideoId: i64) {
    self.fbb_.push_slot::<i64>(Video_GlobalExcel::VT_VIDEOID, VideoId, 0);
  }
  #[inline]
  pub fn add_VideoPathKr(&mut self, VideoPathKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOPATHKR, VideoPathKr);
  }
  #[inline]
  pub fn add_VideoTeenPathKr(&mut self, VideoTeenPathKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOTEENPATHKR, VideoTeenPathKr);
  }
  #[inline]
  pub fn add_VideoPathTh(&mut self, VideoPathTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOPATHTH, VideoPathTh);
  }
  #[inline]
  pub fn add_VideoTeenPathTh(&mut self, VideoTeenPathTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOTEENPATHTH, VideoTeenPathTh);
  }
  #[inline]
  pub fn add_VideoPathTw(&mut self, VideoPathTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOPATHTW, VideoPathTw);
  }
  #[inline]
  pub fn add_VideoTeenPathTw(&mut self, VideoTeenPathTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOTEENPATHTW, VideoTeenPathTw);
  }
  #[inline]
  pub fn add_VideoPathEn(&mut self, VideoPathEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOPATHEN, VideoPathEn);
  }
  #[inline]
  pub fn add_VideoTeenPathEn(&mut self, VideoTeenPathEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Video_GlobalExcel::VT_VIDEOTEENPATHEN, VideoTeenPathEn);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Video_GlobalExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Video_GlobalExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Video_GlobalExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Video_GlobalExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Video_GlobalExcel");
      ds.field("VideoId", &self.VideoId());
      ds.field("VideoPathKr", &self.VideoPathKr());
      ds.field("VideoTeenPathKr", &self.VideoTeenPathKr());
      ds.field("VideoPathTh", &self.VideoPathTh());
      ds.field("VideoTeenPathTh", &self.VideoTeenPathTh());
      ds.field("VideoPathTw", &self.VideoPathTw());
      ds.field("VideoTeenPathTw", &self.VideoTeenPathTw());
      ds.field("VideoPathEn", &self.VideoPathEn());
      ds.field("VideoTeenPathEn", &self.VideoTeenPathEn());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Video_GlobalExcelT {
  pub VideoId: i64,
  pub VideoPathKr: Option<String>,
  pub VideoTeenPathKr: Option<String>,
  pub VideoPathTh: Option<String>,
  pub VideoTeenPathTh: Option<String>,
  pub VideoPathTw: Option<String>,
  pub VideoTeenPathTw: Option<String>,
  pub VideoPathEn: Option<String>,
  pub VideoTeenPathEn: Option<String>,
}
impl Default for Video_GlobalExcelT {
  fn default() -> Self {
    Self {
      VideoId: 0,
      VideoPathKr: None,
      VideoTeenPathKr: None,
      VideoPathTh: None,
      VideoTeenPathTh: None,
      VideoPathTw: None,
      VideoTeenPathTw: None,
      VideoPathEn: None,
      VideoTeenPathEn: None,
    }
  }
}
impl Video_GlobalExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Video_GlobalExcel<'b>> {
    let VideoId = self.VideoId;
    let VideoPathKr = self.VideoPathKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoTeenPathKr = self.VideoTeenPathKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoPathTh = self.VideoPathTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoTeenPathTh = self.VideoTeenPathTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoPathTw = self.VideoPathTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoTeenPathTw = self.VideoTeenPathTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoPathEn = self.VideoPathEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoTeenPathEn = self.VideoTeenPathEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Video_GlobalExcel::create(_fbb, &Video_GlobalExcelArgs{
      VideoId,
      VideoPathKr,
      VideoTeenPathKr,
      VideoPathTh,
      VideoTeenPathTh,
      VideoPathTw,
      VideoTeenPathTw,
      VideoPathEn,
      VideoTeenPathEn,
    })
  }
}
