// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GachaCraftNodeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GachaCraftNodeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GachaCraftNodeExcel<'a> {
  type Inner = GachaCraftNodeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GachaCraftNodeExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TIER: flatbuffers::VOffsetT = 6;
  pub const VT_QUICKCRAFTNODEDISPLAYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_NODEQUALITY: flatbuffers::VOffsetT = 10;
  pub const VT_ICON: flatbuffers::VOffsetT = 12;
  pub const VT_LOCALIZEKEY: flatbuffers::VOffsetT = 14;
  pub const VT_PROPERTY: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GachaCraftNodeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GachaCraftNodeExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<GachaCraftNodeExcel<'bldr>> {
    let mut builder = GachaCraftNodeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GachaCraftNode");
      let x = args.Property;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Property(x);
      let x = args.NodeQuality;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NodeQuality(x);
      let x = args.Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Tier(x);
      let x = args.ID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ID(x);
      let x = args.LocalizeKey;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeKey(x);
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      let x = args.QuickCraftNodeDisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_QuickCraftNodeDisplayOrder(x);
    builder.finish()
  }

  pub fn unpack(&self) -> GachaCraftNodeExcelT {
    let key = table_encryption_service::create_key(b"GachaCraftNode");
      let ID = self.ID();
      let Tier = self.Tier();
      let QuickCraftNodeDisplayOrder = self.QuickCraftNodeDisplayOrder();
      let NodeQuality = self.NodeQuality();
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeKey = self.LocalizeKey();
      let Property = self.Property();
    GachaCraftNodeExcelT {
      ID,
      Tier,
      QuickCraftNodeDisplayOrder,
      NodeQuality,
      Icon,
      LocalizeKey,
      Property,
    }
  }

  #[inline]
  pub fn ID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCraftNodeExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tier(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCraftNodeExcel::VT_TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn QuickCraftNodeDisplayOrder(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GachaCraftNodeExcel::VT_QUICKCRAFTNODEDISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NodeQuality(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCraftNodeExcel::VT_NODEQUALITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GachaCraftNodeExcel::VT_ICON, None)}
  }
  #[inline]
  pub fn LocalizeKey(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(GachaCraftNodeExcel::VT_LOCALIZEKEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Property(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaCraftNodeExcel::VT_PROPERTY, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GachaCraftNodeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ID", Self::VT_ID, false)?
     .visit_field::<i64>("Tier", Self::VT_TIER, false)?
     .visit_field::<i32>("QuickCraftNodeDisplayOrder", Self::VT_QUICKCRAFTNODEDISPLAYORDER, false)?
     .visit_field::<i64>("NodeQuality", Self::VT_NODEQUALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .visit_field::<u32>("LocalizeKey", Self::VT_LOCALIZEKEY, false)?
     .visit_field::<i64>("Property", Self::VT_PROPERTY, false)?
     .finish();
    Ok(())
  }
}
pub struct GachaCraftNodeExcelArgs<'a> {
    pub ID: i64,
    pub Tier: i64,
    pub QuickCraftNodeDisplayOrder: i32,
    pub NodeQuality: i64,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeKey: u32,
    pub Property: i64,
}
impl<'a> Default for GachaCraftNodeExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    GachaCraftNodeExcelArgs {
      ID: 0,
      Tier: 0,
      QuickCraftNodeDisplayOrder: 0,
      NodeQuality: 0,
      Icon: None,
      LocalizeKey: 0,
      Property: 0,
    }
  }
}

impl Serialize for GachaCraftNodeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GachaCraftNodeExcel", 7)?;
      s.serialize_field("ID", &self.ID())?;
      s.serialize_field("Tier", &self.Tier())?;
      s.serialize_field("QuickCraftNodeDisplayOrder", &self.QuickCraftNodeDisplayOrder())?;
      s.serialize_field("NodeQuality", &self.NodeQuality())?;
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
      s.serialize_field("LocalizeKey", &self.LocalizeKey())?;
      s.serialize_field("Property", &self.Property())?;
    s.end()
  }
}

pub struct GachaCraftNodeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GachaCraftNodeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ID(&mut self, ID: i64) {
    self.fbb_.push_slot::<i64>(GachaCraftNodeExcel::VT_ID, ID, 0);
  }
  #[inline]
  pub fn add_Tier(&mut self, Tier: i64) {
    self.fbb_.push_slot::<i64>(GachaCraftNodeExcel::VT_TIER, Tier, 0);
  }
  #[inline]
  pub fn add_QuickCraftNodeDisplayOrder(&mut self, QuickCraftNodeDisplayOrder: i32) {
    self.fbb_.push_slot::<i32>(GachaCraftNodeExcel::VT_QUICKCRAFTNODEDISPLAYORDER, QuickCraftNodeDisplayOrder, 0);
  }
  #[inline]
  pub fn add_NodeQuality(&mut self, NodeQuality: i64) {
    self.fbb_.push_slot::<i64>(GachaCraftNodeExcel::VT_NODEQUALITY, NodeQuality, 0);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GachaCraftNodeExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn add_LocalizeKey(&mut self, LocalizeKey: u32) {
    self.fbb_.push_slot::<u32>(GachaCraftNodeExcel::VT_LOCALIZEKEY, LocalizeKey, 0);
  }
  #[inline]
  pub fn add_Property(&mut self, Property: i64) {
    self.fbb_.push_slot::<i64>(GachaCraftNodeExcel::VT_PROPERTY, Property, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GachaCraftNodeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GachaCraftNodeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GachaCraftNodeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GachaCraftNodeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GachaCraftNodeExcel");
      ds.field("ID", &self.ID());
      ds.field("Tier", &self.Tier());
      ds.field("QuickCraftNodeDisplayOrder", &self.QuickCraftNodeDisplayOrder());
      ds.field("NodeQuality", &self.NodeQuality());
      ds.field("Icon", &self.Icon());
      ds.field("LocalizeKey", &self.LocalizeKey());
      ds.field("Property", &self.Property());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GachaCraftNodeExcelT {
  pub ID: i64,
  pub Tier: i64,
  pub QuickCraftNodeDisplayOrder: i32,
  pub NodeQuality: i64,
  pub Icon: Option<String>,
  pub LocalizeKey: u32,
  pub Property: i64,
}
impl Default for GachaCraftNodeExcelT {
  fn default() -> Self {
    Self {
      ID: 0,
      Tier: 0,
      QuickCraftNodeDisplayOrder: 0,
      NodeQuality: 0,
      Icon: None,
      LocalizeKey: 0,
      Property: 0,
    }
  }
}
impl GachaCraftNodeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GachaCraftNodeExcel<'b>> {
    let ID = self.ID;
    let Tier = self.Tier;
    let QuickCraftNodeDisplayOrder = self.QuickCraftNodeDisplayOrder;
    let NodeQuality = self.NodeQuality;
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeKey = self.LocalizeKey;
    let Property = self.Property;
    GachaCraftNodeExcel::create(_fbb, &GachaCraftNodeExcelArgs{
      ID,
      Tier,
      QuickCraftNodeDisplayOrder,
      NodeQuality,
      Icon,
      LocalizeKey,
      Property,
    })
  }
}
