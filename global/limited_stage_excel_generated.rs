// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LimitedStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LimitedStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LimitedStageExcel<'a> {
  type Inner = LimitedStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LimitedStageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_SEASONID: flatbuffers::VOffsetT = 8;
  pub const VT_STAGEDIFFICULTY: flatbuffers::VOffsetT = 10;
  pub const VT_STAGENUMBER: flatbuffers::VOffsetT = 12;
  pub const VT_STAGEDISPLAY: flatbuffers::VOffsetT = 14;
  pub const VT_PREVSTAGEID: flatbuffers::VOffsetT = 16;
  pub const VT_OPENDATE: flatbuffers::VOffsetT = 18;
  pub const VT_OPENEVENTPOINT: flatbuffers::VOffsetT = 20;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 22;
  pub const VT_STAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_STAGEENTERCOSTID: flatbuffers::VOffsetT = 26;
  pub const VT_STAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 28;
  pub const VT_STAGEENTERECHELONCOUNT: flatbuffers::VOffsetT = 30;
  pub const VT_STARCONDITIONTACTICRANKSCOUNT: flatbuffers::VOffsetT = 32;
  pub const VT_STARCONDITIONTURNCOUNT: flatbuffers::VOffsetT = 34;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 36;
  pub const VT_CLEARSCENARIOGROUPID: flatbuffers::VOffsetT = 38;
  pub const VT_STRATEGYMAP: flatbuffers::VOffsetT = 40;
  pub const VT_STRATEGYMAPBG: flatbuffers::VOffsetT = 42;
  pub const VT_STAGEREWARDID: flatbuffers::VOffsetT = 44;
  pub const VT_MAXTURN: flatbuffers::VOffsetT = 46;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 48;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 50;
  pub const VT_BGMID: flatbuffers::VOffsetT = 52;
  pub const VT_STRATEGYENVIRONMENT: flatbuffers::VOffsetT = 54;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 56;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 58;
  pub const VT_BGMID: flatbuffers::VOffsetT = 60;
  pub const VT_INSTANTCLEAR: flatbuffers::VOffsetT = 62;
  pub const VT_BUFFCONTENTID: flatbuffers::VOffsetT = 64;
  pub const VT_CHALLENGEDISPLAY: flatbuffers::VOffsetT = 66;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LimitedStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LimitedStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LimitedStageExcel<'bldr>> {
    let mut builder = LimitedStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LimitedStage");
      let x = args.BuffContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BuffContentId(x);
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.GroundID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundID(x);
      let x = args.StageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageRewardId(x);
      let x = args.StarConditionTurnCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StarConditionTurnCount(x);
      let x = args.StarConditionTacticRankSCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StarConditionTacticRankSCount(x);
      let x = args.StageEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterCostId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.OpenEventPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenEventPoint(x);
      let x = args.OpenDate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenDate(x);
      let x = args.PrevStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevStageId(x);
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
      let x = args.StrategyEnvironment;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StrategyEnvironment(x);
      if let Some(x) = args.BgmId {
        builder.add_BgmId(x);
      }
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      let x = args.MaxTurn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxTurn(x);
      if let Some(x) = args.StrategyMapBG {
        builder.add_StrategyMapBG(x);
      }
      if let Some(x) = args.StrategyMap {
        builder.add_StrategyMap(x);
      }
      if let Some(x) = args.clearScenarioGroupId {
        builder.add_clearScenarioGroupId(x);
      }
      if let Some(x) = args.enterScenarioGroupId {
        builder.add_enterScenarioGroupId(x);
      }
      let x = args.StageEnterEchelonCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterEchelonCount(x);
      let x = args.StageEnterCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterCostAmount(x);
      let x = args.StageEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageEnterCostType(x);
      let x = args.StageDisplay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageDisplay(x);
      if let Some(x) = args.StageNumber {
        builder.add_StageNumber(x);
      }
      let x = args.StageDifficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageDifficulty(x);
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      builder.add_ChallengeDisplay(args.ChallengeDisplay);
      builder.add_InstantClear(args.InstantClear);
    builder.finish()
  }

  pub fn unpack(&self) -> LimitedStageExcelT {
    let key = table_encryption_service::create_key(b"LimitedStage");
      let Id = self.Id();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let SeasonId = self.SeasonId();
      let StageDifficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageDifficulty(), &key)
      } else {
        self.StageDifficulty()
      };
    let StageNumber = self.StageNumber().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StageDisplay = self.StageDisplay();
      let PrevStageId = self.PrevStageId();
      let OpenDate = self.OpenDate();
      let OpenEventPoint = self.OpenEventPoint();
      let BattleDuration = self.BattleDuration();
      let StageEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageEnterCostType(), &key)
      } else {
        self.StageEnterCostType()
      };
      let StageEnterCostId = self.StageEnterCostId();
      let StageEnterCostAmount = self.StageEnterCostAmount();
      let StageEnterEchelonCount = self.StageEnterEchelonCount();
      let StarConditionTacticRankSCount = self.StarConditionTacticRankSCount();
      let StarConditionTurnCount = self.StarConditionTurnCount();
    let enterScenarioGroupId = self.enterScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let clearScenarioGroupId = self.clearScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StrategyMap = self.StrategyMap().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StrategyMapBG = self.StrategyMapBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StageRewardId = self.StageRewardId();
      let MaxTurn = self.MaxTurn();
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let RecommandLevel = self.RecommandLevel();
    let BgmId = self.BgmId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StrategyEnvironment = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StrategyEnvironment(), &key)
      } else {
        self.StrategyEnvironment()
      };
      let GroundID = self.GroundID();
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let BGMId = self.BGMId();
      let InstantClear = self.InstantClear();
      let BuffContentId = self.BuffContentId();
      let ChallengeDisplay = self.ChallengeDisplay();
    LimitedStageExcelT {
      Id,
      Name,
      SeasonId,
      StageDifficulty,
      StageNumber,
      StageDisplay,
      PrevStageId,
      OpenDate,
      OpenEventPoint,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterEchelonCount,
      StarConditionTacticRankSCount,
      StarConditionTurnCount,
      enterScenarioGroupId,
      clearScenarioGroupId,
      StrategyMap,
      StrategyMapBG,
      StageRewardId,
      MaxTurn,
      StageTopography,
      RecommandLevel,
      BgmId,
      StrategyEnvironment,
      GroundID,
      ContentType,
      BGMId,
      InstantClear,
      BuffContentId,
      ChallengeDisplay,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitedStageExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageDifficulty(&self) -> StageDifficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageDifficulty>(LimitedStageExcel::VT_STAGEDIFFICULTY, Some(StageDifficulty::None)).unwrap()}
  }
  #[inline]
  pub fn StageNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitedStageExcel::VT_STAGENUMBER, None)}
  }
  #[inline]
  pub fn StageDisplay(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedStageExcel::VT_STAGEDISPLAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrevStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_PREVSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenDate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_OPENDATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenEventPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_OPENEVENTPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(LimitedStageExcel::VT_STAGEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_STAGEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedStageExcel::VT_STAGEENTERCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelonCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedStageExcel::VT_STAGEENTERECHELONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarConditionTacticRankSCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_STARCONDITIONTACTICRANKSCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarConditionTurnCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_STARCONDITIONTURNCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn enterScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(LimitedStageExcel::VT_ENTERSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn clearScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(LimitedStageExcel::VT_CLEARSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn StrategyMap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitedStageExcel::VT_STRATEGYMAP, None)}
  }
  #[inline]
  pub fn StrategyMapBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitedStageExcel::VT_STRATEGYMAPBG, None)}
  }
  #[inline]
  pub fn StageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_STAGEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxTurn(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedStageExcel::VT_MAXTURN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(LimitedStageExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedStageExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BgmId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitedStageExcel::VT_BGMID, None)}
  }
  #[inline]
  pub fn StrategyEnvironment(&self) -> StrategyEnvironment {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StrategyEnvironment>(LimitedStageExcel::VT_STRATEGYENVIRONMENT, Some(StrategyEnvironment::None)).unwrap()}
  }
  #[inline]
  pub fn GroundID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(LimitedStageExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InstantClear(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LimitedStageExcel::VT_INSTANTCLEAR, Some(false)).unwrap()}
  }
  #[inline]
  pub fn BuffContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LimitedStageExcel::VT_BUFFCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChallengeDisplay(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LimitedStageExcel::VT_CHALLENGEDISPLAY, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LimitedStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<StageDifficulty>("StageDifficulty", Self::VT_STAGEDIFFICULTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StageNumber", Self::VT_STAGENUMBER, false)?
     .visit_field::<i32>("StageDisplay", Self::VT_STAGEDISPLAY, false)?
     .visit_field::<i64>("PrevStageId", Self::VT_PREVSTAGEID, false)?
     .visit_field::<i64>("OpenDate", Self::VT_OPENDATE, false)?
     .visit_field::<i64>("OpenEventPoint", Self::VT_OPENEVENTPOINT, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<ParcelType>("StageEnterCostType", Self::VT_STAGEENTERCOSTTYPE, false)?
     .visit_field::<i64>("StageEnterCostId", Self::VT_STAGEENTERCOSTID, false)?
     .visit_field::<i32>("StageEnterCostAmount", Self::VT_STAGEENTERCOSTAMOUNT, false)?
     .visit_field::<i32>("StageEnterEchelonCount", Self::VT_STAGEENTERECHELONCOUNT, false)?
     .visit_field::<i64>("StarConditionTacticRankSCount", Self::VT_STARCONDITIONTACTICRANKSCOUNT, false)?
     .visit_field::<i64>("StarConditionTurnCount", Self::VT_STARCONDITIONTURNCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("enterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("clearScenarioGroupId", Self::VT_CLEARSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMap", Self::VT_STRATEGYMAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyMapBG", Self::VT_STRATEGYMAPBG, false)?
     .visit_field::<i64>("StageRewardId", Self::VT_STAGEREWARDID, false)?
     .visit_field::<i32>("MaxTurn", Self::VT_MAXTURN, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<i32>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgmId", Self::VT_BGMID, false)?
     .visit_field::<StrategyEnvironment>("StrategyEnvironment", Self::VT_STRATEGYENVIRONMENT, false)?
     .visit_field::<i64>("GroundID", Self::VT_GROUNDID, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<bool>("InstantClear", Self::VT_INSTANTCLEAR, false)?
     .visit_field::<i64>("BuffContentId", Self::VT_BUFFCONTENTID, false)?
     .visit_field::<bool>("ChallengeDisplay", Self::VT_CHALLENGEDISPLAY, false)?
     .finish();
    Ok(())
  }
}
pub struct LimitedStageExcelArgs<'a> {
    pub Id: i64,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SeasonId: i64,
    pub StageDifficulty: StageDifficulty,
    pub StageNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StageDisplay: i32,
    pub PrevStageId: i64,
    pub OpenDate: i64,
    pub OpenEventPoint: i64,
    pub BattleDuration: i64,
    pub StageEnterCostType: ParcelType,
    pub StageEnterCostId: i64,
    pub StageEnterCostAmount: i32,
    pub StageEnterEchelonCount: i32,
    pub StarConditionTacticRankSCount: i64,
    pub StarConditionTurnCount: i64,
    pub enterScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub clearScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StrategyMap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyMapBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StageRewardId: i64,
    pub MaxTurn: i32,
    pub StageTopography: StageTopography,
    pub RecommandLevel: i32,
    pub BgmId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyEnvironment: StrategyEnvironment,
    pub GroundID: i64,
    pub ContentType: ContentType,
    pub BGMId: i64,
    pub InstantClear: bool,
    pub BuffContentId: i64,
    pub ChallengeDisplay: bool,
}
impl<'a> Default for LimitedStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LimitedStageExcelArgs {
      Id: 0,
      Name: None,
      SeasonId: 0,
      StageDifficulty: StageDifficulty::None,
      StageNumber: None,
      StageDisplay: 0,
      PrevStageId: 0,
      OpenDate: 0,
      OpenEventPoint: 0,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageEnterEchelonCount: 0,
      StarConditionTacticRankSCount: 0,
      StarConditionTurnCount: 0,
      enterScenarioGroupId: None,
      clearScenarioGroupId: None,
      StrategyMap: None,
      StrategyMapBG: None,
      StageRewardId: 0,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      BgmId: None,
      StrategyEnvironment: StrategyEnvironment::None,
      GroundID: 0,
      ContentType: ContentType::None,
      BGMId: 0,
      InstantClear: false,
      BuffContentId: 0,
      ChallengeDisplay: false,
    }
  }
}

impl Serialize for LimitedStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LimitedStageExcel", 32)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      s.serialize_field("SeasonId", &self.SeasonId())?;
      s.serialize_field("StageDifficulty", &self.StageDifficulty())?;
      if let Some(f) = self.StageNumber() {
        s.serialize_field("StageNumber", &f)?;
      } else {
        s.skip_field("StageNumber")?;
      }
      s.serialize_field("StageDisplay", &self.StageDisplay())?;
      s.serialize_field("PrevStageId", &self.PrevStageId())?;
      s.serialize_field("OpenDate", &self.OpenDate())?;
      s.serialize_field("OpenEventPoint", &self.OpenEventPoint())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("StageEnterCostType", &self.StageEnterCostType())?;
      s.serialize_field("StageEnterCostId", &self.StageEnterCostId())?;
      s.serialize_field("StageEnterCostAmount", &self.StageEnterCostAmount())?;
      s.serialize_field("StageEnterEchelonCount", &self.StageEnterEchelonCount())?;
      s.serialize_field("StarConditionTacticRankSCount", &self.StarConditionTacticRankSCount())?;
      s.serialize_field("StarConditionTurnCount", &self.StarConditionTurnCount())?;
      if let Some(f) = self.enterScenarioGroupId() {
        s.serialize_field("enterScenarioGroupId", &f)?;
      } else {
        s.skip_field("enterScenarioGroupId")?;
      }
      if let Some(f) = self.clearScenarioGroupId() {
        s.serialize_field("clearScenarioGroupId", &f)?;
      } else {
        s.skip_field("clearScenarioGroupId")?;
      }
      if let Some(f) = self.StrategyMap() {
        s.serialize_field("StrategyMap", &f)?;
      } else {
        s.skip_field("StrategyMap")?;
      }
      if let Some(f) = self.StrategyMapBG() {
        s.serialize_field("StrategyMapBG", &f)?;
      } else {
        s.skip_field("StrategyMapBG")?;
      }
      s.serialize_field("StageRewardId", &self.StageRewardId())?;
      s.serialize_field("MaxTurn", &self.MaxTurn())?;
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      if let Some(f) = self.BgmId() {
        s.serialize_field("BgmId", &f)?;
      } else {
        s.skip_field("BgmId")?;
      }
      s.serialize_field("StrategyEnvironment", &self.StrategyEnvironment())?;
      s.serialize_field("GroundID", &self.GroundID())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("BGMId", &self.BGMId())?;
      s.serialize_field("InstantClear", &self.InstantClear())?;
      s.serialize_field("BuffContentId", &self.BuffContentId())?;
      s.serialize_field("ChallengeDisplay", &self.ChallengeDisplay())?;
    s.end()
  }
}

pub struct LimitedStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LimitedStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_StageDifficulty(&mut self, StageDifficulty: StageDifficulty) {
    self.fbb_.push_slot::<StageDifficulty>(LimitedStageExcel::VT_STAGEDIFFICULTY, StageDifficulty, StageDifficulty::None);
  }
  #[inline]
  pub fn add_StageNumber(&mut self, StageNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageExcel::VT_STAGENUMBER, StageNumber);
  }
  #[inline]
  pub fn add_StageDisplay(&mut self, StageDisplay: i32) {
    self.fbb_.push_slot::<i32>(LimitedStageExcel::VT_STAGEDISPLAY, StageDisplay, 0);
  }
  #[inline]
  pub fn add_PrevStageId(&mut self, PrevStageId: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_PREVSTAGEID, PrevStageId, 0);
  }
  #[inline]
  pub fn add_OpenDate(&mut self, OpenDate: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_OPENDATE, OpenDate, 0);
  }
  #[inline]
  pub fn add_OpenEventPoint(&mut self, OpenEventPoint: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_OPENEVENTPOINT, OpenEventPoint, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_StageEnterCostType(&mut self, StageEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(LimitedStageExcel::VT_STAGEENTERCOSTTYPE, StageEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_StageEnterCostId(&mut self, StageEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_STAGEENTERCOSTID, StageEnterCostId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostAmount(&mut self, StageEnterCostAmount: i32) {
    self.fbb_.push_slot::<i32>(LimitedStageExcel::VT_STAGEENTERCOSTAMOUNT, StageEnterCostAmount, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelonCount(&mut self, StageEnterEchelonCount: i32) {
    self.fbb_.push_slot::<i32>(LimitedStageExcel::VT_STAGEENTERECHELONCOUNT, StageEnterEchelonCount, 0);
  }
  #[inline]
  pub fn add_StarConditionTacticRankSCount(&mut self, StarConditionTacticRankSCount: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_STARCONDITIONTACTICRANKSCOUNT, StarConditionTacticRankSCount, 0);
  }
  #[inline]
  pub fn add_StarConditionTurnCount(&mut self, StarConditionTurnCount: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_STARCONDITIONTURNCOUNT, StarConditionTurnCount, 0);
  }
  #[inline]
  pub fn add_enterScenarioGroupId(&mut self, enterScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageExcel::VT_ENTERSCENARIOGROUPID, enterScenarioGroupId);
  }
  #[inline]
  pub fn add_clearScenarioGroupId(&mut self, clearScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageExcel::VT_CLEARSCENARIOGROUPID, clearScenarioGroupId);
  }
  #[inline]
  pub fn add_StrategyMap(&mut self, StrategyMap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageExcel::VT_STRATEGYMAP, StrategyMap);
  }
  #[inline]
  pub fn add_StrategyMapBG(&mut self, StrategyMapBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageExcel::VT_STRATEGYMAPBG, StrategyMapBG);
  }
  #[inline]
  pub fn add_StageRewardId(&mut self, StageRewardId: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_STAGEREWARDID, StageRewardId, 0);
  }
  #[inline]
  pub fn add_MaxTurn(&mut self, MaxTurn: i32) {
    self.fbb_.push_slot::<i32>(LimitedStageExcel::VT_MAXTURN, MaxTurn, 0);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(LimitedStageExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i32) {
    self.fbb_.push_slot::<i32>(LimitedStageExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_BgmId(&mut self, BgmId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitedStageExcel::VT_BGMID, BgmId);
  }
  #[inline]
  pub fn add_StrategyEnvironment(&mut self, StrategyEnvironment: StrategyEnvironment) {
    self.fbb_.push_slot::<StrategyEnvironment>(LimitedStageExcel::VT_STRATEGYENVIRONMENT, StrategyEnvironment, StrategyEnvironment::None);
  }
  #[inline]
  pub fn add_GroundID(&mut self, GroundID: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_GROUNDID, GroundID, 0);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(LimitedStageExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_InstantClear(&mut self, InstantClear: bool) {
    self.fbb_.push_slot::<bool>(LimitedStageExcel::VT_INSTANTCLEAR, InstantClear, false);
  }
  #[inline]
  pub fn add_BuffContentId(&mut self, BuffContentId: i64) {
    self.fbb_.push_slot::<i64>(LimitedStageExcel::VT_BUFFCONTENTID, BuffContentId, 0);
  }
  #[inline]
  pub fn add_ChallengeDisplay(&mut self, ChallengeDisplay: bool) {
    self.fbb_.push_slot::<bool>(LimitedStageExcel::VT_CHALLENGEDISPLAY, ChallengeDisplay, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LimitedStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LimitedStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LimitedStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LimitedStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LimitedStageExcel");
      ds.field("Id", &self.Id());
      ds.field("Name", &self.Name());
      ds.field("SeasonId", &self.SeasonId());
      ds.field("StageDifficulty", &self.StageDifficulty());
      ds.field("StageNumber", &self.StageNumber());
      ds.field("StageDisplay", &self.StageDisplay());
      ds.field("PrevStageId", &self.PrevStageId());
      ds.field("OpenDate", &self.OpenDate());
      ds.field("OpenEventPoint", &self.OpenEventPoint());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("StageEnterCostType", &self.StageEnterCostType());
      ds.field("StageEnterCostId", &self.StageEnterCostId());
      ds.field("StageEnterCostAmount", &self.StageEnterCostAmount());
      ds.field("StageEnterEchelonCount", &self.StageEnterEchelonCount());
      ds.field("StarConditionTacticRankSCount", &self.StarConditionTacticRankSCount());
      ds.field("StarConditionTurnCount", &self.StarConditionTurnCount());
      ds.field("enterScenarioGroupId", &self.enterScenarioGroupId());
      ds.field("clearScenarioGroupId", &self.clearScenarioGroupId());
      ds.field("StrategyMap", &self.StrategyMap());
      ds.field("StrategyMapBG", &self.StrategyMapBG());
      ds.field("StageRewardId", &self.StageRewardId());
      ds.field("MaxTurn", &self.MaxTurn());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("BgmId", &self.BgmId());
      ds.field("StrategyEnvironment", &self.StrategyEnvironment());
      ds.field("GroundID", &self.GroundID());
      ds.field("ContentType", &self.ContentType());
      ds.field("BGMId", &self.BGMId());
      ds.field("InstantClear", &self.InstantClear());
      ds.field("BuffContentId", &self.BuffContentId());
      ds.field("ChallengeDisplay", &self.ChallengeDisplay());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LimitedStageExcelT {
  pub Id: i64,
  pub Name: Option<String>,
  pub SeasonId: i64,
  pub StageDifficulty: StageDifficulty,
  pub StageNumber: Option<String>,
  pub StageDisplay: i32,
  pub PrevStageId: i64,
  pub OpenDate: i64,
  pub OpenEventPoint: i64,
  pub BattleDuration: i64,
  pub StageEnterCostType: ParcelType,
  pub StageEnterCostId: i64,
  pub StageEnterCostAmount: i32,
  pub StageEnterEchelonCount: i32,
  pub StarConditionTacticRankSCount: i64,
  pub StarConditionTurnCount: i64,
  pub enterScenarioGroupId: Option<Vec<i64>>,
  pub clearScenarioGroupId: Option<Vec<i64>>,
  pub StrategyMap: Option<String>,
  pub StrategyMapBG: Option<String>,
  pub StageRewardId: i64,
  pub MaxTurn: i32,
  pub StageTopography: StageTopography,
  pub RecommandLevel: i32,
  pub BgmId: Option<String>,
  pub StrategyEnvironment: StrategyEnvironment,
  pub GroundID: i64,
  pub ContentType: ContentType,
  pub BGMId: i64,
  pub InstantClear: bool,
  pub BuffContentId: i64,
  pub ChallengeDisplay: bool,
}
impl Default for LimitedStageExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Name: None,
      SeasonId: 0,
      StageDifficulty: StageDifficulty::None,
      StageNumber: None,
      StageDisplay: 0,
      PrevStageId: 0,
      OpenDate: 0,
      OpenEventPoint: 0,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageEnterEchelonCount: 0,
      StarConditionTacticRankSCount: 0,
      StarConditionTurnCount: 0,
      enterScenarioGroupId: None,
      clearScenarioGroupId: None,
      StrategyMap: None,
      StrategyMapBG: None,
      StageRewardId: 0,
      MaxTurn: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      BgmId: None,
      StrategyEnvironment: StrategyEnvironment::None,
      GroundID: 0,
      ContentType: ContentType::None,
      BGMId: 0,
      InstantClear: false,
      BuffContentId: 0,
      ChallengeDisplay: false,
    }
  }
}
impl LimitedStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LimitedStageExcel<'b>> {
    let Id = self.Id;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SeasonId = self.SeasonId;
    let StageDifficulty = self.StageDifficulty;
    let StageNumber = self.StageNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StageDisplay = self.StageDisplay;
    let PrevStageId = self.PrevStageId;
    let OpenDate = self.OpenDate;
    let OpenEventPoint = self.OpenEventPoint;
    let BattleDuration = self.BattleDuration;
    let StageEnterCostType = self.StageEnterCostType;
    let StageEnterCostId = self.StageEnterCostId;
    let StageEnterCostAmount = self.StageEnterCostAmount;
    let StageEnterEchelonCount = self.StageEnterEchelonCount;
    let StarConditionTacticRankSCount = self.StarConditionTacticRankSCount;
    let StarConditionTurnCount = self.StarConditionTurnCount;
    let enterScenarioGroupId = self.enterScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let clearScenarioGroupId = self.clearScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StrategyMap = self.StrategyMap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyMapBG = self.StrategyMapBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StageRewardId = self.StageRewardId;
    let MaxTurn = self.MaxTurn;
    let StageTopography = self.StageTopography;
    let RecommandLevel = self.RecommandLevel;
    let BgmId = self.BgmId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyEnvironment = self.StrategyEnvironment;
    let GroundID = self.GroundID;
    let ContentType = self.ContentType;
    let BGMId = self.BGMId;
    let InstantClear = self.InstantClear;
    let BuffContentId = self.BuffContentId;
    let ChallengeDisplay = self.ChallengeDisplay;
    LimitedStageExcel::create(_fbb, &LimitedStageExcelArgs{
      Id,
      Name,
      SeasonId,
      StageDifficulty,
      StageNumber,
      StageDisplay,
      PrevStageId,
      OpenDate,
      OpenEventPoint,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterEchelonCount,
      StarConditionTacticRankSCount,
      StarConditionTurnCount,
      enterScenarioGroupId,
      clearScenarioGroupId,
      StrategyMap,
      StrategyMapBG,
      StageRewardId,
      MaxTurn,
      StageTopography,
      RecommandLevel,
      BgmId,
      StrategyEnvironment,
      GroundID,
      ContentType,
      BGMId,
      InstantClear,
      BuffContentId,
      ChallengeDisplay,
    })
  }
}
