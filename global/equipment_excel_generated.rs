// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EquipmentExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EquipmentExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EquipmentExcel<'a> {
  type Inner = EquipmentExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EquipmentExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EQUIPMENTCATEGORY: flatbuffers::VOffsetT = 6;
  pub const VT_RARITY: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 10;
  pub const VT_WEAR: flatbuffers::VOffsetT = 12;
  pub const VT_MAXLEVEL: flatbuffers::VOffsetT = 14;
  pub const VT_RECIPEID: flatbuffers::VOffsetT = 16;
  pub const VT_TIERINIT: flatbuffers::VOffsetT = 18;
  pub const VT_NEXTTIEREQUIPMENT: flatbuffers::VOffsetT = 20;
  pub const VT_STACKABLEMAX: flatbuffers::VOffsetT = 22;
  pub const VT_ICON: flatbuffers::VOffsetT = 24;
  pub const VT_IMAGENAME: flatbuffers::VOffsetT = 26;
  pub const VT_TAGS: flatbuffers::VOffsetT = 28;
  pub const VT_CRAFTQUALITYTIER0: flatbuffers::VOffsetT = 30;
  pub const VT_CRAFTQUALITYTIER1: flatbuffers::VOffsetT = 32;
  pub const VT_CRAFTQUALITYTIER2: flatbuffers::VOffsetT = 34;
  pub const VT_SHIFTINGCRAFTQUALITY: flatbuffers::VOffsetT = 36;
  pub const VT_SHOPCATEGORY: flatbuffers::VOffsetT = 38;
  pub const VT_SHORTCUTTYPEID: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EquipmentExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EquipmentExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EquipmentExcel<'bldr>> {
    let mut builder = EquipmentExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Equipment");
      let x = args.ShortcutTypeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShortcutTypeId(x);
      let x = args.ShiftingCraftQuality;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShiftingCraftQuality(x);
      let x = args.CraftQualityTier2;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier2(x);
      let x = args.CraftQualityTier1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier1(x);
      let x = args.CraftQualityTier0;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CraftQualityTier0(x);
      let x = args.NextTierEquipment;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NextTierEquipment(x);
      let x = args.TierInit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TierInit(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ShopCategory {
        builder.add_ShopCategory(x);
      }
      if let Some(x) = args.Tags {
        builder.add_Tags(x);
      }
      if let Some(x) = args.ImageName {
        builder.add_ImageName(x);
      }
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      let x = args.StackableMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StackableMax(x);
      let x = args.RecipeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecipeId(x);
      let x = args.MaxLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxLevel(x);
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.Rarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Rarity(x);
      let x = args.EquipmentCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EquipmentCategory(x);
      builder.add_Wear(args.Wear);
    builder.finish()
  }

  pub fn unpack(&self) -> EquipmentExcelT {
    let key = table_encryption_service::create_key(b"Equipment");
      let Id = self.Id();
      let EquipmentCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EquipmentCategory(), &key)
      } else {
        self.EquipmentCategory()
      };
      let Rarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Rarity(), &key)
      } else {
        self.Rarity()
      };
      let LocalizeEtcId = self.LocalizeEtcId();
      let Wear = self.Wear();
      let MaxLevel = self.MaxLevel();
      let RecipeId = self.RecipeId();
      let TierInit = self.TierInit();
      let NextTierEquipment = self.NextTierEquipment();
      let StackableMax = self.StackableMax();
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImageName = self.ImageName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Tags = self.Tags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let CraftQualityTier0 = self.CraftQualityTier0();
      let CraftQualityTier1 = self.CraftQualityTier1();
      let CraftQualityTier2 = self.CraftQualityTier2();
      let ShiftingCraftQuality = self.ShiftingCraftQuality();
    let ShopCategory = self.ShopCategory().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
      let ShortcutTypeId = self.ShortcutTypeId();
    EquipmentExcelT {
      Id,
      EquipmentCategory,
      Rarity,
      LocalizeEtcId,
      Wear,
      MaxLevel,
      RecipeId,
      TierInit,
      NextTierEquipment,
      StackableMax,
      Icon,
      ImageName,
      Tags,
      CraftQualityTier0,
      CraftQualityTier1,
      CraftQualityTier2,
      ShiftingCraftQuality,
      ShopCategory,
      ShortcutTypeId,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipmentCategory(&self) -> EquipmentCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EquipmentCategory>(EquipmentExcel::VT_EQUIPMENTCATEGORY, Some(EquipmentCategory::Unable)).unwrap()}
  }
  #[inline]
  pub fn Rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(EquipmentExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EquipmentExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Wear(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EquipmentExcel::VT_WEAR, Some(false)).unwrap()}
  }
  #[inline]
  pub fn MaxLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EquipmentExcel::VT_MAXLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EquipmentExcel::VT_RECIPEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TierInit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_TIERINIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NextTierEquipment(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_NEXTTIEREQUIPMENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StackableMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EquipmentExcel::VT_STACKABLEMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EquipmentExcel::VT_ICON, None)}
  }
  #[inline]
  pub fn ImageName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EquipmentExcel::VT_IMAGENAME, None)}
  }
  #[inline]
  pub fn Tags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(EquipmentExcel::VT_TAGS, None)}
  }
  #[inline]
  pub fn CraftQualityTier0(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_CRAFTQUALITYTIER0, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CraftQualityTier1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_CRAFTQUALITYTIER1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CraftQualityTier2(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_CRAFTQUALITYTIER2, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShiftingCraftQuality(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_SHIFTINGCRAFTQUALITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopCategory(&self) -> Option<flatbuffers::Vector<'a, ShopCategoryType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ShopCategoryType>>>(EquipmentExcel::VT_SHOPCATEGORY, None)}
  }
  #[inline]
  pub fn ShortcutTypeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EquipmentExcel::VT_SHORTCUTTYPEID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EquipmentExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<EquipmentCategory>("EquipmentCategory", Self::VT_EQUIPMENTCATEGORY, false)?
     .visit_field::<Rarity>("Rarity", Self::VT_RARITY, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<bool>("Wear", Self::VT_WEAR, false)?
     .visit_field::<i32>("MaxLevel", Self::VT_MAXLEVEL, false)?
     .visit_field::<i32>("RecipeId", Self::VT_RECIPEID, false)?
     .visit_field::<i64>("TierInit", Self::VT_TIERINIT, false)?
     .visit_field::<i64>("NextTierEquipment", Self::VT_NEXTTIEREQUIPMENT, false)?
     .visit_field::<i32>("StackableMax", Self::VT_STACKABLEMAX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImageName", Self::VT_IMAGENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("Tags", Self::VT_TAGS, false)?
     .visit_field::<i64>("CraftQualityTier0", Self::VT_CRAFTQUALITYTIER0, false)?
     .visit_field::<i64>("CraftQualityTier1", Self::VT_CRAFTQUALITYTIER1, false)?
     .visit_field::<i64>("CraftQualityTier2", Self::VT_CRAFTQUALITYTIER2, false)?
     .visit_field::<i64>("ShiftingCraftQuality", Self::VT_SHIFTINGCRAFTQUALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ShopCategoryType>>>("ShopCategory", Self::VT_SHOPCATEGORY, false)?
     .visit_field::<i64>("ShortcutTypeId", Self::VT_SHORTCUTTYPEID, false)?
     .finish();
    Ok(())
  }
}
pub struct EquipmentExcelArgs<'a> {
    pub Id: i64,
    pub EquipmentCategory: EquipmentCategory,
    pub Rarity: Rarity,
    pub LocalizeEtcId: u32,
    pub Wear: bool,
    pub MaxLevel: i32,
    pub RecipeId: i32,
    pub TierInit: i64,
    pub NextTierEquipment: i64,
    pub StackableMax: i32,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImageName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub CraftQualityTier0: i64,
    pub CraftQualityTier1: i64,
    pub CraftQualityTier2: i64,
    pub ShiftingCraftQuality: i64,
    pub ShopCategory: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ShopCategoryType>>>,
    pub ShortcutTypeId: i64,
}
impl<'a> Default for EquipmentExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EquipmentExcelArgs {
      Id: 0,
      EquipmentCategory: EquipmentCategory::Unable,
      Rarity: Rarity::N,
      LocalizeEtcId: 0,
      Wear: false,
      MaxLevel: 0,
      RecipeId: 0,
      TierInit: 0,
      NextTierEquipment: 0,
      StackableMax: 0,
      Icon: None,
      ImageName: None,
      Tags: None,
      CraftQualityTier0: 0,
      CraftQualityTier1: 0,
      CraftQualityTier2: 0,
      ShiftingCraftQuality: 0,
      ShopCategory: None,
      ShortcutTypeId: 0,
    }
  }
}

impl Serialize for EquipmentExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EquipmentExcel", 19)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EquipmentCategory", &self.EquipmentCategory())?;
      s.serialize_field("Rarity", &self.Rarity())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("Wear", &self.Wear())?;
      s.serialize_field("MaxLevel", &self.MaxLevel())?;
      s.serialize_field("RecipeId", &self.RecipeId())?;
      s.serialize_field("TierInit", &self.TierInit())?;
      s.serialize_field("NextTierEquipment", &self.NextTierEquipment())?;
      s.serialize_field("StackableMax", &self.StackableMax())?;
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
      if let Some(f) = self.ImageName() {
        s.serialize_field("ImageName", &f)?;
      } else {
        s.skip_field("ImageName")?;
      }
      if let Some(f) = self.Tags() {
        s.serialize_field("Tags", &f)?;
      } else {
        s.skip_field("Tags")?;
      }
      s.serialize_field("CraftQualityTier0", &self.CraftQualityTier0())?;
      s.serialize_field("CraftQualityTier1", &self.CraftQualityTier1())?;
      s.serialize_field("CraftQualityTier2", &self.CraftQualityTier2())?;
      s.serialize_field("ShiftingCraftQuality", &self.ShiftingCraftQuality())?;
      if let Some(f) = self.ShopCategory() {
        s.serialize_field("ShopCategory", &f)?;
      } else {
        s.skip_field("ShopCategory")?;
      }
      s.serialize_field("ShortcutTypeId", &self.ShortcutTypeId())?;
    s.end()
  }
}

pub struct EquipmentExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EquipmentExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EquipmentCategory(&mut self, EquipmentCategory: EquipmentCategory) {
    self.fbb_.push_slot::<EquipmentCategory>(EquipmentExcel::VT_EQUIPMENTCATEGORY, EquipmentCategory, EquipmentCategory::Unable);
  }
  #[inline]
  pub fn add_Rarity(&mut self, Rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(EquipmentExcel::VT_RARITY, Rarity, Rarity::N);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(EquipmentExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_Wear(&mut self, Wear: bool) {
    self.fbb_.push_slot::<bool>(EquipmentExcel::VT_WEAR, Wear, false);
  }
  #[inline]
  pub fn add_MaxLevel(&mut self, MaxLevel: i32) {
    self.fbb_.push_slot::<i32>(EquipmentExcel::VT_MAXLEVEL, MaxLevel, 0);
  }
  #[inline]
  pub fn add_RecipeId(&mut self, RecipeId: i32) {
    self.fbb_.push_slot::<i32>(EquipmentExcel::VT_RECIPEID, RecipeId, 0);
  }
  #[inline]
  pub fn add_TierInit(&mut self, TierInit: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_TIERINIT, TierInit, 0);
  }
  #[inline]
  pub fn add_NextTierEquipment(&mut self, NextTierEquipment: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_NEXTTIEREQUIPMENT, NextTierEquipment, 0);
  }
  #[inline]
  pub fn add_StackableMax(&mut self, StackableMax: i32) {
    self.fbb_.push_slot::<i32>(EquipmentExcel::VT_STACKABLEMAX, StackableMax, 0);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn add_ImageName(&mut self, ImageName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentExcel::VT_IMAGENAME, ImageName);
  }
  #[inline]
  pub fn add_Tags(&mut self, Tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentExcel::VT_TAGS, Tags);
  }
  #[inline]
  pub fn add_CraftQualityTier0(&mut self, CraftQualityTier0: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_CRAFTQUALITYTIER0, CraftQualityTier0, 0);
  }
  #[inline]
  pub fn add_CraftQualityTier1(&mut self, CraftQualityTier1: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_CRAFTQUALITYTIER1, CraftQualityTier1, 0);
  }
  #[inline]
  pub fn add_CraftQualityTier2(&mut self, CraftQualityTier2: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_CRAFTQUALITYTIER2, CraftQualityTier2, 0);
  }
  #[inline]
  pub fn add_ShiftingCraftQuality(&mut self, ShiftingCraftQuality: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_SHIFTINGCRAFTQUALITY, ShiftingCraftQuality, 0);
  }
  #[inline]
  pub fn add_ShopCategory(&mut self, ShopCategory: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ShopCategoryType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentExcel::VT_SHOPCATEGORY, ShopCategory);
  }
  #[inline]
  pub fn add_ShortcutTypeId(&mut self, ShortcutTypeId: i64) {
    self.fbb_.push_slot::<i64>(EquipmentExcel::VT_SHORTCUTTYPEID, ShortcutTypeId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EquipmentExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EquipmentExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EquipmentExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EquipmentExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EquipmentExcel");
      ds.field("Id", &self.Id());
      ds.field("EquipmentCategory", &self.EquipmentCategory());
      ds.field("Rarity", &self.Rarity());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("Wear", &self.Wear());
      ds.field("MaxLevel", &self.MaxLevel());
      ds.field("RecipeId", &self.RecipeId());
      ds.field("TierInit", &self.TierInit());
      ds.field("NextTierEquipment", &self.NextTierEquipment());
      ds.field("StackableMax", &self.StackableMax());
      ds.field("Icon", &self.Icon());
      ds.field("ImageName", &self.ImageName());
      ds.field("Tags", &self.Tags());
      ds.field("CraftQualityTier0", &self.CraftQualityTier0());
      ds.field("CraftQualityTier1", &self.CraftQualityTier1());
      ds.field("CraftQualityTier2", &self.CraftQualityTier2());
      ds.field("ShiftingCraftQuality", &self.ShiftingCraftQuality());
      ds.field("ShopCategory", &self.ShopCategory());
      ds.field("ShortcutTypeId", &self.ShortcutTypeId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EquipmentExcelT {
  pub Id: i64,
  pub EquipmentCategory: EquipmentCategory,
  pub Rarity: Rarity,
  pub LocalizeEtcId: u32,
  pub Wear: bool,
  pub MaxLevel: i32,
  pub RecipeId: i32,
  pub TierInit: i64,
  pub NextTierEquipment: i64,
  pub StackableMax: i32,
  pub Icon: Option<String>,
  pub ImageName: Option<String>,
  pub Tags: Option<Vec<Tag>>,
  pub CraftQualityTier0: i64,
  pub CraftQualityTier1: i64,
  pub CraftQualityTier2: i64,
  pub ShiftingCraftQuality: i64,
  pub ShopCategory: Option<Vec<ShopCategoryType>>,
  pub ShortcutTypeId: i64,
}
impl Default for EquipmentExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EquipmentCategory: EquipmentCategory::Unable,
      Rarity: Rarity::N,
      LocalizeEtcId: 0,
      Wear: false,
      MaxLevel: 0,
      RecipeId: 0,
      TierInit: 0,
      NextTierEquipment: 0,
      StackableMax: 0,
      Icon: None,
      ImageName: None,
      Tags: None,
      CraftQualityTier0: 0,
      CraftQualityTier1: 0,
      CraftQualityTier2: 0,
      ShiftingCraftQuality: 0,
      ShopCategory: None,
      ShortcutTypeId: 0,
    }
  }
}
impl EquipmentExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EquipmentExcel<'b>> {
    let Id = self.Id;
    let EquipmentCategory = self.EquipmentCategory;
    let Rarity = self.Rarity;
    let LocalizeEtcId = self.LocalizeEtcId;
    let Wear = self.Wear;
    let MaxLevel = self.MaxLevel;
    let RecipeId = self.RecipeId;
    let TierInit = self.TierInit;
    let NextTierEquipment = self.NextTierEquipment;
    let StackableMax = self.StackableMax;
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImageName = self.ImageName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Tags = self.Tags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CraftQualityTier0 = self.CraftQualityTier0;
    let CraftQualityTier1 = self.CraftQualityTier1;
    let CraftQualityTier2 = self.CraftQualityTier2;
    let ShiftingCraftQuality = self.ShiftingCraftQuality;
    let ShopCategory = self.ShopCategory.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ShortcutTypeId = self.ShortcutTypeId;
    EquipmentExcel::create(_fbb, &EquipmentExcelArgs{
      Id,
      EquipmentCategory,
      Rarity,
      LocalizeEtcId,
      Wear,
      MaxLevel,
      RecipeId,
      TierInit,
      NextTierEquipment,
      StackableMax,
      Icon,
      ImageName,
      Tags,
      CraftQualityTier0,
      CraftQualityTier1,
      CraftQualityTier2,
      ShiftingCraftQuality,
      ShopCategory,
      ShortcutTypeId,
    })
  }
}
