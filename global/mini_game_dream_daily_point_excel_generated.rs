// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamDailyPointExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamDailyPointExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamDailyPointExcel<'a> {
  type Inner = MiniGameDreamDailyPointExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamDailyPointExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_TOTALPARAMETERMIN: flatbuffers::VOffsetT = 8;
  pub const VT_TOTALPARAMETERMAX: flatbuffers::VOffsetT = 10;
  pub const VT_DAILYPOINTCOEFFICIENT: flatbuffers::VOffsetT = 12;
  pub const VT_DAILYPOINTCORRECTIONVALUE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamDailyPointExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamDailyPointExcelArgs
  ) -> flatbuffers::WIPOffset<MiniGameDreamDailyPointExcel<'bldr>> {
    let mut builder = MiniGameDreamDailyPointExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamDailyPoint");
      let x = args.DailyPointCorrectionValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DailyPointCorrectionValue(x);
      let x = args.DailyPointCoefficient;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DailyPointCoefficient(x);
      let x = args.TotalParameterMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TotalParameterMax(x);
      let x = args.TotalParameterMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TotalParameterMin(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamDailyPointExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamDailyPoint");
      let UniqueId = self.UniqueId();
      let EventContentId = self.EventContentId();
      let TotalParameterMin = self.TotalParameterMin();
      let TotalParameterMax = self.TotalParameterMax();
      let DailyPointCoefficient = self.DailyPointCoefficient();
      let DailyPointCorrectionValue = self.DailyPointCorrectionValue();
    MiniGameDreamDailyPointExcelT {
      UniqueId,
      EventContentId,
      TotalParameterMin,
      TotalParameterMax,
      DailyPointCoefficient,
      DailyPointCorrectionValue,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamDailyPointExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamDailyPointExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TotalParameterMin(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamDailyPointExcel::VT_TOTALPARAMETERMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TotalParameterMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamDailyPointExcel::VT_TOTALPARAMETERMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DailyPointCoefficient(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamDailyPointExcel::VT_DAILYPOINTCOEFFICIENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DailyPointCorrectionValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamDailyPointExcel::VT_DAILYPOINTCORRECTIONVALUE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamDailyPointExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("TotalParameterMin", Self::VT_TOTALPARAMETERMIN, false)?
     .visit_field::<i64>("TotalParameterMax", Self::VT_TOTALPARAMETERMAX, false)?
     .visit_field::<i64>("DailyPointCoefficient", Self::VT_DAILYPOINTCOEFFICIENT, false)?
     .visit_field::<i64>("DailyPointCorrectionValue", Self::VT_DAILYPOINTCORRECTIONVALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamDailyPointExcelArgs {
    pub UniqueId: i64,
    pub EventContentId: i64,
    pub TotalParameterMin: i64,
    pub TotalParameterMax: i64,
    pub DailyPointCoefficient: i64,
    pub DailyPointCorrectionValue: i64,
}
impl<'a> Default for MiniGameDreamDailyPointExcelArgs {
  #[inline]
  fn default() -> Self {
    MiniGameDreamDailyPointExcelArgs {
      UniqueId: 0,
      EventContentId: 0,
      TotalParameterMin: 0,
      TotalParameterMax: 0,
      DailyPointCoefficient: 0,
      DailyPointCorrectionValue: 0,
    }
  }
}

impl Serialize for MiniGameDreamDailyPointExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamDailyPointExcel", 6)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("TotalParameterMin", &self.TotalParameterMin())?;
      s.serialize_field("TotalParameterMax", &self.TotalParameterMax())?;
      s.serialize_field("DailyPointCoefficient", &self.DailyPointCoefficient())?;
      s.serialize_field("DailyPointCorrectionValue", &self.DailyPointCorrectionValue())?;
    s.end()
  }
}

pub struct MiniGameDreamDailyPointExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamDailyPointExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamDailyPointExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamDailyPointExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_TotalParameterMin(&mut self, TotalParameterMin: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamDailyPointExcel::VT_TOTALPARAMETERMIN, TotalParameterMin, 0);
  }
  #[inline]
  pub fn add_TotalParameterMax(&mut self, TotalParameterMax: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamDailyPointExcel::VT_TOTALPARAMETERMAX, TotalParameterMax, 0);
  }
  #[inline]
  pub fn add_DailyPointCoefficient(&mut self, DailyPointCoefficient: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamDailyPointExcel::VT_DAILYPOINTCOEFFICIENT, DailyPointCoefficient, 0);
  }
  #[inline]
  pub fn add_DailyPointCorrectionValue(&mut self, DailyPointCorrectionValue: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamDailyPointExcel::VT_DAILYPOINTCORRECTIONVALUE, DailyPointCorrectionValue, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamDailyPointExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamDailyPointExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamDailyPointExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamDailyPointExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamDailyPointExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("TotalParameterMin", &self.TotalParameterMin());
      ds.field("TotalParameterMax", &self.TotalParameterMax());
      ds.field("DailyPointCoefficient", &self.DailyPointCoefficient());
      ds.field("DailyPointCorrectionValue", &self.DailyPointCorrectionValue());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamDailyPointExcelT {
  pub UniqueId: i64,
  pub EventContentId: i64,
  pub TotalParameterMin: i64,
  pub TotalParameterMax: i64,
  pub DailyPointCoefficient: i64,
  pub DailyPointCorrectionValue: i64,
}
impl Default for MiniGameDreamDailyPointExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      EventContentId: 0,
      TotalParameterMin: 0,
      TotalParameterMax: 0,
      DailyPointCoefficient: 0,
      DailyPointCorrectionValue: 0,
    }
  }
}
impl MiniGameDreamDailyPointExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamDailyPointExcel<'b>> {
    let UniqueId = self.UniqueId;
    let EventContentId = self.EventContentId;
    let TotalParameterMin = self.TotalParameterMin;
    let TotalParameterMax = self.TotalParameterMax;
    let DailyPointCoefficient = self.DailyPointCoefficient;
    let DailyPointCorrectionValue = self.DailyPointCorrectionValue;
    MiniGameDreamDailyPointExcel::create(_fbb, &MiniGameDreamDailyPointExcelArgs{
      UniqueId,
      EventContentId,
      TotalParameterMin,
      TotalParameterMax,
      DailyPointCoefficient,
      DailyPointCorrectionValue,
    })
  }
}
