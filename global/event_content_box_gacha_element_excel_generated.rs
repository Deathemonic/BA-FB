// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentBoxGachaElementExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentBoxGachaElementExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentBoxGachaElementExcel<'a> {
  type Inner = EventContentBoxGachaElementExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentBoxGachaElementExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_ROUND: flatbuffers::VOffsetT = 8;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentBoxGachaElementExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentBoxGachaElementExcelArgs
  ) -> flatbuffers::WIPOffset<EventContentBoxGachaElementExcel<'bldr>> {
    let mut builder = EventContentBoxGachaElementExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentBoxGachaElement");
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.Round;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Round(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentBoxGachaElementExcelT {
    let key = table_encryption_service::create_key(b"EventContentBoxGachaElement");
      let EventContentId = self.EventContentId();
      let Id = self.Id();
      let Round = self.Round();
      let GroupId = self.GroupId();
    EventContentBoxGachaElementExcelT {
      EventContentId,
      Id,
      Round,
      GroupId,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaElementExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaElementExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Round(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaElementExcel::VT_ROUND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBoxGachaElementExcel::VT_GROUPID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentBoxGachaElementExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("Round", Self::VT_ROUND, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentBoxGachaElementExcelArgs {
    pub EventContentId: i64,
    pub Id: i64,
    pub Round: i64,
    pub GroupId: i64,
}
impl<'a> Default for EventContentBoxGachaElementExcelArgs {
  #[inline]
  fn default() -> Self {
    EventContentBoxGachaElementExcelArgs {
      EventContentId: 0,
      Id: 0,
      Round: 0,
      GroupId: 0,
    }
  }
}

impl Serialize for EventContentBoxGachaElementExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentBoxGachaElementExcel", 4)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Round", &self.Round())?;
      s.serialize_field("GroupId", &self.GroupId())?;
    s.end()
  }
}

pub struct EventContentBoxGachaElementExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentBoxGachaElementExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaElementExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaElementExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Round(&mut self, Round: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaElementExcel::VT_ROUND, Round, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBoxGachaElementExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentBoxGachaElementExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentBoxGachaElementExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentBoxGachaElementExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentBoxGachaElementExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentBoxGachaElementExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("Id", &self.Id());
      ds.field("Round", &self.Round());
      ds.field("GroupId", &self.GroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentBoxGachaElementExcelT {
  pub EventContentId: i64,
  pub Id: i64,
  pub Round: i64,
  pub GroupId: i64,
}
impl Default for EventContentBoxGachaElementExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      Id: 0,
      Round: 0,
      GroupId: 0,
    }
  }
}
impl EventContentBoxGachaElementExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentBoxGachaElementExcel<'b>> {
    let EventContentId = self.EventContentId;
    let Id = self.Id;
    let Round = self.Round;
    let GroupId = self.GroupId;
    EventContentBoxGachaElementExcel::create(_fbb, &EventContentBoxGachaElementExcelArgs{
      EventContentId,
      Id,
      Round,
      GroupId,
    })
  }
}
