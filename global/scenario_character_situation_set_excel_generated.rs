// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioCharacterSituationSetExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioCharacterSituationSetExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioCharacterSituationSetExcel<'a> {
  type Inner = ScenarioCharacterSituationSetExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioCharacterSituationSetExcel<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_FACE: flatbuffers::VOffsetT = 6;
  pub const VT_BEHAVIOR: flatbuffers::VOffsetT = 8;
  pub const VT_ACTION: flatbuffers::VOffsetT = 10;
  pub const VT_SHAPE: flatbuffers::VOffsetT = 12;
  pub const VT_EFFECT: flatbuffers::VOffsetT = 14;
  pub const VT_EMOTION: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioCharacterSituationSetExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioCharacterSituationSetExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioCharacterSituationSetExcel<'bldr>> {
    let mut builder = ScenarioCharacterSituationSetExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioCharacterSituationSet");
      let x = args.Emotion;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Emotion(x);
      let x = args.Effect;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Effect(x);
      if let Some(x) = args.Shape {
        builder.add_Shape(x);
      }
      if let Some(x) = args.Action {
        builder.add_Action(x);
      }
      if let Some(x) = args.Behavior {
        builder.add_Behavior(x);
      }
      if let Some(x) = args.Face {
        builder.add_Face(x);
      }
      let x = args.Name;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Name(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioCharacterSituationSetExcelT {
    let key = table_encryption_service::create_key(b"ScenarioCharacterSituationSet");
      let Name = self.Name();
    let Face = self.Face().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Behavior = self.Behavior().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Action = self.Action().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Shape = self.Shape().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Effect = self.Effect();
      let Emotion = self.Emotion();
    ScenarioCharacterSituationSetExcelT {
      Name,
      Face,
      Behavior,
      Action,
      Shape,
      Effect,
      Emotion,
    }
  }

  #[inline]
  pub fn Name(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioCharacterSituationSetExcel::VT_NAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Face(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterSituationSetExcel::VT_FACE, None)}
  }
  #[inline]
  pub fn Behavior(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterSituationSetExcel::VT_BEHAVIOR, None)}
  }
  #[inline]
  pub fn Action(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterSituationSetExcel::VT_ACTION, None)}
  }
  #[inline]
  pub fn Shape(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioCharacterSituationSetExcel::VT_SHAPE, None)}
  }
  #[inline]
  pub fn Effect(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioCharacterSituationSetExcel::VT_EFFECT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Emotion(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioCharacterSituationSetExcel::VT_EMOTION, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScenarioCharacterSituationSetExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Face", Self::VT_FACE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Behavior", Self::VT_BEHAVIOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Action", Self::VT_ACTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Shape", Self::VT_SHAPE, false)?
     .visit_field::<u32>("Effect", Self::VT_EFFECT, false)?
     .visit_field::<u32>("Emotion", Self::VT_EMOTION, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioCharacterSituationSetExcelArgs<'a> {
    pub Name: u32,
    pub Face: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Behavior: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Action: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Shape: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Effect: u32,
    pub Emotion: u32,
}
impl<'a> Default for ScenarioCharacterSituationSetExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioCharacterSituationSetExcelArgs {
      Name: 0,
      Face: None,
      Behavior: None,
      Action: None,
      Shape: None,
      Effect: 0,
      Emotion: 0,
    }
  }
}

impl Serialize for ScenarioCharacterSituationSetExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioCharacterSituationSetExcel", 7)?;
      s.serialize_field("Name", &self.Name())?;
      if let Some(f) = self.Face() {
        s.serialize_field("Face", &f)?;
      } else {
        s.skip_field("Face")?;
      }
      if let Some(f) = self.Behavior() {
        s.serialize_field("Behavior", &f)?;
      } else {
        s.skip_field("Behavior")?;
      }
      if let Some(f) = self.Action() {
        s.serialize_field("Action", &f)?;
      } else {
        s.skip_field("Action")?;
      }
      if let Some(f) = self.Shape() {
        s.serialize_field("Shape", &f)?;
      } else {
        s.skip_field("Shape")?;
      }
      s.serialize_field("Effect", &self.Effect())?;
      s.serialize_field("Emotion", &self.Emotion())?;
    s.end()
  }
}

pub struct ScenarioCharacterSituationSetExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioCharacterSituationSetExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Name(&mut self, Name: u32) {
    self.fbb_.push_slot::<u32>(ScenarioCharacterSituationSetExcel::VT_NAME, Name, 0);
  }
  #[inline]
  pub fn add_Face(&mut self, Face: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterSituationSetExcel::VT_FACE, Face);
  }
  #[inline]
  pub fn add_Behavior(&mut self, Behavior: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterSituationSetExcel::VT_BEHAVIOR, Behavior);
  }
  #[inline]
  pub fn add_Action(&mut self, Action: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterSituationSetExcel::VT_ACTION, Action);
  }
  #[inline]
  pub fn add_Shape(&mut self, Shape: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioCharacterSituationSetExcel::VT_SHAPE, Shape);
  }
  #[inline]
  pub fn add_Effect(&mut self, Effect: u32) {
    self.fbb_.push_slot::<u32>(ScenarioCharacterSituationSetExcel::VT_EFFECT, Effect, 0);
  }
  #[inline]
  pub fn add_Emotion(&mut self, Emotion: u32) {
    self.fbb_.push_slot::<u32>(ScenarioCharacterSituationSetExcel::VT_EMOTION, Emotion, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioCharacterSituationSetExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioCharacterSituationSetExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioCharacterSituationSetExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioCharacterSituationSetExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioCharacterSituationSetExcel");
      ds.field("Name", &self.Name());
      ds.field("Face", &self.Face());
      ds.field("Behavior", &self.Behavior());
      ds.field("Action", &self.Action());
      ds.field("Shape", &self.Shape());
      ds.field("Effect", &self.Effect());
      ds.field("Emotion", &self.Emotion());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioCharacterSituationSetExcelT {
  pub Name: u32,
  pub Face: Option<String>,
  pub Behavior: Option<String>,
  pub Action: Option<String>,
  pub Shape: Option<String>,
  pub Effect: u32,
  pub Emotion: u32,
}
impl Default for ScenarioCharacterSituationSetExcelT {
  fn default() -> Self {
    Self {
      Name: 0,
      Face: None,
      Behavior: None,
      Action: None,
      Shape: None,
      Effect: 0,
      Emotion: 0,
    }
  }
}
impl ScenarioCharacterSituationSetExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioCharacterSituationSetExcel<'b>> {
    let Name = self.Name;
    let Face = self.Face.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Behavior = self.Behavior.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Action = self.Action.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Shape = self.Shape.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Effect = self.Effect;
    let Emotion = self.Emotion;
    ScenarioCharacterSituationSetExcel::create(_fbb, &ScenarioCharacterSituationSetExcelArgs{
      Name,
      Face,
      Behavior,
      Action,
      Shape,
      Effect,
      Emotion,
    })
  }
}
