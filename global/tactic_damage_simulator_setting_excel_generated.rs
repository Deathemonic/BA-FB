// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TacticDamageSimulatorSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TacticDamageSimulatorSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TacticDamageSimulatorSettingExcel<'a> {
  type Inner = TacticDamageSimulatorSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TacticDamageSimulatorSettingExcel<'a> {
  pub const VT_ORDER: flatbuffers::VOffsetT = 4;
  pub const VT_REPEAT: flatbuffers::VOffsetT = 6;
  pub const VT_TESTPRESET: flatbuffers::VOffsetT = 8;
  pub const VT_TESTBATTLETIME: flatbuffers::VOffsetT = 10;
  pub const VT_STRIKERSQUARD: flatbuffers::VOffsetT = 12;
  pub const VT_SPECIALSQUARD: flatbuffers::VOffsetT = 14;
  pub const VT_REPLACECHARACTERCOSTREGEN: flatbuffers::VOffsetT = 16;
  pub const VT_REPLACECOSTREGENVALUE: flatbuffers::VOffsetT = 18;
  pub const VT_USEAUTOSKILL: flatbuffers::VOffsetT = 20;
  pub const VT_OVERRIDESTREETADAPTATION: flatbuffers::VOffsetT = 22;
  pub const VT_OVERRIDEOUTDOORADAPTATION: flatbuffers::VOffsetT = 24;
  pub const VT_OVERRIDEINDOORADAPTATION: flatbuffers::VOffsetT = 26;
  pub const VT_APPLYOVERRIDEADAPTATION: flatbuffers::VOffsetT = 28;
  pub const VT_OVERRIDEFAVORLEVEL: flatbuffers::VOffsetT = 30;
  pub const VT_APPLYOVERRIDEFAVORLEVEL: flatbuffers::VOffsetT = 32;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 34;
  pub const VT_FIXEDCHARACTER: flatbuffers::VOffsetT = 36;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TacticDamageSimulatorSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TacticDamageSimulatorSettingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TacticDamageSimulatorSettingExcel<'bldr>> {
    let mut builder = TacticDamageSimulatorSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TacticDamageSimulatorSetting");
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.SpecialSquard;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SpecialSquard(x);
      let x = args.StrikerSquard;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StrikerSquard(x);
      let x = args.TestBattleTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TestBattleTime(x);
      let x = args.TestPreset;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TestPreset(x);
      if let Some(x) = args.fixedCharacter {
        builder.add_fixedCharacter(x);
      }
      let x = args.OverrideFavorLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_OverrideFavorLevel(x);
      let x = args.OverrideIndoorAdaptation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OverrideIndoorAdaptation(x);
      let x = args.OverrideOutdoorAdaptation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OverrideOutdoorAdaptation(x);
      let x = args.OverrideStreetAdaptation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OverrideStreetAdaptation(x);
      let x = args.ReplaceCostRegenValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ReplaceCostRegenValue(x);
      let x = args.Repeat;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Repeat(x);
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Order(x);
      builder.add_ApplyOverrideFavorLevel(args.ApplyOverrideFavorLevel);
      builder.add_ApplyOverrideAdaptation(args.ApplyOverrideAdaptation);
      builder.add_UseAutoSkill(args.UseAutoSkill);
      builder.add_ReplaceCharacterCostRegen(args.ReplaceCharacterCostRegen);
    builder.finish()
  }

  pub fn unpack(&self) -> TacticDamageSimulatorSettingExcelT {
    let key = table_encryption_service::create_key(b"TacticDamageSimulatorSetting");
      let Order = self.Order();
      let Repeat = self.Repeat();
      let TestPreset = self.TestPreset();
      let TestBattleTime = self.TestBattleTime();
      let StrikerSquard = self.StrikerSquard();
      let SpecialSquard = self.SpecialSquard();
      let ReplaceCharacterCostRegen = self.ReplaceCharacterCostRegen();
      let ReplaceCostRegenValue = self.ReplaceCostRegenValue();
      let UseAutoSkill = self.UseAutoSkill();
      let OverrideStreetAdaptation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OverrideStreetAdaptation(), &key)
      } else {
        self.OverrideStreetAdaptation()
      };
      let OverrideOutdoorAdaptation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OverrideOutdoorAdaptation(), &key)
      } else {
        self.OverrideOutdoorAdaptation()
      };
      let OverrideIndoorAdaptation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OverrideIndoorAdaptation(), &key)
      } else {
        self.OverrideIndoorAdaptation()
      };
      let ApplyOverrideAdaptation = self.ApplyOverrideAdaptation();
      let OverrideFavorLevel = self.OverrideFavorLevel();
      let ApplyOverrideFavorLevel = self.ApplyOverrideFavorLevel();
      let GroundId = self.GroundId();
    let fixedCharacter = self.fixedCharacter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    TacticDamageSimulatorSettingExcelT {
      Order,
      Repeat,
      TestPreset,
      TestBattleTime,
      StrikerSquard,
      SpecialSquard,
      ReplaceCharacterCostRegen,
      ReplaceCostRegenValue,
      UseAutoSkill,
      OverrideStreetAdaptation,
      OverrideOutdoorAdaptation,
      OverrideIndoorAdaptation,
      ApplyOverrideAdaptation,
      OverrideFavorLevel,
      ApplyOverrideFavorLevel,
      GroundId,
      fixedCharacter,
    }
  }

  #[inline]
  pub fn Order(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TacticDamageSimulatorSettingExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Repeat(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TacticDamageSimulatorSettingExcel::VT_REPEAT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TestPreset(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticDamageSimulatorSettingExcel::VT_TESTPRESET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TestBattleTime(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticDamageSimulatorSettingExcel::VT_TESTBATTLETIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StrikerSquard(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticDamageSimulatorSettingExcel::VT_STRIKERSQUARD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SpecialSquard(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticDamageSimulatorSettingExcel::VT_SPECIALSQUARD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplaceCharacterCostRegen(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TacticDamageSimulatorSettingExcel::VT_REPLACECHARACTERCOSTREGEN, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ReplaceCostRegenValue(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TacticDamageSimulatorSettingExcel::VT_REPLACECOSTREGENVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UseAutoSkill(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TacticDamageSimulatorSettingExcel::VT_USEAUTOSKILL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn OverrideStreetAdaptation(&self) -> TerrainAdaptationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerrainAdaptationStat>(TacticDamageSimulatorSettingExcel::VT_OVERRIDESTREETADAPTATION, Some(TerrainAdaptationStat::D)).unwrap()}
  }
  #[inline]
  pub fn OverrideOutdoorAdaptation(&self) -> TerrainAdaptationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerrainAdaptationStat>(TacticDamageSimulatorSettingExcel::VT_OVERRIDEOUTDOORADAPTATION, Some(TerrainAdaptationStat::D)).unwrap()}
  }
  #[inline]
  pub fn OverrideIndoorAdaptation(&self) -> TerrainAdaptationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerrainAdaptationStat>(TacticDamageSimulatorSettingExcel::VT_OVERRIDEINDOORADAPTATION, Some(TerrainAdaptationStat::D)).unwrap()}
  }
  #[inline]
  pub fn ApplyOverrideAdaptation(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TacticDamageSimulatorSettingExcel::VT_APPLYOVERRIDEADAPTATION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn OverrideFavorLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TacticDamageSimulatorSettingExcel::VT_OVERRIDEFAVORLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ApplyOverrideFavorLevel(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TacticDamageSimulatorSettingExcel::VT_APPLYOVERRIDEFAVORLEVEL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticDamageSimulatorSettingExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn fixedCharacter(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TacticDamageSimulatorSettingExcel::VT_FIXEDCHARACTER, None)}
  }
}

impl flatbuffers::Verifiable for TacticDamageSimulatorSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("Order", Self::VT_ORDER, false)?
     .visit_field::<i32>("Repeat", Self::VT_REPEAT, false)?
     .visit_field::<i64>("TestPreset", Self::VT_TESTPRESET, false)?
     .visit_field::<i64>("TestBattleTime", Self::VT_TESTBATTLETIME, false)?
     .visit_field::<i64>("StrikerSquard", Self::VT_STRIKERSQUARD, false)?
     .visit_field::<i64>("SpecialSquard", Self::VT_SPECIALSQUARD, false)?
     .visit_field::<bool>("ReplaceCharacterCostRegen", Self::VT_REPLACECHARACTERCOSTREGEN, false)?
     .visit_field::<i32>("ReplaceCostRegenValue", Self::VT_REPLACECOSTREGENVALUE, false)?
     .visit_field::<bool>("UseAutoSkill", Self::VT_USEAUTOSKILL, false)?
     .visit_field::<TerrainAdaptationStat>("OverrideStreetAdaptation", Self::VT_OVERRIDESTREETADAPTATION, false)?
     .visit_field::<TerrainAdaptationStat>("OverrideOutdoorAdaptation", Self::VT_OVERRIDEOUTDOORADAPTATION, false)?
     .visit_field::<TerrainAdaptationStat>("OverrideIndoorAdaptation", Self::VT_OVERRIDEINDOORADAPTATION, false)?
     .visit_field::<bool>("ApplyOverrideAdaptation", Self::VT_APPLYOVERRIDEADAPTATION, false)?
     .visit_field::<i32>("OverrideFavorLevel", Self::VT_OVERRIDEFAVORLEVEL, false)?
     .visit_field::<bool>("ApplyOverrideFavorLevel", Self::VT_APPLYOVERRIDEFAVORLEVEL, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("fixedCharacter", Self::VT_FIXEDCHARACTER, false)?
     .finish();
    Ok(())
  }
}
pub struct TacticDamageSimulatorSettingExcelArgs<'a> {
    pub Order: i32,
    pub Repeat: i32,
    pub TestPreset: i64,
    pub TestBattleTime: i64,
    pub StrikerSquard: i64,
    pub SpecialSquard: i64,
    pub ReplaceCharacterCostRegen: bool,
    pub ReplaceCostRegenValue: i32,
    pub UseAutoSkill: bool,
    pub OverrideStreetAdaptation: TerrainAdaptationStat,
    pub OverrideOutdoorAdaptation: TerrainAdaptationStat,
    pub OverrideIndoorAdaptation: TerrainAdaptationStat,
    pub ApplyOverrideAdaptation: bool,
    pub OverrideFavorLevel: i32,
    pub ApplyOverrideFavorLevel: bool,
    pub GroundId: i64,
    pub fixedCharacter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for TacticDamageSimulatorSettingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TacticDamageSimulatorSettingExcelArgs {
      Order: 0,
      Repeat: 0,
      TestPreset: 0,
      TestBattleTime: 0,
      StrikerSquard: 0,
      SpecialSquard: 0,
      ReplaceCharacterCostRegen: false,
      ReplaceCostRegenValue: 0,
      UseAutoSkill: false,
      OverrideStreetAdaptation: TerrainAdaptationStat::D,
      OverrideOutdoorAdaptation: TerrainAdaptationStat::D,
      OverrideIndoorAdaptation: TerrainAdaptationStat::D,
      ApplyOverrideAdaptation: false,
      OverrideFavorLevel: 0,
      ApplyOverrideFavorLevel: false,
      GroundId: 0,
      fixedCharacter: None,
    }
  }
}

impl Serialize for TacticDamageSimulatorSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TacticDamageSimulatorSettingExcel", 17)?;
      s.serialize_field("Order", &self.Order())?;
      s.serialize_field("Repeat", &self.Repeat())?;
      s.serialize_field("TestPreset", &self.TestPreset())?;
      s.serialize_field("TestBattleTime", &self.TestBattleTime())?;
      s.serialize_field("StrikerSquard", &self.StrikerSquard())?;
      s.serialize_field("SpecialSquard", &self.SpecialSquard())?;
      s.serialize_field("ReplaceCharacterCostRegen", &self.ReplaceCharacterCostRegen())?;
      s.serialize_field("ReplaceCostRegenValue", &self.ReplaceCostRegenValue())?;
      s.serialize_field("UseAutoSkill", &self.UseAutoSkill())?;
      s.serialize_field("OverrideStreetAdaptation", &self.OverrideStreetAdaptation())?;
      s.serialize_field("OverrideOutdoorAdaptation", &self.OverrideOutdoorAdaptation())?;
      s.serialize_field("OverrideIndoorAdaptation", &self.OverrideIndoorAdaptation())?;
      s.serialize_field("ApplyOverrideAdaptation", &self.ApplyOverrideAdaptation())?;
      s.serialize_field("OverrideFavorLevel", &self.OverrideFavorLevel())?;
      s.serialize_field("ApplyOverrideFavorLevel", &self.ApplyOverrideFavorLevel())?;
      s.serialize_field("GroundId", &self.GroundId())?;
      if let Some(f) = self.fixedCharacter() {
        s.serialize_field("fixedCharacter", &f)?;
      } else {
        s.skip_field("fixedCharacter")?;
      }
    s.end()
  }
}

pub struct TacticDamageSimulatorSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TacticDamageSimulatorSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Order(&mut self, Order: i32) {
    self.fbb_.push_slot::<i32>(TacticDamageSimulatorSettingExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_Repeat(&mut self, Repeat: i32) {
    self.fbb_.push_slot::<i32>(TacticDamageSimulatorSettingExcel::VT_REPEAT, Repeat, 0);
  }
  #[inline]
  pub fn add_TestPreset(&mut self, TestPreset: i64) {
    self.fbb_.push_slot::<i64>(TacticDamageSimulatorSettingExcel::VT_TESTPRESET, TestPreset, 0);
  }
  #[inline]
  pub fn add_TestBattleTime(&mut self, TestBattleTime: i64) {
    self.fbb_.push_slot::<i64>(TacticDamageSimulatorSettingExcel::VT_TESTBATTLETIME, TestBattleTime, 0);
  }
  #[inline]
  pub fn add_StrikerSquard(&mut self, StrikerSquard: i64) {
    self.fbb_.push_slot::<i64>(TacticDamageSimulatorSettingExcel::VT_STRIKERSQUARD, StrikerSquard, 0);
  }
  #[inline]
  pub fn add_SpecialSquard(&mut self, SpecialSquard: i64) {
    self.fbb_.push_slot::<i64>(TacticDamageSimulatorSettingExcel::VT_SPECIALSQUARD, SpecialSquard, 0);
  }
  #[inline]
  pub fn add_ReplaceCharacterCostRegen(&mut self, ReplaceCharacterCostRegen: bool) {
    self.fbb_.push_slot::<bool>(TacticDamageSimulatorSettingExcel::VT_REPLACECHARACTERCOSTREGEN, ReplaceCharacterCostRegen, false);
  }
  #[inline]
  pub fn add_ReplaceCostRegenValue(&mut self, ReplaceCostRegenValue: i32) {
    self.fbb_.push_slot::<i32>(TacticDamageSimulatorSettingExcel::VT_REPLACECOSTREGENVALUE, ReplaceCostRegenValue, 0);
  }
  #[inline]
  pub fn add_UseAutoSkill(&mut self, UseAutoSkill: bool) {
    self.fbb_.push_slot::<bool>(TacticDamageSimulatorSettingExcel::VT_USEAUTOSKILL, UseAutoSkill, false);
  }
  #[inline]
  pub fn add_OverrideStreetAdaptation(&mut self, OverrideStreetAdaptation: TerrainAdaptationStat) {
    self.fbb_.push_slot::<TerrainAdaptationStat>(TacticDamageSimulatorSettingExcel::VT_OVERRIDESTREETADAPTATION, OverrideStreetAdaptation, TerrainAdaptationStat::D);
  }
  #[inline]
  pub fn add_OverrideOutdoorAdaptation(&mut self, OverrideOutdoorAdaptation: TerrainAdaptationStat) {
    self.fbb_.push_slot::<TerrainAdaptationStat>(TacticDamageSimulatorSettingExcel::VT_OVERRIDEOUTDOORADAPTATION, OverrideOutdoorAdaptation, TerrainAdaptationStat::D);
  }
  #[inline]
  pub fn add_OverrideIndoorAdaptation(&mut self, OverrideIndoorAdaptation: TerrainAdaptationStat) {
    self.fbb_.push_slot::<TerrainAdaptationStat>(TacticDamageSimulatorSettingExcel::VT_OVERRIDEINDOORADAPTATION, OverrideIndoorAdaptation, TerrainAdaptationStat::D);
  }
  #[inline]
  pub fn add_ApplyOverrideAdaptation(&mut self, ApplyOverrideAdaptation: bool) {
    self.fbb_.push_slot::<bool>(TacticDamageSimulatorSettingExcel::VT_APPLYOVERRIDEADAPTATION, ApplyOverrideAdaptation, false);
  }
  #[inline]
  pub fn add_OverrideFavorLevel(&mut self, OverrideFavorLevel: i32) {
    self.fbb_.push_slot::<i32>(TacticDamageSimulatorSettingExcel::VT_OVERRIDEFAVORLEVEL, OverrideFavorLevel, 0);
  }
  #[inline]
  pub fn add_ApplyOverrideFavorLevel(&mut self, ApplyOverrideFavorLevel: bool) {
    self.fbb_.push_slot::<bool>(TacticDamageSimulatorSettingExcel::VT_APPLYOVERRIDEFAVORLEVEL, ApplyOverrideFavorLevel, false);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(TacticDamageSimulatorSettingExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_fixedCharacter(&mut self, fixedCharacter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TacticDamageSimulatorSettingExcel::VT_FIXEDCHARACTER, fixedCharacter);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TacticDamageSimulatorSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TacticDamageSimulatorSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TacticDamageSimulatorSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TacticDamageSimulatorSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TacticDamageSimulatorSettingExcel");
      ds.field("Order", &self.Order());
      ds.field("Repeat", &self.Repeat());
      ds.field("TestPreset", &self.TestPreset());
      ds.field("TestBattleTime", &self.TestBattleTime());
      ds.field("StrikerSquard", &self.StrikerSquard());
      ds.field("SpecialSquard", &self.SpecialSquard());
      ds.field("ReplaceCharacterCostRegen", &self.ReplaceCharacterCostRegen());
      ds.field("ReplaceCostRegenValue", &self.ReplaceCostRegenValue());
      ds.field("UseAutoSkill", &self.UseAutoSkill());
      ds.field("OverrideStreetAdaptation", &self.OverrideStreetAdaptation());
      ds.field("OverrideOutdoorAdaptation", &self.OverrideOutdoorAdaptation());
      ds.field("OverrideIndoorAdaptation", &self.OverrideIndoorAdaptation());
      ds.field("ApplyOverrideAdaptation", &self.ApplyOverrideAdaptation());
      ds.field("OverrideFavorLevel", &self.OverrideFavorLevel());
      ds.field("ApplyOverrideFavorLevel", &self.ApplyOverrideFavorLevel());
      ds.field("GroundId", &self.GroundId());
      ds.field("fixedCharacter", &self.fixedCharacter());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TacticDamageSimulatorSettingExcelT {
  pub Order: i32,
  pub Repeat: i32,
  pub TestPreset: i64,
  pub TestBattleTime: i64,
  pub StrikerSquard: i64,
  pub SpecialSquard: i64,
  pub ReplaceCharacterCostRegen: bool,
  pub ReplaceCostRegenValue: i32,
  pub UseAutoSkill: bool,
  pub OverrideStreetAdaptation: TerrainAdaptationStat,
  pub OverrideOutdoorAdaptation: TerrainAdaptationStat,
  pub OverrideIndoorAdaptation: TerrainAdaptationStat,
  pub ApplyOverrideAdaptation: bool,
  pub OverrideFavorLevel: i32,
  pub ApplyOverrideFavorLevel: bool,
  pub GroundId: i64,
  pub fixedCharacter: Option<Vec<i64>>,
}
impl Default for TacticDamageSimulatorSettingExcelT {
  fn default() -> Self {
    Self {
      Order: 0,
      Repeat: 0,
      TestPreset: 0,
      TestBattleTime: 0,
      StrikerSquard: 0,
      SpecialSquard: 0,
      ReplaceCharacterCostRegen: false,
      ReplaceCostRegenValue: 0,
      UseAutoSkill: false,
      OverrideStreetAdaptation: TerrainAdaptationStat::D,
      OverrideOutdoorAdaptation: TerrainAdaptationStat::D,
      OverrideIndoorAdaptation: TerrainAdaptationStat::D,
      ApplyOverrideAdaptation: false,
      OverrideFavorLevel: 0,
      ApplyOverrideFavorLevel: false,
      GroundId: 0,
      fixedCharacter: None,
    }
  }
}
impl TacticDamageSimulatorSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TacticDamageSimulatorSettingExcel<'b>> {
    let Order = self.Order;
    let Repeat = self.Repeat;
    let TestPreset = self.TestPreset;
    let TestBattleTime = self.TestBattleTime;
    let StrikerSquard = self.StrikerSquard;
    let SpecialSquard = self.SpecialSquard;
    let ReplaceCharacterCostRegen = self.ReplaceCharacterCostRegen;
    let ReplaceCostRegenValue = self.ReplaceCostRegenValue;
    let UseAutoSkill = self.UseAutoSkill;
    let OverrideStreetAdaptation = self.OverrideStreetAdaptation;
    let OverrideOutdoorAdaptation = self.OverrideOutdoorAdaptation;
    let OverrideIndoorAdaptation = self.OverrideIndoorAdaptation;
    let ApplyOverrideAdaptation = self.ApplyOverrideAdaptation;
    let OverrideFavorLevel = self.OverrideFavorLevel;
    let ApplyOverrideFavorLevel = self.ApplyOverrideFavorLevel;
    let GroundId = self.GroundId;
    let fixedCharacter = self.fixedCharacter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    TacticDamageSimulatorSettingExcel::create(_fbb, &TacticDamageSimulatorSettingExcelArgs{
      Order,
      Repeat,
      TestPreset,
      TestBattleTime,
      StrikerSquard,
      SpecialSquard,
      ReplaceCharacterCostRegen,
      ReplaceCostRegenValue,
      UseAutoSkill,
      OverrideStreetAdaptation,
      OverrideOutdoorAdaptation,
      OverrideIndoorAdaptation,
      ApplyOverrideAdaptation,
      OverrideFavorLevel,
      ApplyOverrideFavorLevel,
      GroundId,
      fixedCharacter,
    })
  }
}
