// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProductSelectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ProductSelectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProductSelectExcel<'a> {
  type Inner = ProductSelectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProductSelectExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTID: flatbuffers::VOffsetT = 6;
  pub const VT_TEENPRODUCTID: flatbuffers::VOffsetT = 8;
  pub const VT_STORETYPE: flatbuffers::VOffsetT = 10;
  pub const VT_PRICE: flatbuffers::VOffsetT = 12;
  pub const VT_PRICEREFERENCE: flatbuffers::VOffsetT = 14;
  pub const VT_PURCHASEPERIODTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_PURCHASEPERIODLIMIT: flatbuffers::VOffsetT = 18;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 22;
  pub const VT_PARCELAMOUNT: flatbuffers::VOffsetT = 24;
  pub const VT_PRODUCTSELECTIONSLOT: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProductSelectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ProductSelectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ProductSelectExcel<'bldr>> {
    let mut builder = ProductSelectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ProductSelect");
      let x = args.PurchasePeriodLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PurchasePeriodLimit(x);
      let x = args.Price;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Price(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ProductSelectionSlot {
        builder.add_ProductSelectionSlot(x);
      }
      if let Some(x) = args.ParcelAmount {
        builder.add_ParcelAmount(x);
      }
      if let Some(x) = args.ParcelId {
        builder.add_ParcelId(x);
      }
      if let Some(x) = args.ParcelType {
        builder.add_ParcelType(x);
      }
      let x = args.PurchasePeriodType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PurchasePeriodType(x);
      if let Some(x) = args.PriceReference {
        builder.add_PriceReference(x);
      }
      let x = args.StoreType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StoreType(x);
      if let Some(x) = args.TeenProductId {
        builder.add_TeenProductId(x);
      }
      if let Some(x) = args.ProductId {
        builder.add_ProductId(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ProductSelectExcelT {
    let key = table_encryption_service::create_key(b"ProductSelect");
      let Id = self.Id();
    let ProductId = self.ProductId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TeenProductId = self.TeenProductId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StoreType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StoreType(), &key)
      } else {
        self.StoreType()
      };
      let Price = self.Price();
    let PriceReference = self.PriceReference().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let PurchasePeriodType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PurchasePeriodType(), &key)
      } else {
        self.PurchasePeriodType()
      };
      let PurchasePeriodLimit = self.PurchasePeriodLimit();
    let ParcelType = self.ParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ParcelId = self.ParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ParcelAmount = self.ParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ProductSelectionSlot = self.ProductSelectionSlot().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ProductSelectExcelT {
      Id,
      ProductId,
      TeenProductId,
      StoreType,
      Price,
      PriceReference,
      PurchasePeriodType,
      PurchasePeriodLimit,
      ParcelType,
      ParcelId,
      ParcelAmount,
      ProductSelectionSlot,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ProductSelectExcel::VT_PRODUCTID, None)}
  }
  #[inline]
  pub fn TeenProductId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ProductSelectExcel::VT_TEENPRODUCTID, None)}
  }
  #[inline]
  pub fn StoreType(&self) -> StoreType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StoreType>(ProductSelectExcel::VT_STORETYPE, Some(StoreType::None)).unwrap()}
  }
  #[inline]
  pub fn Price(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectExcel::VT_PRICE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PriceReference(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ProductSelectExcel::VT_PRICEREFERENCE, None)}
  }
  #[inline]
  pub fn PurchasePeriodType(&self) -> PurchasePeriodType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PurchasePeriodType>(ProductSelectExcel::VT_PURCHASEPERIODTYPE, Some(PurchasePeriodType::None)).unwrap()}
  }
  #[inline]
  pub fn PurchasePeriodLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ProductSelectExcel::VT_PURCHASEPERIODLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(ProductSelectExcel::VT_PARCELTYPE, None)}
  }
  #[inline]
  pub fn ParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ProductSelectExcel::VT_PARCELID, None)}
  }
  #[inline]
  pub fn ParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ProductSelectExcel::VT_PARCELAMOUNT, None)}
  }
  #[inline]
  pub fn ProductSelectionSlot(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ProductSelectExcel::VT_PRODUCTSELECTIONSLOT, None)}
  }
}

impl flatbuffers::Verifiable for ProductSelectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProductId", Self::VT_PRODUCTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TeenProductId", Self::VT_TEENPRODUCTID, false)?
     .visit_field::<StoreType>("StoreType", Self::VT_STORETYPE, false)?
     .visit_field::<i64>("Price", Self::VT_PRICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PriceReference", Self::VT_PRICEREFERENCE, false)?
     .visit_field::<PurchasePeriodType>("PurchasePeriodType", Self::VT_PURCHASEPERIODTYPE, false)?
     .visit_field::<i64>("PurchasePeriodLimit", Self::VT_PURCHASEPERIODLIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ParcelAmount", Self::VT_PARCELAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ProductSelectionSlot", Self::VT_PRODUCTSELECTIONSLOT, false)?
     .finish();
    Ok(())
  }
}
pub struct ProductSelectExcelArgs<'a> {
    pub Id: i64,
    pub ProductId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TeenProductId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StoreType: StoreType,
    pub Price: i64,
    pub PriceReference: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PurchasePeriodType: PurchasePeriodType,
    pub PurchasePeriodLimit: i64,
    pub ParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub ParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ProductSelectionSlot: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ProductSelectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProductSelectExcelArgs {
      Id: 0,
      ProductId: None,
      TeenProductId: None,
      StoreType: StoreType::None,
      Price: 0,
      PriceReference: None,
      PurchasePeriodType: PurchasePeriodType::None,
      PurchasePeriodLimit: 0,
      ParcelType: None,
      ParcelId: None,
      ParcelAmount: None,
      ProductSelectionSlot: None,
    }
  }
}

impl Serialize for ProductSelectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProductSelectExcel", 12)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.ProductId() {
        s.serialize_field("ProductId", &f)?;
      } else {
        s.skip_field("ProductId")?;
      }
      if let Some(f) = self.TeenProductId() {
        s.serialize_field("TeenProductId", &f)?;
      } else {
        s.skip_field("TeenProductId")?;
      }
      s.serialize_field("StoreType", &self.StoreType())?;
      s.serialize_field("Price", &self.Price())?;
      if let Some(f) = self.PriceReference() {
        s.serialize_field("PriceReference", &f)?;
      } else {
        s.skip_field("PriceReference")?;
      }
      s.serialize_field("PurchasePeriodType", &self.PurchasePeriodType())?;
      s.serialize_field("PurchasePeriodLimit", &self.PurchasePeriodLimit())?;
      if let Some(f) = self.ParcelType() {
        s.serialize_field("ParcelType", &f)?;
      } else {
        s.skip_field("ParcelType")?;
      }
      if let Some(f) = self.ParcelId() {
        s.serialize_field("ParcelId", &f)?;
      } else {
        s.skip_field("ParcelId")?;
      }
      if let Some(f) = self.ParcelAmount() {
        s.serialize_field("ParcelAmount", &f)?;
      } else {
        s.skip_field("ParcelAmount")?;
      }
      if let Some(f) = self.ProductSelectionSlot() {
        s.serialize_field("ProductSelectionSlot", &f)?;
      } else {
        s.skip_field("ProductSelectionSlot")?;
      }
    s.end()
  }
}

pub struct ProductSelectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ProductSelectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ProductId(&mut self, ProductId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductSelectExcel::VT_PRODUCTID, ProductId);
  }
  #[inline]
  pub fn add_TeenProductId(&mut self, TeenProductId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductSelectExcel::VT_TEENPRODUCTID, TeenProductId);
  }
  #[inline]
  pub fn add_StoreType(&mut self, StoreType: StoreType) {
    self.fbb_.push_slot::<StoreType>(ProductSelectExcel::VT_STORETYPE, StoreType, StoreType::None);
  }
  #[inline]
  pub fn add_Price(&mut self, Price: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectExcel::VT_PRICE, Price, 0);
  }
  #[inline]
  pub fn add_PriceReference(&mut self, PriceReference: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductSelectExcel::VT_PRICEREFERENCE, PriceReference);
  }
  #[inline]
  pub fn add_PurchasePeriodType(&mut self, PurchasePeriodType: PurchasePeriodType) {
    self.fbb_.push_slot::<PurchasePeriodType>(ProductSelectExcel::VT_PURCHASEPERIODTYPE, PurchasePeriodType, PurchasePeriodType::None);
  }
  #[inline]
  pub fn add_PurchasePeriodLimit(&mut self, PurchasePeriodLimit: i64) {
    self.fbb_.push_slot::<i64>(ProductSelectExcel::VT_PURCHASEPERIODLIMIT, PurchasePeriodLimit, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductSelectExcel::VT_PARCELTYPE, ParcelType);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductSelectExcel::VT_PARCELID, ParcelId);
  }
  #[inline]
  pub fn add_ParcelAmount(&mut self, ParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductSelectExcel::VT_PARCELAMOUNT, ParcelAmount);
  }
  #[inline]
  pub fn add_ProductSelectionSlot(&mut self, ProductSelectionSlot: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ProductSelectExcel::VT_PRODUCTSELECTIONSLOT, ProductSelectionSlot);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ProductSelectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ProductSelectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProductSelectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProductSelectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProductSelectExcel");
      ds.field("Id", &self.Id());
      ds.field("ProductId", &self.ProductId());
      ds.field("TeenProductId", &self.TeenProductId());
      ds.field("StoreType", &self.StoreType());
      ds.field("Price", &self.Price());
      ds.field("PriceReference", &self.PriceReference());
      ds.field("PurchasePeriodType", &self.PurchasePeriodType());
      ds.field("PurchasePeriodLimit", &self.PurchasePeriodLimit());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("ParcelAmount", &self.ParcelAmount());
      ds.field("ProductSelectionSlot", &self.ProductSelectionSlot());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ProductSelectExcelT {
  pub Id: i64,
  pub ProductId: Option<String>,
  pub TeenProductId: Option<String>,
  pub StoreType: StoreType,
  pub Price: i64,
  pub PriceReference: Option<String>,
  pub PurchasePeriodType: PurchasePeriodType,
  pub PurchasePeriodLimit: i64,
  pub ParcelType: Option<Vec<ParcelType>>,
  pub ParcelId: Option<Vec<i64>>,
  pub ParcelAmount: Option<Vec<i64>>,
  pub ProductSelectionSlot: Option<Vec<i64>>,
}
impl Default for ProductSelectExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ProductId: None,
      TeenProductId: None,
      StoreType: StoreType::None,
      Price: 0,
      PriceReference: None,
      PurchasePeriodType: PurchasePeriodType::None,
      PurchasePeriodLimit: 0,
      ParcelType: None,
      ParcelId: None,
      ParcelAmount: None,
      ProductSelectionSlot: None,
    }
  }
}
impl ProductSelectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ProductSelectExcel<'b>> {
    let Id = self.Id;
    let ProductId = self.ProductId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TeenProductId = self.TeenProductId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StoreType = self.StoreType;
    let Price = self.Price;
    let PriceReference = self.PriceReference.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PurchasePeriodType = self.PurchasePeriodType;
    let PurchasePeriodLimit = self.PurchasePeriodLimit;
    let ParcelType = self.ParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParcelId = self.ParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParcelAmount = self.ParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ProductSelectionSlot = self.ProductSelectionSlot.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ProductSelectExcel::create(_fbb, &ProductSelectExcelArgs{
      Id,
      ProductId,
      TeenProductId,
      StoreType,
      Price,
      PriceReference,
      PurchasePeriodType,
      PurchasePeriodLimit,
      ParcelType,
      ParcelId,
      ParcelAmount,
      ProductSelectionSlot,
    })
  }
}
