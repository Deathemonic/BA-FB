// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WebEventSeasonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WebEventSeasonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WebEventSeasonExcel<'a> {
  type Inner = WebEventSeasonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WebEventSeasonExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ENABLED: flatbuffers::VOffsetT = 6;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 8;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 10;
  pub const VT_LOBBYBANNERIMAGE: flatbuffers::VOffsetT = 12;
  pub const VT_POPUPTITLELOCALIZEKEY: flatbuffers::VOffsetT = 14;
  pub const VT_STAGEEVENTURL: flatbuffers::VOffsetT = 16;
  pub const VT_LIVEEVENTURL: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WebEventSeasonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WebEventSeasonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<WebEventSeasonExcel<'bldr>> {
    let mut builder = WebEventSeasonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"WebEventSeason");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.LiveEventUrl {
        builder.add_LiveEventUrl(x);
      }
      if let Some(x) = args.StageEventUrl {
        builder.add_StageEventUrl(x);
      }
      if let Some(x) = args.PopupTitleLocalizeKey {
        builder.add_PopupTitleLocalizeKey(x);
      }
      if let Some(x) = args.LobbyBannerImage {
        builder.add_LobbyBannerImage(x);
      }
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
      builder.add_Enabled(args.Enabled);
    builder.finish()
  }

  pub fn unpack(&self) -> WebEventSeasonExcelT {
    let key = table_encryption_service::create_key(b"WebEventSeason");
      let Id = self.Id();
      let Enabled = self.Enabled();
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LobbyBannerImage = self.LobbyBannerImage().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PopupTitleLocalizeKey = self.PopupTitleLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StageEventUrl = self.StageEventUrl().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LiveEventUrl = self.LiveEventUrl().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    WebEventSeasonExcelT {
      Id,
      Enabled,
      StartDate,
      EndDate,
      LobbyBannerImage,
      PopupTitleLocalizeKey,
      StageEventUrl,
      LiveEventUrl,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WebEventSeasonExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(WebEventSeasonExcel::VT_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WebEventSeasonExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WebEventSeasonExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn LobbyBannerImage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WebEventSeasonExcel::VT_LOBBYBANNERIMAGE, None)}
  }
  #[inline]
  pub fn PopupTitleLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WebEventSeasonExcel::VT_POPUPTITLELOCALIZEKEY, None)}
  }
  #[inline]
  pub fn StageEventUrl(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WebEventSeasonExcel::VT_STAGEEVENTURL, None)}
  }
  #[inline]
  pub fn LiveEventUrl(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WebEventSeasonExcel::VT_LIVEEVENTURL, None)}
  }
}

impl flatbuffers::Verifiable for WebEventSeasonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<bool>("Enabled", Self::VT_ENABLED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LobbyBannerImage", Self::VT_LOBBYBANNERIMAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PopupTitleLocalizeKey", Self::VT_POPUPTITLELOCALIZEKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StageEventUrl", Self::VT_STAGEEVENTURL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LiveEventUrl", Self::VT_LIVEEVENTURL, false)?
     .finish();
    Ok(())
  }
}
pub struct WebEventSeasonExcelArgs<'a> {
    pub Id: i64,
    pub Enabled: bool,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LobbyBannerImage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PopupTitleLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StageEventUrl: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LiveEventUrl: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for WebEventSeasonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    WebEventSeasonExcelArgs {
      Id: 0,
      Enabled: false,
      StartDate: None,
      EndDate: None,
      LobbyBannerImage: None,
      PopupTitleLocalizeKey: None,
      StageEventUrl: None,
      LiveEventUrl: None,
    }
  }
}

impl Serialize for WebEventSeasonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WebEventSeasonExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Enabled", &self.Enabled())?;
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      if let Some(f) = self.LobbyBannerImage() {
        s.serialize_field("LobbyBannerImage", &f)?;
      } else {
        s.skip_field("LobbyBannerImage")?;
      }
      if let Some(f) = self.PopupTitleLocalizeKey() {
        s.serialize_field("PopupTitleLocalizeKey", &f)?;
      } else {
        s.skip_field("PopupTitleLocalizeKey")?;
      }
      if let Some(f) = self.StageEventUrl() {
        s.serialize_field("StageEventUrl", &f)?;
      } else {
        s.skip_field("StageEventUrl")?;
      }
      if let Some(f) = self.LiveEventUrl() {
        s.serialize_field("LiveEventUrl", &f)?;
      } else {
        s.skip_field("LiveEventUrl")?;
      }
    s.end()
  }
}

pub struct WebEventSeasonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WebEventSeasonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(WebEventSeasonExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Enabled(&mut self, Enabled: bool) {
    self.fbb_.push_slot::<bool>(WebEventSeasonExcel::VT_ENABLED, Enabled, false);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WebEventSeasonExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WebEventSeasonExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_LobbyBannerImage(&mut self, LobbyBannerImage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WebEventSeasonExcel::VT_LOBBYBANNERIMAGE, LobbyBannerImage);
  }
  #[inline]
  pub fn add_PopupTitleLocalizeKey(&mut self, PopupTitleLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WebEventSeasonExcel::VT_POPUPTITLELOCALIZEKEY, PopupTitleLocalizeKey);
  }
  #[inline]
  pub fn add_StageEventUrl(&mut self, StageEventUrl: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WebEventSeasonExcel::VT_STAGEEVENTURL, StageEventUrl);
  }
  #[inline]
  pub fn add_LiveEventUrl(&mut self, LiveEventUrl: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WebEventSeasonExcel::VT_LIVEEVENTURL, LiveEventUrl);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WebEventSeasonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WebEventSeasonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WebEventSeasonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WebEventSeasonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WebEventSeasonExcel");
      ds.field("Id", &self.Id());
      ds.field("Enabled", &self.Enabled());
      ds.field("StartDate", &self.StartDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("LobbyBannerImage", &self.LobbyBannerImage());
      ds.field("PopupTitleLocalizeKey", &self.PopupTitleLocalizeKey());
      ds.field("StageEventUrl", &self.StageEventUrl());
      ds.field("LiveEventUrl", &self.LiveEventUrl());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WebEventSeasonExcelT {
  pub Id: i64,
  pub Enabled: bool,
  pub StartDate: Option<String>,
  pub EndDate: Option<String>,
  pub LobbyBannerImage: Option<String>,
  pub PopupTitleLocalizeKey: Option<String>,
  pub StageEventUrl: Option<String>,
  pub LiveEventUrl: Option<String>,
}
impl Default for WebEventSeasonExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Enabled: false,
      StartDate: None,
      EndDate: None,
      LobbyBannerImage: None,
      PopupTitleLocalizeKey: None,
      StageEventUrl: None,
      LiveEventUrl: None,
    }
  }
}
impl WebEventSeasonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WebEventSeasonExcel<'b>> {
    let Id = self.Id;
    let Enabled = self.Enabled;
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LobbyBannerImage = self.LobbyBannerImage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PopupTitleLocalizeKey = self.PopupTitleLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StageEventUrl = self.StageEventUrl.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LiveEventUrl = self.LiveEventUrl.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    WebEventSeasonExcel::create(_fbb, &WebEventSeasonExcelArgs{
      Id,
      Enabled,
      StartDate,
      EndDate,
      LobbyBannerImage,
      PopupTitleLocalizeKey,
      StageEventUrl,
      LiveEventUrl,
    })
  }
}
