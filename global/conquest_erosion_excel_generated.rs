// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestErosionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestErosionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestErosionExcel<'a> {
  type Inner = ConquestErosionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestErosionExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_EROSIONTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_PHASE: flatbuffers::VOffsetT = 10;
  pub const VT_PHASEALARM: flatbuffers::VOffsetT = 12;
  pub const VT_STEPINDEX: flatbuffers::VOffsetT = 14;
  pub const VT_PHASESTARTCONDITIONTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_PHASESTARTCONDITIONPARAMETER: flatbuffers::VOffsetT = 18;
  pub const VT_PHASEBEFOREEXPOSECONDITIONTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_PHASEBEFOREEXPOSECONDITIONPARAMETER: flatbuffers::VOffsetT = 22;
  pub const VT_EROSIONBATTLECONDITIONPARCELTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_EROSIONBATTLECONDITIONPARCELUNIQUEID: flatbuffers::VOffsetT = 26;
  pub const VT_EROSIONBATTLECONDITIONPARCELAMOUNT: flatbuffers::VOffsetT = 28;
  pub const VT_CONQUESTREWARDID: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestErosionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestErosionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestErosionExcel<'bldr>> {
    let mut builder = ConquestErosionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestErosion");
      let x = args.ConquestRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConquestRewardId(x);
      let x = args.ErosionBattleConditionParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ErosionBattleConditionParcelAmount(x);
      let x = args.ErosionBattleConditionParcelUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ErosionBattleConditionParcelUniqueId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.ErosionBattleConditionParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ErosionBattleConditionParcelType(x);
      if let Some(x) = args.PhaseBeforeExposeConditionParameter {
        builder.add_PhaseBeforeExposeConditionParameter(x);
      }
      if let Some(x) = args.PhaseBeforeExposeConditionType {
        builder.add_PhaseBeforeExposeConditionType(x);
      }
      if let Some(x) = args.PhaseStartConditionParameter {
        builder.add_PhaseStartConditionParameter(x);
      }
      if let Some(x) = args.PhaseStartConditionType {
        builder.add_PhaseStartConditionType(x);
      }
      let x = args.StepIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StepIndex(x);
      let x = args.Phase;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Phase(x);
      let x = args.ErosionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ErosionType(x);
      builder.add_PhaseAlarm(args.PhaseAlarm);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestErosionExcelT {
    let key = table_encryption_service::create_key(b"ConquestErosion");
      let EventContentId = self.EventContentId();
      let Id = self.Id();
      let ErosionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ErosionType(), &key)
      } else {
        self.ErosionType()
      };
      let Phase = self.Phase();
      let PhaseAlarm = self.PhaseAlarm();
      let StepIndex = self.StepIndex();
    let PhaseStartConditionType = self.PhaseStartConditionType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let PhaseStartConditionParameter = self.PhaseStartConditionParameter().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let PhaseBeforeExposeConditionType = self.PhaseBeforeExposeConditionType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let PhaseBeforeExposeConditionParameter = self.PhaseBeforeExposeConditionParameter().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
      let ErosionBattleConditionParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ErosionBattleConditionParcelType(), &key)
      } else {
        self.ErosionBattleConditionParcelType()
      };
      let ErosionBattleConditionParcelUniqueId = self.ErosionBattleConditionParcelUniqueId();
      let ErosionBattleConditionParcelAmount = self.ErosionBattleConditionParcelAmount();
      let ConquestRewardId = self.ConquestRewardId();
    ConquestErosionExcelT {
      EventContentId,
      Id,
      ErosionType,
      Phase,
      PhaseAlarm,
      StepIndex,
      PhaseStartConditionType,
      PhaseStartConditionParameter,
      PhaseBeforeExposeConditionType,
      PhaseBeforeExposeConditionParameter,
      ErosionBattleConditionParcelType,
      ErosionBattleConditionParcelUniqueId,
      ErosionBattleConditionParcelAmount,
      ConquestRewardId,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ErosionType(&self) -> ConquestErosionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConquestErosionType>(ConquestErosionExcel::VT_EROSIONTYPE, Some(ConquestErosionType::None)).unwrap()}
  }
  #[inline]
  pub fn Phase(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestErosionExcel::VT_PHASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PhaseAlarm(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestErosionExcel::VT_PHASEALARM, Some(false)).unwrap()}
  }
  #[inline]
  pub fn StepIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestErosionExcel::VT_STEPINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PhaseStartConditionType(&self) -> Option<flatbuffers::Vector<'a, ConquestConditionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ConquestConditionType>>>(ConquestErosionExcel::VT_PHASESTARTCONDITIONTYPE, None)}
  }
  #[inline]
  pub fn PhaseStartConditionParameter(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ConquestErosionExcel::VT_PHASESTARTCONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn PhaseBeforeExposeConditionType(&self) -> Option<flatbuffers::Vector<'a, ConquestConditionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ConquestConditionType>>>(ConquestErosionExcel::VT_PHASEBEFOREEXPOSECONDITIONTYPE, None)}
  }
  #[inline]
  pub fn PhaseBeforeExposeConditionParameter(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ConquestErosionExcel::VT_PHASEBEFOREEXPOSECONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn ErosionBattleConditionParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestErosionExcel::VT_EROSIONBATTLECONDITIONPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ErosionBattleConditionParcelUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionExcel::VT_EROSIONBATTLECONDITIONPARCELUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ErosionBattleConditionParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionExcel::VT_EROSIONBATTLECONDITIONPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestErosionExcel::VT_CONQUESTREWARDID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestErosionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ConquestErosionType>("ErosionType", Self::VT_EROSIONTYPE, false)?
     .visit_field::<i32>("Phase", Self::VT_PHASE, false)?
     .visit_field::<bool>("PhaseAlarm", Self::VT_PHASEALARM, false)?
     .visit_field::<i32>("StepIndex", Self::VT_STEPINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ConquestConditionType>>>("PhaseStartConditionType", Self::VT_PHASESTARTCONDITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("PhaseStartConditionParameter", Self::VT_PHASESTARTCONDITIONPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ConquestConditionType>>>("PhaseBeforeExposeConditionType", Self::VT_PHASEBEFOREEXPOSECONDITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("PhaseBeforeExposeConditionParameter", Self::VT_PHASEBEFOREEXPOSECONDITIONPARAMETER, false)?
     .visit_field::<ParcelType>("ErosionBattleConditionParcelType", Self::VT_EROSIONBATTLECONDITIONPARCELTYPE, false)?
     .visit_field::<i64>("ErosionBattleConditionParcelUniqueId", Self::VT_EROSIONBATTLECONDITIONPARCELUNIQUEID, false)?
     .visit_field::<i64>("ErosionBattleConditionParcelAmount", Self::VT_EROSIONBATTLECONDITIONPARCELAMOUNT, false)?
     .visit_field::<i64>("ConquestRewardId", Self::VT_CONQUESTREWARDID, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestErosionExcelArgs<'a> {
    pub EventContentId: i64,
    pub Id: i64,
    pub ErosionType: ConquestErosionType,
    pub Phase: i32,
    pub PhaseAlarm: bool,
    pub StepIndex: i32,
    pub PhaseStartConditionType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ConquestConditionType>>>,
    pub PhaseStartConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub PhaseBeforeExposeConditionType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ConquestConditionType>>>,
    pub PhaseBeforeExposeConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ErosionBattleConditionParcelType: ParcelType,
    pub ErosionBattleConditionParcelUniqueId: i64,
    pub ErosionBattleConditionParcelAmount: i64,
    pub ConquestRewardId: i64,
}
impl<'a> Default for ConquestErosionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestErosionExcelArgs {
      EventContentId: 0,
      Id: 0,
      ErosionType: ConquestErosionType::None,
      Phase: 0,
      PhaseAlarm: false,
      StepIndex: 0,
      PhaseStartConditionType: None,
      PhaseStartConditionParameter: None,
      PhaseBeforeExposeConditionType: None,
      PhaseBeforeExposeConditionParameter: None,
      ErosionBattleConditionParcelType: ParcelType::None,
      ErosionBattleConditionParcelUniqueId: 0,
      ErosionBattleConditionParcelAmount: 0,
      ConquestRewardId: 0,
    }
  }
}

impl Serialize for ConquestErosionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestErosionExcel", 14)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ErosionType", &self.ErosionType())?;
      s.serialize_field("Phase", &self.Phase())?;
      s.serialize_field("PhaseAlarm", &self.PhaseAlarm())?;
      s.serialize_field("StepIndex", &self.StepIndex())?;
      if let Some(f) = self.PhaseStartConditionType() {
        s.serialize_field("PhaseStartConditionType", &f)?;
      } else {
        s.skip_field("PhaseStartConditionType")?;
      }
      if let Some(f) = self.PhaseStartConditionParameter() {
        s.serialize_field("PhaseStartConditionParameter", &f)?;
      } else {
        s.skip_field("PhaseStartConditionParameter")?;
      }
      if let Some(f) = self.PhaseBeforeExposeConditionType() {
        s.serialize_field("PhaseBeforeExposeConditionType", &f)?;
      } else {
        s.skip_field("PhaseBeforeExposeConditionType")?;
      }
      if let Some(f) = self.PhaseBeforeExposeConditionParameter() {
        s.serialize_field("PhaseBeforeExposeConditionParameter", &f)?;
      } else {
        s.skip_field("PhaseBeforeExposeConditionParameter")?;
      }
      s.serialize_field("ErosionBattleConditionParcelType", &self.ErosionBattleConditionParcelType())?;
      s.serialize_field("ErosionBattleConditionParcelUniqueId", &self.ErosionBattleConditionParcelUniqueId())?;
      s.serialize_field("ErosionBattleConditionParcelAmount", &self.ErosionBattleConditionParcelAmount())?;
      s.serialize_field("ConquestRewardId", &self.ConquestRewardId())?;
    s.end()
  }
}

pub struct ConquestErosionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestErosionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ErosionType(&mut self, ErosionType: ConquestErosionType) {
    self.fbb_.push_slot::<ConquestErosionType>(ConquestErosionExcel::VT_EROSIONTYPE, ErosionType, ConquestErosionType::None);
  }
  #[inline]
  pub fn add_Phase(&mut self, Phase: i32) {
    self.fbb_.push_slot::<i32>(ConquestErosionExcel::VT_PHASE, Phase, 0);
  }
  #[inline]
  pub fn add_PhaseAlarm(&mut self, PhaseAlarm: bool) {
    self.fbb_.push_slot::<bool>(ConquestErosionExcel::VT_PHASEALARM, PhaseAlarm, false);
  }
  #[inline]
  pub fn add_StepIndex(&mut self, StepIndex: i32) {
    self.fbb_.push_slot::<i32>(ConquestErosionExcel::VT_STEPINDEX, StepIndex, 0);
  }
  #[inline]
  pub fn add_PhaseStartConditionType(&mut self, PhaseStartConditionType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ConquestConditionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestErosionExcel::VT_PHASESTARTCONDITIONTYPE, PhaseStartConditionType);
  }
  #[inline]
  pub fn add_PhaseStartConditionParameter(&mut self, PhaseStartConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestErosionExcel::VT_PHASESTARTCONDITIONPARAMETER, PhaseStartConditionParameter);
  }
  #[inline]
  pub fn add_PhaseBeforeExposeConditionType(&mut self, PhaseBeforeExposeConditionType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ConquestConditionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestErosionExcel::VT_PHASEBEFOREEXPOSECONDITIONTYPE, PhaseBeforeExposeConditionType);
  }
  #[inline]
  pub fn add_PhaseBeforeExposeConditionParameter(&mut self, PhaseBeforeExposeConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestErosionExcel::VT_PHASEBEFOREEXPOSECONDITIONPARAMETER, PhaseBeforeExposeConditionParameter);
  }
  #[inline]
  pub fn add_ErosionBattleConditionParcelType(&mut self, ErosionBattleConditionParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestErosionExcel::VT_EROSIONBATTLECONDITIONPARCELTYPE, ErosionBattleConditionParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ErosionBattleConditionParcelUniqueId(&mut self, ErosionBattleConditionParcelUniqueId: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionExcel::VT_EROSIONBATTLECONDITIONPARCELUNIQUEID, ErosionBattleConditionParcelUniqueId, 0);
  }
  #[inline]
  pub fn add_ErosionBattleConditionParcelAmount(&mut self, ErosionBattleConditionParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionExcel::VT_EROSIONBATTLECONDITIONPARCELAMOUNT, ErosionBattleConditionParcelAmount, 0);
  }
  #[inline]
  pub fn add_ConquestRewardId(&mut self, ConquestRewardId: i64) {
    self.fbb_.push_slot::<i64>(ConquestErosionExcel::VT_CONQUESTREWARDID, ConquestRewardId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestErosionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestErosionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestErosionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestErosionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestErosionExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("Id", &self.Id());
      ds.field("ErosionType", &self.ErosionType());
      ds.field("Phase", &self.Phase());
      ds.field("PhaseAlarm", &self.PhaseAlarm());
      ds.field("StepIndex", &self.StepIndex());
      ds.field("PhaseStartConditionType", &self.PhaseStartConditionType());
      ds.field("PhaseStartConditionParameter", &self.PhaseStartConditionParameter());
      ds.field("PhaseBeforeExposeConditionType", &self.PhaseBeforeExposeConditionType());
      ds.field("PhaseBeforeExposeConditionParameter", &self.PhaseBeforeExposeConditionParameter());
      ds.field("ErosionBattleConditionParcelType", &self.ErosionBattleConditionParcelType());
      ds.field("ErosionBattleConditionParcelUniqueId", &self.ErosionBattleConditionParcelUniqueId());
      ds.field("ErosionBattleConditionParcelAmount", &self.ErosionBattleConditionParcelAmount());
      ds.field("ConquestRewardId", &self.ConquestRewardId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestErosionExcelT {
  pub EventContentId: i64,
  pub Id: i64,
  pub ErosionType: ConquestErosionType,
  pub Phase: i32,
  pub PhaseAlarm: bool,
  pub StepIndex: i32,
  pub PhaseStartConditionType: Option<Vec<ConquestConditionType>>,
  pub PhaseStartConditionParameter: Option<Vec<String>>,
  pub PhaseBeforeExposeConditionType: Option<Vec<ConquestConditionType>>,
  pub PhaseBeforeExposeConditionParameter: Option<Vec<String>>,
  pub ErosionBattleConditionParcelType: ParcelType,
  pub ErosionBattleConditionParcelUniqueId: i64,
  pub ErosionBattleConditionParcelAmount: i64,
  pub ConquestRewardId: i64,
}
impl Default for ConquestErosionExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      Id: 0,
      ErosionType: ConquestErosionType::None,
      Phase: 0,
      PhaseAlarm: false,
      StepIndex: 0,
      PhaseStartConditionType: None,
      PhaseStartConditionParameter: None,
      PhaseBeforeExposeConditionType: None,
      PhaseBeforeExposeConditionParameter: None,
      ErosionBattleConditionParcelType: ParcelType::None,
      ErosionBattleConditionParcelUniqueId: 0,
      ErosionBattleConditionParcelAmount: 0,
      ConquestRewardId: 0,
    }
  }
}
impl ConquestErosionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestErosionExcel<'b>> {
    let EventContentId = self.EventContentId;
    let Id = self.Id;
    let ErosionType = self.ErosionType;
    let Phase = self.Phase;
    let PhaseAlarm = self.PhaseAlarm;
    let StepIndex = self.StepIndex;
    let PhaseStartConditionType = self.PhaseStartConditionType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let PhaseStartConditionParameter = self.PhaseStartConditionParameter.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let PhaseBeforeExposeConditionType = self.PhaseBeforeExposeConditionType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let PhaseBeforeExposeConditionParameter = self.PhaseBeforeExposeConditionParameter.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ErosionBattleConditionParcelType = self.ErosionBattleConditionParcelType;
    let ErosionBattleConditionParcelUniqueId = self.ErosionBattleConditionParcelUniqueId;
    let ErosionBattleConditionParcelAmount = self.ErosionBattleConditionParcelAmount;
    let ConquestRewardId = self.ConquestRewardId;
    ConquestErosionExcel::create(_fbb, &ConquestErosionExcelArgs{
      EventContentId,
      Id,
      ErosionType,
      Phase,
      PhaseAlarm,
      StepIndex,
      PhaseStartConditionType,
      PhaseStartConditionParameter,
      PhaseBeforeExposeConditionType,
      PhaseBeforeExposeConditionParameter,
      ErosionBattleConditionParcelType,
      ErosionBattleConditionParcelUniqueId,
      ErosionBattleConditionParcelAmount,
      ConquestRewardId,
    })
  }
}
