// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ArenaSeasonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ArenaSeasonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArenaSeasonExcel<'a> {
  type Inner = ArenaSeasonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArenaSeasonExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_SEASONSTARTDATE: flatbuffers::VOffsetT = 6;
  pub const VT_SEASONENDDATE: flatbuffers::VOffsetT = 8;
  pub const VT_SEASONGROUPLIMIT: flatbuffers::VOffsetT = 10;
  pub const VT_PREVSEASONID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArenaSeasonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArenaSeasonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ArenaSeasonExcel<'bldr>> {
    let mut builder = ArenaSeasonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ArenaSeason");
      let x = args.PrevSeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevSeasonId(x);
      let x = args.SeasonGroupLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonGroupLimit(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.SeasonEndDate {
        builder.add_SeasonEndDate(x);
      }
      if let Some(x) = args.SeasonStartDate {
        builder.add_SeasonStartDate(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ArenaSeasonExcelT {
    let key = table_encryption_service::create_key(b"ArenaSeason");
      let UniqueId = self.UniqueId();
    let SeasonStartDate = self.SeasonStartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SeasonEndDate = self.SeasonEndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let SeasonGroupLimit = self.SeasonGroupLimit();
      let PrevSeasonId = self.PrevSeasonId();
    ArenaSeasonExcelT {
      UniqueId,
      SeasonStartDate,
      SeasonEndDate,
      SeasonGroupLimit,
      PrevSeasonId,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaSeasonExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SeasonStartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArenaSeasonExcel::VT_SEASONSTARTDATE, None)}
  }
  #[inline]
  pub fn SeasonEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArenaSeasonExcel::VT_SEASONENDDATE, None)}
  }
  #[inline]
  pub fn SeasonGroupLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaSeasonExcel::VT_SEASONGROUPLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrevSeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaSeasonExcel::VT_PREVSEASONID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ArenaSeasonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SeasonStartDate", Self::VT_SEASONSTARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SeasonEndDate", Self::VT_SEASONENDDATE, false)?
     .visit_field::<i64>("SeasonGroupLimit", Self::VT_SEASONGROUPLIMIT, false)?
     .visit_field::<i64>("PrevSeasonId", Self::VT_PREVSEASONID, false)?
     .finish();
    Ok(())
  }
}
pub struct ArenaSeasonExcelArgs<'a> {
    pub UniqueId: i64,
    pub SeasonStartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SeasonEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SeasonGroupLimit: i64,
    pub PrevSeasonId: i64,
}
impl<'a> Default for ArenaSeasonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArenaSeasonExcelArgs {
      UniqueId: 0,
      SeasonStartDate: None,
      SeasonEndDate: None,
      SeasonGroupLimit: 0,
      PrevSeasonId: 0,
    }
  }
}

impl Serialize for ArenaSeasonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ArenaSeasonExcel", 5)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      if let Some(f) = self.SeasonStartDate() {
        s.serialize_field("SeasonStartDate", &f)?;
      } else {
        s.skip_field("SeasonStartDate")?;
      }
      if let Some(f) = self.SeasonEndDate() {
        s.serialize_field("SeasonEndDate", &f)?;
      } else {
        s.skip_field("SeasonEndDate")?;
      }
      s.serialize_field("SeasonGroupLimit", &self.SeasonGroupLimit())?;
      s.serialize_field("PrevSeasonId", &self.PrevSeasonId())?;
    s.end()
  }
}

pub struct ArenaSeasonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArenaSeasonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(ArenaSeasonExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_SeasonStartDate(&mut self, SeasonStartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaSeasonExcel::VT_SEASONSTARTDATE, SeasonStartDate);
  }
  #[inline]
  pub fn add_SeasonEndDate(&mut self, SeasonEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaSeasonExcel::VT_SEASONENDDATE, SeasonEndDate);
  }
  #[inline]
  pub fn add_SeasonGroupLimit(&mut self, SeasonGroupLimit: i64) {
    self.fbb_.push_slot::<i64>(ArenaSeasonExcel::VT_SEASONGROUPLIMIT, SeasonGroupLimit, 0);
  }
  #[inline]
  pub fn add_PrevSeasonId(&mut self, PrevSeasonId: i64) {
    self.fbb_.push_slot::<i64>(ArenaSeasonExcel::VT_PREVSEASONID, PrevSeasonId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArenaSeasonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArenaSeasonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArenaSeasonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArenaSeasonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArenaSeasonExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("SeasonStartDate", &self.SeasonStartDate());
      ds.field("SeasonEndDate", &self.SeasonEndDate());
      ds.field("SeasonGroupLimit", &self.SeasonGroupLimit());
      ds.field("PrevSeasonId", &self.PrevSeasonId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ArenaSeasonExcelT {
  pub UniqueId: i64,
  pub SeasonStartDate: Option<String>,
  pub SeasonEndDate: Option<String>,
  pub SeasonGroupLimit: i64,
  pub PrevSeasonId: i64,
}
impl Default for ArenaSeasonExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      SeasonStartDate: None,
      SeasonEndDate: None,
      SeasonGroupLimit: 0,
      PrevSeasonId: 0,
    }
  }
}
impl ArenaSeasonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ArenaSeasonExcel<'b>> {
    let UniqueId = self.UniqueId;
    let SeasonStartDate = self.SeasonStartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SeasonEndDate = self.SeasonEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SeasonGroupLimit = self.SeasonGroupLimit;
    let PrevSeasonId = self.PrevSeasonId;
    ArenaSeasonExcel::create(_fbb, &ArenaSeasonExcelArgs{
      UniqueId,
      SeasonStartDate,
      SeasonEndDate,
      SeasonGroupLimit,
      PrevSeasonId,
    })
  }
}
