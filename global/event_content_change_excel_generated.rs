// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentChangeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentChangeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentChangeExcel<'a> {
  type Inner = EventContentChangeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentChangeExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_CHANGECOUNT: flatbuffers::VOffsetT = 6;
  pub const VT_ISLAST: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_CHANGECOSTTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_CHANGECOSTID: flatbuffers::VOffsetT = 18;
  pub const VT_CHANGECOSTAMOUNT: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentChangeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentChangeExcelArgs
  ) -> flatbuffers::WIPOffset<EventContentChangeExcel<'bldr>> {
    let mut builder = EventContentChangeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentChange");
      let x = args.ChangeCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChangeCostId(x);
      let x = args.RewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardId(x);
      let x = args.ChangeCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChangeCount(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.ChangeCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ChangeCostAmount(x);
      let x = args.ChangeCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ChangeCostType(x);
      let x = args.RewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RewardAmount(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      builder.add_IsLast(args.IsLast);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentChangeExcelT {
    let key = table_encryption_service::create_key(b"EventContentChange");
      let EventContentId = self.EventContentId();
      let ChangeCount = self.ChangeCount();
      let IsLast = self.IsLast();
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardId = self.RewardId();
      let RewardAmount = self.RewardAmount();
      let ChangeCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ChangeCostType(), &key)
      } else {
        self.ChangeCostType()
      };
      let ChangeCostId = self.ChangeCostId();
      let ChangeCostAmount = self.ChangeCostAmount();
    EventContentChangeExcelT {
      EventContentId,
      ChangeCount,
      IsLast,
      RewardParcelType,
      RewardId,
      RewardAmount,
      ChangeCostType,
      ChangeCostId,
      ChangeCostAmount,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentChangeExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChangeCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentChangeExcel::VT_CHANGECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsLast(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentChangeExcel::VT_ISLAST, Some(false)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(EventContentChangeExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentChangeExcel::VT_REWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentChangeExcel::VT_REWARDAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChangeCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(EventContentChangeExcel::VT_CHANGECOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ChangeCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentChangeExcel::VT_CHANGECOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChangeCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentChangeExcel::VT_CHANGECOSTAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentChangeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("ChangeCount", Self::VT_CHANGECOUNT, false)?
     .visit_field::<bool>("IsLast", Self::VT_ISLAST, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardId", Self::VT_REWARDID, false)?
     .visit_field::<i32>("RewardAmount", Self::VT_REWARDAMOUNT, false)?
     .visit_field::<ParcelType>("ChangeCostType", Self::VT_CHANGECOSTTYPE, false)?
     .visit_field::<i64>("ChangeCostId", Self::VT_CHANGECOSTID, false)?
     .visit_field::<i32>("ChangeCostAmount", Self::VT_CHANGECOSTAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentChangeExcelArgs {
    pub EventContentId: i64,
    pub ChangeCount: i64,
    pub IsLast: bool,
    pub RewardParcelType: ParcelType,
    pub RewardId: i64,
    pub RewardAmount: i32,
    pub ChangeCostType: ParcelType,
    pub ChangeCostId: i64,
    pub ChangeCostAmount: i32,
}
impl<'a> Default for EventContentChangeExcelArgs {
  #[inline]
  fn default() -> Self {
    EventContentChangeExcelArgs {
      EventContentId: 0,
      ChangeCount: 0,
      IsLast: false,
      RewardParcelType: ParcelType::None,
      RewardId: 0,
      RewardAmount: 0,
      ChangeCostType: ParcelType::None,
      ChangeCostId: 0,
      ChangeCostAmount: 0,
    }
  }
}

impl Serialize for EventContentChangeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentChangeExcel", 9)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("ChangeCount", &self.ChangeCount())?;
      s.serialize_field("IsLast", &self.IsLast())?;
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardId", &self.RewardId())?;
      s.serialize_field("RewardAmount", &self.RewardAmount())?;
      s.serialize_field("ChangeCostType", &self.ChangeCostType())?;
      s.serialize_field("ChangeCostId", &self.ChangeCostId())?;
      s.serialize_field("ChangeCostAmount", &self.ChangeCostAmount())?;
    s.end()
  }
}

pub struct EventContentChangeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentChangeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentChangeExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_ChangeCount(&mut self, ChangeCount: i64) {
    self.fbb_.push_slot::<i64>(EventContentChangeExcel::VT_CHANGECOUNT, ChangeCount, 0);
  }
  #[inline]
  pub fn add_IsLast(&mut self, IsLast: bool) {
    self.fbb_.push_slot::<bool>(EventContentChangeExcel::VT_ISLAST, IsLast, false);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(EventContentChangeExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardId(&mut self, RewardId: i64) {
    self.fbb_.push_slot::<i64>(EventContentChangeExcel::VT_REWARDID, RewardId, 0);
  }
  #[inline]
  pub fn add_RewardAmount(&mut self, RewardAmount: i32) {
    self.fbb_.push_slot::<i32>(EventContentChangeExcel::VT_REWARDAMOUNT, RewardAmount, 0);
  }
  #[inline]
  pub fn add_ChangeCostType(&mut self, ChangeCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(EventContentChangeExcel::VT_CHANGECOSTTYPE, ChangeCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_ChangeCostId(&mut self, ChangeCostId: i64) {
    self.fbb_.push_slot::<i64>(EventContentChangeExcel::VT_CHANGECOSTID, ChangeCostId, 0);
  }
  #[inline]
  pub fn add_ChangeCostAmount(&mut self, ChangeCostAmount: i32) {
    self.fbb_.push_slot::<i32>(EventContentChangeExcel::VT_CHANGECOSTAMOUNT, ChangeCostAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentChangeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentChangeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentChangeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentChangeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentChangeExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("ChangeCount", &self.ChangeCount());
      ds.field("IsLast", &self.IsLast());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardId", &self.RewardId());
      ds.field("RewardAmount", &self.RewardAmount());
      ds.field("ChangeCostType", &self.ChangeCostType());
      ds.field("ChangeCostId", &self.ChangeCostId());
      ds.field("ChangeCostAmount", &self.ChangeCostAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentChangeExcelT {
  pub EventContentId: i64,
  pub ChangeCount: i64,
  pub IsLast: bool,
  pub RewardParcelType: ParcelType,
  pub RewardId: i64,
  pub RewardAmount: i32,
  pub ChangeCostType: ParcelType,
  pub ChangeCostId: i64,
  pub ChangeCostAmount: i32,
}
impl Default for EventContentChangeExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      ChangeCount: 0,
      IsLast: false,
      RewardParcelType: ParcelType::None,
      RewardId: 0,
      RewardAmount: 0,
      ChangeCostType: ParcelType::None,
      ChangeCostId: 0,
      ChangeCostAmount: 0,
    }
  }
}
impl EventContentChangeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentChangeExcel<'b>> {
    let EventContentId = self.EventContentId;
    let ChangeCount = self.ChangeCount;
    let IsLast = self.IsLast;
    let RewardParcelType = self.RewardParcelType;
    let RewardId = self.RewardId;
    let RewardAmount = self.RewardAmount;
    let ChangeCostType = self.ChangeCostType;
    let ChangeCostId = self.ChangeCostId;
    let ChangeCostAmount = self.ChangeCostAmount;
    EventContentChangeExcel::create(_fbb, &EventContentChangeExcelArgs{
      EventContentId,
      ChangeCount,
      IsLast,
      RewardParcelType,
      RewardId,
      RewardAmount,
      ChangeCostType,
      ChangeCostId,
      ChangeCostAmount,
    })
  }
}
