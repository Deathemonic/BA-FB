// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterPotentialStatExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterPotentialStatExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterPotentialStatExcel<'a> {
  type Inner = CharacterPotentialStatExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterPotentialStatExcel<'a> {
  pub const VT_POTENTIALSTATGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_POTENTIALLEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_RECIPEID: flatbuffers::VOffsetT = 8;
  pub const VT_STATBONUSRATE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterPotentialStatExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterPotentialStatExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterPotentialStatExcel<'bldr>> {
    let mut builder = CharacterPotentialStatExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterPotentialStat");
      let x = args.StatBonusRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StatBonusRate(x);
      let x = args.RecipeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecipeId(x);
      let x = args.PotentialStatGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PotentialStatGroupId(x);
      let x = args.PotentialLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PotentialLevel(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterPotentialStatExcelT {
    let key = table_encryption_service::create_key(b"CharacterPotentialStat");
      let PotentialStatGroupId = self.PotentialStatGroupId();
      let PotentialLevel = self.PotentialLevel();
      let RecipeId = self.RecipeId();
      let StatBonusRate = self.StatBonusRate();
    CharacterPotentialStatExcelT {
      PotentialStatGroupId,
      PotentialLevel,
      RecipeId,
      StatBonusRate,
    }
  }

  #[inline]
  pub fn PotentialStatGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterPotentialStatExcel::VT_POTENTIALSTATGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PotentialLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterPotentialStatExcel::VT_POTENTIALLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterPotentialStatExcel::VT_RECIPEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatBonusRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterPotentialStatExcel::VT_STATBONUSRATE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterPotentialStatExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("PotentialStatGroupId", Self::VT_POTENTIALSTATGROUPID, false)?
     .visit_field::<i32>("PotentialLevel", Self::VT_POTENTIALLEVEL, false)?
     .visit_field::<i64>("RecipeId", Self::VT_RECIPEID, false)?
     .visit_field::<i64>("StatBonusRate", Self::VT_STATBONUSRATE, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterPotentialStatExcelArgs {
    pub PotentialStatGroupId: i64,
    pub PotentialLevel: i32,
    pub RecipeId: i64,
    pub StatBonusRate: i64,
}
impl<'a> Default for CharacterPotentialStatExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterPotentialStatExcelArgs {
      PotentialStatGroupId: 0,
      PotentialLevel: 0,
      RecipeId: 0,
      StatBonusRate: 0,
    }
  }
}

impl Serialize for CharacterPotentialStatExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterPotentialStatExcel", 4)?;
      s.serialize_field("PotentialStatGroupId", &self.PotentialStatGroupId())?;
      s.serialize_field("PotentialLevel", &self.PotentialLevel())?;
      s.serialize_field("RecipeId", &self.RecipeId())?;
      s.serialize_field("StatBonusRate", &self.StatBonusRate())?;
    s.end()
  }
}

pub struct CharacterPotentialStatExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterPotentialStatExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_PotentialStatGroupId(&mut self, PotentialStatGroupId: i64) {
    self.fbb_.push_slot::<i64>(CharacterPotentialStatExcel::VT_POTENTIALSTATGROUPID, PotentialStatGroupId, 0);
  }
  #[inline]
  pub fn add_PotentialLevel(&mut self, PotentialLevel: i32) {
    self.fbb_.push_slot::<i32>(CharacterPotentialStatExcel::VT_POTENTIALLEVEL, PotentialLevel, 0);
  }
  #[inline]
  pub fn add_RecipeId(&mut self, RecipeId: i64) {
    self.fbb_.push_slot::<i64>(CharacterPotentialStatExcel::VT_RECIPEID, RecipeId, 0);
  }
  #[inline]
  pub fn add_StatBonusRate(&mut self, StatBonusRate: i64) {
    self.fbb_.push_slot::<i64>(CharacterPotentialStatExcel::VT_STATBONUSRATE, StatBonusRate, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterPotentialStatExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterPotentialStatExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterPotentialStatExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterPotentialStatExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterPotentialStatExcel");
      ds.field("PotentialStatGroupId", &self.PotentialStatGroupId());
      ds.field("PotentialLevel", &self.PotentialLevel());
      ds.field("RecipeId", &self.RecipeId());
      ds.field("StatBonusRate", &self.StatBonusRate());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterPotentialStatExcelT {
  pub PotentialStatGroupId: i64,
  pub PotentialLevel: i32,
  pub RecipeId: i64,
  pub StatBonusRate: i64,
}
impl Default for CharacterPotentialStatExcelT {
  fn default() -> Self {
    Self {
      PotentialStatGroupId: 0,
      PotentialLevel: 0,
      RecipeId: 0,
      StatBonusRate: 0,
    }
  }
}
impl CharacterPotentialStatExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterPotentialStatExcel<'b>> {
    let PotentialStatGroupId = self.PotentialStatGroupId;
    let PotentialLevel = self.PotentialLevel;
    let RecipeId = self.RecipeId;
    let StatBonusRate = self.StatBonusRate;
    CharacterPotentialStatExcel::create(_fbb, &CharacterPotentialStatExcelArgs{
      PotentialStatGroupId,
      PotentialLevel,
      RecipeId,
      StatBonusRate,
    })
  }
}
