// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AccountLevelExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AccountLevelExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AccountLevelExcel<'a> {
  type Inner = AccountLevelExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AccountLevelExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_EXP: flatbuffers::VOffsetT = 8;
  pub const VT_NEWBIEEXPRATIO: flatbuffers::VOffsetT = 10;
  pub const VT_CLOSEINTERVAL: flatbuffers::VOffsetT = 12;
  pub const VT_APAUTOCHARGEMAX: flatbuffers::VOffsetT = 14;
  pub const VT_NEEDREPORTEVENT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AccountLevelExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AccountLevelExcelArgs
  ) -> flatbuffers::WIPOffset<AccountLevelExcel<'bldr>> {
    let mut builder = AccountLevelExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AccountLevel");
      let x = args.APAutoChargeMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_APAutoChargeMax(x);
      let x = args.Exp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Exp(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Level(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.CloseInterval;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CloseInterval(x);
      let x = args.NewbieExpRatio;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NewbieExpRatio(x);
      builder.add_NeedReportEvent(args.NeedReportEvent);
    builder.finish()
  }

  pub fn unpack(&self) -> AccountLevelExcelT {
    let key = table_encryption_service::create_key(b"AccountLevel");
      let Id = self.Id();
      let Level = self.Level();
      let Exp = self.Exp();
      let NewbieExpRatio = self.NewbieExpRatio();
      let CloseInterval = self.CloseInterval();
      let APAutoChargeMax = self.APAutoChargeMax();
      let NeedReportEvent = self.NeedReportEvent();
    AccountLevelExcelT {
      Id,
      Level,
      Exp,
      NewbieExpRatio,
      CloseInterval,
      APAutoChargeMax,
      NeedReportEvent,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AccountLevelExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Level(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AccountLevelExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Exp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AccountLevelExcel::VT_EXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NewbieExpRatio(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AccountLevelExcel::VT_NEWBIEEXPRATIO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CloseInterval(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AccountLevelExcel::VT_CLOSEINTERVAL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn APAutoChargeMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AccountLevelExcel::VT_APAUTOCHARGEMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NeedReportEvent(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AccountLevelExcel::VT_NEEDREPORTEVENT, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AccountLevelExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("Level", Self::VT_LEVEL, false)?
     .visit_field::<i64>("Exp", Self::VT_EXP, false)?
     .visit_field::<i32>("NewbieExpRatio", Self::VT_NEWBIEEXPRATIO, false)?
     .visit_field::<i32>("CloseInterval", Self::VT_CLOSEINTERVAL, false)?
     .visit_field::<i64>("APAutoChargeMax", Self::VT_APAUTOCHARGEMAX, false)?
     .visit_field::<bool>("NeedReportEvent", Self::VT_NEEDREPORTEVENT, false)?
     .finish();
    Ok(())
  }
}
pub struct AccountLevelExcelArgs {
    pub Id: i64,
    pub Level: i64,
    pub Exp: i64,
    pub NewbieExpRatio: i32,
    pub CloseInterval: i32,
    pub APAutoChargeMax: i64,
    pub NeedReportEvent: bool,
}
impl<'a> Default for AccountLevelExcelArgs {
  #[inline]
  fn default() -> Self {
    AccountLevelExcelArgs {
      Id: 0,
      Level: 0,
      Exp: 0,
      NewbieExpRatio: 0,
      CloseInterval: 0,
      APAutoChargeMax: 0,
      NeedReportEvent: false,
    }
  }
}

impl Serialize for AccountLevelExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AccountLevelExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("Exp", &self.Exp())?;
      s.serialize_field("NewbieExpRatio", &self.NewbieExpRatio())?;
      s.serialize_field("CloseInterval", &self.CloseInterval())?;
      s.serialize_field("APAutoChargeMax", &self.APAutoChargeMax())?;
      s.serialize_field("NeedReportEvent", &self.NeedReportEvent())?;
    s.end()
  }
}

pub struct AccountLevelExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AccountLevelExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(AccountLevelExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Level(&mut self, Level: i64) {
    self.fbb_.push_slot::<i64>(AccountLevelExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_Exp(&mut self, Exp: i64) {
    self.fbb_.push_slot::<i64>(AccountLevelExcel::VT_EXP, Exp, 0);
  }
  #[inline]
  pub fn add_NewbieExpRatio(&mut self, NewbieExpRatio: i32) {
    self.fbb_.push_slot::<i32>(AccountLevelExcel::VT_NEWBIEEXPRATIO, NewbieExpRatio, 0);
  }
  #[inline]
  pub fn add_CloseInterval(&mut self, CloseInterval: i32) {
    self.fbb_.push_slot::<i32>(AccountLevelExcel::VT_CLOSEINTERVAL, CloseInterval, 0);
  }
  #[inline]
  pub fn add_APAutoChargeMax(&mut self, APAutoChargeMax: i64) {
    self.fbb_.push_slot::<i64>(AccountLevelExcel::VT_APAUTOCHARGEMAX, APAutoChargeMax, 0);
  }
  #[inline]
  pub fn add_NeedReportEvent(&mut self, NeedReportEvent: bool) {
    self.fbb_.push_slot::<bool>(AccountLevelExcel::VT_NEEDREPORTEVENT, NeedReportEvent, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AccountLevelExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AccountLevelExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AccountLevelExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AccountLevelExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AccountLevelExcel");
      ds.field("Id", &self.Id());
      ds.field("Level", &self.Level());
      ds.field("Exp", &self.Exp());
      ds.field("NewbieExpRatio", &self.NewbieExpRatio());
      ds.field("CloseInterval", &self.CloseInterval());
      ds.field("APAutoChargeMax", &self.APAutoChargeMax());
      ds.field("NeedReportEvent", &self.NeedReportEvent());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AccountLevelExcelT {
  pub Id: i64,
  pub Level: i64,
  pub Exp: i64,
  pub NewbieExpRatio: i32,
  pub CloseInterval: i32,
  pub APAutoChargeMax: i64,
  pub NeedReportEvent: bool,
}
impl Default for AccountLevelExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Level: 0,
      Exp: 0,
      NewbieExpRatio: 0,
      CloseInterval: 0,
      APAutoChargeMax: 0,
      NeedReportEvent: false,
    }
  }
}
impl AccountLevelExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AccountLevelExcel<'b>> {
    let Id = self.Id;
    let Level = self.Level;
    let Exp = self.Exp;
    let NewbieExpRatio = self.NewbieExpRatio;
    let CloseInterval = self.CloseInterval;
    let APAutoChargeMax = self.APAutoChargeMax;
    let NeedReportEvent = self.NeedReportEvent;
    AccountLevelExcel::create(_fbb, &AccountLevelExcelArgs{
      Id,
      Level,
      Exp,
      NewbieExpRatio,
      CloseInterval,
      APAutoChargeMax,
      NeedReportEvent,
    })
  }
}
