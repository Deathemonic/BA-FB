// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestUnexpectedEventExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestUnexpectedEventExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestUnexpectedEventExcel<'a> {
  type Inner = ConquestUnexpectedEventExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestUnexpectedEventExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNEXPECTEDEVENTCONDITIONTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_UNEXPECTEDEVENTCONDITIONUNIQUEID: flatbuffers::VOffsetT = 8;
  pub const VT_UNEXPECTEDEVENTCONDITIONAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_UNEXPECTEDEVENTOCCURDAILYLIMITCOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_UNITCOUNTPERSTEP: flatbuffers::VOffsetT = 14;
  pub const VT_UNEXPECTEDEVENTPREFAB: flatbuffers::VOffsetT = 16;
  pub const VT_UNEXPECTEDEVENTUNITID: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestUnexpectedEventExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestUnexpectedEventExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestUnexpectedEventExcel<'bldr>> {
    let mut builder = ConquestUnexpectedEventExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestUnexpectedEvent");
      let x = args.UnexpectedEventConditionAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UnexpectedEventConditionAmount(x);
      let x = args.UnexpectedEventConditionUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UnexpectedEventConditionUniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.UnexpectedEventUnitId {
        builder.add_UnexpectedEventUnitId(x);
      }
      if let Some(x) = args.UnexpectedEventPrefab {
        builder.add_UnexpectedEventPrefab(x);
      }
      let x = args.UnitCountPerStep;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_UnitCountPerStep(x);
      let x = args.UnexpectedEventOccurDailyLimitCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_UnexpectedEventOccurDailyLimitCount(x);
      let x = args.UnexpectedEventConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_UnexpectedEventConditionType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestUnexpectedEventExcelT {
    let key = table_encryption_service::create_key(b"ConquestUnexpectedEvent");
      let EventContentId = self.EventContentId();
      let UnexpectedEventConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.UnexpectedEventConditionType(), &key)
      } else {
        self.UnexpectedEventConditionType()
      };
      let UnexpectedEventConditionUniqueId = self.UnexpectedEventConditionUniqueId();
      let UnexpectedEventConditionAmount = self.UnexpectedEventConditionAmount();
      let UnexpectedEventOccurDailyLimitCount = self.UnexpectedEventOccurDailyLimitCount();
      let UnitCountPerStep = self.UnitCountPerStep();
    let UnexpectedEventPrefab = self.UnexpectedEventPrefab().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let UnexpectedEventUnitId = self.UnexpectedEventUnitId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ConquestUnexpectedEventExcelT {
      EventContentId,
      UnexpectedEventConditionType,
      UnexpectedEventConditionUniqueId,
      UnexpectedEventConditionAmount,
      UnexpectedEventOccurDailyLimitCount,
      UnitCountPerStep,
      UnexpectedEventPrefab,
      UnexpectedEventUnitId,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnexpectedEventExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UnexpectedEventConditionType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTCONDITIONTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn UnexpectedEventConditionUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTCONDITIONUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UnexpectedEventConditionAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTCONDITIONAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UnexpectedEventOccurDailyLimitCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTOCCURDAILYLIMITCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UnitCountPerStep(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestUnexpectedEventExcel::VT_UNITCOUNTPERSTEP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UnexpectedEventPrefab(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTPREFAB, None)}
  }
  #[inline]
  pub fn UnexpectedEventUnitId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTUNITID, None)}
  }
}

impl flatbuffers::Verifiable for ConquestUnexpectedEventExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<ParcelType>("UnexpectedEventConditionType", Self::VT_UNEXPECTEDEVENTCONDITIONTYPE, false)?
     .visit_field::<i64>("UnexpectedEventConditionUniqueId", Self::VT_UNEXPECTEDEVENTCONDITIONUNIQUEID, false)?
     .visit_field::<i64>("UnexpectedEventConditionAmount", Self::VT_UNEXPECTEDEVENTCONDITIONAMOUNT, false)?
     .visit_field::<i32>("UnexpectedEventOccurDailyLimitCount", Self::VT_UNEXPECTEDEVENTOCCURDAILYLIMITCOUNT, false)?
     .visit_field::<i32>("UnitCountPerStep", Self::VT_UNITCOUNTPERSTEP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("UnexpectedEventPrefab", Self::VT_UNEXPECTEDEVENTPREFAB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("UnexpectedEventUnitId", Self::VT_UNEXPECTEDEVENTUNITID, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestUnexpectedEventExcelArgs<'a> {
    pub EventContentId: i64,
    pub UnexpectedEventConditionType: ParcelType,
    pub UnexpectedEventConditionUniqueId: i64,
    pub UnexpectedEventConditionAmount: i64,
    pub UnexpectedEventOccurDailyLimitCount: i32,
    pub UnitCountPerStep: i32,
    pub UnexpectedEventPrefab: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub UnexpectedEventUnitId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ConquestUnexpectedEventExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestUnexpectedEventExcelArgs {
      EventContentId: 0,
      UnexpectedEventConditionType: ParcelType::None,
      UnexpectedEventConditionUniqueId: 0,
      UnexpectedEventConditionAmount: 0,
      UnexpectedEventOccurDailyLimitCount: 0,
      UnitCountPerStep: 0,
      UnexpectedEventPrefab: None,
      UnexpectedEventUnitId: None,
    }
  }
}

impl Serialize for ConquestUnexpectedEventExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestUnexpectedEventExcel", 8)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UnexpectedEventConditionType", &self.UnexpectedEventConditionType())?;
      s.serialize_field("UnexpectedEventConditionUniqueId", &self.UnexpectedEventConditionUniqueId())?;
      s.serialize_field("UnexpectedEventConditionAmount", &self.UnexpectedEventConditionAmount())?;
      s.serialize_field("UnexpectedEventOccurDailyLimitCount", &self.UnexpectedEventOccurDailyLimitCount())?;
      s.serialize_field("UnitCountPerStep", &self.UnitCountPerStep())?;
      if let Some(f) = self.UnexpectedEventPrefab() {
        s.serialize_field("UnexpectedEventPrefab", &f)?;
      } else {
        s.skip_field("UnexpectedEventPrefab")?;
      }
      if let Some(f) = self.UnexpectedEventUnitId() {
        s.serialize_field("UnexpectedEventUnitId", &f)?;
      } else {
        s.skip_field("UnexpectedEventUnitId")?;
      }
    s.end()
  }
}

pub struct ConquestUnexpectedEventExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestUnexpectedEventExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnexpectedEventExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UnexpectedEventConditionType(&mut self, UnexpectedEventConditionType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTCONDITIONTYPE, UnexpectedEventConditionType, ParcelType::None);
  }
  #[inline]
  pub fn add_UnexpectedEventConditionUniqueId(&mut self, UnexpectedEventConditionUniqueId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTCONDITIONUNIQUEID, UnexpectedEventConditionUniqueId, 0);
  }
  #[inline]
  pub fn add_UnexpectedEventConditionAmount(&mut self, UnexpectedEventConditionAmount: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTCONDITIONAMOUNT, UnexpectedEventConditionAmount, 0);
  }
  #[inline]
  pub fn add_UnexpectedEventOccurDailyLimitCount(&mut self, UnexpectedEventOccurDailyLimitCount: i32) {
    self.fbb_.push_slot::<i32>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTOCCURDAILYLIMITCOUNT, UnexpectedEventOccurDailyLimitCount, 0);
  }
  #[inline]
  pub fn add_UnitCountPerStep(&mut self, UnitCountPerStep: i32) {
    self.fbb_.push_slot::<i32>(ConquestUnexpectedEventExcel::VT_UNITCOUNTPERSTEP, UnitCountPerStep, 0);
  }
  #[inline]
  pub fn add_UnexpectedEventPrefab(&mut self, UnexpectedEventPrefab: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTPREFAB, UnexpectedEventPrefab);
  }
  #[inline]
  pub fn add_UnexpectedEventUnitId(&mut self, UnexpectedEventUnitId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnexpectedEventExcel::VT_UNEXPECTEDEVENTUNITID, UnexpectedEventUnitId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestUnexpectedEventExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestUnexpectedEventExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestUnexpectedEventExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestUnexpectedEventExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestUnexpectedEventExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UnexpectedEventConditionType", &self.UnexpectedEventConditionType());
      ds.field("UnexpectedEventConditionUniqueId", &self.UnexpectedEventConditionUniqueId());
      ds.field("UnexpectedEventConditionAmount", &self.UnexpectedEventConditionAmount());
      ds.field("UnexpectedEventOccurDailyLimitCount", &self.UnexpectedEventOccurDailyLimitCount());
      ds.field("UnitCountPerStep", &self.UnitCountPerStep());
      ds.field("UnexpectedEventPrefab", &self.UnexpectedEventPrefab());
      ds.field("UnexpectedEventUnitId", &self.UnexpectedEventUnitId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestUnexpectedEventExcelT {
  pub EventContentId: i64,
  pub UnexpectedEventConditionType: ParcelType,
  pub UnexpectedEventConditionUniqueId: i64,
  pub UnexpectedEventConditionAmount: i64,
  pub UnexpectedEventOccurDailyLimitCount: i32,
  pub UnitCountPerStep: i32,
  pub UnexpectedEventPrefab: Option<Vec<String>>,
  pub UnexpectedEventUnitId: Option<Vec<i64>>,
}
impl Default for ConquestUnexpectedEventExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UnexpectedEventConditionType: ParcelType::None,
      UnexpectedEventConditionUniqueId: 0,
      UnexpectedEventConditionAmount: 0,
      UnexpectedEventOccurDailyLimitCount: 0,
      UnitCountPerStep: 0,
      UnexpectedEventPrefab: None,
      UnexpectedEventUnitId: None,
    }
  }
}
impl ConquestUnexpectedEventExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestUnexpectedEventExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UnexpectedEventConditionType = self.UnexpectedEventConditionType;
    let UnexpectedEventConditionUniqueId = self.UnexpectedEventConditionUniqueId;
    let UnexpectedEventConditionAmount = self.UnexpectedEventConditionAmount;
    let UnexpectedEventOccurDailyLimitCount = self.UnexpectedEventOccurDailyLimitCount;
    let UnitCountPerStep = self.UnitCountPerStep;
    let UnexpectedEventPrefab = self.UnexpectedEventPrefab.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let UnexpectedEventUnitId = self.UnexpectedEventUnitId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ConquestUnexpectedEventExcel::create(_fbb, &ConquestUnexpectedEventExcelArgs{
      EventContentId,
      UnexpectedEventConditionType,
      UnexpectedEventConditionUniqueId,
      UnexpectedEventConditionAmount,
      UnexpectedEventOccurDailyLimitCount,
      UnitCountPerStep,
      UnexpectedEventPrefab,
      UnexpectedEventUnitId,
    })
  }
}
