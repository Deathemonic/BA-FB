// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DefaultCharacterExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DefaultCharacterExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DefaultCharacterExcel<'a> {
  type Inner = DefaultCharacterExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DefaultCharacterExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_FAVORITECHARACTER: flatbuffers::VOffsetT = 6;
  pub const VT_LEVEL: flatbuffers::VOffsetT = 8;
  pub const VT_EXP: flatbuffers::VOffsetT = 10;
  pub const VT_FAVOREXP: flatbuffers::VOffsetT = 12;
  pub const VT_FAVORRANK: flatbuffers::VOffsetT = 14;
  pub const VT_STARGRADE: flatbuffers::VOffsetT = 16;
  pub const VT_EXSKILLLEVEL: flatbuffers::VOffsetT = 18;
  pub const VT_PASSIVESKILLLEVEL: flatbuffers::VOffsetT = 20;
  pub const VT_EXTRAPASSIVESKILLLEVEL: flatbuffers::VOffsetT = 22;
  pub const VT_COMMONSKILLLEVEL: flatbuffers::VOffsetT = 24;
  pub const VT_LEADERSKILLLEVEL: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DefaultCharacterExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DefaultCharacterExcelArgs
  ) -> flatbuffers::WIPOffset<DefaultCharacterExcel<'bldr>> {
    let mut builder = DefaultCharacterExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"DefaultCharacter");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.LeaderSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_LeaderSkillLevel(x);
      let x = args.CommonSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CommonSkillLevel(x);
      let x = args.ExtraPassiveSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExtraPassiveSkillLevel(x);
      let x = args.PassiveSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PassiveSkillLevel(x);
      let x = args.ExSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExSkillLevel(x);
      let x = args.StarGrade;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StarGrade(x);
      let x = args.FavorRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FavorRank(x);
      let x = args.FavorExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FavorExp(x);
      let x = args.Exp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Exp(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Level(x);
      builder.add_FavoriteCharacter(args.FavoriteCharacter);
    builder.finish()
  }

  pub fn unpack(&self) -> DefaultCharacterExcelT {
    let key = table_encryption_service::create_key(b"DefaultCharacter");
      let CharacterId = self.CharacterId();
      let FavoriteCharacter = self.FavoriteCharacter();
      let Level = self.Level();
      let Exp = self.Exp();
      let FavorExp = self.FavorExp();
      let FavorRank = self.FavorRank();
      let StarGrade = self.StarGrade();
      let ExSkillLevel = self.ExSkillLevel();
      let PassiveSkillLevel = self.PassiveSkillLevel();
      let ExtraPassiveSkillLevel = self.ExtraPassiveSkillLevel();
      let CommonSkillLevel = self.CommonSkillLevel();
      let LeaderSkillLevel = self.LeaderSkillLevel();
    DefaultCharacterExcelT {
      CharacterId,
      FavoriteCharacter,
      Level,
      Exp,
      FavorExp,
      FavorRank,
      StarGrade,
      ExSkillLevel,
      PassiveSkillLevel,
      ExtraPassiveSkillLevel,
      CommonSkillLevel,
      LeaderSkillLevel,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DefaultCharacterExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavoriteCharacter(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DefaultCharacterExcel::VT_FAVORITECHARACTER, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Exp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_EXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorExp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_FAVOREXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorRank(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_FAVORRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarGrade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_STARGRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_EXSKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PassiveSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_PASSIVESKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraPassiveSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_EXTRAPASSIVESKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CommonSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_COMMONSKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LeaderSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultCharacterExcel::VT_LEADERSKILLLEVEL, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for DefaultCharacterExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<bool>("FavoriteCharacter", Self::VT_FAVORITECHARACTER, false)?
     .visit_field::<i32>("Level", Self::VT_LEVEL, false)?
     .visit_field::<i32>("Exp", Self::VT_EXP, false)?
     .visit_field::<i32>("FavorExp", Self::VT_FAVOREXP, false)?
     .visit_field::<i32>("FavorRank", Self::VT_FAVORRANK, false)?
     .visit_field::<i32>("StarGrade", Self::VT_STARGRADE, false)?
     .visit_field::<i32>("ExSkillLevel", Self::VT_EXSKILLLEVEL, false)?
     .visit_field::<i32>("PassiveSkillLevel", Self::VT_PASSIVESKILLLEVEL, false)?
     .visit_field::<i32>("ExtraPassiveSkillLevel", Self::VT_EXTRAPASSIVESKILLLEVEL, false)?
     .visit_field::<i32>("CommonSkillLevel", Self::VT_COMMONSKILLLEVEL, false)?
     .visit_field::<i32>("LeaderSkillLevel", Self::VT_LEADERSKILLLEVEL, false)?
     .finish();
    Ok(())
  }
}
pub struct DefaultCharacterExcelArgs {
    pub CharacterId: i64,
    pub FavoriteCharacter: bool,
    pub Level: i32,
    pub Exp: i32,
    pub FavorExp: i32,
    pub FavorRank: i32,
    pub StarGrade: i32,
    pub ExSkillLevel: i32,
    pub PassiveSkillLevel: i32,
    pub ExtraPassiveSkillLevel: i32,
    pub CommonSkillLevel: i32,
    pub LeaderSkillLevel: i32,
}
impl<'a> Default for DefaultCharacterExcelArgs {
  #[inline]
  fn default() -> Self {
    DefaultCharacterExcelArgs {
      CharacterId: 0,
      FavoriteCharacter: false,
      Level: 0,
      Exp: 0,
      FavorExp: 0,
      FavorRank: 0,
      StarGrade: 0,
      ExSkillLevel: 0,
      PassiveSkillLevel: 0,
      ExtraPassiveSkillLevel: 0,
      CommonSkillLevel: 0,
      LeaderSkillLevel: 0,
    }
  }
}

impl Serialize for DefaultCharacterExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("DefaultCharacterExcel", 12)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("FavoriteCharacter", &self.FavoriteCharacter())?;
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("Exp", &self.Exp())?;
      s.serialize_field("FavorExp", &self.FavorExp())?;
      s.serialize_field("FavorRank", &self.FavorRank())?;
      s.serialize_field("StarGrade", &self.StarGrade())?;
      s.serialize_field("ExSkillLevel", &self.ExSkillLevel())?;
      s.serialize_field("PassiveSkillLevel", &self.PassiveSkillLevel())?;
      s.serialize_field("ExtraPassiveSkillLevel", &self.ExtraPassiveSkillLevel())?;
      s.serialize_field("CommonSkillLevel", &self.CommonSkillLevel())?;
      s.serialize_field("LeaderSkillLevel", &self.LeaderSkillLevel())?;
    s.end()
  }
}

pub struct DefaultCharacterExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DefaultCharacterExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(DefaultCharacterExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_FavoriteCharacter(&mut self, FavoriteCharacter: bool) {
    self.fbb_.push_slot::<bool>(DefaultCharacterExcel::VT_FAVORITECHARACTER, FavoriteCharacter, false);
  }
  #[inline]
  pub fn add_Level(&mut self, Level: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_Exp(&mut self, Exp: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_EXP, Exp, 0);
  }
  #[inline]
  pub fn add_FavorExp(&mut self, FavorExp: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_FAVOREXP, FavorExp, 0);
  }
  #[inline]
  pub fn add_FavorRank(&mut self, FavorRank: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_FAVORRANK, FavorRank, 0);
  }
  #[inline]
  pub fn add_StarGrade(&mut self, StarGrade: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_STARGRADE, StarGrade, 0);
  }
  #[inline]
  pub fn add_ExSkillLevel(&mut self, ExSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_EXSKILLLEVEL, ExSkillLevel, 0);
  }
  #[inline]
  pub fn add_PassiveSkillLevel(&mut self, PassiveSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_PASSIVESKILLLEVEL, PassiveSkillLevel, 0);
  }
  #[inline]
  pub fn add_ExtraPassiveSkillLevel(&mut self, ExtraPassiveSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_EXTRAPASSIVESKILLLEVEL, ExtraPassiveSkillLevel, 0);
  }
  #[inline]
  pub fn add_CommonSkillLevel(&mut self, CommonSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_COMMONSKILLLEVEL, CommonSkillLevel, 0);
  }
  #[inline]
  pub fn add_LeaderSkillLevel(&mut self, LeaderSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(DefaultCharacterExcel::VT_LEADERSKILLLEVEL, LeaderSkillLevel, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DefaultCharacterExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DefaultCharacterExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DefaultCharacterExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DefaultCharacterExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DefaultCharacterExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("FavoriteCharacter", &self.FavoriteCharacter());
      ds.field("Level", &self.Level());
      ds.field("Exp", &self.Exp());
      ds.field("FavorExp", &self.FavorExp());
      ds.field("FavorRank", &self.FavorRank());
      ds.field("StarGrade", &self.StarGrade());
      ds.field("ExSkillLevel", &self.ExSkillLevel());
      ds.field("PassiveSkillLevel", &self.PassiveSkillLevel());
      ds.field("ExtraPassiveSkillLevel", &self.ExtraPassiveSkillLevel());
      ds.field("CommonSkillLevel", &self.CommonSkillLevel());
      ds.field("LeaderSkillLevel", &self.LeaderSkillLevel());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DefaultCharacterExcelT {
  pub CharacterId: i64,
  pub FavoriteCharacter: bool,
  pub Level: i32,
  pub Exp: i32,
  pub FavorExp: i32,
  pub FavorRank: i32,
  pub StarGrade: i32,
  pub ExSkillLevel: i32,
  pub PassiveSkillLevel: i32,
  pub ExtraPassiveSkillLevel: i32,
  pub CommonSkillLevel: i32,
  pub LeaderSkillLevel: i32,
}
impl Default for DefaultCharacterExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      FavoriteCharacter: false,
      Level: 0,
      Exp: 0,
      FavorExp: 0,
      FavorRank: 0,
      StarGrade: 0,
      ExSkillLevel: 0,
      PassiveSkillLevel: 0,
      ExtraPassiveSkillLevel: 0,
      CommonSkillLevel: 0,
      LeaderSkillLevel: 0,
    }
  }
}
impl DefaultCharacterExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DefaultCharacterExcel<'b>> {
    let CharacterId = self.CharacterId;
    let FavoriteCharacter = self.FavoriteCharacter;
    let Level = self.Level;
    let Exp = self.Exp;
    let FavorExp = self.FavorExp;
    let FavorRank = self.FavorRank;
    let StarGrade = self.StarGrade;
    let ExSkillLevel = self.ExSkillLevel;
    let PassiveSkillLevel = self.PassiveSkillLevel;
    let ExtraPassiveSkillLevel = self.ExtraPassiveSkillLevel;
    let CommonSkillLevel = self.CommonSkillLevel;
    let LeaderSkillLevel = self.LeaderSkillLevel;
    DefaultCharacterExcel::create(_fbb, &DefaultCharacterExcelArgs{
      CharacterId,
      FavoriteCharacter,
      Level,
      Exp,
      FavorExp,
      FavorRank,
      StarGrade,
      ExSkillLevel,
      PassiveSkillLevel,
      ExtraPassiveSkillLevel,
      CommonSkillLevel,
      LeaderSkillLevel,
    })
  }
}
