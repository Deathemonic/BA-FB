// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGObjectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGObjectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGObjectExcel<'a> {
  type Inner = MinigameTBGObjectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGObjectExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_KEY: flatbuffers::VOffsetT = 6;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 8;
  pub const VT_OBJECTTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_OBJECTCOSTTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_OBJECTCOSTID: flatbuffers::VOffsetT = 14;
  pub const VT_OBJECTCOSTAMOUNT: flatbuffers::VOffsetT = 16;
  pub const VT_DISPOSABLE: flatbuffers::VOffsetT = 18;
  pub const VT_REENCOUNTERCOST: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGObjectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGObjectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameTBGObjectExcel<'bldr>> {
    let mut builder = MinigameTBGObjectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGObject");
      let x = args.ObjectCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ObjectCostId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.ObjectCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ObjectCostAmount(x);
      let x = args.ObjectCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ObjectCostType(x);
      let x = args.ObjectType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ObjectType(x);
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      if let Some(x) = args.Key {
        builder.add_Key(x);
      }
      builder.add_ReEncounterCost(args.ReEncounterCost);
      builder.add_Disposable(args.Disposable);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGObjectExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGObject");
      let UniqueId = self.UniqueId();
    let Key = self.Key().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ObjectType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ObjectType(), &key)
      } else {
        self.ObjectType()
      };
      let ObjectCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ObjectCostType(), &key)
      } else {
        self.ObjectCostType()
      };
      let ObjectCostId = self.ObjectCostId();
      let ObjectCostAmount = self.ObjectCostAmount();
      let Disposable = self.Disposable();
      let ReEncounterCost = self.ReEncounterCost();
    MinigameTBGObjectExcelT {
      UniqueId,
      Key,
      PrefabName,
      ObjectType,
      ObjectCostType,
      ObjectCostId,
      ObjectCostAmount,
      Disposable,
      ReEncounterCost,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGObjectExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGObjectExcel::VT_KEY, None)}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGObjectExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn ObjectType(&self) -> TBGObjectType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TBGObjectType>(MinigameTBGObjectExcel::VT_OBJECTTYPE, Some(TBGObjectType::None)).unwrap()}
  }
  #[inline]
  pub fn ObjectCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MinigameTBGObjectExcel::VT_OBJECTCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ObjectCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGObjectExcel::VT_OBJECTCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ObjectCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGObjectExcel::VT_OBJECTCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Disposable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameTBGObjectExcel::VT_DISPOSABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ReEncounterCost(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameTBGObjectExcel::VT_REENCOUNTERCOST, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameTBGObjectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<TBGObjectType>("ObjectType", Self::VT_OBJECTTYPE, false)?
     .visit_field::<ParcelType>("ObjectCostType", Self::VT_OBJECTCOSTTYPE, false)?
     .visit_field::<i64>("ObjectCostId", Self::VT_OBJECTCOSTID, false)?
     .visit_field::<i32>("ObjectCostAmount", Self::VT_OBJECTCOSTAMOUNT, false)?
     .visit_field::<bool>("Disposable", Self::VT_DISPOSABLE, false)?
     .visit_field::<bool>("ReEncounterCost", Self::VT_REENCOUNTERCOST, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGObjectExcelArgs<'a> {
    pub UniqueId: i64,
    pub Key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ObjectType: TBGObjectType,
    pub ObjectCostType: ParcelType,
    pub ObjectCostId: i64,
    pub ObjectCostAmount: i32,
    pub Disposable: bool,
    pub ReEncounterCost: bool,
}
impl<'a> Default for MinigameTBGObjectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameTBGObjectExcelArgs {
      UniqueId: 0,
      Key: None,
      PrefabName: None,
      ObjectType: TBGObjectType::None,
      ObjectCostType: ParcelType::None,
      ObjectCostId: 0,
      ObjectCostAmount: 0,
      Disposable: false,
      ReEncounterCost: false,
    }
  }
}

impl Serialize for MinigameTBGObjectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGObjectExcel", 9)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      if let Some(f) = self.Key() {
        s.serialize_field("Key", &f)?;
      } else {
        s.skip_field("Key")?;
      }
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      s.serialize_field("ObjectType", &self.ObjectType())?;
      s.serialize_field("ObjectCostType", &self.ObjectCostType())?;
      s.serialize_field("ObjectCostId", &self.ObjectCostId())?;
      s.serialize_field("ObjectCostAmount", &self.ObjectCostAmount())?;
      s.serialize_field("Disposable", &self.Disposable())?;
      s.serialize_field("ReEncounterCost", &self.ReEncounterCost())?;
    s.end()
  }
}

pub struct MinigameTBGObjectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGObjectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGObjectExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_Key(&mut self, Key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGObjectExcel::VT_KEY, Key);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGObjectExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_ObjectType(&mut self, ObjectType: TBGObjectType) {
    self.fbb_.push_slot::<TBGObjectType>(MinigameTBGObjectExcel::VT_OBJECTTYPE, ObjectType, TBGObjectType::None);
  }
  #[inline]
  pub fn add_ObjectCostType(&mut self, ObjectCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MinigameTBGObjectExcel::VT_OBJECTCOSTTYPE, ObjectCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_ObjectCostId(&mut self, ObjectCostId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGObjectExcel::VT_OBJECTCOSTID, ObjectCostId, 0);
  }
  #[inline]
  pub fn add_ObjectCostAmount(&mut self, ObjectCostAmount: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGObjectExcel::VT_OBJECTCOSTAMOUNT, ObjectCostAmount, 0);
  }
  #[inline]
  pub fn add_Disposable(&mut self, Disposable: bool) {
    self.fbb_.push_slot::<bool>(MinigameTBGObjectExcel::VT_DISPOSABLE, Disposable, false);
  }
  #[inline]
  pub fn add_ReEncounterCost(&mut self, ReEncounterCost: bool) {
    self.fbb_.push_slot::<bool>(MinigameTBGObjectExcel::VT_REENCOUNTERCOST, ReEncounterCost, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGObjectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGObjectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGObjectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGObjectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGObjectExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("Key", &self.Key());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("ObjectType", &self.ObjectType());
      ds.field("ObjectCostType", &self.ObjectCostType());
      ds.field("ObjectCostId", &self.ObjectCostId());
      ds.field("ObjectCostAmount", &self.ObjectCostAmount());
      ds.field("Disposable", &self.Disposable());
      ds.field("ReEncounterCost", &self.ReEncounterCost());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGObjectExcelT {
  pub UniqueId: i64,
  pub Key: Option<String>,
  pub PrefabName: Option<String>,
  pub ObjectType: TBGObjectType,
  pub ObjectCostType: ParcelType,
  pub ObjectCostId: i64,
  pub ObjectCostAmount: i32,
  pub Disposable: bool,
  pub ReEncounterCost: bool,
}
impl Default for MinigameTBGObjectExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      Key: None,
      PrefabName: None,
      ObjectType: TBGObjectType::None,
      ObjectCostType: ParcelType::None,
      ObjectCostId: 0,
      ObjectCostAmount: 0,
      Disposable: false,
      ReEncounterCost: false,
    }
  }
}
impl MinigameTBGObjectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGObjectExcel<'b>> {
    let UniqueId = self.UniqueId;
    let Key = self.Key.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ObjectType = self.ObjectType;
    let ObjectCostType = self.ObjectCostType;
    let ObjectCostId = self.ObjectCostId;
    let ObjectCostAmount = self.ObjectCostAmount;
    let Disposable = self.Disposable;
    let ReEncounterCost = self.ReEncounterCost;
    MinigameTBGObjectExcel::create(_fbb, &MinigameTBGObjectExcelArgs{
      UniqueId,
      Key,
      PrefabName,
      ObjectType,
      ObjectCostType,
      ObjectCostId,
      ObjectCostAmount,
      Disposable,
      ReEncounterCost,
    })
  }
}
