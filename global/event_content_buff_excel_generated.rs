// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentBuffExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentBuffExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentBuffExcel<'a> {
  type Inner = EventContentBuffExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentBuffExcel<'a> {
  pub const VT_EVENTCONTENTBUFFID: flatbuffers::VOffsetT = 4;
  pub const VT_ISBUFF: flatbuffers::VOffsetT = 6;
  pub const VT_CHARACTERTAG: flatbuffers::VOffsetT = 8;
  pub const VT_ENUMTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_ENUMTYPEVALUE: flatbuffers::VOffsetT = 12;
  pub const VT_SKILLGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 16;
  pub const VT_SPRITENAME: flatbuffers::VOffsetT = 18;
  pub const VT_BUFFDESCRIPTIONLOCALIZECODEID: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentBuffExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentBuffExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentBuffExcel<'bldr>> {
    let mut builder = EventContentBuffExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentBuff");
      let x = args.EventContentBuffId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentBuffId(x);
      if let Some(x) = args.BuffDescriptionLocalizeCodeId {
        builder.add_BuffDescriptionLocalizeCodeId(x);
      }
      if let Some(x) = args.SpriteName {
        builder.add_SpriteName(x);
      }
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      if let Some(x) = args.SkillGroupId {
        builder.add_SkillGroupId(x);
      }
      if let Some(x) = args.enumTypeValue {
        builder.add_enumTypeValue(x);
      }
      let x = args.EnumType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EnumType(x);
      let x = args.CharacterTag;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CharacterTag(x);
      builder.add_IsBuff(args.IsBuff);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentBuffExcelT {
    let key = table_encryption_service::create_key(b"EventContentBuff");
      let EventContentBuffId = self.EventContentBuffId();
      let IsBuff = self.IsBuff();
      let CharacterTag = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CharacterTag(), &key)
      } else {
        self.CharacterTag()
      };
      let EnumType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EnumType(), &key)
      } else {
        self.EnumType()
      };
    let enumTypeValue = self.enumTypeValue().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let SkillGroupId = self.SkillGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SpriteName = self.SpriteName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BuffDescriptionLocalizeCodeId = self.BuffDescriptionLocalizeCodeId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentBuffExcelT {
      EventContentBuffId,
      IsBuff,
      CharacterTag,
      EnumType,
      enumTypeValue,
      SkillGroupId,
      IconPath,
      SpriteName,
      BuffDescriptionLocalizeCodeId,
    }
  }

  #[inline]
  pub fn EventContentBuffId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffExcel::VT_EVENTCONTENTBUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsBuff(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentBuffExcel::VT_ISBUFF, Some(false)).unwrap()}
  }
  #[inline]
  pub fn CharacterTag(&self) -> Tag {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Tag>(EventContentBuffExcel::VT_CHARACTERTAG, Some(Tag::A)).unwrap()}
  }
  #[inline]
  pub fn EnumType(&self) -> EventContentBuffFindRule {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentBuffFindRule>(EventContentBuffExcel::VT_ENUMTYPE, Some(EventContentBuffFindRule::None)).unwrap()}
  }
  #[inline]
  pub fn enumTypeValue(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EventContentBuffExcel::VT_ENUMTYPEVALUE, None)}
  }
  #[inline]
  pub fn SkillGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffExcel::VT_SKILLGROUPID, None)}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffExcel::VT_ICONPATH, None)}
  }
  #[inline]
  pub fn SpriteName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffExcel::VT_SPRITENAME, None)}
  }
  #[inline]
  pub fn BuffDescriptionLocalizeCodeId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffExcel::VT_BUFFDESCRIPTIONLOCALIZECODEID, None)}
  }
}

impl flatbuffers::Verifiable for EventContentBuffExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentBuffId", Self::VT_EVENTCONTENTBUFFID, false)?
     .visit_field::<bool>("IsBuff", Self::VT_ISBUFF, false)?
     .visit_field::<Tag>("CharacterTag", Self::VT_CHARACTERTAG, false)?
     .visit_field::<EventContentBuffFindRule>("EnumType", Self::VT_ENUMTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("enumTypeValue", Self::VT_ENUMTYPEVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SkillGroupId", Self::VT_SKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpriteName", Self::VT_SPRITENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffDescriptionLocalizeCodeId", Self::VT_BUFFDESCRIPTIONLOCALIZECODEID, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentBuffExcelArgs<'a> {
    pub EventContentBuffId: i64,
    pub IsBuff: bool,
    pub CharacterTag: Tag,
    pub EnumType: EventContentBuffFindRule,
    pub enumTypeValue: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub SkillGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpriteName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffDescriptionLocalizeCodeId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentBuffExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentBuffExcelArgs {
      EventContentBuffId: 0,
      IsBuff: false,
      CharacterTag: Tag::A,
      EnumType: EventContentBuffFindRule::None,
      enumTypeValue: None,
      SkillGroupId: None,
      IconPath: None,
      SpriteName: None,
      BuffDescriptionLocalizeCodeId: None,
    }
  }
}

impl Serialize for EventContentBuffExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentBuffExcel", 9)?;
      s.serialize_field("EventContentBuffId", &self.EventContentBuffId())?;
      s.serialize_field("IsBuff", &self.IsBuff())?;
      s.serialize_field("CharacterTag", &self.CharacterTag())?;
      s.serialize_field("EnumType", &self.EnumType())?;
      if let Some(f) = self.enumTypeValue() {
        s.serialize_field("enumTypeValue", &f)?;
      } else {
        s.skip_field("enumTypeValue")?;
      }
      if let Some(f) = self.SkillGroupId() {
        s.serialize_field("SkillGroupId", &f)?;
      } else {
        s.skip_field("SkillGroupId")?;
      }
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
      if let Some(f) = self.SpriteName() {
        s.serialize_field("SpriteName", &f)?;
      } else {
        s.skip_field("SpriteName")?;
      }
      if let Some(f) = self.BuffDescriptionLocalizeCodeId() {
        s.serialize_field("BuffDescriptionLocalizeCodeId", &f)?;
      } else {
        s.skip_field("BuffDescriptionLocalizeCodeId")?;
      }
    s.end()
  }
}

pub struct EventContentBuffExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentBuffExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentBuffId(&mut self, EventContentBuffId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffExcel::VT_EVENTCONTENTBUFFID, EventContentBuffId, 0);
  }
  #[inline]
  pub fn add_IsBuff(&mut self, IsBuff: bool) {
    self.fbb_.push_slot::<bool>(EventContentBuffExcel::VT_ISBUFF, IsBuff, false);
  }
  #[inline]
  pub fn add_CharacterTag(&mut self, CharacterTag: Tag) {
    self.fbb_.push_slot::<Tag>(EventContentBuffExcel::VT_CHARACTERTAG, CharacterTag, Tag::A);
  }
  #[inline]
  pub fn add_EnumType(&mut self, EnumType: EventContentBuffFindRule) {
    self.fbb_.push_slot::<EventContentBuffFindRule>(EventContentBuffExcel::VT_ENUMTYPE, EnumType, EventContentBuffFindRule::None);
  }
  #[inline]
  pub fn add_enumTypeValue(&mut self, enumTypeValue: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffExcel::VT_ENUMTYPEVALUE, enumTypeValue);
  }
  #[inline]
  pub fn add_SkillGroupId(&mut self, SkillGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffExcel::VT_SKILLGROUPID, SkillGroupId);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn add_SpriteName(&mut self, SpriteName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffExcel::VT_SPRITENAME, SpriteName);
  }
  #[inline]
  pub fn add_BuffDescriptionLocalizeCodeId(&mut self, BuffDescriptionLocalizeCodeId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffExcel::VT_BUFFDESCRIPTIONLOCALIZECODEID, BuffDescriptionLocalizeCodeId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentBuffExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentBuffExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentBuffExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentBuffExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentBuffExcel");
      ds.field("EventContentBuffId", &self.EventContentBuffId());
      ds.field("IsBuff", &self.IsBuff());
      ds.field("CharacterTag", &self.CharacterTag());
      ds.field("EnumType", &self.EnumType());
      ds.field("enumTypeValue", &self.enumTypeValue());
      ds.field("SkillGroupId", &self.SkillGroupId());
      ds.field("IconPath", &self.IconPath());
      ds.field("SpriteName", &self.SpriteName());
      ds.field("BuffDescriptionLocalizeCodeId", &self.BuffDescriptionLocalizeCodeId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentBuffExcelT {
  pub EventContentBuffId: i64,
  pub IsBuff: bool,
  pub CharacterTag: Tag,
  pub EnumType: EventContentBuffFindRule,
  pub enumTypeValue: Option<Vec<String>>,
  pub SkillGroupId: Option<String>,
  pub IconPath: Option<String>,
  pub SpriteName: Option<String>,
  pub BuffDescriptionLocalizeCodeId: Option<String>,
}
impl Default for EventContentBuffExcelT {
  fn default() -> Self {
    Self {
      EventContentBuffId: 0,
      IsBuff: false,
      CharacterTag: Tag::A,
      EnumType: EventContentBuffFindRule::None,
      enumTypeValue: None,
      SkillGroupId: None,
      IconPath: None,
      SpriteName: None,
      BuffDescriptionLocalizeCodeId: None,
    }
  }
}
impl EventContentBuffExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentBuffExcel<'b>> {
    let EventContentBuffId = self.EventContentBuffId;
    let IsBuff = self.IsBuff;
    let CharacterTag = self.CharacterTag;
    let EnumType = self.EnumType;
    let enumTypeValue = self.enumTypeValue.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let SkillGroupId = self.SkillGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpriteName = self.SpriteName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffDescriptionLocalizeCodeId = self.BuffDescriptionLocalizeCodeId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentBuffExcel::create(_fbb, &EventContentBuffExcelArgs{
      EventContentBuffId,
      IsBuff,
      CharacterTag,
      EnumType,
      enumTypeValue,
      SkillGroupId,
      IconPath,
      SpriteName,
      BuffDescriptionLocalizeCodeId,
    })
  }
}
