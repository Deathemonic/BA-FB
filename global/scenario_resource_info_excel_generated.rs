// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioResourceInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioResourceInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioResourceInfoExcel<'a> {
  type Inner = ScenarioResourceInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioResourceInfoExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SCENARIOMODEID: flatbuffers::VOffsetT = 6;
  pub const VT_PRIORITYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_PVDISPLAYORDER: flatbuffers::VOffsetT = 10;
  pub const VT_VIDEOID: flatbuffers::VOffsetT = 12;
  pub const VT_BGMID: flatbuffers::VOffsetT = 14;
  pub const VT_AUDIONAME: flatbuffers::VOffsetT = 16;
  pub const VT_SPINEPATH: flatbuffers::VOffsetT = 18;
  pub const VT_RATIO: flatbuffers::VOffsetT = 20;
  pub const VT_LOBBYANIPATH: flatbuffers::VOffsetT = 22;
  pub const VT_MOVIECGPATH: flatbuffers::VOffsetT = 24;
  pub const VT_LOCALIZEID: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioResourceInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioResourceInfoExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioResourceInfoExcel<'bldr>> {
    let mut builder = ScenarioResourceInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioResourceInfo");
      let x = args.BgmId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BgmId(x);
      let x = args.VideoId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_VideoId(x);
      let x = args.PVDisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PVDisplayOrder(x);
      let x = args.PriorityOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PriorityOrder(x);
      let x = args.ScenarioModeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioModeId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.LocalizeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeId(x);
      if let Some(x) = args.MovieCGPath {
        builder.add_MovieCGPath(x);
      }
      if let Some(x) = args.LobbyAniPath {
        builder.add_LobbyAniPath(x);
      }
      let x = args.Ratio;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Ratio(x);
      if let Some(x) = args.SpinePath {
        builder.add_SpinePath(x);
      }
      if let Some(x) = args.AudioName {
        builder.add_AudioName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioResourceInfoExcelT {
    let key = table_encryption_service::create_key(b"ScenarioResourceInfo");
      let Id = self.Id();
      let ScenarioModeId = self.ScenarioModeId();
      let PriorityOrder = self.PriorityOrder();
      let PVDisplayOrder = self.PVDisplayOrder();
      let VideoId = self.VideoId();
      let BgmId = self.BgmId();
    let AudioName = self.AudioName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SpinePath = self.SpinePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Ratio = self.Ratio();
    let LobbyAniPath = self.LobbyAniPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MovieCGPath = self.MovieCGPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeId = self.LocalizeId();
    ScenarioResourceInfoExcelT {
      Id,
      ScenarioModeId,
      PriorityOrder,
      PVDisplayOrder,
      VideoId,
      BgmId,
      AudioName,
      SpinePath,
      Ratio,
      LobbyAniPath,
      MovieCGPath,
      LocalizeId,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioResourceInfoExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioModeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioResourceInfoExcel::VT_SCENARIOMODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PriorityOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioResourceInfoExcel::VT_PRIORITYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PVDisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioResourceInfoExcel::VT_PVDISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VideoId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioResourceInfoExcel::VT_VIDEOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BgmId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioResourceInfoExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AudioName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioResourceInfoExcel::VT_AUDIONAME, None)}
  }
  #[inline]
  pub fn SpinePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioResourceInfoExcel::VT_SPINEPATH, None)}
  }
  #[inline]
  pub fn Ratio(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ScenarioResourceInfoExcel::VT_RATIO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LobbyAniPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioResourceInfoExcel::VT_LOBBYANIPATH, None)}
  }
  #[inline]
  pub fn MovieCGPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioResourceInfoExcel::VT_MOVIECGPATH, None)}
  }
  #[inline]
  pub fn LocalizeId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioResourceInfoExcel::VT_LOCALIZEID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScenarioResourceInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("ScenarioModeId", Self::VT_SCENARIOMODEID, false)?
     .visit_field::<i64>("PriorityOrder", Self::VT_PRIORITYORDER, false)?
     .visit_field::<i64>("PVDisplayOrder", Self::VT_PVDISPLAYORDER, false)?
     .visit_field::<i64>("VideoId", Self::VT_VIDEOID, false)?
     .visit_field::<i64>("BgmId", Self::VT_BGMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AudioName", Self::VT_AUDIONAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SpinePath", Self::VT_SPINEPATH, false)?
     .visit_field::<i32>("Ratio", Self::VT_RATIO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LobbyAniPath", Self::VT_LOBBYANIPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MovieCGPath", Self::VT_MOVIECGPATH, false)?
     .visit_field::<u32>("LocalizeId", Self::VT_LOCALIZEID, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioResourceInfoExcelArgs<'a> {
    pub Id: i64,
    pub ScenarioModeId: i64,
    pub PriorityOrder: i64,
    pub PVDisplayOrder: i64,
    pub VideoId: i64,
    pub BgmId: i64,
    pub AudioName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpinePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Ratio: i32,
    pub LobbyAniPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MovieCGPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeId: u32,
}
impl<'a> Default for ScenarioResourceInfoExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioResourceInfoExcelArgs {
      Id: 0,
      ScenarioModeId: 0,
      PriorityOrder: 0,
      PVDisplayOrder: 0,
      VideoId: 0,
      BgmId: 0,
      AudioName: None,
      SpinePath: None,
      Ratio: 0,
      LobbyAniPath: None,
      MovieCGPath: None,
      LocalizeId: 0,
    }
  }
}

impl Serialize for ScenarioResourceInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioResourceInfoExcel", 12)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ScenarioModeId", &self.ScenarioModeId())?;
      s.serialize_field("PriorityOrder", &self.PriorityOrder())?;
      s.serialize_field("PVDisplayOrder", &self.PVDisplayOrder())?;
      s.serialize_field("VideoId", &self.VideoId())?;
      s.serialize_field("BgmId", &self.BgmId())?;
      if let Some(f) = self.AudioName() {
        s.serialize_field("AudioName", &f)?;
      } else {
        s.skip_field("AudioName")?;
      }
      if let Some(f) = self.SpinePath() {
        s.serialize_field("SpinePath", &f)?;
      } else {
        s.skip_field("SpinePath")?;
      }
      s.serialize_field("Ratio", &self.Ratio())?;
      if let Some(f) = self.LobbyAniPath() {
        s.serialize_field("LobbyAniPath", &f)?;
      } else {
        s.skip_field("LobbyAniPath")?;
      }
      if let Some(f) = self.MovieCGPath() {
        s.serialize_field("MovieCGPath", &f)?;
      } else {
        s.skip_field("MovieCGPath")?;
      }
      s.serialize_field("LocalizeId", &self.LocalizeId())?;
    s.end()
  }
}

pub struct ScenarioResourceInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioResourceInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ScenarioResourceInfoExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ScenarioModeId(&mut self, ScenarioModeId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioResourceInfoExcel::VT_SCENARIOMODEID, ScenarioModeId, 0);
  }
  #[inline]
  pub fn add_PriorityOrder(&mut self, PriorityOrder: i64) {
    self.fbb_.push_slot::<i64>(ScenarioResourceInfoExcel::VT_PRIORITYORDER, PriorityOrder, 0);
  }
  #[inline]
  pub fn add_PVDisplayOrder(&mut self, PVDisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(ScenarioResourceInfoExcel::VT_PVDISPLAYORDER, PVDisplayOrder, 0);
  }
  #[inline]
  pub fn add_VideoId(&mut self, VideoId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioResourceInfoExcel::VT_VIDEOID, VideoId, 0);
  }
  #[inline]
  pub fn add_BgmId(&mut self, BgmId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioResourceInfoExcel::VT_BGMID, BgmId, 0);
  }
  #[inline]
  pub fn add_AudioName(&mut self, AudioName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioResourceInfoExcel::VT_AUDIONAME, AudioName);
  }
  #[inline]
  pub fn add_SpinePath(&mut self, SpinePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioResourceInfoExcel::VT_SPINEPATH, SpinePath);
  }
  #[inline]
  pub fn add_Ratio(&mut self, Ratio: i32) {
    self.fbb_.push_slot::<i32>(ScenarioResourceInfoExcel::VT_RATIO, Ratio, 0);
  }
  #[inline]
  pub fn add_LobbyAniPath(&mut self, LobbyAniPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioResourceInfoExcel::VT_LOBBYANIPATH, LobbyAniPath);
  }
  #[inline]
  pub fn add_MovieCGPath(&mut self, MovieCGPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioResourceInfoExcel::VT_MOVIECGPATH, MovieCGPath);
  }
  #[inline]
  pub fn add_LocalizeId(&mut self, LocalizeId: u32) {
    self.fbb_.push_slot::<u32>(ScenarioResourceInfoExcel::VT_LOCALIZEID, LocalizeId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioResourceInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioResourceInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioResourceInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioResourceInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioResourceInfoExcel");
      ds.field("Id", &self.Id());
      ds.field("ScenarioModeId", &self.ScenarioModeId());
      ds.field("PriorityOrder", &self.PriorityOrder());
      ds.field("PVDisplayOrder", &self.PVDisplayOrder());
      ds.field("VideoId", &self.VideoId());
      ds.field("BgmId", &self.BgmId());
      ds.field("AudioName", &self.AudioName());
      ds.field("SpinePath", &self.SpinePath());
      ds.field("Ratio", &self.Ratio());
      ds.field("LobbyAniPath", &self.LobbyAniPath());
      ds.field("MovieCGPath", &self.MovieCGPath());
      ds.field("LocalizeId", &self.LocalizeId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioResourceInfoExcelT {
  pub Id: i64,
  pub ScenarioModeId: i64,
  pub PriorityOrder: i64,
  pub PVDisplayOrder: i64,
  pub VideoId: i64,
  pub BgmId: i64,
  pub AudioName: Option<String>,
  pub SpinePath: Option<String>,
  pub Ratio: i32,
  pub LobbyAniPath: Option<String>,
  pub MovieCGPath: Option<String>,
  pub LocalizeId: u32,
}
impl Default for ScenarioResourceInfoExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ScenarioModeId: 0,
      PriorityOrder: 0,
      PVDisplayOrder: 0,
      VideoId: 0,
      BgmId: 0,
      AudioName: None,
      SpinePath: None,
      Ratio: 0,
      LobbyAniPath: None,
      MovieCGPath: None,
      LocalizeId: 0,
    }
  }
}
impl ScenarioResourceInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioResourceInfoExcel<'b>> {
    let Id = self.Id;
    let ScenarioModeId = self.ScenarioModeId;
    let PriorityOrder = self.PriorityOrder;
    let PVDisplayOrder = self.PVDisplayOrder;
    let VideoId = self.VideoId;
    let BgmId = self.BgmId;
    let AudioName = self.AudioName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpinePath = self.SpinePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Ratio = self.Ratio;
    let LobbyAniPath = self.LobbyAniPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MovieCGPath = self.MovieCGPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeId = self.LocalizeId;
    ScenarioResourceInfoExcel::create(_fbb, &ScenarioResourceInfoExcelArgs{
      Id,
      ScenarioModeId,
      PriorityOrder,
      PVDisplayOrder,
      VideoId,
      BgmId,
      AudioName,
      SpinePath,
      Ratio,
      LobbyAniPath,
      MovieCGPath,
      LocalizeId,
    })
  }
}
