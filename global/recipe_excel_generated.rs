// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RecipeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RecipeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RecipeExcel<'a> {
  type Inner = RecipeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RecipeExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_RECIPETYPE: flatbuffers::VOffsetT = 6;
  pub const VT_RECIPEINGREDIENTID: flatbuffers::VOffsetT = 8;
  pub const VT_RECIPESELECTIONGROUPID: flatbuffers::VOffsetT = 10;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_RESULTAMOUNTMIN: flatbuffers::VOffsetT = 16;
  pub const VT_RESULTAMOUNTMAX: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RecipeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RecipeExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<RecipeExcel<'bldr>> {
    let mut builder = RecipeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Recipe");
      let x = args.RecipeSelectionGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecipeSelectionGroupId(x);
      let x = args.RecipeIngredientId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecipeIngredientId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ResultAmountMax {
        builder.add_ResultAmountMax(x);
      }
      if let Some(x) = args.ResultAmountMin {
        builder.add_ResultAmountMin(x);
      }
      if let Some(x) = args.ParcelId {
        builder.add_ParcelId(x);
      }
      if let Some(x) = args.ParcelType {
        builder.add_ParcelType(x);
      }
      let x = args.RecipeType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RecipeType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> RecipeExcelT {
    let key = table_encryption_service::create_key(b"Recipe");
      let Id = self.Id();
      let RecipeType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RecipeType(), &key)
      } else {
        self.RecipeType()
      };
      let RecipeIngredientId = self.RecipeIngredientId();
      let RecipeSelectionGroupId = self.RecipeSelectionGroupId();
    let ParcelType = self.ParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ParcelId = self.ParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ResultAmountMin = self.ResultAmountMin().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ResultAmountMax = self.ResultAmountMax().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    RecipeExcelT {
      Id,
      RecipeType,
      RecipeIngredientId,
      RecipeSelectionGroupId,
      ParcelType,
      ParcelId,
      ResultAmountMin,
      ResultAmountMax,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeType(&self) -> RecipeType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RecipeType>(RecipeExcel::VT_RECIPETYPE, Some(RecipeType::None)).unwrap()}
  }
  #[inline]
  pub fn RecipeIngredientId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeExcel::VT_RECIPEINGREDIENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeSelectionGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeExcel::VT_RECIPESELECTIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(RecipeExcel::VT_PARCELTYPE, None)}
  }
  #[inline]
  pub fn ParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeExcel::VT_PARCELID, None)}
  }
  #[inline]
  pub fn ResultAmountMin(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeExcel::VT_RESULTAMOUNTMIN, None)}
  }
  #[inline]
  pub fn ResultAmountMax(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RecipeExcel::VT_RESULTAMOUNTMAX, None)}
  }
}

impl flatbuffers::Verifiable for RecipeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<RecipeType>("RecipeType", Self::VT_RECIPETYPE, false)?
     .visit_field::<i64>("RecipeIngredientId", Self::VT_RECIPEINGREDIENTID, false)?
     .visit_field::<i64>("RecipeSelectionGroupId", Self::VT_RECIPESELECTIONGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ResultAmountMin", Self::VT_RESULTAMOUNTMIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ResultAmountMax", Self::VT_RESULTAMOUNTMAX, false)?
     .finish();
    Ok(())
  }
}
pub struct RecipeExcelArgs<'a> {
    pub Id: i64,
    pub RecipeType: RecipeType,
    pub RecipeIngredientId: i64,
    pub RecipeSelectionGroupId: i64,
    pub ParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub ParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ResultAmountMin: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ResultAmountMax: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for RecipeExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    RecipeExcelArgs {
      Id: 0,
      RecipeType: RecipeType::None,
      RecipeIngredientId: 0,
      RecipeSelectionGroupId: 0,
      ParcelType: None,
      ParcelId: None,
      ResultAmountMin: None,
      ResultAmountMax: None,
    }
  }
}

impl Serialize for RecipeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RecipeExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("RecipeType", &self.RecipeType())?;
      s.serialize_field("RecipeIngredientId", &self.RecipeIngredientId())?;
      s.serialize_field("RecipeSelectionGroupId", &self.RecipeSelectionGroupId())?;
      if let Some(f) = self.ParcelType() {
        s.serialize_field("ParcelType", &f)?;
      } else {
        s.skip_field("ParcelType")?;
      }
      if let Some(f) = self.ParcelId() {
        s.serialize_field("ParcelId", &f)?;
      } else {
        s.skip_field("ParcelId")?;
      }
      if let Some(f) = self.ResultAmountMin() {
        s.serialize_field("ResultAmountMin", &f)?;
      } else {
        s.skip_field("ResultAmountMin")?;
      }
      if let Some(f) = self.ResultAmountMax() {
        s.serialize_field("ResultAmountMax", &f)?;
      } else {
        s.skip_field("ResultAmountMax")?;
      }
    s.end()
  }
}

pub struct RecipeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RecipeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(RecipeExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_RecipeType(&mut self, RecipeType: RecipeType) {
    self.fbb_.push_slot::<RecipeType>(RecipeExcel::VT_RECIPETYPE, RecipeType, RecipeType::None);
  }
  #[inline]
  pub fn add_RecipeIngredientId(&mut self, RecipeIngredientId: i64) {
    self.fbb_.push_slot::<i64>(RecipeExcel::VT_RECIPEINGREDIENTID, RecipeIngredientId, 0);
  }
  #[inline]
  pub fn add_RecipeSelectionGroupId(&mut self, RecipeSelectionGroupId: i64) {
    self.fbb_.push_slot::<i64>(RecipeExcel::VT_RECIPESELECTIONGROUPID, RecipeSelectionGroupId, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeExcel::VT_PARCELTYPE, ParcelType);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeExcel::VT_PARCELID, ParcelId);
  }
  #[inline]
  pub fn add_ResultAmountMin(&mut self, ResultAmountMin: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeExcel::VT_RESULTAMOUNTMIN, ResultAmountMin);
  }
  #[inline]
  pub fn add_ResultAmountMax(&mut self, ResultAmountMax: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RecipeExcel::VT_RESULTAMOUNTMAX, ResultAmountMax);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RecipeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RecipeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RecipeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RecipeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RecipeExcel");
      ds.field("Id", &self.Id());
      ds.field("RecipeType", &self.RecipeType());
      ds.field("RecipeIngredientId", &self.RecipeIngredientId());
      ds.field("RecipeSelectionGroupId", &self.RecipeSelectionGroupId());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("ResultAmountMin", &self.ResultAmountMin());
      ds.field("ResultAmountMax", &self.ResultAmountMax());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RecipeExcelT {
  pub Id: i64,
  pub RecipeType: RecipeType,
  pub RecipeIngredientId: i64,
  pub RecipeSelectionGroupId: i64,
  pub ParcelType: Option<Vec<ParcelType>>,
  pub ParcelId: Option<Vec<i64>>,
  pub ResultAmountMin: Option<Vec<i64>>,
  pub ResultAmountMax: Option<Vec<i64>>,
}
impl Default for RecipeExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      RecipeType: RecipeType::None,
      RecipeIngredientId: 0,
      RecipeSelectionGroupId: 0,
      ParcelType: None,
      ParcelId: None,
      ResultAmountMin: None,
      ResultAmountMax: None,
    }
  }
}
impl RecipeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RecipeExcel<'b>> {
    let Id = self.Id;
    let RecipeType = self.RecipeType;
    let RecipeIngredientId = self.RecipeIngredientId;
    let RecipeSelectionGroupId = self.RecipeSelectionGroupId;
    let ParcelType = self.ParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParcelId = self.ParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ResultAmountMin = self.ResultAmountMin.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ResultAmountMax = self.ResultAmountMax.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    RecipeExcel::create(_fbb, &RecipeExcelArgs{
      Id,
      RecipeType,
      RecipeIngredientId,
      RecipeSelectionGroupId,
      ParcelType,
      ParcelId,
      ResultAmountMin,
      ResultAmountMax,
    })
  }
}
