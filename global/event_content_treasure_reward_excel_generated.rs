// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentTreasureRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentTreasureRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentTreasureRewardExcel<'a> {
  type Inner = EventContentTreasureRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentTreasureRewardExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZECODEID: flatbuffers::VOffsetT = 6;
  pub const VT_CELLUNDERIMAGEWIDTH: flatbuffers::VOffsetT = 8;
  pub const VT_CELLUNDERIMAGEHEIGHT: flatbuffers::VOffsetT = 10;
  pub const VT_HIDDENIMAGE: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_CELLUNDERIMAGEPATH: flatbuffers::VOffsetT = 20;
  pub const VT_TREASURESMALLIMAGEPATH: flatbuffers::VOffsetT = 22;
  pub const VT_TREASURESIZEICONPATH: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentTreasureRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentTreasureRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentTreasureRewardExcel<'bldr>> {
    let mut builder = EventContentTreasureRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentTreasureReward");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.TreasureSizeIconPath {
        builder.add_TreasureSizeIconPath(x);
      }
      if let Some(x) = args.TreasureSmallImagePath {
        builder.add_TreasureSmallImagePath(x);
      }
      if let Some(x) = args.CellUnderImagePath {
        builder.add_CellUnderImagePath(x);
      }
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      let x = args.CellUnderImageHeight;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CellUnderImageHeight(x);
      let x = args.CellUnderImageWidth;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CellUnderImageWidth(x);
      if let Some(x) = args.LocalizeCodeID {
        builder.add_LocalizeCodeID(x);
      }
      builder.add_HiddenImage(args.HiddenImage);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentTreasureRewardExcelT {
    let key = table_encryption_service::create_key(b"EventContentTreasureReward");
      let Id = self.Id();
    let LocalizeCodeID = self.LocalizeCodeID().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CellUnderImageWidth = self.CellUnderImageWidth();
      let CellUnderImageHeight = self.CellUnderImageHeight();
      let HiddenImage = self.HiddenImage();
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let CellUnderImagePath = self.CellUnderImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TreasureSmallImagePath = self.TreasureSmallImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TreasureSizeIconPath = self.TreasureSizeIconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentTreasureRewardExcelT {
      Id,
      LocalizeCodeID,
      CellUnderImageWidth,
      CellUnderImageHeight,
      HiddenImage,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      CellUnderImagePath,
      TreasureSmallImagePath,
      TreasureSizeIconPath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentTreasureRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeCodeID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentTreasureRewardExcel::VT_LOCALIZECODEID, None)}
  }
  #[inline]
  pub fn CellUnderImageWidth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentTreasureRewardExcel::VT_CELLUNDERIMAGEWIDTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CellUnderImageHeight(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentTreasureRewardExcel::VT_CELLUNDERIMAGEHEIGHT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn HiddenImage(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentTreasureRewardExcel::VT_HIDDENIMAGE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentTreasureRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentTreasureRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentTreasureRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
  #[inline]
  pub fn CellUnderImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentTreasureRewardExcel::VT_CELLUNDERIMAGEPATH, None)}
  }
  #[inline]
  pub fn TreasureSmallImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentTreasureRewardExcel::VT_TREASURESMALLIMAGEPATH, None)}
  }
  #[inline]
  pub fn TreasureSizeIconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentTreasureRewardExcel::VT_TREASURESIZEICONPATH, None)}
  }
}

impl flatbuffers::Verifiable for EventContentTreasureRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeCodeID", Self::VT_LOCALIZECODEID, false)?
     .visit_field::<i32>("CellUnderImageWidth", Self::VT_CELLUNDERIMAGEWIDTH, false)?
     .visit_field::<i32>("CellUnderImageHeight", Self::VT_CELLUNDERIMAGEHEIGHT, false)?
     .visit_field::<bool>("HiddenImage", Self::VT_HIDDENIMAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CellUnderImagePath", Self::VT_CELLUNDERIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TreasureSmallImagePath", Self::VT_TREASURESMALLIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TreasureSizeIconPath", Self::VT_TREASURESIZEICONPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentTreasureRewardExcelArgs<'a> {
    pub Id: i64,
    pub LocalizeCodeID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CellUnderImageWidth: i32,
    pub CellUnderImageHeight: i32,
    pub HiddenImage: bool,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub CellUnderImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TreasureSmallImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TreasureSizeIconPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentTreasureRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentTreasureRewardExcelArgs {
      Id: 0,
      LocalizeCodeID: None,
      CellUnderImageWidth: 0,
      CellUnderImageHeight: 0,
      HiddenImage: false,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
      CellUnderImagePath: None,
      TreasureSmallImagePath: None,
      TreasureSizeIconPath: None,
    }
  }
}

impl Serialize for EventContentTreasureRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentTreasureRewardExcel", 11)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.LocalizeCodeID() {
        s.serialize_field("LocalizeCodeID", &f)?;
      } else {
        s.skip_field("LocalizeCodeID")?;
      }
      s.serialize_field("CellUnderImageWidth", &self.CellUnderImageWidth())?;
      s.serialize_field("CellUnderImageHeight", &self.CellUnderImageHeight())?;
      s.serialize_field("HiddenImage", &self.HiddenImage())?;
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
      if let Some(f) = self.CellUnderImagePath() {
        s.serialize_field("CellUnderImagePath", &f)?;
      } else {
        s.skip_field("CellUnderImagePath")?;
      }
      if let Some(f) = self.TreasureSmallImagePath() {
        s.serialize_field("TreasureSmallImagePath", &f)?;
      } else {
        s.skip_field("TreasureSmallImagePath")?;
      }
      if let Some(f) = self.TreasureSizeIconPath() {
        s.serialize_field("TreasureSizeIconPath", &f)?;
      } else {
        s.skip_field("TreasureSizeIconPath")?;
      }
    s.end()
  }
}

pub struct EventContentTreasureRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentTreasureRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentTreasureRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeCodeID(&mut self, LocalizeCodeID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRewardExcel::VT_LOCALIZECODEID, LocalizeCodeID);
  }
  #[inline]
  pub fn add_CellUnderImageWidth(&mut self, CellUnderImageWidth: i32) {
    self.fbb_.push_slot::<i32>(EventContentTreasureRewardExcel::VT_CELLUNDERIMAGEWIDTH, CellUnderImageWidth, 0);
  }
  #[inline]
  pub fn add_CellUnderImageHeight(&mut self, CellUnderImageHeight: i32) {
    self.fbb_.push_slot::<i32>(EventContentTreasureRewardExcel::VT_CELLUNDERIMAGEHEIGHT, CellUnderImageHeight, 0);
  }
  #[inline]
  pub fn add_HiddenImage(&mut self, HiddenImage: bool) {
    self.fbb_.push_slot::<bool>(EventContentTreasureRewardExcel::VT_HIDDENIMAGE, HiddenImage, false);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn add_CellUnderImagePath(&mut self, CellUnderImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRewardExcel::VT_CELLUNDERIMAGEPATH, CellUnderImagePath);
  }
  #[inline]
  pub fn add_TreasureSmallImagePath(&mut self, TreasureSmallImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRewardExcel::VT_TREASURESMALLIMAGEPATH, TreasureSmallImagePath);
  }
  #[inline]
  pub fn add_TreasureSizeIconPath(&mut self, TreasureSizeIconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRewardExcel::VT_TREASURESIZEICONPATH, TreasureSizeIconPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentTreasureRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentTreasureRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentTreasureRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentTreasureRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentTreasureRewardExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeCodeID", &self.LocalizeCodeID());
      ds.field("CellUnderImageWidth", &self.CellUnderImageWidth());
      ds.field("CellUnderImageHeight", &self.CellUnderImageHeight());
      ds.field("HiddenImage", &self.HiddenImage());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.field("CellUnderImagePath", &self.CellUnderImagePath());
      ds.field("TreasureSmallImagePath", &self.TreasureSmallImagePath());
      ds.field("TreasureSizeIconPath", &self.TreasureSizeIconPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentTreasureRewardExcelT {
  pub Id: i64,
  pub LocalizeCodeID: Option<String>,
  pub CellUnderImageWidth: i32,
  pub CellUnderImageHeight: i32,
  pub HiddenImage: bool,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
  pub CellUnderImagePath: Option<String>,
  pub TreasureSmallImagePath: Option<String>,
  pub TreasureSizeIconPath: Option<String>,
}
impl Default for EventContentTreasureRewardExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeCodeID: None,
      CellUnderImageWidth: 0,
      CellUnderImageHeight: 0,
      HiddenImage: false,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelAmount: None,
      CellUnderImagePath: None,
      TreasureSmallImagePath: None,
      TreasureSizeIconPath: None,
    }
  }
}
impl EventContentTreasureRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentTreasureRewardExcel<'b>> {
    let Id = self.Id;
    let LocalizeCodeID = self.LocalizeCodeID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CellUnderImageWidth = self.CellUnderImageWidth;
    let CellUnderImageHeight = self.CellUnderImageHeight;
    let HiddenImage = self.HiddenImage;
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CellUnderImagePath = self.CellUnderImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TreasureSmallImagePath = self.TreasureSmallImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TreasureSizeIconPath = self.TreasureSizeIconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentTreasureRewardExcel::create(_fbb, &EventContentTreasureRewardExcelArgs{
      Id,
      LocalizeCodeID,
      CellUnderImageWidth,
      CellUnderImageHeight,
      HiddenImage,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      CellUnderImagePath,
      TreasureSmallImagePath,
      TreasureSizeIconPath,
    })
  }
}
