// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MultiFloorRaidStatChangeExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MultiFloorRaidStatChangeExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MultiFloorRaidStatChangeExcel<'a> {
  type Inner = MultiFloorRaidStatChangeExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MultiFloorRaidStatChangeExcel<'a> {
  pub const VT_STATCHANGEID: flatbuffers::VOffsetT = 4;
  pub const VT_STATTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_STATADD: flatbuffers::VOffsetT = 8;
  pub const VT_STATMULTIPLY: flatbuffers::VOffsetT = 10;
  pub const VT_APPLYCHARACTERID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MultiFloorRaidStatChangeExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MultiFloorRaidStatChangeExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MultiFloorRaidStatChangeExcel<'bldr>> {
    let mut builder = MultiFloorRaidStatChangeExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MultiFloorRaidStatChange");
      let x = args.StatChangeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StatChangeId(x);
      if let Some(x) = args.ApplyCharacterId {
        builder.add_ApplyCharacterId(x);
      }
      if let Some(x) = args.StatMultiply {
        builder.add_StatMultiply(x);
      }
      if let Some(x) = args.StatAdd {
        builder.add_StatAdd(x);
      }
      if let Some(x) = args.StatType {
        builder.add_StatType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MultiFloorRaidStatChangeExcelT {
    let key = table_encryption_service::create_key(b"MultiFloorRaidStatChange");
      let StatChangeId = self.StatChangeId();
    let StatType = self.StatType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StatAdd = self.StatAdd().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StatMultiply = self.StatMultiply().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ApplyCharacterId = self.ApplyCharacterId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    MultiFloorRaidStatChangeExcelT {
      StatChangeId,
      StatType,
      StatAdd,
      StatMultiply,
      ApplyCharacterId,
    }
  }

  #[inline]
  pub fn StatChangeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MultiFloorRaidStatChangeExcel::VT_STATCHANGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatType(&self) -> Option<flatbuffers::Vector<'a, StatType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, StatType>>>(MultiFloorRaidStatChangeExcel::VT_STATTYPE, None)}
  }
  #[inline]
  pub fn StatAdd(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MultiFloorRaidStatChangeExcel::VT_STATADD, None)}
  }
  #[inline]
  pub fn StatMultiply(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MultiFloorRaidStatChangeExcel::VT_STATMULTIPLY, None)}
  }
  #[inline]
  pub fn ApplyCharacterId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MultiFloorRaidStatChangeExcel::VT_APPLYCHARACTERID, None)}
  }
}

impl flatbuffers::Verifiable for MultiFloorRaidStatChangeExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("StatChangeId", Self::VT_STATCHANGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, StatType>>>("StatType", Self::VT_STATTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StatAdd", Self::VT_STATADD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StatMultiply", Self::VT_STATMULTIPLY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ApplyCharacterId", Self::VT_APPLYCHARACTERID, false)?
     .finish();
    Ok(())
  }
}
pub struct MultiFloorRaidStatChangeExcelArgs<'a> {
    pub StatChangeId: i64,
    pub StatType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, StatType>>>,
    pub StatAdd: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StatMultiply: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ApplyCharacterId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for MultiFloorRaidStatChangeExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MultiFloorRaidStatChangeExcelArgs {
      StatChangeId: 0,
      StatType: None,
      StatAdd: None,
      StatMultiply: None,
      ApplyCharacterId: None,
    }
  }
}

impl Serialize for MultiFloorRaidStatChangeExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MultiFloorRaidStatChangeExcel", 5)?;
      s.serialize_field("StatChangeId", &self.StatChangeId())?;
      if let Some(f) = self.StatType() {
        s.serialize_field("StatType", &f)?;
      } else {
        s.skip_field("StatType")?;
      }
      if let Some(f) = self.StatAdd() {
        s.serialize_field("StatAdd", &f)?;
      } else {
        s.skip_field("StatAdd")?;
      }
      if let Some(f) = self.StatMultiply() {
        s.serialize_field("StatMultiply", &f)?;
      } else {
        s.skip_field("StatMultiply")?;
      }
      if let Some(f) = self.ApplyCharacterId() {
        s.serialize_field("ApplyCharacterId", &f)?;
      } else {
        s.skip_field("ApplyCharacterId")?;
      }
    s.end()
  }
}

pub struct MultiFloorRaidStatChangeExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MultiFloorRaidStatChangeExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StatChangeId(&mut self, StatChangeId: i64) {
    self.fbb_.push_slot::<i64>(MultiFloorRaidStatChangeExcel::VT_STATCHANGEID, StatChangeId, 0);
  }
  #[inline]
  pub fn add_StatType(&mut self, StatType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , StatType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidStatChangeExcel::VT_STATTYPE, StatType);
  }
  #[inline]
  pub fn add_StatAdd(&mut self, StatAdd: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidStatChangeExcel::VT_STATADD, StatAdd);
  }
  #[inline]
  pub fn add_StatMultiply(&mut self, StatMultiply: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidStatChangeExcel::VT_STATMULTIPLY, StatMultiply);
  }
  #[inline]
  pub fn add_ApplyCharacterId(&mut self, ApplyCharacterId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiFloorRaidStatChangeExcel::VT_APPLYCHARACTERID, ApplyCharacterId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MultiFloorRaidStatChangeExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MultiFloorRaidStatChangeExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MultiFloorRaidStatChangeExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MultiFloorRaidStatChangeExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MultiFloorRaidStatChangeExcel");
      ds.field("StatChangeId", &self.StatChangeId());
      ds.field("StatType", &self.StatType());
      ds.field("StatAdd", &self.StatAdd());
      ds.field("StatMultiply", &self.StatMultiply());
      ds.field("ApplyCharacterId", &self.ApplyCharacterId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MultiFloorRaidStatChangeExcelT {
  pub StatChangeId: i64,
  pub StatType: Option<Vec<StatType>>,
  pub StatAdd: Option<Vec<i64>>,
  pub StatMultiply: Option<Vec<i64>>,
  pub ApplyCharacterId: Option<Vec<i64>>,
}
impl Default for MultiFloorRaidStatChangeExcelT {
  fn default() -> Self {
    Self {
      StatChangeId: 0,
      StatType: None,
      StatAdd: None,
      StatMultiply: None,
      ApplyCharacterId: None,
    }
  }
}
impl MultiFloorRaidStatChangeExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MultiFloorRaidStatChangeExcel<'b>> {
    let StatChangeId = self.StatChangeId;
    let StatType = self.StatType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StatAdd = self.StatAdd.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StatMultiply = self.StatMultiply.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ApplyCharacterId = self.ApplyCharacterId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MultiFloorRaidStatChangeExcel::create(_fbb, &MultiFloorRaidStatChangeExcelArgs{
      StatChangeId,
      StatType,
      StatAdd,
      StatMultiply,
      ApplyCharacterId,
    })
  }
}
