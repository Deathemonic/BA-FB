// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ArenaNPCExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ArenaNPCExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArenaNPCExcel<'a> {
  type Inner = ArenaNPCExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArenaNPCExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_RANK: flatbuffers::VOffsetT = 6;
  pub const VT_NPCACCOUNTLEVEL: flatbuffers::VOffsetT = 8;
  pub const VT_NPCLEVEL: flatbuffers::VOffsetT = 10;
  pub const VT_NPCLEVELDEVIATION: flatbuffers::VOffsetT = 12;
  pub const VT_NPCSTARGRADE: flatbuffers::VOffsetT = 14;
  pub const VT_EXCEPTIONCHARACTERRARITIES: flatbuffers::VOffsetT = 16;
  pub const VT_EXCEPTIONMAINCHARACTERIDS: flatbuffers::VOffsetT = 18;
  pub const VT_EXCEPTIONSUPPORTCHARACTERIDS: flatbuffers::VOffsetT = 20;
  pub const VT_EXCEPTIONTSSIDS: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArenaNPCExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArenaNPCExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ArenaNPCExcel<'bldr>> {
    let mut builder = ArenaNPCExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ArenaNPC");
      let x = args.NPCStarGrade;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NPCStarGrade(x);
      let x = args.NPCLevelDeviation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NPCLevelDeviation(x);
      let x = args.NPCLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NPCLevel(x);
      let x = args.NPCAccountLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NPCAccountLevel(x);
      let x = args.Rank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Rank(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.ExceptionTSSIds {
        builder.add_ExceptionTSSIds(x);
      }
      if let Some(x) = args.ExceptionSupportCharacterIds {
        builder.add_ExceptionSupportCharacterIds(x);
      }
      if let Some(x) = args.ExceptionMainCharacterIds {
        builder.add_ExceptionMainCharacterIds(x);
      }
      if let Some(x) = args.ExceptionCharacterRarities {
        builder.add_ExceptionCharacterRarities(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ArenaNPCExcelT {
    let key = table_encryption_service::create_key(b"ArenaNPC");
      let UniqueId = self.UniqueId();
      let Rank = self.Rank();
      let NPCAccountLevel = self.NPCAccountLevel();
      let NPCLevel = self.NPCLevel();
      let NPCLevelDeviation = self.NPCLevelDeviation();
      let NPCStarGrade = self.NPCStarGrade();
    let ExceptionCharacterRarities = self.ExceptionCharacterRarities().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ExceptionMainCharacterIds = self.ExceptionMainCharacterIds().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ExceptionSupportCharacterIds = self.ExceptionSupportCharacterIds().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let ExceptionTSSIds = self.ExceptionTSSIds().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    ArenaNPCExcelT {
      UniqueId,
      Rank,
      NPCAccountLevel,
      NPCLevel,
      NPCLevelDeviation,
      NPCStarGrade,
      ExceptionCharacterRarities,
      ExceptionMainCharacterIds,
      ExceptionSupportCharacterIds,
      ExceptionTSSIds,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaNPCExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Rank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaNPCExcel::VT_RANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NPCAccountLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaNPCExcel::VT_NPCACCOUNTLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NPCLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaNPCExcel::VT_NPCLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NPCLevelDeviation(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaNPCExcel::VT_NPCLEVELDEVIATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NPCStarGrade(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaNPCExcel::VT_NPCSTARGRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExceptionCharacterRarities(&self) -> Option<flatbuffers::Vector<'a, Rarity>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Rarity>>>(ArenaNPCExcel::VT_EXCEPTIONCHARACTERRARITIES, None)}
  }
  #[inline]
  pub fn ExceptionMainCharacterIds(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ArenaNPCExcel::VT_EXCEPTIONMAINCHARACTERIDS, None)}
  }
  #[inline]
  pub fn ExceptionSupportCharacterIds(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ArenaNPCExcel::VT_EXCEPTIONSUPPORTCHARACTERIDS, None)}
  }
  #[inline]
  pub fn ExceptionTSSIds(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ArenaNPCExcel::VT_EXCEPTIONTSSIDS, None)}
  }
}

impl flatbuffers::Verifiable for ArenaNPCExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("Rank", Self::VT_RANK, false)?
     .visit_field::<i64>("NPCAccountLevel", Self::VT_NPCACCOUNTLEVEL, false)?
     .visit_field::<i64>("NPCLevel", Self::VT_NPCLEVEL, false)?
     .visit_field::<i64>("NPCLevelDeviation", Self::VT_NPCLEVELDEVIATION, false)?
     .visit_field::<i64>("NPCStarGrade", Self::VT_NPCSTARGRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Rarity>>>("ExceptionCharacterRarities", Self::VT_EXCEPTIONCHARACTERRARITIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ExceptionMainCharacterIds", Self::VT_EXCEPTIONMAINCHARACTERIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ExceptionSupportCharacterIds", Self::VT_EXCEPTIONSUPPORTCHARACTERIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ExceptionTSSIds", Self::VT_EXCEPTIONTSSIDS, false)?
     .finish();
    Ok(())
  }
}
pub struct ArenaNPCExcelArgs<'a> {
    pub UniqueId: i64,
    pub Rank: i64,
    pub NPCAccountLevel: i64,
    pub NPCLevel: i64,
    pub NPCLevelDeviation: i64,
    pub NPCStarGrade: i64,
    pub ExceptionCharacterRarities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Rarity>>>,
    pub ExceptionMainCharacterIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ExceptionSupportCharacterIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ExceptionTSSIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for ArenaNPCExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArenaNPCExcelArgs {
      UniqueId: 0,
      Rank: 0,
      NPCAccountLevel: 0,
      NPCLevel: 0,
      NPCLevelDeviation: 0,
      NPCStarGrade: 0,
      ExceptionCharacterRarities: None,
      ExceptionMainCharacterIds: None,
      ExceptionSupportCharacterIds: None,
      ExceptionTSSIds: None,
    }
  }
}

impl Serialize for ArenaNPCExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ArenaNPCExcel", 10)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("Rank", &self.Rank())?;
      s.serialize_field("NPCAccountLevel", &self.NPCAccountLevel())?;
      s.serialize_field("NPCLevel", &self.NPCLevel())?;
      s.serialize_field("NPCLevelDeviation", &self.NPCLevelDeviation())?;
      s.serialize_field("NPCStarGrade", &self.NPCStarGrade())?;
      if let Some(f) = self.ExceptionCharacterRarities() {
        s.serialize_field("ExceptionCharacterRarities", &f)?;
      } else {
        s.skip_field("ExceptionCharacterRarities")?;
      }
      if let Some(f) = self.ExceptionMainCharacterIds() {
        s.serialize_field("ExceptionMainCharacterIds", &f)?;
      } else {
        s.skip_field("ExceptionMainCharacterIds")?;
      }
      if let Some(f) = self.ExceptionSupportCharacterIds() {
        s.serialize_field("ExceptionSupportCharacterIds", &f)?;
      } else {
        s.skip_field("ExceptionSupportCharacterIds")?;
      }
      if let Some(f) = self.ExceptionTSSIds() {
        s.serialize_field("ExceptionTSSIds", &f)?;
      } else {
        s.skip_field("ExceptionTSSIds")?;
      }
    s.end()
  }
}

pub struct ArenaNPCExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArenaNPCExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(ArenaNPCExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_Rank(&mut self, Rank: i64) {
    self.fbb_.push_slot::<i64>(ArenaNPCExcel::VT_RANK, Rank, 0);
  }
  #[inline]
  pub fn add_NPCAccountLevel(&mut self, NPCAccountLevel: i64) {
    self.fbb_.push_slot::<i64>(ArenaNPCExcel::VT_NPCACCOUNTLEVEL, NPCAccountLevel, 0);
  }
  #[inline]
  pub fn add_NPCLevel(&mut self, NPCLevel: i64) {
    self.fbb_.push_slot::<i64>(ArenaNPCExcel::VT_NPCLEVEL, NPCLevel, 0);
  }
  #[inline]
  pub fn add_NPCLevelDeviation(&mut self, NPCLevelDeviation: i64) {
    self.fbb_.push_slot::<i64>(ArenaNPCExcel::VT_NPCLEVELDEVIATION, NPCLevelDeviation, 0);
  }
  #[inline]
  pub fn add_NPCStarGrade(&mut self, NPCStarGrade: i64) {
    self.fbb_.push_slot::<i64>(ArenaNPCExcel::VT_NPCSTARGRADE, NPCStarGrade, 0);
  }
  #[inline]
  pub fn add_ExceptionCharacterRarities(&mut self, ExceptionCharacterRarities: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Rarity>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaNPCExcel::VT_EXCEPTIONCHARACTERRARITIES, ExceptionCharacterRarities);
  }
  #[inline]
  pub fn add_ExceptionMainCharacterIds(&mut self, ExceptionMainCharacterIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaNPCExcel::VT_EXCEPTIONMAINCHARACTERIDS, ExceptionMainCharacterIds);
  }
  #[inline]
  pub fn add_ExceptionSupportCharacterIds(&mut self, ExceptionSupportCharacterIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaNPCExcel::VT_EXCEPTIONSUPPORTCHARACTERIDS, ExceptionSupportCharacterIds);
  }
  #[inline]
  pub fn add_ExceptionTSSIds(&mut self, ExceptionTSSIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaNPCExcel::VT_EXCEPTIONTSSIDS, ExceptionTSSIds);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArenaNPCExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArenaNPCExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArenaNPCExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArenaNPCExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArenaNPCExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("Rank", &self.Rank());
      ds.field("NPCAccountLevel", &self.NPCAccountLevel());
      ds.field("NPCLevel", &self.NPCLevel());
      ds.field("NPCLevelDeviation", &self.NPCLevelDeviation());
      ds.field("NPCStarGrade", &self.NPCStarGrade());
      ds.field("ExceptionCharacterRarities", &self.ExceptionCharacterRarities());
      ds.field("ExceptionMainCharacterIds", &self.ExceptionMainCharacterIds());
      ds.field("ExceptionSupportCharacterIds", &self.ExceptionSupportCharacterIds());
      ds.field("ExceptionTSSIds", &self.ExceptionTSSIds());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ArenaNPCExcelT {
  pub UniqueId: i64,
  pub Rank: i64,
  pub NPCAccountLevel: i64,
  pub NPCLevel: i64,
  pub NPCLevelDeviation: i64,
  pub NPCStarGrade: i64,
  pub ExceptionCharacterRarities: Option<Vec<Rarity>>,
  pub ExceptionMainCharacterIds: Option<Vec<i64>>,
  pub ExceptionSupportCharacterIds: Option<Vec<i64>>,
  pub ExceptionTSSIds: Option<Vec<i64>>,
}
impl Default for ArenaNPCExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      Rank: 0,
      NPCAccountLevel: 0,
      NPCLevel: 0,
      NPCLevelDeviation: 0,
      NPCStarGrade: 0,
      ExceptionCharacterRarities: None,
      ExceptionMainCharacterIds: None,
      ExceptionSupportCharacterIds: None,
      ExceptionTSSIds: None,
    }
  }
}
impl ArenaNPCExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ArenaNPCExcel<'b>> {
    let UniqueId = self.UniqueId;
    let Rank = self.Rank;
    let NPCAccountLevel = self.NPCAccountLevel;
    let NPCLevel = self.NPCLevel;
    let NPCLevelDeviation = self.NPCLevelDeviation;
    let NPCStarGrade = self.NPCStarGrade;
    let ExceptionCharacterRarities = self.ExceptionCharacterRarities.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ExceptionMainCharacterIds = self.ExceptionMainCharacterIds.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ExceptionSupportCharacterIds = self.ExceptionSupportCharacterIds.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ExceptionTSSIds = self.ExceptionTSSIds.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ArenaNPCExcel::create(_fbb, &ArenaNPCExcelArgs{
      UniqueId,
      Rank,
      NPCAccountLevel,
      NPCLevel,
      NPCLevelDeviation,
      NPCStarGrade,
      ExceptionCharacterRarities,
      ExceptionMainCharacterIds,
      ExceptionSupportCharacterIds,
      ExceptionTSSIds,
    })
  }
}
