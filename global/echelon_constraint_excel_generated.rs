// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EchelonConstraintExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EchelonConstraintExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EchelonConstraintExcel<'a> {
  type Inner = EchelonConstraintExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EchelonConstraintExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_ISWHITELIST: flatbuffers::VOffsetT = 6;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 8;
  pub const VT_PERSONALITYID: flatbuffers::VOffsetT = 10;
  pub const VT_WEAPONTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_SCHOOL: flatbuffers::VOffsetT = 14;
  pub const VT_CLUB: flatbuffers::VOffsetT = 16;
  pub const VT_ROLE: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EchelonConstraintExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EchelonConstraintExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EchelonConstraintExcel<'bldr>> {
    let mut builder = EchelonConstraintExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EchelonConstraint");
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.Role;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Role(x);
      let x = args.Club;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Club(x);
      let x = args.School;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_School(x);
      let x = args.WeaponType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_WeaponType(x);
      if let Some(x) = args.personalityId {
        builder.add_personalityId(x);
      }
      if let Some(x) = args.characterId {
        builder.add_characterId(x);
      }
      builder.add_IsWhiteList(args.IsWhiteList);
    builder.finish()
  }

  pub fn unpack(&self) -> EchelonConstraintExcelT {
    let key = table_encryption_service::create_key(b"EchelonConstraint");
      let GroupId = self.GroupId();
      let IsWhiteList = self.IsWhiteList();
    let characterId = self.characterId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let personalityId = self.personalityId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let WeaponType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.WeaponType(), &key)
      } else {
        self.WeaponType()
      };
      let School = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.School(), &key)
      } else {
        self.School()
      };
      let Club = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Club(), &key)
      } else {
        self.Club()
      };
      let Role = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Role(), &key)
      } else {
        self.Role()
      };
    EchelonConstraintExcelT {
      GroupId,
      IsWhiteList,
      characterId,
      personalityId,
      WeaponType,
      School,
      Club,
      Role,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EchelonConstraintExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsWhiteList(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EchelonConstraintExcel::VT_ISWHITELIST, Some(false)).unwrap()}
  }
  #[inline]
  pub fn characterId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EchelonConstraintExcel::VT_CHARACTERID, None)}
  }
  #[inline]
  pub fn personalityId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EchelonConstraintExcel::VT_PERSONALITYID, None)}
  }
  #[inline]
  pub fn WeaponType(&self) -> WeaponType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WeaponType>(EchelonConstraintExcel::VT_WEAPONTYPE, Some(WeaponType::None)).unwrap()}
  }
  #[inline]
  pub fn School(&self) -> School {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<School>(EchelonConstraintExcel::VT_SCHOOL, Some(School::None)).unwrap()}
  }
  #[inline]
  pub fn Club(&self) -> Club {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Club>(EchelonConstraintExcel::VT_CLUB, Some(Club::None)).unwrap()}
  }
  #[inline]
  pub fn Role(&self) -> TacticRole {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticRole>(EchelonConstraintExcel::VT_ROLE, Some(TacticRole::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EchelonConstraintExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<bool>("IsWhiteList", Self::VT_ISWHITELIST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("characterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("personalityId", Self::VT_PERSONALITYID, false)?
     .visit_field::<WeaponType>("WeaponType", Self::VT_WEAPONTYPE, false)?
     .visit_field::<School>("School", Self::VT_SCHOOL, false)?
     .visit_field::<Club>("Club", Self::VT_CLUB, false)?
     .visit_field::<TacticRole>("Role", Self::VT_ROLE, false)?
     .finish();
    Ok(())
  }
}
pub struct EchelonConstraintExcelArgs<'a> {
    pub GroupId: i64,
    pub IsWhiteList: bool,
    pub characterId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub personalityId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub WeaponType: WeaponType,
    pub School: School,
    pub Club: Club,
    pub Role: TacticRole,
}
impl<'a> Default for EchelonConstraintExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EchelonConstraintExcelArgs {
      GroupId: 0,
      IsWhiteList: false,
      characterId: None,
      personalityId: None,
      WeaponType: WeaponType::None,
      School: School::None,
      Club: Club::None,
      Role: TacticRole::None,
    }
  }
}

impl Serialize for EchelonConstraintExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EchelonConstraintExcel", 8)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("IsWhiteList", &self.IsWhiteList())?;
      if let Some(f) = self.characterId() {
        s.serialize_field("characterId", &f)?;
      } else {
        s.skip_field("characterId")?;
      }
      if let Some(f) = self.personalityId() {
        s.serialize_field("personalityId", &f)?;
      } else {
        s.skip_field("personalityId")?;
      }
      s.serialize_field("WeaponType", &self.WeaponType())?;
      s.serialize_field("School", &self.School())?;
      s.serialize_field("Club", &self.Club())?;
      s.serialize_field("Role", &self.Role())?;
    s.end()
  }
}

pub struct EchelonConstraintExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EchelonConstraintExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(EchelonConstraintExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_IsWhiteList(&mut self, IsWhiteList: bool) {
    self.fbb_.push_slot::<bool>(EchelonConstraintExcel::VT_ISWHITELIST, IsWhiteList, false);
  }
  #[inline]
  pub fn add_characterId(&mut self, characterId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EchelonConstraintExcel::VT_CHARACTERID, characterId);
  }
  #[inline]
  pub fn add_personalityId(&mut self, personalityId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EchelonConstraintExcel::VT_PERSONALITYID, personalityId);
  }
  #[inline]
  pub fn add_WeaponType(&mut self, WeaponType: WeaponType) {
    self.fbb_.push_slot::<WeaponType>(EchelonConstraintExcel::VT_WEAPONTYPE, WeaponType, WeaponType::None);
  }
  #[inline]
  pub fn add_School(&mut self, School: School) {
    self.fbb_.push_slot::<School>(EchelonConstraintExcel::VT_SCHOOL, School, School::None);
  }
  #[inline]
  pub fn add_Club(&mut self, Club: Club) {
    self.fbb_.push_slot::<Club>(EchelonConstraintExcel::VT_CLUB, Club, Club::None);
  }
  #[inline]
  pub fn add_Role(&mut self, Role: TacticRole) {
    self.fbb_.push_slot::<TacticRole>(EchelonConstraintExcel::VT_ROLE, Role, TacticRole::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EchelonConstraintExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EchelonConstraintExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EchelonConstraintExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EchelonConstraintExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EchelonConstraintExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("IsWhiteList", &self.IsWhiteList());
      ds.field("characterId", &self.characterId());
      ds.field("personalityId", &self.personalityId());
      ds.field("WeaponType", &self.WeaponType());
      ds.field("School", &self.School());
      ds.field("Club", &self.Club());
      ds.field("Role", &self.Role());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EchelonConstraintExcelT {
  pub GroupId: i64,
  pub IsWhiteList: bool,
  pub characterId: Option<Vec<i64>>,
  pub personalityId: Option<Vec<i64>>,
  pub WeaponType: WeaponType,
  pub School: School,
  pub Club: Club,
  pub Role: TacticRole,
}
impl Default for EchelonConstraintExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      IsWhiteList: false,
      characterId: None,
      personalityId: None,
      WeaponType: WeaponType::None,
      School: School::None,
      Club: Club::None,
      Role: TacticRole::None,
    }
  }
}
impl EchelonConstraintExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EchelonConstraintExcel<'b>> {
    let GroupId = self.GroupId;
    let IsWhiteList = self.IsWhiteList;
    let characterId = self.characterId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let personalityId = self.personalityId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let WeaponType = self.WeaponType;
    let School = self.School;
    let Club = self.Club;
    let Role = self.Role;
    EchelonConstraintExcel::create(_fbb, &EchelonConstraintExcelArgs{
      GroupId,
      IsWhiteList,
      characterId,
      personalityId,
      WeaponType,
      School,
      Club,
      Role,
    })
  }
}
