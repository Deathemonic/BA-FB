// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioTransitionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioTransitionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioTransitionExcel<'a> {
  type Inner = ScenarioTransitionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioTransitionExcel<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_TRANSITIONOUT: flatbuffers::VOffsetT = 6;
  pub const VT_TRANSITIONOUTDURATION: flatbuffers::VOffsetT = 8;
  pub const VT_TRANSITIONOUTRESOURCE: flatbuffers::VOffsetT = 10;
  pub const VT_TRANSITIONIN: flatbuffers::VOffsetT = 12;
  pub const VT_TRANSITIONINDURATION: flatbuffers::VOffsetT = 14;
  pub const VT_TRANSITIONINRESOURCE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioTransitionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioTransitionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioTransitionExcel<'bldr>> {
    let mut builder = ScenarioTransitionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioTransition");
      let x = args.TransitionInDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TransitionInDuration(x);
      let x = args.TransitionOutDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TransitionOutDuration(x);
      if let Some(x) = args.TransitionInResource {
        builder.add_TransitionInResource(x);
      }
      if let Some(x) = args.TransitionIn {
        builder.add_TransitionIn(x);
      }
      if let Some(x) = args.TransitionOutResource {
        builder.add_TransitionOutResource(x);
      }
      if let Some(x) = args.TransitionOut {
        builder.add_TransitionOut(x);
      }
      let x = args.Name;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Name(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioTransitionExcelT {
    let key = table_encryption_service::create_key(b"ScenarioTransition");
      let Name = self.Name();
    let TransitionOut = self.TransitionOut().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let TransitionOutDuration = self.TransitionOutDuration();
    let TransitionOutResource = self.TransitionOutResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TransitionIn = self.TransitionIn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let TransitionInDuration = self.TransitionInDuration();
    let TransitionInResource = self.TransitionInResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ScenarioTransitionExcelT {
      Name,
      TransitionOut,
      TransitionOutDuration,
      TransitionOutResource,
      TransitionIn,
      TransitionInDuration,
      TransitionInResource,
    }
  }

  #[inline]
  pub fn Name(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioTransitionExcel::VT_NAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TransitionOut(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioTransitionExcel::VT_TRANSITIONOUT, None)}
  }
  #[inline]
  pub fn TransitionOutDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioTransitionExcel::VT_TRANSITIONOUTDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TransitionOutResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioTransitionExcel::VT_TRANSITIONOUTRESOURCE, None)}
  }
  #[inline]
  pub fn TransitionIn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioTransitionExcel::VT_TRANSITIONIN, None)}
  }
  #[inline]
  pub fn TransitionInDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioTransitionExcel::VT_TRANSITIONINDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TransitionInResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioTransitionExcel::VT_TRANSITIONINRESOURCE, None)}
  }
}

impl flatbuffers::Verifiable for ScenarioTransitionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TransitionOut", Self::VT_TRANSITIONOUT, false)?
     .visit_field::<i64>("TransitionOutDuration", Self::VT_TRANSITIONOUTDURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TransitionOutResource", Self::VT_TRANSITIONOUTRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TransitionIn", Self::VT_TRANSITIONIN, false)?
     .visit_field::<i64>("TransitionInDuration", Self::VT_TRANSITIONINDURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TransitionInResource", Self::VT_TRANSITIONINRESOURCE, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioTransitionExcelArgs<'a> {
    pub Name: u32,
    pub TransitionOut: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TransitionOutDuration: i64,
    pub TransitionOutResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TransitionIn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TransitionInDuration: i64,
    pub TransitionInResource: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ScenarioTransitionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioTransitionExcelArgs {
      Name: 0,
      TransitionOut: None,
      TransitionOutDuration: 0,
      TransitionOutResource: None,
      TransitionIn: None,
      TransitionInDuration: 0,
      TransitionInResource: None,
    }
  }
}

impl Serialize for ScenarioTransitionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioTransitionExcel", 7)?;
      s.serialize_field("Name", &self.Name())?;
      if let Some(f) = self.TransitionOut() {
        s.serialize_field("TransitionOut", &f)?;
      } else {
        s.skip_field("TransitionOut")?;
      }
      s.serialize_field("TransitionOutDuration", &self.TransitionOutDuration())?;
      if let Some(f) = self.TransitionOutResource() {
        s.serialize_field("TransitionOutResource", &f)?;
      } else {
        s.skip_field("TransitionOutResource")?;
      }
      if let Some(f) = self.TransitionIn() {
        s.serialize_field("TransitionIn", &f)?;
      } else {
        s.skip_field("TransitionIn")?;
      }
      s.serialize_field("TransitionInDuration", &self.TransitionInDuration())?;
      if let Some(f) = self.TransitionInResource() {
        s.serialize_field("TransitionInResource", &f)?;
      } else {
        s.skip_field("TransitionInResource")?;
      }
    s.end()
  }
}

pub struct ScenarioTransitionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioTransitionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Name(&mut self, Name: u32) {
    self.fbb_.push_slot::<u32>(ScenarioTransitionExcel::VT_NAME, Name, 0);
  }
  #[inline]
  pub fn add_TransitionOut(&mut self, TransitionOut: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioTransitionExcel::VT_TRANSITIONOUT, TransitionOut);
  }
  #[inline]
  pub fn add_TransitionOutDuration(&mut self, TransitionOutDuration: i64) {
    self.fbb_.push_slot::<i64>(ScenarioTransitionExcel::VT_TRANSITIONOUTDURATION, TransitionOutDuration, 0);
  }
  #[inline]
  pub fn add_TransitionOutResource(&mut self, TransitionOutResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioTransitionExcel::VT_TRANSITIONOUTRESOURCE, TransitionOutResource);
  }
  #[inline]
  pub fn add_TransitionIn(&mut self, TransitionIn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioTransitionExcel::VT_TRANSITIONIN, TransitionIn);
  }
  #[inline]
  pub fn add_TransitionInDuration(&mut self, TransitionInDuration: i64) {
    self.fbb_.push_slot::<i64>(ScenarioTransitionExcel::VT_TRANSITIONINDURATION, TransitionInDuration, 0);
  }
  #[inline]
  pub fn add_TransitionInResource(&mut self, TransitionInResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioTransitionExcel::VT_TRANSITIONINRESOURCE, TransitionInResource);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioTransitionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioTransitionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioTransitionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioTransitionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioTransitionExcel");
      ds.field("Name", &self.Name());
      ds.field("TransitionOut", &self.TransitionOut());
      ds.field("TransitionOutDuration", &self.TransitionOutDuration());
      ds.field("TransitionOutResource", &self.TransitionOutResource());
      ds.field("TransitionIn", &self.TransitionIn());
      ds.field("TransitionInDuration", &self.TransitionInDuration());
      ds.field("TransitionInResource", &self.TransitionInResource());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioTransitionExcelT {
  pub Name: u32,
  pub TransitionOut: Option<String>,
  pub TransitionOutDuration: i64,
  pub TransitionOutResource: Option<String>,
  pub TransitionIn: Option<String>,
  pub TransitionInDuration: i64,
  pub TransitionInResource: Option<String>,
}
impl Default for ScenarioTransitionExcelT {
  fn default() -> Self {
    Self {
      Name: 0,
      TransitionOut: None,
      TransitionOutDuration: 0,
      TransitionOutResource: None,
      TransitionIn: None,
      TransitionInDuration: 0,
      TransitionInResource: None,
    }
  }
}
impl ScenarioTransitionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioTransitionExcel<'b>> {
    let Name = self.Name;
    let TransitionOut = self.TransitionOut.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TransitionOutDuration = self.TransitionOutDuration;
    let TransitionOutResource = self.TransitionOutResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TransitionIn = self.TransitionIn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TransitionInDuration = self.TransitionInDuration;
    let TransitionInResource = self.TransitionInResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ScenarioTransitionExcel::create(_fbb, &ScenarioTransitionExcelArgs{
      Name,
      TransitionOut,
      TransitionOutDuration,
      TransitionOutResource,
      TransitionIn,
      TransitionInDuration,
      TransitionInResource,
    })
  }
}
