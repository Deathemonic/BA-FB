// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BGMRaidExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BGMRaidExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BGMRaidExcel<'a> {
  type Inner = BGMRaidExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BGMRaidExcel<'a> {
  pub const VT_STAGEID: flatbuffers::VOffsetT = 4;
  pub const VT_PHASEINDEX: flatbuffers::VOffsetT = 6;
  pub const VT_BGMID: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BGMRaidExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BGMRaidExcelArgs
  ) -> flatbuffers::WIPOffset<BGMRaidExcel<'bldr>> {
    let mut builder = BGMRaidExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BGMRaid");
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.PhaseIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PhaseIndex(x);
      let x = args.StageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BGMRaidExcelT {
    let key = table_encryption_service::create_key(b"BGMRaid");
      let StageId = self.StageId();
      let PhaseIndex = self.PhaseIndex();
      let BGMId = self.BGMId();
    BGMRaidExcelT {
      StageId,
      PhaseIndex,
      BGMId,
    }
  }

  #[inline]
  pub fn StageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMRaidExcel::VT_STAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PhaseIndex(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMRaidExcel::VT_PHASEINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMRaidExcel::VT_BGMID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BGMRaidExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("StageId", Self::VT_STAGEID, false)?
     .visit_field::<i64>("PhaseIndex", Self::VT_PHASEINDEX, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .finish();
    Ok(())
  }
}
pub struct BGMRaidExcelArgs {
    pub StageId: i64,
    pub PhaseIndex: i64,
    pub BGMId: i64,
}
impl<'a> Default for BGMRaidExcelArgs {
  #[inline]
  fn default() -> Self {
    BGMRaidExcelArgs {
      StageId: 0,
      PhaseIndex: 0,
      BGMId: 0,
    }
  }
}

impl Serialize for BGMRaidExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BGMRaidExcel", 3)?;
      s.serialize_field("StageId", &self.StageId())?;
      s.serialize_field("PhaseIndex", &self.PhaseIndex())?;
      s.serialize_field("BGMId", &self.BGMId())?;
    s.end()
  }
}

pub struct BGMRaidExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BGMRaidExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StageId(&mut self, StageId: i64) {
    self.fbb_.push_slot::<i64>(BGMRaidExcel::VT_STAGEID, StageId, 0);
  }
  #[inline]
  pub fn add_PhaseIndex(&mut self, PhaseIndex: i64) {
    self.fbb_.push_slot::<i64>(BGMRaidExcel::VT_PHASEINDEX, PhaseIndex, 0);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(BGMRaidExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BGMRaidExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BGMRaidExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BGMRaidExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BGMRaidExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BGMRaidExcel");
      ds.field("StageId", &self.StageId());
      ds.field("PhaseIndex", &self.PhaseIndex());
      ds.field("BGMId", &self.BGMId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BGMRaidExcelT {
  pub StageId: i64,
  pub PhaseIndex: i64,
  pub BGMId: i64,
}
impl Default for BGMRaidExcelT {
  fn default() -> Self {
    Self {
      StageId: 0,
      PhaseIndex: 0,
      BGMId: 0,
    }
  }
}
impl BGMRaidExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BGMRaidExcel<'b>> {
    let StageId = self.StageId;
    let PhaseIndex = self.PhaseIndex;
    let BGMId = self.BGMId;
    BGMRaidExcel::create(_fbb, &BGMRaidExcelArgs{
      StageId,
      PhaseIndex,
      BGMId,
    })
  }
}
