// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContentsShortcutExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContentsShortcutExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContentsShortcutExcel<'a> {
  type Inner = ContentsShortcutExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContentsShortcutExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 8;
  pub const VT_SCENARIOMODEVOLUME: flatbuffers::VOffsetT = 10;
  pub const VT_SCENARIOMODECHAPTER: flatbuffers::VOffsetT = 12;
  pub const VT_SHORTCUTOPENTIME: flatbuffers::VOffsetT = 14;
  pub const VT_SHORTCUTCLOSETIME: flatbuffers::VOffsetT = 16;
  pub const VT_CONDITIONCONTENTID: flatbuffers::VOffsetT = 18;
  pub const VT_CONQUESTMAPDIFFICULTY: flatbuffers::VOffsetT = 20;
  pub const VT_CONQUESTSTEPINDEX: flatbuffers::VOffsetT = 22;
  pub const VT_SHORTCUTCONTENTID: flatbuffers::VOffsetT = 24;
  pub const VT_SHORTCUTUINAME: flatbuffers::VOffsetT = 26;
  pub const VT_LOCALIZE: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContentsShortcutExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContentsShortcutExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ContentsShortcutExcel<'bldr>> {
    let mut builder = ContentsShortcutExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ContentsShortcut");
      let x = args.ShortcutContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShortcutContentId(x);
      let x = args.ConditionContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionContentId(x);
      let x = args.ScenarioModeChapter;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioModeChapter(x);
      let x = args.ScenarioModeVolume;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioModeVolume(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.Localize {
        builder.add_Localize(x);
      }
      if let Some(x) = args.ShortcutUIName {
        builder.add_ShortcutUIName(x);
      }
      let x = args.ConquestStepIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ConquestStepIndex(x);
      let x = args.ConquestMapDifficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConquestMapDifficulty(x);
      if let Some(x) = args.ShortcutCloseTime {
        builder.add_ShortcutCloseTime(x);
      }
      if let Some(x) = args.ShortcutOpenTime {
        builder.add_ShortcutOpenTime(x);
      }
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ContentsShortcutExcelT {
    let key = table_encryption_service::create_key(b"ContentsShortcut");
      let UniqueId = self.UniqueId();
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let EventContentId = self.EventContentId();
      let ScenarioModeVolume = self.ScenarioModeVolume();
      let ScenarioModeChapter = self.ScenarioModeChapter();
    let ShortcutOpenTime = self.ShortcutOpenTime().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ShortcutCloseTime = self.ShortcutCloseTime().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ConditionContentId = self.ConditionContentId();
      let ConquestMapDifficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConquestMapDifficulty(), &key)
      } else {
        self.ConquestMapDifficulty()
      };
      let ConquestStepIndex = self.ConquestStepIndex();
      let ShortcutContentId = self.ShortcutContentId();
    let ShortcutUIName = self.ShortcutUIName().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let Localize = self.Localize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ContentsShortcutExcelT {
      UniqueId,
      ContentType,
      EventContentId,
      ScenarioModeVolume,
      ScenarioModeChapter,
      ShortcutOpenTime,
      ShortcutCloseTime,
      ConditionContentId,
      ConquestMapDifficulty,
      ConquestStepIndex,
      ShortcutContentId,
      ShortcutUIName,
      Localize,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsShortcutExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(ContentsShortcutExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsShortcutExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioModeVolume(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsShortcutExcel::VT_SCENARIOMODEVOLUME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScenarioModeChapter(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsShortcutExcel::VT_SCENARIOMODECHAPTER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShortcutOpenTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContentsShortcutExcel::VT_SHORTCUTOPENTIME, None)}
  }
  #[inline]
  pub fn ShortcutCloseTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContentsShortcutExcel::VT_SHORTCUTCLOSETIME, None)}
  }
  #[inline]
  pub fn ConditionContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsShortcutExcel::VT_CONDITIONCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestMapDifficulty(&self) -> StageDifficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageDifficulty>(ContentsShortcutExcel::VT_CONQUESTMAPDIFFICULTY, Some(StageDifficulty::None)).unwrap()}
  }
  #[inline]
  pub fn ConquestStepIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ContentsShortcutExcel::VT_CONQUESTSTEPINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShortcutContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsShortcutExcel::VT_SHORTCUTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShortcutUIName(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ContentsShortcutExcel::VT_SHORTCUTUINAME, None)}
  }
  #[inline]
  pub fn Localize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContentsShortcutExcel::VT_LOCALIZE, None)}
  }
}

impl flatbuffers::Verifiable for ContentsShortcutExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("ScenarioModeVolume", Self::VT_SCENARIOMODEVOLUME, false)?
     .visit_field::<i64>("ScenarioModeChapter", Self::VT_SCENARIOMODECHAPTER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShortcutOpenTime", Self::VT_SHORTCUTOPENTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShortcutCloseTime", Self::VT_SHORTCUTCLOSETIME, false)?
     .visit_field::<i64>("ConditionContentId", Self::VT_CONDITIONCONTENTID, false)?
     .visit_field::<StageDifficulty>("ConquestMapDifficulty", Self::VT_CONQUESTMAPDIFFICULTY, false)?
     .visit_field::<i32>("ConquestStepIndex", Self::VT_CONQUESTSTEPINDEX, false)?
     .visit_field::<i64>("ShortcutContentId", Self::VT_SHORTCUTCONTENTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ShortcutUIName", Self::VT_SHORTCUTUINAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Localize", Self::VT_LOCALIZE, false)?
     .finish();
    Ok(())
  }
}
pub struct ContentsShortcutExcelArgs<'a> {
    pub UniqueId: i64,
    pub ContentType: ContentType,
    pub EventContentId: i64,
    pub ScenarioModeVolume: i64,
    pub ScenarioModeChapter: i64,
    pub ShortcutOpenTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShortcutCloseTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ConditionContentId: i64,
    pub ConquestMapDifficulty: StageDifficulty,
    pub ConquestStepIndex: i32,
    pub ShortcutContentId: i64,
    pub ShortcutUIName: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub Localize: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ContentsShortcutExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContentsShortcutExcelArgs {
      UniqueId: 0,
      ContentType: ContentType::None,
      EventContentId: 0,
      ScenarioModeVolume: 0,
      ScenarioModeChapter: 0,
      ShortcutOpenTime: None,
      ShortcutCloseTime: None,
      ConditionContentId: 0,
      ConquestMapDifficulty: StageDifficulty::None,
      ConquestStepIndex: 0,
      ShortcutContentId: 0,
      ShortcutUIName: None,
      Localize: None,
    }
  }
}

impl Serialize for ContentsShortcutExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ContentsShortcutExcel", 13)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("ScenarioModeVolume", &self.ScenarioModeVolume())?;
      s.serialize_field("ScenarioModeChapter", &self.ScenarioModeChapter())?;
      if let Some(f) = self.ShortcutOpenTime() {
        s.serialize_field("ShortcutOpenTime", &f)?;
      } else {
        s.skip_field("ShortcutOpenTime")?;
      }
      if let Some(f) = self.ShortcutCloseTime() {
        s.serialize_field("ShortcutCloseTime", &f)?;
      } else {
        s.skip_field("ShortcutCloseTime")?;
      }
      s.serialize_field("ConditionContentId", &self.ConditionContentId())?;
      s.serialize_field("ConquestMapDifficulty", &self.ConquestMapDifficulty())?;
      s.serialize_field("ConquestStepIndex", &self.ConquestStepIndex())?;
      s.serialize_field("ShortcutContentId", &self.ShortcutContentId())?;
      if let Some(f) = self.ShortcutUIName() {
        s.serialize_field("ShortcutUIName", &f)?;
      } else {
        s.skip_field("ShortcutUIName")?;
      }
      if let Some(f) = self.Localize() {
        s.serialize_field("Localize", &f)?;
      } else {
        s.skip_field("Localize")?;
      }
    s.end()
  }
}

pub struct ContentsShortcutExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContentsShortcutExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(ContentsShortcutExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(ContentsShortcutExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ContentsShortcutExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_ScenarioModeVolume(&mut self, ScenarioModeVolume: i64) {
    self.fbb_.push_slot::<i64>(ContentsShortcutExcel::VT_SCENARIOMODEVOLUME, ScenarioModeVolume, 0);
  }
  #[inline]
  pub fn add_ScenarioModeChapter(&mut self, ScenarioModeChapter: i64) {
    self.fbb_.push_slot::<i64>(ContentsShortcutExcel::VT_SCENARIOMODECHAPTER, ScenarioModeChapter, 0);
  }
  #[inline]
  pub fn add_ShortcutOpenTime(&mut self, ShortcutOpenTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContentsShortcutExcel::VT_SHORTCUTOPENTIME, ShortcutOpenTime);
  }
  #[inline]
  pub fn add_ShortcutCloseTime(&mut self, ShortcutCloseTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContentsShortcutExcel::VT_SHORTCUTCLOSETIME, ShortcutCloseTime);
  }
  #[inline]
  pub fn add_ConditionContentId(&mut self, ConditionContentId: i64) {
    self.fbb_.push_slot::<i64>(ContentsShortcutExcel::VT_CONDITIONCONTENTID, ConditionContentId, 0);
  }
  #[inline]
  pub fn add_ConquestMapDifficulty(&mut self, ConquestMapDifficulty: StageDifficulty) {
    self.fbb_.push_slot::<StageDifficulty>(ContentsShortcutExcel::VT_CONQUESTMAPDIFFICULTY, ConquestMapDifficulty, StageDifficulty::None);
  }
  #[inline]
  pub fn add_ConquestStepIndex(&mut self, ConquestStepIndex: i32) {
    self.fbb_.push_slot::<i32>(ContentsShortcutExcel::VT_CONQUESTSTEPINDEX, ConquestStepIndex, 0);
  }
  #[inline]
  pub fn add_ShortcutContentId(&mut self, ShortcutContentId: i64) {
    self.fbb_.push_slot::<i64>(ContentsShortcutExcel::VT_SHORTCUTCONTENTID, ShortcutContentId, 0);
  }
  #[inline]
  pub fn add_ShortcutUIName(&mut self, ShortcutUIName: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContentsShortcutExcel::VT_SHORTCUTUINAME, ShortcutUIName);
  }
  #[inline]
  pub fn add_Localize(&mut self, Localize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContentsShortcutExcel::VT_LOCALIZE, Localize);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContentsShortcutExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContentsShortcutExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContentsShortcutExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContentsShortcutExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContentsShortcutExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("ContentType", &self.ContentType());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("ScenarioModeVolume", &self.ScenarioModeVolume());
      ds.field("ScenarioModeChapter", &self.ScenarioModeChapter());
      ds.field("ShortcutOpenTime", &self.ShortcutOpenTime());
      ds.field("ShortcutCloseTime", &self.ShortcutCloseTime());
      ds.field("ConditionContentId", &self.ConditionContentId());
      ds.field("ConquestMapDifficulty", &self.ConquestMapDifficulty());
      ds.field("ConquestStepIndex", &self.ConquestStepIndex());
      ds.field("ShortcutContentId", &self.ShortcutContentId());
      ds.field("ShortcutUIName", &self.ShortcutUIName());
      ds.field("Localize", &self.Localize());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ContentsShortcutExcelT {
  pub UniqueId: i64,
  pub ContentType: ContentType,
  pub EventContentId: i64,
  pub ScenarioModeVolume: i64,
  pub ScenarioModeChapter: i64,
  pub ShortcutOpenTime: Option<String>,
  pub ShortcutCloseTime: Option<String>,
  pub ConditionContentId: i64,
  pub ConquestMapDifficulty: StageDifficulty,
  pub ConquestStepIndex: i32,
  pub ShortcutContentId: i64,
  pub ShortcutUIName: Option<Vec<String>>,
  pub Localize: Option<String>,
}
impl Default for ContentsShortcutExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      ContentType: ContentType::None,
      EventContentId: 0,
      ScenarioModeVolume: 0,
      ScenarioModeChapter: 0,
      ShortcutOpenTime: None,
      ShortcutCloseTime: None,
      ConditionContentId: 0,
      ConquestMapDifficulty: StageDifficulty::None,
      ConquestStepIndex: 0,
      ShortcutContentId: 0,
      ShortcutUIName: None,
      Localize: None,
    }
  }
}
impl ContentsShortcutExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ContentsShortcutExcel<'b>> {
    let UniqueId = self.UniqueId;
    let ContentType = self.ContentType;
    let EventContentId = self.EventContentId;
    let ScenarioModeVolume = self.ScenarioModeVolume;
    let ScenarioModeChapter = self.ScenarioModeChapter;
    let ShortcutOpenTime = self.ShortcutOpenTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShortcutCloseTime = self.ShortcutCloseTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ConditionContentId = self.ConditionContentId;
    let ConquestMapDifficulty = self.ConquestMapDifficulty;
    let ConquestStepIndex = self.ConquestStepIndex;
    let ShortcutContentId = self.ShortcutContentId;
    let ShortcutUIName = self.ShortcutUIName.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let Localize = self.Localize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ContentsShortcutExcel::create(_fbb, &ContentsShortcutExcelArgs{
      UniqueId,
      ContentType,
      EventContentId,
      ScenarioModeVolume,
      ScenarioModeChapter,
      ShortcutOpenTime,
      ShortcutCloseTime,
      ConditionContentId,
      ConquestMapDifficulty,
      ConquestStepIndex,
      ShortcutContentId,
      ShortcutUIName,
      Localize,
    })
  }
}
