// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstEventCommonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstEventCommonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstEventCommonExcel<'a> {
  type Inner = ConstEventCommonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstEventCommonExcel<'a> {
  pub const VT_EVENTCONTENTHARDSTAGECOUNT: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTSTRATEGYPLAYTIMELIMITINSECONDS: flatbuffers::VOffsetT = 6;
  pub const VT_SUBEVENTCHANGELIMITSECONDS: flatbuffers::VOffsetT = 8;
  pub const VT_SUBEVENTINSTANTCLEAR: flatbuffers::VOffsetT = 10;
  pub const VT_CARDSHOPPROBWEIGHTCOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_CARDSHOPPROBWEIGHTRARITY: flatbuffers::VOffsetT = 14;
  pub const VT_MEETUPSCENARIOREPLAYRESOURCE: flatbuffers::VOffsetT = 16;
  pub const VT_MEETUPSCENARIOREPLAYTITLELOCALIZE: flatbuffers::VOffsetT = 18;
  pub const VT_SPECIALOPERACTIONCOLLECTIONGROUPID: flatbuffers::VOffsetT = 20;
  pub const VT_TREASURENORMALVARIATIONAMOUNT: flatbuffers::VOffsetT = 22;
  pub const VT_TREASURELOOPVARIATIONAMOUNT: flatbuffers::VOffsetT = 24;
  pub const VT_TREASURELIMITVARIATIONLOOPCOUNT: flatbuffers::VOffsetT = 26;
  pub const VT_TREASURELIMITVARIATIONCLEARLOOPCOUNT: flatbuffers::VOffsetT = 28;
  pub const VT_EVENTSTORYREPLAYHIDEEVENTCONTENTID: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstEventCommonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstEventCommonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConstEventCommonExcel<'bldr>> {
    let mut builder = ConstEventCommonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstEventCommon");
      let x = args.SpecialOperactionCollectionGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SpecialOperactionCollectionGroupId(x);
      let x = args.CardShopProbWeightCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CardShopProbWeightCount(x);
      let x = args.SubEventChangeLimitSeconds;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SubEventChangeLimitSeconds(x);
      let x = args.EventStrategyPlayTimeLimitInSeconds;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventStrategyPlayTimeLimitInSeconds(x);
      let x = args.EventStoryReplayHideEventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EventStoryReplayHideEventContentId(x);
      let x = args.TreasureLimitVariationClearLoopCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TreasureLimitVariationClearLoopCount(x);
      let x = args.TreasureLimitVariationLoopCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TreasureLimitVariationLoopCount(x);
      let x = args.TreasureLoopVariationAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TreasureLoopVariationAmount(x);
      let x = args.TreasureNormalVariationAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TreasureNormalVariationAmount(x);
      if let Some(x) = args.MeetupScenarioReplayTitleLocalize {
        builder.add_MeetupScenarioReplayTitleLocalize(x);
      }
      if let Some(x) = args.MeetupScenarioReplayResource {
        builder.add_MeetupScenarioReplayResource(x);
      }
      let x = args.CardShopProbWeightRarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CardShopProbWeightRarity(x);
      let x = args.EventContentHardStageCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EventContentHardStageCount(x);
      builder.add_SubEventInstantClear(args.SubEventInstantClear);
    builder.finish()
  }

  pub fn unpack(&self) -> ConstEventCommonExcelT {
    let key = table_encryption_service::create_key(b"ConstEventCommon");
      let EventContentHardStageCount = self.EventContentHardStageCount();
      let EventStrategyPlayTimeLimitInSeconds = self.EventStrategyPlayTimeLimitInSeconds();
      let SubEventChangeLimitSeconds = self.SubEventChangeLimitSeconds();
      let SubEventInstantClear = self.SubEventInstantClear();
      let CardShopProbWeightCount = self.CardShopProbWeightCount();
      let CardShopProbWeightRarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CardShopProbWeightRarity(), &key)
      } else {
        self.CardShopProbWeightRarity()
      };
    let MeetupScenarioReplayResource = self.MeetupScenarioReplayResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MeetupScenarioReplayTitleLocalize = self.MeetupScenarioReplayTitleLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let SpecialOperactionCollectionGroupId = self.SpecialOperactionCollectionGroupId();
      let TreasureNormalVariationAmount = self.TreasureNormalVariationAmount();
      let TreasureLoopVariationAmount = self.TreasureLoopVariationAmount();
      let TreasureLimitVariationLoopCount = self.TreasureLimitVariationLoopCount();
      let TreasureLimitVariationClearLoopCount = self.TreasureLimitVariationClearLoopCount();
      let EventStoryReplayHideEventContentId = self.EventStoryReplayHideEventContentId();
    ConstEventCommonExcelT {
      EventContentHardStageCount,
      EventStrategyPlayTimeLimitInSeconds,
      SubEventChangeLimitSeconds,
      SubEventInstantClear,
      CardShopProbWeightCount,
      CardShopProbWeightRarity,
      MeetupScenarioReplayResource,
      MeetupScenarioReplayTitleLocalize,
      SpecialOperactionCollectionGroupId,
      TreasureNormalVariationAmount,
      TreasureLoopVariationAmount,
      TreasureLimitVariationLoopCount,
      TreasureLimitVariationClearLoopCount,
      EventStoryReplayHideEventContentId,
    }
  }

  #[inline]
  pub fn EventContentHardStageCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstEventCommonExcel::VT_EVENTCONTENTHARDSTAGECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventStrategyPlayTimeLimitInSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstEventCommonExcel::VT_EVENTSTRATEGYPLAYTIMELIMITINSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SubEventChangeLimitSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstEventCommonExcel::VT_SUBEVENTCHANGELIMITSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SubEventInstantClear(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConstEventCommonExcel::VT_SUBEVENTINSTANTCLEAR, Some(false)).unwrap()}
  }
  #[inline]
  pub fn CardShopProbWeightCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstEventCommonExcel::VT_CARDSHOPPROBWEIGHTCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CardShopProbWeightRarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(ConstEventCommonExcel::VT_CARDSHOPPROBWEIGHTRARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn MeetupScenarioReplayResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstEventCommonExcel::VT_MEETUPSCENARIOREPLAYRESOURCE, None)}
  }
  #[inline]
  pub fn MeetupScenarioReplayTitleLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstEventCommonExcel::VT_MEETUPSCENARIOREPLAYTITLELOCALIZE, None)}
  }
  #[inline]
  pub fn SpecialOperactionCollectionGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstEventCommonExcel::VT_SPECIALOPERACTIONCOLLECTIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TreasureNormalVariationAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstEventCommonExcel::VT_TREASURENORMALVARIATIONAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TreasureLoopVariationAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstEventCommonExcel::VT_TREASURELOOPVARIATIONAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TreasureLimitVariationLoopCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstEventCommonExcel::VT_TREASURELIMITVARIATIONLOOPCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TreasureLimitVariationClearLoopCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstEventCommonExcel::VT_TREASURELIMITVARIATIONCLEARLOOPCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventStoryReplayHideEventContentId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConstEventCommonExcel::VT_EVENTSTORYREPLAYHIDEEVENTCONTENTID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConstEventCommonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("EventContentHardStageCount", Self::VT_EVENTCONTENTHARDSTAGECOUNT, false)?
     .visit_field::<i64>("EventStrategyPlayTimeLimitInSeconds", Self::VT_EVENTSTRATEGYPLAYTIMELIMITINSECONDS, false)?
     .visit_field::<i64>("SubEventChangeLimitSeconds", Self::VT_SUBEVENTCHANGELIMITSECONDS, false)?
     .visit_field::<bool>("SubEventInstantClear", Self::VT_SUBEVENTINSTANTCLEAR, false)?
     .visit_field::<i64>("CardShopProbWeightCount", Self::VT_CARDSHOPPROBWEIGHTCOUNT, false)?
     .visit_field::<Rarity>("CardShopProbWeightRarity", Self::VT_CARDSHOPPROBWEIGHTRARITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MeetupScenarioReplayResource", Self::VT_MEETUPSCENARIOREPLAYRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MeetupScenarioReplayTitleLocalize", Self::VT_MEETUPSCENARIOREPLAYTITLELOCALIZE, false)?
     .visit_field::<i64>("SpecialOperactionCollectionGroupId", Self::VT_SPECIALOPERACTIONCOLLECTIONGROUPID, false)?
     .visit_field::<i32>("TreasureNormalVariationAmount", Self::VT_TREASURENORMALVARIATIONAMOUNT, false)?
     .visit_field::<i32>("TreasureLoopVariationAmount", Self::VT_TREASURELOOPVARIATIONAMOUNT, false)?
     .visit_field::<i32>("TreasureLimitVariationLoopCount", Self::VT_TREASURELIMITVARIATIONLOOPCOUNT, false)?
     .visit_field::<i32>("TreasureLimitVariationClearLoopCount", Self::VT_TREASURELIMITVARIATIONCLEARLOOPCOUNT, false)?
     .visit_field::<i32>("EventStoryReplayHideEventContentId", Self::VT_EVENTSTORYREPLAYHIDEEVENTCONTENTID, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstEventCommonExcelArgs<'a> {
    pub EventContentHardStageCount: i32,
    pub EventStrategyPlayTimeLimitInSeconds: i64,
    pub SubEventChangeLimitSeconds: i64,
    pub SubEventInstantClear: bool,
    pub CardShopProbWeightCount: i64,
    pub CardShopProbWeightRarity: Rarity,
    pub MeetupScenarioReplayResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MeetupScenarioReplayTitleLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpecialOperactionCollectionGroupId: i64,
    pub TreasureNormalVariationAmount: i32,
    pub TreasureLoopVariationAmount: i32,
    pub TreasureLimitVariationLoopCount: i32,
    pub TreasureLimitVariationClearLoopCount: i32,
    pub EventStoryReplayHideEventContentId: i32,
}
impl<'a> Default for ConstEventCommonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConstEventCommonExcelArgs {
      EventContentHardStageCount: 0,
      EventStrategyPlayTimeLimitInSeconds: 0,
      SubEventChangeLimitSeconds: 0,
      SubEventInstantClear: false,
      CardShopProbWeightCount: 0,
      CardShopProbWeightRarity: Rarity::N,
      MeetupScenarioReplayResource: None,
      MeetupScenarioReplayTitleLocalize: None,
      SpecialOperactionCollectionGroupId: 0,
      TreasureNormalVariationAmount: 0,
      TreasureLoopVariationAmount: 0,
      TreasureLimitVariationLoopCount: 0,
      TreasureLimitVariationClearLoopCount: 0,
      EventStoryReplayHideEventContentId: 0,
    }
  }
}

impl Serialize for ConstEventCommonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstEventCommonExcel", 14)?;
      s.serialize_field("EventContentHardStageCount", &self.EventContentHardStageCount())?;
      s.serialize_field("EventStrategyPlayTimeLimitInSeconds", &self.EventStrategyPlayTimeLimitInSeconds())?;
      s.serialize_field("SubEventChangeLimitSeconds", &self.SubEventChangeLimitSeconds())?;
      s.serialize_field("SubEventInstantClear", &self.SubEventInstantClear())?;
      s.serialize_field("CardShopProbWeightCount", &self.CardShopProbWeightCount())?;
      s.serialize_field("CardShopProbWeightRarity", &self.CardShopProbWeightRarity())?;
      if let Some(f) = self.MeetupScenarioReplayResource() {
        s.serialize_field("MeetupScenarioReplayResource", &f)?;
      } else {
        s.skip_field("MeetupScenarioReplayResource")?;
      }
      if let Some(f) = self.MeetupScenarioReplayTitleLocalize() {
        s.serialize_field("MeetupScenarioReplayTitleLocalize", &f)?;
      } else {
        s.skip_field("MeetupScenarioReplayTitleLocalize")?;
      }
      s.serialize_field("SpecialOperactionCollectionGroupId", &self.SpecialOperactionCollectionGroupId())?;
      s.serialize_field("TreasureNormalVariationAmount", &self.TreasureNormalVariationAmount())?;
      s.serialize_field("TreasureLoopVariationAmount", &self.TreasureLoopVariationAmount())?;
      s.serialize_field("TreasureLimitVariationLoopCount", &self.TreasureLimitVariationLoopCount())?;
      s.serialize_field("TreasureLimitVariationClearLoopCount", &self.TreasureLimitVariationClearLoopCount())?;
      s.serialize_field("EventStoryReplayHideEventContentId", &self.EventStoryReplayHideEventContentId())?;
    s.end()
  }
}

pub struct ConstEventCommonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstEventCommonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentHardStageCount(&mut self, EventContentHardStageCount: i32) {
    self.fbb_.push_slot::<i32>(ConstEventCommonExcel::VT_EVENTCONTENTHARDSTAGECOUNT, EventContentHardStageCount, 0);
  }
  #[inline]
  pub fn add_EventStrategyPlayTimeLimitInSeconds(&mut self, EventStrategyPlayTimeLimitInSeconds: i64) {
    self.fbb_.push_slot::<i64>(ConstEventCommonExcel::VT_EVENTSTRATEGYPLAYTIMELIMITINSECONDS, EventStrategyPlayTimeLimitInSeconds, 0);
  }
  #[inline]
  pub fn add_SubEventChangeLimitSeconds(&mut self, SubEventChangeLimitSeconds: i64) {
    self.fbb_.push_slot::<i64>(ConstEventCommonExcel::VT_SUBEVENTCHANGELIMITSECONDS, SubEventChangeLimitSeconds, 0);
  }
  #[inline]
  pub fn add_SubEventInstantClear(&mut self, SubEventInstantClear: bool) {
    self.fbb_.push_slot::<bool>(ConstEventCommonExcel::VT_SUBEVENTINSTANTCLEAR, SubEventInstantClear, false);
  }
  #[inline]
  pub fn add_CardShopProbWeightCount(&mut self, CardShopProbWeightCount: i64) {
    self.fbb_.push_slot::<i64>(ConstEventCommonExcel::VT_CARDSHOPPROBWEIGHTCOUNT, CardShopProbWeightCount, 0);
  }
  #[inline]
  pub fn add_CardShopProbWeightRarity(&mut self, CardShopProbWeightRarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(ConstEventCommonExcel::VT_CARDSHOPPROBWEIGHTRARITY, CardShopProbWeightRarity, Rarity::N);
  }
  #[inline]
  pub fn add_MeetupScenarioReplayResource(&mut self, MeetupScenarioReplayResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstEventCommonExcel::VT_MEETUPSCENARIOREPLAYRESOURCE, MeetupScenarioReplayResource);
  }
  #[inline]
  pub fn add_MeetupScenarioReplayTitleLocalize(&mut self, MeetupScenarioReplayTitleLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstEventCommonExcel::VT_MEETUPSCENARIOREPLAYTITLELOCALIZE, MeetupScenarioReplayTitleLocalize);
  }
  #[inline]
  pub fn add_SpecialOperactionCollectionGroupId(&mut self, SpecialOperactionCollectionGroupId: i64) {
    self.fbb_.push_slot::<i64>(ConstEventCommonExcel::VT_SPECIALOPERACTIONCOLLECTIONGROUPID, SpecialOperactionCollectionGroupId, 0);
  }
  #[inline]
  pub fn add_TreasureNormalVariationAmount(&mut self, TreasureNormalVariationAmount: i32) {
    self.fbb_.push_slot::<i32>(ConstEventCommonExcel::VT_TREASURENORMALVARIATIONAMOUNT, TreasureNormalVariationAmount, 0);
  }
  #[inline]
  pub fn add_TreasureLoopVariationAmount(&mut self, TreasureLoopVariationAmount: i32) {
    self.fbb_.push_slot::<i32>(ConstEventCommonExcel::VT_TREASURELOOPVARIATIONAMOUNT, TreasureLoopVariationAmount, 0);
  }
  #[inline]
  pub fn add_TreasureLimitVariationLoopCount(&mut self, TreasureLimitVariationLoopCount: i32) {
    self.fbb_.push_slot::<i32>(ConstEventCommonExcel::VT_TREASURELIMITVARIATIONLOOPCOUNT, TreasureLimitVariationLoopCount, 0);
  }
  #[inline]
  pub fn add_TreasureLimitVariationClearLoopCount(&mut self, TreasureLimitVariationClearLoopCount: i32) {
    self.fbb_.push_slot::<i32>(ConstEventCommonExcel::VT_TREASURELIMITVARIATIONCLEARLOOPCOUNT, TreasureLimitVariationClearLoopCount, 0);
  }
  #[inline]
  pub fn add_EventStoryReplayHideEventContentId(&mut self, EventStoryReplayHideEventContentId: i32) {
    self.fbb_.push_slot::<i32>(ConstEventCommonExcel::VT_EVENTSTORYREPLAYHIDEEVENTCONTENTID, EventStoryReplayHideEventContentId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstEventCommonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstEventCommonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstEventCommonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstEventCommonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstEventCommonExcel");
      ds.field("EventContentHardStageCount", &self.EventContentHardStageCount());
      ds.field("EventStrategyPlayTimeLimitInSeconds", &self.EventStrategyPlayTimeLimitInSeconds());
      ds.field("SubEventChangeLimitSeconds", &self.SubEventChangeLimitSeconds());
      ds.field("SubEventInstantClear", &self.SubEventInstantClear());
      ds.field("CardShopProbWeightCount", &self.CardShopProbWeightCount());
      ds.field("CardShopProbWeightRarity", &self.CardShopProbWeightRarity());
      ds.field("MeetupScenarioReplayResource", &self.MeetupScenarioReplayResource());
      ds.field("MeetupScenarioReplayTitleLocalize", &self.MeetupScenarioReplayTitleLocalize());
      ds.field("SpecialOperactionCollectionGroupId", &self.SpecialOperactionCollectionGroupId());
      ds.field("TreasureNormalVariationAmount", &self.TreasureNormalVariationAmount());
      ds.field("TreasureLoopVariationAmount", &self.TreasureLoopVariationAmount());
      ds.field("TreasureLimitVariationLoopCount", &self.TreasureLimitVariationLoopCount());
      ds.field("TreasureLimitVariationClearLoopCount", &self.TreasureLimitVariationClearLoopCount());
      ds.field("EventStoryReplayHideEventContentId", &self.EventStoryReplayHideEventContentId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstEventCommonExcelT {
  pub EventContentHardStageCount: i32,
  pub EventStrategyPlayTimeLimitInSeconds: i64,
  pub SubEventChangeLimitSeconds: i64,
  pub SubEventInstantClear: bool,
  pub CardShopProbWeightCount: i64,
  pub CardShopProbWeightRarity: Rarity,
  pub MeetupScenarioReplayResource: Option<String>,
  pub MeetupScenarioReplayTitleLocalize: Option<String>,
  pub SpecialOperactionCollectionGroupId: i64,
  pub TreasureNormalVariationAmount: i32,
  pub TreasureLoopVariationAmount: i32,
  pub TreasureLimitVariationLoopCount: i32,
  pub TreasureLimitVariationClearLoopCount: i32,
  pub EventStoryReplayHideEventContentId: i32,
}
impl Default for ConstEventCommonExcelT {
  fn default() -> Self {
    Self {
      EventContentHardStageCount: 0,
      EventStrategyPlayTimeLimitInSeconds: 0,
      SubEventChangeLimitSeconds: 0,
      SubEventInstantClear: false,
      CardShopProbWeightCount: 0,
      CardShopProbWeightRarity: Rarity::N,
      MeetupScenarioReplayResource: None,
      MeetupScenarioReplayTitleLocalize: None,
      SpecialOperactionCollectionGroupId: 0,
      TreasureNormalVariationAmount: 0,
      TreasureLoopVariationAmount: 0,
      TreasureLimitVariationLoopCount: 0,
      TreasureLimitVariationClearLoopCount: 0,
      EventStoryReplayHideEventContentId: 0,
    }
  }
}
impl ConstEventCommonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstEventCommonExcel<'b>> {
    let EventContentHardStageCount = self.EventContentHardStageCount;
    let EventStrategyPlayTimeLimitInSeconds = self.EventStrategyPlayTimeLimitInSeconds;
    let SubEventChangeLimitSeconds = self.SubEventChangeLimitSeconds;
    let SubEventInstantClear = self.SubEventInstantClear;
    let CardShopProbWeightCount = self.CardShopProbWeightCount;
    let CardShopProbWeightRarity = self.CardShopProbWeightRarity;
    let MeetupScenarioReplayResource = self.MeetupScenarioReplayResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MeetupScenarioReplayTitleLocalize = self.MeetupScenarioReplayTitleLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpecialOperactionCollectionGroupId = self.SpecialOperactionCollectionGroupId;
    let TreasureNormalVariationAmount = self.TreasureNormalVariationAmount;
    let TreasureLoopVariationAmount = self.TreasureLoopVariationAmount;
    let TreasureLimitVariationLoopCount = self.TreasureLimitVariationLoopCount;
    let TreasureLimitVariationClearLoopCount = self.TreasureLimitVariationClearLoopCount;
    let EventStoryReplayHideEventContentId = self.EventStoryReplayHideEventContentId;
    ConstEventCommonExcel::create(_fbb, &ConstEventCommonExcelArgs{
      EventContentHardStageCount,
      EventStrategyPlayTimeLimitInSeconds,
      SubEventChangeLimitSeconds,
      SubEventInstantClear,
      CardShopProbWeightCount,
      CardShopProbWeightRarity,
      MeetupScenarioReplayResource,
      MeetupScenarioReplayTitleLocalize,
      SpecialOperactionCollectionGroupId,
      TreasureNormalVariationAmount,
      TreasureLoopVariationAmount,
      TreasureLimitVariationLoopCount,
      TreasureLimitVariationClearLoopCount,
      EventStoryReplayHideEventContentId,
    })
  }
}
