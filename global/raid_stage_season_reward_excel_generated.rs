// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RaidStageSeasonRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidStageSeasonRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidStageSeasonRewardExcel<'a> {
  type Inner = RaidStageSeasonRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RaidStageSeasonRewardExcel<'a> {
  pub const VT_SEASONREWARDID: flatbuffers::VOffsetT = 4;
  pub const VT_SEASONREWARDPARCELTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_SEASONREWARDPARCELUNIQUEID: flatbuffers::VOffsetT = 8;
  pub const VT_SEASONREWARDPARCELUNIQUENAME: flatbuffers::VOffsetT = 10;
  pub const VT_SEASONREWARDAMOUNT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RaidStageSeasonRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RaidStageSeasonRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<RaidStageSeasonRewardExcel<'bldr>> {
    let mut builder = RaidStageSeasonRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"RaidStageSeasonReward");
      let x = args.SeasonRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonRewardId(x);
      if let Some(x) = args.SeasonRewardAmount {
        builder.add_SeasonRewardAmount(x);
      }
      if let Some(x) = args.SeasonRewardParcelUniqueName {
        builder.add_SeasonRewardParcelUniqueName(x);
      }
      if let Some(x) = args.SeasonRewardParcelUniqueId {
        builder.add_SeasonRewardParcelUniqueId(x);
      }
      if let Some(x) = args.SeasonRewardParcelType {
        builder.add_SeasonRewardParcelType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> RaidStageSeasonRewardExcelT {
    let key = table_encryption_service::create_key(b"RaidStageSeasonReward");
      let SeasonRewardId = self.SeasonRewardId();
    let SeasonRewardParcelType = self.SeasonRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let SeasonRewardParcelUniqueId = self.SeasonRewardParcelUniqueId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let SeasonRewardParcelUniqueName = self.SeasonRewardParcelUniqueName().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let SeasonRewardAmount = self.SeasonRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    RaidStageSeasonRewardExcelT {
      SeasonRewardId,
      SeasonRewardParcelType,
      SeasonRewardParcelUniqueId,
      SeasonRewardParcelUniqueName,
      SeasonRewardAmount,
    }
  }

  #[inline]
  pub fn SeasonRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidStageSeasonRewardExcel::VT_SEASONREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SeasonRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn SeasonRewardParcelUniqueId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDPARCELUNIQUEID, None)}
  }
  #[inline]
  pub fn SeasonRewardParcelUniqueName(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDPARCELUNIQUENAME, None)}
  }
  #[inline]
  pub fn SeasonRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for RaidStageSeasonRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("SeasonRewardId", Self::VT_SEASONREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("SeasonRewardParcelType", Self::VT_SEASONREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("SeasonRewardParcelUniqueId", Self::VT_SEASONREWARDPARCELUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("SeasonRewardParcelUniqueName", Self::VT_SEASONREWARDPARCELUNIQUENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("SeasonRewardAmount", Self::VT_SEASONREWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct RaidStageSeasonRewardExcelArgs<'a> {
    pub SeasonRewardId: i64,
    pub SeasonRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub SeasonRewardParcelUniqueId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub SeasonRewardParcelUniqueName: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub SeasonRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for RaidStageSeasonRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    RaidStageSeasonRewardExcelArgs {
      SeasonRewardId: 0,
      SeasonRewardParcelType: None,
      SeasonRewardParcelUniqueId: None,
      SeasonRewardParcelUniqueName: None,
      SeasonRewardAmount: None,
    }
  }
}

impl Serialize for RaidStageSeasonRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RaidStageSeasonRewardExcel", 5)?;
      s.serialize_field("SeasonRewardId", &self.SeasonRewardId())?;
      if let Some(f) = self.SeasonRewardParcelType() {
        s.serialize_field("SeasonRewardParcelType", &f)?;
      } else {
        s.skip_field("SeasonRewardParcelType")?;
      }
      if let Some(f) = self.SeasonRewardParcelUniqueId() {
        s.serialize_field("SeasonRewardParcelUniqueId", &f)?;
      } else {
        s.skip_field("SeasonRewardParcelUniqueId")?;
      }
      if let Some(f) = self.SeasonRewardParcelUniqueName() {
        s.serialize_field("SeasonRewardParcelUniqueName", &f)?;
      } else {
        s.skip_field("SeasonRewardParcelUniqueName")?;
      }
      if let Some(f) = self.SeasonRewardAmount() {
        s.serialize_field("SeasonRewardAmount", &f)?;
      } else {
        s.skip_field("SeasonRewardAmount")?;
      }
    s.end()
  }
}

pub struct RaidStageSeasonRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RaidStageSeasonRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_SeasonRewardId(&mut self, SeasonRewardId: i64) {
    self.fbb_.push_slot::<i64>(RaidStageSeasonRewardExcel::VT_SEASONREWARDID, SeasonRewardId, 0);
  }
  #[inline]
  pub fn add_SeasonRewardParcelType(&mut self, SeasonRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDPARCELTYPE, SeasonRewardParcelType);
  }
  #[inline]
  pub fn add_SeasonRewardParcelUniqueId(&mut self, SeasonRewardParcelUniqueId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDPARCELUNIQUEID, SeasonRewardParcelUniqueId);
  }
  #[inline]
  pub fn add_SeasonRewardParcelUniqueName(&mut self, SeasonRewardParcelUniqueName: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDPARCELUNIQUENAME, SeasonRewardParcelUniqueName);
  }
  #[inline]
  pub fn add_SeasonRewardAmount(&mut self, SeasonRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidStageSeasonRewardExcel::VT_SEASONREWARDAMOUNT, SeasonRewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RaidStageSeasonRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RaidStageSeasonRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RaidStageSeasonRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RaidStageSeasonRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RaidStageSeasonRewardExcel");
      ds.field("SeasonRewardId", &self.SeasonRewardId());
      ds.field("SeasonRewardParcelType", &self.SeasonRewardParcelType());
      ds.field("SeasonRewardParcelUniqueId", &self.SeasonRewardParcelUniqueId());
      ds.field("SeasonRewardParcelUniqueName", &self.SeasonRewardParcelUniqueName());
      ds.field("SeasonRewardAmount", &self.SeasonRewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RaidStageSeasonRewardExcelT {
  pub SeasonRewardId: i64,
  pub SeasonRewardParcelType: Option<Vec<ParcelType>>,
  pub SeasonRewardParcelUniqueId: Option<Vec<i64>>,
  pub SeasonRewardParcelUniqueName: Option<Vec<String>>,
  pub SeasonRewardAmount: Option<Vec<i64>>,
}
impl Default for RaidStageSeasonRewardExcelT {
  fn default() -> Self {
    Self {
      SeasonRewardId: 0,
      SeasonRewardParcelType: None,
      SeasonRewardParcelUniqueId: None,
      SeasonRewardParcelUniqueName: None,
      SeasonRewardAmount: None,
    }
  }
}
impl RaidStageSeasonRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RaidStageSeasonRewardExcel<'b>> {
    let SeasonRewardId = self.SeasonRewardId;
    let SeasonRewardParcelType = self.SeasonRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SeasonRewardParcelUniqueId = self.SeasonRewardParcelUniqueId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SeasonRewardParcelUniqueName = self.SeasonRewardParcelUniqueName.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let SeasonRewardAmount = self.SeasonRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    RaidStageSeasonRewardExcel::create(_fbb, &RaidStageSeasonRewardExcelArgs{
      SeasonRewardId,
      SeasonRewardParcelType,
      SeasonRewardParcelUniqueId,
      SeasonRewardParcelUniqueName,
      SeasonRewardAmount,
    })
  }
}
