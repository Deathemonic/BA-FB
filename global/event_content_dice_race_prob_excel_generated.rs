// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentDiceRaceProbExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentDiceRaceProbExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentDiceRaceProbExcel<'a> {
  type Inner = EventContentDiceRaceProbExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentDiceRaceProbExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTDICERACERESULTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_COSTITEMID: flatbuffers::VOffsetT = 8;
  pub const VT_COSTITEMAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_DICERESULT: flatbuffers::VOffsetT = 12;
  pub const VT_PROB: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentDiceRaceProbExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentDiceRaceProbExcelArgs
  ) -> flatbuffers::WIPOffset<EventContentDiceRaceProbExcel<'bldr>> {
    let mut builder = EventContentDiceRaceProbExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentDiceRaceProb");
      let x = args.CostItemId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostItemId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      let x = args.DiceResult;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DiceResult(x);
      let x = args.CostItemAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CostItemAmount(x);
      let x = args.EventContentDiceRaceResultType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventContentDiceRaceResultType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentDiceRaceProbExcelT {
    let key = table_encryption_service::create_key(b"EventContentDiceRaceProb");
      let EventContentId = self.EventContentId();
      let EventContentDiceRaceResultType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventContentDiceRaceResultType(), &key)
      } else {
        self.EventContentDiceRaceResultType()
      };
      let CostItemId = self.CostItemId();
      let CostItemAmount = self.CostItemAmount();
      let DiceResult = self.DiceResult();
      let Prob = self.Prob();
    EventContentDiceRaceProbExcelT {
      EventContentId,
      EventContentDiceRaceResultType,
      CostItemId,
      CostItemAmount,
      DiceResult,
      Prob,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDiceRaceProbExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentDiceRaceResultType(&self) -> EventContentDiceRaceResultType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentDiceRaceResultType>(EventContentDiceRaceProbExcel::VT_EVENTCONTENTDICERACERESULTTYPE, Some(EventContentDiceRaceResultType::DiceResult1)).unwrap()}
  }
  #[inline]
  pub fn CostItemId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDiceRaceProbExcel::VT_COSTITEMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostItemAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentDiceRaceProbExcel::VT_COSTITEMAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiceResult(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentDiceRaceProbExcel::VT_DICERESULT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentDiceRaceProbExcel::VT_PROB, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentDiceRaceProbExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<EventContentDiceRaceResultType>("EventContentDiceRaceResultType", Self::VT_EVENTCONTENTDICERACERESULTTYPE, false)?
     .visit_field::<i64>("CostItemId", Self::VT_COSTITEMID, false)?
     .visit_field::<i32>("CostItemAmount", Self::VT_COSTITEMAMOUNT, false)?
     .visit_field::<i32>("DiceResult", Self::VT_DICERESULT, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentDiceRaceProbExcelArgs {
    pub EventContentId: i64,
    pub EventContentDiceRaceResultType: EventContentDiceRaceResultType,
    pub CostItemId: i64,
    pub CostItemAmount: i32,
    pub DiceResult: i32,
    pub Prob: i32,
}
impl<'a> Default for EventContentDiceRaceProbExcelArgs {
  #[inline]
  fn default() -> Self {
    EventContentDiceRaceProbExcelArgs {
      EventContentId: 0,
      EventContentDiceRaceResultType: EventContentDiceRaceResultType::DiceResult1,
      CostItemId: 0,
      CostItemAmount: 0,
      DiceResult: 0,
      Prob: 0,
    }
  }
}

impl Serialize for EventContentDiceRaceProbExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentDiceRaceProbExcel", 6)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventContentDiceRaceResultType", &self.EventContentDiceRaceResultType())?;
      s.serialize_field("CostItemId", &self.CostItemId())?;
      s.serialize_field("CostItemAmount", &self.CostItemAmount())?;
      s.serialize_field("DiceResult", &self.DiceResult())?;
      s.serialize_field("Prob", &self.Prob())?;
    s.end()
  }
}

pub struct EventContentDiceRaceProbExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentDiceRaceProbExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentDiceRaceProbExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventContentDiceRaceResultType(&mut self, EventContentDiceRaceResultType: EventContentDiceRaceResultType) {
    self.fbb_.push_slot::<EventContentDiceRaceResultType>(EventContentDiceRaceProbExcel::VT_EVENTCONTENTDICERACERESULTTYPE, EventContentDiceRaceResultType, EventContentDiceRaceResultType::DiceResult1);
  }
  #[inline]
  pub fn add_CostItemId(&mut self, CostItemId: i64) {
    self.fbb_.push_slot::<i64>(EventContentDiceRaceProbExcel::VT_COSTITEMID, CostItemId, 0);
  }
  #[inline]
  pub fn add_CostItemAmount(&mut self, CostItemAmount: i32) {
    self.fbb_.push_slot::<i32>(EventContentDiceRaceProbExcel::VT_COSTITEMAMOUNT, CostItemAmount, 0);
  }
  #[inline]
  pub fn add_DiceResult(&mut self, DiceResult: i32) {
    self.fbb_.push_slot::<i32>(EventContentDiceRaceProbExcel::VT_DICERESULT, DiceResult, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(EventContentDiceRaceProbExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentDiceRaceProbExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentDiceRaceProbExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentDiceRaceProbExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentDiceRaceProbExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentDiceRaceProbExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventContentDiceRaceResultType", &self.EventContentDiceRaceResultType());
      ds.field("CostItemId", &self.CostItemId());
      ds.field("CostItemAmount", &self.CostItemAmount());
      ds.field("DiceResult", &self.DiceResult());
      ds.field("Prob", &self.Prob());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentDiceRaceProbExcelT {
  pub EventContentId: i64,
  pub EventContentDiceRaceResultType: EventContentDiceRaceResultType,
  pub CostItemId: i64,
  pub CostItemAmount: i32,
  pub DiceResult: i32,
  pub Prob: i32,
}
impl Default for EventContentDiceRaceProbExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventContentDiceRaceResultType: EventContentDiceRaceResultType::DiceResult1,
      CostItemId: 0,
      CostItemAmount: 0,
      DiceResult: 0,
      Prob: 0,
    }
  }
}
impl EventContentDiceRaceProbExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentDiceRaceProbExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventContentDiceRaceResultType = self.EventContentDiceRaceResultType;
    let CostItemId = self.CostItemId;
    let CostItemAmount = self.CostItemAmount;
    let DiceResult = self.DiceResult;
    let Prob = self.Prob;
    EventContentDiceRaceProbExcel::create(_fbb, &EventContentDiceRaceProbExcelArgs{
      EventContentId,
      EventContentDiceRaceResultType,
      CostItemId,
      CostItemAmount,
      DiceResult,
      Prob,
    })
  }
}
