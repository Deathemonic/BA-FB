// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ArenaLevelSectionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ArenaLevelSectionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArenaLevelSectionExcel<'a> {
  type Inner = ArenaLevelSectionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArenaLevelSectionExcel<'a> {
  pub const VT_ARENASEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_STARTLEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_LASTLEVEL: flatbuffers::VOffsetT = 8;
  pub const VT_USERCOUNT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArenaLevelSectionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArenaLevelSectionExcelArgs
  ) -> flatbuffers::WIPOffset<ArenaLevelSectionExcel<'bldr>> {
    let mut builder = ArenaLevelSectionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ArenaLevelSection");
      let x = args.UserCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UserCount(x);
      let x = args.LastLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LastLevel(x);
      let x = args.StartLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StartLevel(x);
      let x = args.ArenaSeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ArenaSeasonId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ArenaLevelSectionExcelT {
    let key = table_encryption_service::create_key(b"ArenaLevelSection");
      let ArenaSeasonId = self.ArenaSeasonId();
      let StartLevel = self.StartLevel();
      let LastLevel = self.LastLevel();
      let UserCount = self.UserCount();
    ArenaLevelSectionExcelT {
      ArenaSeasonId,
      StartLevel,
      LastLevel,
      UserCount,
    }
  }

  #[inline]
  pub fn ArenaSeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaLevelSectionExcel::VT_ARENASEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaLevelSectionExcel::VT_STARTLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LastLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaLevelSectionExcel::VT_LASTLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UserCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaLevelSectionExcel::VT_USERCOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ArenaLevelSectionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ArenaSeasonId", Self::VT_ARENASEASONID, false)?
     .visit_field::<i64>("StartLevel", Self::VT_STARTLEVEL, false)?
     .visit_field::<i64>("LastLevel", Self::VT_LASTLEVEL, false)?
     .visit_field::<i64>("UserCount", Self::VT_USERCOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ArenaLevelSectionExcelArgs {
    pub ArenaSeasonId: i64,
    pub StartLevel: i64,
    pub LastLevel: i64,
    pub UserCount: i64,
}
impl<'a> Default for ArenaLevelSectionExcelArgs {
  #[inline]
  fn default() -> Self {
    ArenaLevelSectionExcelArgs {
      ArenaSeasonId: 0,
      StartLevel: 0,
      LastLevel: 0,
      UserCount: 0,
    }
  }
}

impl Serialize for ArenaLevelSectionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ArenaLevelSectionExcel", 4)?;
      s.serialize_field("ArenaSeasonId", &self.ArenaSeasonId())?;
      s.serialize_field("StartLevel", &self.StartLevel())?;
      s.serialize_field("LastLevel", &self.LastLevel())?;
      s.serialize_field("UserCount", &self.UserCount())?;
    s.end()
  }
}

pub struct ArenaLevelSectionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArenaLevelSectionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ArenaSeasonId(&mut self, ArenaSeasonId: i64) {
    self.fbb_.push_slot::<i64>(ArenaLevelSectionExcel::VT_ARENASEASONID, ArenaSeasonId, 0);
  }
  #[inline]
  pub fn add_StartLevel(&mut self, StartLevel: i64) {
    self.fbb_.push_slot::<i64>(ArenaLevelSectionExcel::VT_STARTLEVEL, StartLevel, 0);
  }
  #[inline]
  pub fn add_LastLevel(&mut self, LastLevel: i64) {
    self.fbb_.push_slot::<i64>(ArenaLevelSectionExcel::VT_LASTLEVEL, LastLevel, 0);
  }
  #[inline]
  pub fn add_UserCount(&mut self, UserCount: i64) {
    self.fbb_.push_slot::<i64>(ArenaLevelSectionExcel::VT_USERCOUNT, UserCount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArenaLevelSectionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArenaLevelSectionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArenaLevelSectionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArenaLevelSectionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArenaLevelSectionExcel");
      ds.field("ArenaSeasonId", &self.ArenaSeasonId());
      ds.field("StartLevel", &self.StartLevel());
      ds.field("LastLevel", &self.LastLevel());
      ds.field("UserCount", &self.UserCount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ArenaLevelSectionExcelT {
  pub ArenaSeasonId: i64,
  pub StartLevel: i64,
  pub LastLevel: i64,
  pub UserCount: i64,
}
impl Default for ArenaLevelSectionExcelT {
  fn default() -> Self {
    Self {
      ArenaSeasonId: 0,
      StartLevel: 0,
      LastLevel: 0,
      UserCount: 0,
    }
  }
}
impl ArenaLevelSectionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ArenaLevelSectionExcel<'b>> {
    let ArenaSeasonId = self.ArenaSeasonId;
    let StartLevel = self.StartLevel;
    let LastLevel = self.LastLevel;
    let UserCount = self.UserCount;
    ArenaLevelSectionExcel::create(_fbb, &ArenaLevelSectionExcelArgs{
      ArenaSeasonId,
      StartLevel,
      LastLevel,
      UserCount,
    })
  }
}
