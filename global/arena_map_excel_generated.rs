// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ArenaMapExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ArenaMapExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ArenaMapExcel<'a> {
  type Inner = ArenaMapExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ArenaMapExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_TERRAINTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_TERRAINTYPELOCALIZEKEY: flatbuffers::VOffsetT = 8;
  pub const VT_IMAGEPATH: flatbuffers::VOffsetT = 10;
  pub const VT_GROUNDGROUPID: flatbuffers::VOffsetT = 12;
  pub const VT_GROUNDGROUPNAMELOCALIZEKEY: flatbuffers::VOffsetT = 14;
  pub const VT_STARTRANK: flatbuffers::VOffsetT = 16;
  pub const VT_ENDRANK: flatbuffers::VOffsetT = 18;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ArenaMapExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ArenaMapExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ArenaMapExcel<'bldr>> {
    let mut builder = ArenaMapExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ArenaMap");
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.EndRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EndRank(x);
      let x = args.StartRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StartRank(x);
      let x = args.GroundGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundGroupId(x);
      let x = args.TerrainType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TerrainType(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.GroundGroupNameLocalizeKey {
        builder.add_GroundGroupNameLocalizeKey(x);
      }
      if let Some(x) = args.ImagePath {
        builder.add_ImagePath(x);
      }
      if let Some(x) = args.TerrainTypeLocalizeKey {
        builder.add_TerrainTypeLocalizeKey(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ArenaMapExcelT {
    let key = table_encryption_service::create_key(b"ArenaMap");
      let UniqueId = self.UniqueId();
      let TerrainType = self.TerrainType();
    let TerrainTypeLocalizeKey = self.TerrainTypeLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePath = self.ImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let GroundGroupId = self.GroundGroupId();
    let GroundGroupNameLocalizeKey = self.GroundGroupNameLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StartRank = self.StartRank();
      let EndRank = self.EndRank();
      let GroundId = self.GroundId();
    ArenaMapExcelT {
      UniqueId,
      TerrainType,
      TerrainTypeLocalizeKey,
      ImagePath,
      GroundGroupId,
      GroundGroupNameLocalizeKey,
      StartRank,
      EndRank,
      GroundId,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaMapExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TerrainType(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaMapExcel::VT_TERRAINTYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TerrainTypeLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArenaMapExcel::VT_TERRAINTYPELOCALIZEKEY, None)}
  }
  #[inline]
  pub fn ImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArenaMapExcel::VT_IMAGEPATH, None)}
  }
  #[inline]
  pub fn GroundGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaMapExcel::VT_GROUNDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroundGroupNameLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ArenaMapExcel::VT_GROUNDGROUPNAMELOCALIZEKEY, None)}
  }
  #[inline]
  pub fn StartRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaMapExcel::VT_STARTRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EndRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaMapExcel::VT_ENDRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ArenaMapExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ArenaMapExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("TerrainType", Self::VT_TERRAINTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TerrainTypeLocalizeKey", Self::VT_TERRAINTYPELOCALIZEKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePath", Self::VT_IMAGEPATH, false)?
     .visit_field::<i64>("GroundGroupId", Self::VT_GROUNDGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GroundGroupNameLocalizeKey", Self::VT_GROUNDGROUPNAMELOCALIZEKEY, false)?
     .visit_field::<i64>("StartRank", Self::VT_STARTRANK, false)?
     .visit_field::<i64>("EndRank", Self::VT_ENDRANK, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .finish();
    Ok(())
  }
}
pub struct ArenaMapExcelArgs<'a> {
    pub UniqueId: i64,
    pub TerrainType: i64,
    pub TerrainTypeLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GroundGroupId: i64,
    pub GroundGroupNameLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StartRank: i64,
    pub EndRank: i64,
    pub GroundId: i64,
}
impl<'a> Default for ArenaMapExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ArenaMapExcelArgs {
      UniqueId: 0,
      TerrainType: 0,
      TerrainTypeLocalizeKey: None,
      ImagePath: None,
      GroundGroupId: 0,
      GroundGroupNameLocalizeKey: None,
      StartRank: 0,
      EndRank: 0,
      GroundId: 0,
    }
  }
}

impl Serialize for ArenaMapExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ArenaMapExcel", 9)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("TerrainType", &self.TerrainType())?;
      if let Some(f) = self.TerrainTypeLocalizeKey() {
        s.serialize_field("TerrainTypeLocalizeKey", &f)?;
      } else {
        s.skip_field("TerrainTypeLocalizeKey")?;
      }
      if let Some(f) = self.ImagePath() {
        s.serialize_field("ImagePath", &f)?;
      } else {
        s.skip_field("ImagePath")?;
      }
      s.serialize_field("GroundGroupId", &self.GroundGroupId())?;
      if let Some(f) = self.GroundGroupNameLocalizeKey() {
        s.serialize_field("GroundGroupNameLocalizeKey", &f)?;
      } else {
        s.skip_field("GroundGroupNameLocalizeKey")?;
      }
      s.serialize_field("StartRank", &self.StartRank())?;
      s.serialize_field("EndRank", &self.EndRank())?;
      s.serialize_field("GroundId", &self.GroundId())?;
    s.end()
  }
}

pub struct ArenaMapExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ArenaMapExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(ArenaMapExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_TerrainType(&mut self, TerrainType: i64) {
    self.fbb_.push_slot::<i64>(ArenaMapExcel::VT_TERRAINTYPE, TerrainType, 0);
  }
  #[inline]
  pub fn add_TerrainTypeLocalizeKey(&mut self, TerrainTypeLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaMapExcel::VT_TERRAINTYPELOCALIZEKEY, TerrainTypeLocalizeKey);
  }
  #[inline]
  pub fn add_ImagePath(&mut self, ImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaMapExcel::VT_IMAGEPATH, ImagePath);
  }
  #[inline]
  pub fn add_GroundGroupId(&mut self, GroundGroupId: i64) {
    self.fbb_.push_slot::<i64>(ArenaMapExcel::VT_GROUNDGROUPID, GroundGroupId, 0);
  }
  #[inline]
  pub fn add_GroundGroupNameLocalizeKey(&mut self, GroundGroupNameLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ArenaMapExcel::VT_GROUNDGROUPNAMELOCALIZEKEY, GroundGroupNameLocalizeKey);
  }
  #[inline]
  pub fn add_StartRank(&mut self, StartRank: i64) {
    self.fbb_.push_slot::<i64>(ArenaMapExcel::VT_STARTRANK, StartRank, 0);
  }
  #[inline]
  pub fn add_EndRank(&mut self, EndRank: i64) {
    self.fbb_.push_slot::<i64>(ArenaMapExcel::VT_ENDRANK, EndRank, 0);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(ArenaMapExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ArenaMapExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ArenaMapExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ArenaMapExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ArenaMapExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ArenaMapExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("TerrainType", &self.TerrainType());
      ds.field("TerrainTypeLocalizeKey", &self.TerrainTypeLocalizeKey());
      ds.field("ImagePath", &self.ImagePath());
      ds.field("GroundGroupId", &self.GroundGroupId());
      ds.field("GroundGroupNameLocalizeKey", &self.GroundGroupNameLocalizeKey());
      ds.field("StartRank", &self.StartRank());
      ds.field("EndRank", &self.EndRank());
      ds.field("GroundId", &self.GroundId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ArenaMapExcelT {
  pub UniqueId: i64,
  pub TerrainType: i64,
  pub TerrainTypeLocalizeKey: Option<String>,
  pub ImagePath: Option<String>,
  pub GroundGroupId: i64,
  pub GroundGroupNameLocalizeKey: Option<String>,
  pub StartRank: i64,
  pub EndRank: i64,
  pub GroundId: i64,
}
impl Default for ArenaMapExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      TerrainType: 0,
      TerrainTypeLocalizeKey: None,
      ImagePath: None,
      GroundGroupId: 0,
      GroundGroupNameLocalizeKey: None,
      StartRank: 0,
      EndRank: 0,
      GroundId: 0,
    }
  }
}
impl ArenaMapExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ArenaMapExcel<'b>> {
    let UniqueId = self.UniqueId;
    let TerrainType = self.TerrainType;
    let TerrainTypeLocalizeKey = self.TerrainTypeLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePath = self.ImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GroundGroupId = self.GroundGroupId;
    let GroundGroupNameLocalizeKey = self.GroundGroupNameLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StartRank = self.StartRank;
    let EndRank = self.EndRank;
    let GroundId = self.GroundId;
    ArenaMapExcel::create(_fbb, &ArenaMapExcelArgs{
      UniqueId,
      TerrainType,
      TerrainTypeLocalizeKey,
      ImagePath,
      GroundGroupId,
      GroundGroupNameLocalizeKey,
      StartRank,
      EndRank,
      GroundId,
    })
  }
}
