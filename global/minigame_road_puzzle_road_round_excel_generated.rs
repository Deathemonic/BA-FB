// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameRoadPuzzleRoadRoundExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameRoadPuzzleRoadRoundExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameRoadPuzzleRoadRoundExcel<'a> {
  type Inner = MinigameRoadPuzzleRoadRoundExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameRoadPuzzleRoadRoundExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_ROUND: flatbuffers::VOffsetT = 8;
  pub const VT_ISLOOP: flatbuffers::VOffsetT = 10;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 12;
  pub const VT_ENDSCENARIOGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_MAPGROUPID: flatbuffers::VOffsetT = 16;
  pub const VT_ROUNDREWARD: flatbuffers::VOffsetT = 18;
  pub const VT_ADDITIONALREWARDID: flatbuffers::VOffsetT = 20;
  pub const VT_ADDITIONALREWARDAMOUNT: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameRoadPuzzleRoadRoundExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameRoadPuzzleRoadRoundExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleRoadRoundExcel<'bldr>> {
    let mut builder = MinigameRoadPuzzleRoadRoundExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleRoadRound");
      let x = args.RoundReward;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RoundReward(x);
      let x = args.MapGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MapGroupId(x);
      let x = args.EndScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EndScenarioGroupId(x);
      let x = args.EnterScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnterScenarioGroupId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.AdditionalRewardAmount {
        builder.add_AdditionalRewardAmount(x);
      }
      if let Some(x) = args.AdditionalRewardID {
        builder.add_AdditionalRewardID(x);
      }
      let x = args.Round;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Round(x);
      builder.add_IsLoop(args.IsLoop);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameRoadPuzzleRoadRoundExcelT {
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleRoadRound");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let Round = self.Round();
      let IsLoop = self.IsLoop();
      let EnterScenarioGroupId = self.EnterScenarioGroupId();
      let EndScenarioGroupId = self.EndScenarioGroupId();
      let MapGroupId = self.MapGroupId();
      let RoundReward = self.RoundReward();
    let AdditionalRewardID = self.AdditionalRewardID().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let AdditionalRewardAmount = self.AdditionalRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    MinigameRoadPuzzleRoadRoundExcelT {
      EventContentId,
      UniqueId,
      Round,
      IsLoop,
      EnterScenarioGroupId,
      EndScenarioGroupId,
      MapGroupId,
      RoundReward,
      AdditionalRewardID,
      AdditionalRewardAmount,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Round(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameRoadPuzzleRoadRoundExcel::VT_ROUND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsLoop(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameRoadPuzzleRoadRoundExcel::VT_ISLOOP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EnterScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_ENTERSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EndScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_ENDSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MapGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_MAPGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RoundReward(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_ROUNDREWARD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AdditionalRewardID(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameRoadPuzzleRoadRoundExcel::VT_ADDITIONALREWARDID, None)}
  }
  #[inline]
  pub fn AdditionalRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(MinigameRoadPuzzleRoadRoundExcel::VT_ADDITIONALREWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for MinigameRoadPuzzleRoadRoundExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i32>("Round", Self::VT_ROUND, false)?
     .visit_field::<bool>("IsLoop", Self::VT_ISLOOP, false)?
     .visit_field::<i64>("EnterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<i64>("EndScenarioGroupId", Self::VT_ENDSCENARIOGROUPID, false)?
     .visit_field::<i64>("MapGroupId", Self::VT_MAPGROUPID, false)?
     .visit_field::<i64>("RoundReward", Self::VT_ROUNDREWARD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("AdditionalRewardID", Self::VT_ADDITIONALREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("AdditionalRewardAmount", Self::VT_ADDITIONALREWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameRoadPuzzleRoadRoundExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub Round: i32,
    pub IsLoop: bool,
    pub EnterScenarioGroupId: i64,
    pub EndScenarioGroupId: i64,
    pub MapGroupId: i64,
    pub RoundReward: i64,
    pub AdditionalRewardID: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub AdditionalRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for MinigameRoadPuzzleRoadRoundExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameRoadPuzzleRoadRoundExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      Round: 0,
      IsLoop: false,
      EnterScenarioGroupId: 0,
      EndScenarioGroupId: 0,
      MapGroupId: 0,
      RoundReward: 0,
      AdditionalRewardID: None,
      AdditionalRewardAmount: None,
    }
  }
}

impl Serialize for MinigameRoadPuzzleRoadRoundExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameRoadPuzzleRoadRoundExcel", 10)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("Round", &self.Round())?;
      s.serialize_field("IsLoop", &self.IsLoop())?;
      s.serialize_field("EnterScenarioGroupId", &self.EnterScenarioGroupId())?;
      s.serialize_field("EndScenarioGroupId", &self.EndScenarioGroupId())?;
      s.serialize_field("MapGroupId", &self.MapGroupId())?;
      s.serialize_field("RoundReward", &self.RoundReward())?;
      if let Some(f) = self.AdditionalRewardID() {
        s.serialize_field("AdditionalRewardID", &f)?;
      } else {
        s.skip_field("AdditionalRewardID")?;
      }
      if let Some(f) = self.AdditionalRewardAmount() {
        s.serialize_field("AdditionalRewardAmount", &f)?;
      } else {
        s.skip_field("AdditionalRewardAmount")?;
      }
    s.end()
  }
}

pub struct MinigameRoadPuzzleRoadRoundExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameRoadPuzzleRoadRoundExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_Round(&mut self, Round: i32) {
    self.fbb_.push_slot::<i32>(MinigameRoadPuzzleRoadRoundExcel::VT_ROUND, Round, 0);
  }
  #[inline]
  pub fn add_IsLoop(&mut self, IsLoop: bool) {
    self.fbb_.push_slot::<bool>(MinigameRoadPuzzleRoadRoundExcel::VT_ISLOOP, IsLoop, false);
  }
  #[inline]
  pub fn add_EnterScenarioGroupId(&mut self, EnterScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_ENTERSCENARIOGROUPID, EnterScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_EndScenarioGroupId(&mut self, EndScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_ENDSCENARIOGROUPID, EndScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_MapGroupId(&mut self, MapGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_MAPGROUPID, MapGroupId, 0);
  }
  #[inline]
  pub fn add_RoundReward(&mut self, RoundReward: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleRoadRoundExcel::VT_ROUNDREWARD, RoundReward, 0);
  }
  #[inline]
  pub fn add_AdditionalRewardID(&mut self, AdditionalRewardID: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleRoadRoundExcel::VT_ADDITIONALREWARDID, AdditionalRewardID);
  }
  #[inline]
  pub fn add_AdditionalRewardAmount(&mut self, AdditionalRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleRoadRoundExcel::VT_ADDITIONALREWARDAMOUNT, AdditionalRewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameRoadPuzzleRoadRoundExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameRoadPuzzleRoadRoundExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameRoadPuzzleRoadRoundExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameRoadPuzzleRoadRoundExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameRoadPuzzleRoadRoundExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("Round", &self.Round());
      ds.field("IsLoop", &self.IsLoop());
      ds.field("EnterScenarioGroupId", &self.EnterScenarioGroupId());
      ds.field("EndScenarioGroupId", &self.EndScenarioGroupId());
      ds.field("MapGroupId", &self.MapGroupId());
      ds.field("RoundReward", &self.RoundReward());
      ds.field("AdditionalRewardID", &self.AdditionalRewardID());
      ds.field("AdditionalRewardAmount", &self.AdditionalRewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameRoadPuzzleRoadRoundExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub Round: i32,
  pub IsLoop: bool,
  pub EnterScenarioGroupId: i64,
  pub EndScenarioGroupId: i64,
  pub MapGroupId: i64,
  pub RoundReward: i64,
  pub AdditionalRewardID: Option<Vec<i64>>,
  pub AdditionalRewardAmount: Option<Vec<i32>>,
}
impl Default for MinigameRoadPuzzleRoadRoundExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      Round: 0,
      IsLoop: false,
      EnterScenarioGroupId: 0,
      EndScenarioGroupId: 0,
      MapGroupId: 0,
      RoundReward: 0,
      AdditionalRewardID: None,
      AdditionalRewardAmount: None,
    }
  }
}
impl MinigameRoadPuzzleRoadRoundExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleRoadRoundExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let Round = self.Round;
    let IsLoop = self.IsLoop;
    let EnterScenarioGroupId = self.EnterScenarioGroupId;
    let EndScenarioGroupId = self.EndScenarioGroupId;
    let MapGroupId = self.MapGroupId;
    let RoundReward = self.RoundReward;
    let AdditionalRewardID = self.AdditionalRewardID.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let AdditionalRewardAmount = self.AdditionalRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MinigameRoadPuzzleRoadRoundExcel::create(_fbb, &MinigameRoadPuzzleRoadRoundExcelArgs{
      EventContentId,
      UniqueId,
      Round,
      IsLoop,
      EnterScenarioGroupId,
      EndScenarioGroupId,
      MapGroupId,
      RoundReward,
      AdditionalRewardID,
      AdditionalRewardAmount,
    })
  }
}
