// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AcademyLocationExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AcademyLocationExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AcademyLocationExcel<'a> {
  type Inner = AcademyLocationExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AcademyLocationExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 6;
  pub const VT_PREFABPATH: flatbuffers::VOffsetT = 8;
  pub const VT_ICONIMAGEPATH: flatbuffers::VOffsetT = 10;
  pub const VT_OPENCONDITION: flatbuffers::VOffsetT = 12;
  pub const VT_OPENCONDITIONCOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 18;
  pub const VT_OPENTEACHERRANK: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AcademyLocationExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AcademyLocationExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AcademyLocationExcel<'bldr>> {
    let mut builder = AcademyLocationExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AcademyLocation");
      let x = args.OpenTeacherRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenTeacherRank(x);
      let x = args.RewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      if let Some(x) = args.OpenConditionCount {
        builder.add_OpenConditionCount(x);
      }
      if let Some(x) = args.OpenCondition {
        builder.add_OpenCondition(x);
      }
      if let Some(x) = args.IconImagePath {
        builder.add_IconImagePath(x);
      }
      if let Some(x) = args.PrefabPath {
        builder.add_PrefabPath(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> AcademyLocationExcelT {
    let key = table_encryption_service::create_key(b"AcademyLocation");
      let Id = self.Id();
      let LocalizeEtcId = self.LocalizeEtcId();
    let PrefabPath = self.PrefabPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IconImagePath = self.IconImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let OpenCondition = self.OpenCondition().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let OpenConditionCount = self.OpenConditionCount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelId = self.RewardParcelId();
      let OpenTeacherRank = self.OpenTeacherRank();
    AcademyLocationExcelT {
      Id,
      LocalizeEtcId,
      PrefabPath,
      IconImagePath,
      OpenCondition,
      OpenConditionCount,
      RewardParcelType,
      RewardParcelId,
      OpenTeacherRank,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyLocationExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AcademyLocationExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrefabPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyLocationExcel::VT_PREFABPATH, None)}
  }
  #[inline]
  pub fn IconImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyLocationExcel::VT_ICONIMAGEPATH, None)}
  }
  #[inline]
  pub fn OpenCondition(&self) -> Option<flatbuffers::Vector<'a, School>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, School>>>(AcademyLocationExcel::VT_OPENCONDITION, None)}
  }
  #[inline]
  pub fn OpenConditionCount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AcademyLocationExcel::VT_OPENCONDITIONCOUNT, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(AcademyLocationExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyLocationExcel::VT_REWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenTeacherRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyLocationExcel::VT_OPENTEACHERRANK, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AcademyLocationExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabPath", Self::VT_PREFABPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconImagePath", Self::VT_ICONIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, School>>>("OpenCondition", Self::VT_OPENCONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("OpenConditionCount", Self::VT_OPENCONDITIONCOUNT, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<i64>("OpenTeacherRank", Self::VT_OPENTEACHERRANK, false)?
     .finish();
    Ok(())
  }
}
pub struct AcademyLocationExcelArgs<'a> {
    pub Id: i64,
    pub LocalizeEtcId: u32,
    pub PrefabPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IconImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OpenCondition: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, School>>>,
    pub OpenConditionCount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelType: ParcelType,
    pub RewardParcelId: i64,
    pub OpenTeacherRank: i64,
}
impl<'a> Default for AcademyLocationExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AcademyLocationExcelArgs {
      Id: 0,
      LocalizeEtcId: 0,
      PrefabPath: None,
      IconImagePath: None,
      OpenCondition: None,
      OpenConditionCount: None,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      OpenTeacherRank: 0,
    }
  }
}

impl Serialize for AcademyLocationExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AcademyLocationExcel", 9)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.PrefabPath() {
        s.serialize_field("PrefabPath", &f)?;
      } else {
        s.skip_field("PrefabPath")?;
      }
      if let Some(f) = self.IconImagePath() {
        s.serialize_field("IconImagePath", &f)?;
      } else {
        s.skip_field("IconImagePath")?;
      }
      if let Some(f) = self.OpenCondition() {
        s.serialize_field("OpenCondition", &f)?;
      } else {
        s.skip_field("OpenCondition")?;
      }
      if let Some(f) = self.OpenConditionCount() {
        s.serialize_field("OpenConditionCount", &f)?;
      } else {
        s.skip_field("OpenConditionCount")?;
      }
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelId", &self.RewardParcelId())?;
      s.serialize_field("OpenTeacherRank", &self.OpenTeacherRank())?;
    s.end()
  }
}

pub struct AcademyLocationExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AcademyLocationExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(AcademyLocationExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(AcademyLocationExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_PrefabPath(&mut self, PrefabPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyLocationExcel::VT_PREFABPATH, PrefabPath);
  }
  #[inline]
  pub fn add_IconImagePath(&mut self, IconImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyLocationExcel::VT_ICONIMAGEPATH, IconImagePath);
  }
  #[inline]
  pub fn add_OpenCondition(&mut self, OpenCondition: flatbuffers::WIPOffset<flatbuffers::Vector<'b , School>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyLocationExcel::VT_OPENCONDITION, OpenCondition);
  }
  #[inline]
  pub fn add_OpenConditionCount(&mut self, OpenConditionCount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyLocationExcel::VT_OPENCONDITIONCOUNT, OpenConditionCount);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(AcademyLocationExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(AcademyLocationExcel::VT_REWARDPARCELID, RewardParcelId, 0);
  }
  #[inline]
  pub fn add_OpenTeacherRank(&mut self, OpenTeacherRank: i64) {
    self.fbb_.push_slot::<i64>(AcademyLocationExcel::VT_OPENTEACHERRANK, OpenTeacherRank, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AcademyLocationExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AcademyLocationExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AcademyLocationExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AcademyLocationExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AcademyLocationExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("PrefabPath", &self.PrefabPath());
      ds.field("IconImagePath", &self.IconImagePath());
      ds.field("OpenCondition", &self.OpenCondition());
      ds.field("OpenConditionCount", &self.OpenConditionCount());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("OpenTeacherRank", &self.OpenTeacherRank());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AcademyLocationExcelT {
  pub Id: i64,
  pub LocalizeEtcId: u32,
  pub PrefabPath: Option<String>,
  pub IconImagePath: Option<String>,
  pub OpenCondition: Option<Vec<School>>,
  pub OpenConditionCount: Option<Vec<i64>>,
  pub RewardParcelType: ParcelType,
  pub RewardParcelId: i64,
  pub OpenTeacherRank: i64,
}
impl Default for AcademyLocationExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeEtcId: 0,
      PrefabPath: None,
      IconImagePath: None,
      OpenCondition: None,
      OpenConditionCount: None,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      OpenTeacherRank: 0,
    }
  }
}
impl AcademyLocationExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AcademyLocationExcel<'b>> {
    let Id = self.Id;
    let LocalizeEtcId = self.LocalizeEtcId;
    let PrefabPath = self.PrefabPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IconImagePath = self.IconImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OpenCondition = self.OpenCondition.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let OpenConditionCount = self.OpenConditionCount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelId = self.RewardParcelId;
    let OpenTeacherRank = self.OpenTeacherRank;
    AcademyLocationExcel::create(_fbb, &AcademyLocationExcelArgs{
      Id,
      LocalizeEtcId,
      PrefabPath,
      IconImagePath,
      OpenCondition,
      OpenConditionCount,
      RewardParcelType,
      RewardParcelId,
      OpenTeacherRank,
    })
  }
}
