// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentExcel<'a> {
  type Inner = EventContentExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DEVNAME: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 8;
  pub const VT_BGIMAGEPATH: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentExcel<'bldr>> {
    let mut builder = EventContentExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContent");
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.BgImagePath {
        builder.add_BgImagePath(x);
      }
      if let Some(x) = args.DevName {
        builder.add_DevName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentExcelT {
    let key = table_encryption_service::create_key(b"EventContent");
      let Id = self.Id();
    let DevName = self.DevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventContentId = self.EventContentId();
    let BgImagePath = self.BgImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentExcelT {
      Id,
      DevName,
      EventContentId,
      BgImagePath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentExcel::VT_DEVNAME, None)}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BgImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentExcel::VT_BGIMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for EventContentExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DevName", Self::VT_DEVNAME, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgImagePath", Self::VT_BGIMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentExcelArgs<'a> {
    pub Id: i64,
    pub DevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventContentId: i64,
    pub BgImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentExcelArgs {
      Id: 0,
      DevName: None,
      EventContentId: 0,
      BgImagePath: None,
    }
  }
}

impl Serialize for EventContentExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentExcel", 4)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.DevName() {
        s.serialize_field("DevName", &f)?;
      } else {
        s.skip_field("DevName")?;
      }
      s.serialize_field("EventContentId", &self.EventContentId())?;
      if let Some(f) = self.BgImagePath() {
        s.serialize_field("BgImagePath", &f)?;
      } else {
        s.skip_field("BgImagePath")?;
      }
    s.end()
  }
}

pub struct EventContentExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_DevName(&mut self, DevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentExcel::VT_DEVNAME, DevName);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_BgImagePath(&mut self, BgImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentExcel::VT_BGIMAGEPATH, BgImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentExcel");
      ds.field("Id", &self.Id());
      ds.field("DevName", &self.DevName());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("BgImagePath", &self.BgImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentExcelT {
  pub Id: i64,
  pub DevName: Option<String>,
  pub EventContentId: i64,
  pub BgImagePath: Option<String>,
}
impl Default for EventContentExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      DevName: None,
      EventContentId: 0,
      BgImagePath: None,
    }
  }
}
impl EventContentExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentExcel<'b>> {
    let Id = self.Id;
    let DevName = self.DevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventContentId = self.EventContentId;
    let BgImagePath = self.BgImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentExcel::create(_fbb, &EventContentExcelArgs{
      Id,
      DevName,
      EventContentId,
      BgImagePath,
    })
  }
}
