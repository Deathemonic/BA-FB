// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestStepExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestStepExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestStepExcel<'a> {
  type Inner = ConquestStepExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestStepExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_MAPDIFFICULTY: flatbuffers::VOffsetT = 6;
  pub const VT_STEP: flatbuffers::VOffsetT = 8;
  pub const VT_STEPGOALLOCALIZE: flatbuffers::VOffsetT = 10;
  pub const VT_STEPENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 12;
  pub const VT_STEPENTERITEMTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_STEPENTERITEMUNIQUEID: flatbuffers::VOffsetT = 16;
  pub const VT_STEPENTERITEMAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_UNEXPECTEDEVENTUNITID: flatbuffers::VOffsetT = 20;
  pub const VT_UNEXPECTEDEVENTPREFAB: flatbuffers::VOffsetT = 22;
  pub const VT_TREASUREBOXOBJECTID: flatbuffers::VOffsetT = 24;
  pub const VT_TREASUREBOXCOUNTPERSTEPOPEN: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestStepExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestStepExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestStepExcel<'bldr>> {
    let mut builder = ConquestStepExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestStep");
      let x = args.TreasureBoxObjectId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TreasureBoxObjectId(x);
      let x = args.StepEnterItemAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StepEnterItemAmount(x);
      let x = args.StepEnterItemUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StepEnterItemUniqueId(x);
      let x = args.StepEnterScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StepEnterScenarioGroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.TreasureBoxCountPerStepOpen;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TreasureBoxCountPerStepOpen(x);
      if let Some(x) = args.UnexpectedEventPrefab {
        builder.add_UnexpectedEventPrefab(x);
      }
      if let Some(x) = args.unexpectedEventUnitId {
        builder.add_unexpectedEventUnitId(x);
      }
      let x = args.StepEnterItemType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StepEnterItemType(x);
      if let Some(x) = args.StepGoalLocalize {
        builder.add_StepGoalLocalize(x);
      }
      let x = args.Step;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Step(x);
      let x = args.MapDifficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MapDifficulty(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestStepExcelT {
    let key = table_encryption_service::create_key(b"ConquestStep");
      let EventContentId = self.EventContentId();
      let MapDifficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MapDifficulty(), &key)
      } else {
        self.MapDifficulty()
      };
      let Step = self.Step();
    let StepGoalLocalize = self.StepGoalLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let StepEnterScenarioGroupId = self.StepEnterScenarioGroupId();
      let StepEnterItemType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StepEnterItemType(), &key)
      } else {
        self.StepEnterItemType()
      };
      let StepEnterItemUniqueId = self.StepEnterItemUniqueId();
      let StepEnterItemAmount = self.StepEnterItemAmount();
    let unexpectedEventUnitId = self.unexpectedEventUnitId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let UnexpectedEventPrefab = self.UnexpectedEventPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let TreasureBoxObjectId = self.TreasureBoxObjectId();
      let TreasureBoxCountPerStepOpen = self.TreasureBoxCountPerStepOpen();
    ConquestStepExcelT {
      EventContentId,
      MapDifficulty,
      Step,
      StepGoalLocalize,
      StepEnterScenarioGroupId,
      StepEnterItemType,
      StepEnterItemUniqueId,
      StepEnterItemAmount,
      unexpectedEventUnitId,
      UnexpectedEventPrefab,
      TreasureBoxObjectId,
      TreasureBoxCountPerStepOpen,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestStepExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MapDifficulty(&self) -> StageDifficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageDifficulty>(ConquestStepExcel::VT_MAPDIFFICULTY, Some(StageDifficulty::None)).unwrap()}
  }
  #[inline]
  pub fn Step(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestStepExcel::VT_STEP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StepGoalLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestStepExcel::VT_STEPGOALLOCALIZE, None)}
  }
  #[inline]
  pub fn StepEnterScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestStepExcel::VT_STEPENTERSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StepEnterItemType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestStepExcel::VT_STEPENTERITEMTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StepEnterItemUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestStepExcel::VT_STEPENTERITEMUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StepEnterItemAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestStepExcel::VT_STEPENTERITEMAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unexpectedEventUnitId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ConquestStepExcel::VT_UNEXPECTEDEVENTUNITID, None)}
  }
  #[inline]
  pub fn UnexpectedEventPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestStepExcel::VT_UNEXPECTEDEVENTPREFAB, None)}
  }
  #[inline]
  pub fn TreasureBoxObjectId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestStepExcel::VT_TREASUREBOXOBJECTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TreasureBoxCountPerStepOpen(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestStepExcel::VT_TREASUREBOXCOUNTPERSTEPOPEN, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestStepExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<StageDifficulty>("MapDifficulty", Self::VT_MAPDIFFICULTY, false)?
     .visit_field::<i32>("Step", Self::VT_STEP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StepGoalLocalize", Self::VT_STEPGOALLOCALIZE, false)?
     .visit_field::<i64>("StepEnterScenarioGroupId", Self::VT_STEPENTERSCENARIOGROUPID, false)?
     .visit_field::<ParcelType>("StepEnterItemType", Self::VT_STEPENTERITEMTYPE, false)?
     .visit_field::<i64>("StepEnterItemUniqueId", Self::VT_STEPENTERITEMUNIQUEID, false)?
     .visit_field::<i64>("StepEnterItemAmount", Self::VT_STEPENTERITEMAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("unexpectedEventUnitId", Self::VT_UNEXPECTEDEVENTUNITID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("UnexpectedEventPrefab", Self::VT_UNEXPECTEDEVENTPREFAB, false)?
     .visit_field::<i64>("TreasureBoxObjectId", Self::VT_TREASUREBOXOBJECTID, false)?
     .visit_field::<i32>("TreasureBoxCountPerStepOpen", Self::VT_TREASUREBOXCOUNTPERSTEPOPEN, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestStepExcelArgs<'a> {
    pub EventContentId: i64,
    pub MapDifficulty: StageDifficulty,
    pub Step: i32,
    pub StepGoalLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StepEnterScenarioGroupId: i64,
    pub StepEnterItemType: ParcelType,
    pub StepEnterItemUniqueId: i64,
    pub StepEnterItemAmount: i64,
    pub unexpectedEventUnitId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub UnexpectedEventPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TreasureBoxObjectId: i64,
    pub TreasureBoxCountPerStepOpen: i32,
}
impl<'a> Default for ConquestStepExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestStepExcelArgs {
      EventContentId: 0,
      MapDifficulty: StageDifficulty::None,
      Step: 0,
      StepGoalLocalize: None,
      StepEnterScenarioGroupId: 0,
      StepEnterItemType: ParcelType::None,
      StepEnterItemUniqueId: 0,
      StepEnterItemAmount: 0,
      unexpectedEventUnitId: None,
      UnexpectedEventPrefab: None,
      TreasureBoxObjectId: 0,
      TreasureBoxCountPerStepOpen: 0,
    }
  }
}

impl Serialize for ConquestStepExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestStepExcel", 12)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("MapDifficulty", &self.MapDifficulty())?;
      s.serialize_field("Step", &self.Step())?;
      if let Some(f) = self.StepGoalLocalize() {
        s.serialize_field("StepGoalLocalize", &f)?;
      } else {
        s.skip_field("StepGoalLocalize")?;
      }
      s.serialize_field("StepEnterScenarioGroupId", &self.StepEnterScenarioGroupId())?;
      s.serialize_field("StepEnterItemType", &self.StepEnterItemType())?;
      s.serialize_field("StepEnterItemUniqueId", &self.StepEnterItemUniqueId())?;
      s.serialize_field("StepEnterItemAmount", &self.StepEnterItemAmount())?;
      if let Some(f) = self.unexpectedEventUnitId() {
        s.serialize_field("unexpectedEventUnitId", &f)?;
      } else {
        s.skip_field("unexpectedEventUnitId")?;
      }
      if let Some(f) = self.UnexpectedEventPrefab() {
        s.serialize_field("UnexpectedEventPrefab", &f)?;
      } else {
        s.skip_field("UnexpectedEventPrefab")?;
      }
      s.serialize_field("TreasureBoxObjectId", &self.TreasureBoxObjectId())?;
      s.serialize_field("TreasureBoxCountPerStepOpen", &self.TreasureBoxCountPerStepOpen())?;
    s.end()
  }
}

pub struct ConquestStepExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestStepExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(ConquestStepExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_MapDifficulty(&mut self, MapDifficulty: StageDifficulty) {
    self.fbb_.push_slot::<StageDifficulty>(ConquestStepExcel::VT_MAPDIFFICULTY, MapDifficulty, StageDifficulty::None);
  }
  #[inline]
  pub fn add_Step(&mut self, Step: i32) {
    self.fbb_.push_slot::<i32>(ConquestStepExcel::VT_STEP, Step, 0);
  }
  #[inline]
  pub fn add_StepGoalLocalize(&mut self, StepGoalLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestStepExcel::VT_STEPGOALLOCALIZE, StepGoalLocalize);
  }
  #[inline]
  pub fn add_StepEnterScenarioGroupId(&mut self, StepEnterScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(ConquestStepExcel::VT_STEPENTERSCENARIOGROUPID, StepEnterScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_StepEnterItemType(&mut self, StepEnterItemType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestStepExcel::VT_STEPENTERITEMTYPE, StepEnterItemType, ParcelType::None);
  }
  #[inline]
  pub fn add_StepEnterItemUniqueId(&mut self, StepEnterItemUniqueId: i64) {
    self.fbb_.push_slot::<i64>(ConquestStepExcel::VT_STEPENTERITEMUNIQUEID, StepEnterItemUniqueId, 0);
  }
  #[inline]
  pub fn add_StepEnterItemAmount(&mut self, StepEnterItemAmount: i64) {
    self.fbb_.push_slot::<i64>(ConquestStepExcel::VT_STEPENTERITEMAMOUNT, StepEnterItemAmount, 0);
  }
  #[inline]
  pub fn add_unexpectedEventUnitId(&mut self, unexpectedEventUnitId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestStepExcel::VT_UNEXPECTEDEVENTUNITID, unexpectedEventUnitId);
  }
  #[inline]
  pub fn add_UnexpectedEventPrefab(&mut self, UnexpectedEventPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestStepExcel::VT_UNEXPECTEDEVENTPREFAB, UnexpectedEventPrefab);
  }
  #[inline]
  pub fn add_TreasureBoxObjectId(&mut self, TreasureBoxObjectId: i64) {
    self.fbb_.push_slot::<i64>(ConquestStepExcel::VT_TREASUREBOXOBJECTID, TreasureBoxObjectId, 0);
  }
  #[inline]
  pub fn add_TreasureBoxCountPerStepOpen(&mut self, TreasureBoxCountPerStepOpen: i32) {
    self.fbb_.push_slot::<i32>(ConquestStepExcel::VT_TREASUREBOXCOUNTPERSTEPOPEN, TreasureBoxCountPerStepOpen, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestStepExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestStepExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestStepExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestStepExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestStepExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("MapDifficulty", &self.MapDifficulty());
      ds.field("Step", &self.Step());
      ds.field("StepGoalLocalize", &self.StepGoalLocalize());
      ds.field("StepEnterScenarioGroupId", &self.StepEnterScenarioGroupId());
      ds.field("StepEnterItemType", &self.StepEnterItemType());
      ds.field("StepEnterItemUniqueId", &self.StepEnterItemUniqueId());
      ds.field("StepEnterItemAmount", &self.StepEnterItemAmount());
      ds.field("unexpectedEventUnitId", &self.unexpectedEventUnitId());
      ds.field("UnexpectedEventPrefab", &self.UnexpectedEventPrefab());
      ds.field("TreasureBoxObjectId", &self.TreasureBoxObjectId());
      ds.field("TreasureBoxCountPerStepOpen", &self.TreasureBoxCountPerStepOpen());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestStepExcelT {
  pub EventContentId: i64,
  pub MapDifficulty: StageDifficulty,
  pub Step: i32,
  pub StepGoalLocalize: Option<String>,
  pub StepEnterScenarioGroupId: i64,
  pub StepEnterItemType: ParcelType,
  pub StepEnterItemUniqueId: i64,
  pub StepEnterItemAmount: i64,
  pub unexpectedEventUnitId: Option<Vec<i64>>,
  pub UnexpectedEventPrefab: Option<String>,
  pub TreasureBoxObjectId: i64,
  pub TreasureBoxCountPerStepOpen: i32,
}
impl Default for ConquestStepExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      MapDifficulty: StageDifficulty::None,
      Step: 0,
      StepGoalLocalize: None,
      StepEnterScenarioGroupId: 0,
      StepEnterItemType: ParcelType::None,
      StepEnterItemUniqueId: 0,
      StepEnterItemAmount: 0,
      unexpectedEventUnitId: None,
      UnexpectedEventPrefab: None,
      TreasureBoxObjectId: 0,
      TreasureBoxCountPerStepOpen: 0,
    }
  }
}
impl ConquestStepExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestStepExcel<'b>> {
    let EventContentId = self.EventContentId;
    let MapDifficulty = self.MapDifficulty;
    let Step = self.Step;
    let StepGoalLocalize = self.StepGoalLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StepEnterScenarioGroupId = self.StepEnterScenarioGroupId;
    let StepEnterItemType = self.StepEnterItemType;
    let StepEnterItemUniqueId = self.StepEnterItemUniqueId;
    let StepEnterItemAmount = self.StepEnterItemAmount;
    let unexpectedEventUnitId = self.unexpectedEventUnitId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let UnexpectedEventPrefab = self.UnexpectedEventPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TreasureBoxObjectId = self.TreasureBoxObjectId;
    let TreasureBoxCountPerStepOpen = self.TreasureBoxCountPerStepOpen;
    ConquestStepExcel::create(_fbb, &ConquestStepExcelArgs{
      EventContentId,
      MapDifficulty,
      Step,
      StepGoalLocalize,
      StepEnterScenarioGroupId,
      StepEnterItemType,
      StepEnterItemUniqueId,
      StepEnterItemAmount,
      unexpectedEventUnitId,
      UnexpectedEventPrefab,
      TreasureBoxObjectId,
      TreasureBoxCountPerStepOpen,
    })
  }
}
