// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CafeInteractionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CafeInteractionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CafeInteractionExcel<'a> {
  type Inner = CafeInteractionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CafeInteractionExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_IGNOREIFUNOBTAINED: flatbuffers::VOffsetT = 6;
  pub const VT_IGNOREIFUNOBTAINEDSTARTDATE: flatbuffers::VOffsetT = 8;
  pub const VT_IGNOREIFUNOBTAINEDENDDATE: flatbuffers::VOffsetT = 10;
  pub const VT_BUBBLETYPE: flatbuffers::VOffsetT = 12;
  pub const VT_BUBBLEDURATION: flatbuffers::VOffsetT = 14;
  pub const VT_FAVOREMOTICONREWARDPARCELTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_FAVOREMOTICONREWARDID: flatbuffers::VOffsetT = 18;
  pub const VT_FAVOREMOTICONREWARDAMOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_CAFECHARACTERSTATE: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CafeInteractionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CafeInteractionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CafeInteractionExcel<'bldr>> {
    let mut builder = CafeInteractionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CafeInteraction");
      let x = args.FavorEmoticonRewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FavorEmoticonRewardAmount(x);
      let x = args.FavorEmoticonRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FavorEmoticonRewardId(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.CafeCharacterState {
        builder.add_CafeCharacterState(x);
      }
      let x = args.FavorEmoticonRewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_FavorEmoticonRewardParcelType(x);
      if let Some(x) = args.BubbleDuration {
        builder.add_BubbleDuration(x);
      }
      if let Some(x) = args.BubbleType {
        builder.add_BubbleType(x);
      }
      if let Some(x) = args.IgnoreIfUnobtainedEndDate {
        builder.add_IgnoreIfUnobtainedEndDate(x);
      }
      if let Some(x) = args.IgnoreIfUnobtainedStartDate {
        builder.add_IgnoreIfUnobtainedStartDate(x);
      }
      builder.add_IgnoreIfUnobtained(args.IgnoreIfUnobtained);
    builder.finish()
  }

  pub fn unpack(&self) -> CafeInteractionExcelT {
    let key = table_encryption_service::create_key(b"CafeInteraction");
      let CharacterId = self.CharacterId();
      let IgnoreIfUnobtained = self.IgnoreIfUnobtained();
    let IgnoreIfUnobtainedStartDate = self.IgnoreIfUnobtainedStartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IgnoreIfUnobtainedEndDate = self.IgnoreIfUnobtainedEndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BubbleType = self.BubbleType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let BubbleDuration = self.BubbleDuration().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let FavorEmoticonRewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.FavorEmoticonRewardParcelType(), &key)
      } else {
        self.FavorEmoticonRewardParcelType()
      };
      let FavorEmoticonRewardId = self.FavorEmoticonRewardId();
      let FavorEmoticonRewardAmount = self.FavorEmoticonRewardAmount();
    let CafeCharacterState = self.CafeCharacterState().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    CafeInteractionExcelT {
      CharacterId,
      IgnoreIfUnobtained,
      IgnoreIfUnobtainedStartDate,
      IgnoreIfUnobtainedEndDate,
      BubbleType,
      BubbleDuration,
      FavorEmoticonRewardParcelType,
      FavorEmoticonRewardId,
      FavorEmoticonRewardAmount,
      CafeCharacterState,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeInteractionExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IgnoreIfUnobtained(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CafeInteractionExcel::VT_IGNOREIFUNOBTAINED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IgnoreIfUnobtainedStartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CafeInteractionExcel::VT_IGNOREIFUNOBTAINEDSTARTDATE, None)}
  }
  #[inline]
  pub fn IgnoreIfUnobtainedEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CafeInteractionExcel::VT_IGNOREIFUNOBTAINEDENDDATE, None)}
  }
  #[inline]
  pub fn BubbleType(&self) -> Option<flatbuffers::Vector<'a, BubbleType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, BubbleType>>>(CafeInteractionExcel::VT_BUBBLETYPE, None)}
  }
  #[inline]
  pub fn BubbleDuration(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CafeInteractionExcel::VT_BUBBLEDURATION, None)}
  }
  #[inline]
  pub fn FavorEmoticonRewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CafeInteractionExcel::VT_FAVOREMOTICONREWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn FavorEmoticonRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeInteractionExcel::VT_FAVOREMOTICONREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorEmoticonRewardAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CafeInteractionExcel::VT_FAVOREMOTICONREWARDAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CafeCharacterState(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CafeInteractionExcel::VT_CAFECHARACTERSTATE, None)}
  }
}

impl flatbuffers::Verifiable for CafeInteractionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<bool>("IgnoreIfUnobtained", Self::VT_IGNOREIFUNOBTAINED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IgnoreIfUnobtainedStartDate", Self::VT_IGNOREIFUNOBTAINEDSTARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IgnoreIfUnobtainedEndDate", Self::VT_IGNOREIFUNOBTAINEDENDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, BubbleType>>>("BubbleType", Self::VT_BUBBLETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("BubbleDuration", Self::VT_BUBBLEDURATION, false)?
     .visit_field::<ParcelType>("FavorEmoticonRewardParcelType", Self::VT_FAVOREMOTICONREWARDPARCELTYPE, false)?
     .visit_field::<i64>("FavorEmoticonRewardId", Self::VT_FAVOREMOTICONREWARDID, false)?
     .visit_field::<i64>("FavorEmoticonRewardAmount", Self::VT_FAVOREMOTICONREWARDAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("CafeCharacterState", Self::VT_CAFECHARACTERSTATE, false)?
     .finish();
    Ok(())
  }
}
pub struct CafeInteractionExcelArgs<'a> {
    pub CharacterId: i64,
    pub IgnoreIfUnobtained: bool,
    pub IgnoreIfUnobtainedStartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IgnoreIfUnobtainedEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BubbleType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, BubbleType>>>,
    pub BubbleDuration: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub FavorEmoticonRewardParcelType: ParcelType,
    pub FavorEmoticonRewardId: i64,
    pub FavorEmoticonRewardAmount: i64,
    pub CafeCharacterState: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for CafeInteractionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CafeInteractionExcelArgs {
      CharacterId: 0,
      IgnoreIfUnobtained: false,
      IgnoreIfUnobtainedStartDate: None,
      IgnoreIfUnobtainedEndDate: None,
      BubbleType: None,
      BubbleDuration: None,
      FavorEmoticonRewardParcelType: ParcelType::None,
      FavorEmoticonRewardId: 0,
      FavorEmoticonRewardAmount: 0,
      CafeCharacterState: None,
    }
  }
}

impl Serialize for CafeInteractionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CafeInteractionExcel", 10)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("IgnoreIfUnobtained", &self.IgnoreIfUnobtained())?;
      if let Some(f) = self.IgnoreIfUnobtainedStartDate() {
        s.serialize_field("IgnoreIfUnobtainedStartDate", &f)?;
      } else {
        s.skip_field("IgnoreIfUnobtainedStartDate")?;
      }
      if let Some(f) = self.IgnoreIfUnobtainedEndDate() {
        s.serialize_field("IgnoreIfUnobtainedEndDate", &f)?;
      } else {
        s.skip_field("IgnoreIfUnobtainedEndDate")?;
      }
      if let Some(f) = self.BubbleType() {
        s.serialize_field("BubbleType", &f)?;
      } else {
        s.skip_field("BubbleType")?;
      }
      if let Some(f) = self.BubbleDuration() {
        s.serialize_field("BubbleDuration", &f)?;
      } else {
        s.skip_field("BubbleDuration")?;
      }
      s.serialize_field("FavorEmoticonRewardParcelType", &self.FavorEmoticonRewardParcelType())?;
      s.serialize_field("FavorEmoticonRewardId", &self.FavorEmoticonRewardId())?;
      s.serialize_field("FavorEmoticonRewardAmount", &self.FavorEmoticonRewardAmount())?;
      if let Some(f) = self.CafeCharacterState() {
        s.serialize_field("CafeCharacterState", &f)?;
      } else {
        s.skip_field("CafeCharacterState")?;
      }
    s.end()
  }
}

pub struct CafeInteractionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CafeInteractionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(CafeInteractionExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_IgnoreIfUnobtained(&mut self, IgnoreIfUnobtained: bool) {
    self.fbb_.push_slot::<bool>(CafeInteractionExcel::VT_IGNOREIFUNOBTAINED, IgnoreIfUnobtained, false);
  }
  #[inline]
  pub fn add_IgnoreIfUnobtainedStartDate(&mut self, IgnoreIfUnobtainedStartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CafeInteractionExcel::VT_IGNOREIFUNOBTAINEDSTARTDATE, IgnoreIfUnobtainedStartDate);
  }
  #[inline]
  pub fn add_IgnoreIfUnobtainedEndDate(&mut self, IgnoreIfUnobtainedEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CafeInteractionExcel::VT_IGNOREIFUNOBTAINEDENDDATE, IgnoreIfUnobtainedEndDate);
  }
  #[inline]
  pub fn add_BubbleType(&mut self, BubbleType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , BubbleType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CafeInteractionExcel::VT_BUBBLETYPE, BubbleType);
  }
  #[inline]
  pub fn add_BubbleDuration(&mut self, BubbleDuration: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CafeInteractionExcel::VT_BUBBLEDURATION, BubbleDuration);
  }
  #[inline]
  pub fn add_FavorEmoticonRewardParcelType(&mut self, FavorEmoticonRewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CafeInteractionExcel::VT_FAVOREMOTICONREWARDPARCELTYPE, FavorEmoticonRewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_FavorEmoticonRewardId(&mut self, FavorEmoticonRewardId: i64) {
    self.fbb_.push_slot::<i64>(CafeInteractionExcel::VT_FAVOREMOTICONREWARDID, FavorEmoticonRewardId, 0);
  }
  #[inline]
  pub fn add_FavorEmoticonRewardAmount(&mut self, FavorEmoticonRewardAmount: i64) {
    self.fbb_.push_slot::<i64>(CafeInteractionExcel::VT_FAVOREMOTICONREWARDAMOUNT, FavorEmoticonRewardAmount, 0);
  }
  #[inline]
  pub fn add_CafeCharacterState(&mut self, CafeCharacterState: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CafeInteractionExcel::VT_CAFECHARACTERSTATE, CafeCharacterState);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CafeInteractionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CafeInteractionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CafeInteractionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CafeInteractionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CafeInteractionExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("IgnoreIfUnobtained", &self.IgnoreIfUnobtained());
      ds.field("IgnoreIfUnobtainedStartDate", &self.IgnoreIfUnobtainedStartDate());
      ds.field("IgnoreIfUnobtainedEndDate", &self.IgnoreIfUnobtainedEndDate());
      ds.field("BubbleType", &self.BubbleType());
      ds.field("BubbleDuration", &self.BubbleDuration());
      ds.field("FavorEmoticonRewardParcelType", &self.FavorEmoticonRewardParcelType());
      ds.field("FavorEmoticonRewardId", &self.FavorEmoticonRewardId());
      ds.field("FavorEmoticonRewardAmount", &self.FavorEmoticonRewardAmount());
      ds.field("CafeCharacterState", &self.CafeCharacterState());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CafeInteractionExcelT {
  pub CharacterId: i64,
  pub IgnoreIfUnobtained: bool,
  pub IgnoreIfUnobtainedStartDate: Option<String>,
  pub IgnoreIfUnobtainedEndDate: Option<String>,
  pub BubbleType: Option<Vec<BubbleType>>,
  pub BubbleDuration: Option<Vec<i64>>,
  pub FavorEmoticonRewardParcelType: ParcelType,
  pub FavorEmoticonRewardId: i64,
  pub FavorEmoticonRewardAmount: i64,
  pub CafeCharacterState: Option<Vec<String>>,
}
impl Default for CafeInteractionExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      IgnoreIfUnobtained: false,
      IgnoreIfUnobtainedStartDate: None,
      IgnoreIfUnobtainedEndDate: None,
      BubbleType: None,
      BubbleDuration: None,
      FavorEmoticonRewardParcelType: ParcelType::None,
      FavorEmoticonRewardId: 0,
      FavorEmoticonRewardAmount: 0,
      CafeCharacterState: None,
    }
  }
}
impl CafeInteractionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CafeInteractionExcel<'b>> {
    let CharacterId = self.CharacterId;
    let IgnoreIfUnobtained = self.IgnoreIfUnobtained;
    let IgnoreIfUnobtainedStartDate = self.IgnoreIfUnobtainedStartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IgnoreIfUnobtainedEndDate = self.IgnoreIfUnobtainedEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BubbleType = self.BubbleType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let BubbleDuration = self.BubbleDuration.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let FavorEmoticonRewardParcelType = self.FavorEmoticonRewardParcelType;
    let FavorEmoticonRewardId = self.FavorEmoticonRewardId;
    let FavorEmoticonRewardAmount = self.FavorEmoticonRewardAmount;
    let CafeCharacterState = self.CafeCharacterState.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    CafeInteractionExcel::create(_fbb, &CafeInteractionExcelArgs{
      CharacterId,
      IgnoreIfUnobtained,
      IgnoreIfUnobtainedStartDate,
      IgnoreIfUnobtainedEndDate,
      BubbleType,
      BubbleDuration,
      FavorEmoticonRewardParcelType,
      FavorEmoticonRewardId,
      FavorEmoticonRewardAmount,
      CafeCharacterState,
    })
  }
}
