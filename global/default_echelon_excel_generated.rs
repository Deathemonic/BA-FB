// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DefaultEchelonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DefaultEchelonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DefaultEchelonExcel<'a> {
  type Inner = DefaultEchelonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DefaultEchelonExcel<'a> {
  pub const VT_ECHLONID: flatbuffers::VOffsetT = 4;
  pub const VT_LEADERID: flatbuffers::VOffsetT = 6;
  pub const VT_MAINID: flatbuffers::VOffsetT = 8;
  pub const VT_SUPPORTID: flatbuffers::VOffsetT = 10;
  pub const VT_TSSID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DefaultEchelonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DefaultEchelonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<DefaultEchelonExcel<'bldr>> {
    let mut builder = DefaultEchelonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"DefaultEchelon");
      let x = args.TssId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TssId(x);
      let x = args.LeaderId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LeaderId(x);
      if let Some(x) = args.supportId {
        builder.add_supportId(x);
      }
      if let Some(x) = args.mainId {
        builder.add_mainId(x);
      }
      let x = args.EchlonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EchlonId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> DefaultEchelonExcelT {
    let key = table_encryption_service::create_key(b"DefaultEchelon");
      let EchlonId = self.EchlonId();
      let LeaderId = self.LeaderId();
    let mainId = self.mainId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let supportId = self.supportId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let TssId = self.TssId();
    DefaultEchelonExcelT {
      EchlonId,
      LeaderId,
      mainId,
      supportId,
      TssId,
    }
  }

  #[inline]
  pub fn EchlonId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DefaultEchelonExcel::VT_ECHLONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LeaderId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DefaultEchelonExcel::VT_LEADERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn mainId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(DefaultEchelonExcel::VT_MAINID, None)}
  }
  #[inline]
  pub fn supportId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(DefaultEchelonExcel::VT_SUPPORTID, None)}
  }
  #[inline]
  pub fn TssId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DefaultEchelonExcel::VT_TSSID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for DefaultEchelonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("EchlonId", Self::VT_ECHLONID, false)?
     .visit_field::<i64>("LeaderId", Self::VT_LEADERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("mainId", Self::VT_MAINID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("supportId", Self::VT_SUPPORTID, false)?
     .visit_field::<i64>("TssId", Self::VT_TSSID, false)?
     .finish();
    Ok(())
  }
}
pub struct DefaultEchelonExcelArgs<'a> {
    pub EchlonId: i32,
    pub LeaderId: i64,
    pub mainId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub supportId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub TssId: i64,
}
impl<'a> Default for DefaultEchelonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    DefaultEchelonExcelArgs {
      EchlonId: 0,
      LeaderId: 0,
      mainId: None,
      supportId: None,
      TssId: 0,
    }
  }
}

impl Serialize for DefaultEchelonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("DefaultEchelonExcel", 5)?;
      s.serialize_field("EchlonId", &self.EchlonId())?;
      s.serialize_field("LeaderId", &self.LeaderId())?;
      if let Some(f) = self.mainId() {
        s.serialize_field("mainId", &f)?;
      } else {
        s.skip_field("mainId")?;
      }
      if let Some(f) = self.supportId() {
        s.serialize_field("supportId", &f)?;
      } else {
        s.skip_field("supportId")?;
      }
      s.serialize_field("TssId", &self.TssId())?;
    s.end()
  }
}

pub struct DefaultEchelonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DefaultEchelonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EchlonId(&mut self, EchlonId: i32) {
    self.fbb_.push_slot::<i32>(DefaultEchelonExcel::VT_ECHLONID, EchlonId, 0);
  }
  #[inline]
  pub fn add_LeaderId(&mut self, LeaderId: i64) {
    self.fbb_.push_slot::<i64>(DefaultEchelonExcel::VT_LEADERID, LeaderId, 0);
  }
  #[inline]
  pub fn add_mainId(&mut self, mainId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DefaultEchelonExcel::VT_MAINID, mainId);
  }
  #[inline]
  pub fn add_supportId(&mut self, supportId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DefaultEchelonExcel::VT_SUPPORTID, supportId);
  }
  #[inline]
  pub fn add_TssId(&mut self, TssId: i64) {
    self.fbb_.push_slot::<i64>(DefaultEchelonExcel::VT_TSSID, TssId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DefaultEchelonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DefaultEchelonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DefaultEchelonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DefaultEchelonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DefaultEchelonExcel");
      ds.field("EchlonId", &self.EchlonId());
      ds.field("LeaderId", &self.LeaderId());
      ds.field("mainId", &self.mainId());
      ds.field("supportId", &self.supportId());
      ds.field("TssId", &self.TssId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DefaultEchelonExcelT {
  pub EchlonId: i32,
  pub LeaderId: i64,
  pub mainId: Option<Vec<i64>>,
  pub supportId: Option<Vec<i64>>,
  pub TssId: i64,
}
impl Default for DefaultEchelonExcelT {
  fn default() -> Self {
    Self {
      EchlonId: 0,
      LeaderId: 0,
      mainId: None,
      supportId: None,
      TssId: 0,
    }
  }
}
impl DefaultEchelonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DefaultEchelonExcel<'b>> {
    let EchlonId = self.EchlonId;
    let LeaderId = self.LeaderId;
    let mainId = self.mainId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let supportId = self.supportId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let TssId = self.TssId;
    DefaultEchelonExcel::create(_fbb, &DefaultEchelonExcelArgs{
      EchlonId,
      LeaderId,
      mainId,
      supportId,
      TssId,
    })
  }
}
