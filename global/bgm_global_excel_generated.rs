// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BGM_GlobalExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BGM_GlobalExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BGM_GlobalExcel<'a> {
  type Inner = BGM_GlobalExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BGM_GlobalExcel<'a> {
  pub const VT_GROUPBGMID: flatbuffers::VOffsetT = 4;
  pub const VT_BGMIDKR: flatbuffers::VOffsetT = 6;
  pub const VT_BGMIDJP: flatbuffers::VOffsetT = 8;
  pub const VT_BGMIDTH: flatbuffers::VOffsetT = 10;
  pub const VT_BGMIDTW: flatbuffers::VOffsetT = 12;
  pub const VT_BGMIDEN: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BGM_GlobalExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BGM_GlobalExcelArgs
  ) -> flatbuffers::WIPOffset<BGM_GlobalExcel<'bldr>> {
    let mut builder = BGM_GlobalExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BGM_Global");
      let x = args.BGMIdEn;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMIdEn(x);
      let x = args.BGMIdTw;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMIdTw(x);
      let x = args.BGMIdTh;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMIdTh(x);
      let x = args.BGMIdJp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMIdJp(x);
      let x = args.BGMIdKr;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMIdKr(x);
      let x = args.GroupBGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupBGMId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BGM_GlobalExcelT {
    let key = table_encryption_service::create_key(b"BGM_Global");
      let GroupBGMId = self.GroupBGMId();
      let BGMIdKr = self.BGMIdKr();
      let BGMIdJp = self.BGMIdJp();
      let BGMIdTh = self.BGMIdTh();
      let BGMIdTw = self.BGMIdTw();
      let BGMIdEn = self.BGMIdEn();
    BGM_GlobalExcelT {
      GroupBGMId,
      BGMIdKr,
      BGMIdJp,
      BGMIdTh,
      BGMIdTw,
      BGMIdEn,
    }
  }

  #[inline]
  pub fn GroupBGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGM_GlobalExcel::VT_GROUPBGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMIdKr(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGM_GlobalExcel::VT_BGMIDKR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMIdJp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGM_GlobalExcel::VT_BGMIDJP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMIdTh(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGM_GlobalExcel::VT_BGMIDTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMIdTw(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGM_GlobalExcel::VT_BGMIDTW, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMIdEn(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGM_GlobalExcel::VT_BGMIDEN, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BGM_GlobalExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupBGMId", Self::VT_GROUPBGMID, false)?
     .visit_field::<i64>("BGMIdKr", Self::VT_BGMIDKR, false)?
     .visit_field::<i64>("BGMIdJp", Self::VT_BGMIDJP, false)?
     .visit_field::<i64>("BGMIdTh", Self::VT_BGMIDTH, false)?
     .visit_field::<i64>("BGMIdTw", Self::VT_BGMIDTW, false)?
     .visit_field::<i64>("BGMIdEn", Self::VT_BGMIDEN, false)?
     .finish();
    Ok(())
  }
}
pub struct BGM_GlobalExcelArgs {
    pub GroupBGMId: i64,
    pub BGMIdKr: i64,
    pub BGMIdJp: i64,
    pub BGMIdTh: i64,
    pub BGMIdTw: i64,
    pub BGMIdEn: i64,
}
impl<'a> Default for BGM_GlobalExcelArgs {
  #[inline]
  fn default() -> Self {
    BGM_GlobalExcelArgs {
      GroupBGMId: 0,
      BGMIdKr: 0,
      BGMIdJp: 0,
      BGMIdTh: 0,
      BGMIdTw: 0,
      BGMIdEn: 0,
    }
  }
}

impl Serialize for BGM_GlobalExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BGM_GlobalExcel", 6)?;
      s.serialize_field("GroupBGMId", &self.GroupBGMId())?;
      s.serialize_field("BGMIdKr", &self.BGMIdKr())?;
      s.serialize_field("BGMIdJp", &self.BGMIdJp())?;
      s.serialize_field("BGMIdTh", &self.BGMIdTh())?;
      s.serialize_field("BGMIdTw", &self.BGMIdTw())?;
      s.serialize_field("BGMIdEn", &self.BGMIdEn())?;
    s.end()
  }
}

pub struct BGM_GlobalExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BGM_GlobalExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupBGMId(&mut self, GroupBGMId: i64) {
    self.fbb_.push_slot::<i64>(BGM_GlobalExcel::VT_GROUPBGMID, GroupBGMId, 0);
  }
  #[inline]
  pub fn add_BGMIdKr(&mut self, BGMIdKr: i64) {
    self.fbb_.push_slot::<i64>(BGM_GlobalExcel::VT_BGMIDKR, BGMIdKr, 0);
  }
  #[inline]
  pub fn add_BGMIdJp(&mut self, BGMIdJp: i64) {
    self.fbb_.push_slot::<i64>(BGM_GlobalExcel::VT_BGMIDJP, BGMIdJp, 0);
  }
  #[inline]
  pub fn add_BGMIdTh(&mut self, BGMIdTh: i64) {
    self.fbb_.push_slot::<i64>(BGM_GlobalExcel::VT_BGMIDTH, BGMIdTh, 0);
  }
  #[inline]
  pub fn add_BGMIdTw(&mut self, BGMIdTw: i64) {
    self.fbb_.push_slot::<i64>(BGM_GlobalExcel::VT_BGMIDTW, BGMIdTw, 0);
  }
  #[inline]
  pub fn add_BGMIdEn(&mut self, BGMIdEn: i64) {
    self.fbb_.push_slot::<i64>(BGM_GlobalExcel::VT_BGMIDEN, BGMIdEn, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BGM_GlobalExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BGM_GlobalExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BGM_GlobalExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BGM_GlobalExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BGM_GlobalExcel");
      ds.field("GroupBGMId", &self.GroupBGMId());
      ds.field("BGMIdKr", &self.BGMIdKr());
      ds.field("BGMIdJp", &self.BGMIdJp());
      ds.field("BGMIdTh", &self.BGMIdTh());
      ds.field("BGMIdTw", &self.BGMIdTw());
      ds.field("BGMIdEn", &self.BGMIdEn());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BGM_GlobalExcelT {
  pub GroupBGMId: i64,
  pub BGMIdKr: i64,
  pub BGMIdJp: i64,
  pub BGMIdTh: i64,
  pub BGMIdTw: i64,
  pub BGMIdEn: i64,
}
impl Default for BGM_GlobalExcelT {
  fn default() -> Self {
    Self {
      GroupBGMId: 0,
      BGMIdKr: 0,
      BGMIdJp: 0,
      BGMIdTh: 0,
      BGMIdTw: 0,
      BGMIdEn: 0,
    }
  }
}
impl BGM_GlobalExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BGM_GlobalExcel<'b>> {
    let GroupBGMId = self.GroupBGMId;
    let BGMIdKr = self.BGMIdKr;
    let BGMIdJp = self.BGMIdJp;
    let BGMIdTh = self.BGMIdTh;
    let BGMIdTw = self.BGMIdTw;
    let BGMIdEn = self.BGMIdEn;
    BGM_GlobalExcel::create(_fbb, &BGM_GlobalExcelArgs{
      GroupBGMId,
      BGMIdKr,
      BGMIdJp,
      BGMIdTh,
      BGMIdTw,
      BGMIdEn,
    })
  }
}
