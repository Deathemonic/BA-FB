// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BlendInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlendInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlendInfo<'a> {
  type Inner = BlendInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BlendInfo<'a> {
  pub const VT_FROM: flatbuffers::VOffsetT = 4;
  pub const VT_TO: flatbuffers::VOffsetT = 6;
  pub const VT_BLEND: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BlendInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BlendInfoArgs
  ) -> flatbuffers::WIPOffset<BlendInfo<'bldr>> {
    let mut builder = BlendInfoBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Blen");
      let x = args.blend;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_blend(x);
      let x = args.To;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_To(x);
      let x = args.From;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_From(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BlendInfoT {
    let key = table_encryption_service::create_key(b"Blen");
      let From = self.From();
      let To = self.To();
      let blend = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.blend(), &key)
      } else {
        self.blend()
      };
    BlendInfoT {
      From,
      To,
      blend,
    }
  }

  #[inline]
  pub fn From(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BlendInfo::VT_FROM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn To(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BlendInfo::VT_TO, Some(0)).unwrap()}
  }
  #[inline]
  pub fn blend(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(BlendInfo::VT_BLEND, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BlendInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("From", Self::VT_FROM, false)?
     .visit_field::<i32>("To", Self::VT_TO, false)?
     .visit_field::<f32>("blend", Self::VT_BLEND, false)?
     .finish();
    Ok(())
  }
}
pub struct BlendInfoArgs {
    pub From: i32,
    pub To: i32,
    pub blend: f32,
}
impl<'a> Default for BlendInfoArgs {
  #[inline]
  fn default() -> Self {
    BlendInfoArgs {
      From: 0,
      To: 0,
      blend: 0.0,
    }
  }
}

impl Serialize for BlendInfo<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BlendInfo", 3)?;
      s.serialize_field("From", &self.From())?;
      s.serialize_field("To", &self.To())?;
      s.serialize_field("blend", &self.blend())?;
    s.end()
  }
}

pub struct BlendInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlendInfoBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_From(&mut self, From: i32) {
    self.fbb_.push_slot::<i32>(BlendInfo::VT_FROM, From, 0);
  }
  #[inline]
  pub fn add_To(&mut self, To: i32) {
    self.fbb_.push_slot::<i32>(BlendInfo::VT_TO, To, 0);
  }
  #[inline]
  pub fn add_blend(&mut self, blend: f32) {
    self.fbb_.push_slot::<f32>(BlendInfo::VT_BLEND, blend, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlendInfoBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BlendInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BlendInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BlendInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BlendInfo");
      ds.field("From", &self.From());
      ds.field("To", &self.To());
      ds.field("blend", &self.blend());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BlendInfoT {
  pub From: i32,
  pub To: i32,
  pub blend: f32,
}
impl Default for BlendInfoT {
  fn default() -> Self {
    Self {
      From: 0,
      To: 0,
      blend: 0.0,
    }
  }
}
impl BlendInfoT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BlendInfo<'b>> {
    let From = self.From;
    let To = self.To;
    let blend = self.blend;
    BlendInfo::create(_fbb, &BlendInfoArgs{
      From,
      To,
      blend,
    })
  }
}
