// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGEncounterExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGEncounterExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGEncounterExcel<'a> {
  type Inner = MinigameTBGEncounterExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGEncounterExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_ALLTHEMA: flatbuffers::VOffsetT = 8;
  pub const VT_THEMAINDEX: flatbuffers::VOffsetT = 10;
  pub const VT_THEMATYPE: flatbuffers::VOffsetT = 12;
  pub const VT_OBJECTTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_ENEMYIMAGEPATH: flatbuffers::VOffsetT = 16;
  pub const VT_ENEMYPREFABNAME: flatbuffers::VOffsetT = 18;
  pub const VT_ENEMYNAMELOCALIZE: flatbuffers::VOffsetT = 20;
  pub const VT_OPTIONGROUPID: flatbuffers::VOffsetT = 22;
  pub const VT_REWARDHIDE: flatbuffers::VOffsetT = 24;
  pub const VT_ENCOUNTERTITLELOCALIZE: flatbuffers::VOffsetT = 26;
  pub const VT_STORYIMAGEPATH: flatbuffers::VOffsetT = 28;
  pub const VT_BEFORESTORYLOCALIZE: flatbuffers::VOffsetT = 30;
  pub const VT_BEFORESTORYOPTION1LOCALIZE: flatbuffers::VOffsetT = 32;
  pub const VT_BEFORESTORYOPTION2LOCALIZE: flatbuffers::VOffsetT = 34;
  pub const VT_BEFORESTORYOPTION3LOCALIZE: flatbuffers::VOffsetT = 36;
  pub const VT_ALLYATTACKLOCALIZE: flatbuffers::VOffsetT = 38;
  pub const VT_ENEMYATTACKLOCALIZE: flatbuffers::VOffsetT = 40;
  pub const VT_ATTACKDEFENCELOCALIZE: flatbuffers::VOffsetT = 42;
  pub const VT_CLEARSTORYLOCALIZE: flatbuffers::VOffsetT = 44;
  pub const VT_DEFEATSTORYLOCALIZE: flatbuffers::VOffsetT = 46;
  pub const VT_RUNAWAYSTORYLOCALIZE: flatbuffers::VOffsetT = 48;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGEncounterExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGEncounterExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameTBGEncounterExcel<'bldr>> {
    let mut builder = MinigameTBGEncounterExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGEncounter");
      let x = args.OptionGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OptionGroupId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.RunawayStoryLocalize {
        builder.add_RunawayStoryLocalize(x);
      }
      if let Some(x) = args.DefeatStoryLocalize {
        builder.add_DefeatStoryLocalize(x);
      }
      if let Some(x) = args.ClearStoryLocalize {
        builder.add_ClearStoryLocalize(x);
      }
      if let Some(x) = args.AttackDefenceLocalize {
        builder.add_AttackDefenceLocalize(x);
      }
      if let Some(x) = args.EnemyAttackLocalize {
        builder.add_EnemyAttackLocalize(x);
      }
      if let Some(x) = args.AllyAttackLocalize {
        builder.add_AllyAttackLocalize(x);
      }
      if let Some(x) = args.BeforeStoryOption3Localize {
        builder.add_BeforeStoryOption3Localize(x);
      }
      if let Some(x) = args.BeforeStoryOption2Localize {
        builder.add_BeforeStoryOption2Localize(x);
      }
      if let Some(x) = args.BeforeStoryOption1Localize {
        builder.add_BeforeStoryOption1Localize(x);
      }
      if let Some(x) = args.BeforeStoryLocalize {
        builder.add_BeforeStoryLocalize(x);
      }
      if let Some(x) = args.StoryImagePath {
        builder.add_StoryImagePath(x);
      }
      if let Some(x) = args.EncounterTitleLocalize {
        builder.add_EncounterTitleLocalize(x);
      }
      if let Some(x) = args.EnemyNameLocalize {
        builder.add_EnemyNameLocalize(x);
      }
      if let Some(x) = args.EnemyPrefabName {
        builder.add_EnemyPrefabName(x);
      }
      if let Some(x) = args.EnemyImagePath {
        builder.add_EnemyImagePath(x);
      }
      let x = args.ObjectType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ObjectType(x);
      let x = args.ThemaType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ThemaType(x);
      let x = args.ThemaIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ThemaIndex(x);
      builder.add_RewardHide(args.RewardHide);
      builder.add_AllThema(args.AllThema);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGEncounterExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGEncounter");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let AllThema = self.AllThema();
      let ThemaIndex = self.ThemaIndex();
      let ThemaType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ThemaType(), &key)
      } else {
        self.ThemaType()
      };
      let ObjectType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ObjectType(), &key)
      } else {
        self.ObjectType()
      };
    let EnemyImagePath = self.EnemyImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EnemyPrefabName = self.EnemyPrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EnemyNameLocalize = self.EnemyNameLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let OptionGroupId = self.OptionGroupId();
      let RewardHide = self.RewardHide();
    let EncounterTitleLocalize = self.EncounterTitleLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StoryImagePath = self.StoryImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BeforeStoryLocalize = self.BeforeStoryLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BeforeStoryOption1Localize = self.BeforeStoryOption1Localize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BeforeStoryOption2Localize = self.BeforeStoryOption2Localize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BeforeStoryOption3Localize = self.BeforeStoryOption3Localize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AllyAttackLocalize = self.AllyAttackLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EnemyAttackLocalize = self.EnemyAttackLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AttackDefenceLocalize = self.AttackDefenceLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ClearStoryLocalize = self.ClearStoryLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DefeatStoryLocalize = self.DefeatStoryLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RunawayStoryLocalize = self.RunawayStoryLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MinigameTBGEncounterExcelT {
      EventContentId,
      UniqueId,
      AllThema,
      ThemaIndex,
      ThemaType,
      ObjectType,
      EnemyImagePath,
      EnemyPrefabName,
      EnemyNameLocalize,
      OptionGroupId,
      RewardHide,
      EncounterTitleLocalize,
      StoryImagePath,
      BeforeStoryLocalize,
      BeforeStoryOption1Localize,
      BeforeStoryOption2Localize,
      BeforeStoryOption3Localize,
      AllyAttackLocalize,
      EnemyAttackLocalize,
      AttackDefenceLocalize,
      ClearStoryLocalize,
      DefeatStoryLocalize,
      RunawayStoryLocalize,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AllThema(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameTBGEncounterExcel::VT_ALLTHEMA, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ThemaIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGEncounterExcel::VT_THEMAINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ThemaType(&self) -> TBGThemaType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TBGThemaType>(MinigameTBGEncounterExcel::VT_THEMATYPE, Some(TBGThemaType::None)).unwrap()}
  }
  #[inline]
  pub fn ObjectType(&self) -> TBGObjectType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TBGObjectType>(MinigameTBGEncounterExcel::VT_OBJECTTYPE, Some(TBGObjectType::None)).unwrap()}
  }
  #[inline]
  pub fn EnemyImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_ENEMYIMAGEPATH, None)}
  }
  #[inline]
  pub fn EnemyPrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_ENEMYPREFABNAME, None)}
  }
  #[inline]
  pub fn EnemyNameLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_ENEMYNAMELOCALIZE, None)}
  }
  #[inline]
  pub fn OptionGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterExcel::VT_OPTIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardHide(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameTBGEncounterExcel::VT_REWARDHIDE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EncounterTitleLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_ENCOUNTERTITLELOCALIZE, None)}
  }
  #[inline]
  pub fn StoryImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_STORYIMAGEPATH, None)}
  }
  #[inline]
  pub fn BeforeStoryLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_BEFORESTORYLOCALIZE, None)}
  }
  #[inline]
  pub fn BeforeStoryOption1Localize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_BEFORESTORYOPTION1LOCALIZE, None)}
  }
  #[inline]
  pub fn BeforeStoryOption2Localize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_BEFORESTORYOPTION2LOCALIZE, None)}
  }
  #[inline]
  pub fn BeforeStoryOption3Localize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_BEFORESTORYOPTION3LOCALIZE, None)}
  }
  #[inline]
  pub fn AllyAttackLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_ALLYATTACKLOCALIZE, None)}
  }
  #[inline]
  pub fn EnemyAttackLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_ENEMYATTACKLOCALIZE, None)}
  }
  #[inline]
  pub fn AttackDefenceLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_ATTACKDEFENCELOCALIZE, None)}
  }
  #[inline]
  pub fn ClearStoryLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_CLEARSTORYLOCALIZE, None)}
  }
  #[inline]
  pub fn DefeatStoryLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_DEFEATSTORYLOCALIZE, None)}
  }
  #[inline]
  pub fn RunawayStoryLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterExcel::VT_RUNAWAYSTORYLOCALIZE, None)}
  }
}

impl flatbuffers::Verifiable for MinigameTBGEncounterExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<bool>("AllThema", Self::VT_ALLTHEMA, false)?
     .visit_field::<i32>("ThemaIndex", Self::VT_THEMAINDEX, false)?
     .visit_field::<TBGThemaType>("ThemaType", Self::VT_THEMATYPE, false)?
     .visit_field::<TBGObjectType>("ObjectType", Self::VT_OBJECTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EnemyImagePath", Self::VT_ENEMYIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EnemyPrefabName", Self::VT_ENEMYPREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EnemyNameLocalize", Self::VT_ENEMYNAMELOCALIZE, false)?
     .visit_field::<i64>("OptionGroupId", Self::VT_OPTIONGROUPID, false)?
     .visit_field::<bool>("RewardHide", Self::VT_REWARDHIDE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EncounterTitleLocalize", Self::VT_ENCOUNTERTITLELOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StoryImagePath", Self::VT_STORYIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BeforeStoryLocalize", Self::VT_BEFORESTORYLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BeforeStoryOption1Localize", Self::VT_BEFORESTORYOPTION1LOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BeforeStoryOption2Localize", Self::VT_BEFORESTORYOPTION2LOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BeforeStoryOption3Localize", Self::VT_BEFORESTORYOPTION3LOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AllyAttackLocalize", Self::VT_ALLYATTACKLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EnemyAttackLocalize", Self::VT_ENEMYATTACKLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AttackDefenceLocalize", Self::VT_ATTACKDEFENCELOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ClearStoryLocalize", Self::VT_CLEARSTORYLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DefeatStoryLocalize", Self::VT_DEFEATSTORYLOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RunawayStoryLocalize", Self::VT_RUNAWAYSTORYLOCALIZE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGEncounterExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub AllThema: bool,
    pub ThemaIndex: i32,
    pub ThemaType: TBGThemaType,
    pub ObjectType: TBGObjectType,
    pub EnemyImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EnemyPrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EnemyNameLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OptionGroupId: i64,
    pub RewardHide: bool,
    pub EncounterTitleLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StoryImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BeforeStoryLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BeforeStoryOption1Localize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BeforeStoryOption2Localize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BeforeStoryOption3Localize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AllyAttackLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EnemyAttackLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AttackDefenceLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ClearStoryLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DefeatStoryLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RunawayStoryLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MinigameTBGEncounterExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameTBGEncounterExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      AllThema: false,
      ThemaIndex: 0,
      ThemaType: TBGThemaType::None,
      ObjectType: TBGObjectType::None,
      EnemyImagePath: None,
      EnemyPrefabName: None,
      EnemyNameLocalize: None,
      OptionGroupId: 0,
      RewardHide: false,
      EncounterTitleLocalize: None,
      StoryImagePath: None,
      BeforeStoryLocalize: None,
      BeforeStoryOption1Localize: None,
      BeforeStoryOption2Localize: None,
      BeforeStoryOption3Localize: None,
      AllyAttackLocalize: None,
      EnemyAttackLocalize: None,
      AttackDefenceLocalize: None,
      ClearStoryLocalize: None,
      DefeatStoryLocalize: None,
      RunawayStoryLocalize: None,
    }
  }
}

impl Serialize for MinigameTBGEncounterExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGEncounterExcel", 23)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("AllThema", &self.AllThema())?;
      s.serialize_field("ThemaIndex", &self.ThemaIndex())?;
      s.serialize_field("ThemaType", &self.ThemaType())?;
      s.serialize_field("ObjectType", &self.ObjectType())?;
      if let Some(f) = self.EnemyImagePath() {
        s.serialize_field("EnemyImagePath", &f)?;
      } else {
        s.skip_field("EnemyImagePath")?;
      }
      if let Some(f) = self.EnemyPrefabName() {
        s.serialize_field("EnemyPrefabName", &f)?;
      } else {
        s.skip_field("EnemyPrefabName")?;
      }
      if let Some(f) = self.EnemyNameLocalize() {
        s.serialize_field("EnemyNameLocalize", &f)?;
      } else {
        s.skip_field("EnemyNameLocalize")?;
      }
      s.serialize_field("OptionGroupId", &self.OptionGroupId())?;
      s.serialize_field("RewardHide", &self.RewardHide())?;
      if let Some(f) = self.EncounterTitleLocalize() {
        s.serialize_field("EncounterTitleLocalize", &f)?;
      } else {
        s.skip_field("EncounterTitleLocalize")?;
      }
      if let Some(f) = self.StoryImagePath() {
        s.serialize_field("StoryImagePath", &f)?;
      } else {
        s.skip_field("StoryImagePath")?;
      }
      if let Some(f) = self.BeforeStoryLocalize() {
        s.serialize_field("BeforeStoryLocalize", &f)?;
      } else {
        s.skip_field("BeforeStoryLocalize")?;
      }
      if let Some(f) = self.BeforeStoryOption1Localize() {
        s.serialize_field("BeforeStoryOption1Localize", &f)?;
      } else {
        s.skip_field("BeforeStoryOption1Localize")?;
      }
      if let Some(f) = self.BeforeStoryOption2Localize() {
        s.serialize_field("BeforeStoryOption2Localize", &f)?;
      } else {
        s.skip_field("BeforeStoryOption2Localize")?;
      }
      if let Some(f) = self.BeforeStoryOption3Localize() {
        s.serialize_field("BeforeStoryOption3Localize", &f)?;
      } else {
        s.skip_field("BeforeStoryOption3Localize")?;
      }
      if let Some(f) = self.AllyAttackLocalize() {
        s.serialize_field("AllyAttackLocalize", &f)?;
      } else {
        s.skip_field("AllyAttackLocalize")?;
      }
      if let Some(f) = self.EnemyAttackLocalize() {
        s.serialize_field("EnemyAttackLocalize", &f)?;
      } else {
        s.skip_field("EnemyAttackLocalize")?;
      }
      if let Some(f) = self.AttackDefenceLocalize() {
        s.serialize_field("AttackDefenceLocalize", &f)?;
      } else {
        s.skip_field("AttackDefenceLocalize")?;
      }
      if let Some(f) = self.ClearStoryLocalize() {
        s.serialize_field("ClearStoryLocalize", &f)?;
      } else {
        s.skip_field("ClearStoryLocalize")?;
      }
      if let Some(f) = self.DefeatStoryLocalize() {
        s.serialize_field("DefeatStoryLocalize", &f)?;
      } else {
        s.skip_field("DefeatStoryLocalize")?;
      }
      if let Some(f) = self.RunawayStoryLocalize() {
        s.serialize_field("RunawayStoryLocalize", &f)?;
      } else {
        s.skip_field("RunawayStoryLocalize")?;
      }
    s.end()
  }
}

pub struct MinigameTBGEncounterExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGEncounterExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_AllThema(&mut self, AllThema: bool) {
    self.fbb_.push_slot::<bool>(MinigameTBGEncounterExcel::VT_ALLTHEMA, AllThema, false);
  }
  #[inline]
  pub fn add_ThemaIndex(&mut self, ThemaIndex: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGEncounterExcel::VT_THEMAINDEX, ThemaIndex, 0);
  }
  #[inline]
  pub fn add_ThemaType(&mut self, ThemaType: TBGThemaType) {
    self.fbb_.push_slot::<TBGThemaType>(MinigameTBGEncounterExcel::VT_THEMATYPE, ThemaType, TBGThemaType::None);
  }
  #[inline]
  pub fn add_ObjectType(&mut self, ObjectType: TBGObjectType) {
    self.fbb_.push_slot::<TBGObjectType>(MinigameTBGEncounterExcel::VT_OBJECTTYPE, ObjectType, TBGObjectType::None);
  }
  #[inline]
  pub fn add_EnemyImagePath(&mut self, EnemyImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_ENEMYIMAGEPATH, EnemyImagePath);
  }
  #[inline]
  pub fn add_EnemyPrefabName(&mut self, EnemyPrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_ENEMYPREFABNAME, EnemyPrefabName);
  }
  #[inline]
  pub fn add_EnemyNameLocalize(&mut self, EnemyNameLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_ENEMYNAMELOCALIZE, EnemyNameLocalize);
  }
  #[inline]
  pub fn add_OptionGroupId(&mut self, OptionGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterExcel::VT_OPTIONGROUPID, OptionGroupId, 0);
  }
  #[inline]
  pub fn add_RewardHide(&mut self, RewardHide: bool) {
    self.fbb_.push_slot::<bool>(MinigameTBGEncounterExcel::VT_REWARDHIDE, RewardHide, false);
  }
  #[inline]
  pub fn add_EncounterTitleLocalize(&mut self, EncounterTitleLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_ENCOUNTERTITLELOCALIZE, EncounterTitleLocalize);
  }
  #[inline]
  pub fn add_StoryImagePath(&mut self, StoryImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_STORYIMAGEPATH, StoryImagePath);
  }
  #[inline]
  pub fn add_BeforeStoryLocalize(&mut self, BeforeStoryLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_BEFORESTORYLOCALIZE, BeforeStoryLocalize);
  }
  #[inline]
  pub fn add_BeforeStoryOption1Localize(&mut self, BeforeStoryOption1Localize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_BEFORESTORYOPTION1LOCALIZE, BeforeStoryOption1Localize);
  }
  #[inline]
  pub fn add_BeforeStoryOption2Localize(&mut self, BeforeStoryOption2Localize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_BEFORESTORYOPTION2LOCALIZE, BeforeStoryOption2Localize);
  }
  #[inline]
  pub fn add_BeforeStoryOption3Localize(&mut self, BeforeStoryOption3Localize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_BEFORESTORYOPTION3LOCALIZE, BeforeStoryOption3Localize);
  }
  #[inline]
  pub fn add_AllyAttackLocalize(&mut self, AllyAttackLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_ALLYATTACKLOCALIZE, AllyAttackLocalize);
  }
  #[inline]
  pub fn add_EnemyAttackLocalize(&mut self, EnemyAttackLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_ENEMYATTACKLOCALIZE, EnemyAttackLocalize);
  }
  #[inline]
  pub fn add_AttackDefenceLocalize(&mut self, AttackDefenceLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_ATTACKDEFENCELOCALIZE, AttackDefenceLocalize);
  }
  #[inline]
  pub fn add_ClearStoryLocalize(&mut self, ClearStoryLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_CLEARSTORYLOCALIZE, ClearStoryLocalize);
  }
  #[inline]
  pub fn add_DefeatStoryLocalize(&mut self, DefeatStoryLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_DEFEATSTORYLOCALIZE, DefeatStoryLocalize);
  }
  #[inline]
  pub fn add_RunawayStoryLocalize(&mut self, RunawayStoryLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterExcel::VT_RUNAWAYSTORYLOCALIZE, RunawayStoryLocalize);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGEncounterExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGEncounterExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGEncounterExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGEncounterExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGEncounterExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("AllThema", &self.AllThema());
      ds.field("ThemaIndex", &self.ThemaIndex());
      ds.field("ThemaType", &self.ThemaType());
      ds.field("ObjectType", &self.ObjectType());
      ds.field("EnemyImagePath", &self.EnemyImagePath());
      ds.field("EnemyPrefabName", &self.EnemyPrefabName());
      ds.field("EnemyNameLocalize", &self.EnemyNameLocalize());
      ds.field("OptionGroupId", &self.OptionGroupId());
      ds.field("RewardHide", &self.RewardHide());
      ds.field("EncounterTitleLocalize", &self.EncounterTitleLocalize());
      ds.field("StoryImagePath", &self.StoryImagePath());
      ds.field("BeforeStoryLocalize", &self.BeforeStoryLocalize());
      ds.field("BeforeStoryOption1Localize", &self.BeforeStoryOption1Localize());
      ds.field("BeforeStoryOption2Localize", &self.BeforeStoryOption2Localize());
      ds.field("BeforeStoryOption3Localize", &self.BeforeStoryOption3Localize());
      ds.field("AllyAttackLocalize", &self.AllyAttackLocalize());
      ds.field("EnemyAttackLocalize", &self.EnemyAttackLocalize());
      ds.field("AttackDefenceLocalize", &self.AttackDefenceLocalize());
      ds.field("ClearStoryLocalize", &self.ClearStoryLocalize());
      ds.field("DefeatStoryLocalize", &self.DefeatStoryLocalize());
      ds.field("RunawayStoryLocalize", &self.RunawayStoryLocalize());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGEncounterExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub AllThema: bool,
  pub ThemaIndex: i32,
  pub ThemaType: TBGThemaType,
  pub ObjectType: TBGObjectType,
  pub EnemyImagePath: Option<String>,
  pub EnemyPrefabName: Option<String>,
  pub EnemyNameLocalize: Option<String>,
  pub OptionGroupId: i64,
  pub RewardHide: bool,
  pub EncounterTitleLocalize: Option<String>,
  pub StoryImagePath: Option<String>,
  pub BeforeStoryLocalize: Option<String>,
  pub BeforeStoryOption1Localize: Option<String>,
  pub BeforeStoryOption2Localize: Option<String>,
  pub BeforeStoryOption3Localize: Option<String>,
  pub AllyAttackLocalize: Option<String>,
  pub EnemyAttackLocalize: Option<String>,
  pub AttackDefenceLocalize: Option<String>,
  pub ClearStoryLocalize: Option<String>,
  pub DefeatStoryLocalize: Option<String>,
  pub RunawayStoryLocalize: Option<String>,
}
impl Default for MinigameTBGEncounterExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      AllThema: false,
      ThemaIndex: 0,
      ThemaType: TBGThemaType::None,
      ObjectType: TBGObjectType::None,
      EnemyImagePath: None,
      EnemyPrefabName: None,
      EnemyNameLocalize: None,
      OptionGroupId: 0,
      RewardHide: false,
      EncounterTitleLocalize: None,
      StoryImagePath: None,
      BeforeStoryLocalize: None,
      BeforeStoryOption1Localize: None,
      BeforeStoryOption2Localize: None,
      BeforeStoryOption3Localize: None,
      AllyAttackLocalize: None,
      EnemyAttackLocalize: None,
      AttackDefenceLocalize: None,
      ClearStoryLocalize: None,
      DefeatStoryLocalize: None,
      RunawayStoryLocalize: None,
    }
  }
}
impl MinigameTBGEncounterExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGEncounterExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let AllThema = self.AllThema;
    let ThemaIndex = self.ThemaIndex;
    let ThemaType = self.ThemaType;
    let ObjectType = self.ObjectType;
    let EnemyImagePath = self.EnemyImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EnemyPrefabName = self.EnemyPrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EnemyNameLocalize = self.EnemyNameLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OptionGroupId = self.OptionGroupId;
    let RewardHide = self.RewardHide;
    let EncounterTitleLocalize = self.EncounterTitleLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StoryImagePath = self.StoryImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BeforeStoryLocalize = self.BeforeStoryLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BeforeStoryOption1Localize = self.BeforeStoryOption1Localize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BeforeStoryOption2Localize = self.BeforeStoryOption2Localize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BeforeStoryOption3Localize = self.BeforeStoryOption3Localize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AllyAttackLocalize = self.AllyAttackLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EnemyAttackLocalize = self.EnemyAttackLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AttackDefenceLocalize = self.AttackDefenceLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ClearStoryLocalize = self.ClearStoryLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DefeatStoryLocalize = self.DefeatStoryLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RunawayStoryLocalize = self.RunawayStoryLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MinigameTBGEncounterExcel::create(_fbb, &MinigameTBGEncounterExcelArgs{
      EventContentId,
      UniqueId,
      AllThema,
      ThemaIndex,
      ThemaType,
      ObjectType,
      EnemyImagePath,
      EnemyPrefabName,
      EnemyNameLocalize,
      OptionGroupId,
      RewardHide,
      EncounterTitleLocalize,
      StoryImagePath,
      BeforeStoryLocalize,
      BeforeStoryOption1Localize,
      BeforeStoryOption2Localize,
      BeforeStoryOption3Localize,
      AllyAttackLocalize,
      EnemyAttackLocalize,
      AttackDefenceLocalize,
      ClearStoryLocalize,
      DefeatStoryLocalize,
      RunawayStoryLocalize,
    })
  }
}
