// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SpecialLobbyIllustExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SpecialLobbyIllustExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpecialLobbyIllustExcel<'a> {
  type Inner = SpecialLobbyIllustExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpecialLobbyIllustExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_DEVNAME: flatbuffers::VOffsetT = 6;
  pub const VT_CHARACTERCOSTUMEUNIQUEID: flatbuffers::VOffsetT = 8;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 10;
  pub const VT_SLOTTEXTURENAME: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDTEXTURENAME: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpecialLobbyIllustExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SpecialLobbyIllustExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<SpecialLobbyIllustExcel<'bldr>> {
    let mut builder = SpecialLobbyIllustExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"SpecialLobbyIllust");
      let x = args.CharacterCostumeUniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterCostumeUniqueId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.RewardTextureName {
        builder.add_RewardTextureName(x);
      }
      if let Some(x) = args.SlotTextureName {
        builder.add_SlotTextureName(x);
      }
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      if let Some(x) = args.DevName {
        builder.add_DevName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> SpecialLobbyIllustExcelT {
    let key = table_encryption_service::create_key(b"SpecialLobbyIllust");
      let UniqueId = self.UniqueId();
    let DevName = self.DevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CharacterCostumeUniqueId = self.CharacterCostumeUniqueId();
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SlotTextureName = self.SlotTextureName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RewardTextureName = self.RewardTextureName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    SpecialLobbyIllustExcelT {
      UniqueId,
      DevName,
      CharacterCostumeUniqueId,
      PrefabName,
      SlotTextureName,
      RewardTextureName,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SpecialLobbyIllustExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpecialLobbyIllustExcel::VT_DEVNAME, None)}
  }
  #[inline]
  pub fn CharacterCostumeUniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SpecialLobbyIllustExcel::VT_CHARACTERCOSTUMEUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpecialLobbyIllustExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn SlotTextureName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpecialLobbyIllustExcel::VT_SLOTTEXTURENAME, None)}
  }
  #[inline]
  pub fn RewardTextureName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpecialLobbyIllustExcel::VT_REWARDTEXTURENAME, None)}
  }
}

impl flatbuffers::Verifiable for SpecialLobbyIllustExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DevName", Self::VT_DEVNAME, false)?
     .visit_field::<i64>("CharacterCostumeUniqueId", Self::VT_CHARACTERCOSTUMEUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SlotTextureName", Self::VT_SLOTTEXTURENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RewardTextureName", Self::VT_REWARDTEXTURENAME, false)?
     .finish();
    Ok(())
  }
}
pub struct SpecialLobbyIllustExcelArgs<'a> {
    pub UniqueId: i64,
    pub DevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterCostumeUniqueId: i64,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SlotTextureName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RewardTextureName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SpecialLobbyIllustExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpecialLobbyIllustExcelArgs {
      UniqueId: 0,
      DevName: None,
      CharacterCostumeUniqueId: 0,
      PrefabName: None,
      SlotTextureName: None,
      RewardTextureName: None,
    }
  }
}

impl Serialize for SpecialLobbyIllustExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SpecialLobbyIllustExcel", 6)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      if let Some(f) = self.DevName() {
        s.serialize_field("DevName", &f)?;
      } else {
        s.skip_field("DevName")?;
      }
      s.serialize_field("CharacterCostumeUniqueId", &self.CharacterCostumeUniqueId())?;
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      if let Some(f) = self.SlotTextureName() {
        s.serialize_field("SlotTextureName", &f)?;
      } else {
        s.skip_field("SlotTextureName")?;
      }
      if let Some(f) = self.RewardTextureName() {
        s.serialize_field("RewardTextureName", &f)?;
      } else {
        s.skip_field("RewardTextureName")?;
      }
    s.end()
  }
}

pub struct SpecialLobbyIllustExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SpecialLobbyIllustExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(SpecialLobbyIllustExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_DevName(&mut self, DevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpecialLobbyIllustExcel::VT_DEVNAME, DevName);
  }
  #[inline]
  pub fn add_CharacterCostumeUniqueId(&mut self, CharacterCostumeUniqueId: i64) {
    self.fbb_.push_slot::<i64>(SpecialLobbyIllustExcel::VT_CHARACTERCOSTUMEUNIQUEID, CharacterCostumeUniqueId, 0);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpecialLobbyIllustExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_SlotTextureName(&mut self, SlotTextureName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpecialLobbyIllustExcel::VT_SLOTTEXTURENAME, SlotTextureName);
  }
  #[inline]
  pub fn add_RewardTextureName(&mut self, RewardTextureName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpecialLobbyIllustExcel::VT_REWARDTEXTURENAME, RewardTextureName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SpecialLobbyIllustExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SpecialLobbyIllustExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpecialLobbyIllustExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpecialLobbyIllustExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpecialLobbyIllustExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("DevName", &self.DevName());
      ds.field("CharacterCostumeUniqueId", &self.CharacterCostumeUniqueId());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("SlotTextureName", &self.SlotTextureName());
      ds.field("RewardTextureName", &self.RewardTextureName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SpecialLobbyIllustExcelT {
  pub UniqueId: i64,
  pub DevName: Option<String>,
  pub CharacterCostumeUniqueId: i64,
  pub PrefabName: Option<String>,
  pub SlotTextureName: Option<String>,
  pub RewardTextureName: Option<String>,
}
impl Default for SpecialLobbyIllustExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      DevName: None,
      CharacterCostumeUniqueId: 0,
      PrefabName: None,
      SlotTextureName: None,
      RewardTextureName: None,
    }
  }
}
impl SpecialLobbyIllustExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SpecialLobbyIllustExcel<'b>> {
    let UniqueId = self.UniqueId;
    let DevName = self.DevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterCostumeUniqueId = self.CharacterCostumeUniqueId;
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SlotTextureName = self.SlotTextureName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RewardTextureName = self.RewardTextureName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SpecialLobbyIllustExcel::create(_fbb, &SpecialLobbyIllustExcelArgs{
      UniqueId,
      DevName,
      CharacterCostumeUniqueId,
      PrefabName,
      SlotTextureName,
      RewardTextureName,
    })
  }
}
