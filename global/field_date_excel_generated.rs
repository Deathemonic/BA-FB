// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldDateExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldDateExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldDateExcel<'a> {
  type Inner = FieldDateExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldDateExcel<'a> {
  pub const VT_SEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_OPENDATE: flatbuffers::VOffsetT = 8;
  pub const VT_DATELOCALIZEKEY: flatbuffers::VOffsetT = 10;
  pub const VT_ENTRYSCENEID: flatbuffers::VOffsetT = 12;
  pub const VT_STARTCONDITIONTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_STARTCONDITIONID: flatbuffers::VOffsetT = 16;
  pub const VT_ENDCONDITIONTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_ENDCONDITIONID: flatbuffers::VOffsetT = 20;
  pub const VT_ENDREADYCONDITIONTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_ENDREADYCONDITIONID: flatbuffers::VOffsetT = 24;
  pub const VT_OPENCONDITIONSTAGE: flatbuffers::VOffsetT = 26;
  pub const VT_CHARACTERICONPATH: flatbuffers::VOffsetT = 28;
  pub const VT_DATERESULTBGPATH: flatbuffers::VOffsetT = 30;
  pub const VT_DATERESULTSPINEPATH: flatbuffers::VOffsetT = 32;
  pub const VT_DATERESULTSPINEOFFSETX: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldDateExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldDateExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldDateExcel<'bldr>> {
    let mut builder = FieldDateExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldDate");
      let x = args.OpenConditionStage;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenConditionStage(x);
      let x = args.EndReadyConditionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EndReadyConditionId(x);
      let x = args.EndConditionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EndConditionId(x);
      let x = args.StartConditionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StartConditionId(x);
      let x = args.EntrySceneId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EntrySceneId(x);
      let x = args.OpenDate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenDate(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      let x = args.DateResultSpineOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_DateResultSpineOffsetX(x);
      if let Some(x) = args.DateResultSpinePath {
        builder.add_DateResultSpinePath(x);
      }
      if let Some(x) = args.DateResultBGPath {
        builder.add_DateResultBGPath(x);
      }
      if let Some(x) = args.CharacterIconPath {
        builder.add_CharacterIconPath(x);
      }
      let x = args.EndReadyConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EndReadyConditionType(x);
      let x = args.EndConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EndConditionType(x);
      let x = args.StartConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StartConditionType(x);
      if let Some(x) = args.DateLocalizeKey {
        builder.add_DateLocalizeKey(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> FieldDateExcelT {
    let key = table_encryption_service::create_key(b"FieldDate");
      let SeasonId = self.SeasonId();
      let UniqueId = self.UniqueId();
      let OpenDate = self.OpenDate();
    let DateLocalizeKey = self.DateLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EntrySceneId = self.EntrySceneId();
      let StartConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StartConditionType(), &key)
      } else {
        self.StartConditionType()
      };
      let StartConditionId = self.StartConditionId();
      let EndConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EndConditionType(), &key)
      } else {
        self.EndConditionType()
      };
      let EndConditionId = self.EndConditionId();
      let EndReadyConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EndReadyConditionType(), &key)
      } else {
        self.EndReadyConditionType()
      };
      let EndReadyConditionId = self.EndReadyConditionId();
      let OpenConditionStage = self.OpenConditionStage();
    let CharacterIconPath = self.CharacterIconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DateResultBGPath = self.DateResultBGPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DateResultSpinePath = self.DateResultSpinePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DateResultSpineOffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.DateResultSpineOffsetX(), &key)
      } else {
        self.DateResultSpineOffsetX()
      };
    FieldDateExcelT {
      SeasonId,
      UniqueId,
      OpenDate,
      DateLocalizeKey,
      EntrySceneId,
      StartConditionType,
      StartConditionId,
      EndConditionType,
      EndConditionId,
      EndReadyConditionType,
      EndReadyConditionId,
      OpenConditionStage,
      CharacterIconPath,
      DateResultBGPath,
      DateResultSpinePath,
      DateResultSpineOffsetX,
    }
  }

  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenDate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_OPENDATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DateLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldDateExcel::VT_DATELOCALIZEKEY, None)}
  }
  #[inline]
  pub fn EntrySceneId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_ENTRYSCENEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartConditionType(&self) -> FieldConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldConditionType>(FieldDateExcel::VT_STARTCONDITIONTYPE, Some(FieldConditionType::Invalid)).unwrap()}
  }
  #[inline]
  pub fn StartConditionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_STARTCONDITIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EndConditionType(&self) -> FieldConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldConditionType>(FieldDateExcel::VT_ENDCONDITIONTYPE, Some(FieldConditionType::Invalid)).unwrap()}
  }
  #[inline]
  pub fn EndConditionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_ENDCONDITIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EndReadyConditionType(&self) -> FieldConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldConditionType>(FieldDateExcel::VT_ENDREADYCONDITIONTYPE, Some(FieldConditionType::Invalid)).unwrap()}
  }
  #[inline]
  pub fn EndReadyConditionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_ENDREADYCONDITIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenConditionStage(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldDateExcel::VT_OPENCONDITIONSTAGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterIconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldDateExcel::VT_CHARACTERICONPATH, None)}
  }
  #[inline]
  pub fn DateResultBGPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldDateExcel::VT_DATERESULTBGPATH, None)}
  }
  #[inline]
  pub fn DateResultSpinePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldDateExcel::VT_DATERESULTSPINEPATH, None)}
  }
  #[inline]
  pub fn DateResultSpineOffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(FieldDateExcel::VT_DATERESULTSPINEOFFSETX, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FieldDateExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("OpenDate", Self::VT_OPENDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DateLocalizeKey", Self::VT_DATELOCALIZEKEY, false)?
     .visit_field::<i64>("EntrySceneId", Self::VT_ENTRYSCENEID, false)?
     .visit_field::<FieldConditionType>("StartConditionType", Self::VT_STARTCONDITIONTYPE, false)?
     .visit_field::<i64>("StartConditionId", Self::VT_STARTCONDITIONID, false)?
     .visit_field::<FieldConditionType>("EndConditionType", Self::VT_ENDCONDITIONTYPE, false)?
     .visit_field::<i64>("EndConditionId", Self::VT_ENDCONDITIONID, false)?
     .visit_field::<FieldConditionType>("EndReadyConditionType", Self::VT_ENDREADYCONDITIONTYPE, false)?
     .visit_field::<i64>("EndReadyConditionId", Self::VT_ENDREADYCONDITIONID, false)?
     .visit_field::<i64>("OpenConditionStage", Self::VT_OPENCONDITIONSTAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterIconPath", Self::VT_CHARACTERICONPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DateResultBGPath", Self::VT_DATERESULTBGPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DateResultSpinePath", Self::VT_DATERESULTSPINEPATH, false)?
     .visit_field::<f32>("DateResultSpineOffsetX", Self::VT_DATERESULTSPINEOFFSETX, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldDateExcelArgs<'a> {
    pub SeasonId: i64,
    pub UniqueId: i64,
    pub OpenDate: i64,
    pub DateLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EntrySceneId: i64,
    pub StartConditionType: FieldConditionType,
    pub StartConditionId: i64,
    pub EndConditionType: FieldConditionType,
    pub EndConditionId: i64,
    pub EndReadyConditionType: FieldConditionType,
    pub EndReadyConditionId: i64,
    pub OpenConditionStage: i64,
    pub CharacterIconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DateResultBGPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DateResultSpinePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DateResultSpineOffsetX: f32,
}
impl<'a> Default for FieldDateExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldDateExcelArgs {
      SeasonId: 0,
      UniqueId: 0,
      OpenDate: 0,
      DateLocalizeKey: None,
      EntrySceneId: 0,
      StartConditionType: FieldConditionType::Invalid,
      StartConditionId: 0,
      EndConditionType: FieldConditionType::Invalid,
      EndConditionId: 0,
      EndReadyConditionType: FieldConditionType::Invalid,
      EndReadyConditionId: 0,
      OpenConditionStage: 0,
      CharacterIconPath: None,
      DateResultBGPath: None,
      DateResultSpinePath: None,
      DateResultSpineOffsetX: 0.0,
    }
  }
}

impl Serialize for FieldDateExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldDateExcel", 16)?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("OpenDate", &self.OpenDate())?;
      if let Some(f) = self.DateLocalizeKey() {
        s.serialize_field("DateLocalizeKey", &f)?;
      } else {
        s.skip_field("DateLocalizeKey")?;
      }
      s.serialize_field("EntrySceneId", &self.EntrySceneId())?;
      s.serialize_field("StartConditionType", &self.StartConditionType())?;
      s.serialize_field("StartConditionId", &self.StartConditionId())?;
      s.serialize_field("EndConditionType", &self.EndConditionType())?;
      s.serialize_field("EndConditionId", &self.EndConditionId())?;
      s.serialize_field("EndReadyConditionType", &self.EndReadyConditionType())?;
      s.serialize_field("EndReadyConditionId", &self.EndReadyConditionId())?;
      s.serialize_field("OpenConditionStage", &self.OpenConditionStage())?;
      if let Some(f) = self.CharacterIconPath() {
        s.serialize_field("CharacterIconPath", &f)?;
      } else {
        s.skip_field("CharacterIconPath")?;
      }
      if let Some(f) = self.DateResultBGPath() {
        s.serialize_field("DateResultBGPath", &f)?;
      } else {
        s.skip_field("DateResultBGPath")?;
      }
      if let Some(f) = self.DateResultSpinePath() {
        s.serialize_field("DateResultSpinePath", &f)?;
      } else {
        s.skip_field("DateResultSpinePath")?;
      }
      s.serialize_field("DateResultSpineOffsetX", &self.DateResultSpineOffsetX())?;
    s.end()
  }
}

pub struct FieldDateExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldDateExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_OpenDate(&mut self, OpenDate: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_OPENDATE, OpenDate, 0);
  }
  #[inline]
  pub fn add_DateLocalizeKey(&mut self, DateLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldDateExcel::VT_DATELOCALIZEKEY, DateLocalizeKey);
  }
  #[inline]
  pub fn add_EntrySceneId(&mut self, EntrySceneId: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_ENTRYSCENEID, EntrySceneId, 0);
  }
  #[inline]
  pub fn add_StartConditionType(&mut self, StartConditionType: FieldConditionType) {
    self.fbb_.push_slot::<FieldConditionType>(FieldDateExcel::VT_STARTCONDITIONTYPE, StartConditionType, FieldConditionType::Invalid);
  }
  #[inline]
  pub fn add_StartConditionId(&mut self, StartConditionId: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_STARTCONDITIONID, StartConditionId, 0);
  }
  #[inline]
  pub fn add_EndConditionType(&mut self, EndConditionType: FieldConditionType) {
    self.fbb_.push_slot::<FieldConditionType>(FieldDateExcel::VT_ENDCONDITIONTYPE, EndConditionType, FieldConditionType::Invalid);
  }
  #[inline]
  pub fn add_EndConditionId(&mut self, EndConditionId: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_ENDCONDITIONID, EndConditionId, 0);
  }
  #[inline]
  pub fn add_EndReadyConditionType(&mut self, EndReadyConditionType: FieldConditionType) {
    self.fbb_.push_slot::<FieldConditionType>(FieldDateExcel::VT_ENDREADYCONDITIONTYPE, EndReadyConditionType, FieldConditionType::Invalid);
  }
  #[inline]
  pub fn add_EndReadyConditionId(&mut self, EndReadyConditionId: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_ENDREADYCONDITIONID, EndReadyConditionId, 0);
  }
  #[inline]
  pub fn add_OpenConditionStage(&mut self, OpenConditionStage: i64) {
    self.fbb_.push_slot::<i64>(FieldDateExcel::VT_OPENCONDITIONSTAGE, OpenConditionStage, 0);
  }
  #[inline]
  pub fn add_CharacterIconPath(&mut self, CharacterIconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldDateExcel::VT_CHARACTERICONPATH, CharacterIconPath);
  }
  #[inline]
  pub fn add_DateResultBGPath(&mut self, DateResultBGPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldDateExcel::VT_DATERESULTBGPATH, DateResultBGPath);
  }
  #[inline]
  pub fn add_DateResultSpinePath(&mut self, DateResultSpinePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldDateExcel::VT_DATERESULTSPINEPATH, DateResultSpinePath);
  }
  #[inline]
  pub fn add_DateResultSpineOffsetX(&mut self, DateResultSpineOffsetX: f32) {
    self.fbb_.push_slot::<f32>(FieldDateExcel::VT_DATERESULTSPINEOFFSETX, DateResultSpineOffsetX, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldDateExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldDateExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldDateExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldDateExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldDateExcel");
      ds.field("SeasonId", &self.SeasonId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("OpenDate", &self.OpenDate());
      ds.field("DateLocalizeKey", &self.DateLocalizeKey());
      ds.field("EntrySceneId", &self.EntrySceneId());
      ds.field("StartConditionType", &self.StartConditionType());
      ds.field("StartConditionId", &self.StartConditionId());
      ds.field("EndConditionType", &self.EndConditionType());
      ds.field("EndConditionId", &self.EndConditionId());
      ds.field("EndReadyConditionType", &self.EndReadyConditionType());
      ds.field("EndReadyConditionId", &self.EndReadyConditionId());
      ds.field("OpenConditionStage", &self.OpenConditionStage());
      ds.field("CharacterIconPath", &self.CharacterIconPath());
      ds.field("DateResultBGPath", &self.DateResultBGPath());
      ds.field("DateResultSpinePath", &self.DateResultSpinePath());
      ds.field("DateResultSpineOffsetX", &self.DateResultSpineOffsetX());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldDateExcelT {
  pub SeasonId: i64,
  pub UniqueId: i64,
  pub OpenDate: i64,
  pub DateLocalizeKey: Option<String>,
  pub EntrySceneId: i64,
  pub StartConditionType: FieldConditionType,
  pub StartConditionId: i64,
  pub EndConditionType: FieldConditionType,
  pub EndConditionId: i64,
  pub EndReadyConditionType: FieldConditionType,
  pub EndReadyConditionId: i64,
  pub OpenConditionStage: i64,
  pub CharacterIconPath: Option<String>,
  pub DateResultBGPath: Option<String>,
  pub DateResultSpinePath: Option<String>,
  pub DateResultSpineOffsetX: f32,
}
impl Default for FieldDateExcelT {
  fn default() -> Self {
    Self {
      SeasonId: 0,
      UniqueId: 0,
      OpenDate: 0,
      DateLocalizeKey: None,
      EntrySceneId: 0,
      StartConditionType: FieldConditionType::Invalid,
      StartConditionId: 0,
      EndConditionType: FieldConditionType::Invalid,
      EndConditionId: 0,
      EndReadyConditionType: FieldConditionType::Invalid,
      EndReadyConditionId: 0,
      OpenConditionStage: 0,
      CharacterIconPath: None,
      DateResultBGPath: None,
      DateResultSpinePath: None,
      DateResultSpineOffsetX: 0.0,
    }
  }
}
impl FieldDateExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldDateExcel<'b>> {
    let SeasonId = self.SeasonId;
    let UniqueId = self.UniqueId;
    let OpenDate = self.OpenDate;
    let DateLocalizeKey = self.DateLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EntrySceneId = self.EntrySceneId;
    let StartConditionType = self.StartConditionType;
    let StartConditionId = self.StartConditionId;
    let EndConditionType = self.EndConditionType;
    let EndConditionId = self.EndConditionId;
    let EndReadyConditionType = self.EndReadyConditionType;
    let EndReadyConditionId = self.EndReadyConditionId;
    let OpenConditionStage = self.OpenConditionStage;
    let CharacterIconPath = self.CharacterIconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DateResultBGPath = self.DateResultBGPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DateResultSpinePath = self.DateResultSpinePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DateResultSpineOffsetX = self.DateResultSpineOffsetX;
    FieldDateExcel::create(_fbb, &FieldDateExcelArgs{
      SeasonId,
      UniqueId,
      OpenDate,
      DateLocalizeKey,
      EntrySceneId,
      StartConditionType,
      StartConditionId,
      EndConditionType,
      EndConditionId,
      EndReadyConditionType,
      EndReadyConditionId,
      OpenConditionStage,
      CharacterIconPath,
      DateResultBGPath,
      DateResultSpinePath,
      DateResultSpineOffsetX,
    })
  }
}
