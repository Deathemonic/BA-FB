// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LogicEffectCommonVisualExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LogicEffectCommonVisualExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LogicEffectCommonVisualExcel<'a> {
  type Inner = LogicEffectCommonVisualExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LogicEffectCommonVisualExcel<'a> {
  pub const VT_STRINGID: flatbuffers::VOffsetT = 4;
  pub const VT_ICONSPRITENAME: flatbuffers::VOffsetT = 6;
  pub const VT_ICONDISPELCOLOR: flatbuffers::VOffsetT = 8;
  pub const VT_PARTICLEENTERPATH: flatbuffers::VOffsetT = 10;
  pub const VT_PARTICLEENTERSOCKET: flatbuffers::VOffsetT = 12;
  pub const VT_PARTICLELOOPPATH: flatbuffers::VOffsetT = 14;
  pub const VT_PARTICLELOOPSOCKET: flatbuffers::VOffsetT = 16;
  pub const VT_PARTICLEENDPATH: flatbuffers::VOffsetT = 18;
  pub const VT_PARTICLEENDSOCKET: flatbuffers::VOffsetT = 20;
  pub const VT_PARTICLEAPPLYPATH: flatbuffers::VOffsetT = 22;
  pub const VT_PARTICLEAPPLYSOCKET: flatbuffers::VOffsetT = 24;
  pub const VT_PARTICLEREMOVEDPATH: flatbuffers::VOffsetT = 26;
  pub const VT_PARTICLEREMOVEDSOCKET: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LogicEffectCommonVisualExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogicEffectCommonVisualExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LogicEffectCommonVisualExcel<'bldr>> {
    let mut builder = LogicEffectCommonVisualExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LogicEffectCommonVisual");
      let x = args.ParticleRemovedSocket;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParticleRemovedSocket(x);
      if let Some(x) = args.ParticleRemovedPath {
        builder.add_ParticleRemovedPath(x);
      }
      let x = args.ParticleApplySocket;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParticleApplySocket(x);
      if let Some(x) = args.ParticleApplyPath {
        builder.add_ParticleApplyPath(x);
      }
      let x = args.ParticleEndSocket;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParticleEndSocket(x);
      if let Some(x) = args.ParticleEndPath {
        builder.add_ParticleEndPath(x);
      }
      let x = args.ParticleLoopSocket;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParticleLoopSocket(x);
      if let Some(x) = args.ParticleLoopPath {
        builder.add_ParticleLoopPath(x);
      }
      let x = args.ParticleEnterSocket;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParticleEnterSocket(x);
      if let Some(x) = args.ParticleEnterPath {
        builder.add_ParticleEnterPath(x);
      }
      if let Some(x) = args.IconDispelColor {
        builder.add_IconDispelColor(x);
      }
      if let Some(x) = args.IconSpriteName {
        builder.add_IconSpriteName(x);
      }
      let x = args.StringID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_StringID(x);
    builder.finish()
  }

  pub fn unpack(&self) -> LogicEffectCommonVisualExcelT {
    let key = table_encryption_service::create_key(b"LogicEffectCommonVisual");
      let StringID = self.StringID();
    let IconSpriteName = self.IconSpriteName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IconDispelColor = self.IconDispelColor().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    let ParticleEnterPath = self.ParticleEnterPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ParticleEnterSocket = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParticleEnterSocket(), &key)
      } else {
        self.ParticleEnterSocket()
      };
    let ParticleLoopPath = self.ParticleLoopPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ParticleLoopSocket = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParticleLoopSocket(), &key)
      } else {
        self.ParticleLoopSocket()
      };
    let ParticleEndPath = self.ParticleEndPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ParticleEndSocket = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParticleEndSocket(), &key)
      } else {
        self.ParticleEndSocket()
      };
    let ParticleApplyPath = self.ParticleApplyPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ParticleApplySocket = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParticleApplySocket(), &key)
      } else {
        self.ParticleApplySocket()
      };
    let ParticleRemovedPath = self.ParticleRemovedPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ParticleRemovedSocket = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParticleRemovedSocket(), &key)
      } else {
        self.ParticleRemovedSocket()
      };
    LogicEffectCommonVisualExcelT {
      StringID,
      IconSpriteName,
      IconDispelColor,
      ParticleEnterPath,
      ParticleEnterSocket,
      ParticleLoopPath,
      ParticleLoopSocket,
      ParticleEndPath,
      ParticleEndSocket,
      ParticleApplyPath,
      ParticleApplySocket,
      ParticleRemovedPath,
      ParticleRemovedSocket,
    }
  }

  #[inline]
  pub fn StringID(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(LogicEffectCommonVisualExcel::VT_STRINGID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconSpriteName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogicEffectCommonVisualExcel::VT_ICONSPRITENAME, None)}
  }
  #[inline]
  pub fn IconDispelColor(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(LogicEffectCommonVisualExcel::VT_ICONDISPELCOLOR, None)}
  }
  #[inline]
  pub fn ParticleEnterPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogicEffectCommonVisualExcel::VT_PARTICLEENTERPATH, None)}
  }
  #[inline]
  pub fn ParticleEnterSocket(&self) -> EffectBone {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEENTERSOCKET, Some(EffectBone::None)).unwrap()}
  }
  #[inline]
  pub fn ParticleLoopPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogicEffectCommonVisualExcel::VT_PARTICLELOOPPATH, None)}
  }
  #[inline]
  pub fn ParticleLoopSocket(&self) -> EffectBone {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLELOOPSOCKET, Some(EffectBone::None)).unwrap()}
  }
  #[inline]
  pub fn ParticleEndPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogicEffectCommonVisualExcel::VT_PARTICLEENDPATH, None)}
  }
  #[inline]
  pub fn ParticleEndSocket(&self) -> EffectBone {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEENDSOCKET, Some(EffectBone::None)).unwrap()}
  }
  #[inline]
  pub fn ParticleApplyPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogicEffectCommonVisualExcel::VT_PARTICLEAPPLYPATH, None)}
  }
  #[inline]
  pub fn ParticleApplySocket(&self) -> EffectBone {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEAPPLYSOCKET, Some(EffectBone::None)).unwrap()}
  }
  #[inline]
  pub fn ParticleRemovedPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogicEffectCommonVisualExcel::VT_PARTICLEREMOVEDPATH, None)}
  }
  #[inline]
  pub fn ParticleRemovedSocket(&self) -> EffectBone {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEREMOVEDSOCKET, Some(EffectBone::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LogicEffectCommonVisualExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("StringID", Self::VT_STRINGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconSpriteName", Self::VT_ICONSPRITENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("IconDispelColor", Self::VT_ICONDISPELCOLOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ParticleEnterPath", Self::VT_PARTICLEENTERPATH, false)?
     .visit_field::<EffectBone>("ParticleEnterSocket", Self::VT_PARTICLEENTERSOCKET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ParticleLoopPath", Self::VT_PARTICLELOOPPATH, false)?
     .visit_field::<EffectBone>("ParticleLoopSocket", Self::VT_PARTICLELOOPSOCKET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ParticleEndPath", Self::VT_PARTICLEENDPATH, false)?
     .visit_field::<EffectBone>("ParticleEndSocket", Self::VT_PARTICLEENDSOCKET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ParticleApplyPath", Self::VT_PARTICLEAPPLYPATH, false)?
     .visit_field::<EffectBone>("ParticleApplySocket", Self::VT_PARTICLEAPPLYSOCKET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ParticleRemovedPath", Self::VT_PARTICLEREMOVEDPATH, false)?
     .visit_field::<EffectBone>("ParticleRemovedSocket", Self::VT_PARTICLEREMOVEDSOCKET, false)?
     .finish();
    Ok(())
  }
}
pub struct LogicEffectCommonVisualExcelArgs<'a> {
    pub StringID: u32,
    pub IconSpriteName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IconDispelColor: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub ParticleEnterPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ParticleEnterSocket: EffectBone,
    pub ParticleLoopPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ParticleLoopSocket: EffectBone,
    pub ParticleEndPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ParticleEndSocket: EffectBone,
    pub ParticleApplyPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ParticleApplySocket: EffectBone,
    pub ParticleRemovedPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ParticleRemovedSocket: EffectBone,
}
impl<'a> Default for LogicEffectCommonVisualExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogicEffectCommonVisualExcelArgs {
      StringID: 0,
      IconSpriteName: None,
      IconDispelColor: None,
      ParticleEnterPath: None,
      ParticleEnterSocket: EffectBone::None,
      ParticleLoopPath: None,
      ParticleLoopSocket: EffectBone::None,
      ParticleEndPath: None,
      ParticleEndSocket: EffectBone::None,
      ParticleApplyPath: None,
      ParticleApplySocket: EffectBone::None,
      ParticleRemovedPath: None,
      ParticleRemovedSocket: EffectBone::None,
    }
  }
}

impl Serialize for LogicEffectCommonVisualExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LogicEffectCommonVisualExcel", 13)?;
      s.serialize_field("StringID", &self.StringID())?;
      if let Some(f) = self.IconSpriteName() {
        s.serialize_field("IconSpriteName", &f)?;
      } else {
        s.skip_field("IconSpriteName")?;
      }
      if let Some(f) = self.IconDispelColor() {
        s.serialize_field("IconDispelColor", &f)?;
      } else {
        s.skip_field("IconDispelColor")?;
      }
      if let Some(f) = self.ParticleEnterPath() {
        s.serialize_field("ParticleEnterPath", &f)?;
      } else {
        s.skip_field("ParticleEnterPath")?;
      }
      s.serialize_field("ParticleEnterSocket", &self.ParticleEnterSocket())?;
      if let Some(f) = self.ParticleLoopPath() {
        s.serialize_field("ParticleLoopPath", &f)?;
      } else {
        s.skip_field("ParticleLoopPath")?;
      }
      s.serialize_field("ParticleLoopSocket", &self.ParticleLoopSocket())?;
      if let Some(f) = self.ParticleEndPath() {
        s.serialize_field("ParticleEndPath", &f)?;
      } else {
        s.skip_field("ParticleEndPath")?;
      }
      s.serialize_field("ParticleEndSocket", &self.ParticleEndSocket())?;
      if let Some(f) = self.ParticleApplyPath() {
        s.serialize_field("ParticleApplyPath", &f)?;
      } else {
        s.skip_field("ParticleApplyPath")?;
      }
      s.serialize_field("ParticleApplySocket", &self.ParticleApplySocket())?;
      if let Some(f) = self.ParticleRemovedPath() {
        s.serialize_field("ParticleRemovedPath", &f)?;
      } else {
        s.skip_field("ParticleRemovedPath")?;
      }
      s.serialize_field("ParticleRemovedSocket", &self.ParticleRemovedSocket())?;
    s.end()
  }
}

pub struct LogicEffectCommonVisualExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogicEffectCommonVisualExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StringID(&mut self, StringID: u32) {
    self.fbb_.push_slot::<u32>(LogicEffectCommonVisualExcel::VT_STRINGID, StringID, 0);
  }
  #[inline]
  pub fn add_IconSpriteName(&mut self, IconSpriteName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogicEffectCommonVisualExcel::VT_ICONSPRITENAME, IconSpriteName);
  }
  #[inline]
  pub fn add_IconDispelColor(&mut self, IconDispelColor: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogicEffectCommonVisualExcel::VT_ICONDISPELCOLOR, IconDispelColor);
  }
  #[inline]
  pub fn add_ParticleEnterPath(&mut self, ParticleEnterPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogicEffectCommonVisualExcel::VT_PARTICLEENTERPATH, ParticleEnterPath);
  }
  #[inline]
  pub fn add_ParticleEnterSocket(&mut self, ParticleEnterSocket: EffectBone) {
    self.fbb_.push_slot::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEENTERSOCKET, ParticleEnterSocket, EffectBone::None);
  }
  #[inline]
  pub fn add_ParticleLoopPath(&mut self, ParticleLoopPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogicEffectCommonVisualExcel::VT_PARTICLELOOPPATH, ParticleLoopPath);
  }
  #[inline]
  pub fn add_ParticleLoopSocket(&mut self, ParticleLoopSocket: EffectBone) {
    self.fbb_.push_slot::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLELOOPSOCKET, ParticleLoopSocket, EffectBone::None);
  }
  #[inline]
  pub fn add_ParticleEndPath(&mut self, ParticleEndPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogicEffectCommonVisualExcel::VT_PARTICLEENDPATH, ParticleEndPath);
  }
  #[inline]
  pub fn add_ParticleEndSocket(&mut self, ParticleEndSocket: EffectBone) {
    self.fbb_.push_slot::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEENDSOCKET, ParticleEndSocket, EffectBone::None);
  }
  #[inline]
  pub fn add_ParticleApplyPath(&mut self, ParticleApplyPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogicEffectCommonVisualExcel::VT_PARTICLEAPPLYPATH, ParticleApplyPath);
  }
  #[inline]
  pub fn add_ParticleApplySocket(&mut self, ParticleApplySocket: EffectBone) {
    self.fbb_.push_slot::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEAPPLYSOCKET, ParticleApplySocket, EffectBone::None);
  }
  #[inline]
  pub fn add_ParticleRemovedPath(&mut self, ParticleRemovedPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogicEffectCommonVisualExcel::VT_PARTICLEREMOVEDPATH, ParticleRemovedPath);
  }
  #[inline]
  pub fn add_ParticleRemovedSocket(&mut self, ParticleRemovedSocket: EffectBone) {
    self.fbb_.push_slot::<EffectBone>(LogicEffectCommonVisualExcel::VT_PARTICLEREMOVEDSOCKET, ParticleRemovedSocket, EffectBone::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogicEffectCommonVisualExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogicEffectCommonVisualExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LogicEffectCommonVisualExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LogicEffectCommonVisualExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LogicEffectCommonVisualExcel");
      ds.field("StringID", &self.StringID());
      ds.field("IconSpriteName", &self.IconSpriteName());
      ds.field("IconDispelColor", &self.IconDispelColor());
      ds.field("ParticleEnterPath", &self.ParticleEnterPath());
      ds.field("ParticleEnterSocket", &self.ParticleEnterSocket());
      ds.field("ParticleLoopPath", &self.ParticleLoopPath());
      ds.field("ParticleLoopSocket", &self.ParticleLoopSocket());
      ds.field("ParticleEndPath", &self.ParticleEndPath());
      ds.field("ParticleEndSocket", &self.ParticleEndSocket());
      ds.field("ParticleApplyPath", &self.ParticleApplyPath());
      ds.field("ParticleApplySocket", &self.ParticleApplySocket());
      ds.field("ParticleRemovedPath", &self.ParticleRemovedPath());
      ds.field("ParticleRemovedSocket", &self.ParticleRemovedSocket());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LogicEffectCommonVisualExcelT {
  pub StringID: u32,
  pub IconSpriteName: Option<String>,
  pub IconDispelColor: Option<Vec<f32>>,
  pub ParticleEnterPath: Option<String>,
  pub ParticleEnterSocket: EffectBone,
  pub ParticleLoopPath: Option<String>,
  pub ParticleLoopSocket: EffectBone,
  pub ParticleEndPath: Option<String>,
  pub ParticleEndSocket: EffectBone,
  pub ParticleApplyPath: Option<String>,
  pub ParticleApplySocket: EffectBone,
  pub ParticleRemovedPath: Option<String>,
  pub ParticleRemovedSocket: EffectBone,
}
impl Default for LogicEffectCommonVisualExcelT {
  fn default() -> Self {
    Self {
      StringID: 0,
      IconSpriteName: None,
      IconDispelColor: None,
      ParticleEnterPath: None,
      ParticleEnterSocket: EffectBone::None,
      ParticleLoopPath: None,
      ParticleLoopSocket: EffectBone::None,
      ParticleEndPath: None,
      ParticleEndSocket: EffectBone::None,
      ParticleApplyPath: None,
      ParticleApplySocket: EffectBone::None,
      ParticleRemovedPath: None,
      ParticleRemovedSocket: EffectBone::None,
    }
  }
}
impl LogicEffectCommonVisualExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LogicEffectCommonVisualExcel<'b>> {
    let StringID = self.StringID;
    let IconSpriteName = self.IconSpriteName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IconDispelColor = self.IconDispelColor.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParticleEnterPath = self.ParticleEnterPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ParticleEnterSocket = self.ParticleEnterSocket;
    let ParticleLoopPath = self.ParticleLoopPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ParticleLoopSocket = self.ParticleLoopSocket;
    let ParticleEndPath = self.ParticleEndPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ParticleEndSocket = self.ParticleEndSocket;
    let ParticleApplyPath = self.ParticleApplyPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ParticleApplySocket = self.ParticleApplySocket;
    let ParticleRemovedPath = self.ParticleRemovedPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ParticleRemovedSocket = self.ParticleRemovedSocket;
    LogicEffectCommonVisualExcel::create(_fbb, &LogicEffectCommonVisualExcelArgs{
      StringID,
      IconSpriteName,
      IconDispelColor,
      ParticleEnterPath,
      ParticleEnterSocket,
      ParticleLoopPath,
      ParticleLoopSocket,
      ParticleEndPath,
      ParticleEndSocket,
      ParticleApplyPath,
      ParticleApplySocket,
      ParticleRemovedPath,
      ParticleRemovedSocket,
    })
  }
}
