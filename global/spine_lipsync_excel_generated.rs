// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SpineLipsyncExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SpineLipsyncExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpineLipsyncExcel<'a> {
  type Inner = SpineLipsyncExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpineLipsyncExcel<'a> {
  pub const VT_VOICEID: flatbuffers::VOffsetT = 4;
  pub const VT_ANIMJSON: flatbuffers::VOffsetT = 6;
  pub const VT_ANIMJSONKR: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpineLipsyncExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SpineLipsyncExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<SpineLipsyncExcel<'bldr>> {
    let mut builder = SpineLipsyncExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"SpineLipsync");
      if let Some(x) = args.AnimJsonKr {
        builder.add_AnimJsonKr(x);
      }
      if let Some(x) = args.AnimJson {
        builder.add_AnimJson(x);
      }
      let x = args.VoiceId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_VoiceId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> SpineLipsyncExcelT {
    let key = table_encryption_service::create_key(b"SpineLipsync");
      let VoiceId = self.VoiceId();
    let AnimJson = self.AnimJson().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AnimJsonKr = self.AnimJsonKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    SpineLipsyncExcelT {
      VoiceId,
      AnimJson,
      AnimJsonKr,
    }
  }

  #[inline]
  pub fn VoiceId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(SpineLipsyncExcel::VT_VOICEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AnimJson(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpineLipsyncExcel::VT_ANIMJSON, None)}
  }
  #[inline]
  pub fn AnimJsonKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpineLipsyncExcel::VT_ANIMJSONKR, None)}
  }
}

impl flatbuffers::Verifiable for SpineLipsyncExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("VoiceId", Self::VT_VOICEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AnimJson", Self::VT_ANIMJSON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AnimJsonKr", Self::VT_ANIMJSONKR, false)?
     .finish();
    Ok(())
  }
}
pub struct SpineLipsyncExcelArgs<'a> {
    pub VoiceId: u32,
    pub AnimJson: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AnimJsonKr: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SpineLipsyncExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpineLipsyncExcelArgs {
      VoiceId: 0,
      AnimJson: None,
      AnimJsonKr: None,
    }
  }
}

impl Serialize for SpineLipsyncExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SpineLipsyncExcel", 3)?;
      s.serialize_field("VoiceId", &self.VoiceId())?;
      if let Some(f) = self.AnimJson() {
        s.serialize_field("AnimJson", &f)?;
      } else {
        s.skip_field("AnimJson")?;
      }
      if let Some(f) = self.AnimJsonKr() {
        s.serialize_field("AnimJsonKr", &f)?;
      } else {
        s.skip_field("AnimJsonKr")?;
      }
    s.end()
  }
}

pub struct SpineLipsyncExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SpineLipsyncExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: u32) {
    self.fbb_.push_slot::<u32>(SpineLipsyncExcel::VT_VOICEID, VoiceId, 0);
  }
  #[inline]
  pub fn add_AnimJson(&mut self, AnimJson: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpineLipsyncExcel::VT_ANIMJSON, AnimJson);
  }
  #[inline]
  pub fn add_AnimJsonKr(&mut self, AnimJsonKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpineLipsyncExcel::VT_ANIMJSONKR, AnimJsonKr);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SpineLipsyncExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SpineLipsyncExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpineLipsyncExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpineLipsyncExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpineLipsyncExcel");
      ds.field("VoiceId", &self.VoiceId());
      ds.field("AnimJson", &self.AnimJson());
      ds.field("AnimJsonKr", &self.AnimJsonKr());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SpineLipsyncExcelT {
  pub VoiceId: u32,
  pub AnimJson: Option<String>,
  pub AnimJsonKr: Option<String>,
}
impl Default for SpineLipsyncExcelT {
  fn default() -> Self {
    Self {
      VoiceId: 0,
      AnimJson: None,
      AnimJsonKr: None,
    }
  }
}
impl SpineLipsyncExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SpineLipsyncExcel<'b>> {
    let VoiceId = self.VoiceId;
    let AnimJson = self.AnimJson.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AnimJsonKr = self.AnimJsonKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SpineLipsyncExcel::create(_fbb, &SpineLipsyncExcelArgs{
      VoiceId,
      AnimJson,
      AnimJsonKr,
    })
  }
}
