// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SchoolDungeonStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SchoolDungeonStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SchoolDungeonStageExcel<'a> {
  type Inner = SchoolDungeonStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SchoolDungeonStageExcel<'a> {
  pub const VT_STAGEID: flatbuffers::VOffsetT = 4;
  pub const VT_DUNGEONTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DIFFICULTY: flatbuffers::VOffsetT = 8;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 10;
  pub const VT_PREVSTAGEID: flatbuffers::VOffsetT = 12;
  pub const VT_STAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_STAGEENTERCOSTID: flatbuffers::VOffsetT = 16;
  pub const VT_STAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_STAGEENTERCOSTMINIMUMAMOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 22;
  pub const VT_STARGOAL: flatbuffers::VOffsetT = 24;
  pub const VT_STARGOALAMOUNT: flatbuffers::VOffsetT = 26;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 28;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 30;
  pub const VT_STAGEREWARDID: flatbuffers::VOffsetT = 32;
  pub const VT_PLAYTIMELIMITINSECONDS: flatbuffers::VOffsetT = 34;
  pub const VT_ECHELONEXTENSIONTYPE: flatbuffers::VOffsetT = 36;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SchoolDungeonStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SchoolDungeonStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<SchoolDungeonStageExcel<'bldr>> {
    let mut builder = SchoolDungeonStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"SchoolDungeonStage");
      let x = args.PlayTimeLimitInSeconds;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PlayTimeLimitInSeconds(x);
      let x = args.StageRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageRewardId(x);
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.PrevStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevStageId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.StageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageId(x);
      let x = args.EchelonExtensionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EchelonExtensionType(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      if let Some(x) = args.StarGoalAmount {
        builder.add_StarGoalAmount(x);
      }
      if let Some(x) = args.StarGoal {
        builder.add_StarGoal(x);
      }
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_GroundId(x);
      if let Some(x) = args.StageEnterCostMinimumAmount {
        builder.add_StageEnterCostMinimumAmount(x);
      }
      if let Some(x) = args.StageEnterCostAmount {
        builder.add_StageEnterCostAmount(x);
      }
      if let Some(x) = args.StageEnterCostId {
        builder.add_StageEnterCostId(x);
      }
      if let Some(x) = args.StageEnterCostType {
        builder.add_StageEnterCostType(x);
      }
      let x = args.Difficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Difficulty(x);
      let x = args.DungeonType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DungeonType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> SchoolDungeonStageExcelT {
    let key = table_encryption_service::create_key(b"SchoolDungeonStage");
      let StageId = self.StageId();
      let DungeonType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DungeonType(), &key)
      } else {
        self.DungeonType()
      };
      let Difficulty = self.Difficulty();
      let BattleDuration = self.BattleDuration();
      let PrevStageId = self.PrevStageId();
    let StageEnterCostType = self.StageEnterCostType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StageEnterCostId = self.StageEnterCostId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StageEnterCostAmount = self.StageEnterCostAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let StageEnterCostMinimumAmount = self.StageEnterCostMinimumAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let GroundId = self.GroundId();
    let StarGoal = self.StarGoal().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StarGoalAmount = self.StarGoalAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let RecommandLevel = self.RecommandLevel();
      let StageRewardId = self.StageRewardId();
      let PlayTimeLimitInSeconds = self.PlayTimeLimitInSeconds();
      let EchelonExtensionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EchelonExtensionType(), &key)
      } else {
        self.EchelonExtensionType()
      };
    SchoolDungeonStageExcelT {
      StageId,
      DungeonType,
      Difficulty,
      BattleDuration,
      PrevStageId,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterCostMinimumAmount,
      GroundId,
      StarGoal,
      StarGoalAmount,
      StageTopography,
      RecommandLevel,
      StageRewardId,
      PlayTimeLimitInSeconds,
      EchelonExtensionType,
    }
  }

  #[inline]
  pub fn StageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SchoolDungeonStageExcel::VT_STAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DungeonType(&self) -> SchoolDungeonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SchoolDungeonType>(SchoolDungeonStageExcel::VT_DUNGEONTYPE, Some(SchoolDungeonType::SchoolA)).unwrap()}
  }
  #[inline]
  pub fn Difficulty(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SchoolDungeonStageExcel::VT_DIFFICULTY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SchoolDungeonStageExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrevStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SchoolDungeonStageExcel::VT_PREVSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTTYPE, None)}
  }
  #[inline]
  pub fn StageEnterCostId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTID, None)}
  }
  #[inline]
  pub fn StageEnterCostAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTAMOUNT, None)}
  }
  #[inline]
  pub fn StageEnterCostMinimumAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTMINIMUMAMOUNT, None)}
  }
  #[inline]
  pub fn GroundId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SchoolDungeonStageExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarGoal(&self) -> Option<flatbuffers::Vector<'a, StarGoalType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, StarGoalType>>>(SchoolDungeonStageExcel::VT_STARGOAL, None)}
  }
  #[inline]
  pub fn StarGoalAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(SchoolDungeonStageExcel::VT_STARGOALAMOUNT, None)}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(SchoolDungeonStageExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SchoolDungeonStageExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SchoolDungeonStageExcel::VT_STAGEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PlayTimeLimitInSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SchoolDungeonStageExcel::VT_PLAYTIMELIMITINSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonExtensionType(&self) -> EchelonExtensionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonExtensionType>(SchoolDungeonStageExcel::VT_ECHELONEXTENSIONTYPE, Some(EchelonExtensionType::Base)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SchoolDungeonStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("StageId", Self::VT_STAGEID, false)?
     .visit_field::<SchoolDungeonType>("DungeonType", Self::VT_DUNGEONTYPE, false)?
     .visit_field::<i32>("Difficulty", Self::VT_DIFFICULTY, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<i64>("PrevStageId", Self::VT_PREVSTAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("StageEnterCostType", Self::VT_STAGEENTERCOSTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StageEnterCostId", Self::VT_STAGEENTERCOSTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StageEnterCostAmount", Self::VT_STAGEENTERCOSTAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StageEnterCostMinimumAmount", Self::VT_STAGEENTERCOSTMINIMUMAMOUNT, false)?
     .visit_field::<i32>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, StarGoalType>>>("StarGoal", Self::VT_STARGOAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("StarGoalAmount", Self::VT_STARGOALAMOUNT, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<i64>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<i64>("StageRewardId", Self::VT_STAGEREWARDID, false)?
     .visit_field::<i64>("PlayTimeLimitInSeconds", Self::VT_PLAYTIMELIMITINSECONDS, false)?
     .visit_field::<EchelonExtensionType>("EchelonExtensionType", Self::VT_ECHELONEXTENSIONTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct SchoolDungeonStageExcelArgs<'a> {
    pub StageId: i64,
    pub DungeonType: SchoolDungeonType,
    pub Difficulty: i32,
    pub BattleDuration: i64,
    pub PrevStageId: i64,
    pub StageEnterCostType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub StageEnterCostId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StageEnterCostAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub StageEnterCostMinimumAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub GroundId: i32,
    pub StarGoal: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, StarGoalType>>>,
    pub StarGoalAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub StageTopography: StageTopography,
    pub RecommandLevel: i64,
    pub StageRewardId: i64,
    pub PlayTimeLimitInSeconds: i64,
    pub EchelonExtensionType: EchelonExtensionType,
}
impl<'a> Default for SchoolDungeonStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SchoolDungeonStageExcelArgs {
      StageId: 0,
      DungeonType: SchoolDungeonType::SchoolA,
      Difficulty: 0,
      BattleDuration: 0,
      PrevStageId: 0,
      StageEnterCostType: None,
      StageEnterCostId: None,
      StageEnterCostAmount: None,
      StageEnterCostMinimumAmount: None,
      GroundId: 0,
      StarGoal: None,
      StarGoalAmount: None,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      StageRewardId: 0,
      PlayTimeLimitInSeconds: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}

impl Serialize for SchoolDungeonStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SchoolDungeonStageExcel", 17)?;
      s.serialize_field("StageId", &self.StageId())?;
      s.serialize_field("DungeonType", &self.DungeonType())?;
      s.serialize_field("Difficulty", &self.Difficulty())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("PrevStageId", &self.PrevStageId())?;
      if let Some(f) = self.StageEnterCostType() {
        s.serialize_field("StageEnterCostType", &f)?;
      } else {
        s.skip_field("StageEnterCostType")?;
      }
      if let Some(f) = self.StageEnterCostId() {
        s.serialize_field("StageEnterCostId", &f)?;
      } else {
        s.skip_field("StageEnterCostId")?;
      }
      if let Some(f) = self.StageEnterCostAmount() {
        s.serialize_field("StageEnterCostAmount", &f)?;
      } else {
        s.skip_field("StageEnterCostAmount")?;
      }
      if let Some(f) = self.StageEnterCostMinimumAmount() {
        s.serialize_field("StageEnterCostMinimumAmount", &f)?;
      } else {
        s.skip_field("StageEnterCostMinimumAmount")?;
      }
      s.serialize_field("GroundId", &self.GroundId())?;
      if let Some(f) = self.StarGoal() {
        s.serialize_field("StarGoal", &f)?;
      } else {
        s.skip_field("StarGoal")?;
      }
      if let Some(f) = self.StarGoalAmount() {
        s.serialize_field("StarGoalAmount", &f)?;
      } else {
        s.skip_field("StarGoalAmount")?;
      }
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      s.serialize_field("StageRewardId", &self.StageRewardId())?;
      s.serialize_field("PlayTimeLimitInSeconds", &self.PlayTimeLimitInSeconds())?;
      s.serialize_field("EchelonExtensionType", &self.EchelonExtensionType())?;
    s.end()
  }
}

pub struct SchoolDungeonStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SchoolDungeonStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StageId(&mut self, StageId: i64) {
    self.fbb_.push_slot::<i64>(SchoolDungeonStageExcel::VT_STAGEID, StageId, 0);
  }
  #[inline]
  pub fn add_DungeonType(&mut self, DungeonType: SchoolDungeonType) {
    self.fbb_.push_slot::<SchoolDungeonType>(SchoolDungeonStageExcel::VT_DUNGEONTYPE, DungeonType, SchoolDungeonType::SchoolA);
  }
  #[inline]
  pub fn add_Difficulty(&mut self, Difficulty: i32) {
    self.fbb_.push_slot::<i32>(SchoolDungeonStageExcel::VT_DIFFICULTY, Difficulty, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(SchoolDungeonStageExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_PrevStageId(&mut self, PrevStageId: i64) {
    self.fbb_.push_slot::<i64>(SchoolDungeonStageExcel::VT_PREVSTAGEID, PrevStageId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostType(&mut self, StageEnterCostType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTTYPE, StageEnterCostType);
  }
  #[inline]
  pub fn add_StageEnterCostId(&mut self, StageEnterCostId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTID, StageEnterCostId);
  }
  #[inline]
  pub fn add_StageEnterCostAmount(&mut self, StageEnterCostAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTAMOUNT, StageEnterCostAmount);
  }
  #[inline]
  pub fn add_StageEnterCostMinimumAmount(&mut self, StageEnterCostMinimumAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SchoolDungeonStageExcel::VT_STAGEENTERCOSTMINIMUMAMOUNT, StageEnterCostMinimumAmount);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i32) {
    self.fbb_.push_slot::<i32>(SchoolDungeonStageExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_StarGoal(&mut self, StarGoal: flatbuffers::WIPOffset<flatbuffers::Vector<'b , StarGoalType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SchoolDungeonStageExcel::VT_STARGOAL, StarGoal);
  }
  #[inline]
  pub fn add_StarGoalAmount(&mut self, StarGoalAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SchoolDungeonStageExcel::VT_STARGOALAMOUNT, StarGoalAmount);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(SchoolDungeonStageExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i64) {
    self.fbb_.push_slot::<i64>(SchoolDungeonStageExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_StageRewardId(&mut self, StageRewardId: i64) {
    self.fbb_.push_slot::<i64>(SchoolDungeonStageExcel::VT_STAGEREWARDID, StageRewardId, 0);
  }
  #[inline]
  pub fn add_PlayTimeLimitInSeconds(&mut self, PlayTimeLimitInSeconds: i64) {
    self.fbb_.push_slot::<i64>(SchoolDungeonStageExcel::VT_PLAYTIMELIMITINSECONDS, PlayTimeLimitInSeconds, 0);
  }
  #[inline]
  pub fn add_EchelonExtensionType(&mut self, EchelonExtensionType: EchelonExtensionType) {
    self.fbb_.push_slot::<EchelonExtensionType>(SchoolDungeonStageExcel::VT_ECHELONEXTENSIONTYPE, EchelonExtensionType, EchelonExtensionType::Base);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SchoolDungeonStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SchoolDungeonStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SchoolDungeonStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SchoolDungeonStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SchoolDungeonStageExcel");
      ds.field("StageId", &self.StageId());
      ds.field("DungeonType", &self.DungeonType());
      ds.field("Difficulty", &self.Difficulty());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("PrevStageId", &self.PrevStageId());
      ds.field("StageEnterCostType", &self.StageEnterCostType());
      ds.field("StageEnterCostId", &self.StageEnterCostId());
      ds.field("StageEnterCostAmount", &self.StageEnterCostAmount());
      ds.field("StageEnterCostMinimumAmount", &self.StageEnterCostMinimumAmount());
      ds.field("GroundId", &self.GroundId());
      ds.field("StarGoal", &self.StarGoal());
      ds.field("StarGoalAmount", &self.StarGoalAmount());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("StageRewardId", &self.StageRewardId());
      ds.field("PlayTimeLimitInSeconds", &self.PlayTimeLimitInSeconds());
      ds.field("EchelonExtensionType", &self.EchelonExtensionType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SchoolDungeonStageExcelT {
  pub StageId: i64,
  pub DungeonType: SchoolDungeonType,
  pub Difficulty: i32,
  pub BattleDuration: i64,
  pub PrevStageId: i64,
  pub StageEnterCostType: Option<Vec<ParcelType>>,
  pub StageEnterCostId: Option<Vec<i64>>,
  pub StageEnterCostAmount: Option<Vec<i64>>,
  pub StageEnterCostMinimumAmount: Option<Vec<i64>>,
  pub GroundId: i32,
  pub StarGoal: Option<Vec<StarGoalType>>,
  pub StarGoalAmount: Option<Vec<i32>>,
  pub StageTopography: StageTopography,
  pub RecommandLevel: i64,
  pub StageRewardId: i64,
  pub PlayTimeLimitInSeconds: i64,
  pub EchelonExtensionType: EchelonExtensionType,
}
impl Default for SchoolDungeonStageExcelT {
  fn default() -> Self {
    Self {
      StageId: 0,
      DungeonType: SchoolDungeonType::SchoolA,
      Difficulty: 0,
      BattleDuration: 0,
      PrevStageId: 0,
      StageEnterCostType: None,
      StageEnterCostId: None,
      StageEnterCostAmount: None,
      StageEnterCostMinimumAmount: None,
      GroundId: 0,
      StarGoal: None,
      StarGoalAmount: None,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      StageRewardId: 0,
      PlayTimeLimitInSeconds: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}
impl SchoolDungeonStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SchoolDungeonStageExcel<'b>> {
    let StageId = self.StageId;
    let DungeonType = self.DungeonType;
    let Difficulty = self.Difficulty;
    let BattleDuration = self.BattleDuration;
    let PrevStageId = self.PrevStageId;
    let StageEnterCostType = self.StageEnterCostType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StageEnterCostId = self.StageEnterCostId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StageEnterCostAmount = self.StageEnterCostAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StageEnterCostMinimumAmount = self.StageEnterCostMinimumAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let GroundId = self.GroundId;
    let StarGoal = self.StarGoal.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StarGoalAmount = self.StarGoalAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StageTopography = self.StageTopography;
    let RecommandLevel = self.RecommandLevel;
    let StageRewardId = self.StageRewardId;
    let PlayTimeLimitInSeconds = self.PlayTimeLimitInSeconds;
    let EchelonExtensionType = self.EchelonExtensionType;
    SchoolDungeonStageExcel::create(_fbb, &SchoolDungeonStageExcelArgs{
      StageId,
      DungeonType,
      Difficulty,
      BattleDuration,
      PrevStageId,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageEnterCostMinimumAmount,
      GroundId,
      StarGoal,
      StarGoalAmount,
      StageTopography,
      RecommandLevel,
      StageRewardId,
      PlayTimeLimitInSeconds,
      EchelonExtensionType,
    })
  }
}
