// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterTranscendenceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterTranscendenceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterTranscendenceExcel<'a> {
  type Inner = CharacterTranscendenceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterTranscendenceExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_MAXFAVORLEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_STATBONUSRATEATTACK: flatbuffers::VOffsetT = 8;
  pub const VT_STATBONUSRATEHP: flatbuffers::VOffsetT = 10;
  pub const VT_STATBONUSRATEHEAL: flatbuffers::VOffsetT = 12;
  pub const VT_RECIPEID: flatbuffers::VOffsetT = 14;
  pub const VT_SKILLSLOTA: flatbuffers::VOffsetT = 16;
  pub const VT_SKILLSLOTB: flatbuffers::VOffsetT = 18;
  pub const VT_SKILLSLOTC: flatbuffers::VOffsetT = 20;
  pub const VT_MAXLEVELSTAR: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterTranscendenceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterTranscendenceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterTranscendenceExcel<'bldr>> {
    let mut builder = CharacterTranscendenceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterTranscendence");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.maxlevelStar {
        builder.add_maxlevelStar(x);
      }
      if let Some(x) = args.skillSlotC {
        builder.add_skillSlotC(x);
      }
      if let Some(x) = args.skillSlotB {
        builder.add_skillSlotB(x);
      }
      if let Some(x) = args.skillSlotA {
        builder.add_skillSlotA(x);
      }
      if let Some(x) = args.recipeId {
        builder.add_recipeId(x);
      }
      if let Some(x) = args.statBonusRateHeal {
        builder.add_statBonusRateHeal(x);
      }
      if let Some(x) = args.statBonusRateHP {
        builder.add_statBonusRateHP(x);
      }
      if let Some(x) = args.statBonusRateAttack {
        builder.add_statBonusRateAttack(x);
      }
      if let Some(x) = args.maxFavorLevel {
        builder.add_maxFavorLevel(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterTranscendenceExcelT {
    let key = table_encryption_service::create_key(b"CharacterTranscendence");
      let CharacterId = self.CharacterId();
    let maxFavorLevel = self.maxFavorLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let statBonusRateAttack = self.statBonusRateAttack().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let statBonusRateHP = self.statBonusRateHP().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let statBonusRateHeal = self.statBonusRateHeal().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let recipeId = self.recipeId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let skillSlotA = self.skillSlotA().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let skillSlotB = self.skillSlotB().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let skillSlotC = self.skillSlotC().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let maxlevelStar = self.maxlevelStar().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    CharacterTranscendenceExcelT {
      CharacterId,
      maxFavorLevel,
      statBonusRateAttack,
      statBonusRateHP,
      statBonusRateHeal,
      recipeId,
      skillSlotA,
      skillSlotB,
      skillSlotC,
      maxlevelStar,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterTranscendenceExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn maxFavorLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CharacterTranscendenceExcel::VT_MAXFAVORLEVEL, None)}
  }
  #[inline]
  pub fn statBonusRateAttack(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_STATBONUSRATEATTACK, None)}
  }
  #[inline]
  pub fn statBonusRateHP(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHP, None)}
  }
  #[inline]
  pub fn statBonusRateHeal(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHEAL, None)}
  }
  #[inline]
  pub fn recipeId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterTranscendenceExcel::VT_RECIPEID, None)}
  }
  #[inline]
  pub fn skillSlotA(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterTranscendenceExcel::VT_SKILLSLOTA, None)}
  }
  #[inline]
  pub fn skillSlotB(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterTranscendenceExcel::VT_SKILLSLOTB, None)}
  }
  #[inline]
  pub fn skillSlotC(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CharacterTranscendenceExcel::VT_SKILLSLOTC, None)}
  }
  #[inline]
  pub fn maxlevelStar(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(CharacterTranscendenceExcel::VT_MAXLEVELSTAR, None)}
  }
}

impl flatbuffers::Verifiable for CharacterTranscendenceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("maxFavorLevel", Self::VT_MAXFAVORLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("statBonusRateAttack", Self::VT_STATBONUSRATEATTACK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("statBonusRateHP", Self::VT_STATBONUSRATEHP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("statBonusRateHeal", Self::VT_STATBONUSRATEHEAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("recipeId", Self::VT_RECIPEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("skillSlotA", Self::VT_SKILLSLOTA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("skillSlotB", Self::VT_SKILLSLOTB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("skillSlotC", Self::VT_SKILLSLOTC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("maxlevelStar", Self::VT_MAXLEVELSTAR, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterTranscendenceExcelArgs<'a> {
    pub CharacterId: i64,
    pub maxFavorLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub statBonusRateAttack: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub statBonusRateHP: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub statBonusRateHeal: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub recipeId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub skillSlotA: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub skillSlotB: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub skillSlotC: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub maxlevelStar: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for CharacterTranscendenceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterTranscendenceExcelArgs {
      CharacterId: 0,
      maxFavorLevel: None,
      statBonusRateAttack: None,
      statBonusRateHP: None,
      statBonusRateHeal: None,
      recipeId: None,
      skillSlotA: None,
      skillSlotB: None,
      skillSlotC: None,
      maxlevelStar: None,
    }
  }
}

impl Serialize for CharacterTranscendenceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterTranscendenceExcel", 10)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.maxFavorLevel() {
        s.serialize_field("maxFavorLevel", &f)?;
      } else {
        s.skip_field("maxFavorLevel")?;
      }
      if let Some(f) = self.statBonusRateAttack() {
        s.serialize_field("statBonusRateAttack", &f)?;
      } else {
        s.skip_field("statBonusRateAttack")?;
      }
      if let Some(f) = self.statBonusRateHP() {
        s.serialize_field("statBonusRateHP", &f)?;
      } else {
        s.skip_field("statBonusRateHP")?;
      }
      if let Some(f) = self.statBonusRateHeal() {
        s.serialize_field("statBonusRateHeal", &f)?;
      } else {
        s.skip_field("statBonusRateHeal")?;
      }
      if let Some(f) = self.recipeId() {
        s.serialize_field("recipeId", &f)?;
      } else {
        s.skip_field("recipeId")?;
      }
      if let Some(f) = self.skillSlotA() {
        s.serialize_field("skillSlotA", &f)?;
      } else {
        s.skip_field("skillSlotA")?;
      }
      if let Some(f) = self.skillSlotB() {
        s.serialize_field("skillSlotB", &f)?;
      } else {
        s.skip_field("skillSlotB")?;
      }
      if let Some(f) = self.skillSlotC() {
        s.serialize_field("skillSlotC", &f)?;
      } else {
        s.skip_field("skillSlotC")?;
      }
      if let Some(f) = self.maxlevelStar() {
        s.serialize_field("maxlevelStar", &f)?;
      } else {
        s.skip_field("maxlevelStar")?;
      }
    s.end()
  }
}

pub struct CharacterTranscendenceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterTranscendenceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(CharacterTranscendenceExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_maxFavorLevel(&mut self, maxFavorLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_MAXFAVORLEVEL, maxFavorLevel);
  }
  #[inline]
  pub fn add_statBonusRateAttack(&mut self, statBonusRateAttack: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_STATBONUSRATEATTACK, statBonusRateAttack);
  }
  #[inline]
  pub fn add_statBonusRateHP(&mut self, statBonusRateHP: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHP, statBonusRateHP);
  }
  #[inline]
  pub fn add_statBonusRateHeal(&mut self, statBonusRateHeal: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_STATBONUSRATEHEAL, statBonusRateHeal);
  }
  #[inline]
  pub fn add_recipeId(&mut self, recipeId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_RECIPEID, recipeId);
  }
  #[inline]
  pub fn add_skillSlotA(&mut self, skillSlotA: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_SKILLSLOTA, skillSlotA);
  }
  #[inline]
  pub fn add_skillSlotB(&mut self, skillSlotB: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_SKILLSLOTB, skillSlotB);
  }
  #[inline]
  pub fn add_skillSlotC(&mut self, skillSlotC: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_SKILLSLOTC, skillSlotC);
  }
  #[inline]
  pub fn add_maxlevelStar(&mut self, maxlevelStar: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterTranscendenceExcel::VT_MAXLEVELSTAR, maxlevelStar);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterTranscendenceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterTranscendenceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterTranscendenceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterTranscendenceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterTranscendenceExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("maxFavorLevel", &self.maxFavorLevel());
      ds.field("statBonusRateAttack", &self.statBonusRateAttack());
      ds.field("statBonusRateHP", &self.statBonusRateHP());
      ds.field("statBonusRateHeal", &self.statBonusRateHeal());
      ds.field("recipeId", &self.recipeId());
      ds.field("skillSlotA", &self.skillSlotA());
      ds.field("skillSlotB", &self.skillSlotB());
      ds.field("skillSlotC", &self.skillSlotC());
      ds.field("maxlevelStar", &self.maxlevelStar());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterTranscendenceExcelT {
  pub CharacterId: i64,
  pub maxFavorLevel: Option<Vec<i32>>,
  pub statBonusRateAttack: Option<Vec<i64>>,
  pub statBonusRateHP: Option<Vec<i64>>,
  pub statBonusRateHeal: Option<Vec<i64>>,
  pub recipeId: Option<Vec<i64>>,
  pub skillSlotA: Option<Vec<String>>,
  pub skillSlotB: Option<Vec<String>>,
  pub skillSlotC: Option<Vec<String>>,
  pub maxlevelStar: Option<Vec<i32>>,
}
impl Default for CharacterTranscendenceExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      maxFavorLevel: None,
      statBonusRateAttack: None,
      statBonusRateHP: None,
      statBonusRateHeal: None,
      recipeId: None,
      skillSlotA: None,
      skillSlotB: None,
      skillSlotC: None,
      maxlevelStar: None,
    }
  }
}
impl CharacterTranscendenceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterTranscendenceExcel<'b>> {
    let CharacterId = self.CharacterId;
    let maxFavorLevel = self.maxFavorLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let statBonusRateAttack = self.statBonusRateAttack.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let statBonusRateHP = self.statBonusRateHP.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let statBonusRateHeal = self.statBonusRateHeal.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let recipeId = self.recipeId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let skillSlotA = self.skillSlotA.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let skillSlotB = self.skillSlotB.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let skillSlotC = self.skillSlotC.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let maxlevelStar = self.maxlevelStar.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CharacterTranscendenceExcel::create(_fbb, &CharacterTranscendenceExcelArgs{
      CharacterId,
      maxFavorLevel,
      statBonusRateAttack,
      statBonusRateHP,
      statBonusRateHeal,
      recipeId,
      skillSlotA,
      skillSlotB,
      skillSlotC,
      maxlevelStar,
    })
  }
}
