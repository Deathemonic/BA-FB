// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentMeetupInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentMeetupInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentMeetupInfoExcel<'a> {
  type Inner = EventContentMeetupInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentMeetupInfoExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_COSTPARCELTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_COSTID: flatbuffers::VOffsetT = 8;
  pub const VT_COSTAMOUNT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentMeetupInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentMeetupInfoExcelArgs
  ) -> flatbuffers::WIPOffset<EventContentMeetupInfoExcel<'bldr>> {
    let mut builder = EventContentMeetupInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentMeetupInfo");
      let x = args.CostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.CostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CostAmount(x);
      let x = args.CostParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CostParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentMeetupInfoExcelT {
    let key = table_encryption_service::create_key(b"EventContentMeetupInfo");
      let EventContentId = self.EventContentId();
      let CostParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CostParcelType(), &key)
      } else {
        self.CostParcelType()
      };
      let CostId = self.CostId();
      let CostAmount = self.CostAmount();
    EventContentMeetupInfoExcelT {
      EventContentId,
      CostParcelType,
      CostId,
      CostAmount,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMeetupInfoExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(EventContentMeetupInfoExcel::VT_COSTPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn CostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMeetupInfoExcel::VT_COSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentMeetupInfoExcel::VT_COSTAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentMeetupInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<ParcelType>("CostParcelType", Self::VT_COSTPARCELTYPE, false)?
     .visit_field::<i64>("CostId", Self::VT_COSTID, false)?
     .visit_field::<i32>("CostAmount", Self::VT_COSTAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentMeetupInfoExcelArgs {
    pub EventContentId: i64,
    pub CostParcelType: ParcelType,
    pub CostId: i64,
    pub CostAmount: i32,
}
impl<'a> Default for EventContentMeetupInfoExcelArgs {
  #[inline]
  fn default() -> Self {
    EventContentMeetupInfoExcelArgs {
      EventContentId: 0,
      CostParcelType: ParcelType::None,
      CostId: 0,
      CostAmount: 0,
    }
  }
}

impl Serialize for EventContentMeetupInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentMeetupInfoExcel", 4)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("CostParcelType", &self.CostParcelType())?;
      s.serialize_field("CostId", &self.CostId())?;
      s.serialize_field("CostAmount", &self.CostAmount())?;
    s.end()
  }
}

pub struct EventContentMeetupInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentMeetupInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentMeetupInfoExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_CostParcelType(&mut self, CostParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(EventContentMeetupInfoExcel::VT_COSTPARCELTYPE, CostParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_CostId(&mut self, CostId: i64) {
    self.fbb_.push_slot::<i64>(EventContentMeetupInfoExcel::VT_COSTID, CostId, 0);
  }
  #[inline]
  pub fn add_CostAmount(&mut self, CostAmount: i32) {
    self.fbb_.push_slot::<i32>(EventContentMeetupInfoExcel::VT_COSTAMOUNT, CostAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentMeetupInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentMeetupInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentMeetupInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentMeetupInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentMeetupInfoExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("CostParcelType", &self.CostParcelType());
      ds.field("CostId", &self.CostId());
      ds.field("CostAmount", &self.CostAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentMeetupInfoExcelT {
  pub EventContentId: i64,
  pub CostParcelType: ParcelType,
  pub CostId: i64,
  pub CostAmount: i32,
}
impl Default for EventContentMeetupInfoExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      CostParcelType: ParcelType::None,
      CostId: 0,
      CostAmount: 0,
    }
  }
}
impl EventContentMeetupInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentMeetupInfoExcel<'b>> {
    let EventContentId = self.EventContentId;
    let CostParcelType = self.CostParcelType;
    let CostId = self.CostId;
    let CostAmount = self.CostAmount;
    EventContentMeetupInfoExcel::create(_fbb, &EventContentMeetupInfoExcelArgs{
      EventContentId,
      CostParcelType,
      CostId,
      CostAmount,
    })
  }
}
