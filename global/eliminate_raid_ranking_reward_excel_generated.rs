// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EliminateRaidRankingRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EliminateRaidRankingRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EliminateRaidRankingRewardExcel<'a> {
  type Inner = EliminateRaidRankingRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EliminateRaidRankingRewardExcel<'a> {
  pub const VT_RANKINGREWARDGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_RANKSTART: flatbuffers::VOffsetT = 8;
  pub const VT_RANKEND: flatbuffers::VOffsetT = 10;
  pub const VT_RANKSTARTTW: flatbuffers::VOffsetT = 12;
  pub const VT_RANKENDTW: flatbuffers::VOffsetT = 14;
  pub const VT_RANKSTARTASIA: flatbuffers::VOffsetT = 16;
  pub const VT_RANKENDASIA: flatbuffers::VOffsetT = 18;
  pub const VT_RANKSTARTNA: flatbuffers::VOffsetT = 20;
  pub const VT_RANKENDNA: flatbuffers::VOffsetT = 22;
  pub const VT_RANKSTARTGLOBAL: flatbuffers::VOffsetT = 24;
  pub const VT_RANKENDGLOBAL: flatbuffers::VOffsetT = 26;
  pub const VT_PERCENTRANKSTART: flatbuffers::VOffsetT = 28;
  pub const VT_PERCENTRANKEND: flatbuffers::VOffsetT = 30;
  pub const VT_TIER: flatbuffers::VOffsetT = 32;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 34;
  pub const VT_REWARDPARCELUNIQUEID: flatbuffers::VOffsetT = 36;
  pub const VT_REWARDPARCELUNIQUENAME: flatbuffers::VOffsetT = 38;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EliminateRaidRankingRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EliminateRaidRankingRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EliminateRaidRankingRewardExcel<'bldr>> {
    let mut builder = EliminateRaidRankingRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EliminateRaidRankingReward");
      let x = args.PercentRankEnd;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PercentRankEnd(x);
      let x = args.PercentRankStart;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PercentRankStart(x);
      let x = args.RankEndGlobal;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankEndGlobal(x);
      let x = args.RankStartGlobal;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankStartGlobal(x);
      let x = args.RankEndNa;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankEndNa(x);
      let x = args.RankStartNa;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankStartNa(x);
      let x = args.RankEndAsia;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankEndAsia(x);
      let x = args.RankStartAsia;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankStartAsia(x);
      let x = args.RankEndTw;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankEndTw(x);
      let x = args.RankStartTw;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankStartTw(x);
      let x = args.RankEnd;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankEnd(x);
      let x = args.RankStart;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankStart(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.RankingRewardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankingRewardGroupId(x);
      if let Some(x) = args.RewardParcelAmount {
        builder.add_RewardParcelAmount(x);
      }
      if let Some(x) = args.RewardParcelUniqueName {
        builder.add_RewardParcelUniqueName(x);
      }
      if let Some(x) = args.RewardParcelUniqueId {
        builder.add_RewardParcelUniqueId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      let x = args.Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Tier(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EliminateRaidRankingRewardExcelT {
    let key = table_encryption_service::create_key(b"EliminateRaidRankingReward");
      let RankingRewardGroupId = self.RankingRewardGroupId();
      let Id = self.Id();
      let RankStart = self.RankStart();
      let RankEnd = self.RankEnd();
      let RankStartTw = self.RankStartTw();
      let RankEndTw = self.RankEndTw();
      let RankStartAsia = self.RankStartAsia();
      let RankEndAsia = self.RankEndAsia();
      let RankStartNa = self.RankStartNa();
      let RankEndNa = self.RankEndNa();
      let RankStartGlobal = self.RankStartGlobal();
      let RankEndGlobal = self.RankEndGlobal();
      let PercentRankStart = self.PercentRankStart();
      let PercentRankEnd = self.PercentRankEnd();
      let Tier = self.Tier();
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelUniqueId = self.RewardParcelUniqueId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelUniqueName = self.RewardParcelUniqueName().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let RewardParcelAmount = self.RewardParcelAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EliminateRaidRankingRewardExcelT {
      RankingRewardGroupId,
      Id,
      RankStart,
      RankEnd,
      RankStartTw,
      RankEndTw,
      RankStartAsia,
      RankEndAsia,
      RankStartNa,
      RankEndNa,
      RankStartGlobal,
      RankEndGlobal,
      PercentRankStart,
      PercentRankEnd,
      Tier,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelUniqueName,
      RewardParcelAmount,
    }
  }

  #[inline]
  pub fn RankingRewardGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKINGREWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankStart(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTART, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankEnd(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKEND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankStartTw(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTTW, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankEndTw(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDTW, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankStartAsia(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTASIA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankEndAsia(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDASIA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankStartNa(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTNA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankEndNa(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDNA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankStartGlobal(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTGLOBAL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RankEndGlobal(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDGLOBAL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PercentRankStart(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_PERCENTRANKSTART, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PercentRankEnd(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EliminateRaidRankingRewardExcel::VT_PERCENTRANKEND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EliminateRaidRankingRewardExcel::VT_TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelUniqueId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELUNIQUEID, None)}
  }
  #[inline]
  pub fn RewardParcelUniqueName(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELUNIQUENAME, None)}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EliminateRaidRankingRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("RankingRewardGroupId", Self::VT_RANKINGREWARDGROUPID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("RankStart", Self::VT_RANKSTART, false)?
     .visit_field::<i64>("RankEnd", Self::VT_RANKEND, false)?
     .visit_field::<i64>("RankStartTw", Self::VT_RANKSTARTTW, false)?
     .visit_field::<i64>("RankEndTw", Self::VT_RANKENDTW, false)?
     .visit_field::<i64>("RankStartAsia", Self::VT_RANKSTARTASIA, false)?
     .visit_field::<i64>("RankEndAsia", Self::VT_RANKENDASIA, false)?
     .visit_field::<i64>("RankStartNa", Self::VT_RANKSTARTNA, false)?
     .visit_field::<i64>("RankEndNa", Self::VT_RANKENDNA, false)?
     .visit_field::<i64>("RankStartGlobal", Self::VT_RANKSTARTGLOBAL, false)?
     .visit_field::<i64>("RankEndGlobal", Self::VT_RANKENDGLOBAL, false)?
     .visit_field::<i64>("PercentRankStart", Self::VT_PERCENTRANKSTART, false)?
     .visit_field::<i64>("PercentRankEnd", Self::VT_PERCENTRANKEND, false)?
     .visit_field::<i32>("Tier", Self::VT_TIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelUniqueId", Self::VT_REWARDPARCELUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("RewardParcelUniqueName", Self::VT_REWARDPARCELUNIQUENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EliminateRaidRankingRewardExcelArgs<'a> {
    pub RankingRewardGroupId: i64,
    pub Id: i64,
    pub RankStart: i64,
    pub RankEnd: i64,
    pub RankStartTw: i64,
    pub RankEndTw: i64,
    pub RankStartAsia: i64,
    pub RankEndAsia: i64,
    pub RankStartNa: i64,
    pub RankEndNa: i64,
    pub RankStartGlobal: i64,
    pub RankEndGlobal: i64,
    pub PercentRankStart: i64,
    pub PercentRankEnd: i64,
    pub Tier: i32,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelUniqueId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelUniqueName: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub RewardParcelAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EliminateRaidRankingRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EliminateRaidRankingRewardExcelArgs {
      RankingRewardGroupId: 0,
      Id: 0,
      RankStart: 0,
      RankEnd: 0,
      RankStartTw: 0,
      RankEndTw: 0,
      RankStartAsia: 0,
      RankEndAsia: 0,
      RankStartNa: 0,
      RankEndNa: 0,
      RankStartGlobal: 0,
      RankEndGlobal: 0,
      PercentRankStart: 0,
      PercentRankEnd: 0,
      Tier: 0,
      RewardParcelType: None,
      RewardParcelUniqueId: None,
      RewardParcelUniqueName: None,
      RewardParcelAmount: None,
    }
  }
}

impl Serialize for EliminateRaidRankingRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EliminateRaidRankingRewardExcel", 19)?;
      s.serialize_field("RankingRewardGroupId", &self.RankingRewardGroupId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("RankStart", &self.RankStart())?;
      s.serialize_field("RankEnd", &self.RankEnd())?;
      s.serialize_field("RankStartTw", &self.RankStartTw())?;
      s.serialize_field("RankEndTw", &self.RankEndTw())?;
      s.serialize_field("RankStartAsia", &self.RankStartAsia())?;
      s.serialize_field("RankEndAsia", &self.RankEndAsia())?;
      s.serialize_field("RankStartNa", &self.RankStartNa())?;
      s.serialize_field("RankEndNa", &self.RankEndNa())?;
      s.serialize_field("RankStartGlobal", &self.RankStartGlobal())?;
      s.serialize_field("RankEndGlobal", &self.RankEndGlobal())?;
      s.serialize_field("PercentRankStart", &self.PercentRankStart())?;
      s.serialize_field("PercentRankEnd", &self.PercentRankEnd())?;
      s.serialize_field("Tier", &self.Tier())?;
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelUniqueId() {
        s.serialize_field("RewardParcelUniqueId", &f)?;
      } else {
        s.skip_field("RewardParcelUniqueId")?;
      }
      if let Some(f) = self.RewardParcelUniqueName() {
        s.serialize_field("RewardParcelUniqueName", &f)?;
      } else {
        s.skip_field("RewardParcelUniqueName")?;
      }
      if let Some(f) = self.RewardParcelAmount() {
        s.serialize_field("RewardParcelAmount", &f)?;
      } else {
        s.skip_field("RewardParcelAmount")?;
      }
    s.end()
  }
}

pub struct EliminateRaidRankingRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EliminateRaidRankingRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_RankingRewardGroupId(&mut self, RankingRewardGroupId: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKINGREWARDGROUPID, RankingRewardGroupId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_RankStart(&mut self, RankStart: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTART, RankStart, 0);
  }
  #[inline]
  pub fn add_RankEnd(&mut self, RankEnd: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKEND, RankEnd, 0);
  }
  #[inline]
  pub fn add_RankStartTw(&mut self, RankStartTw: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTTW, RankStartTw, 0);
  }
  #[inline]
  pub fn add_RankEndTw(&mut self, RankEndTw: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDTW, RankEndTw, 0);
  }
  #[inline]
  pub fn add_RankStartAsia(&mut self, RankStartAsia: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTASIA, RankStartAsia, 0);
  }
  #[inline]
  pub fn add_RankEndAsia(&mut self, RankEndAsia: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDASIA, RankEndAsia, 0);
  }
  #[inline]
  pub fn add_RankStartNa(&mut self, RankStartNa: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTNA, RankStartNa, 0);
  }
  #[inline]
  pub fn add_RankEndNa(&mut self, RankEndNa: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDNA, RankEndNa, 0);
  }
  #[inline]
  pub fn add_RankStartGlobal(&mut self, RankStartGlobal: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKSTARTGLOBAL, RankStartGlobal, 0);
  }
  #[inline]
  pub fn add_RankEndGlobal(&mut self, RankEndGlobal: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_RANKENDGLOBAL, RankEndGlobal, 0);
  }
  #[inline]
  pub fn add_PercentRankStart(&mut self, PercentRankStart: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_PERCENTRANKSTART, PercentRankStart, 0);
  }
  #[inline]
  pub fn add_PercentRankEnd(&mut self, PercentRankEnd: i64) {
    self.fbb_.push_slot::<i64>(EliminateRaidRankingRewardExcel::VT_PERCENTRANKEND, PercentRankEnd, 0);
  }
  #[inline]
  pub fn add_Tier(&mut self, Tier: i32) {
    self.fbb_.push_slot::<i32>(EliminateRaidRankingRewardExcel::VT_TIER, Tier, 0);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelUniqueId(&mut self, RewardParcelUniqueId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELUNIQUEID, RewardParcelUniqueId);
  }
  #[inline]
  pub fn add_RewardParcelUniqueName(&mut self, RewardParcelUniqueName: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELUNIQUENAME, RewardParcelUniqueName);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EliminateRaidRankingRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EliminateRaidRankingRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EliminateRaidRankingRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EliminateRaidRankingRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EliminateRaidRankingRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EliminateRaidRankingRewardExcel");
      ds.field("RankingRewardGroupId", &self.RankingRewardGroupId());
      ds.field("Id", &self.Id());
      ds.field("RankStart", &self.RankStart());
      ds.field("RankEnd", &self.RankEnd());
      ds.field("RankStartTw", &self.RankStartTw());
      ds.field("RankEndTw", &self.RankEndTw());
      ds.field("RankStartAsia", &self.RankStartAsia());
      ds.field("RankEndAsia", &self.RankEndAsia());
      ds.field("RankStartNa", &self.RankStartNa());
      ds.field("RankEndNa", &self.RankEndNa());
      ds.field("RankStartGlobal", &self.RankStartGlobal());
      ds.field("RankEndGlobal", &self.RankEndGlobal());
      ds.field("PercentRankStart", &self.PercentRankStart());
      ds.field("PercentRankEnd", &self.PercentRankEnd());
      ds.field("Tier", &self.Tier());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelUniqueId", &self.RewardParcelUniqueId());
      ds.field("RewardParcelUniqueName", &self.RewardParcelUniqueName());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EliminateRaidRankingRewardExcelT {
  pub RankingRewardGroupId: i64,
  pub Id: i64,
  pub RankStart: i64,
  pub RankEnd: i64,
  pub RankStartTw: i64,
  pub RankEndTw: i64,
  pub RankStartAsia: i64,
  pub RankEndAsia: i64,
  pub RankStartNa: i64,
  pub RankEndNa: i64,
  pub RankStartGlobal: i64,
  pub RankEndGlobal: i64,
  pub PercentRankStart: i64,
  pub PercentRankEnd: i64,
  pub Tier: i32,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelUniqueId: Option<Vec<i64>>,
  pub RewardParcelUniqueName: Option<Vec<String>>,
  pub RewardParcelAmount: Option<Vec<i64>>,
}
impl Default for EliminateRaidRankingRewardExcelT {
  fn default() -> Self {
    Self {
      RankingRewardGroupId: 0,
      Id: 0,
      RankStart: 0,
      RankEnd: 0,
      RankStartTw: 0,
      RankEndTw: 0,
      RankStartAsia: 0,
      RankEndAsia: 0,
      RankStartNa: 0,
      RankEndNa: 0,
      RankStartGlobal: 0,
      RankEndGlobal: 0,
      PercentRankStart: 0,
      PercentRankEnd: 0,
      Tier: 0,
      RewardParcelType: None,
      RewardParcelUniqueId: None,
      RewardParcelUniqueName: None,
      RewardParcelAmount: None,
    }
  }
}
impl EliminateRaidRankingRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EliminateRaidRankingRewardExcel<'b>> {
    let RankingRewardGroupId = self.RankingRewardGroupId;
    let Id = self.Id;
    let RankStart = self.RankStart;
    let RankEnd = self.RankEnd;
    let RankStartTw = self.RankStartTw;
    let RankEndTw = self.RankEndTw;
    let RankStartAsia = self.RankStartAsia;
    let RankEndAsia = self.RankEndAsia;
    let RankStartNa = self.RankStartNa;
    let RankEndNa = self.RankEndNa;
    let RankStartGlobal = self.RankStartGlobal;
    let RankEndGlobal = self.RankEndGlobal;
    let PercentRankStart = self.PercentRankStart;
    let PercentRankEnd = self.PercentRankEnd;
    let Tier = self.Tier;
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelUniqueId = self.RewardParcelUniqueId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelUniqueName = self.RewardParcelUniqueName.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let RewardParcelAmount = self.RewardParcelAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EliminateRaidRankingRewardExcel::create(_fbb, &EliminateRaidRankingRewardExcelArgs{
      RankingRewardGroupId,
      Id,
      RankStart,
      RankEnd,
      RankStartTw,
      RankEndTw,
      RankStartAsia,
      RankEndAsia,
      RankStartNa,
      RankEndNa,
      RankStartGlobal,
      RankEndGlobal,
      PercentRankStart,
      PercentRankEnd,
      Tier,
      RewardParcelType,
      RewardParcelUniqueId,
      RewardParcelUniqueName,
      RewardParcelAmount,
    })
  }
}
