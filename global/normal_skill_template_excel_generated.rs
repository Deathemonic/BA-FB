// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum NormalSkillTemplateExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NormalSkillTemplateExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NormalSkillTemplateExcel<'a> {
  type Inner = NormalSkillTemplateExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NormalSkillTemplateExcel<'a> {
  pub const VT_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_FIRSTCOOLTIME: flatbuffers::VOffsetT = 6;
  pub const VT_COOLTIME: flatbuffers::VOffsetT = 8;
  pub const VT_MULTIANI: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NormalSkillTemplateExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NormalSkillTemplateExcelArgs
  ) -> flatbuffers::WIPOffset<NormalSkillTemplateExcel<'bldr>> {
    let mut builder = NormalSkillTemplateExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"NormalSkillTemplate");
      let x = args.Index;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Index(x);
      let x = args.CoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_CoolTime(x);
      let x = args.FirstCoolTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_FirstCoolTime(x);
      builder.add_MultiAni(args.MultiAni);
    builder.finish()
  }

  pub fn unpack(&self) -> NormalSkillTemplateExcelT {
    let key = table_encryption_service::create_key(b"NormalSkillTemplate");
      let Index = self.Index();
      let FirstCoolTime = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.FirstCoolTime(), &key)
      } else {
        self.FirstCoolTime()
      };
      let CoolTime = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.CoolTime(), &key)
      } else {
        self.CoolTime()
      };
      let MultiAni = self.MultiAni();
    NormalSkillTemplateExcelT {
      Index,
      FirstCoolTime,
      CoolTime,
      MultiAni,
    }
  }

  #[inline]
  pub fn Index(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(NormalSkillTemplateExcel::VT_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FirstCoolTime(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(NormalSkillTemplateExcel::VT_FIRSTCOOLTIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn CoolTime(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(NormalSkillTemplateExcel::VT_COOLTIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn MultiAni(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(NormalSkillTemplateExcel::VT_MULTIANI, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for NormalSkillTemplateExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Index", Self::VT_INDEX, false)?
     .visit_field::<f32>("FirstCoolTime", Self::VT_FIRSTCOOLTIME, false)?
     .visit_field::<f32>("CoolTime", Self::VT_COOLTIME, false)?
     .visit_field::<bool>("MultiAni", Self::VT_MULTIANI, false)?
     .finish();
    Ok(())
  }
}
pub struct NormalSkillTemplateExcelArgs {
    pub Index: i64,
    pub FirstCoolTime: f32,
    pub CoolTime: f32,
    pub MultiAni: bool,
}
impl<'a> Default for NormalSkillTemplateExcelArgs {
  #[inline]
  fn default() -> Self {
    NormalSkillTemplateExcelArgs {
      Index: 0,
      FirstCoolTime: 0.0,
      CoolTime: 0.0,
      MultiAni: false,
    }
  }
}

impl Serialize for NormalSkillTemplateExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("NormalSkillTemplateExcel", 4)?;
      s.serialize_field("Index", &self.Index())?;
      s.serialize_field("FirstCoolTime", &self.FirstCoolTime())?;
      s.serialize_field("CoolTime", &self.CoolTime())?;
      s.serialize_field("MultiAni", &self.MultiAni())?;
    s.end()
  }
}

pub struct NormalSkillTemplateExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NormalSkillTemplateExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Index(&mut self, Index: i64) {
    self.fbb_.push_slot::<i64>(NormalSkillTemplateExcel::VT_INDEX, Index, 0);
  }
  #[inline]
  pub fn add_FirstCoolTime(&mut self, FirstCoolTime: f32) {
    self.fbb_.push_slot::<f32>(NormalSkillTemplateExcel::VT_FIRSTCOOLTIME, FirstCoolTime, 0.0);
  }
  #[inline]
  pub fn add_CoolTime(&mut self, CoolTime: f32) {
    self.fbb_.push_slot::<f32>(NormalSkillTemplateExcel::VT_COOLTIME, CoolTime, 0.0);
  }
  #[inline]
  pub fn add_MultiAni(&mut self, MultiAni: bool) {
    self.fbb_.push_slot::<bool>(NormalSkillTemplateExcel::VT_MULTIANI, MultiAni, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NormalSkillTemplateExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NormalSkillTemplateExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NormalSkillTemplateExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NormalSkillTemplateExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NormalSkillTemplateExcel");
      ds.field("Index", &self.Index());
      ds.field("FirstCoolTime", &self.FirstCoolTime());
      ds.field("CoolTime", &self.CoolTime());
      ds.field("MultiAni", &self.MultiAni());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct NormalSkillTemplateExcelT {
  pub Index: i64,
  pub FirstCoolTime: f32,
  pub CoolTime: f32,
  pub MultiAni: bool,
}
impl Default for NormalSkillTemplateExcelT {
  fn default() -> Self {
    Self {
      Index: 0,
      FirstCoolTime: 0.0,
      CoolTime: 0.0,
      MultiAni: false,
    }
  }
}
impl NormalSkillTemplateExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<NormalSkillTemplateExcel<'b>> {
    let Index = self.Index;
    let FirstCoolTime = self.FirstCoolTime;
    let CoolTime = self.CoolTime;
    let MultiAni = self.MultiAni;
    NormalSkillTemplateExcel::create(_fbb, &NormalSkillTemplateExcelArgs{
      Index,
      FirstCoolTime,
      CoolTime,
      MultiAni,
    })
  }
}
