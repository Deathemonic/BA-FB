// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentBuffGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentBuffGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentBuffGroupExcel<'a> {
  type Inner = EventContentBuffGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentBuffGroupExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_BUFFCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_BUFFGROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_BUFFGROUPNAMELOCALIZECODEID: flatbuffers::VOffsetT = 10;
  pub const VT_EVENTCONTENTBUFFID1: flatbuffers::VOffsetT = 12;
  pub const VT_BUFFNAMELOCALIZECODEID1: flatbuffers::VOffsetT = 14;
  pub const VT_BUFFDESCRIPTIONICONPATH1: flatbuffers::VOffsetT = 16;
  pub const VT_EVENTCONTENTBUFFID2: flatbuffers::VOffsetT = 18;
  pub const VT_BUFFNAMELOCALIZECODEID2: flatbuffers::VOffsetT = 20;
  pub const VT_BUFFDESCRIPTIONICONPATH2: flatbuffers::VOffsetT = 22;
  pub const VT_EVENTCONTENTDEBUFFID: flatbuffers::VOffsetT = 24;
  pub const VT_DEBUFFNAMELOCALIZECODEID: flatbuffers::VOffsetT = 26;
  pub const VT_DEBUFFDESCRIPTIONICONPATH: flatbuffers::VOffsetT = 28;
  pub const VT_BUFFGROUPPROB: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentBuffGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentBuffGroupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentBuffGroupExcel<'bldr>> {
    let mut builder = EventContentBuffGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentBuffGroup");
      let x = args.BuffGroupProb;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BuffGroupProb(x);
      let x = args.EventContentDebuffId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentDebuffId(x);
      let x = args.EventContentBuffId2;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentBuffId2(x);
      let x = args.EventContentBuffId1;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentBuffId1(x);
      let x = args.BuffGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BuffGroupId(x);
      let x = args.BuffContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BuffContentId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.DeBuffDescriptionIconPath {
        builder.add_DeBuffDescriptionIconPath(x);
      }
      if let Some(x) = args.DebuffNameLocalizeCodeId {
        builder.add_DebuffNameLocalizeCodeId(x);
      }
      if let Some(x) = args.BuffDescriptionIconPath2 {
        builder.add_BuffDescriptionIconPath2(x);
      }
      if let Some(x) = args.BuffNameLocalizeCodeId2 {
        builder.add_BuffNameLocalizeCodeId2(x);
      }
      if let Some(x) = args.BuffDescriptionIconPath1 {
        builder.add_BuffDescriptionIconPath1(x);
      }
      if let Some(x) = args.BuffNameLocalizeCodeId1 {
        builder.add_BuffNameLocalizeCodeId1(x);
      }
      if let Some(x) = args.BuffGroupNameLocalizeCodeId {
        builder.add_BuffGroupNameLocalizeCodeId(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentBuffGroupExcelT {
    let key = table_encryption_service::create_key(b"EventContentBuffGroup");
      let EventContentId = self.EventContentId();
      let BuffContentId = self.BuffContentId();
      let BuffGroupId = self.BuffGroupId();
    let BuffGroupNameLocalizeCodeId = self.BuffGroupNameLocalizeCodeId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventContentBuffId1 = self.EventContentBuffId1();
    let BuffNameLocalizeCodeId1 = self.BuffNameLocalizeCodeId1().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BuffDescriptionIconPath1 = self.BuffDescriptionIconPath1().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventContentBuffId2 = self.EventContentBuffId2();
    let BuffNameLocalizeCodeId2 = self.BuffNameLocalizeCodeId2().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BuffDescriptionIconPath2 = self.BuffDescriptionIconPath2().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventContentDebuffId = self.EventContentDebuffId();
    let DebuffNameLocalizeCodeId = self.DebuffNameLocalizeCodeId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DeBuffDescriptionIconPath = self.DeBuffDescriptionIconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BuffGroupProb = self.BuffGroupProb();
    EventContentBuffGroupExcelT {
      EventContentId,
      BuffContentId,
      BuffGroupId,
      BuffGroupNameLocalizeCodeId,
      EventContentBuffId1,
      BuffNameLocalizeCodeId1,
      BuffDescriptionIconPath1,
      EventContentBuffId2,
      BuffNameLocalizeCodeId2,
      BuffDescriptionIconPath2,
      EventContentDebuffId,
      DebuffNameLocalizeCodeId,
      DeBuffDescriptionIconPath,
      BuffGroupProb,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuffContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffGroupExcel::VT_BUFFCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuffGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffGroupExcel::VT_BUFFGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuffGroupNameLocalizeCodeId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffGroupExcel::VT_BUFFGROUPNAMELOCALIZECODEID, None)}
  }
  #[inline]
  pub fn EventContentBuffId1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTBUFFID1, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuffNameLocalizeCodeId1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffGroupExcel::VT_BUFFNAMELOCALIZECODEID1, None)}
  }
  #[inline]
  pub fn BuffDescriptionIconPath1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffGroupExcel::VT_BUFFDESCRIPTIONICONPATH1, None)}
  }
  #[inline]
  pub fn EventContentBuffId2(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTBUFFID2, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuffNameLocalizeCodeId2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffGroupExcel::VT_BUFFNAMELOCALIZECODEID2, None)}
  }
  #[inline]
  pub fn BuffDescriptionIconPath2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffGroupExcel::VT_BUFFDESCRIPTIONICONPATH2, None)}
  }
  #[inline]
  pub fn EventContentDebuffId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTDEBUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DebuffNameLocalizeCodeId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffGroupExcel::VT_DEBUFFNAMELOCALIZECODEID, None)}
  }
  #[inline]
  pub fn DeBuffDescriptionIconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentBuffGroupExcel::VT_DEBUFFDESCRIPTIONICONPATH, None)}
  }
  #[inline]
  pub fn BuffGroupProb(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentBuffGroupExcel::VT_BUFFGROUPPROB, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentBuffGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("BuffContentId", Self::VT_BUFFCONTENTID, false)?
     .visit_field::<i64>("BuffGroupId", Self::VT_BUFFGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffGroupNameLocalizeCodeId", Self::VT_BUFFGROUPNAMELOCALIZECODEID, false)?
     .visit_field::<i64>("EventContentBuffId1", Self::VT_EVENTCONTENTBUFFID1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffNameLocalizeCodeId1", Self::VT_BUFFNAMELOCALIZECODEID1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffDescriptionIconPath1", Self::VT_BUFFDESCRIPTIONICONPATH1, false)?
     .visit_field::<i64>("EventContentBuffId2", Self::VT_EVENTCONTENTBUFFID2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffNameLocalizeCodeId2", Self::VT_BUFFNAMELOCALIZECODEID2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffDescriptionIconPath2", Self::VT_BUFFDESCRIPTIONICONPATH2, false)?
     .visit_field::<i64>("EventContentDebuffId", Self::VT_EVENTCONTENTDEBUFFID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DebuffNameLocalizeCodeId", Self::VT_DEBUFFNAMELOCALIZECODEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DeBuffDescriptionIconPath", Self::VT_DEBUFFDESCRIPTIONICONPATH, false)?
     .visit_field::<i64>("BuffGroupProb", Self::VT_BUFFGROUPPROB, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentBuffGroupExcelArgs<'a> {
    pub EventContentId: i64,
    pub BuffContentId: i64,
    pub BuffGroupId: i64,
    pub BuffGroupNameLocalizeCodeId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventContentBuffId1: i64,
    pub BuffNameLocalizeCodeId1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffDescriptionIconPath1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventContentBuffId2: i64,
    pub BuffNameLocalizeCodeId2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffDescriptionIconPath2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventContentDebuffId: i64,
    pub DebuffNameLocalizeCodeId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DeBuffDescriptionIconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffGroupProb: i64,
}
impl<'a> Default for EventContentBuffGroupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentBuffGroupExcelArgs {
      EventContentId: 0,
      BuffContentId: 0,
      BuffGroupId: 0,
      BuffGroupNameLocalizeCodeId: None,
      EventContentBuffId1: 0,
      BuffNameLocalizeCodeId1: None,
      BuffDescriptionIconPath1: None,
      EventContentBuffId2: 0,
      BuffNameLocalizeCodeId2: None,
      BuffDescriptionIconPath2: None,
      EventContentDebuffId: 0,
      DebuffNameLocalizeCodeId: None,
      DeBuffDescriptionIconPath: None,
      BuffGroupProb: 0,
    }
  }
}

impl Serialize for EventContentBuffGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentBuffGroupExcel", 14)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("BuffContentId", &self.BuffContentId())?;
      s.serialize_field("BuffGroupId", &self.BuffGroupId())?;
      if let Some(f) = self.BuffGroupNameLocalizeCodeId() {
        s.serialize_field("BuffGroupNameLocalizeCodeId", &f)?;
      } else {
        s.skip_field("BuffGroupNameLocalizeCodeId")?;
      }
      s.serialize_field("EventContentBuffId1", &self.EventContentBuffId1())?;
      if let Some(f) = self.BuffNameLocalizeCodeId1() {
        s.serialize_field("BuffNameLocalizeCodeId1", &f)?;
      } else {
        s.skip_field("BuffNameLocalizeCodeId1")?;
      }
      if let Some(f) = self.BuffDescriptionIconPath1() {
        s.serialize_field("BuffDescriptionIconPath1", &f)?;
      } else {
        s.skip_field("BuffDescriptionIconPath1")?;
      }
      s.serialize_field("EventContentBuffId2", &self.EventContentBuffId2())?;
      if let Some(f) = self.BuffNameLocalizeCodeId2() {
        s.serialize_field("BuffNameLocalizeCodeId2", &f)?;
      } else {
        s.skip_field("BuffNameLocalizeCodeId2")?;
      }
      if let Some(f) = self.BuffDescriptionIconPath2() {
        s.serialize_field("BuffDescriptionIconPath2", &f)?;
      } else {
        s.skip_field("BuffDescriptionIconPath2")?;
      }
      s.serialize_field("EventContentDebuffId", &self.EventContentDebuffId())?;
      if let Some(f) = self.DebuffNameLocalizeCodeId() {
        s.serialize_field("DebuffNameLocalizeCodeId", &f)?;
      } else {
        s.skip_field("DebuffNameLocalizeCodeId")?;
      }
      if let Some(f) = self.DeBuffDescriptionIconPath() {
        s.serialize_field("DeBuffDescriptionIconPath", &f)?;
      } else {
        s.skip_field("DeBuffDescriptionIconPath")?;
      }
      s.serialize_field("BuffGroupProb", &self.BuffGroupProb())?;
    s.end()
  }
}

pub struct EventContentBuffGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentBuffGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_BuffContentId(&mut self, BuffContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffGroupExcel::VT_BUFFCONTENTID, BuffContentId, 0);
  }
  #[inline]
  pub fn add_BuffGroupId(&mut self, BuffGroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffGroupExcel::VT_BUFFGROUPID, BuffGroupId, 0);
  }
  #[inline]
  pub fn add_BuffGroupNameLocalizeCodeId(&mut self, BuffGroupNameLocalizeCodeId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffGroupExcel::VT_BUFFGROUPNAMELOCALIZECODEID, BuffGroupNameLocalizeCodeId);
  }
  #[inline]
  pub fn add_EventContentBuffId1(&mut self, EventContentBuffId1: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTBUFFID1, EventContentBuffId1, 0);
  }
  #[inline]
  pub fn add_BuffNameLocalizeCodeId1(&mut self, BuffNameLocalizeCodeId1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffGroupExcel::VT_BUFFNAMELOCALIZECODEID1, BuffNameLocalizeCodeId1);
  }
  #[inline]
  pub fn add_BuffDescriptionIconPath1(&mut self, BuffDescriptionIconPath1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffGroupExcel::VT_BUFFDESCRIPTIONICONPATH1, BuffDescriptionIconPath1);
  }
  #[inline]
  pub fn add_EventContentBuffId2(&mut self, EventContentBuffId2: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTBUFFID2, EventContentBuffId2, 0);
  }
  #[inline]
  pub fn add_BuffNameLocalizeCodeId2(&mut self, BuffNameLocalizeCodeId2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffGroupExcel::VT_BUFFNAMELOCALIZECODEID2, BuffNameLocalizeCodeId2);
  }
  #[inline]
  pub fn add_BuffDescriptionIconPath2(&mut self, BuffDescriptionIconPath2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffGroupExcel::VT_BUFFDESCRIPTIONICONPATH2, BuffDescriptionIconPath2);
  }
  #[inline]
  pub fn add_EventContentDebuffId(&mut self, EventContentDebuffId: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffGroupExcel::VT_EVENTCONTENTDEBUFFID, EventContentDebuffId, 0);
  }
  #[inline]
  pub fn add_DebuffNameLocalizeCodeId(&mut self, DebuffNameLocalizeCodeId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffGroupExcel::VT_DEBUFFNAMELOCALIZECODEID, DebuffNameLocalizeCodeId);
  }
  #[inline]
  pub fn add_DeBuffDescriptionIconPath(&mut self, DeBuffDescriptionIconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentBuffGroupExcel::VT_DEBUFFDESCRIPTIONICONPATH, DeBuffDescriptionIconPath);
  }
  #[inline]
  pub fn add_BuffGroupProb(&mut self, BuffGroupProb: i64) {
    self.fbb_.push_slot::<i64>(EventContentBuffGroupExcel::VT_BUFFGROUPPROB, BuffGroupProb, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentBuffGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentBuffGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentBuffGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentBuffGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentBuffGroupExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("BuffContentId", &self.BuffContentId());
      ds.field("BuffGroupId", &self.BuffGroupId());
      ds.field("BuffGroupNameLocalizeCodeId", &self.BuffGroupNameLocalizeCodeId());
      ds.field("EventContentBuffId1", &self.EventContentBuffId1());
      ds.field("BuffNameLocalizeCodeId1", &self.BuffNameLocalizeCodeId1());
      ds.field("BuffDescriptionIconPath1", &self.BuffDescriptionIconPath1());
      ds.field("EventContentBuffId2", &self.EventContentBuffId2());
      ds.field("BuffNameLocalizeCodeId2", &self.BuffNameLocalizeCodeId2());
      ds.field("BuffDescriptionIconPath2", &self.BuffDescriptionIconPath2());
      ds.field("EventContentDebuffId", &self.EventContentDebuffId());
      ds.field("DebuffNameLocalizeCodeId", &self.DebuffNameLocalizeCodeId());
      ds.field("DeBuffDescriptionIconPath", &self.DeBuffDescriptionIconPath());
      ds.field("BuffGroupProb", &self.BuffGroupProb());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentBuffGroupExcelT {
  pub EventContentId: i64,
  pub BuffContentId: i64,
  pub BuffGroupId: i64,
  pub BuffGroupNameLocalizeCodeId: Option<String>,
  pub EventContentBuffId1: i64,
  pub BuffNameLocalizeCodeId1: Option<String>,
  pub BuffDescriptionIconPath1: Option<String>,
  pub EventContentBuffId2: i64,
  pub BuffNameLocalizeCodeId2: Option<String>,
  pub BuffDescriptionIconPath2: Option<String>,
  pub EventContentDebuffId: i64,
  pub DebuffNameLocalizeCodeId: Option<String>,
  pub DeBuffDescriptionIconPath: Option<String>,
  pub BuffGroupProb: i64,
}
impl Default for EventContentBuffGroupExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      BuffContentId: 0,
      BuffGroupId: 0,
      BuffGroupNameLocalizeCodeId: None,
      EventContentBuffId1: 0,
      BuffNameLocalizeCodeId1: None,
      BuffDescriptionIconPath1: None,
      EventContentBuffId2: 0,
      BuffNameLocalizeCodeId2: None,
      BuffDescriptionIconPath2: None,
      EventContentDebuffId: 0,
      DebuffNameLocalizeCodeId: None,
      DeBuffDescriptionIconPath: None,
      BuffGroupProb: 0,
    }
  }
}
impl EventContentBuffGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentBuffGroupExcel<'b>> {
    let EventContentId = self.EventContentId;
    let BuffContentId = self.BuffContentId;
    let BuffGroupId = self.BuffGroupId;
    let BuffGroupNameLocalizeCodeId = self.BuffGroupNameLocalizeCodeId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventContentBuffId1 = self.EventContentBuffId1;
    let BuffNameLocalizeCodeId1 = self.BuffNameLocalizeCodeId1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffDescriptionIconPath1 = self.BuffDescriptionIconPath1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventContentBuffId2 = self.EventContentBuffId2;
    let BuffNameLocalizeCodeId2 = self.BuffNameLocalizeCodeId2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffDescriptionIconPath2 = self.BuffDescriptionIconPath2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventContentDebuffId = self.EventContentDebuffId;
    let DebuffNameLocalizeCodeId = self.DebuffNameLocalizeCodeId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DeBuffDescriptionIconPath = self.DeBuffDescriptionIconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffGroupProb = self.BuffGroupProb;
    EventContentBuffGroupExcel::create(_fbb, &EventContentBuffGroupExcelArgs{
      EventContentId,
      BuffContentId,
      BuffGroupId,
      BuffGroupNameLocalizeCodeId,
      EventContentBuffId1,
      BuffNameLocalizeCodeId1,
      BuffDescriptionIconPath1,
      EventContentBuffId2,
      BuffNameLocalizeCodeId2,
      BuffDescriptionIconPath2,
      EventContentDebuffId,
      DebuffNameLocalizeCodeId,
      DeBuffDescriptionIconPath,
      BuffGroupProb,
    })
  }
}
