// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AttendanceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AttendanceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AttendanceExcel<'a> {
  type Inner = AttendanceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AttendanceExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_COUNTDOWNPREFAB: flatbuffers::VOffsetT = 8;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 10;
  pub const VT_ACCOUNTTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_ACCOUNTLEVELLIMIT: flatbuffers::VOffsetT = 14;
  pub const VT_TITLE: flatbuffers::VOffsetT = 16;
  pub const VT_INFOMATIONLOCALIZECODE: flatbuffers::VOffsetT = 18;
  pub const VT_COUNTRULE: flatbuffers::VOffsetT = 20;
  pub const VT_COUNTRESET: flatbuffers::VOffsetT = 22;
  pub const VT_BOOKSIZE: flatbuffers::VOffsetT = 24;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 26;
  pub const VT_STARTABLEENDDATE: flatbuffers::VOffsetT = 28;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 30;
  pub const VT_EXPIRYDATE: flatbuffers::VOffsetT = 32;
  pub const VT_MAILTYPE: flatbuffers::VOffsetT = 34;
  pub const VT_DIALOGCATEGORY: flatbuffers::VOffsetT = 36;
  pub const VT_TITLEIMAGEPATH: flatbuffers::VOffsetT = 38;
  pub const VT_DECORATIONIMAGEPATH: flatbuffers::VOffsetT = 40;
  pub const VT_DECORATIONGARLANDIMAGEPATH: flatbuffers::VOffsetT = 42;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AttendanceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AttendanceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AttendanceExcel<'bldr>> {
    let mut builder = AttendanceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Attendance");
      let x = args.ExpiryDate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExpiryDate(x);
      let x = args.BookSize;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BookSize(x);
      let x = args.AccountLevelLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccountLevelLimit(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.DecorationGarlandImagePath {
        builder.add_DecorationGarlandImagePath(x);
      }
      if let Some(x) = args.DecorationImagePath {
        builder.add_DecorationImagePath(x);
      }
      if let Some(x) = args.TitleImagePath {
        builder.add_TitleImagePath(x);
      }
      let x = args.DialogCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DialogCategory(x);
      let x = args.MailType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MailType(x);
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.StartableEndDate {
        builder.add_StartableEndDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
      let x = args.CountReset;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CountReset(x);
      let x = args.CountRule;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CountRule(x);
      if let Some(x) = args.InfomationLocalizeCode {
        builder.add_InfomationLocalizeCode(x);
      }
      if let Some(x) = args.Title {
        builder.add_Title(x);
      }
      let x = args.AccountType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_AccountType(x);
      if let Some(x) = args.CountdownPrefab {
        builder.add_CountdownPrefab(x);
      }
      let x = args.Type;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Type(x);
    builder.finish()
  }

  pub fn unpack(&self) -> AttendanceExcelT {
    let key = table_encryption_service::create_key(b"Attendance");
      let Id = self.Id();
      let Type = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Type(), &key)
      } else {
        self.Type()
      };
    let CountdownPrefab = self.CountdownPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DisplayOrder = self.DisplayOrder();
      let AccountType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.AccountType(), &key)
      } else {
        self.AccountType()
      };
      let AccountLevelLimit = self.AccountLevelLimit();
    let Title = self.Title().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let InfomationLocalizeCode = self.InfomationLocalizeCode().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CountRule = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CountRule(), &key)
      } else {
        self.CountRule()
      };
      let CountReset = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CountReset(), &key)
      } else {
        self.CountReset()
      };
      let BookSize = self.BookSize();
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StartableEndDate = self.StartableEndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ExpiryDate = self.ExpiryDate();
      let MailType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MailType(), &key)
      } else {
        self.MailType()
      };
      let DialogCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DialogCategory(), &key)
      } else {
        self.DialogCategory()
      };
    let TitleImagePath = self.TitleImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DecorationImagePath = self.DecorationImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DecorationGarlandImagePath = self.DecorationGarlandImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    AttendanceExcelT {
      Id,
      Type,
      CountdownPrefab,
      DisplayOrder,
      AccountType,
      AccountLevelLimit,
      Title,
      InfomationLocalizeCode,
      CountRule,
      CountReset,
      BookSize,
      StartDate,
      StartableEndDate,
      EndDate,
      ExpiryDate,
      MailType,
      DialogCategory,
      TitleImagePath,
      DecorationImagePath,
      DecorationGarlandImagePath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AttendanceExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Type(&self) -> AttendanceType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AttendanceType>(AttendanceExcel::VT_TYPE, Some(AttendanceType::Basic)).unwrap()}
  }
  #[inline]
  pub fn CountdownPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_COUNTDOWNPREFAB, None)}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AttendanceExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AccountType(&self) -> AccountState {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AccountState>(AttendanceExcel::VT_ACCOUNTTYPE, Some(AccountState::WaitingSignIn)).unwrap()}
  }
  #[inline]
  pub fn AccountLevelLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AttendanceExcel::VT_ACCOUNTLEVELLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Title(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_TITLE, None)}
  }
  #[inline]
  pub fn InfomationLocalizeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_INFOMATIONLOCALIZECODE, None)}
  }
  #[inline]
  pub fn CountRule(&self) -> AttendanceCountRule {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AttendanceCountRule>(AttendanceExcel::VT_COUNTRULE, Some(AttendanceCountRule::Accumulation)).unwrap()}
  }
  #[inline]
  pub fn CountReset(&self) -> AttendanceResetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AttendanceResetType>(AttendanceExcel::VT_COUNTRESET, Some(AttendanceResetType::User)).unwrap()}
  }
  #[inline]
  pub fn BookSize(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AttendanceExcel::VT_BOOKSIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn StartableEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_STARTABLEENDDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn ExpiryDate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AttendanceExcel::VT_EXPIRYDATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MailType(&self) -> MailType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MailType>(AttendanceExcel::VT_MAILTYPE, Some(MailType::System)).unwrap()}
  }
  #[inline]
  pub fn DialogCategory(&self) -> DialogCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogCategory>(AttendanceExcel::VT_DIALOGCATEGORY, Some(DialogCategory::Cafe)).unwrap()}
  }
  #[inline]
  pub fn TitleImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_TITLEIMAGEPATH, None)}
  }
  #[inline]
  pub fn DecorationImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_DECORATIONIMAGEPATH, None)}
  }
  #[inline]
  pub fn DecorationGarlandImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceExcel::VT_DECORATIONGARLANDIMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for AttendanceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<AttendanceType>("Type", Self::VT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CountdownPrefab", Self::VT_COUNTDOWNPREFAB, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<AccountState>("AccountType", Self::VT_ACCOUNTTYPE, false)?
     .visit_field::<i64>("AccountLevelLimit", Self::VT_ACCOUNTLEVELLIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Title", Self::VT_TITLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("InfomationLocalizeCode", Self::VT_INFOMATIONLOCALIZECODE, false)?
     .visit_field::<AttendanceCountRule>("CountRule", Self::VT_COUNTRULE, false)?
     .visit_field::<AttendanceResetType>("CountReset", Self::VT_COUNTRESET, false)?
     .visit_field::<i64>("BookSize", Self::VT_BOOKSIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartableEndDate", Self::VT_STARTABLEENDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<i64>("ExpiryDate", Self::VT_EXPIRYDATE, false)?
     .visit_field::<MailType>("MailType", Self::VT_MAILTYPE, false)?
     .visit_field::<DialogCategory>("DialogCategory", Self::VT_DIALOGCATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleImagePath", Self::VT_TITLEIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DecorationImagePath", Self::VT_DECORATIONIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DecorationGarlandImagePath", Self::VT_DECORATIONGARLANDIMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct AttendanceExcelArgs<'a> {
    pub Id: i64,
    pub Type: AttendanceType,
    pub CountdownPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DisplayOrder: i64,
    pub AccountType: AccountState,
    pub AccountLevelLimit: i64,
    pub Title: Option<flatbuffers::WIPOffset<&'a str>>,
    pub InfomationLocalizeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CountRule: AttendanceCountRule,
    pub CountReset: AttendanceResetType,
    pub BookSize: i64,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StartableEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ExpiryDate: i64,
    pub MailType: MailType,
    pub DialogCategory: DialogCategory,
    pub TitleImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DecorationImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DecorationGarlandImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AttendanceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AttendanceExcelArgs {
      Id: 0,
      Type: AttendanceType::Basic,
      CountdownPrefab: None,
      DisplayOrder: 0,
      AccountType: AccountState::WaitingSignIn,
      AccountLevelLimit: 0,
      Title: None,
      InfomationLocalizeCode: None,
      CountRule: AttendanceCountRule::Accumulation,
      CountReset: AttendanceResetType::User,
      BookSize: 0,
      StartDate: None,
      StartableEndDate: None,
      EndDate: None,
      ExpiryDate: 0,
      MailType: MailType::System,
      DialogCategory: DialogCategory::Cafe,
      TitleImagePath: None,
      DecorationImagePath: None,
      DecorationGarlandImagePath: None,
    }
  }
}

impl Serialize for AttendanceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AttendanceExcel", 20)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Type", &self.Type())?;
      if let Some(f) = self.CountdownPrefab() {
        s.serialize_field("CountdownPrefab", &f)?;
      } else {
        s.skip_field("CountdownPrefab")?;
      }
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("AccountType", &self.AccountType())?;
      s.serialize_field("AccountLevelLimit", &self.AccountLevelLimit())?;
      if let Some(f) = self.Title() {
        s.serialize_field("Title", &f)?;
      } else {
        s.skip_field("Title")?;
      }
      if let Some(f) = self.InfomationLocalizeCode() {
        s.serialize_field("InfomationLocalizeCode", &f)?;
      } else {
        s.skip_field("InfomationLocalizeCode")?;
      }
      s.serialize_field("CountRule", &self.CountRule())?;
      s.serialize_field("CountReset", &self.CountReset())?;
      s.serialize_field("BookSize", &self.BookSize())?;
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.StartableEndDate() {
        s.serialize_field("StartableEndDate", &f)?;
      } else {
        s.skip_field("StartableEndDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      s.serialize_field("ExpiryDate", &self.ExpiryDate())?;
      s.serialize_field("MailType", &self.MailType())?;
      s.serialize_field("DialogCategory", &self.DialogCategory())?;
      if let Some(f) = self.TitleImagePath() {
        s.serialize_field("TitleImagePath", &f)?;
      } else {
        s.skip_field("TitleImagePath")?;
      }
      if let Some(f) = self.DecorationImagePath() {
        s.serialize_field("DecorationImagePath", &f)?;
      } else {
        s.skip_field("DecorationImagePath")?;
      }
      if let Some(f) = self.DecorationGarlandImagePath() {
        s.serialize_field("DecorationGarlandImagePath", &f)?;
      } else {
        s.skip_field("DecorationGarlandImagePath")?;
      }
    s.end()
  }
}

pub struct AttendanceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AttendanceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(AttendanceExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Type(&mut self, Type: AttendanceType) {
    self.fbb_.push_slot::<AttendanceType>(AttendanceExcel::VT_TYPE, Type, AttendanceType::Basic);
  }
  #[inline]
  pub fn add_CountdownPrefab(&mut self, CountdownPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_COUNTDOWNPREFAB, CountdownPrefab);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(AttendanceExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_AccountType(&mut self, AccountType: AccountState) {
    self.fbb_.push_slot::<AccountState>(AttendanceExcel::VT_ACCOUNTTYPE, AccountType, AccountState::WaitingSignIn);
  }
  #[inline]
  pub fn add_AccountLevelLimit(&mut self, AccountLevelLimit: i64) {
    self.fbb_.push_slot::<i64>(AttendanceExcel::VT_ACCOUNTLEVELLIMIT, AccountLevelLimit, 0);
  }
  #[inline]
  pub fn add_Title(&mut self, Title: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_TITLE, Title);
  }
  #[inline]
  pub fn add_InfomationLocalizeCode(&mut self, InfomationLocalizeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_INFOMATIONLOCALIZECODE, InfomationLocalizeCode);
  }
  #[inline]
  pub fn add_CountRule(&mut self, CountRule: AttendanceCountRule) {
    self.fbb_.push_slot::<AttendanceCountRule>(AttendanceExcel::VT_COUNTRULE, CountRule, AttendanceCountRule::Accumulation);
  }
  #[inline]
  pub fn add_CountReset(&mut self, CountReset: AttendanceResetType) {
    self.fbb_.push_slot::<AttendanceResetType>(AttendanceExcel::VT_COUNTRESET, CountReset, AttendanceResetType::User);
  }
  #[inline]
  pub fn add_BookSize(&mut self, BookSize: i64) {
    self.fbb_.push_slot::<i64>(AttendanceExcel::VT_BOOKSIZE, BookSize, 0);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_StartableEndDate(&mut self, StartableEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_STARTABLEENDDATE, StartableEndDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_ExpiryDate(&mut self, ExpiryDate: i64) {
    self.fbb_.push_slot::<i64>(AttendanceExcel::VT_EXPIRYDATE, ExpiryDate, 0);
  }
  #[inline]
  pub fn add_MailType(&mut self, MailType: MailType) {
    self.fbb_.push_slot::<MailType>(AttendanceExcel::VT_MAILTYPE, MailType, MailType::System);
  }
  #[inline]
  pub fn add_DialogCategory(&mut self, DialogCategory: DialogCategory) {
    self.fbb_.push_slot::<DialogCategory>(AttendanceExcel::VT_DIALOGCATEGORY, DialogCategory, DialogCategory::Cafe);
  }
  #[inline]
  pub fn add_TitleImagePath(&mut self, TitleImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_TITLEIMAGEPATH, TitleImagePath);
  }
  #[inline]
  pub fn add_DecorationImagePath(&mut self, DecorationImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_DECORATIONIMAGEPATH, DecorationImagePath);
  }
  #[inline]
  pub fn add_DecorationGarlandImagePath(&mut self, DecorationGarlandImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceExcel::VT_DECORATIONGARLANDIMAGEPATH, DecorationGarlandImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AttendanceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AttendanceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AttendanceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AttendanceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AttendanceExcel");
      ds.field("Id", &self.Id());
      ds.field("Type", &self.Type());
      ds.field("CountdownPrefab", &self.CountdownPrefab());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("AccountType", &self.AccountType());
      ds.field("AccountLevelLimit", &self.AccountLevelLimit());
      ds.field("Title", &self.Title());
      ds.field("InfomationLocalizeCode", &self.InfomationLocalizeCode());
      ds.field("CountRule", &self.CountRule());
      ds.field("CountReset", &self.CountReset());
      ds.field("BookSize", &self.BookSize());
      ds.field("StartDate", &self.StartDate());
      ds.field("StartableEndDate", &self.StartableEndDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("ExpiryDate", &self.ExpiryDate());
      ds.field("MailType", &self.MailType());
      ds.field("DialogCategory", &self.DialogCategory());
      ds.field("TitleImagePath", &self.TitleImagePath());
      ds.field("DecorationImagePath", &self.DecorationImagePath());
      ds.field("DecorationGarlandImagePath", &self.DecorationGarlandImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AttendanceExcelT {
  pub Id: i64,
  pub Type: AttendanceType,
  pub CountdownPrefab: Option<String>,
  pub DisplayOrder: i64,
  pub AccountType: AccountState,
  pub AccountLevelLimit: i64,
  pub Title: Option<String>,
  pub InfomationLocalizeCode: Option<String>,
  pub CountRule: AttendanceCountRule,
  pub CountReset: AttendanceResetType,
  pub BookSize: i64,
  pub StartDate: Option<String>,
  pub StartableEndDate: Option<String>,
  pub EndDate: Option<String>,
  pub ExpiryDate: i64,
  pub MailType: MailType,
  pub DialogCategory: DialogCategory,
  pub TitleImagePath: Option<String>,
  pub DecorationImagePath: Option<String>,
  pub DecorationGarlandImagePath: Option<String>,
}
impl Default for AttendanceExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Type: AttendanceType::Basic,
      CountdownPrefab: None,
      DisplayOrder: 0,
      AccountType: AccountState::WaitingSignIn,
      AccountLevelLimit: 0,
      Title: None,
      InfomationLocalizeCode: None,
      CountRule: AttendanceCountRule::Accumulation,
      CountReset: AttendanceResetType::User,
      BookSize: 0,
      StartDate: None,
      StartableEndDate: None,
      EndDate: None,
      ExpiryDate: 0,
      MailType: MailType::System,
      DialogCategory: DialogCategory::Cafe,
      TitleImagePath: None,
      DecorationImagePath: None,
      DecorationGarlandImagePath: None,
    }
  }
}
impl AttendanceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AttendanceExcel<'b>> {
    let Id = self.Id;
    let Type = self.Type;
    let CountdownPrefab = self.CountdownPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DisplayOrder = self.DisplayOrder;
    let AccountType = self.AccountType;
    let AccountLevelLimit = self.AccountLevelLimit;
    let Title = self.Title.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let InfomationLocalizeCode = self.InfomationLocalizeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CountRule = self.CountRule;
    let CountReset = self.CountReset;
    let BookSize = self.BookSize;
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StartableEndDate = self.StartableEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ExpiryDate = self.ExpiryDate;
    let MailType = self.MailType;
    let DialogCategory = self.DialogCategory;
    let TitleImagePath = self.TitleImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DecorationImagePath = self.DecorationImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DecorationGarlandImagePath = self.DecorationGarlandImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AttendanceExcel::create(_fbb, &AttendanceExcelArgs{
      Id,
      Type,
      CountdownPrefab,
      DisplayOrder,
      AccountType,
      AccountLevelLimit,
      Title,
      InfomationLocalizeCode,
      CountRule,
      CountReset,
      BookSize,
      StartDate,
      StartableEndDate,
      EndDate,
      ExpiryDate,
      MailType,
      DialogCategory,
      TitleImagePath,
      DecorationImagePath,
      DecorationGarlandImagePath,
    })
  }
}
