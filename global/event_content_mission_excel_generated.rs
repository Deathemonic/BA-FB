// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentMissionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentMissionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentMissionExcel<'a> {
  type Inner = EventContentMissionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentMissionExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_GROUPNAME: flatbuffers::VOffsetT = 10;
  pub const VT_CATEGORY: flatbuffers::VOffsetT = 12;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 14;
  pub const VT_RESETTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_TOASTDISPLAYTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_TOASTIMAGEPATH: flatbuffers::VOffsetT = 20;
  pub const VT_VIEWFLAG: flatbuffers::VOffsetT = 22;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 24;
  pub const VT_PREMISSIONID: flatbuffers::VOffsetT = 26;
  pub const VT_ACCOUNTTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_ACCOUNTLEVEL: flatbuffers::VOffsetT = 30;
  pub const VT_SHORTCUTUI: flatbuffers::VOffsetT = 32;
  pub const VT_CHALLENGESTAGESHORTCUT: flatbuffers::VOffsetT = 34;
  pub const VT_COMPLETECONDITIONTYPE: flatbuffers::VOffsetT = 36;
  pub const VT_ISCOMPLETEEXTENSIONTIME: flatbuffers::VOffsetT = 38;
  pub const VT_COMPLETECONDITIONCOUNT: flatbuffers::VOffsetT = 40;
  pub const VT_COMPLETECONDITIONPARAMETER: flatbuffers::VOffsetT = 42;
  pub const VT_COMPLETECONDITIONPARAMETERTAG: flatbuffers::VOffsetT = 44;
  pub const VT_REWARDICON: flatbuffers::VOffsetT = 46;
  pub const VT_COMPLETECONDITIONMISSIONID: flatbuffers::VOffsetT = 48;
  pub const VT_COMPLETECONDITIONMISSIONCOUNT: flatbuffers::VOffsetT = 50;
  pub const VT_MISSIONREWARDPARCELTYPE: flatbuffers::VOffsetT = 52;
  pub const VT_MISSIONREWARDPARCELID: flatbuffers::VOffsetT = 54;
  pub const VT_MISSIONREWARDAMOUNT: flatbuffers::VOffsetT = 56;
  pub const VT_CONDITIONREWARDPARCELTYPE: flatbuffers::VOffsetT = 58;
  pub const VT_CONDITIONREWARDPARCELID: flatbuffers::VOffsetT = 60;
  pub const VT_CONDITIONREWARDAMOUNT: flatbuffers::VOffsetT = 62;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentMissionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentMissionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentMissionExcel<'bldr>> {
    let mut builder = EventContentMissionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentMission");
      let x = args.CompleteConditionMissionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CompleteConditionMissionCount(x);
      let x = args.CompleteConditionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CompleteConditionCount(x);
      let x = args.ChallengeStageShortcut;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChallengeStageShortcut(x);
      let x = args.AccountLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccountLevel(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_id(x);
      if let Some(x) = args.conditionRewardAmount {
        builder.add_conditionRewardAmount(x);
      }
      if let Some(x) = args.conditionRewardParcelId {
        builder.add_conditionRewardParcelId(x);
      }
      if let Some(x) = args.conditionRewardParcelType {
        builder.add_conditionRewardParcelType(x);
      }
      if let Some(x) = args.missionRewardAmount {
        builder.add_missionRewardAmount(x);
      }
      if let Some(x) = args.missionRewardParcelId {
        builder.add_missionRewardParcelId(x);
      }
      if let Some(x) = args.missionRewardParcelType {
        builder.add_missionRewardParcelType(x);
      }
      if let Some(x) = args.completeConditionMissionId {
        builder.add_completeConditionMissionId(x);
      }
      if let Some(x) = args.RewardIcon {
        builder.add_RewardIcon(x);
      }
      if let Some(x) = args.completeConditionParameterTag {
        builder.add_completeConditionParameterTag(x);
      }
      if let Some(x) = args.completeConditionParameter {
        builder.add_completeConditionParameter(x);
      }
      let x = args.CompleteConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CompleteConditionType(x);
      if let Some(x) = args.shortcutUI {
        builder.add_shortcutUI(x);
      }
      let x = args.AccountType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_AccountType(x);
      if let Some(x) = args.preMissionId {
        builder.add_preMissionId(x);
      }
      if let Some(x) = args.ToastImagePath {
        builder.add_ToastImagePath(x);
      }
      let x = args.ToastDisplayType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ToastDisplayType(x);
      let x = args.ResetType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ResetType(x);
      let x = args.Description;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Description(x);
      let x = args.Category;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Category(x);
      if let Some(x) = args.GroupName {
        builder.add_GroupName(x);
      }
      builder.add_IsCompleteExtensionTime(args.IsCompleteExtensionTime);
      builder.add_ViewFlag(args.ViewFlag);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentMissionExcelT {
    let key = table_encryption_service::create_key(b"EventContentMission");
      let id = self.id();
      let EventContentId = self.EventContentId();
      let GroupId = self.GroupId();
    let GroupName = self.GroupName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Category = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Category(), &key)
      } else {
        self.Category()
      };
      let Description = self.Description();
      let ResetType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ResetType(), &key)
      } else {
        self.ResetType()
      };
      let ToastDisplayType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ToastDisplayType(), &key)
      } else {
        self.ToastDisplayType()
      };
    let ToastImagePath = self.ToastImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ViewFlag = self.ViewFlag();
      let DisplayOrder = self.DisplayOrder();
    let preMissionId = self.preMissionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let AccountType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.AccountType(), &key)
      } else {
        self.AccountType()
      };
      let AccountLevel = self.AccountLevel();
    let shortcutUI = self.shortcutUI().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
      let ChallengeStageShortcut = self.ChallengeStageShortcut();
      let CompleteConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CompleteConditionType(), &key)
      } else {
        self.CompleteConditionType()
      };
      let IsCompleteExtensionTime = self.IsCompleteExtensionTime();
      let CompleteConditionCount = self.CompleteConditionCount();
    let completeConditionParameter = self.completeConditionParameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let completeConditionParameterTag = self.completeConditionParameterTag().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardIcon = self.RewardIcon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let completeConditionMissionId = self.completeConditionMissionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let CompleteConditionMissionCount = self.CompleteConditionMissionCount();
    let missionRewardParcelType = self.missionRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let missionRewardParcelId = self.missionRewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let missionRewardAmount = self.missionRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let conditionRewardParcelType = self.conditionRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let conditionRewardParcelId = self.conditionRewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let conditionRewardAmount = self.conditionRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    EventContentMissionExcelT {
      id,
      EventContentId,
      GroupId,
      GroupName,
      Category,
      Description,
      ResetType,
      ToastDisplayType,
      ToastImagePath,
      ViewFlag,
      DisplayOrder,
      preMissionId,
      AccountType,
      AccountLevel,
      shortcutUI,
      ChallengeStageShortcut,
      CompleteConditionType,
      IsCompleteExtensionTime,
      CompleteConditionCount,
      completeConditionParameter,
      completeConditionParameterTag,
      RewardIcon,
      completeConditionMissionId,
      CompleteConditionMissionCount,
      missionRewardParcelType,
      missionRewardParcelId,
      missionRewardAmount,
      conditionRewardParcelType,
      conditionRewardParcelId,
      conditionRewardAmount,
    }
  }

  #[inline]
  pub fn id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentMissionExcel::VT_GROUPNAME, None)}
  }
  #[inline]
  pub fn Category(&self) -> MissionCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionCategory>(EventContentMissionExcel::VT_CATEGORY, Some(MissionCategory::Challenge)).unwrap()}
  }
  #[inline]
  pub fn Description(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentMissionExcel::VT_DESCRIPTION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResetType(&self) -> MissionResetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionResetType>(EventContentMissionExcel::VT_RESETTYPE, Some(MissionResetType::None)).unwrap()}
  }
  #[inline]
  pub fn ToastDisplayType(&self) -> MissionToastDisplayConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionToastDisplayConditionType>(EventContentMissionExcel::VT_TOASTDISPLAYTYPE, Some(MissionToastDisplayConditionType::Always)).unwrap()}
  }
  #[inline]
  pub fn ToastImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentMissionExcel::VT_TOASTIMAGEPATH, None)}
  }
  #[inline]
  pub fn ViewFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentMissionExcel::VT_VIEWFLAG, Some(false)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn preMissionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentMissionExcel::VT_PREMISSIONID, None)}
  }
  #[inline]
  pub fn AccountType(&self) -> AccountState {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AccountState>(EventContentMissionExcel::VT_ACCOUNTTYPE, Some(AccountState::WaitingSignIn)).unwrap()}
  }
  #[inline]
  pub fn AccountLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_ACCOUNTLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn shortcutUI(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EventContentMissionExcel::VT_SHORTCUTUI, None)}
  }
  #[inline]
  pub fn ChallengeStageShortcut(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_CHALLENGESTAGESHORTCUT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CompleteConditionType(&self) -> MissionCompleteConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionCompleteConditionType>(EventContentMissionExcel::VT_COMPLETECONDITIONTYPE, Some(MissionCompleteConditionType::None)).unwrap()}
  }
  #[inline]
  pub fn IsCompleteExtensionTime(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentMissionExcel::VT_ISCOMPLETEEXTENSIONTIME, Some(false)).unwrap()}
  }
  #[inline]
  pub fn CompleteConditionCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_COMPLETECONDITIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn completeConditionParameter(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentMissionExcel::VT_COMPLETECONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn completeConditionParameterTag(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(EventContentMissionExcel::VT_COMPLETECONDITIONPARAMETERTAG, None)}
  }
  #[inline]
  pub fn RewardIcon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentMissionExcel::VT_REWARDICON, None)}
  }
  #[inline]
  pub fn completeConditionMissionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentMissionExcel::VT_COMPLETECONDITIONMISSIONID, None)}
  }
  #[inline]
  pub fn CompleteConditionMissionCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentMissionExcel::VT_COMPLETECONDITIONMISSIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn missionRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentMissionExcel::VT_MISSIONREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn missionRewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentMissionExcel::VT_MISSIONREWARDPARCELID, None)}
  }
  #[inline]
  pub fn missionRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(EventContentMissionExcel::VT_MISSIONREWARDAMOUNT, None)}
  }
  #[inline]
  pub fn conditionRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentMissionExcel::VT_CONDITIONREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn conditionRewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentMissionExcel::VT_CONDITIONREWARDPARCELID, None)}
  }
  #[inline]
  pub fn conditionRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(EventContentMissionExcel::VT_CONDITIONREWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EventContentMissionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GroupName", Self::VT_GROUPNAME, false)?
     .visit_field::<MissionCategory>("Category", Self::VT_CATEGORY, false)?
     .visit_field::<u32>("Description", Self::VT_DESCRIPTION, false)?
     .visit_field::<MissionResetType>("ResetType", Self::VT_RESETTYPE, false)?
     .visit_field::<MissionToastDisplayConditionType>("ToastDisplayType", Self::VT_TOASTDISPLAYTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ToastImagePath", Self::VT_TOASTIMAGEPATH, false)?
     .visit_field::<bool>("ViewFlag", Self::VT_VIEWFLAG, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("preMissionId", Self::VT_PREMISSIONID, false)?
     .visit_field::<AccountState>("AccountType", Self::VT_ACCOUNTTYPE, false)?
     .visit_field::<i64>("AccountLevel", Self::VT_ACCOUNTLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("shortcutUI", Self::VT_SHORTCUTUI, false)?
     .visit_field::<i64>("ChallengeStageShortcut", Self::VT_CHALLENGESTAGESHORTCUT, false)?
     .visit_field::<MissionCompleteConditionType>("CompleteConditionType", Self::VT_COMPLETECONDITIONTYPE, false)?
     .visit_field::<bool>("IsCompleteExtensionTime", Self::VT_ISCOMPLETEEXTENSIONTIME, false)?
     .visit_field::<i64>("CompleteConditionCount", Self::VT_COMPLETECONDITIONCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("completeConditionParameter", Self::VT_COMPLETECONDITIONPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("completeConditionParameterTag", Self::VT_COMPLETECONDITIONPARAMETERTAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RewardIcon", Self::VT_REWARDICON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("completeConditionMissionId", Self::VT_COMPLETECONDITIONMISSIONID, false)?
     .visit_field::<i64>("CompleteConditionMissionCount", Self::VT_COMPLETECONDITIONMISSIONCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("missionRewardParcelType", Self::VT_MISSIONREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("missionRewardParcelId", Self::VT_MISSIONREWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("missionRewardAmount", Self::VT_MISSIONREWARDAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("conditionRewardParcelType", Self::VT_CONDITIONREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("conditionRewardParcelId", Self::VT_CONDITIONREWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("conditionRewardAmount", Self::VT_CONDITIONREWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentMissionExcelArgs<'a> {
    pub id: i64,
    pub EventContentId: i64,
    pub GroupId: i64,
    pub GroupName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Category: MissionCategory,
    pub Description: u32,
    pub ResetType: MissionResetType,
    pub ToastDisplayType: MissionToastDisplayConditionType,
    pub ToastImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ViewFlag: bool,
    pub DisplayOrder: i64,
    pub preMissionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub AccountType: AccountState,
    pub AccountLevel: i64,
    pub shortcutUI: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ChallengeStageShortcut: i64,
    pub CompleteConditionType: MissionCompleteConditionType,
    pub IsCompleteExtensionTime: bool,
    pub CompleteConditionCount: i64,
    pub completeConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub completeConditionParameterTag: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub RewardIcon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub completeConditionMissionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub CompleteConditionMissionCount: i64,
    pub missionRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub missionRewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub missionRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub conditionRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub conditionRewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub conditionRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for EventContentMissionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentMissionExcelArgs {
      id: 0,
      EventContentId: 0,
      GroupId: 0,
      GroupName: None,
      Category: MissionCategory::Challenge,
      Description: 0,
      ResetType: MissionResetType::None,
      ToastDisplayType: MissionToastDisplayConditionType::Always,
      ToastImagePath: None,
      ViewFlag: false,
      DisplayOrder: 0,
      preMissionId: None,
      AccountType: AccountState::WaitingSignIn,
      AccountLevel: 0,
      shortcutUI: None,
      ChallengeStageShortcut: 0,
      CompleteConditionType: MissionCompleteConditionType::None,
      IsCompleteExtensionTime: false,
      CompleteConditionCount: 0,
      completeConditionParameter: None,
      completeConditionParameterTag: None,
      RewardIcon: None,
      completeConditionMissionId: None,
      CompleteConditionMissionCount: 0,
      missionRewardParcelType: None,
      missionRewardParcelId: None,
      missionRewardAmount: None,
      conditionRewardParcelType: None,
      conditionRewardParcelId: None,
      conditionRewardAmount: None,
    }
  }
}

impl Serialize for EventContentMissionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentMissionExcel", 30)?;
      s.serialize_field("id", &self.id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      if let Some(f) = self.GroupName() {
        s.serialize_field("GroupName", &f)?;
      } else {
        s.skip_field("GroupName")?;
      }
      s.serialize_field("Category", &self.Category())?;
      s.serialize_field("Description", &self.Description())?;
      s.serialize_field("ResetType", &self.ResetType())?;
      s.serialize_field("ToastDisplayType", &self.ToastDisplayType())?;
      if let Some(f) = self.ToastImagePath() {
        s.serialize_field("ToastImagePath", &f)?;
      } else {
        s.skip_field("ToastImagePath")?;
      }
      s.serialize_field("ViewFlag", &self.ViewFlag())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      if let Some(f) = self.preMissionId() {
        s.serialize_field("preMissionId", &f)?;
      } else {
        s.skip_field("preMissionId")?;
      }
      s.serialize_field("AccountType", &self.AccountType())?;
      s.serialize_field("AccountLevel", &self.AccountLevel())?;
      if let Some(f) = self.shortcutUI() {
        s.serialize_field("shortcutUI", &f)?;
      } else {
        s.skip_field("shortcutUI")?;
      }
      s.serialize_field("ChallengeStageShortcut", &self.ChallengeStageShortcut())?;
      s.serialize_field("CompleteConditionType", &self.CompleteConditionType())?;
      s.serialize_field("IsCompleteExtensionTime", &self.IsCompleteExtensionTime())?;
      s.serialize_field("CompleteConditionCount", &self.CompleteConditionCount())?;
      if let Some(f) = self.completeConditionParameter() {
        s.serialize_field("completeConditionParameter", &f)?;
      } else {
        s.skip_field("completeConditionParameter")?;
      }
      if let Some(f) = self.completeConditionParameterTag() {
        s.serialize_field("completeConditionParameterTag", &f)?;
      } else {
        s.skip_field("completeConditionParameterTag")?;
      }
      if let Some(f) = self.RewardIcon() {
        s.serialize_field("RewardIcon", &f)?;
      } else {
        s.skip_field("RewardIcon")?;
      }
      if let Some(f) = self.completeConditionMissionId() {
        s.serialize_field("completeConditionMissionId", &f)?;
      } else {
        s.skip_field("completeConditionMissionId")?;
      }
      s.serialize_field("CompleteConditionMissionCount", &self.CompleteConditionMissionCount())?;
      if let Some(f) = self.missionRewardParcelType() {
        s.serialize_field("missionRewardParcelType", &f)?;
      } else {
        s.skip_field("missionRewardParcelType")?;
      }
      if let Some(f) = self.missionRewardParcelId() {
        s.serialize_field("missionRewardParcelId", &f)?;
      } else {
        s.skip_field("missionRewardParcelId")?;
      }
      if let Some(f) = self.missionRewardAmount() {
        s.serialize_field("missionRewardAmount", &f)?;
      } else {
        s.skip_field("missionRewardAmount")?;
      }
      if let Some(f) = self.conditionRewardParcelType() {
        s.serialize_field("conditionRewardParcelType", &f)?;
      } else {
        s.skip_field("conditionRewardParcelType")?;
      }
      if let Some(f) = self.conditionRewardParcelId() {
        s.serialize_field("conditionRewardParcelId", &f)?;
      } else {
        s.skip_field("conditionRewardParcelId")?;
      }
      if let Some(f) = self.conditionRewardAmount() {
        s.serialize_field("conditionRewardAmount", &f)?;
      } else {
        s.skip_field("conditionRewardAmount")?;
      }
    s.end()
  }
}

pub struct EventContentMissionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentMissionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_GroupName(&mut self, GroupName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_GROUPNAME, GroupName);
  }
  #[inline]
  pub fn add_Category(&mut self, Category: MissionCategory) {
    self.fbb_.push_slot::<MissionCategory>(EventContentMissionExcel::VT_CATEGORY, Category, MissionCategory::Challenge);
  }
  #[inline]
  pub fn add_Description(&mut self, Description: u32) {
    self.fbb_.push_slot::<u32>(EventContentMissionExcel::VT_DESCRIPTION, Description, 0);
  }
  #[inline]
  pub fn add_ResetType(&mut self, ResetType: MissionResetType) {
    self.fbb_.push_slot::<MissionResetType>(EventContentMissionExcel::VT_RESETTYPE, ResetType, MissionResetType::None);
  }
  #[inline]
  pub fn add_ToastDisplayType(&mut self, ToastDisplayType: MissionToastDisplayConditionType) {
    self.fbb_.push_slot::<MissionToastDisplayConditionType>(EventContentMissionExcel::VT_TOASTDISPLAYTYPE, ToastDisplayType, MissionToastDisplayConditionType::Always);
  }
  #[inline]
  pub fn add_ToastImagePath(&mut self, ToastImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_TOASTIMAGEPATH, ToastImagePath);
  }
  #[inline]
  pub fn add_ViewFlag(&mut self, ViewFlag: bool) {
    self.fbb_.push_slot::<bool>(EventContentMissionExcel::VT_VIEWFLAG, ViewFlag, false);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_preMissionId(&mut self, preMissionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_PREMISSIONID, preMissionId);
  }
  #[inline]
  pub fn add_AccountType(&mut self, AccountType: AccountState) {
    self.fbb_.push_slot::<AccountState>(EventContentMissionExcel::VT_ACCOUNTTYPE, AccountType, AccountState::WaitingSignIn);
  }
  #[inline]
  pub fn add_AccountLevel(&mut self, AccountLevel: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_ACCOUNTLEVEL, AccountLevel, 0);
  }
  #[inline]
  pub fn add_shortcutUI(&mut self, shortcutUI: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_SHORTCUTUI, shortcutUI);
  }
  #[inline]
  pub fn add_ChallengeStageShortcut(&mut self, ChallengeStageShortcut: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_CHALLENGESTAGESHORTCUT, ChallengeStageShortcut, 0);
  }
  #[inline]
  pub fn add_CompleteConditionType(&mut self, CompleteConditionType: MissionCompleteConditionType) {
    self.fbb_.push_slot::<MissionCompleteConditionType>(EventContentMissionExcel::VT_COMPLETECONDITIONTYPE, CompleteConditionType, MissionCompleteConditionType::None);
  }
  #[inline]
  pub fn add_IsCompleteExtensionTime(&mut self, IsCompleteExtensionTime: bool) {
    self.fbb_.push_slot::<bool>(EventContentMissionExcel::VT_ISCOMPLETEEXTENSIONTIME, IsCompleteExtensionTime, false);
  }
  #[inline]
  pub fn add_CompleteConditionCount(&mut self, CompleteConditionCount: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_COMPLETECONDITIONCOUNT, CompleteConditionCount, 0);
  }
  #[inline]
  pub fn add_completeConditionParameter(&mut self, completeConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_COMPLETECONDITIONPARAMETER, completeConditionParameter);
  }
  #[inline]
  pub fn add_completeConditionParameterTag(&mut self, completeConditionParameterTag: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_COMPLETECONDITIONPARAMETERTAG, completeConditionParameterTag);
  }
  #[inline]
  pub fn add_RewardIcon(&mut self, RewardIcon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_REWARDICON, RewardIcon);
  }
  #[inline]
  pub fn add_completeConditionMissionId(&mut self, completeConditionMissionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_COMPLETECONDITIONMISSIONID, completeConditionMissionId);
  }
  #[inline]
  pub fn add_CompleteConditionMissionCount(&mut self, CompleteConditionMissionCount: i64) {
    self.fbb_.push_slot::<i64>(EventContentMissionExcel::VT_COMPLETECONDITIONMISSIONCOUNT, CompleteConditionMissionCount, 0);
  }
  #[inline]
  pub fn add_missionRewardParcelType(&mut self, missionRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_MISSIONREWARDPARCELTYPE, missionRewardParcelType);
  }
  #[inline]
  pub fn add_missionRewardParcelId(&mut self, missionRewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_MISSIONREWARDPARCELID, missionRewardParcelId);
  }
  #[inline]
  pub fn add_missionRewardAmount(&mut self, missionRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_MISSIONREWARDAMOUNT, missionRewardAmount);
  }
  #[inline]
  pub fn add_conditionRewardParcelType(&mut self, conditionRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_CONDITIONREWARDPARCELTYPE, conditionRewardParcelType);
  }
  #[inline]
  pub fn add_conditionRewardParcelId(&mut self, conditionRewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_CONDITIONREWARDPARCELID, conditionRewardParcelId);
  }
  #[inline]
  pub fn add_conditionRewardAmount(&mut self, conditionRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentMissionExcel::VT_CONDITIONREWARDAMOUNT, conditionRewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentMissionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentMissionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentMissionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentMissionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentMissionExcel");
      ds.field("id", &self.id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("GroupId", &self.GroupId());
      ds.field("GroupName", &self.GroupName());
      ds.field("Category", &self.Category());
      ds.field("Description", &self.Description());
      ds.field("ResetType", &self.ResetType());
      ds.field("ToastDisplayType", &self.ToastDisplayType());
      ds.field("ToastImagePath", &self.ToastImagePath());
      ds.field("ViewFlag", &self.ViewFlag());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("preMissionId", &self.preMissionId());
      ds.field("AccountType", &self.AccountType());
      ds.field("AccountLevel", &self.AccountLevel());
      ds.field("shortcutUI", &self.shortcutUI());
      ds.field("ChallengeStageShortcut", &self.ChallengeStageShortcut());
      ds.field("CompleteConditionType", &self.CompleteConditionType());
      ds.field("IsCompleteExtensionTime", &self.IsCompleteExtensionTime());
      ds.field("CompleteConditionCount", &self.CompleteConditionCount());
      ds.field("completeConditionParameter", &self.completeConditionParameter());
      ds.field("completeConditionParameterTag", &self.completeConditionParameterTag());
      ds.field("RewardIcon", &self.RewardIcon());
      ds.field("completeConditionMissionId", &self.completeConditionMissionId());
      ds.field("CompleteConditionMissionCount", &self.CompleteConditionMissionCount());
      ds.field("missionRewardParcelType", &self.missionRewardParcelType());
      ds.field("missionRewardParcelId", &self.missionRewardParcelId());
      ds.field("missionRewardAmount", &self.missionRewardAmount());
      ds.field("conditionRewardParcelType", &self.conditionRewardParcelType());
      ds.field("conditionRewardParcelId", &self.conditionRewardParcelId());
      ds.field("conditionRewardAmount", &self.conditionRewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentMissionExcelT {
  pub id: i64,
  pub EventContentId: i64,
  pub GroupId: i64,
  pub GroupName: Option<String>,
  pub Category: MissionCategory,
  pub Description: u32,
  pub ResetType: MissionResetType,
  pub ToastDisplayType: MissionToastDisplayConditionType,
  pub ToastImagePath: Option<String>,
  pub ViewFlag: bool,
  pub DisplayOrder: i64,
  pub preMissionId: Option<Vec<i64>>,
  pub AccountType: AccountState,
  pub AccountLevel: i64,
  pub shortcutUI: Option<Vec<String>>,
  pub ChallengeStageShortcut: i64,
  pub CompleteConditionType: MissionCompleteConditionType,
  pub IsCompleteExtensionTime: bool,
  pub CompleteConditionCount: i64,
  pub completeConditionParameter: Option<Vec<i64>>,
  pub completeConditionParameterTag: Option<Vec<Tag>>,
  pub RewardIcon: Option<String>,
  pub completeConditionMissionId: Option<Vec<i64>>,
  pub CompleteConditionMissionCount: i64,
  pub missionRewardParcelType: Option<Vec<ParcelType>>,
  pub missionRewardParcelId: Option<Vec<i64>>,
  pub missionRewardAmount: Option<Vec<i32>>,
  pub conditionRewardParcelType: Option<Vec<ParcelType>>,
  pub conditionRewardParcelId: Option<Vec<i64>>,
  pub conditionRewardAmount: Option<Vec<i32>>,
}
impl Default for EventContentMissionExcelT {
  fn default() -> Self {
    Self {
      id: 0,
      EventContentId: 0,
      GroupId: 0,
      GroupName: None,
      Category: MissionCategory::Challenge,
      Description: 0,
      ResetType: MissionResetType::None,
      ToastDisplayType: MissionToastDisplayConditionType::Always,
      ToastImagePath: None,
      ViewFlag: false,
      DisplayOrder: 0,
      preMissionId: None,
      AccountType: AccountState::WaitingSignIn,
      AccountLevel: 0,
      shortcutUI: None,
      ChallengeStageShortcut: 0,
      CompleteConditionType: MissionCompleteConditionType::None,
      IsCompleteExtensionTime: false,
      CompleteConditionCount: 0,
      completeConditionParameter: None,
      completeConditionParameterTag: None,
      RewardIcon: None,
      completeConditionMissionId: None,
      CompleteConditionMissionCount: 0,
      missionRewardParcelType: None,
      missionRewardParcelId: None,
      missionRewardAmount: None,
      conditionRewardParcelType: None,
      conditionRewardParcelId: None,
      conditionRewardAmount: None,
    }
  }
}
impl EventContentMissionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentMissionExcel<'b>> {
    let id = self.id;
    let EventContentId = self.EventContentId;
    let GroupId = self.GroupId;
    let GroupName = self.GroupName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Category = self.Category;
    let Description = self.Description;
    let ResetType = self.ResetType;
    let ToastDisplayType = self.ToastDisplayType;
    let ToastImagePath = self.ToastImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ViewFlag = self.ViewFlag;
    let DisplayOrder = self.DisplayOrder;
    let preMissionId = self.preMissionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let AccountType = self.AccountType;
    let AccountLevel = self.AccountLevel;
    let shortcutUI = self.shortcutUI.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ChallengeStageShortcut = self.ChallengeStageShortcut;
    let CompleteConditionType = self.CompleteConditionType;
    let IsCompleteExtensionTime = self.IsCompleteExtensionTime;
    let CompleteConditionCount = self.CompleteConditionCount;
    let completeConditionParameter = self.completeConditionParameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let completeConditionParameterTag = self.completeConditionParameterTag.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardIcon = self.RewardIcon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let completeConditionMissionId = self.completeConditionMissionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CompleteConditionMissionCount = self.CompleteConditionMissionCount;
    let missionRewardParcelType = self.missionRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let missionRewardParcelId = self.missionRewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let missionRewardAmount = self.missionRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionRewardParcelType = self.conditionRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionRewardParcelId = self.conditionRewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionRewardAmount = self.conditionRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentMissionExcel::create(_fbb, &EventContentMissionExcelArgs{
      id,
      EventContentId,
      GroupId,
      GroupName,
      Category,
      Description,
      ResetType,
      ToastDisplayType,
      ToastImagePath,
      ViewFlag,
      DisplayOrder,
      preMissionId,
      AccountType,
      AccountLevel,
      shortcutUI,
      ChallengeStageShortcut,
      CompleteConditionType,
      IsCompleteExtensionTime,
      CompleteConditionCount,
      completeConditionParameter,
      completeConditionParameterTag,
      RewardIcon,
      completeConditionMissionId,
      CompleteConditionMissionCount,
      missionRewardParcelType,
      missionRewardParcelId,
      missionRewardAmount,
      conditionRewardParcelType,
      conditionRewardParcelId,
      conditionRewardAmount,
    })
  }
}
