// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ObstacleFireLineCheckExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ObstacleFireLineCheckExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ObstacleFireLineCheckExcel<'a> {
  type Inner = ObstacleFireLineCheckExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ObstacleFireLineCheckExcel<'a> {
  pub const VT_MYOBSTACLEFIRELINECHECK: flatbuffers::VOffsetT = 4;
  pub const VT_ALLYOBSTACLEFIRELINECHECK: flatbuffers::VOffsetT = 6;
  pub const VT_ENEMYOBSTACLEFIRELINECHECK: flatbuffers::VOffsetT = 8;
  pub const VT_EMPTYOBSTACLEFIRELINECHECK: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ObstacleFireLineCheckExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ObstacleFireLineCheckExcelArgs
  ) -> flatbuffers::WIPOffset<ObstacleFireLineCheckExcel<'bldr>> {
    let mut builder = ObstacleFireLineCheckExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ObstacleFireLineCheck");
      builder.add_EmptyObstacleFireLineCheck(args.EmptyObstacleFireLineCheck);
      builder.add_EnemyObstacleFireLineCheck(args.EnemyObstacleFireLineCheck);
      builder.add_AllyObstacleFireLineCheck(args.AllyObstacleFireLineCheck);
      builder.add_MyObstacleFireLineCheck(args.MyObstacleFireLineCheck);
    builder.finish()
  }

  pub fn unpack(&self) -> ObstacleFireLineCheckExcelT {
    let key = table_encryption_service::create_key(b"ObstacleFireLineCheck");
      let MyObstacleFireLineCheck = self.MyObstacleFireLineCheck();
      let AllyObstacleFireLineCheck = self.AllyObstacleFireLineCheck();
      let EnemyObstacleFireLineCheck = self.EnemyObstacleFireLineCheck();
      let EmptyObstacleFireLineCheck = self.EmptyObstacleFireLineCheck();
    ObstacleFireLineCheckExcelT {
      MyObstacleFireLineCheck,
      AllyObstacleFireLineCheck,
      EnemyObstacleFireLineCheck,
      EmptyObstacleFireLineCheck,
    }
  }

  #[inline]
  pub fn MyObstacleFireLineCheck(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ObstacleFireLineCheckExcel::VT_MYOBSTACLEFIRELINECHECK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn AllyObstacleFireLineCheck(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ObstacleFireLineCheckExcel::VT_ALLYOBSTACLEFIRELINECHECK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EnemyObstacleFireLineCheck(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ObstacleFireLineCheckExcel::VT_ENEMYOBSTACLEFIRELINECHECK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EmptyObstacleFireLineCheck(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ObstacleFireLineCheckExcel::VT_EMPTYOBSTACLEFIRELINECHECK, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ObstacleFireLineCheckExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("MyObstacleFireLineCheck", Self::VT_MYOBSTACLEFIRELINECHECK, false)?
     .visit_field::<bool>("AllyObstacleFireLineCheck", Self::VT_ALLYOBSTACLEFIRELINECHECK, false)?
     .visit_field::<bool>("EnemyObstacleFireLineCheck", Self::VT_ENEMYOBSTACLEFIRELINECHECK, false)?
     .visit_field::<bool>("EmptyObstacleFireLineCheck", Self::VT_EMPTYOBSTACLEFIRELINECHECK, false)?
     .finish();
    Ok(())
  }
}
pub struct ObstacleFireLineCheckExcelArgs {
    pub MyObstacleFireLineCheck: bool,
    pub AllyObstacleFireLineCheck: bool,
    pub EnemyObstacleFireLineCheck: bool,
    pub EmptyObstacleFireLineCheck: bool,
}
impl<'a> Default for ObstacleFireLineCheckExcelArgs {
  #[inline]
  fn default() -> Self {
    ObstacleFireLineCheckExcelArgs {
      MyObstacleFireLineCheck: false,
      AllyObstacleFireLineCheck: false,
      EnemyObstacleFireLineCheck: false,
      EmptyObstacleFireLineCheck: false,
    }
  }
}

impl Serialize for ObstacleFireLineCheckExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ObstacleFireLineCheckExcel", 4)?;
      s.serialize_field("MyObstacleFireLineCheck", &self.MyObstacleFireLineCheck())?;
      s.serialize_field("AllyObstacleFireLineCheck", &self.AllyObstacleFireLineCheck())?;
      s.serialize_field("EnemyObstacleFireLineCheck", &self.EnemyObstacleFireLineCheck())?;
      s.serialize_field("EmptyObstacleFireLineCheck", &self.EmptyObstacleFireLineCheck())?;
    s.end()
  }
}

pub struct ObstacleFireLineCheckExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ObstacleFireLineCheckExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_MyObstacleFireLineCheck(&mut self, MyObstacleFireLineCheck: bool) {
    self.fbb_.push_slot::<bool>(ObstacleFireLineCheckExcel::VT_MYOBSTACLEFIRELINECHECK, MyObstacleFireLineCheck, false);
  }
  #[inline]
  pub fn add_AllyObstacleFireLineCheck(&mut self, AllyObstacleFireLineCheck: bool) {
    self.fbb_.push_slot::<bool>(ObstacleFireLineCheckExcel::VT_ALLYOBSTACLEFIRELINECHECK, AllyObstacleFireLineCheck, false);
  }
  #[inline]
  pub fn add_EnemyObstacleFireLineCheck(&mut self, EnemyObstacleFireLineCheck: bool) {
    self.fbb_.push_slot::<bool>(ObstacleFireLineCheckExcel::VT_ENEMYOBSTACLEFIRELINECHECK, EnemyObstacleFireLineCheck, false);
  }
  #[inline]
  pub fn add_EmptyObstacleFireLineCheck(&mut self, EmptyObstacleFireLineCheck: bool) {
    self.fbb_.push_slot::<bool>(ObstacleFireLineCheckExcel::VT_EMPTYOBSTACLEFIRELINECHECK, EmptyObstacleFireLineCheck, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ObstacleFireLineCheckExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ObstacleFireLineCheckExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ObstacleFireLineCheckExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ObstacleFireLineCheckExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ObstacleFireLineCheckExcel");
      ds.field("MyObstacleFireLineCheck", &self.MyObstacleFireLineCheck());
      ds.field("AllyObstacleFireLineCheck", &self.AllyObstacleFireLineCheck());
      ds.field("EnemyObstacleFireLineCheck", &self.EnemyObstacleFireLineCheck());
      ds.field("EmptyObstacleFireLineCheck", &self.EmptyObstacleFireLineCheck());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ObstacleFireLineCheckExcelT {
  pub MyObstacleFireLineCheck: bool,
  pub AllyObstacleFireLineCheck: bool,
  pub EnemyObstacleFireLineCheck: bool,
  pub EmptyObstacleFireLineCheck: bool,
}
impl Default for ObstacleFireLineCheckExcelT {
  fn default() -> Self {
    Self {
      MyObstacleFireLineCheck: false,
      AllyObstacleFireLineCheck: false,
      EnemyObstacleFireLineCheck: false,
      EmptyObstacleFireLineCheck: false,
    }
  }
}
impl ObstacleFireLineCheckExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ObstacleFireLineCheckExcel<'b>> {
    let MyObstacleFireLineCheck = self.MyObstacleFireLineCheck;
    let AllyObstacleFireLineCheck = self.AllyObstacleFireLineCheck;
    let EnemyObstacleFireLineCheck = self.EnemyObstacleFireLineCheck;
    let EmptyObstacleFireLineCheck = self.EmptyObstacleFireLineCheck;
    ObstacleFireLineCheckExcel::create(_fbb, &ObstacleFireLineCheckExcelArgs{
      MyObstacleFireLineCheck,
      AllyObstacleFireLineCheck,
      EnemyObstacleFireLineCheck,
      EmptyObstacleFireLineCheck,
    })
  }
}
