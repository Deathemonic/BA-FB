// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldMasteryLevelExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldMasteryLevelExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldMasteryLevelExcel<'a> {
  type Inner = FieldMasteryLevelExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldMasteryLevelExcel<'a> {
  pub const VT_LEVEL: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_EXP: flatbuffers::VOffsetT = 8;
  pub const VT_TOTALEXP: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldMasteryLevelExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldMasteryLevelExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldMasteryLevelExcel<'bldr>> {
    let mut builder = FieldMasteryLevelExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldMasteryLevel");
      if let Some(x) = args.rewardId {
        builder.add_rewardId(x);
      }
      if let Some(x) = args.totalExp {
        builder.add_totalExp(x);
      }
      if let Some(x) = args.exp {
        builder.add_exp(x);
      }
      if let Some(x) = args.id {
        builder.add_id(x);
      }
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Level(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldMasteryLevelExcelT {
    let key = table_encryption_service::create_key(b"FieldMasteryLevel");
      let Level = self.Level();
    let id = self.id().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let exp = self.exp().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let totalExp = self.totalExp().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let rewardId = self.rewardId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    FieldMasteryLevelExcelT {
      Level,
      id,
      exp,
      totalExp,
      rewardId,
    }
  }

  #[inline]
  pub fn Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FieldMasteryLevelExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn id(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldMasteryLevelExcel::VT_ID, None)}
  }
  #[inline]
  pub fn exp(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldMasteryLevelExcel::VT_EXP, None)}
  }
  #[inline]
  pub fn totalExp(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldMasteryLevelExcel::VT_TOTALEXP, None)}
  }
  #[inline]
  pub fn rewardId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldMasteryLevelExcel::VT_REWARDID, None)}
  }
}

impl flatbuffers::Verifiable for FieldMasteryLevelExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("Level", Self::VT_LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("exp", Self::VT_EXP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("totalExp", Self::VT_TOTALEXP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("rewardId", Self::VT_REWARDID, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldMasteryLevelExcelArgs<'a> {
    pub Level: i32,
    pub id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub exp: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub totalExp: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub rewardId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for FieldMasteryLevelExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldMasteryLevelExcelArgs {
      Level: 0,
      id: None,
      exp: None,
      totalExp: None,
      rewardId: None,
    }
  }
}

impl Serialize for FieldMasteryLevelExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldMasteryLevelExcel", 5)?;
      s.serialize_field("Level", &self.Level())?;
      if let Some(f) = self.id() {
        s.serialize_field("id", &f)?;
      } else {
        s.skip_field("id")?;
      }
      if let Some(f) = self.exp() {
        s.serialize_field("exp", &f)?;
      } else {
        s.skip_field("exp")?;
      }
      if let Some(f) = self.totalExp() {
        s.serialize_field("totalExp", &f)?;
      } else {
        s.skip_field("totalExp")?;
      }
      if let Some(f) = self.rewardId() {
        s.serialize_field("rewardId", &f)?;
      } else {
        s.skip_field("rewardId")?;
      }
    s.end()
  }
}

pub struct FieldMasteryLevelExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldMasteryLevelExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Level(&mut self, Level: i32) {
    self.fbb_.push_slot::<i32>(FieldMasteryLevelExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldMasteryLevelExcel::VT_ID, id);
  }
  #[inline]
  pub fn add_exp(&mut self, exp: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldMasteryLevelExcel::VT_EXP, exp);
  }
  #[inline]
  pub fn add_totalExp(&mut self, totalExp: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldMasteryLevelExcel::VT_TOTALEXP, totalExp);
  }
  #[inline]
  pub fn add_rewardId(&mut self, rewardId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldMasteryLevelExcel::VT_REWARDID, rewardId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldMasteryLevelExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldMasteryLevelExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldMasteryLevelExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldMasteryLevelExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldMasteryLevelExcel");
      ds.field("Level", &self.Level());
      ds.field("id", &self.id());
      ds.field("exp", &self.exp());
      ds.field("totalExp", &self.totalExp());
      ds.field("rewardId", &self.rewardId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldMasteryLevelExcelT {
  pub Level: i32,
  pub id: Option<Vec<i64>>,
  pub exp: Option<Vec<i64>>,
  pub totalExp: Option<Vec<i64>>,
  pub rewardId: Option<Vec<i64>>,
}
impl Default for FieldMasteryLevelExcelT {
  fn default() -> Self {
    Self {
      Level: 0,
      id: None,
      exp: None,
      totalExp: None,
      rewardId: None,
    }
  }
}
impl FieldMasteryLevelExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldMasteryLevelExcel<'b>> {
    let Level = self.Level;
    let id = self.id.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let exp = self.exp.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let totalExp = self.totalExp.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardId = self.rewardId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    FieldMasteryLevelExcel::create(_fbb, &FieldMasteryLevelExcelArgs{
      Level,
      id,
      exp,
      totalExp,
      rewardId,
    })
  }
}
