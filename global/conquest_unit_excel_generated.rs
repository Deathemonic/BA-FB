// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestUnitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestUnitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestUnitExcel<'a> {
  type Inner = ConquestUnitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestUnitExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_KEY: flatbuffers::VOffsetT = 6;
  pub const VT_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 10;
  pub const VT_STRATEGYPREFABNAME: flatbuffers::VOffsetT = 12;
  pub const VT_SCALE: flatbuffers::VOffsetT = 14;
  pub const VT_SHIELDEFFECTSCALE: flatbuffers::VOffsetT = 16;
  pub const VT_UNITFXPREFABNAME: flatbuffers::VOffsetT = 18;
  pub const VT_POINTANIMATION: flatbuffers::VOffsetT = 20;
  pub const VT_ENEMYTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_TEAM: flatbuffers::VOffsetT = 24;
  pub const VT_UNITGROUP: flatbuffers::VOffsetT = 26;
  pub const VT_PREVUNITGROUP: flatbuffers::VOffsetT = 28;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 30;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 32;
  pub const VT_STARGOAL: flatbuffers::VOffsetT = 34;
  pub const VT_STARGOALAMOUNT: flatbuffers::VOffsetT = 36;
  pub const VT_GROUPBUFFID: flatbuffers::VOffsetT = 38;
  pub const VT_STAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 40;
  pub const VT_STAGEENTERCOSTID: flatbuffers::VOffsetT = 42;
  pub const VT_STAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 44;
  pub const VT_MANAGEECHELONSTAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 46;
  pub const VT_MANAGEECHELONSTAGEENTERCOSTID: flatbuffers::VOffsetT = 48;
  pub const VT_MANAGEECHELONSTAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 50;
  pub const VT_ENTERSCENARIOGROUPID: flatbuffers::VOffsetT = 52;
  pub const VT_CLEARSCENARIOGROUPID: flatbuffers::VOffsetT = 54;
  pub const VT_CONQUESTREWARDID: flatbuffers::VOffsetT = 56;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 58;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 60;
  pub const VT_TACTICREWARDEXP: flatbuffers::VOffsetT = 62;
  pub const VT_FIXEDECHELONID: flatbuffers::VOffsetT = 64;
  pub const VT_ECHELONEXTENSIONTYPE: flatbuffers::VOffsetT = 66;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestUnitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestUnitExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestUnitExcel<'bldr>> {
    let mut builder = ConquestUnitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestUnit");
      let x = args.FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FixedEchelonId(x);
      let x = args.TacticRewardExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TacticRewardExp(x);
      let x = args.ConquestRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConquestRewardId(x);
      let x = args.ClearScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearScenarioGroupId(x);
      let x = args.EnterScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnterScenarioGroupId(x);
      let x = args.ManageEchelonStageEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ManageEchelonStageEnterCostId(x);
      let x = args.StageEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterCostId(x);
      let x = args.GroupBuffId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupBuffId(x);
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.PrevUnitGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevUnitGroup(x);
      let x = args.UnitGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UnitGroup(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EchelonExtensionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EchelonExtensionType(x);
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      let x = args.ManageEchelonStageEnterCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ManageEchelonStageEnterCostAmount(x);
      let x = args.ManageEchelonStageEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ManageEchelonStageEnterCostType(x);
      let x = args.StageEnterCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterCostAmount(x);
      let x = args.StageEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageEnterCostType(x);
      if let Some(x) = args.StarGoalAmount {
        builder.add_StarGoalAmount(x);
      }
      if let Some(x) = args.StarGoal {
        builder.add_StarGoal(x);
      }
      let x = args.Team;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Team(x);
      let x = args.EnemyType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EnemyType(x);
      if let Some(x) = args.PointAnimation {
        builder.add_PointAnimation(x);
      }
      if let Some(x) = args.UnitFxPrefabName {
        builder.add_UnitFxPrefabName(x);
      }
      let x = args.ShieldEffectScale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ShieldEffectScale(x);
      let x = args.Scale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Scale(x);
      if let Some(x) = args.StrategyPrefabName {
        builder.add_StrategyPrefabName(x);
      }
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      let x = args.Key;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Key(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestUnitExcelT {
    let key = table_encryption_service::create_key(b"ConquestUnit");
      let Id = self.Id();
      let Key = self.Key();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StrategyPrefabName = self.StrategyPrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Scale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Scale(), &key)
      } else {
        self.Scale()
      };
      let ShieldEffectScale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ShieldEffectScale(), &key)
      } else {
        self.ShieldEffectScale()
      };
    let UnitFxPrefabName = self.UnitFxPrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PointAnimation = self.PointAnimation().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EnemyType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EnemyType(), &key)
      } else {
        self.EnemyType()
      };
      let Team = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Team(), &key)
      } else {
        self.Team()
      };
      let UnitGroup = self.UnitGroup();
      let PrevUnitGroup = self.PrevUnitGroup();
      let BattleDuration = self.BattleDuration();
      let GroundId = self.GroundId();
    let StarGoal = self.StarGoal().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let StarGoalAmount = self.StarGoalAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
      let GroupBuffId = self.GroupBuffId();
      let StageEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageEnterCostType(), &key)
      } else {
        self.StageEnterCostType()
      };
      let StageEnterCostId = self.StageEnterCostId();
      let StageEnterCostAmount = self.StageEnterCostAmount();
      let ManageEchelonStageEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ManageEchelonStageEnterCostType(), &key)
      } else {
        self.ManageEchelonStageEnterCostType()
      };
      let ManageEchelonStageEnterCostId = self.ManageEchelonStageEnterCostId();
      let ManageEchelonStageEnterCostAmount = self.ManageEchelonStageEnterCostAmount();
      let EnterScenarioGroupId = self.EnterScenarioGroupId();
      let ClearScenarioGroupId = self.ClearScenarioGroupId();
      let ConquestRewardId = self.ConquestRewardId();
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let RecommandLevel = self.RecommandLevel();
      let TacticRewardExp = self.TacticRewardExp();
      let FixedEchelonId = self.FixedEchelonId();
      let EchelonExtensionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EchelonExtensionType(), &key)
      } else {
        self.EchelonExtensionType()
      };
    ConquestUnitExcelT {
      Id,
      Key,
      Name,
      PrefabName,
      StrategyPrefabName,
      Scale,
      ShieldEffectScale,
      UnitFxPrefabName,
      PointAnimation,
      EnemyType,
      Team,
      UnitGroup,
      PrevUnitGroup,
      BattleDuration,
      GroundId,
      StarGoal,
      StarGoalAmount,
      GroupBuffId,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      ManageEchelonStageEnterCostType,
      ManageEchelonStageEnterCostId,
      ManageEchelonStageEnterCostAmount,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      ConquestRewardId,
      StageTopography,
      RecommandLevel,
      TacticRewardExp,
      FixedEchelonId,
      EchelonExtensionType,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Key(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ConquestUnitExcel::VT_KEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestUnitExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestUnitExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn StrategyPrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestUnitExcel::VT_STRATEGYPREFABNAME, None)}
  }
  #[inline]
  pub fn Scale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestUnitExcel::VT_SCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ShieldEffectScale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConquestUnitExcel::VT_SHIELDEFFECTSCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn UnitFxPrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestUnitExcel::VT_UNITFXPREFABNAME, None)}
  }
  #[inline]
  pub fn PointAnimation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestUnitExcel::VT_POINTANIMATION, None)}
  }
  #[inline]
  pub fn EnemyType(&self) -> ConquestEnemyType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConquestEnemyType>(ConquestUnitExcel::VT_ENEMYTYPE, Some(ConquestEnemyType::None)).unwrap()}
  }
  #[inline]
  pub fn Team(&self) -> ConquestTeamType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConquestTeamType>(ConquestUnitExcel::VT_TEAM, Some(ConquestTeamType::None)).unwrap()}
  }
  #[inline]
  pub fn UnitGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_UNITGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrevUnitGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_PREVUNITGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarGoal(&self) -> Option<flatbuffers::Vector<'a, StarGoalType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, StarGoalType>>>(ConquestUnitExcel::VT_STARGOAL, None)}
  }
  #[inline]
  pub fn StarGoalAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(ConquestUnitExcel::VT_STARGOALAMOUNT, None)}
  }
  #[inline]
  pub fn GroupBuffId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_GROUPBUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestUnitExcel::VT_STAGEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_STAGEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestUnitExcel::VT_STAGEENTERCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ManageEchelonStageEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestUnitExcel::VT_MANAGEECHELONSTAGEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ManageEchelonStageEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_MANAGEECHELONSTAGEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ManageEchelonStageEnterCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestUnitExcel::VT_MANAGEECHELONSTAGEENTERCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnterScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_ENTERSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ClearScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_CLEARSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_CONQUESTREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(ConquestUnitExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestUnitExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TacticRewardExp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_TACTICREWARDEXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestUnitExcel::VT_FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EchelonExtensionType(&self) -> EchelonExtensionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonExtensionType>(ConquestUnitExcel::VT_ECHELONEXTENSIONTYPE, Some(EchelonExtensionType::Base)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestUnitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("Key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StrategyPrefabName", Self::VT_STRATEGYPREFABNAME, false)?
     .visit_field::<f32>("Scale", Self::VT_SCALE, false)?
     .visit_field::<f32>("ShieldEffectScale", Self::VT_SHIELDEFFECTSCALE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("UnitFxPrefabName", Self::VT_UNITFXPREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PointAnimation", Self::VT_POINTANIMATION, false)?
     .visit_field::<ConquestEnemyType>("EnemyType", Self::VT_ENEMYTYPE, false)?
     .visit_field::<ConquestTeamType>("Team", Self::VT_TEAM, false)?
     .visit_field::<i64>("UnitGroup", Self::VT_UNITGROUP, false)?
     .visit_field::<i64>("PrevUnitGroup", Self::VT_PREVUNITGROUP, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, StarGoalType>>>("StarGoal", Self::VT_STARGOAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("StarGoalAmount", Self::VT_STARGOALAMOUNT, false)?
     .visit_field::<i64>("GroupBuffId", Self::VT_GROUPBUFFID, false)?
     .visit_field::<ParcelType>("StageEnterCostType", Self::VT_STAGEENTERCOSTTYPE, false)?
     .visit_field::<i64>("StageEnterCostId", Self::VT_STAGEENTERCOSTID, false)?
     .visit_field::<i32>("StageEnterCostAmount", Self::VT_STAGEENTERCOSTAMOUNT, false)?
     .visit_field::<ParcelType>("ManageEchelonStageEnterCostType", Self::VT_MANAGEECHELONSTAGEENTERCOSTTYPE, false)?
     .visit_field::<i64>("ManageEchelonStageEnterCostId", Self::VT_MANAGEECHELONSTAGEENTERCOSTID, false)?
     .visit_field::<i32>("ManageEchelonStageEnterCostAmount", Self::VT_MANAGEECHELONSTAGEENTERCOSTAMOUNT, false)?
     .visit_field::<i64>("EnterScenarioGroupId", Self::VT_ENTERSCENARIOGROUPID, false)?
     .visit_field::<i64>("ClearScenarioGroupId", Self::VT_CLEARSCENARIOGROUPID, false)?
     .visit_field::<i64>("ConquestRewardId", Self::VT_CONQUESTREWARDID, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<i32>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<i64>("TacticRewardExp", Self::VT_TACTICREWARDEXP, false)?
     .visit_field::<i64>("FixedEchelonId", Self::VT_FIXEDECHELONID, false)?
     .visit_field::<EchelonExtensionType>("EchelonExtensionType", Self::VT_ECHELONEXTENSIONTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestUnitExcelArgs<'a> {
    pub Id: i64,
    pub Key: u32,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StrategyPrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Scale: f32,
    pub ShieldEffectScale: f32,
    pub UnitFxPrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PointAnimation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EnemyType: ConquestEnemyType,
    pub Team: ConquestTeamType,
    pub UnitGroup: i64,
    pub PrevUnitGroup: i64,
    pub BattleDuration: i64,
    pub GroundId: i64,
    pub StarGoal: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, StarGoalType>>>,
    pub StarGoalAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub GroupBuffId: i64,
    pub StageEnterCostType: ParcelType,
    pub StageEnterCostId: i64,
    pub StageEnterCostAmount: i32,
    pub ManageEchelonStageEnterCostType: ParcelType,
    pub ManageEchelonStageEnterCostId: i64,
    pub ManageEchelonStageEnterCostAmount: i32,
    pub EnterScenarioGroupId: i64,
    pub ClearScenarioGroupId: i64,
    pub ConquestRewardId: i64,
    pub StageTopography: StageTopography,
    pub RecommandLevel: i32,
    pub TacticRewardExp: i64,
    pub FixedEchelonId: i64,
    pub EchelonExtensionType: EchelonExtensionType,
}
impl<'a> Default for ConquestUnitExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestUnitExcelArgs {
      Id: 0,
      Key: 0,
      Name: None,
      PrefabName: None,
      StrategyPrefabName: None,
      Scale: 0.0,
      ShieldEffectScale: 0.0,
      UnitFxPrefabName: None,
      PointAnimation: None,
      EnemyType: ConquestEnemyType::None,
      Team: ConquestTeamType::None,
      UnitGroup: 0,
      PrevUnitGroup: 0,
      BattleDuration: 0,
      GroundId: 0,
      StarGoal: None,
      StarGoalAmount: None,
      GroupBuffId: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      ManageEchelonStageEnterCostType: ParcelType::None,
      ManageEchelonStageEnterCostId: 0,
      ManageEchelonStageEnterCostAmount: 0,
      EnterScenarioGroupId: 0,
      ClearScenarioGroupId: 0,
      ConquestRewardId: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      TacticRewardExp: 0,
      FixedEchelonId: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}

impl Serialize for ConquestUnitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestUnitExcel", 32)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Key", &self.Key())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      if let Some(f) = self.StrategyPrefabName() {
        s.serialize_field("StrategyPrefabName", &f)?;
      } else {
        s.skip_field("StrategyPrefabName")?;
      }
      s.serialize_field("Scale", &self.Scale())?;
      s.serialize_field("ShieldEffectScale", &self.ShieldEffectScale())?;
      if let Some(f) = self.UnitFxPrefabName() {
        s.serialize_field("UnitFxPrefabName", &f)?;
      } else {
        s.skip_field("UnitFxPrefabName")?;
      }
      if let Some(f) = self.PointAnimation() {
        s.serialize_field("PointAnimation", &f)?;
      } else {
        s.skip_field("PointAnimation")?;
      }
      s.serialize_field("EnemyType", &self.EnemyType())?;
      s.serialize_field("Team", &self.Team())?;
      s.serialize_field("UnitGroup", &self.UnitGroup())?;
      s.serialize_field("PrevUnitGroup", &self.PrevUnitGroup())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("GroundId", &self.GroundId())?;
      if let Some(f) = self.StarGoal() {
        s.serialize_field("StarGoal", &f)?;
      } else {
        s.skip_field("StarGoal")?;
      }
      if let Some(f) = self.StarGoalAmount() {
        s.serialize_field("StarGoalAmount", &f)?;
      } else {
        s.skip_field("StarGoalAmount")?;
      }
      s.serialize_field("GroupBuffId", &self.GroupBuffId())?;
      s.serialize_field("StageEnterCostType", &self.StageEnterCostType())?;
      s.serialize_field("StageEnterCostId", &self.StageEnterCostId())?;
      s.serialize_field("StageEnterCostAmount", &self.StageEnterCostAmount())?;
      s.serialize_field("ManageEchelonStageEnterCostType", &self.ManageEchelonStageEnterCostType())?;
      s.serialize_field("ManageEchelonStageEnterCostId", &self.ManageEchelonStageEnterCostId())?;
      s.serialize_field("ManageEchelonStageEnterCostAmount", &self.ManageEchelonStageEnterCostAmount())?;
      s.serialize_field("EnterScenarioGroupId", &self.EnterScenarioGroupId())?;
      s.serialize_field("ClearScenarioGroupId", &self.ClearScenarioGroupId())?;
      s.serialize_field("ConquestRewardId", &self.ConquestRewardId())?;
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      s.serialize_field("TacticRewardExp", &self.TacticRewardExp())?;
      s.serialize_field("FixedEchelonId", &self.FixedEchelonId())?;
      s.serialize_field("EchelonExtensionType", &self.EchelonExtensionType())?;
    s.end()
  }
}

pub struct ConquestUnitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestUnitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Key(&mut self, Key: u32) {
    self.fbb_.push_slot::<u32>(ConquestUnitExcel::VT_KEY, Key, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnitExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnitExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_StrategyPrefabName(&mut self, StrategyPrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnitExcel::VT_STRATEGYPREFABNAME, StrategyPrefabName);
  }
  #[inline]
  pub fn add_Scale(&mut self, Scale: f32) {
    self.fbb_.push_slot::<f32>(ConquestUnitExcel::VT_SCALE, Scale, 0.0);
  }
  #[inline]
  pub fn add_ShieldEffectScale(&mut self, ShieldEffectScale: f32) {
    self.fbb_.push_slot::<f32>(ConquestUnitExcel::VT_SHIELDEFFECTSCALE, ShieldEffectScale, 0.0);
  }
  #[inline]
  pub fn add_UnitFxPrefabName(&mut self, UnitFxPrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnitExcel::VT_UNITFXPREFABNAME, UnitFxPrefabName);
  }
  #[inline]
  pub fn add_PointAnimation(&mut self, PointAnimation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnitExcel::VT_POINTANIMATION, PointAnimation);
  }
  #[inline]
  pub fn add_EnemyType(&mut self, EnemyType: ConquestEnemyType) {
    self.fbb_.push_slot::<ConquestEnemyType>(ConquestUnitExcel::VT_ENEMYTYPE, EnemyType, ConquestEnemyType::None);
  }
  #[inline]
  pub fn add_Team(&mut self, Team: ConquestTeamType) {
    self.fbb_.push_slot::<ConquestTeamType>(ConquestUnitExcel::VT_TEAM, Team, ConquestTeamType::None);
  }
  #[inline]
  pub fn add_UnitGroup(&mut self, UnitGroup: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_UNITGROUP, UnitGroup, 0);
  }
  #[inline]
  pub fn add_PrevUnitGroup(&mut self, PrevUnitGroup: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_PREVUNITGROUP, PrevUnitGroup, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_StarGoal(&mut self, StarGoal: flatbuffers::WIPOffset<flatbuffers::Vector<'b , StarGoalType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnitExcel::VT_STARGOAL, StarGoal);
  }
  #[inline]
  pub fn add_StarGoalAmount(&mut self, StarGoalAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestUnitExcel::VT_STARGOALAMOUNT, StarGoalAmount);
  }
  #[inline]
  pub fn add_GroupBuffId(&mut self, GroupBuffId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_GROUPBUFFID, GroupBuffId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostType(&mut self, StageEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestUnitExcel::VT_STAGEENTERCOSTTYPE, StageEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_StageEnterCostId(&mut self, StageEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_STAGEENTERCOSTID, StageEnterCostId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostAmount(&mut self, StageEnterCostAmount: i32) {
    self.fbb_.push_slot::<i32>(ConquestUnitExcel::VT_STAGEENTERCOSTAMOUNT, StageEnterCostAmount, 0);
  }
  #[inline]
  pub fn add_ManageEchelonStageEnterCostType(&mut self, ManageEchelonStageEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestUnitExcel::VT_MANAGEECHELONSTAGEENTERCOSTTYPE, ManageEchelonStageEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_ManageEchelonStageEnterCostId(&mut self, ManageEchelonStageEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_MANAGEECHELONSTAGEENTERCOSTID, ManageEchelonStageEnterCostId, 0);
  }
  #[inline]
  pub fn add_ManageEchelonStageEnterCostAmount(&mut self, ManageEchelonStageEnterCostAmount: i32) {
    self.fbb_.push_slot::<i32>(ConquestUnitExcel::VT_MANAGEECHELONSTAGEENTERCOSTAMOUNT, ManageEchelonStageEnterCostAmount, 0);
  }
  #[inline]
  pub fn add_EnterScenarioGroupId(&mut self, EnterScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_ENTERSCENARIOGROUPID, EnterScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_ClearScenarioGroupId(&mut self, ClearScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_CLEARSCENARIOGROUPID, ClearScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_ConquestRewardId(&mut self, ConquestRewardId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_CONQUESTREWARDID, ConquestRewardId, 0);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(ConquestUnitExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i32) {
    self.fbb_.push_slot::<i32>(ConquestUnitExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_TacticRewardExp(&mut self, TacticRewardExp: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_TACTICREWARDEXP, TacticRewardExp, 0);
  }
  #[inline]
  pub fn add_FixedEchelonId(&mut self, FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(ConquestUnitExcel::VT_FIXEDECHELONID, FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_EchelonExtensionType(&mut self, EchelonExtensionType: EchelonExtensionType) {
    self.fbb_.push_slot::<EchelonExtensionType>(ConquestUnitExcel::VT_ECHELONEXTENSIONTYPE, EchelonExtensionType, EchelonExtensionType::Base);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestUnitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestUnitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestUnitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestUnitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestUnitExcel");
      ds.field("Id", &self.Id());
      ds.field("Key", &self.Key());
      ds.field("Name", &self.Name());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("StrategyPrefabName", &self.StrategyPrefabName());
      ds.field("Scale", &self.Scale());
      ds.field("ShieldEffectScale", &self.ShieldEffectScale());
      ds.field("UnitFxPrefabName", &self.UnitFxPrefabName());
      ds.field("PointAnimation", &self.PointAnimation());
      ds.field("EnemyType", &self.EnemyType());
      ds.field("Team", &self.Team());
      ds.field("UnitGroup", &self.UnitGroup());
      ds.field("PrevUnitGroup", &self.PrevUnitGroup());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("GroundId", &self.GroundId());
      ds.field("StarGoal", &self.StarGoal());
      ds.field("StarGoalAmount", &self.StarGoalAmount());
      ds.field("GroupBuffId", &self.GroupBuffId());
      ds.field("StageEnterCostType", &self.StageEnterCostType());
      ds.field("StageEnterCostId", &self.StageEnterCostId());
      ds.field("StageEnterCostAmount", &self.StageEnterCostAmount());
      ds.field("ManageEchelonStageEnterCostType", &self.ManageEchelonStageEnterCostType());
      ds.field("ManageEchelonStageEnterCostId", &self.ManageEchelonStageEnterCostId());
      ds.field("ManageEchelonStageEnterCostAmount", &self.ManageEchelonStageEnterCostAmount());
      ds.field("EnterScenarioGroupId", &self.EnterScenarioGroupId());
      ds.field("ClearScenarioGroupId", &self.ClearScenarioGroupId());
      ds.field("ConquestRewardId", &self.ConquestRewardId());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("TacticRewardExp", &self.TacticRewardExp());
      ds.field("FixedEchelonId", &self.FixedEchelonId());
      ds.field("EchelonExtensionType", &self.EchelonExtensionType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestUnitExcelT {
  pub Id: i64,
  pub Key: u32,
  pub Name: Option<String>,
  pub PrefabName: Option<String>,
  pub StrategyPrefabName: Option<String>,
  pub Scale: f32,
  pub ShieldEffectScale: f32,
  pub UnitFxPrefabName: Option<String>,
  pub PointAnimation: Option<String>,
  pub EnemyType: ConquestEnemyType,
  pub Team: ConquestTeamType,
  pub UnitGroup: i64,
  pub PrevUnitGroup: i64,
  pub BattleDuration: i64,
  pub GroundId: i64,
  pub StarGoal: Option<Vec<StarGoalType>>,
  pub StarGoalAmount: Option<Vec<i32>>,
  pub GroupBuffId: i64,
  pub StageEnterCostType: ParcelType,
  pub StageEnterCostId: i64,
  pub StageEnterCostAmount: i32,
  pub ManageEchelonStageEnterCostType: ParcelType,
  pub ManageEchelonStageEnterCostId: i64,
  pub ManageEchelonStageEnterCostAmount: i32,
  pub EnterScenarioGroupId: i64,
  pub ClearScenarioGroupId: i64,
  pub ConquestRewardId: i64,
  pub StageTopography: StageTopography,
  pub RecommandLevel: i32,
  pub TacticRewardExp: i64,
  pub FixedEchelonId: i64,
  pub EchelonExtensionType: EchelonExtensionType,
}
impl Default for ConquestUnitExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Key: 0,
      Name: None,
      PrefabName: None,
      StrategyPrefabName: None,
      Scale: 0.0,
      ShieldEffectScale: 0.0,
      UnitFxPrefabName: None,
      PointAnimation: None,
      EnemyType: ConquestEnemyType::None,
      Team: ConquestTeamType::None,
      UnitGroup: 0,
      PrevUnitGroup: 0,
      BattleDuration: 0,
      GroundId: 0,
      StarGoal: None,
      StarGoalAmount: None,
      GroupBuffId: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      ManageEchelonStageEnterCostType: ParcelType::None,
      ManageEchelonStageEnterCostId: 0,
      ManageEchelonStageEnterCostAmount: 0,
      EnterScenarioGroupId: 0,
      ClearScenarioGroupId: 0,
      ConquestRewardId: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      TacticRewardExp: 0,
      FixedEchelonId: 0,
      EchelonExtensionType: EchelonExtensionType::Base,
    }
  }
}
impl ConquestUnitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestUnitExcel<'b>> {
    let Id = self.Id;
    let Key = self.Key;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StrategyPrefabName = self.StrategyPrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Scale = self.Scale;
    let ShieldEffectScale = self.ShieldEffectScale;
    let UnitFxPrefabName = self.UnitFxPrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PointAnimation = self.PointAnimation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EnemyType = self.EnemyType;
    let Team = self.Team;
    let UnitGroup = self.UnitGroup;
    let PrevUnitGroup = self.PrevUnitGroup;
    let BattleDuration = self.BattleDuration;
    let GroundId = self.GroundId;
    let StarGoal = self.StarGoal.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let StarGoalAmount = self.StarGoalAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let GroupBuffId = self.GroupBuffId;
    let StageEnterCostType = self.StageEnterCostType;
    let StageEnterCostId = self.StageEnterCostId;
    let StageEnterCostAmount = self.StageEnterCostAmount;
    let ManageEchelonStageEnterCostType = self.ManageEchelonStageEnterCostType;
    let ManageEchelonStageEnterCostId = self.ManageEchelonStageEnterCostId;
    let ManageEchelonStageEnterCostAmount = self.ManageEchelonStageEnterCostAmount;
    let EnterScenarioGroupId = self.EnterScenarioGroupId;
    let ClearScenarioGroupId = self.ClearScenarioGroupId;
    let ConquestRewardId = self.ConquestRewardId;
    let StageTopography = self.StageTopography;
    let RecommandLevel = self.RecommandLevel;
    let TacticRewardExp = self.TacticRewardExp;
    let FixedEchelonId = self.FixedEchelonId;
    let EchelonExtensionType = self.EchelonExtensionType;
    ConquestUnitExcel::create(_fbb, &ConquestUnitExcelArgs{
      Id,
      Key,
      Name,
      PrefabName,
      StrategyPrefabName,
      Scale,
      ShieldEffectScale,
      UnitFxPrefabName,
      PointAnimation,
      EnemyType,
      Team,
      UnitGroup,
      PrevUnitGroup,
      BattleDuration,
      GroundId,
      StarGoal,
      StarGoalAmount,
      GroupBuffId,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      ManageEchelonStageEnterCostType,
      ManageEchelonStageEnterCostId,
      ManageEchelonStageEnterCostAmount,
      EnterScenarioGroupId,
      ClearScenarioGroupId,
      ConquestRewardId,
      StageTopography,
      RecommandLevel,
      TacticRewardExp,
      FixedEchelonId,
      EchelonExtensionType,
    })
  }
}
