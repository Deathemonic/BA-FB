// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamCollectionScenarioExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamCollectionScenarioExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamCollectionScenarioExcel<'a> {
  type Inner = MiniGameDreamCollectionScenarioExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamCollectionScenarioExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ISSKIP: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 8;
  pub const VT_PARAMETER: flatbuffers::VOffsetT = 10;
  pub const VT_PARAMETERAMOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_SCENARIOGROUPID: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamCollectionScenarioExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamCollectionScenarioExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamCollectionScenarioExcel<'bldr>> {
    let mut builder = MiniGameDreamCollectionScenarioExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamCollectionScenario");
      let x = args.ScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioGroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ParameterAmount {
        builder.add_ParameterAmount(x);
      }
      if let Some(x) = args.Parameter {
        builder.add_Parameter(x);
      }
      builder.add_IsSkip(args.IsSkip);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamCollectionScenarioExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamCollectionScenario");
      let Id = self.Id();
      let IsSkip = self.IsSkip();
      let EventContentId = self.EventContentId();
    let Parameter = self.Parameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ParameterAmount = self.ParameterAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let ScenarioGroupId = self.ScenarioGroupId();
    MiniGameDreamCollectionScenarioExcelT {
      Id,
      IsSkip,
      EventContentId,
      Parameter,
      ParameterAmount,
      ScenarioGroupId,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamCollectionScenarioExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsSkip(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MiniGameDreamCollectionScenarioExcel::VT_ISSKIP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamCollectionScenarioExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Parameter(&self) -> Option<flatbuffers::Vector<'a, DreamMakerParameterType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, DreamMakerParameterType>>>(MiniGameDreamCollectionScenarioExcel::VT_PARAMETER, None)}
  }
  #[inline]
  pub fn ParameterAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MiniGameDreamCollectionScenarioExcel::VT_PARAMETERAMOUNT, None)}
  }
  #[inline]
  pub fn ScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamCollectionScenarioExcel::VT_SCENARIOGROUPID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamCollectionScenarioExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<bool>("IsSkip", Self::VT_ISSKIP, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, DreamMakerParameterType>>>("Parameter", Self::VT_PARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("ParameterAmount", Self::VT_PARAMETERAMOUNT, false)?
     .visit_field::<i64>("ScenarioGroupId", Self::VT_SCENARIOGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamCollectionScenarioExcelArgs<'a> {
    pub Id: i64,
    pub IsSkip: bool,
    pub EventContentId: i64,
    pub Parameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, DreamMakerParameterType>>>,
    pub ParameterAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ScenarioGroupId: i64,
}
impl<'a> Default for MiniGameDreamCollectionScenarioExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamCollectionScenarioExcelArgs {
      Id: 0,
      IsSkip: false,
      EventContentId: 0,
      Parameter: None,
      ParameterAmount: None,
      ScenarioGroupId: 0,
    }
  }
}

impl Serialize for MiniGameDreamCollectionScenarioExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamCollectionScenarioExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("IsSkip", &self.IsSkip())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      if let Some(f) = self.Parameter() {
        s.serialize_field("Parameter", &f)?;
      } else {
        s.skip_field("Parameter")?;
      }
      if let Some(f) = self.ParameterAmount() {
        s.serialize_field("ParameterAmount", &f)?;
      } else {
        s.skip_field("ParameterAmount")?;
      }
      s.serialize_field("ScenarioGroupId", &self.ScenarioGroupId())?;
    s.end()
  }
}

pub struct MiniGameDreamCollectionScenarioExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamCollectionScenarioExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamCollectionScenarioExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_IsSkip(&mut self, IsSkip: bool) {
    self.fbb_.push_slot::<bool>(MiniGameDreamCollectionScenarioExcel::VT_ISSKIP, IsSkip, false);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamCollectionScenarioExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_Parameter(&mut self, Parameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , DreamMakerParameterType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamCollectionScenarioExcel::VT_PARAMETER, Parameter);
  }
  #[inline]
  pub fn add_ParameterAmount(&mut self, ParameterAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamCollectionScenarioExcel::VT_PARAMETERAMOUNT, ParameterAmount);
  }
  #[inline]
  pub fn add_ScenarioGroupId(&mut self, ScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamCollectionScenarioExcel::VT_SCENARIOGROUPID, ScenarioGroupId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamCollectionScenarioExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamCollectionScenarioExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamCollectionScenarioExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamCollectionScenarioExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamCollectionScenarioExcel");
      ds.field("Id", &self.Id());
      ds.field("IsSkip", &self.IsSkip());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("Parameter", &self.Parameter());
      ds.field("ParameterAmount", &self.ParameterAmount());
      ds.field("ScenarioGroupId", &self.ScenarioGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamCollectionScenarioExcelT {
  pub Id: i64,
  pub IsSkip: bool,
  pub EventContentId: i64,
  pub Parameter: Option<Vec<DreamMakerParameterType>>,
  pub ParameterAmount: Option<Vec<i64>>,
  pub ScenarioGroupId: i64,
}
impl Default for MiniGameDreamCollectionScenarioExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      IsSkip: false,
      EventContentId: 0,
      Parameter: None,
      ParameterAmount: None,
      ScenarioGroupId: 0,
    }
  }
}
impl MiniGameDreamCollectionScenarioExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamCollectionScenarioExcel<'b>> {
    let Id = self.Id;
    let IsSkip = self.IsSkip;
    let EventContentId = self.EventContentId;
    let Parameter = self.Parameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ParameterAmount = self.ParameterAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ScenarioGroupId = self.ScenarioGroupId;
    MiniGameDreamCollectionScenarioExcel::create(_fbb, &MiniGameDreamCollectionScenarioExcelArgs{
      Id,
      IsSkip,
      EventContentId,
      Parameter,
      ParameterAmount,
      ScenarioGroupId,
    })
  }
}
