// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstKeyMappingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstKeyMappingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstKeyMappingExcel<'a> {
  type Inner = ConstKeyMappingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstKeyMappingExcel<'a> {
  pub const VT_DRAGSENSITIVITY: flatbuffers::VOffsetT = 4;
  pub const VT_PCINFORMATIONGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_SCROLLWHEELFACTOR: flatbuffers::VOffsetT = 8;
  pub const VT_REMOVEKEYCODEWORD: flatbuffers::VOffsetT = 10;
  pub const VT_TUTORIALDIALOGTOUCHKEY: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstKeyMappingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstKeyMappingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConstKeyMappingExcel<'bldr>> {
    let mut builder = ConstKeyMappingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstKeyMapping");
      let x = args.PcInformationGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PcInformationGroupID(x);
      if let Some(x) = args.TutorialDialogTouchKey {
        builder.add_TutorialDialogTouchKey(x);
      }
      if let Some(x) = args.RemoveKeycodeWord {
        builder.add_RemoveKeycodeWord(x);
      }
      let x = args.ScrollWheelFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ScrollWheelFactor(x);
      let x = args.DragSensitivity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_DragSensitivity(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ConstKeyMappingExcelT {
    let key = table_encryption_service::create_key(b"ConstKeyMapping");
      let DragSensitivity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.DragSensitivity(), &key)
      } else {
        self.DragSensitivity()
      };
      let PcInformationGroupID = self.PcInformationGroupID();
      let ScrollWheelFactor = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ScrollWheelFactor(), &key)
      } else {
        self.ScrollWheelFactor()
      };
    let RemoveKeycodeWord = self.RemoveKeycodeWord().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TutorialDialogTouchKey = self.TutorialDialogTouchKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ConstKeyMappingExcelT {
      DragSensitivity,
      PcInformationGroupID,
      ScrollWheelFactor,
      RemoveKeycodeWord,
      TutorialDialogTouchKey,
    }
  }

  #[inline]
  pub fn DragSensitivity(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstKeyMappingExcel::VT_DRAGSENSITIVITY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn PcInformationGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConstKeyMappingExcel::VT_PCINFORMATIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ScrollWheelFactor(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ConstKeyMappingExcel::VT_SCROLLWHEELFACTOR, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn RemoveKeycodeWord(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstKeyMappingExcel::VT_REMOVEKEYCODEWORD, None)}
  }
  #[inline]
  pub fn TutorialDialogTouchKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstKeyMappingExcel::VT_TUTORIALDIALOGTOUCHKEY, None)}
  }
}

impl flatbuffers::Verifiable for ConstKeyMappingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("DragSensitivity", Self::VT_DRAGSENSITIVITY, false)?
     .visit_field::<i64>("PcInformationGroupID", Self::VT_PCINFORMATIONGROUPID, false)?
     .visit_field::<f32>("ScrollWheelFactor", Self::VT_SCROLLWHEELFACTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RemoveKeycodeWord", Self::VT_REMOVEKEYCODEWORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TutorialDialogTouchKey", Self::VT_TUTORIALDIALOGTOUCHKEY, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstKeyMappingExcelArgs<'a> {
    pub DragSensitivity: f32,
    pub PcInformationGroupID: i64,
    pub ScrollWheelFactor: f32,
    pub RemoveKeycodeWord: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TutorialDialogTouchKey: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ConstKeyMappingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConstKeyMappingExcelArgs {
      DragSensitivity: 0.0,
      PcInformationGroupID: 0,
      ScrollWheelFactor: 0.0,
      RemoveKeycodeWord: None,
      TutorialDialogTouchKey: None,
    }
  }
}

impl Serialize for ConstKeyMappingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstKeyMappingExcel", 5)?;
      s.serialize_field("DragSensitivity", &self.DragSensitivity())?;
      s.serialize_field("PcInformationGroupID", &self.PcInformationGroupID())?;
      s.serialize_field("ScrollWheelFactor", &self.ScrollWheelFactor())?;
      if let Some(f) = self.RemoveKeycodeWord() {
        s.serialize_field("RemoveKeycodeWord", &f)?;
      } else {
        s.skip_field("RemoveKeycodeWord")?;
      }
      if let Some(f) = self.TutorialDialogTouchKey() {
        s.serialize_field("TutorialDialogTouchKey", &f)?;
      } else {
        s.skip_field("TutorialDialogTouchKey")?;
      }
    s.end()
  }
}

pub struct ConstKeyMappingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstKeyMappingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_DragSensitivity(&mut self, DragSensitivity: f32) {
    self.fbb_.push_slot::<f32>(ConstKeyMappingExcel::VT_DRAGSENSITIVITY, DragSensitivity, 0.0);
  }
  #[inline]
  pub fn add_PcInformationGroupID(&mut self, PcInformationGroupID: i64) {
    self.fbb_.push_slot::<i64>(ConstKeyMappingExcel::VT_PCINFORMATIONGROUPID, PcInformationGroupID, 0);
  }
  #[inline]
  pub fn add_ScrollWheelFactor(&mut self, ScrollWheelFactor: f32) {
    self.fbb_.push_slot::<f32>(ConstKeyMappingExcel::VT_SCROLLWHEELFACTOR, ScrollWheelFactor, 0.0);
  }
  #[inline]
  pub fn add_RemoveKeycodeWord(&mut self, RemoveKeycodeWord: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstKeyMappingExcel::VT_REMOVEKEYCODEWORD, RemoveKeycodeWord);
  }
  #[inline]
  pub fn add_TutorialDialogTouchKey(&mut self, TutorialDialogTouchKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstKeyMappingExcel::VT_TUTORIALDIALOGTOUCHKEY, TutorialDialogTouchKey);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstKeyMappingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstKeyMappingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstKeyMappingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstKeyMappingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstKeyMappingExcel");
      ds.field("DragSensitivity", &self.DragSensitivity());
      ds.field("PcInformationGroupID", &self.PcInformationGroupID());
      ds.field("ScrollWheelFactor", &self.ScrollWheelFactor());
      ds.field("RemoveKeycodeWord", &self.RemoveKeycodeWord());
      ds.field("TutorialDialogTouchKey", &self.TutorialDialogTouchKey());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstKeyMappingExcelT {
  pub DragSensitivity: f32,
  pub PcInformationGroupID: i64,
  pub ScrollWheelFactor: f32,
  pub RemoveKeycodeWord: Option<String>,
  pub TutorialDialogTouchKey: Option<String>,
}
impl Default for ConstKeyMappingExcelT {
  fn default() -> Self {
    Self {
      DragSensitivity: 0.0,
      PcInformationGroupID: 0,
      ScrollWheelFactor: 0.0,
      RemoveKeycodeWord: None,
      TutorialDialogTouchKey: None,
    }
  }
}
impl ConstKeyMappingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstKeyMappingExcel<'b>> {
    let DragSensitivity = self.DragSensitivity;
    let PcInformationGroupID = self.PcInformationGroupID;
    let ScrollWheelFactor = self.ScrollWheelFactor;
    let RemoveKeycodeWord = self.RemoveKeycodeWord.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TutorialDialogTouchKey = self.TutorialDialogTouchKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ConstKeyMappingExcel::create(_fbb, &ConstKeyMappingExcelArgs{
      DragSensitivity,
      PcInformationGroupID,
      ScrollWheelFactor,
      RemoveKeycodeWord,
      TutorialDialogTouchKey,
    })
  }
}
