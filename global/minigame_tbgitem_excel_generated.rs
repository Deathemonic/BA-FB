// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGItemExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGItemExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGItemExcel<'a> {
  type Inner = MinigameTBGItemExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGItemExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_ITEMTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_TBGITEMEFFECTTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_ITEMPARAMETER: flatbuffers::VOffsetT = 10;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 12;
  pub const VT_ICON: flatbuffers::VOffsetT = 14;
  pub const VT_BUFFICON: flatbuffers::VOffsetT = 16;
  pub const VT_ENCOUNTERCOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_DICEEFFECTANICLIP: flatbuffers::VOffsetT = 20;
  pub const VT_BUFFICONHUDVISIBLE: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGItemExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGItemExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameTBGItemExcel<'bldr>> {
    let mut builder = MinigameTBGItemExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGItem");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.DiceEffectAniClip {
        builder.add_DiceEffectAniClip(x);
      }
      let x = args.EncounterCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EncounterCount(x);
      if let Some(x) = args.BuffIcon {
        builder.add_BuffIcon(x);
      }
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      if let Some(x) = args.LocalizeETCId {
        builder.add_LocalizeETCId(x);
      }
      let x = args.ItemParameter;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ItemParameter(x);
      let x = args.TBGItemEffectType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TBGItemEffectType(x);
      let x = args.ItemType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ItemType(x);
      builder.add_BuffIconHUDVisible(args.BuffIconHUDVisible);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGItemExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGItem");
      let UniqueId = self.UniqueId();
      let ItemType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ItemType(), &key)
      } else {
        self.ItemType()
      };
      let TBGItemEffectType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TBGItemEffectType(), &key)
      } else {
        self.TBGItemEffectType()
      };
      let ItemParameter = self.ItemParameter();
    let LocalizeETCId = self.LocalizeETCId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BuffIcon = self.BuffIcon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EncounterCount = self.EncounterCount();
    let DiceEffectAniClip = self.DiceEffectAniClip().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BuffIconHUDVisible = self.BuffIconHUDVisible();
    MinigameTBGItemExcelT {
      UniqueId,
      ItemType,
      TBGItemEffectType,
      ItemParameter,
      LocalizeETCId,
      Icon,
      BuffIcon,
      EncounterCount,
      DiceEffectAniClip,
      BuffIconHUDVisible,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGItemExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ItemType(&self) -> TBGItemType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TBGItemType>(MinigameTBGItemExcel::VT_ITEMTYPE, Some(TBGItemType::None)).unwrap()}
  }
  #[inline]
  pub fn TBGItemEffectType(&self) -> TBGItemEffectType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TBGItemEffectType>(MinigameTBGItemExcel::VT_TBGITEMEFFECTTYPE, Some(TBGItemEffectType::None)).unwrap()}
  }
  #[inline]
  pub fn ItemParameter(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGItemExcel::VT_ITEMPARAMETER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeETCId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGItemExcel::VT_LOCALIZEETCID, None)}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGItemExcel::VT_ICON, None)}
  }
  #[inline]
  pub fn BuffIcon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGItemExcel::VT_BUFFICON, None)}
  }
  #[inline]
  pub fn EncounterCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGItemExcel::VT_ENCOUNTERCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiceEffectAniClip(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGItemExcel::VT_DICEEFFECTANICLIP, None)}
  }
  #[inline]
  pub fn BuffIconHUDVisible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameTBGItemExcel::VT_BUFFICONHUDVISIBLE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameTBGItemExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<TBGItemType>("ItemType", Self::VT_ITEMTYPE, false)?
     .visit_field::<TBGItemEffectType>("TBGItemEffectType", Self::VT_TBGITEMEFFECTTYPE, false)?
     .visit_field::<i32>("ItemParameter", Self::VT_ITEMPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeETCId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffIcon", Self::VT_BUFFICON, false)?
     .visit_field::<i32>("EncounterCount", Self::VT_ENCOUNTERCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DiceEffectAniClip", Self::VT_DICEEFFECTANICLIP, false)?
     .visit_field::<bool>("BuffIconHUDVisible", Self::VT_BUFFICONHUDVISIBLE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGItemExcelArgs<'a> {
    pub UniqueId: i64,
    pub ItemType: TBGItemType,
    pub TBGItemEffectType: TBGItemEffectType,
    pub ItemParameter: i32,
    pub LocalizeETCId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffIcon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EncounterCount: i32,
    pub DiceEffectAniClip: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffIconHUDVisible: bool,
}
impl<'a> Default for MinigameTBGItemExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameTBGItemExcelArgs {
      UniqueId: 0,
      ItemType: TBGItemType::None,
      TBGItemEffectType: TBGItemEffectType::None,
      ItemParameter: 0,
      LocalizeETCId: None,
      Icon: None,
      BuffIcon: None,
      EncounterCount: 0,
      DiceEffectAniClip: None,
      BuffIconHUDVisible: false,
    }
  }
}

impl Serialize for MinigameTBGItemExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGItemExcel", 10)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("ItemType", &self.ItemType())?;
      s.serialize_field("TBGItemEffectType", &self.TBGItemEffectType())?;
      s.serialize_field("ItemParameter", &self.ItemParameter())?;
      if let Some(f) = self.LocalizeETCId() {
        s.serialize_field("LocalizeETCId", &f)?;
      } else {
        s.skip_field("LocalizeETCId")?;
      }
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
      if let Some(f) = self.BuffIcon() {
        s.serialize_field("BuffIcon", &f)?;
      } else {
        s.skip_field("BuffIcon")?;
      }
      s.serialize_field("EncounterCount", &self.EncounterCount())?;
      if let Some(f) = self.DiceEffectAniClip() {
        s.serialize_field("DiceEffectAniClip", &f)?;
      } else {
        s.skip_field("DiceEffectAniClip")?;
      }
      s.serialize_field("BuffIconHUDVisible", &self.BuffIconHUDVisible())?;
    s.end()
  }
}

pub struct MinigameTBGItemExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGItemExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGItemExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_ItemType(&mut self, ItemType: TBGItemType) {
    self.fbb_.push_slot::<TBGItemType>(MinigameTBGItemExcel::VT_ITEMTYPE, ItemType, TBGItemType::None);
  }
  #[inline]
  pub fn add_TBGItemEffectType(&mut self, TBGItemEffectType: TBGItemEffectType) {
    self.fbb_.push_slot::<TBGItemEffectType>(MinigameTBGItemExcel::VT_TBGITEMEFFECTTYPE, TBGItemEffectType, TBGItemEffectType::None);
  }
  #[inline]
  pub fn add_ItemParameter(&mut self, ItemParameter: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGItemExcel::VT_ITEMPARAMETER, ItemParameter, 0);
  }
  #[inline]
  pub fn add_LocalizeETCId(&mut self, LocalizeETCId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGItemExcel::VT_LOCALIZEETCID, LocalizeETCId);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGItemExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn add_BuffIcon(&mut self, BuffIcon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGItemExcel::VT_BUFFICON, BuffIcon);
  }
  #[inline]
  pub fn add_EncounterCount(&mut self, EncounterCount: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGItemExcel::VT_ENCOUNTERCOUNT, EncounterCount, 0);
  }
  #[inline]
  pub fn add_DiceEffectAniClip(&mut self, DiceEffectAniClip: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGItemExcel::VT_DICEEFFECTANICLIP, DiceEffectAniClip);
  }
  #[inline]
  pub fn add_BuffIconHUDVisible(&mut self, BuffIconHUDVisible: bool) {
    self.fbb_.push_slot::<bool>(MinigameTBGItemExcel::VT_BUFFICONHUDVISIBLE, BuffIconHUDVisible, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGItemExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGItemExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGItemExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGItemExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGItemExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("ItemType", &self.ItemType());
      ds.field("TBGItemEffectType", &self.TBGItemEffectType());
      ds.field("ItemParameter", &self.ItemParameter());
      ds.field("LocalizeETCId", &self.LocalizeETCId());
      ds.field("Icon", &self.Icon());
      ds.field("BuffIcon", &self.BuffIcon());
      ds.field("EncounterCount", &self.EncounterCount());
      ds.field("DiceEffectAniClip", &self.DiceEffectAniClip());
      ds.field("BuffIconHUDVisible", &self.BuffIconHUDVisible());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGItemExcelT {
  pub UniqueId: i64,
  pub ItemType: TBGItemType,
  pub TBGItemEffectType: TBGItemEffectType,
  pub ItemParameter: i32,
  pub LocalizeETCId: Option<String>,
  pub Icon: Option<String>,
  pub BuffIcon: Option<String>,
  pub EncounterCount: i32,
  pub DiceEffectAniClip: Option<String>,
  pub BuffIconHUDVisible: bool,
}
impl Default for MinigameTBGItemExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      ItemType: TBGItemType::None,
      TBGItemEffectType: TBGItemEffectType::None,
      ItemParameter: 0,
      LocalizeETCId: None,
      Icon: None,
      BuffIcon: None,
      EncounterCount: 0,
      DiceEffectAniClip: None,
      BuffIconHUDVisible: false,
    }
  }
}
impl MinigameTBGItemExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGItemExcel<'b>> {
    let UniqueId = self.UniqueId;
    let ItemType = self.ItemType;
    let TBGItemEffectType = self.TBGItemEffectType;
    let ItemParameter = self.ItemParameter;
    let LocalizeETCId = self.LocalizeETCId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffIcon = self.BuffIcon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EncounterCount = self.EncounterCount;
    let DiceEffectAniClip = self.DiceEffectAniClip.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffIconHUDVisible = self.BuffIconHUDVisible;
    MinigameTBGItemExcel::create(_fbb, &MinigameTBGItemExcelArgs{
      UniqueId,
      ItemType,
      TBGItemEffectType,
      ItemParameter,
      LocalizeETCId,
      Icon,
      BuffIcon,
      EncounterCount,
      DiceEffectAniClip,
      BuffIconHUDVisible,
    })
  }
}
