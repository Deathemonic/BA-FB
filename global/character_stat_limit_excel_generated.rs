// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterStatLimitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterStatLimitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterStatLimitExcel<'a> {
  type Inner = CharacterStatLimitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterStatLimitExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TACTICENTITYTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_STATTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_STATMINVALUE: flatbuffers::VOffsetT = 10;
  pub const VT_STATMAXVALUE: flatbuffers::VOffsetT = 12;
  pub const VT_STATRATIOMINVALUE: flatbuffers::VOffsetT = 14;
  pub const VT_STATRATIOMAXVALUE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterStatLimitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterStatLimitExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterStatLimitExcel<'bldr>> {
    let mut builder = CharacterStatLimitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterStatLimit");
      let x = args.StatRatioMaxValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StatRatioMaxValue(x);
      let x = args.StatRatioMinValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StatRatioMinValue(x);
      let x = args.StatMaxValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StatMaxValue(x);
      let x = args.StatMinValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StatMinValue(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.StatType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StatType(x);
      let x = args.TacticEntityType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TacticEntityType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterStatLimitExcelT {
    let key = table_encryption_service::create_key(b"CharacterStatLimit");
      let Id = self.Id();
      let TacticEntityType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TacticEntityType(), &key)
      } else {
        self.TacticEntityType()
      };
      let StatType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StatType(), &key)
      } else {
        self.StatType()
      };
      let StatMinValue = self.StatMinValue();
      let StatMaxValue = self.StatMaxValue();
      let StatRatioMinValue = self.StatRatioMinValue();
      let StatRatioMaxValue = self.StatRatioMaxValue();
    CharacterStatLimitExcelT {
      Id,
      TacticEntityType,
      StatType,
      StatMinValue,
      StatMaxValue,
      StatRatioMinValue,
      StatRatioMaxValue,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatLimitExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TacticEntityType(&self) -> TacticEntityType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticEntityType>(CharacterStatLimitExcel::VT_TACTICENTITYTYPE, Some(TacticEntityType::None)).unwrap()}
  }
  #[inline]
  pub fn StatType(&self) -> StatType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StatType>(CharacterStatLimitExcel::VT_STATTYPE, Some(StatType::None)).unwrap()}
  }
  #[inline]
  pub fn StatMinValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatLimitExcel::VT_STATMINVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatMaxValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatLimitExcel::VT_STATMAXVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatRatioMinValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatLimitExcel::VT_STATRATIOMINVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatRatioMaxValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterStatLimitExcel::VT_STATRATIOMAXVALUE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterStatLimitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<TacticEntityType>("TacticEntityType", Self::VT_TACTICENTITYTYPE, false)?
     .visit_field::<StatType>("StatType", Self::VT_STATTYPE, false)?
     .visit_field::<i64>("StatMinValue", Self::VT_STATMINVALUE, false)?
     .visit_field::<i64>("StatMaxValue", Self::VT_STATMAXVALUE, false)?
     .visit_field::<i64>("StatRatioMinValue", Self::VT_STATRATIOMINVALUE, false)?
     .visit_field::<i64>("StatRatioMaxValue", Self::VT_STATRATIOMAXVALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterStatLimitExcelArgs {
    pub Id: i64,
    pub TacticEntityType: TacticEntityType,
    pub StatType: StatType,
    pub StatMinValue: i64,
    pub StatMaxValue: i64,
    pub StatRatioMinValue: i64,
    pub StatRatioMaxValue: i64,
}
impl<'a> Default for CharacterStatLimitExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterStatLimitExcelArgs {
      Id: 0,
      TacticEntityType: TacticEntityType::None,
      StatType: StatType::None,
      StatMinValue: 0,
      StatMaxValue: 0,
      StatRatioMinValue: 0,
      StatRatioMaxValue: 0,
    }
  }
}

impl Serialize for CharacterStatLimitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterStatLimitExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("TacticEntityType", &self.TacticEntityType())?;
      s.serialize_field("StatType", &self.StatType())?;
      s.serialize_field("StatMinValue", &self.StatMinValue())?;
      s.serialize_field("StatMaxValue", &self.StatMaxValue())?;
      s.serialize_field("StatRatioMinValue", &self.StatRatioMinValue())?;
      s.serialize_field("StatRatioMaxValue", &self.StatRatioMaxValue())?;
    s.end()
  }
}

pub struct CharacterStatLimitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterStatLimitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatLimitExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_TacticEntityType(&mut self, TacticEntityType: TacticEntityType) {
    self.fbb_.push_slot::<TacticEntityType>(CharacterStatLimitExcel::VT_TACTICENTITYTYPE, TacticEntityType, TacticEntityType::None);
  }
  #[inline]
  pub fn add_StatType(&mut self, StatType: StatType) {
    self.fbb_.push_slot::<StatType>(CharacterStatLimitExcel::VT_STATTYPE, StatType, StatType::None);
  }
  #[inline]
  pub fn add_StatMinValue(&mut self, StatMinValue: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatLimitExcel::VT_STATMINVALUE, StatMinValue, 0);
  }
  #[inline]
  pub fn add_StatMaxValue(&mut self, StatMaxValue: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatLimitExcel::VT_STATMAXVALUE, StatMaxValue, 0);
  }
  #[inline]
  pub fn add_StatRatioMinValue(&mut self, StatRatioMinValue: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatLimitExcel::VT_STATRATIOMINVALUE, StatRatioMinValue, 0);
  }
  #[inline]
  pub fn add_StatRatioMaxValue(&mut self, StatRatioMaxValue: i64) {
    self.fbb_.push_slot::<i64>(CharacterStatLimitExcel::VT_STATRATIOMAXVALUE, StatRatioMaxValue, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterStatLimitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterStatLimitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterStatLimitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterStatLimitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterStatLimitExcel");
      ds.field("Id", &self.Id());
      ds.field("TacticEntityType", &self.TacticEntityType());
      ds.field("StatType", &self.StatType());
      ds.field("StatMinValue", &self.StatMinValue());
      ds.field("StatMaxValue", &self.StatMaxValue());
      ds.field("StatRatioMinValue", &self.StatRatioMinValue());
      ds.field("StatRatioMaxValue", &self.StatRatioMaxValue());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterStatLimitExcelT {
  pub Id: i64,
  pub TacticEntityType: TacticEntityType,
  pub StatType: StatType,
  pub StatMinValue: i64,
  pub StatMaxValue: i64,
  pub StatRatioMinValue: i64,
  pub StatRatioMaxValue: i64,
}
impl Default for CharacterStatLimitExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      TacticEntityType: TacticEntityType::None,
      StatType: StatType::None,
      StatMinValue: 0,
      StatMaxValue: 0,
      StatRatioMinValue: 0,
      StatRatioMaxValue: 0,
    }
  }
}
impl CharacterStatLimitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterStatLimitExcel<'b>> {
    let Id = self.Id;
    let TacticEntityType = self.TacticEntityType;
    let StatType = self.StatType;
    let StatMinValue = self.StatMinValue;
    let StatMaxValue = self.StatMaxValue;
    let StatRatioMinValue = self.StatRatioMinValue;
    let StatRatioMaxValue = self.StatRatioMaxValue;
    CharacterStatLimitExcel::create(_fbb, &CharacterStatLimitExcelArgs{
      Id,
      TacticEntityType,
      StatType,
      StatMinValue,
      StatMaxValue,
      StatRatioMinValue,
      StatRatioMaxValue,
    })
  }
}
