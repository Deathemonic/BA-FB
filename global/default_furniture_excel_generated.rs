// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DefaultFurnitureExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DefaultFurnitureExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DefaultFurnitureExcel<'a> {
  type Inner = DefaultFurnitureExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DefaultFurnitureExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 6;
  pub const VT_POSITIONX: flatbuffers::VOffsetT = 8;
  pub const VT_POSITIONY: flatbuffers::VOffsetT = 10;
  pub const VT_ROTATION: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DefaultFurnitureExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DefaultFurnitureExcelArgs
  ) -> flatbuffers::WIPOffset<DefaultFurnitureExcel<'bldr>> {
    let mut builder = DefaultFurnitureExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"DefaultFurniture");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.Rotation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Rotation(x);
      let x = args.PositionY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_PositionY(x);
      let x = args.PositionX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_PositionX(x);
      let x = args.Location;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Location(x);
    builder.finish()
  }

  pub fn unpack(&self) -> DefaultFurnitureExcelT {
    let key = table_encryption_service::create_key(b"DefaultFurniture");
      let Id = self.Id();
      let Location = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Location(), &key)
      } else {
        self.Location()
      };
      let PositionX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.PositionX(), &key)
      } else {
        self.PositionX()
      };
      let PositionY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.PositionY(), &key)
      } else {
        self.PositionY()
      };
      let Rotation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Rotation(), &key)
      } else {
        self.Rotation()
      };
    DefaultFurnitureExcelT {
      Id,
      Location,
      PositionX,
      PositionY,
      Rotation,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DefaultFurnitureExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Location(&self) -> FurnitureLocation {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FurnitureLocation>(DefaultFurnitureExcel::VT_LOCATION, Some(FurnitureLocation::None)).unwrap()}
  }
  #[inline]
  pub fn PositionX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(DefaultFurnitureExcel::VT_POSITIONX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn PositionY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(DefaultFurnitureExcel::VT_POSITIONY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn Rotation(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(DefaultFurnitureExcel::VT_ROTATION, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for DefaultFurnitureExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<FurnitureLocation>("Location", Self::VT_LOCATION, false)?
     .visit_field::<f32>("PositionX", Self::VT_POSITIONX, false)?
     .visit_field::<f32>("PositionY", Self::VT_POSITIONY, false)?
     .visit_field::<f32>("Rotation", Self::VT_ROTATION, false)?
     .finish();
    Ok(())
  }
}
pub struct DefaultFurnitureExcelArgs {
    pub Id: i64,
    pub Location: FurnitureLocation,
    pub PositionX: f32,
    pub PositionY: f32,
    pub Rotation: f32,
}
impl<'a> Default for DefaultFurnitureExcelArgs {
  #[inline]
  fn default() -> Self {
    DefaultFurnitureExcelArgs {
      Id: 0,
      Location: FurnitureLocation::None,
      PositionX: 0.0,
      PositionY: 0.0,
      Rotation: 0.0,
    }
  }
}

impl Serialize for DefaultFurnitureExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("DefaultFurnitureExcel", 5)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Location", &self.Location())?;
      s.serialize_field("PositionX", &self.PositionX())?;
      s.serialize_field("PositionY", &self.PositionY())?;
      s.serialize_field("Rotation", &self.Rotation())?;
    s.end()
  }
}

pub struct DefaultFurnitureExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DefaultFurnitureExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(DefaultFurnitureExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Location(&mut self, Location: FurnitureLocation) {
    self.fbb_.push_slot::<FurnitureLocation>(DefaultFurnitureExcel::VT_LOCATION, Location, FurnitureLocation::None);
  }
  #[inline]
  pub fn add_PositionX(&mut self, PositionX: f32) {
    self.fbb_.push_slot::<f32>(DefaultFurnitureExcel::VT_POSITIONX, PositionX, 0.0);
  }
  #[inline]
  pub fn add_PositionY(&mut self, PositionY: f32) {
    self.fbb_.push_slot::<f32>(DefaultFurnitureExcel::VT_POSITIONY, PositionY, 0.0);
  }
  #[inline]
  pub fn add_Rotation(&mut self, Rotation: f32) {
    self.fbb_.push_slot::<f32>(DefaultFurnitureExcel::VT_ROTATION, Rotation, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DefaultFurnitureExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DefaultFurnitureExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DefaultFurnitureExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DefaultFurnitureExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DefaultFurnitureExcel");
      ds.field("Id", &self.Id());
      ds.field("Location", &self.Location());
      ds.field("PositionX", &self.PositionX());
      ds.field("PositionY", &self.PositionY());
      ds.field("Rotation", &self.Rotation());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DefaultFurnitureExcelT {
  pub Id: i64,
  pub Location: FurnitureLocation,
  pub PositionX: f32,
  pub PositionY: f32,
  pub Rotation: f32,
}
impl Default for DefaultFurnitureExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Location: FurnitureLocation::None,
      PositionX: 0.0,
      PositionY: 0.0,
      Rotation: 0.0,
    }
  }
}
impl DefaultFurnitureExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DefaultFurnitureExcel<'b>> {
    let Id = self.Id;
    let Location = self.Location;
    let PositionX = self.PositionX;
    let PositionY = self.PositionY;
    let Rotation = self.Rotation;
    DefaultFurnitureExcel::create(_fbb, &DefaultFurnitureExcelArgs{
      Id,
      Location,
      PositionX,
      PositionY,
      Rotation,
    })
  }
}
