// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterDialogSubtitleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterDialogSubtitleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterDialogSubtitleExcel<'a> {
  type Inner = CharacterDialogSubtitleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterDialogSubtitleExcel<'a> {
  pub const VT_LOCALIZECVGROUP: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 6;
  pub const VT_TLMID: flatbuffers::VOffsetT = 8;
  pub const VT_DURATION: flatbuffers::VOffsetT = 10;
  pub const VT_DURATIONKR: flatbuffers::VOffsetT = 12;
  pub const VT_SEPARATE: flatbuffers::VOffsetT = 14;
  pub const VT_LOCALIZEKR: flatbuffers::VOffsetT = 16;
  pub const VT_LOCALIZEJP: flatbuffers::VOffsetT = 18;
  pub const VT_LOCALIZETH: flatbuffers::VOffsetT = 20;
  pub const VT_LOCALIZETW: flatbuffers::VOffsetT = 22;
  pub const VT_LOCALIZEEN: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterDialogSubtitleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterDialogSubtitleExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterDialogSubtitleExcel<'bldr>> {
    let mut builder = CharacterDialogSubtitleExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterDialogSubtitle");
      let x = args.DurationKr;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DurationKr(x);
      let x = args.Duration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Duration(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.LocalizeEN {
        builder.add_LocalizeEN(x);
      }
      if let Some(x) = args.LocalizeTW {
        builder.add_LocalizeTW(x);
      }
      if let Some(x) = args.LocalizeTH {
        builder.add_LocalizeTH(x);
      }
      if let Some(x) = args.LocalizeJP {
        builder.add_LocalizeJP(x);
      }
      if let Some(x) = args.LocalizeKR {
        builder.add_LocalizeKR(x);
      }
      if let Some(x) = args.TLMID {
        builder.add_TLMID(x);
      }
      if let Some(x) = args.LocalizeCVGroup {
        builder.add_LocalizeCVGroup(x);
      }
      builder.add_Separate(args.Separate);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterDialogSubtitleExcelT {
    let key = table_encryption_service::create_key(b"CharacterDialogSubtitle");
    let LocalizeCVGroup = self.LocalizeCVGroup().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CharacterId = self.CharacterId();
    let TLMID = self.TLMID().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Duration = self.Duration();
      let DurationKr = self.DurationKr();
      let Separate = self.Separate();
    let LocalizeKR = self.LocalizeKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeJP = self.LocalizeJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeTH = self.LocalizeTH().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeTW = self.LocalizeTW().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LocalizeEN = self.LocalizeEN().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CharacterDialogSubtitleExcelT {
      LocalizeCVGroup,
      CharacterId,
      TLMID,
      Duration,
      DurationKr,
      Separate,
      LocalizeKR,
      LocalizeJP,
      LocalizeTH,
      LocalizeTW,
      LocalizeEN,
    }
  }

  #[inline]
  pub fn LocalizeCVGroup(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogSubtitleExcel::VT_LOCALIZECVGROUP, None)}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogSubtitleExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TLMID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogSubtitleExcel::VT_TLMID, None)}
  }
  #[inline]
  pub fn Duration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogSubtitleExcel::VT_DURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DurationKr(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogSubtitleExcel::VT_DURATIONKR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Separate(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogSubtitleExcel::VT_SEPARATE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn LocalizeKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogSubtitleExcel::VT_LOCALIZEKR, None)}
  }
  #[inline]
  pub fn LocalizeJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogSubtitleExcel::VT_LOCALIZEJP, None)}
  }
  #[inline]
  pub fn LocalizeTH(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogSubtitleExcel::VT_LOCALIZETH, None)}
  }
  #[inline]
  pub fn LocalizeTW(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogSubtitleExcel::VT_LOCALIZETW, None)}
  }
  #[inline]
  pub fn LocalizeEN(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogSubtitleExcel::VT_LOCALIZEEN, None)}
  }
}

impl flatbuffers::Verifiable for CharacterDialogSubtitleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeCVGroup", Self::VT_LOCALIZECVGROUP, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TLMID", Self::VT_TLMID, false)?
     .visit_field::<i64>("Duration", Self::VT_DURATION, false)?
     .visit_field::<i64>("DurationKr", Self::VT_DURATIONKR, false)?
     .visit_field::<bool>("Separate", Self::VT_SEPARATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeKR", Self::VT_LOCALIZEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeJP", Self::VT_LOCALIZEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeTH", Self::VT_LOCALIZETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeTW", Self::VT_LOCALIZETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LocalizeEN", Self::VT_LOCALIZEEN, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterDialogSubtitleExcelArgs<'a> {
    pub LocalizeCVGroup: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterId: i64,
    pub TLMID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Duration: i64,
    pub DurationKr: i64,
    pub Separate: bool,
    pub LocalizeKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeJP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeTH: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeTW: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeEN: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CharacterDialogSubtitleExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterDialogSubtitleExcelArgs {
      LocalizeCVGroup: None,
      CharacterId: 0,
      TLMID: None,
      Duration: 0,
      DurationKr: 0,
      Separate: false,
      LocalizeKR: None,
      LocalizeJP: None,
      LocalizeTH: None,
      LocalizeTW: None,
      LocalizeEN: None,
    }
  }
}

impl Serialize for CharacterDialogSubtitleExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterDialogSubtitleExcel", 11)?;
      if let Some(f) = self.LocalizeCVGroup() {
        s.serialize_field("LocalizeCVGroup", &f)?;
      } else {
        s.skip_field("LocalizeCVGroup")?;
      }
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.TLMID() {
        s.serialize_field("TLMID", &f)?;
      } else {
        s.skip_field("TLMID")?;
      }
      s.serialize_field("Duration", &self.Duration())?;
      s.serialize_field("DurationKr", &self.DurationKr())?;
      s.serialize_field("Separate", &self.Separate())?;
      if let Some(f) = self.LocalizeKR() {
        s.serialize_field("LocalizeKR", &f)?;
      } else {
        s.skip_field("LocalizeKR")?;
      }
      if let Some(f) = self.LocalizeJP() {
        s.serialize_field("LocalizeJP", &f)?;
      } else {
        s.skip_field("LocalizeJP")?;
      }
      if let Some(f) = self.LocalizeTH() {
        s.serialize_field("LocalizeTH", &f)?;
      } else {
        s.skip_field("LocalizeTH")?;
      }
      if let Some(f) = self.LocalizeTW() {
        s.serialize_field("LocalizeTW", &f)?;
      } else {
        s.skip_field("LocalizeTW")?;
      }
      if let Some(f) = self.LocalizeEN() {
        s.serialize_field("LocalizeEN", &f)?;
      } else {
        s.skip_field("LocalizeEN")?;
      }
    s.end()
  }
}

pub struct CharacterDialogSubtitleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterDialogSubtitleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LocalizeCVGroup(&mut self, LocalizeCVGroup: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogSubtitleExcel::VT_LOCALIZECVGROUP, LocalizeCVGroup);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogSubtitleExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_TLMID(&mut self, TLMID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogSubtitleExcel::VT_TLMID, TLMID);
  }
  #[inline]
  pub fn add_Duration(&mut self, Duration: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogSubtitleExcel::VT_DURATION, Duration, 0);
  }
  #[inline]
  pub fn add_DurationKr(&mut self, DurationKr: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogSubtitleExcel::VT_DURATIONKR, DurationKr, 0);
  }
  #[inline]
  pub fn add_Separate(&mut self, Separate: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogSubtitleExcel::VT_SEPARATE, Separate, false);
  }
  #[inline]
  pub fn add_LocalizeKR(&mut self, LocalizeKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogSubtitleExcel::VT_LOCALIZEKR, LocalizeKR);
  }
  #[inline]
  pub fn add_LocalizeJP(&mut self, LocalizeJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogSubtitleExcel::VT_LOCALIZEJP, LocalizeJP);
  }
  #[inline]
  pub fn add_LocalizeTH(&mut self, LocalizeTH: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogSubtitleExcel::VT_LOCALIZETH, LocalizeTH);
  }
  #[inline]
  pub fn add_LocalizeTW(&mut self, LocalizeTW: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogSubtitleExcel::VT_LOCALIZETW, LocalizeTW);
  }
  #[inline]
  pub fn add_LocalizeEN(&mut self, LocalizeEN: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogSubtitleExcel::VT_LOCALIZEEN, LocalizeEN);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterDialogSubtitleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterDialogSubtitleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterDialogSubtitleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterDialogSubtitleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterDialogSubtitleExcel");
      ds.field("LocalizeCVGroup", &self.LocalizeCVGroup());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("TLMID", &self.TLMID());
      ds.field("Duration", &self.Duration());
      ds.field("DurationKr", &self.DurationKr());
      ds.field("Separate", &self.Separate());
      ds.field("LocalizeKR", &self.LocalizeKR());
      ds.field("LocalizeJP", &self.LocalizeJP());
      ds.field("LocalizeTH", &self.LocalizeTH());
      ds.field("LocalizeTW", &self.LocalizeTW());
      ds.field("LocalizeEN", &self.LocalizeEN());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterDialogSubtitleExcelT {
  pub LocalizeCVGroup: Option<String>,
  pub CharacterId: i64,
  pub TLMID: Option<String>,
  pub Duration: i64,
  pub DurationKr: i64,
  pub Separate: bool,
  pub LocalizeKR: Option<String>,
  pub LocalizeJP: Option<String>,
  pub LocalizeTH: Option<String>,
  pub LocalizeTW: Option<String>,
  pub LocalizeEN: Option<String>,
}
impl Default for CharacterDialogSubtitleExcelT {
  fn default() -> Self {
    Self {
      LocalizeCVGroup: None,
      CharacterId: 0,
      TLMID: None,
      Duration: 0,
      DurationKr: 0,
      Separate: false,
      LocalizeKR: None,
      LocalizeJP: None,
      LocalizeTH: None,
      LocalizeTW: None,
      LocalizeEN: None,
    }
  }
}
impl CharacterDialogSubtitleExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterDialogSubtitleExcel<'b>> {
    let LocalizeCVGroup = self.LocalizeCVGroup.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterId = self.CharacterId;
    let TLMID = self.TLMID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Duration = self.Duration;
    let DurationKr = self.DurationKr;
    let Separate = self.Separate;
    let LocalizeKR = self.LocalizeKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeJP = self.LocalizeJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeTH = self.LocalizeTH.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeTW = self.LocalizeTW.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeEN = self.LocalizeEN.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CharacterDialogSubtitleExcel::create(_fbb, &CharacterDialogSubtitleExcelArgs{
      LocalizeCVGroup,
      CharacterId,
      TLMID,
      Duration,
      DurationKr,
      Separate,
      LocalizeKR,
      LocalizeJP,
      LocalizeTH,
      LocalizeTW,
      LocalizeEN,
    })
  }
}
