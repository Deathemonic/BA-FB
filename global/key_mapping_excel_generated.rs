// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum KeyMappingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct KeyMappingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for KeyMappingExcel<'a> {
  type Inner = KeyMappingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> KeyMappingExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TARGETKEYCODE: flatbuffers::VOffsetT = 6;
  pub const VT_ISDISPLAY: flatbuffers::VOffsetT = 8;
  pub const VT_ISUSED: flatbuffers::VOffsetT = 10;
  pub const VT_ISLONGPRESS: flatbuffers::VOffsetT = 12;
  pub const VT_IGNOREPOSCHECK: flatbuffers::VOffsetT = 14;
  pub const VT_ICONPOSITIONX: flatbuffers::VOffsetT = 16;
  pub const VT_ICONPOSITIONY: flatbuffers::VOffsetT = 18;
  pub const VT_ICONSCALEX: flatbuffers::VOffsetT = 20;
  pub const VT_ICONSCALEY: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    KeyMappingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args KeyMappingExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<KeyMappingExcel<'bldr>> {
    let mut builder = KeyMappingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"KeyMapping");
      let x = args.IconScaleY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_IconScaleY(x);
      let x = args.IconScaleX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_IconScaleX(x);
      let x = args.IconPositionY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_IconPositionY(x);
      let x = args.IconPositionX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_IconPositionX(x);
      if let Some(x) = args.TargetKeyCode {
        builder.add_TargetKeyCode(x);
      }
      if let Some(x) = args.Id {
        builder.add_Id(x);
      }
      builder.add_IgnorePosCheck(args.IgnorePosCheck);
      builder.add_isLongPress(args.isLongPress);
      builder.add_isUsed(args.isUsed);
      builder.add_isDisplay(args.isDisplay);
    builder.finish()
  }

  pub fn unpack(&self) -> KeyMappingExcelT {
    let key = table_encryption_service::create_key(b"KeyMapping");
    let Id = self.Id().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TargetKeyCode = self.TargetKeyCode().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let isDisplay = self.isDisplay();
      let isUsed = self.isUsed();
      let isLongPress = self.isLongPress();
      let IgnorePosCheck = self.IgnorePosCheck();
      let IconPositionX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.IconPositionX(), &key)
      } else {
        self.IconPositionX()
      };
      let IconPositionY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.IconPositionY(), &key)
      } else {
        self.IconPositionY()
      };
      let IconScaleX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.IconScaleX(), &key)
      } else {
        self.IconScaleX()
      };
      let IconScaleY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.IconScaleY(), &key)
      } else {
        self.IconScaleY()
      };
    KeyMappingExcelT {
      Id,
      TargetKeyCode,
      isDisplay,
      isUsed,
      isLongPress,
      IgnorePosCheck,
      IconPositionX,
      IconPositionY,
      IconScaleX,
      IconScaleY,
    }
  }

  #[inline]
  pub fn Id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyMappingExcel::VT_ID, None)}
  }
  #[inline]
  pub fn TargetKeyCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(KeyMappingExcel::VT_TARGETKEYCODE, None)}
  }
  #[inline]
  pub fn isDisplay(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(KeyMappingExcel::VT_ISDISPLAY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn isUsed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(KeyMappingExcel::VT_ISUSED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn isLongPress(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(KeyMappingExcel::VT_ISLONGPRESS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IgnorePosCheck(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(KeyMappingExcel::VT_IGNOREPOSCHECK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IconPositionX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(KeyMappingExcel::VT_ICONPOSITIONX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IconPositionY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(KeyMappingExcel::VT_ICONPOSITIONY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IconScaleX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(KeyMappingExcel::VT_ICONSCALEX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IconScaleY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(KeyMappingExcel::VT_ICONSCALEY, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for KeyMappingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TargetKeyCode", Self::VT_TARGETKEYCODE, false)?
     .visit_field::<bool>("isDisplay", Self::VT_ISDISPLAY, false)?
     .visit_field::<bool>("isUsed", Self::VT_ISUSED, false)?
     .visit_field::<bool>("isLongPress", Self::VT_ISLONGPRESS, false)?
     .visit_field::<bool>("IgnorePosCheck", Self::VT_IGNOREPOSCHECK, false)?
     .visit_field::<f32>("IconPositionX", Self::VT_ICONPOSITIONX, false)?
     .visit_field::<f32>("IconPositionY", Self::VT_ICONPOSITIONY, false)?
     .visit_field::<f32>("IconScaleX", Self::VT_ICONSCALEX, false)?
     .visit_field::<f32>("IconScaleY", Self::VT_ICONSCALEY, false)?
     .finish();
    Ok(())
  }
}
pub struct KeyMappingExcelArgs<'a> {
    pub Id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TargetKeyCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub isDisplay: bool,
    pub isUsed: bool,
    pub isLongPress: bool,
    pub IgnorePosCheck: bool,
    pub IconPositionX: f32,
    pub IconPositionY: f32,
    pub IconScaleX: f32,
    pub IconScaleY: f32,
}
impl<'a> Default for KeyMappingExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    KeyMappingExcelArgs {
      Id: None,
      TargetKeyCode: None,
      isDisplay: false,
      isUsed: false,
      isLongPress: false,
      IgnorePosCheck: false,
      IconPositionX: 0.0,
      IconPositionY: 0.0,
      IconScaleX: 0.0,
      IconScaleY: 0.0,
    }
  }
}

impl Serialize for KeyMappingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("KeyMappingExcel", 10)?;
      if let Some(f) = self.Id() {
        s.serialize_field("Id", &f)?;
      } else {
        s.skip_field("Id")?;
      }
      if let Some(f) = self.TargetKeyCode() {
        s.serialize_field("TargetKeyCode", &f)?;
      } else {
        s.skip_field("TargetKeyCode")?;
      }
      s.serialize_field("isDisplay", &self.isDisplay())?;
      s.serialize_field("isUsed", &self.isUsed())?;
      s.serialize_field("isLongPress", &self.isLongPress())?;
      s.serialize_field("IgnorePosCheck", &self.IgnorePosCheck())?;
      s.serialize_field("IconPositionX", &self.IconPositionX())?;
      s.serialize_field("IconPositionY", &self.IconPositionY())?;
      s.serialize_field("IconScaleX", &self.IconScaleX())?;
      s.serialize_field("IconScaleY", &self.IconScaleY())?;
    s.end()
  }
}

pub struct KeyMappingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> KeyMappingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyMappingExcel::VT_ID, Id);
  }
  #[inline]
  pub fn add_TargetKeyCode(&mut self, TargetKeyCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(KeyMappingExcel::VT_TARGETKEYCODE, TargetKeyCode);
  }
  #[inline]
  pub fn add_isDisplay(&mut self, isDisplay: bool) {
    self.fbb_.push_slot::<bool>(KeyMappingExcel::VT_ISDISPLAY, isDisplay, false);
  }
  #[inline]
  pub fn add_isUsed(&mut self, isUsed: bool) {
    self.fbb_.push_slot::<bool>(KeyMappingExcel::VT_ISUSED, isUsed, false);
  }
  #[inline]
  pub fn add_isLongPress(&mut self, isLongPress: bool) {
    self.fbb_.push_slot::<bool>(KeyMappingExcel::VT_ISLONGPRESS, isLongPress, false);
  }
  #[inline]
  pub fn add_IgnorePosCheck(&mut self, IgnorePosCheck: bool) {
    self.fbb_.push_slot::<bool>(KeyMappingExcel::VT_IGNOREPOSCHECK, IgnorePosCheck, false);
  }
  #[inline]
  pub fn add_IconPositionX(&mut self, IconPositionX: f32) {
    self.fbb_.push_slot::<f32>(KeyMappingExcel::VT_ICONPOSITIONX, IconPositionX, 0.0);
  }
  #[inline]
  pub fn add_IconPositionY(&mut self, IconPositionY: f32) {
    self.fbb_.push_slot::<f32>(KeyMappingExcel::VT_ICONPOSITIONY, IconPositionY, 0.0);
  }
  #[inline]
  pub fn add_IconScaleX(&mut self, IconScaleX: f32) {
    self.fbb_.push_slot::<f32>(KeyMappingExcel::VT_ICONSCALEX, IconScaleX, 0.0);
  }
  #[inline]
  pub fn add_IconScaleY(&mut self, IconScaleY: f32) {
    self.fbb_.push_slot::<f32>(KeyMappingExcel::VT_ICONSCALEY, IconScaleY, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> KeyMappingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    KeyMappingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<KeyMappingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for KeyMappingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("KeyMappingExcel");
      ds.field("Id", &self.Id());
      ds.field("TargetKeyCode", &self.TargetKeyCode());
      ds.field("isDisplay", &self.isDisplay());
      ds.field("isUsed", &self.isUsed());
      ds.field("isLongPress", &self.isLongPress());
      ds.field("IgnorePosCheck", &self.IgnorePosCheck());
      ds.field("IconPositionX", &self.IconPositionX());
      ds.field("IconPositionY", &self.IconPositionY());
      ds.field("IconScaleX", &self.IconScaleX());
      ds.field("IconScaleY", &self.IconScaleY());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct KeyMappingExcelT {
  pub Id: Option<String>,
  pub TargetKeyCode: Option<String>,
  pub isDisplay: bool,
  pub isUsed: bool,
  pub isLongPress: bool,
  pub IgnorePosCheck: bool,
  pub IconPositionX: f32,
  pub IconPositionY: f32,
  pub IconScaleX: f32,
  pub IconScaleY: f32,
}
impl Default for KeyMappingExcelT {
  fn default() -> Self {
    Self {
      Id: None,
      TargetKeyCode: None,
      isDisplay: false,
      isUsed: false,
      isLongPress: false,
      IgnorePosCheck: false,
      IconPositionX: 0.0,
      IconPositionY: 0.0,
      IconScaleX: 0.0,
      IconScaleY: 0.0,
    }
  }
}
impl KeyMappingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<KeyMappingExcel<'b>> {
    let Id = self.Id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TargetKeyCode = self.TargetKeyCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let isDisplay = self.isDisplay;
    let isUsed = self.isUsed;
    let isLongPress = self.isLongPress;
    let IgnorePosCheck = self.IgnorePosCheck;
    let IconPositionX = self.IconPositionX;
    let IconPositionY = self.IconPositionY;
    let IconScaleX = self.IconScaleX;
    let IconScaleY = self.IconScaleY;
    KeyMappingExcel::create(_fbb, &KeyMappingExcelArgs{
      Id,
      TargetKeyCode,
      isDisplay,
      isUsed,
      isLongPress,
      IgnorePosCheck,
      IconPositionX,
      IconPositionY,
      IconScaleX,
      IconScaleY,
    })
  }
}
