// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameRoadPuzzleMapTileExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameRoadPuzzleMapTileExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameRoadPuzzleMapTileExcel<'a> {
  type Inner = MinigameRoadPuzzleMapTileExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameRoadPuzzleMapTileExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 8;
  pub const VT_MAPTILETYPE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameRoadPuzzleMapTileExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameRoadPuzzleMapTileExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleMapTileExcel<'bldr>> {
    let mut builder = MinigameRoadPuzzleMapTileExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleMapTile");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.MapTileType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MapTileType(x);
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameRoadPuzzleMapTileExcelT {
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleMapTile");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let MapTileType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MapTileType(), &key)
      } else {
        self.MapTileType()
      };
    MinigameRoadPuzzleMapTileExcelT {
      EventContentId,
      UniqueId,
      PrefabName,
      MapTileType,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleMapTileExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleMapTileExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameRoadPuzzleMapTileExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn MapTileType(&self) -> RoadPuzzleMapTileType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RoadPuzzleMapTileType>(MinigameRoadPuzzleMapTileExcel::VT_MAPTILETYPE, Some(RoadPuzzleMapTileType::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameRoadPuzzleMapTileExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<RoadPuzzleMapTileType>("MapTileType", Self::VT_MAPTILETYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameRoadPuzzleMapTileExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MapTileType: RoadPuzzleMapTileType,
}
impl<'a> Default for MinigameRoadPuzzleMapTileExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameRoadPuzzleMapTileExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      PrefabName: None,
      MapTileType: RoadPuzzleMapTileType::None,
    }
  }
}

impl Serialize for MinigameRoadPuzzleMapTileExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameRoadPuzzleMapTileExcel", 4)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      s.serialize_field("MapTileType", &self.MapTileType())?;
    s.end()
  }
}

pub struct MinigameRoadPuzzleMapTileExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameRoadPuzzleMapTileExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleMapTileExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleMapTileExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleMapTileExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_MapTileType(&mut self, MapTileType: RoadPuzzleMapTileType) {
    self.fbb_.push_slot::<RoadPuzzleMapTileType>(MinigameRoadPuzzleMapTileExcel::VT_MAPTILETYPE, MapTileType, RoadPuzzleMapTileType::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameRoadPuzzleMapTileExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameRoadPuzzleMapTileExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameRoadPuzzleMapTileExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameRoadPuzzleMapTileExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameRoadPuzzleMapTileExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("MapTileType", &self.MapTileType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameRoadPuzzleMapTileExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub PrefabName: Option<String>,
  pub MapTileType: RoadPuzzleMapTileType,
}
impl Default for MinigameRoadPuzzleMapTileExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      PrefabName: None,
      MapTileType: RoadPuzzleMapTileType::None,
    }
  }
}
impl MinigameRoadPuzzleMapTileExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleMapTileExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MapTileType = self.MapTileType;
    MinigameRoadPuzzleMapTileExcel::create(_fbb, &MinigameRoadPuzzleMapTileExcelArgs{
      EventContentId,
      UniqueId,
      PrefabName,
      MapTileType,
    })
  }
}
