// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGEncounterRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGEncounterRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGEncounterRewardExcel<'a> {
  type Inner = MinigameTBGEncounterRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGEncounterRewardExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_TBGOPTIONSUCCESSTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_PAREMETER: flatbuffers::VOffsetT = 10;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_AMOUNT: flatbuffers::VOffsetT = 16;
  pub const VT_PROB: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGEncounterRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGEncounterRewardExcelArgs
  ) -> flatbuffers::WIPOffset<MinigameTBGEncounterRewardExcel<'bldr>> {
    let mut builder = MinigameTBGEncounterRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGEncounterReward");
      let x = args.Amount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Amount(x);
      let x = args.ParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelId(x);
      let x = args.Paremeter;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Paremeter(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      let x = args.ParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParcelType(x);
      let x = args.TBGOptionSuccessType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TBGOptionSuccessType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGEncounterRewardExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGEncounterReward");
      let GroupId = self.GroupId();
      let UniqueId = self.UniqueId();
      let TBGOptionSuccessType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TBGOptionSuccessType(), &key)
      } else {
        self.TBGOptionSuccessType()
      };
      let Paremeter = self.Paremeter();
      let ParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParcelType(), &key)
      } else {
        self.ParcelType()
      };
      let ParcelId = self.ParcelId();
      let Amount = self.Amount();
      let Prob = self.Prob();
    MinigameTBGEncounterRewardExcelT {
      GroupId,
      UniqueId,
      TBGOptionSuccessType,
      Paremeter,
      ParcelType,
      ParcelId,
      Amount,
      Prob,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterRewardExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterRewardExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TBGOptionSuccessType(&self) -> TBGOptionSuccessType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TBGOptionSuccessType>(MinigameTBGEncounterRewardExcel::VT_TBGOPTIONSUCCESSTYPE, Some(TBGOptionSuccessType::None)).unwrap()}
  }
  #[inline]
  pub fn Paremeter(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterRewardExcel::VT_PAREMETER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MinigameTBGEncounterRewardExcel::VT_PARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterRewardExcel::VT_PARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Amount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterRewardExcel::VT_AMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGEncounterRewardExcel::VT_PROB, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameTBGEncounterRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<TBGOptionSuccessType>("TBGOptionSuccessType", Self::VT_TBGOPTIONSUCCESSTYPE, false)?
     .visit_field::<i64>("Paremeter", Self::VT_PAREMETER, false)?
     .visit_field::<ParcelType>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<i64>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<i64>("Amount", Self::VT_AMOUNT, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGEncounterRewardExcelArgs {
    pub GroupId: i64,
    pub UniqueId: i64,
    pub TBGOptionSuccessType: TBGOptionSuccessType,
    pub Paremeter: i64,
    pub ParcelType: ParcelType,
    pub ParcelId: i64,
    pub Amount: i64,
    pub Prob: i32,
}
impl<'a> Default for MinigameTBGEncounterRewardExcelArgs {
  #[inline]
  fn default() -> Self {
    MinigameTBGEncounterRewardExcelArgs {
      GroupId: 0,
      UniqueId: 0,
      TBGOptionSuccessType: TBGOptionSuccessType::None,
      Paremeter: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      Amount: 0,
      Prob: 0,
    }
  }
}

impl Serialize for MinigameTBGEncounterRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGEncounterRewardExcel", 8)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("TBGOptionSuccessType", &self.TBGOptionSuccessType())?;
      s.serialize_field("Paremeter", &self.Paremeter())?;
      s.serialize_field("ParcelType", &self.ParcelType())?;
      s.serialize_field("ParcelId", &self.ParcelId())?;
      s.serialize_field("Amount", &self.Amount())?;
      s.serialize_field("Prob", &self.Prob())?;
    s.end()
  }
}

pub struct MinigameTBGEncounterRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGEncounterRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterRewardExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterRewardExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_TBGOptionSuccessType(&mut self, TBGOptionSuccessType: TBGOptionSuccessType) {
    self.fbb_.push_slot::<TBGOptionSuccessType>(MinigameTBGEncounterRewardExcel::VT_TBGOPTIONSUCCESSTYPE, TBGOptionSuccessType, TBGOptionSuccessType::None);
  }
  #[inline]
  pub fn add_Paremeter(&mut self, Paremeter: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterRewardExcel::VT_PAREMETER, Paremeter, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MinigameTBGEncounterRewardExcel::VT_PARCELTYPE, ParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterRewardExcel::VT_PARCELID, ParcelId, 0);
  }
  #[inline]
  pub fn add_Amount(&mut self, Amount: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterRewardExcel::VT_AMOUNT, Amount, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGEncounterRewardExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGEncounterRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGEncounterRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGEncounterRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGEncounterRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGEncounterRewardExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("TBGOptionSuccessType", &self.TBGOptionSuccessType());
      ds.field("Paremeter", &self.Paremeter());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("Amount", &self.Amount());
      ds.field("Prob", &self.Prob());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGEncounterRewardExcelT {
  pub GroupId: i64,
  pub UniqueId: i64,
  pub TBGOptionSuccessType: TBGOptionSuccessType,
  pub Paremeter: i64,
  pub ParcelType: ParcelType,
  pub ParcelId: i64,
  pub Amount: i64,
  pub Prob: i32,
}
impl Default for MinigameTBGEncounterRewardExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      UniqueId: 0,
      TBGOptionSuccessType: TBGOptionSuccessType::None,
      Paremeter: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      Amount: 0,
      Prob: 0,
    }
  }
}
impl MinigameTBGEncounterRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGEncounterRewardExcel<'b>> {
    let GroupId = self.GroupId;
    let UniqueId = self.UniqueId;
    let TBGOptionSuccessType = self.TBGOptionSuccessType;
    let Paremeter = self.Paremeter;
    let ParcelType = self.ParcelType;
    let ParcelId = self.ParcelId;
    let Amount = self.Amount;
    let Prob = self.Prob;
    MinigameTBGEncounterRewardExcel::create(_fbb, &MinigameTBGEncounterRewardExcelArgs{
      GroupId,
      UniqueId,
      TBGOptionSuccessType,
      Paremeter,
      ParcelType,
      ParcelId,
      Amount,
      Prob,
    })
  }
}
