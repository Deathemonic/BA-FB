// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterCombatSkinExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterCombatSkinExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterCombatSkinExcel<'a> {
  type Inner = CharacterCombatSkinExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterCombatSkinExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_RESOURCEPATH: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterCombatSkinExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterCombatSkinExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterCombatSkinExcel<'bldr>> {
    let mut builder = CharacterCombatSkinExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterCombatSkin");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.ResourcePath {
        builder.add_ResourcePath(x);
      }
      if let Some(x) = args.GroupId {
        builder.add_GroupId(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterCombatSkinExcelT {
    let key = table_encryption_service::create_key(b"CharacterCombatSkin");
    let GroupId = self.GroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let UniqueId = self.UniqueId();
    let ResourcePath = self.ResourcePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CharacterCombatSkinExcelT {
      GroupId,
      UniqueId,
      ResourcePath,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterCombatSkinExcel::VT_GROUPID, None)}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterCombatSkinExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResourcePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterCombatSkinExcel::VT_RESOURCEPATH, None)}
  }
}

impl flatbuffers::Verifiable for CharacterCombatSkinExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ResourcePath", Self::VT_RESOURCEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterCombatSkinExcelArgs<'a> {
    pub GroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub UniqueId: i64,
    pub ResourcePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CharacterCombatSkinExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterCombatSkinExcelArgs {
      GroupId: None,
      UniqueId: 0,
      ResourcePath: None,
    }
  }
}

impl Serialize for CharacterCombatSkinExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterCombatSkinExcel", 3)?;
      if let Some(f) = self.GroupId() {
        s.serialize_field("GroupId", &f)?;
      } else {
        s.skip_field("GroupId")?;
      }
      s.serialize_field("UniqueId", &self.UniqueId())?;
      if let Some(f) = self.ResourcePath() {
        s.serialize_field("ResourcePath", &f)?;
      } else {
        s.skip_field("ResourcePath")?;
      }
    s.end()
  }
}

pub struct CharacterCombatSkinExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterCombatSkinExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterCombatSkinExcel::VT_GROUPID, GroupId);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(CharacterCombatSkinExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_ResourcePath(&mut self, ResourcePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterCombatSkinExcel::VT_RESOURCEPATH, ResourcePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterCombatSkinExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterCombatSkinExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterCombatSkinExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterCombatSkinExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterCombatSkinExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("ResourcePath", &self.ResourcePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterCombatSkinExcelT {
  pub GroupId: Option<String>,
  pub UniqueId: i64,
  pub ResourcePath: Option<String>,
}
impl Default for CharacterCombatSkinExcelT {
  fn default() -> Self {
    Self {
      GroupId: None,
      UniqueId: 0,
      ResourcePath: None,
    }
  }
}
impl CharacterCombatSkinExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterCombatSkinExcel<'b>> {
    let GroupId = self.GroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let UniqueId = self.UniqueId;
    let ResourcePath = self.ResourcePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CharacterCombatSkinExcel::create(_fbb, &CharacterCombatSkinExcelArgs{
      GroupId,
      UniqueId,
      ResourcePath,
    })
  }
}
