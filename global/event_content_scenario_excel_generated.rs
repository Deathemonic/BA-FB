// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentScenarioExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentScenarioExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentScenarioExcel<'a> {
  type Inner = EventContentScenarioExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentScenarioExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_REPLAYDISPLAYGROUP: flatbuffers::VOffsetT = 8;
  pub const VT_ORDER: flatbuffers::VOffsetT = 10;
  pub const VT_RECOLLECTIONNUMBER: flatbuffers::VOffsetT = 12;
  pub const VT_ISRECOLLECTION: flatbuffers::VOffsetT = 14;
  pub const VT_ISMEETUP: flatbuffers::VOffsetT = 16;
  pub const VT_ISOMNIBUS: flatbuffers::VOffsetT = 18;
  pub const VT_SCENARIOGROUPID: flatbuffers::VOffsetT = 20;
  pub const VT_SCENARIOCONDITIONTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_CONDITIONAMOUNT: flatbuffers::VOffsetT = 24;
  pub const VT_CONDITIONEVENTCONTENTID: flatbuffers::VOffsetT = 26;
  pub const VT_CLEAREDSCENARIOGROUPID: flatbuffers::VOffsetT = 28;
  pub const VT_RECOLLECTIONSUMMARYLOCALIZESCENARIOID: flatbuffers::VOffsetT = 30;
  pub const VT_RECOLLECTIONRESOURCE: flatbuffers::VOffsetT = 32;
  pub const VT_ISRECOLLECTIONHORIZON: flatbuffers::VOffsetT = 34;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 36;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 38;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentScenarioExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentScenarioExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentScenarioExcel<'bldr>> {
    let mut builder = EventContentScenarioExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentScenario");
      let x = args.ClearedScenarioGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearedScenarioGroupId(x);
      let x = args.ConditionEventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionEventContentId(x);
      let x = args.ConditionAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionAmount(x);
      let x = args.RecollectionNumber;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecollectionNumber(x);
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Order(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.rewardAmount {
        builder.add_rewardAmount(x);
      }
      if let Some(x) = args.rewardId {
        builder.add_rewardId(x);
      }
      if let Some(x) = args.rewardParcelType {
        builder.add_rewardParcelType(x);
      }
      if let Some(x) = args.RecollectionResource {
        builder.add_RecollectionResource(x);
      }
      let x = args.RecollectionSummaryLocalizeScenarioId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_RecollectionSummaryLocalizeScenarioId(x);
      let x = args.ScenarioConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ScenarioConditionType(x);
      if let Some(x) = args.scenarioGroupId {
        builder.add_scenarioGroupId(x);
      }
      let x = args.ReplayDisplayGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ReplayDisplayGroup(x);
      builder.add_IsRecollectionHorizon(args.IsRecollectionHorizon);
      builder.add_IsOmnibus(args.IsOmnibus);
      builder.add_IsMeetup(args.IsMeetup);
      builder.add_IsRecollection(args.IsRecollection);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentScenarioExcelT {
    let key = table_encryption_service::create_key(b"EventContentScenario");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let ReplayDisplayGroup = self.ReplayDisplayGroup();
      let Order = self.Order();
      let RecollectionNumber = self.RecollectionNumber();
      let IsRecollection = self.IsRecollection();
      let IsMeetup = self.IsMeetup();
      let IsOmnibus = self.IsOmnibus();
    let scenarioGroupId = self.scenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let ScenarioConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ScenarioConditionType(), &key)
      } else {
        self.ScenarioConditionType()
      };
      let ConditionAmount = self.ConditionAmount();
      let ConditionEventContentId = self.ConditionEventContentId();
      let ClearedScenarioGroupId = self.ClearedScenarioGroupId();
      let RecollectionSummaryLocalizeScenarioId = self.RecollectionSummaryLocalizeScenarioId();
    let RecollectionResource = self.RecollectionResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IsRecollectionHorizon = self.IsRecollectionHorizon();
    let rewardParcelType = self.rewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let rewardId = self.rewardId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let rewardAmount = self.rewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    EventContentScenarioExcelT {
      Id,
      EventContentId,
      ReplayDisplayGroup,
      Order,
      RecollectionNumber,
      IsRecollection,
      IsMeetup,
      IsOmnibus,
      scenarioGroupId,
      ScenarioConditionType,
      ConditionAmount,
      ConditionEventContentId,
      ClearedScenarioGroupId,
      RecollectionSummaryLocalizeScenarioId,
      RecollectionResource,
      IsRecollectionHorizon,
      rewardParcelType,
      rewardId,
      rewardAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentScenarioExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentScenarioExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplayDisplayGroup(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentScenarioExcel::VT_REPLAYDISPLAYGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentScenarioExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecollectionNumber(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentScenarioExcel::VT_RECOLLECTIONNUMBER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsRecollection(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentScenarioExcel::VT_ISRECOLLECTION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsMeetup(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentScenarioExcel::VT_ISMEETUP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsOmnibus(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentScenarioExcel::VT_ISOMNIBUS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn scenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentScenarioExcel::VT_SCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn ScenarioConditionType(&self) -> EventContentScenarioConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentScenarioConditionType>(EventContentScenarioExcel::VT_SCENARIOCONDITIONTYPE, Some(EventContentScenarioConditionType::None)).unwrap()}
  }
  #[inline]
  pub fn ConditionAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentScenarioExcel::VT_CONDITIONAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConditionEventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentScenarioExcel::VT_CONDITIONEVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ClearedScenarioGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentScenarioExcel::VT_CLEAREDSCENARIOGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecollectionSummaryLocalizeScenarioId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentScenarioExcel::VT_RECOLLECTIONSUMMARYLOCALIZESCENARIOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecollectionResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentScenarioExcel::VT_RECOLLECTIONRESOURCE, None)}
  }
  #[inline]
  pub fn IsRecollectionHorizon(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentScenarioExcel::VT_ISRECOLLECTIONHORIZON, Some(false)).unwrap()}
  }
  #[inline]
  pub fn rewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentScenarioExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn rewardId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentScenarioExcel::VT_REWARDID, None)}
  }
  #[inline]
  pub fn rewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(EventContentScenarioExcel::VT_REWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for EventContentScenarioExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i32>("ReplayDisplayGroup", Self::VT_REPLAYDISPLAYGROUP, false)?
     .visit_field::<i64>("Order", Self::VT_ORDER, false)?
     .visit_field::<i64>("RecollectionNumber", Self::VT_RECOLLECTIONNUMBER, false)?
     .visit_field::<bool>("IsRecollection", Self::VT_ISRECOLLECTION, false)?
     .visit_field::<bool>("IsMeetup", Self::VT_ISMEETUP, false)?
     .visit_field::<bool>("IsOmnibus", Self::VT_ISOMNIBUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("scenarioGroupId", Self::VT_SCENARIOGROUPID, false)?
     .visit_field::<EventContentScenarioConditionType>("ScenarioConditionType", Self::VT_SCENARIOCONDITIONTYPE, false)?
     .visit_field::<i64>("ConditionAmount", Self::VT_CONDITIONAMOUNT, false)?
     .visit_field::<i64>("ConditionEventContentId", Self::VT_CONDITIONEVENTCONTENTID, false)?
     .visit_field::<i64>("ClearedScenarioGroupId", Self::VT_CLEAREDSCENARIOGROUPID, false)?
     .visit_field::<u32>("RecollectionSummaryLocalizeScenarioId", Self::VT_RECOLLECTIONSUMMARYLOCALIZESCENARIOID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RecollectionResource", Self::VT_RECOLLECTIONRESOURCE, false)?
     .visit_field::<bool>("IsRecollectionHorizon", Self::VT_ISRECOLLECTIONHORIZON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("rewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("rewardId", Self::VT_REWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("rewardAmount", Self::VT_REWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentScenarioExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub ReplayDisplayGroup: i32,
    pub Order: i64,
    pub RecollectionNumber: i64,
    pub IsRecollection: bool,
    pub IsMeetup: bool,
    pub IsOmnibus: bool,
    pub scenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ScenarioConditionType: EventContentScenarioConditionType,
    pub ConditionAmount: i64,
    pub ConditionEventContentId: i64,
    pub ClearedScenarioGroupId: i64,
    pub RecollectionSummaryLocalizeScenarioId: u32,
    pub RecollectionResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IsRecollectionHorizon: bool,
    pub rewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub rewardId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub rewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for EventContentScenarioExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentScenarioExcelArgs {
      Id: 0,
      EventContentId: 0,
      ReplayDisplayGroup: 0,
      Order: 0,
      RecollectionNumber: 0,
      IsRecollection: false,
      IsMeetup: false,
      IsOmnibus: false,
      scenarioGroupId: None,
      ScenarioConditionType: EventContentScenarioConditionType::None,
      ConditionAmount: 0,
      ConditionEventContentId: 0,
      ClearedScenarioGroupId: 0,
      RecollectionSummaryLocalizeScenarioId: 0,
      RecollectionResource: None,
      IsRecollectionHorizon: false,
      rewardParcelType: None,
      rewardId: None,
      rewardAmount: None,
    }
  }
}

impl Serialize for EventContentScenarioExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentScenarioExcel", 19)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("ReplayDisplayGroup", &self.ReplayDisplayGroup())?;
      s.serialize_field("Order", &self.Order())?;
      s.serialize_field("RecollectionNumber", &self.RecollectionNumber())?;
      s.serialize_field("IsRecollection", &self.IsRecollection())?;
      s.serialize_field("IsMeetup", &self.IsMeetup())?;
      s.serialize_field("IsOmnibus", &self.IsOmnibus())?;
      if let Some(f) = self.scenarioGroupId() {
        s.serialize_field("scenarioGroupId", &f)?;
      } else {
        s.skip_field("scenarioGroupId")?;
      }
      s.serialize_field("ScenarioConditionType", &self.ScenarioConditionType())?;
      s.serialize_field("ConditionAmount", &self.ConditionAmount())?;
      s.serialize_field("ConditionEventContentId", &self.ConditionEventContentId())?;
      s.serialize_field("ClearedScenarioGroupId", &self.ClearedScenarioGroupId())?;
      s.serialize_field("RecollectionSummaryLocalizeScenarioId", &self.RecollectionSummaryLocalizeScenarioId())?;
      if let Some(f) = self.RecollectionResource() {
        s.serialize_field("RecollectionResource", &f)?;
      } else {
        s.skip_field("RecollectionResource")?;
      }
      s.serialize_field("IsRecollectionHorizon", &self.IsRecollectionHorizon())?;
      if let Some(f) = self.rewardParcelType() {
        s.serialize_field("rewardParcelType", &f)?;
      } else {
        s.skip_field("rewardParcelType")?;
      }
      if let Some(f) = self.rewardId() {
        s.serialize_field("rewardId", &f)?;
      } else {
        s.skip_field("rewardId")?;
      }
      if let Some(f) = self.rewardAmount() {
        s.serialize_field("rewardAmount", &f)?;
      } else {
        s.skip_field("rewardAmount")?;
      }
    s.end()
  }
}

pub struct EventContentScenarioExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentScenarioExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentScenarioExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentScenarioExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_ReplayDisplayGroup(&mut self, ReplayDisplayGroup: i32) {
    self.fbb_.push_slot::<i32>(EventContentScenarioExcel::VT_REPLAYDISPLAYGROUP, ReplayDisplayGroup, 0);
  }
  #[inline]
  pub fn add_Order(&mut self, Order: i64) {
    self.fbb_.push_slot::<i64>(EventContentScenarioExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_RecollectionNumber(&mut self, RecollectionNumber: i64) {
    self.fbb_.push_slot::<i64>(EventContentScenarioExcel::VT_RECOLLECTIONNUMBER, RecollectionNumber, 0);
  }
  #[inline]
  pub fn add_IsRecollection(&mut self, IsRecollection: bool) {
    self.fbb_.push_slot::<bool>(EventContentScenarioExcel::VT_ISRECOLLECTION, IsRecollection, false);
  }
  #[inline]
  pub fn add_IsMeetup(&mut self, IsMeetup: bool) {
    self.fbb_.push_slot::<bool>(EventContentScenarioExcel::VT_ISMEETUP, IsMeetup, false);
  }
  #[inline]
  pub fn add_IsOmnibus(&mut self, IsOmnibus: bool) {
    self.fbb_.push_slot::<bool>(EventContentScenarioExcel::VT_ISOMNIBUS, IsOmnibus, false);
  }
  #[inline]
  pub fn add_scenarioGroupId(&mut self, scenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentScenarioExcel::VT_SCENARIOGROUPID, scenarioGroupId);
  }
  #[inline]
  pub fn add_ScenarioConditionType(&mut self, ScenarioConditionType: EventContentScenarioConditionType) {
    self.fbb_.push_slot::<EventContentScenarioConditionType>(EventContentScenarioExcel::VT_SCENARIOCONDITIONTYPE, ScenarioConditionType, EventContentScenarioConditionType::None);
  }
  #[inline]
  pub fn add_ConditionAmount(&mut self, ConditionAmount: i64) {
    self.fbb_.push_slot::<i64>(EventContentScenarioExcel::VT_CONDITIONAMOUNT, ConditionAmount, 0);
  }
  #[inline]
  pub fn add_ConditionEventContentId(&mut self, ConditionEventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentScenarioExcel::VT_CONDITIONEVENTCONTENTID, ConditionEventContentId, 0);
  }
  #[inline]
  pub fn add_ClearedScenarioGroupId(&mut self, ClearedScenarioGroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentScenarioExcel::VT_CLEAREDSCENARIOGROUPID, ClearedScenarioGroupId, 0);
  }
  #[inline]
  pub fn add_RecollectionSummaryLocalizeScenarioId(&mut self, RecollectionSummaryLocalizeScenarioId: u32) {
    self.fbb_.push_slot::<u32>(EventContentScenarioExcel::VT_RECOLLECTIONSUMMARYLOCALIZESCENARIOID, RecollectionSummaryLocalizeScenarioId, 0);
  }
  #[inline]
  pub fn add_RecollectionResource(&mut self, RecollectionResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentScenarioExcel::VT_RECOLLECTIONRESOURCE, RecollectionResource);
  }
  #[inline]
  pub fn add_IsRecollectionHorizon(&mut self, IsRecollectionHorizon: bool) {
    self.fbb_.push_slot::<bool>(EventContentScenarioExcel::VT_ISRECOLLECTIONHORIZON, IsRecollectionHorizon, false);
  }
  #[inline]
  pub fn add_rewardParcelType(&mut self, rewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentScenarioExcel::VT_REWARDPARCELTYPE, rewardParcelType);
  }
  #[inline]
  pub fn add_rewardId(&mut self, rewardId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentScenarioExcel::VT_REWARDID, rewardId);
  }
  #[inline]
  pub fn add_rewardAmount(&mut self, rewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentScenarioExcel::VT_REWARDAMOUNT, rewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentScenarioExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentScenarioExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentScenarioExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentScenarioExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentScenarioExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("ReplayDisplayGroup", &self.ReplayDisplayGroup());
      ds.field("Order", &self.Order());
      ds.field("RecollectionNumber", &self.RecollectionNumber());
      ds.field("IsRecollection", &self.IsRecollection());
      ds.field("IsMeetup", &self.IsMeetup());
      ds.field("IsOmnibus", &self.IsOmnibus());
      ds.field("scenarioGroupId", &self.scenarioGroupId());
      ds.field("ScenarioConditionType", &self.ScenarioConditionType());
      ds.field("ConditionAmount", &self.ConditionAmount());
      ds.field("ConditionEventContentId", &self.ConditionEventContentId());
      ds.field("ClearedScenarioGroupId", &self.ClearedScenarioGroupId());
      ds.field("RecollectionSummaryLocalizeScenarioId", &self.RecollectionSummaryLocalizeScenarioId());
      ds.field("RecollectionResource", &self.RecollectionResource());
      ds.field("IsRecollectionHorizon", &self.IsRecollectionHorizon());
      ds.field("rewardParcelType", &self.rewardParcelType());
      ds.field("rewardId", &self.rewardId());
      ds.field("rewardAmount", &self.rewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentScenarioExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub ReplayDisplayGroup: i32,
  pub Order: i64,
  pub RecollectionNumber: i64,
  pub IsRecollection: bool,
  pub IsMeetup: bool,
  pub IsOmnibus: bool,
  pub scenarioGroupId: Option<Vec<i64>>,
  pub ScenarioConditionType: EventContentScenarioConditionType,
  pub ConditionAmount: i64,
  pub ConditionEventContentId: i64,
  pub ClearedScenarioGroupId: i64,
  pub RecollectionSummaryLocalizeScenarioId: u32,
  pub RecollectionResource: Option<String>,
  pub IsRecollectionHorizon: bool,
  pub rewardParcelType: Option<Vec<ParcelType>>,
  pub rewardId: Option<Vec<i64>>,
  pub rewardAmount: Option<Vec<i32>>,
}
impl Default for EventContentScenarioExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      ReplayDisplayGroup: 0,
      Order: 0,
      RecollectionNumber: 0,
      IsRecollection: false,
      IsMeetup: false,
      IsOmnibus: false,
      scenarioGroupId: None,
      ScenarioConditionType: EventContentScenarioConditionType::None,
      ConditionAmount: 0,
      ConditionEventContentId: 0,
      ClearedScenarioGroupId: 0,
      RecollectionSummaryLocalizeScenarioId: 0,
      RecollectionResource: None,
      IsRecollectionHorizon: false,
      rewardParcelType: None,
      rewardId: None,
      rewardAmount: None,
    }
  }
}
impl EventContentScenarioExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentScenarioExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let ReplayDisplayGroup = self.ReplayDisplayGroup;
    let Order = self.Order;
    let RecollectionNumber = self.RecollectionNumber;
    let IsRecollection = self.IsRecollection;
    let IsMeetup = self.IsMeetup;
    let IsOmnibus = self.IsOmnibus;
    let scenarioGroupId = self.scenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ScenarioConditionType = self.ScenarioConditionType;
    let ConditionAmount = self.ConditionAmount;
    let ConditionEventContentId = self.ConditionEventContentId;
    let ClearedScenarioGroupId = self.ClearedScenarioGroupId;
    let RecollectionSummaryLocalizeScenarioId = self.RecollectionSummaryLocalizeScenarioId;
    let RecollectionResource = self.RecollectionResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IsRecollectionHorizon = self.IsRecollectionHorizon;
    let rewardParcelType = self.rewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardId = self.rewardId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let rewardAmount = self.rewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentScenarioExcel::create(_fbb, &EventContentScenarioExcelArgs{
      Id,
      EventContentId,
      ReplayDisplayGroup,
      Order,
      RecollectionNumber,
      IsRecollection,
      IsMeetup,
      IsOmnibus,
      scenarioGroupId,
      ScenarioConditionType,
      ConditionAmount,
      ConditionEventContentId,
      ClearedScenarioGroupId,
      RecollectionSummaryLocalizeScenarioId,
      RecollectionResource,
      IsRecollectionHorizon,
      rewardParcelType,
      rewardId,
      rewardAmount,
    })
  }
}
