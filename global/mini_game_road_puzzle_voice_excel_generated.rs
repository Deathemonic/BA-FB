// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameRoadPuzzleVoiceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameRoadPuzzleVoiceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameRoadPuzzleVoiceExcel<'a> {
  type Inner = MiniGameRoadPuzzleVoiceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameRoadPuzzleVoiceExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_VOICECONDITION: flatbuffers::VOffsetT = 8;
  pub const VT_VOICECLIP: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameRoadPuzzleVoiceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameRoadPuzzleVoiceExcelArgs
  ) -> flatbuffers::WIPOffset<MiniGameRoadPuzzleVoiceExcel<'bldr>> {
    let mut builder = MiniGameRoadPuzzleVoiceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameRoadPuzzleVoice");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.VoiceClip;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_VoiceClip(x);
      let x = args.VoiceCondition;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceCondition(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameRoadPuzzleVoiceExcelT {
    let key = table_encryption_service::create_key(b"MiniGameRoadPuzzleVoice");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let VoiceCondition = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceCondition(), &key)
      } else {
        self.VoiceCondition()
      };
      let VoiceClip = self.VoiceClip();
    MiniGameRoadPuzzleVoiceExcelT {
      EventContentId,
      UniqueId,
      VoiceCondition,
      VoiceClip,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRoadPuzzleVoiceExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRoadPuzzleVoiceExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VoiceCondition(&self) -> RoadPuzzleVoiceCondition {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RoadPuzzleVoiceCondition>(MiniGameRoadPuzzleVoiceExcel::VT_VOICECONDITION, Some(RoadPuzzleVoiceCondition::None)).unwrap()}
  }
  #[inline]
  pub fn VoiceClip(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameRoadPuzzleVoiceExcel::VT_VOICECLIP, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameRoadPuzzleVoiceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<RoadPuzzleVoiceCondition>("VoiceCondition", Self::VT_VOICECONDITION, false)?
     .visit_field::<u32>("VoiceClip", Self::VT_VOICECLIP, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameRoadPuzzleVoiceExcelArgs {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub VoiceCondition: RoadPuzzleVoiceCondition,
    pub VoiceClip: u32,
}
impl<'a> Default for MiniGameRoadPuzzleVoiceExcelArgs {
  #[inline]
  fn default() -> Self {
    MiniGameRoadPuzzleVoiceExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      VoiceCondition: RoadPuzzleVoiceCondition::None,
      VoiceClip: 0,
    }
  }
}

impl Serialize for MiniGameRoadPuzzleVoiceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameRoadPuzzleVoiceExcel", 4)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("VoiceCondition", &self.VoiceCondition())?;
      s.serialize_field("VoiceClip", &self.VoiceClip())?;
    s.end()
  }
}

pub struct MiniGameRoadPuzzleVoiceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameRoadPuzzleVoiceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRoadPuzzleVoiceExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRoadPuzzleVoiceExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_VoiceCondition(&mut self, VoiceCondition: RoadPuzzleVoiceCondition) {
    self.fbb_.push_slot::<RoadPuzzleVoiceCondition>(MiniGameRoadPuzzleVoiceExcel::VT_VOICECONDITION, VoiceCondition, RoadPuzzleVoiceCondition::None);
  }
  #[inline]
  pub fn add_VoiceClip(&mut self, VoiceClip: u32) {
    self.fbb_.push_slot::<u32>(MiniGameRoadPuzzleVoiceExcel::VT_VOICECLIP, VoiceClip, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameRoadPuzzleVoiceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameRoadPuzzleVoiceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameRoadPuzzleVoiceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameRoadPuzzleVoiceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameRoadPuzzleVoiceExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("VoiceCondition", &self.VoiceCondition());
      ds.field("VoiceClip", &self.VoiceClip());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameRoadPuzzleVoiceExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub VoiceCondition: RoadPuzzleVoiceCondition,
  pub VoiceClip: u32,
}
impl Default for MiniGameRoadPuzzleVoiceExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      VoiceCondition: RoadPuzzleVoiceCondition::None,
      VoiceClip: 0,
    }
  }
}
impl MiniGameRoadPuzzleVoiceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameRoadPuzzleVoiceExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let VoiceCondition = self.VoiceCondition;
    let VoiceClip = self.VoiceClip;
    MiniGameRoadPuzzleVoiceExcel::create(_fbb, &MiniGameRoadPuzzleVoiceExcelArgs{
      EventContentId,
      UniqueId,
      VoiceCondition,
      VoiceClip,
    })
  }
}
