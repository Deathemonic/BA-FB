// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldSceneExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldSceneExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldSceneExcel<'a> {
  type Inner = FieldSceneExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldSceneExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_DATEID: flatbuffers::VOffsetT = 6;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_ARTLEVELPATH: flatbuffers::VOffsetT = 10;
  pub const VT_DESIGNLEVELPATH: flatbuffers::VOffsetT = 12;
  pub const VT_BGMID: flatbuffers::VOffsetT = 14;
  pub const VT_CONDITIONALBGMQUESTID: flatbuffers::VOffsetT = 16;
  pub const VT_BEGINCONDITIONALBGMSCENARIOGROUPID: flatbuffers::VOffsetT = 18;
  pub const VT_BEGINCONDITIONALBGMINTERACTIONID: flatbuffers::VOffsetT = 20;
  pub const VT_ENDCONDITIONALBGMSCENARIOGROUPID: flatbuffers::VOffsetT = 22;
  pub const VT_ENDCONDITIONALBGMINTERACTIONID: flatbuffers::VOffsetT = 24;
  pub const VT_CONDITIONALBGMID: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldSceneExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldSceneExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldSceneExcel<'bldr>> {
    let mut builder = FieldSceneExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldScene");
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.DateId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DateId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.conditionalBGMId {
        builder.add_conditionalBGMId(x);
      }
      if let Some(x) = args.endConditionalBGMInteractionId {
        builder.add_endConditionalBGMInteractionId(x);
      }
      if let Some(x) = args.endConditionalBGMScenarioGroupId {
        builder.add_endConditionalBGMScenarioGroupId(x);
      }
      if let Some(x) = args.beginConditionalBGMInteractionId {
        builder.add_beginConditionalBGMInteractionId(x);
      }
      if let Some(x) = args.beginConditionalBGMScenarioGroupId {
        builder.add_beginConditionalBGMScenarioGroupId(x);
      }
      if let Some(x) = args.conditionalBGMQuestId {
        builder.add_conditionalBGMQuestId(x);
      }
      if let Some(x) = args.DesignLevelPath {
        builder.add_DesignLevelPath(x);
      }
      if let Some(x) = args.ArtLevelPath {
        builder.add_ArtLevelPath(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> FieldSceneExcelT {
    let key = table_encryption_service::create_key(b"FieldScene");
      let UniqueId = self.UniqueId();
      let DateId = self.DateId();
      let GroupId = self.GroupId();
    let ArtLevelPath = self.ArtLevelPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignLevelPath = self.DesignLevelPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BGMId = self.BGMId();
    let conditionalBGMQuestId = self.conditionalBGMQuestId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let beginConditionalBGMScenarioGroupId = self.beginConditionalBGMScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let beginConditionalBGMInteractionId = self.beginConditionalBGMInteractionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let endConditionalBGMScenarioGroupId = self.endConditionalBGMScenarioGroupId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let endConditionalBGMInteractionId = self.endConditionalBGMInteractionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let conditionalBGMId = self.conditionalBGMId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    FieldSceneExcelT {
      UniqueId,
      DateId,
      GroupId,
      ArtLevelPath,
      DesignLevelPath,
      BGMId,
      conditionalBGMQuestId,
      beginConditionalBGMScenarioGroupId,
      beginConditionalBGMInteractionId,
      endConditionalBGMScenarioGroupId,
      endConditionalBGMInteractionId,
      conditionalBGMId,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSceneExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DateId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSceneExcel::VT_DATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSceneExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ArtLevelPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldSceneExcel::VT_ARTLEVELPATH, None)}
  }
  #[inline]
  pub fn DesignLevelPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldSceneExcel::VT_DESIGNLEVELPATH, None)}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSceneExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn conditionalBGMQuestId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldSceneExcel::VT_CONDITIONALBGMQUESTID, None)}
  }
  #[inline]
  pub fn beginConditionalBGMScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldSceneExcel::VT_BEGINCONDITIONALBGMSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn beginConditionalBGMInteractionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldSceneExcel::VT_BEGINCONDITIONALBGMINTERACTIONID, None)}
  }
  #[inline]
  pub fn endConditionalBGMScenarioGroupId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldSceneExcel::VT_ENDCONDITIONALBGMSCENARIOGROUPID, None)}
  }
  #[inline]
  pub fn endConditionalBGMInteractionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldSceneExcel::VT_ENDCONDITIONALBGMINTERACTIONID, None)}
  }
  #[inline]
  pub fn conditionalBGMId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldSceneExcel::VT_CONDITIONALBGMID, None)}
  }
}

impl flatbuffers::Verifiable for FieldSceneExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("DateId", Self::VT_DATEID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ArtLevelPath", Self::VT_ARTLEVELPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignLevelPath", Self::VT_DESIGNLEVELPATH, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("conditionalBGMQuestId", Self::VT_CONDITIONALBGMQUESTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("beginConditionalBGMScenarioGroupId", Self::VT_BEGINCONDITIONALBGMSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("beginConditionalBGMInteractionId", Self::VT_BEGINCONDITIONALBGMINTERACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("endConditionalBGMScenarioGroupId", Self::VT_ENDCONDITIONALBGMSCENARIOGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("endConditionalBGMInteractionId", Self::VT_ENDCONDITIONALBGMINTERACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("conditionalBGMId", Self::VT_CONDITIONALBGMID, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldSceneExcelArgs<'a> {
    pub UniqueId: i64,
    pub DateId: i64,
    pub GroupId: i64,
    pub ArtLevelPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignLevelPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BGMId: i64,
    pub conditionalBGMQuestId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub beginConditionalBGMScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub beginConditionalBGMInteractionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub endConditionalBGMScenarioGroupId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub endConditionalBGMInteractionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub conditionalBGMId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for FieldSceneExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldSceneExcelArgs {
      UniqueId: 0,
      DateId: 0,
      GroupId: 0,
      ArtLevelPath: None,
      DesignLevelPath: None,
      BGMId: 0,
      conditionalBGMQuestId: None,
      beginConditionalBGMScenarioGroupId: None,
      beginConditionalBGMInteractionId: None,
      endConditionalBGMScenarioGroupId: None,
      endConditionalBGMInteractionId: None,
      conditionalBGMId: None,
    }
  }
}

impl Serialize for FieldSceneExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldSceneExcel", 12)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("DateId", &self.DateId())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      if let Some(f) = self.ArtLevelPath() {
        s.serialize_field("ArtLevelPath", &f)?;
      } else {
        s.skip_field("ArtLevelPath")?;
      }
      if let Some(f) = self.DesignLevelPath() {
        s.serialize_field("DesignLevelPath", &f)?;
      } else {
        s.skip_field("DesignLevelPath")?;
      }
      s.serialize_field("BGMId", &self.BGMId())?;
      if let Some(f) = self.conditionalBGMQuestId() {
        s.serialize_field("conditionalBGMQuestId", &f)?;
      } else {
        s.skip_field("conditionalBGMQuestId")?;
      }
      if let Some(f) = self.beginConditionalBGMScenarioGroupId() {
        s.serialize_field("beginConditionalBGMScenarioGroupId", &f)?;
      } else {
        s.skip_field("beginConditionalBGMScenarioGroupId")?;
      }
      if let Some(f) = self.beginConditionalBGMInteractionId() {
        s.serialize_field("beginConditionalBGMInteractionId", &f)?;
      } else {
        s.skip_field("beginConditionalBGMInteractionId")?;
      }
      if let Some(f) = self.endConditionalBGMScenarioGroupId() {
        s.serialize_field("endConditionalBGMScenarioGroupId", &f)?;
      } else {
        s.skip_field("endConditionalBGMScenarioGroupId")?;
      }
      if let Some(f) = self.endConditionalBGMInteractionId() {
        s.serialize_field("endConditionalBGMInteractionId", &f)?;
      } else {
        s.skip_field("endConditionalBGMInteractionId")?;
      }
      if let Some(f) = self.conditionalBGMId() {
        s.serialize_field("conditionalBGMId", &f)?;
      } else {
        s.skip_field("conditionalBGMId")?;
      }
    s.end()
  }
}

pub struct FieldSceneExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldSceneExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldSceneExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_DateId(&mut self, DateId: i64) {
    self.fbb_.push_slot::<i64>(FieldSceneExcel::VT_DATEID, DateId, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(FieldSceneExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_ArtLevelPath(&mut self, ArtLevelPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_ARTLEVELPATH, ArtLevelPath);
  }
  #[inline]
  pub fn add_DesignLevelPath(&mut self, DesignLevelPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_DESIGNLEVELPATH, DesignLevelPath);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(FieldSceneExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_conditionalBGMQuestId(&mut self, conditionalBGMQuestId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_CONDITIONALBGMQUESTID, conditionalBGMQuestId);
  }
  #[inline]
  pub fn add_beginConditionalBGMScenarioGroupId(&mut self, beginConditionalBGMScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_BEGINCONDITIONALBGMSCENARIOGROUPID, beginConditionalBGMScenarioGroupId);
  }
  #[inline]
  pub fn add_beginConditionalBGMInteractionId(&mut self, beginConditionalBGMInteractionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_BEGINCONDITIONALBGMINTERACTIONID, beginConditionalBGMInteractionId);
  }
  #[inline]
  pub fn add_endConditionalBGMScenarioGroupId(&mut self, endConditionalBGMScenarioGroupId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_ENDCONDITIONALBGMSCENARIOGROUPID, endConditionalBGMScenarioGroupId);
  }
  #[inline]
  pub fn add_endConditionalBGMInteractionId(&mut self, endConditionalBGMInteractionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_ENDCONDITIONALBGMINTERACTIONID, endConditionalBGMInteractionId);
  }
  #[inline]
  pub fn add_conditionalBGMId(&mut self, conditionalBGMId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSceneExcel::VT_CONDITIONALBGMID, conditionalBGMId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldSceneExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldSceneExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldSceneExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldSceneExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldSceneExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("DateId", &self.DateId());
      ds.field("GroupId", &self.GroupId());
      ds.field("ArtLevelPath", &self.ArtLevelPath());
      ds.field("DesignLevelPath", &self.DesignLevelPath());
      ds.field("BGMId", &self.BGMId());
      ds.field("conditionalBGMQuestId", &self.conditionalBGMQuestId());
      ds.field("beginConditionalBGMScenarioGroupId", &self.beginConditionalBGMScenarioGroupId());
      ds.field("beginConditionalBGMInteractionId", &self.beginConditionalBGMInteractionId());
      ds.field("endConditionalBGMScenarioGroupId", &self.endConditionalBGMScenarioGroupId());
      ds.field("endConditionalBGMInteractionId", &self.endConditionalBGMInteractionId());
      ds.field("conditionalBGMId", &self.conditionalBGMId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldSceneExcelT {
  pub UniqueId: i64,
  pub DateId: i64,
  pub GroupId: i64,
  pub ArtLevelPath: Option<String>,
  pub DesignLevelPath: Option<String>,
  pub BGMId: i64,
  pub conditionalBGMQuestId: Option<Vec<i64>>,
  pub beginConditionalBGMScenarioGroupId: Option<Vec<i64>>,
  pub beginConditionalBGMInteractionId: Option<Vec<i64>>,
  pub endConditionalBGMScenarioGroupId: Option<Vec<i64>>,
  pub endConditionalBGMInteractionId: Option<Vec<i64>>,
  pub conditionalBGMId: Option<Vec<i64>>,
}
impl Default for FieldSceneExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      DateId: 0,
      GroupId: 0,
      ArtLevelPath: None,
      DesignLevelPath: None,
      BGMId: 0,
      conditionalBGMQuestId: None,
      beginConditionalBGMScenarioGroupId: None,
      beginConditionalBGMInteractionId: None,
      endConditionalBGMScenarioGroupId: None,
      endConditionalBGMInteractionId: None,
      conditionalBGMId: None,
    }
  }
}
impl FieldSceneExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldSceneExcel<'b>> {
    let UniqueId = self.UniqueId;
    let DateId = self.DateId;
    let GroupId = self.GroupId;
    let ArtLevelPath = self.ArtLevelPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignLevelPath = self.DesignLevelPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BGMId = self.BGMId;
    let conditionalBGMQuestId = self.conditionalBGMQuestId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let beginConditionalBGMScenarioGroupId = self.beginConditionalBGMScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let beginConditionalBGMInteractionId = self.beginConditionalBGMInteractionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let endConditionalBGMScenarioGroupId = self.endConditionalBGMScenarioGroupId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let endConditionalBGMInteractionId = self.endConditionalBGMInteractionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionalBGMId = self.conditionalBGMId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    FieldSceneExcel::create(_fbb, &FieldSceneExcelArgs{
      UniqueId,
      DateId,
      GroupId,
      ArtLevelPath,
      DesignLevelPath,
      BGMId,
      conditionalBGMQuestId,
      beginConditionalBGMScenarioGroupId,
      beginConditionalBGMInteractionId,
      endConditionalBGMScenarioGroupId,
      endConditionalBGMInteractionId,
      conditionalBGMId,
    })
  }
}
