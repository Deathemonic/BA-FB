// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopCashScenarioResourceInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopCashScenarioResourceInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopCashScenarioResourceInfoExcel<'a> {
  type Inner = ShopCashScenarioResourceInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopCashScenarioResourceInfoExcel<'a> {
  pub const VT_SCENARIORESROUCEINFOID: flatbuffers::VOffsetT = 4;
  pub const VT_SHOPCASHID: flatbuffers::VOffsetT = 6;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopCashScenarioResourceInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopCashScenarioResourceInfoExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShopCashScenarioResourceInfoExcel<'bldr>> {
    let mut builder = ShopCashScenarioResourceInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShopCashScenarioResourceInfo");
      let x = args.ShopCashId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShopCashId(x);
      let x = args.ScenarioResrouceInfoId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ScenarioResrouceInfoId(x);
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ShopCashScenarioResourceInfoExcelT {
    let key = table_encryption_service::create_key(b"ShopCashScenarioResourceInfo");
      let ScenarioResrouceInfoId = self.ScenarioResrouceInfoId();
      let ShopCashId = self.ShopCashId();
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ShopCashScenarioResourceInfoExcelT {
      ScenarioResrouceInfoId,
      ShopCashId,
      IconPath,
    }
  }

  #[inline]
  pub fn ScenarioResrouceInfoId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashScenarioResourceInfoExcel::VT_SCENARIORESROUCEINFOID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopCashId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashScenarioResourceInfoExcel::VT_SHOPCASHID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopCashScenarioResourceInfoExcel::VT_ICONPATH, None)}
  }
}

impl flatbuffers::Verifiable for ShopCashScenarioResourceInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ScenarioResrouceInfoId", Self::VT_SCENARIORESROUCEINFOID, false)?
     .visit_field::<i64>("ShopCashId", Self::VT_SHOPCASHID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopCashScenarioResourceInfoExcelArgs<'a> {
    pub ScenarioResrouceInfoId: i64,
    pub ShopCashId: i64,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ShopCashScenarioResourceInfoExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShopCashScenarioResourceInfoExcelArgs {
      ScenarioResrouceInfoId: 0,
      ShopCashId: 0,
      IconPath: None,
    }
  }
}

impl Serialize for ShopCashScenarioResourceInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopCashScenarioResourceInfoExcel", 3)?;
      s.serialize_field("ScenarioResrouceInfoId", &self.ScenarioResrouceInfoId())?;
      s.serialize_field("ShopCashId", &self.ShopCashId())?;
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
    s.end()
  }
}

pub struct ShopCashScenarioResourceInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopCashScenarioResourceInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ScenarioResrouceInfoId(&mut self, ScenarioResrouceInfoId: i64) {
    self.fbb_.push_slot::<i64>(ShopCashScenarioResourceInfoExcel::VT_SCENARIORESROUCEINFOID, ScenarioResrouceInfoId, 0);
  }
  #[inline]
  pub fn add_ShopCashId(&mut self, ShopCashId: i64) {
    self.fbb_.push_slot::<i64>(ShopCashScenarioResourceInfoExcel::VT_SHOPCASHID, ShopCashId, 0);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopCashScenarioResourceInfoExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopCashScenarioResourceInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopCashScenarioResourceInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopCashScenarioResourceInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopCashScenarioResourceInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopCashScenarioResourceInfoExcel");
      ds.field("ScenarioResrouceInfoId", &self.ScenarioResrouceInfoId());
      ds.field("ShopCashId", &self.ShopCashId());
      ds.field("IconPath", &self.IconPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopCashScenarioResourceInfoExcelT {
  pub ScenarioResrouceInfoId: i64,
  pub ShopCashId: i64,
  pub IconPath: Option<String>,
}
impl Default for ShopCashScenarioResourceInfoExcelT {
  fn default() -> Self {
    Self {
      ScenarioResrouceInfoId: 0,
      ShopCashId: 0,
      IconPath: None,
    }
  }
}
impl ShopCashScenarioResourceInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopCashScenarioResourceInfoExcel<'b>> {
    let ScenarioResrouceInfoId = self.ScenarioResrouceInfoId;
    let ShopCashId = self.ShopCashId;
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ShopCashScenarioResourceInfoExcel::create(_fbb, &ShopCashScenarioResourceInfoExcelArgs{
      ScenarioResrouceInfoId,
      ShopCashId,
      IconPath,
    })
  }
}
