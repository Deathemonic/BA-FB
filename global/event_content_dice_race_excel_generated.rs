// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentDiceRaceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentDiceRaceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentDiceRaceExcel<'a> {
  type Inner = EventContentDiceRaceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentDiceRaceExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_DICECOSTGOODSID: flatbuffers::VOffsetT = 6;
  pub const VT_SKIPABLELAP: flatbuffers::VOffsetT = 8;
  pub const VT_DICERACEPAWNPREFAB: flatbuffers::VOffsetT = 10;
  pub const VT_ISUSINGFIXEDDICE: flatbuffers::VOffsetT = 12;
  pub const VT_DICERACEEVENTTYPE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentDiceRaceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentDiceRaceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentDiceRaceExcel<'bldr>> {
    let mut builder = EventContentDiceRaceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentDiceRace");
      let x = args.DiceCostGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DiceCostGoodsId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.diceRaceEventType {
        builder.add_diceRaceEventType(x);
      }
      if let Some(x) = args.DiceRacePawnPrefab {
        builder.add_DiceRacePawnPrefab(x);
      }
      let x = args.SkipableLap;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SkipableLap(x);
      builder.add_IsUsingFixedDice(args.IsUsingFixedDice);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentDiceRaceExcelT {
    let key = table_encryption_service::create_key(b"EventContentDiceRace");
      let EventContentId = self.EventContentId();
      let DiceCostGoodsId = self.DiceCostGoodsId();
      let SkipableLap = self.SkipableLap();
    let DiceRacePawnPrefab = self.DiceRacePawnPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IsUsingFixedDice = self.IsUsingFixedDice();
    let diceRaceEventType = self.diceRaceEventType().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    EventContentDiceRaceExcelT {
      EventContentId,
      DiceCostGoodsId,
      SkipableLap,
      DiceRacePawnPrefab,
      IsUsingFixedDice,
      diceRaceEventType,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDiceRaceExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiceCostGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentDiceRaceExcel::VT_DICECOSTGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkipableLap(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentDiceRaceExcel::VT_SKIPABLELAP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiceRacePawnPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentDiceRaceExcel::VT_DICERACEPAWNPREFAB, None)}
  }
  #[inline]
  pub fn IsUsingFixedDice(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentDiceRaceExcel::VT_ISUSINGFIXEDDICE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn diceRaceEventType(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EventContentDiceRaceExcel::VT_DICERACEEVENTTYPE, None)}
  }
}

impl flatbuffers::Verifiable for EventContentDiceRaceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("DiceCostGoodsId", Self::VT_DICECOSTGOODSID, false)?
     .visit_field::<i32>("SkipableLap", Self::VT_SKIPABLELAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DiceRacePawnPrefab", Self::VT_DICERACEPAWNPREFAB, false)?
     .visit_field::<bool>("IsUsingFixedDice", Self::VT_ISUSINGFIXEDDICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("diceRaceEventType", Self::VT_DICERACEEVENTTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentDiceRaceExcelArgs<'a> {
    pub EventContentId: i64,
    pub DiceCostGoodsId: i64,
    pub SkipableLap: i32,
    pub DiceRacePawnPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IsUsingFixedDice: bool,
    pub diceRaceEventType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for EventContentDiceRaceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentDiceRaceExcelArgs {
      EventContentId: 0,
      DiceCostGoodsId: 0,
      SkipableLap: 0,
      DiceRacePawnPrefab: None,
      IsUsingFixedDice: false,
      diceRaceEventType: None,
    }
  }
}

impl Serialize for EventContentDiceRaceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentDiceRaceExcel", 6)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("DiceCostGoodsId", &self.DiceCostGoodsId())?;
      s.serialize_field("SkipableLap", &self.SkipableLap())?;
      if let Some(f) = self.DiceRacePawnPrefab() {
        s.serialize_field("DiceRacePawnPrefab", &f)?;
      } else {
        s.skip_field("DiceRacePawnPrefab")?;
      }
      s.serialize_field("IsUsingFixedDice", &self.IsUsingFixedDice())?;
      if let Some(f) = self.diceRaceEventType() {
        s.serialize_field("diceRaceEventType", &f)?;
      } else {
        s.skip_field("diceRaceEventType")?;
      }
    s.end()
  }
}

pub struct EventContentDiceRaceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentDiceRaceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentDiceRaceExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_DiceCostGoodsId(&mut self, DiceCostGoodsId: i64) {
    self.fbb_.push_slot::<i64>(EventContentDiceRaceExcel::VT_DICECOSTGOODSID, DiceCostGoodsId, 0);
  }
  #[inline]
  pub fn add_SkipableLap(&mut self, SkipableLap: i32) {
    self.fbb_.push_slot::<i32>(EventContentDiceRaceExcel::VT_SKIPABLELAP, SkipableLap, 0);
  }
  #[inline]
  pub fn add_DiceRacePawnPrefab(&mut self, DiceRacePawnPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentDiceRaceExcel::VT_DICERACEPAWNPREFAB, DiceRacePawnPrefab);
  }
  #[inline]
  pub fn add_IsUsingFixedDice(&mut self, IsUsingFixedDice: bool) {
    self.fbb_.push_slot::<bool>(EventContentDiceRaceExcel::VT_ISUSINGFIXEDDICE, IsUsingFixedDice, false);
  }
  #[inline]
  pub fn add_diceRaceEventType(&mut self, diceRaceEventType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentDiceRaceExcel::VT_DICERACEEVENTTYPE, diceRaceEventType);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentDiceRaceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentDiceRaceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentDiceRaceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentDiceRaceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentDiceRaceExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("DiceCostGoodsId", &self.DiceCostGoodsId());
      ds.field("SkipableLap", &self.SkipableLap());
      ds.field("DiceRacePawnPrefab", &self.DiceRacePawnPrefab());
      ds.field("IsUsingFixedDice", &self.IsUsingFixedDice());
      ds.field("diceRaceEventType", &self.diceRaceEventType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentDiceRaceExcelT {
  pub EventContentId: i64,
  pub DiceCostGoodsId: i64,
  pub SkipableLap: i32,
  pub DiceRacePawnPrefab: Option<String>,
  pub IsUsingFixedDice: bool,
  pub diceRaceEventType: Option<Vec<String>>,
}
impl Default for EventContentDiceRaceExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      DiceCostGoodsId: 0,
      SkipableLap: 0,
      DiceRacePawnPrefab: None,
      IsUsingFixedDice: false,
      diceRaceEventType: None,
    }
  }
}
impl EventContentDiceRaceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentDiceRaceExcel<'b>> {
    let EventContentId = self.EventContentId;
    let DiceCostGoodsId = self.DiceCostGoodsId;
    let SkipableLap = self.SkipableLap;
    let DiceRacePawnPrefab = self.DiceRacePawnPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IsUsingFixedDice = self.IsUsingFixedDice;
    let diceRaceEventType = self.diceRaceEventType.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    EventContentDiceRaceExcel::create(_fbb, &EventContentDiceRaceExcelArgs{
      EventContentId,
      DiceCostGoodsId,
      SkipableLap,
      DiceRacePawnPrefab,
      IsUsingFixedDice,
      diceRaceEventType,
    })
  }
}
