// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentTreasureRoundExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentTreasureRoundExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentTreasureRoundExcel<'a> {
  type Inner = EventContentTreasureRoundExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentTreasureRoundExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_TREASUREROUND: flatbuffers::VOffsetT = 6;
  pub const VT_TREASUREROUNDSIZE: flatbuffers::VOffsetT = 8;
  pub const VT_CELLVISUALSORTUNSTRUCTED: flatbuffers::VOffsetT = 10;
  pub const VT_CELLCHECKGOODSID: flatbuffers::VOffsetT = 12;
  pub const VT_CELLREWARDID: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_TREASURECELLIMAGEPATH: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentTreasureRoundExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentTreasureRoundExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentTreasureRoundExcel<'bldr>> {
    let mut builder = EventContentTreasureRoundExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentTreasureRound");
      let x = args.CellRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CellRewardId(x);
      let x = args.CellCheckGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CellCheckGoodsId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.TreasureCellImagePath {
        builder.add_TreasureCellImagePath(x);
      }
      if let Some(x) = args.RewardAmount {
        builder.add_RewardAmount(x);
      }
      if let Some(x) = args.RewardID {
        builder.add_RewardID(x);
      }
      if let Some(x) = args.TreasureRoundSize {
        builder.add_TreasureRoundSize(x);
      }
      let x = args.TreasureRound;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TreasureRound(x);
      builder.add_CellVisualSortUnstructed(args.CellVisualSortUnstructed);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentTreasureRoundExcelT {
    let key = table_encryption_service::create_key(b"EventContentTreasureRound");
      let EventContentId = self.EventContentId();
      let TreasureRound = self.TreasureRound();
    let TreasureRoundSize = self.TreasureRoundSize().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
      let CellVisualSortUnstructed = self.CellVisualSortUnstructed();
      let CellCheckGoodsId = self.CellCheckGoodsId();
      let CellRewardId = self.CellRewardId();
    let RewardID = self.RewardID().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardAmount = self.RewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let TreasureCellImagePath = self.TreasureCellImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentTreasureRoundExcelT {
      EventContentId,
      TreasureRound,
      TreasureRoundSize,
      CellVisualSortUnstructed,
      CellCheckGoodsId,
      CellRewardId,
      RewardID,
      RewardAmount,
      TreasureCellImagePath,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentTreasureRoundExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TreasureRound(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentTreasureRoundExcel::VT_TREASUREROUND, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TreasureRoundSize(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(EventContentTreasureRoundExcel::VT_TREASUREROUNDSIZE, None)}
  }
  #[inline]
  pub fn CellVisualSortUnstructed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentTreasureRoundExcel::VT_CELLVISUALSORTUNSTRUCTED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn CellCheckGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentTreasureRoundExcel::VT_CELLCHECKGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CellRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentTreasureRoundExcel::VT_CELLREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardID(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentTreasureRoundExcel::VT_REWARDID, None)}
  }
  #[inline]
  pub fn RewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(EventContentTreasureRoundExcel::VT_REWARDAMOUNT, None)}
  }
  #[inline]
  pub fn TreasureCellImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentTreasureRoundExcel::VT_TREASURECELLIMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for EventContentTreasureRoundExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i32>("TreasureRound", Self::VT_TREASUREROUND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("TreasureRoundSize", Self::VT_TREASUREROUNDSIZE, false)?
     .visit_field::<bool>("CellVisualSortUnstructed", Self::VT_CELLVISUALSORTUNSTRUCTED, false)?
     .visit_field::<i64>("CellCheckGoodsId", Self::VT_CELLCHECKGOODSID, false)?
     .visit_field::<i64>("CellRewardId", Self::VT_CELLREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardID", Self::VT_REWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("RewardAmount", Self::VT_REWARDAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TreasureCellImagePath", Self::VT_TREASURECELLIMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentTreasureRoundExcelArgs<'a> {
    pub EventContentId: i64,
    pub TreasureRound: i32,
    pub TreasureRoundSize: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub CellVisualSortUnstructed: bool,
    pub CellCheckGoodsId: i64,
    pub CellRewardId: i64,
    pub RewardID: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub TreasureCellImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentTreasureRoundExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentTreasureRoundExcelArgs {
      EventContentId: 0,
      TreasureRound: 0,
      TreasureRoundSize: None,
      CellVisualSortUnstructed: false,
      CellCheckGoodsId: 0,
      CellRewardId: 0,
      RewardID: None,
      RewardAmount: None,
      TreasureCellImagePath: None,
    }
  }
}

impl Serialize for EventContentTreasureRoundExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentTreasureRoundExcel", 9)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("TreasureRound", &self.TreasureRound())?;
      if let Some(f) = self.TreasureRoundSize() {
        s.serialize_field("TreasureRoundSize", &f)?;
      } else {
        s.skip_field("TreasureRoundSize")?;
      }
      s.serialize_field("CellVisualSortUnstructed", &self.CellVisualSortUnstructed())?;
      s.serialize_field("CellCheckGoodsId", &self.CellCheckGoodsId())?;
      s.serialize_field("CellRewardId", &self.CellRewardId())?;
      if let Some(f) = self.RewardID() {
        s.serialize_field("RewardID", &f)?;
      } else {
        s.skip_field("RewardID")?;
      }
      if let Some(f) = self.RewardAmount() {
        s.serialize_field("RewardAmount", &f)?;
      } else {
        s.skip_field("RewardAmount")?;
      }
      if let Some(f) = self.TreasureCellImagePath() {
        s.serialize_field("TreasureCellImagePath", &f)?;
      } else {
        s.skip_field("TreasureCellImagePath")?;
      }
    s.end()
  }
}

pub struct EventContentTreasureRoundExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentTreasureRoundExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentTreasureRoundExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_TreasureRound(&mut self, TreasureRound: i32) {
    self.fbb_.push_slot::<i32>(EventContentTreasureRoundExcel::VT_TREASUREROUND, TreasureRound, 0);
  }
  #[inline]
  pub fn add_TreasureRoundSize(&mut self, TreasureRoundSize: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRoundExcel::VT_TREASUREROUNDSIZE, TreasureRoundSize);
  }
  #[inline]
  pub fn add_CellVisualSortUnstructed(&mut self, CellVisualSortUnstructed: bool) {
    self.fbb_.push_slot::<bool>(EventContentTreasureRoundExcel::VT_CELLVISUALSORTUNSTRUCTED, CellVisualSortUnstructed, false);
  }
  #[inline]
  pub fn add_CellCheckGoodsId(&mut self, CellCheckGoodsId: i64) {
    self.fbb_.push_slot::<i64>(EventContentTreasureRoundExcel::VT_CELLCHECKGOODSID, CellCheckGoodsId, 0);
  }
  #[inline]
  pub fn add_CellRewardId(&mut self, CellRewardId: i64) {
    self.fbb_.push_slot::<i64>(EventContentTreasureRoundExcel::VT_CELLREWARDID, CellRewardId, 0);
  }
  #[inline]
  pub fn add_RewardID(&mut self, RewardID: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRoundExcel::VT_REWARDID, RewardID);
  }
  #[inline]
  pub fn add_RewardAmount(&mut self, RewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRoundExcel::VT_REWARDAMOUNT, RewardAmount);
  }
  #[inline]
  pub fn add_TreasureCellImagePath(&mut self, TreasureCellImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentTreasureRoundExcel::VT_TREASURECELLIMAGEPATH, TreasureCellImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentTreasureRoundExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentTreasureRoundExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentTreasureRoundExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentTreasureRoundExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentTreasureRoundExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("TreasureRound", &self.TreasureRound());
      ds.field("TreasureRoundSize", &self.TreasureRoundSize());
      ds.field("CellVisualSortUnstructed", &self.CellVisualSortUnstructed());
      ds.field("CellCheckGoodsId", &self.CellCheckGoodsId());
      ds.field("CellRewardId", &self.CellRewardId());
      ds.field("RewardID", &self.RewardID());
      ds.field("RewardAmount", &self.RewardAmount());
      ds.field("TreasureCellImagePath", &self.TreasureCellImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentTreasureRoundExcelT {
  pub EventContentId: i64,
  pub TreasureRound: i32,
  pub TreasureRoundSize: Option<Vec<i32>>,
  pub CellVisualSortUnstructed: bool,
  pub CellCheckGoodsId: i64,
  pub CellRewardId: i64,
  pub RewardID: Option<Vec<i64>>,
  pub RewardAmount: Option<Vec<i32>>,
  pub TreasureCellImagePath: Option<String>,
}
impl Default for EventContentTreasureRoundExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      TreasureRound: 0,
      TreasureRoundSize: None,
      CellVisualSortUnstructed: false,
      CellCheckGoodsId: 0,
      CellRewardId: 0,
      RewardID: None,
      RewardAmount: None,
      TreasureCellImagePath: None,
    }
  }
}
impl EventContentTreasureRoundExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentTreasureRoundExcel<'b>> {
    let EventContentId = self.EventContentId;
    let TreasureRound = self.TreasureRound;
    let TreasureRoundSize = self.TreasureRoundSize.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CellVisualSortUnstructed = self.CellVisualSortUnstructed;
    let CellCheckGoodsId = self.CellCheckGoodsId;
    let CellRewardId = self.CellRewardId;
    let RewardID = self.RewardID.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardAmount = self.RewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let TreasureCellImagePath = self.TreasureCellImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentTreasureRoundExcel::create(_fbb, &EventContentTreasureRoundExcelArgs{
      EventContentId,
      TreasureRound,
      TreasureRoundSize,
      CellVisualSortUnstructed,
      CellCheckGoodsId,
      CellRewardId,
      RewardID,
      RewardAmount,
      TreasureCellImagePath,
    })
  }
}
