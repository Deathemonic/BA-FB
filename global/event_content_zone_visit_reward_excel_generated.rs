// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentZoneVisitRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentZoneVisitRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentZoneVisitRewardExcel<'a> {
  type Inner = EventContentZoneVisitRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentZoneVisitRewardExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTLOCATIONID: flatbuffers::VOffsetT = 6;
  pub const VT_DEVNAME: flatbuffers::VOffsetT = 8;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 10;
  pub const VT_CHARACTERDEVNAME: flatbuffers::VOffsetT = 12;
  pub const VT_VISITREWARDPARCELTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_VISITREWARDPARCELID: flatbuffers::VOffsetT = 16;
  pub const VT_VISITREWARDAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_VISITREWARDPROB: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentZoneVisitRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentZoneVisitRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentZoneVisitRewardExcel<'bldr>> {
    let mut builder = EventContentZoneVisitRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentZoneVisitReward");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.EventContentLocationId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentLocationId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.visitRewardProb {
        builder.add_visitRewardProb(x);
      }
      if let Some(x) = args.visitRewardAmount {
        builder.add_visitRewardAmount(x);
      }
      if let Some(x) = args.visitRewardParcelId {
        builder.add_visitRewardParcelId(x);
      }
      if let Some(x) = args.visitRewardParcelType {
        builder.add_visitRewardParcelType(x);
      }
      if let Some(x) = args.CharacterDevName {
        builder.add_CharacterDevName(x);
      }
      if let Some(x) = args.DevName {
        builder.add_DevName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentZoneVisitRewardExcelT {
    let key = table_encryption_service::create_key(b"EventContentZoneVisitReward");
      let EventContentId = self.EventContentId();
      let EventContentLocationId = self.EventContentLocationId();
    let DevName = self.DevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let CharacterId = self.CharacterId();
    let CharacterDevName = self.CharacterDevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let visitRewardParcelType = self.visitRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let visitRewardParcelId = self.visitRewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let visitRewardAmount = self.visitRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let visitRewardProb = self.visitRewardProb().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EventContentZoneVisitRewardExcelT {
      EventContentId,
      EventContentLocationId,
      DevName,
      CharacterId,
      CharacterDevName,
      visitRewardParcelType,
      visitRewardParcelId,
      visitRewardAmount,
      visitRewardProb,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneVisitRewardExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentLocationId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneVisitRewardExcel::VT_EVENTCONTENTLOCATIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentZoneVisitRewardExcel::VT_DEVNAME, None)}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneVisitRewardExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterDevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentZoneVisitRewardExcel::VT_CHARACTERDEVNAME, None)}
  }
  #[inline]
  pub fn visitRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn visitRewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDPARCELID, None)}
  }
  #[inline]
  pub fn visitRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDAMOUNT, None)}
  }
  #[inline]
  pub fn visitRewardProb(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDPROB, None)}
  }
}

impl flatbuffers::Verifiable for EventContentZoneVisitRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("EventContentLocationId", Self::VT_EVENTCONTENTLOCATIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DevName", Self::VT_DEVNAME, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterDevName", Self::VT_CHARACTERDEVNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("visitRewardParcelType", Self::VT_VISITREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("visitRewardParcelId", Self::VT_VISITREWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("visitRewardAmount", Self::VT_VISITREWARDAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("visitRewardProb", Self::VT_VISITREWARDPROB, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentZoneVisitRewardExcelArgs<'a> {
    pub EventContentId: i64,
    pub EventContentLocationId: i64,
    pub DevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterId: i64,
    pub CharacterDevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub visitRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub visitRewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub visitRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub visitRewardProb: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EventContentZoneVisitRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentZoneVisitRewardExcelArgs {
      EventContentId: 0,
      EventContentLocationId: 0,
      DevName: None,
      CharacterId: 0,
      CharacterDevName: None,
      visitRewardParcelType: None,
      visitRewardParcelId: None,
      visitRewardAmount: None,
      visitRewardProb: None,
    }
  }
}

impl Serialize for EventContentZoneVisitRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentZoneVisitRewardExcel", 9)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventContentLocationId", &self.EventContentLocationId())?;
      if let Some(f) = self.DevName() {
        s.serialize_field("DevName", &f)?;
      } else {
        s.skip_field("DevName")?;
      }
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.CharacterDevName() {
        s.serialize_field("CharacterDevName", &f)?;
      } else {
        s.skip_field("CharacterDevName")?;
      }
      if let Some(f) = self.visitRewardParcelType() {
        s.serialize_field("visitRewardParcelType", &f)?;
      } else {
        s.skip_field("visitRewardParcelType")?;
      }
      if let Some(f) = self.visitRewardParcelId() {
        s.serialize_field("visitRewardParcelId", &f)?;
      } else {
        s.skip_field("visitRewardParcelId")?;
      }
      if let Some(f) = self.visitRewardAmount() {
        s.serialize_field("visitRewardAmount", &f)?;
      } else {
        s.skip_field("visitRewardAmount")?;
      }
      if let Some(f) = self.visitRewardProb() {
        s.serialize_field("visitRewardProb", &f)?;
      } else {
        s.skip_field("visitRewardProb")?;
      }
    s.end()
  }
}

pub struct EventContentZoneVisitRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentZoneVisitRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneVisitRewardExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventContentLocationId(&mut self, EventContentLocationId: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneVisitRewardExcel::VT_EVENTCONTENTLOCATIONID, EventContentLocationId, 0);
  }
  #[inline]
  pub fn add_DevName(&mut self, DevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneVisitRewardExcel::VT_DEVNAME, DevName);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneVisitRewardExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_CharacterDevName(&mut self, CharacterDevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneVisitRewardExcel::VT_CHARACTERDEVNAME, CharacterDevName);
  }
  #[inline]
  pub fn add_visitRewardParcelType(&mut self, visitRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDPARCELTYPE, visitRewardParcelType);
  }
  #[inline]
  pub fn add_visitRewardParcelId(&mut self, visitRewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDPARCELID, visitRewardParcelId);
  }
  #[inline]
  pub fn add_visitRewardAmount(&mut self, visitRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDAMOUNT, visitRewardAmount);
  }
  #[inline]
  pub fn add_visitRewardProb(&mut self, visitRewardProb: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneVisitRewardExcel::VT_VISITREWARDPROB, visitRewardProb);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentZoneVisitRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentZoneVisitRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentZoneVisitRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentZoneVisitRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentZoneVisitRewardExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventContentLocationId", &self.EventContentLocationId());
      ds.field("DevName", &self.DevName());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("CharacterDevName", &self.CharacterDevName());
      ds.field("visitRewardParcelType", &self.visitRewardParcelType());
      ds.field("visitRewardParcelId", &self.visitRewardParcelId());
      ds.field("visitRewardAmount", &self.visitRewardAmount());
      ds.field("visitRewardProb", &self.visitRewardProb());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentZoneVisitRewardExcelT {
  pub EventContentId: i64,
  pub EventContentLocationId: i64,
  pub DevName: Option<String>,
  pub CharacterId: i64,
  pub CharacterDevName: Option<String>,
  pub visitRewardParcelType: Option<Vec<ParcelType>>,
  pub visitRewardParcelId: Option<Vec<i64>>,
  pub visitRewardAmount: Option<Vec<i64>>,
  pub visitRewardProb: Option<Vec<i64>>,
}
impl Default for EventContentZoneVisitRewardExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventContentLocationId: 0,
      DevName: None,
      CharacterId: 0,
      CharacterDevName: None,
      visitRewardParcelType: None,
      visitRewardParcelId: None,
      visitRewardAmount: None,
      visitRewardProb: None,
    }
  }
}
impl EventContentZoneVisitRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentZoneVisitRewardExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventContentLocationId = self.EventContentLocationId;
    let DevName = self.DevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterId = self.CharacterId;
    let CharacterDevName = self.CharacterDevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let visitRewardParcelType = self.visitRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let visitRewardParcelId = self.visitRewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let visitRewardAmount = self.visitRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let visitRewardProb = self.visitRewardProb.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentZoneVisitRewardExcel::create(_fbb, &EventContentZoneVisitRewardExcelArgs{
      EventContentId,
      EventContentLocationId,
      DevName,
      CharacterId,
      CharacterDevName,
      visitRewardParcelType,
      visitRewardParcelId,
      visitRewardAmount,
      visitRewardProb,
    })
  }
}
