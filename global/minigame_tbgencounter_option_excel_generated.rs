// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGEncounterOptionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGEncounterOptionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGEncounterOptionExcel<'a> {
  type Inner = MinigameTBGEncounterOptionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGEncounterOptionExcel<'a> {
  pub const VT_OPTIONGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_SLOTINDEX: flatbuffers::VOffsetT = 8;
  pub const VT_OPTIONTITLELOCALIZE: flatbuffers::VOffsetT = 10;
  pub const VT_OPTIONSUCCESSLOCALIZE: flatbuffers::VOffsetT = 12;
  pub const VT_OPTIONSUCCESSREWARDGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_OPTIONSUCCESSORHIGHERDICECOUNT: flatbuffers::VOffsetT = 16;
  pub const VT_OPTIONGREATSUCCESSORHIGHERDICECOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_OPTIONFAILLOCALIZE: flatbuffers::VOffsetT = 20;
  pub const VT_OPTIONFAILLESSDICECOUNT: flatbuffers::VOffsetT = 22;
  pub const VT_RUNAWAYORHIGHERDICECOUNT: flatbuffers::VOffsetT = 24;
  pub const VT_REWARDHIDE: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGEncounterOptionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGEncounterOptionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameTBGEncounterOptionExcel<'bldr>> {
    let mut builder = MinigameTBGEncounterOptionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGEncounterOption");
      let x = args.OptionSuccessRewardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OptionSuccessRewardGroupId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.OptionGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OptionGroupId(x);
      let x = args.RunawayOrHigherDiceCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RunawayOrHigherDiceCount(x);
      let x = args.OptionFailLessDiceCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_OptionFailLessDiceCount(x);
      if let Some(x) = args.OptionFailLocalize {
        builder.add_OptionFailLocalize(x);
      }
      let x = args.OptionGreatSuccessOrHigherDiceCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_OptionGreatSuccessOrHigherDiceCount(x);
      let x = args.OptionSuccessOrHigherDiceCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_OptionSuccessOrHigherDiceCount(x);
      if let Some(x) = args.OptionSuccessLocalize {
        builder.add_OptionSuccessLocalize(x);
      }
      if let Some(x) = args.OptionTitleLocalize {
        builder.add_OptionTitleLocalize(x);
      }
      let x = args.SlotIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SlotIndex(x);
      builder.add_RewardHide(args.RewardHide);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGEncounterOptionExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGEncounterOption");
      let OptionGroupId = self.OptionGroupId();
      let UniqueId = self.UniqueId();
      let SlotIndex = self.SlotIndex();
    let OptionTitleLocalize = self.OptionTitleLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let OptionSuccessLocalize = self.OptionSuccessLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let OptionSuccessRewardGroupId = self.OptionSuccessRewardGroupId();
      let OptionSuccessOrHigherDiceCount = self.OptionSuccessOrHigherDiceCount();
      let OptionGreatSuccessOrHigherDiceCount = self.OptionGreatSuccessOrHigherDiceCount();
    let OptionFailLocalize = self.OptionFailLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let OptionFailLessDiceCount = self.OptionFailLessDiceCount();
      let RunawayOrHigherDiceCount = self.RunawayOrHigherDiceCount();
      let RewardHide = self.RewardHide();
    MinigameTBGEncounterOptionExcelT {
      OptionGroupId,
      UniqueId,
      SlotIndex,
      OptionTitleLocalize,
      OptionSuccessLocalize,
      OptionSuccessRewardGroupId,
      OptionSuccessOrHigherDiceCount,
      OptionGreatSuccessOrHigherDiceCount,
      OptionFailLocalize,
      OptionFailLessDiceCount,
      RunawayOrHigherDiceCount,
      RewardHide,
    }
  }

  #[inline]
  pub fn OptionGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterOptionExcel::VT_OPTIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterOptionExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SlotIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGEncounterOptionExcel::VT_SLOTINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OptionTitleLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterOptionExcel::VT_OPTIONTITLELOCALIZE, None)}
  }
  #[inline]
  pub fn OptionSuccessLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterOptionExcel::VT_OPTIONSUCCESSLOCALIZE, None)}
  }
  #[inline]
  pub fn OptionSuccessRewardGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGEncounterOptionExcel::VT_OPTIONSUCCESSREWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OptionSuccessOrHigherDiceCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGEncounterOptionExcel::VT_OPTIONSUCCESSORHIGHERDICECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OptionGreatSuccessOrHigherDiceCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGEncounterOptionExcel::VT_OPTIONGREATSUCCESSORHIGHERDICECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OptionFailLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGEncounterOptionExcel::VT_OPTIONFAILLOCALIZE, None)}
  }
  #[inline]
  pub fn OptionFailLessDiceCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGEncounterOptionExcel::VT_OPTIONFAILLESSDICECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RunawayOrHigherDiceCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGEncounterOptionExcel::VT_RUNAWAYORHIGHERDICECOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardHide(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameTBGEncounterOptionExcel::VT_REWARDHIDE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameTBGEncounterOptionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("OptionGroupId", Self::VT_OPTIONGROUPID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i32>("SlotIndex", Self::VT_SLOTINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OptionTitleLocalize", Self::VT_OPTIONTITLELOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OptionSuccessLocalize", Self::VT_OPTIONSUCCESSLOCALIZE, false)?
     .visit_field::<i64>("OptionSuccessRewardGroupId", Self::VT_OPTIONSUCCESSREWARDGROUPID, false)?
     .visit_field::<i32>("OptionSuccessOrHigherDiceCount", Self::VT_OPTIONSUCCESSORHIGHERDICECOUNT, false)?
     .visit_field::<i32>("OptionGreatSuccessOrHigherDiceCount", Self::VT_OPTIONGREATSUCCESSORHIGHERDICECOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("OptionFailLocalize", Self::VT_OPTIONFAILLOCALIZE, false)?
     .visit_field::<i32>("OptionFailLessDiceCount", Self::VT_OPTIONFAILLESSDICECOUNT, false)?
     .visit_field::<i32>("RunawayOrHigherDiceCount", Self::VT_RUNAWAYORHIGHERDICECOUNT, false)?
     .visit_field::<bool>("RewardHide", Self::VT_REWARDHIDE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGEncounterOptionExcelArgs<'a> {
    pub OptionGroupId: i64,
    pub UniqueId: i64,
    pub SlotIndex: i32,
    pub OptionTitleLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OptionSuccessLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OptionSuccessRewardGroupId: i64,
    pub OptionSuccessOrHigherDiceCount: i32,
    pub OptionGreatSuccessOrHigherDiceCount: i32,
    pub OptionFailLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OptionFailLessDiceCount: i32,
    pub RunawayOrHigherDiceCount: i32,
    pub RewardHide: bool,
}
impl<'a> Default for MinigameTBGEncounterOptionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameTBGEncounterOptionExcelArgs {
      OptionGroupId: 0,
      UniqueId: 0,
      SlotIndex: 0,
      OptionTitleLocalize: None,
      OptionSuccessLocalize: None,
      OptionSuccessRewardGroupId: 0,
      OptionSuccessOrHigherDiceCount: 0,
      OptionGreatSuccessOrHigherDiceCount: 0,
      OptionFailLocalize: None,
      OptionFailLessDiceCount: 0,
      RunawayOrHigherDiceCount: 0,
      RewardHide: false,
    }
  }
}

impl Serialize for MinigameTBGEncounterOptionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGEncounterOptionExcel", 12)?;
      s.serialize_field("OptionGroupId", &self.OptionGroupId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("SlotIndex", &self.SlotIndex())?;
      if let Some(f) = self.OptionTitleLocalize() {
        s.serialize_field("OptionTitleLocalize", &f)?;
      } else {
        s.skip_field("OptionTitleLocalize")?;
      }
      if let Some(f) = self.OptionSuccessLocalize() {
        s.serialize_field("OptionSuccessLocalize", &f)?;
      } else {
        s.skip_field("OptionSuccessLocalize")?;
      }
      s.serialize_field("OptionSuccessRewardGroupId", &self.OptionSuccessRewardGroupId())?;
      s.serialize_field("OptionSuccessOrHigherDiceCount", &self.OptionSuccessOrHigherDiceCount())?;
      s.serialize_field("OptionGreatSuccessOrHigherDiceCount", &self.OptionGreatSuccessOrHigherDiceCount())?;
      if let Some(f) = self.OptionFailLocalize() {
        s.serialize_field("OptionFailLocalize", &f)?;
      } else {
        s.skip_field("OptionFailLocalize")?;
      }
      s.serialize_field("OptionFailLessDiceCount", &self.OptionFailLessDiceCount())?;
      s.serialize_field("RunawayOrHigherDiceCount", &self.RunawayOrHigherDiceCount())?;
      s.serialize_field("RewardHide", &self.RewardHide())?;
    s.end()
  }
}

pub struct MinigameTBGEncounterOptionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGEncounterOptionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_OptionGroupId(&mut self, OptionGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterOptionExcel::VT_OPTIONGROUPID, OptionGroupId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterOptionExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_SlotIndex(&mut self, SlotIndex: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGEncounterOptionExcel::VT_SLOTINDEX, SlotIndex, 0);
  }
  #[inline]
  pub fn add_OptionTitleLocalize(&mut self, OptionTitleLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterOptionExcel::VT_OPTIONTITLELOCALIZE, OptionTitleLocalize);
  }
  #[inline]
  pub fn add_OptionSuccessLocalize(&mut self, OptionSuccessLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterOptionExcel::VT_OPTIONSUCCESSLOCALIZE, OptionSuccessLocalize);
  }
  #[inline]
  pub fn add_OptionSuccessRewardGroupId(&mut self, OptionSuccessRewardGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGEncounterOptionExcel::VT_OPTIONSUCCESSREWARDGROUPID, OptionSuccessRewardGroupId, 0);
  }
  #[inline]
  pub fn add_OptionSuccessOrHigherDiceCount(&mut self, OptionSuccessOrHigherDiceCount: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGEncounterOptionExcel::VT_OPTIONSUCCESSORHIGHERDICECOUNT, OptionSuccessOrHigherDiceCount, 0);
  }
  #[inline]
  pub fn add_OptionGreatSuccessOrHigherDiceCount(&mut self, OptionGreatSuccessOrHigherDiceCount: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGEncounterOptionExcel::VT_OPTIONGREATSUCCESSORHIGHERDICECOUNT, OptionGreatSuccessOrHigherDiceCount, 0);
  }
  #[inline]
  pub fn add_OptionFailLocalize(&mut self, OptionFailLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGEncounterOptionExcel::VT_OPTIONFAILLOCALIZE, OptionFailLocalize);
  }
  #[inline]
  pub fn add_OptionFailLessDiceCount(&mut self, OptionFailLessDiceCount: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGEncounterOptionExcel::VT_OPTIONFAILLESSDICECOUNT, OptionFailLessDiceCount, 0);
  }
  #[inline]
  pub fn add_RunawayOrHigherDiceCount(&mut self, RunawayOrHigherDiceCount: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGEncounterOptionExcel::VT_RUNAWAYORHIGHERDICECOUNT, RunawayOrHigherDiceCount, 0);
  }
  #[inline]
  pub fn add_RewardHide(&mut self, RewardHide: bool) {
    self.fbb_.push_slot::<bool>(MinigameTBGEncounterOptionExcel::VT_REWARDHIDE, RewardHide, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGEncounterOptionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGEncounterOptionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGEncounterOptionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGEncounterOptionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGEncounterOptionExcel");
      ds.field("OptionGroupId", &self.OptionGroupId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("SlotIndex", &self.SlotIndex());
      ds.field("OptionTitleLocalize", &self.OptionTitleLocalize());
      ds.field("OptionSuccessLocalize", &self.OptionSuccessLocalize());
      ds.field("OptionSuccessRewardGroupId", &self.OptionSuccessRewardGroupId());
      ds.field("OptionSuccessOrHigherDiceCount", &self.OptionSuccessOrHigherDiceCount());
      ds.field("OptionGreatSuccessOrHigherDiceCount", &self.OptionGreatSuccessOrHigherDiceCount());
      ds.field("OptionFailLocalize", &self.OptionFailLocalize());
      ds.field("OptionFailLessDiceCount", &self.OptionFailLessDiceCount());
      ds.field("RunawayOrHigherDiceCount", &self.RunawayOrHigherDiceCount());
      ds.field("RewardHide", &self.RewardHide());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGEncounterOptionExcelT {
  pub OptionGroupId: i64,
  pub UniqueId: i64,
  pub SlotIndex: i32,
  pub OptionTitleLocalize: Option<String>,
  pub OptionSuccessLocalize: Option<String>,
  pub OptionSuccessRewardGroupId: i64,
  pub OptionSuccessOrHigherDiceCount: i32,
  pub OptionGreatSuccessOrHigherDiceCount: i32,
  pub OptionFailLocalize: Option<String>,
  pub OptionFailLessDiceCount: i32,
  pub RunawayOrHigherDiceCount: i32,
  pub RewardHide: bool,
}
impl Default for MinigameTBGEncounterOptionExcelT {
  fn default() -> Self {
    Self {
      OptionGroupId: 0,
      UniqueId: 0,
      SlotIndex: 0,
      OptionTitleLocalize: None,
      OptionSuccessLocalize: None,
      OptionSuccessRewardGroupId: 0,
      OptionSuccessOrHigherDiceCount: 0,
      OptionGreatSuccessOrHigherDiceCount: 0,
      OptionFailLocalize: None,
      OptionFailLessDiceCount: 0,
      RunawayOrHigherDiceCount: 0,
      RewardHide: false,
    }
  }
}
impl MinigameTBGEncounterOptionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGEncounterOptionExcel<'b>> {
    let OptionGroupId = self.OptionGroupId;
    let UniqueId = self.UniqueId;
    let SlotIndex = self.SlotIndex;
    let OptionTitleLocalize = self.OptionTitleLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OptionSuccessLocalize = self.OptionSuccessLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OptionSuccessRewardGroupId = self.OptionSuccessRewardGroupId;
    let OptionSuccessOrHigherDiceCount = self.OptionSuccessOrHigherDiceCount;
    let OptionGreatSuccessOrHigherDiceCount = self.OptionGreatSuccessOrHigherDiceCount;
    let OptionFailLocalize = self.OptionFailLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OptionFailLessDiceCount = self.OptionFailLessDiceCount;
    let RunawayOrHigherDiceCount = self.RunawayOrHigherDiceCount;
    let RewardHide = self.RewardHide;
    MinigameTBGEncounterOptionExcel::create(_fbb, &MinigameTBGEncounterOptionExcelArgs{
      OptionGroupId,
      UniqueId,
      SlotIndex,
      OptionTitleLocalize,
      OptionSuccessLocalize,
      OptionSuccessRewardGroupId,
      OptionSuccessOrHigherDiceCount,
      OptionGreatSuccessOrHigherDiceCount,
      OptionFailLocalize,
      OptionFailLessDiceCount,
      RunawayOrHigherDiceCount,
      RewardHide,
    })
  }
}
