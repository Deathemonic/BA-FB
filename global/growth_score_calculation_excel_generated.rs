// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GrowthScoreCalculationExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GrowthScoreCalculationExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GrowthScoreCalculationExcel<'a> {
  type Inner = GrowthScoreCalculationExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GrowthScoreCalculationExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_INCLUDEGROWTHFACTOR: flatbuffers::VOffsetT = 6;
  pub const VT_CONVERSIONCOEFFICIENT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GrowthScoreCalculationExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GrowthScoreCalculationExcelArgs
  ) -> flatbuffers::WIPOffset<GrowthScoreCalculationExcel<'bldr>> {
    let mut builder = GrowthScoreCalculationExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GrowthScoreCalculation");
      let x = args.ConversionCoefficient;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConversionCoefficient(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.IncludeGrowthFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_IncludeGrowthFactor(x);
    builder.finish()
  }

  pub fn unpack(&self) -> GrowthScoreCalculationExcelT {
    let key = table_encryption_service::create_key(b"GrowthScoreCalculation");
      let Id = self.Id();
      let IncludeGrowthFactor = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.IncludeGrowthFactor(), &key)
      } else {
        self.IncludeGrowthFactor()
      };
      let ConversionCoefficient = self.ConversionCoefficient();
    GrowthScoreCalculationExcelT {
      Id,
      IncludeGrowthFactor,
      ConversionCoefficient,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GrowthScoreCalculationExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IncludeGrowthFactor(&self) -> GrowthFactor {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GrowthFactor>(GrowthScoreCalculationExcel::VT_INCLUDEGROWTHFACTOR, Some(GrowthFactor::CharacterLevel)).unwrap()}
  }
  #[inline]
  pub fn ConversionCoefficient(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GrowthScoreCalculationExcel::VT_CONVERSIONCOEFFICIENT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GrowthScoreCalculationExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<GrowthFactor>("IncludeGrowthFactor", Self::VT_INCLUDEGROWTHFACTOR, false)?
     .visit_field::<i64>("ConversionCoefficient", Self::VT_CONVERSIONCOEFFICIENT, false)?
     .finish();
    Ok(())
  }
}
pub struct GrowthScoreCalculationExcelArgs {
    pub Id: i64,
    pub IncludeGrowthFactor: GrowthFactor,
    pub ConversionCoefficient: i64,
}
impl<'a> Default for GrowthScoreCalculationExcelArgs {
  #[inline]
  fn default() -> Self {
    GrowthScoreCalculationExcelArgs {
      Id: 0,
      IncludeGrowthFactor: GrowthFactor::CharacterLevel,
      ConversionCoefficient: 0,
    }
  }
}

impl Serialize for GrowthScoreCalculationExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GrowthScoreCalculationExcel", 3)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("IncludeGrowthFactor", &self.IncludeGrowthFactor())?;
      s.serialize_field("ConversionCoefficient", &self.ConversionCoefficient())?;
    s.end()
  }
}

pub struct GrowthScoreCalculationExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GrowthScoreCalculationExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(GrowthScoreCalculationExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_IncludeGrowthFactor(&mut self, IncludeGrowthFactor: GrowthFactor) {
    self.fbb_.push_slot::<GrowthFactor>(GrowthScoreCalculationExcel::VT_INCLUDEGROWTHFACTOR, IncludeGrowthFactor, GrowthFactor::CharacterLevel);
  }
  #[inline]
  pub fn add_ConversionCoefficient(&mut self, ConversionCoefficient: i64) {
    self.fbb_.push_slot::<i64>(GrowthScoreCalculationExcel::VT_CONVERSIONCOEFFICIENT, ConversionCoefficient, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GrowthScoreCalculationExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GrowthScoreCalculationExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GrowthScoreCalculationExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GrowthScoreCalculationExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GrowthScoreCalculationExcel");
      ds.field("Id", &self.Id());
      ds.field("IncludeGrowthFactor", &self.IncludeGrowthFactor());
      ds.field("ConversionCoefficient", &self.ConversionCoefficient());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GrowthScoreCalculationExcelT {
  pub Id: i64,
  pub IncludeGrowthFactor: GrowthFactor,
  pub ConversionCoefficient: i64,
}
impl Default for GrowthScoreCalculationExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      IncludeGrowthFactor: GrowthFactor::CharacterLevel,
      ConversionCoefficient: 0,
    }
  }
}
impl GrowthScoreCalculationExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GrowthScoreCalculationExcel<'b>> {
    let Id = self.Id;
    let IncludeGrowthFactor = self.IncludeGrowthFactor;
    let ConversionCoefficient = self.ConversionCoefficient;
    GrowthScoreCalculationExcel::create(_fbb, &GrowthScoreCalculationExcelArgs{
      Id,
      IncludeGrowthFactor,
      ConversionCoefficient,
    })
  }
}
