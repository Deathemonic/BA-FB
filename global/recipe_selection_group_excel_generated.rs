// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RecipeSelectionGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RecipeSelectionGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RecipeSelectionGroupExcel<'a> {
  type Inner = RecipeSelectionGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RecipeSelectionGroupExcel<'a> {
  pub const VT_RECIPESELECTIONGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_RECIPESELECTIONGROUPCOMPONENTID: flatbuffers::VOffsetT = 6;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_RESULTAMOUNTMIN: flatbuffers::VOffsetT = 12;
  pub const VT_RESULTAMOUNTMAX: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RecipeSelectionGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RecipeSelectionGroupExcelArgs
  ) -> flatbuffers::WIPOffset<RecipeSelectionGroupExcel<'bldr>> {
    let mut builder = RecipeSelectionGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"RecipeSelectionGroup");
      let x = args.ResultAmountMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultAmountMax(x);
      let x = args.ResultAmountMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ResultAmountMin(x);
      let x = args.ParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelId(x);
      let x = args.RecipeSelectionGroupComponentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecipeSelectionGroupComponentId(x);
      let x = args.RecipeSelectionGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecipeSelectionGroupId(x);
      let x = args.ParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> RecipeSelectionGroupExcelT {
    let key = table_encryption_service::create_key(b"RecipeSelectionGroup");
      let RecipeSelectionGroupId = self.RecipeSelectionGroupId();
      let RecipeSelectionGroupComponentId = self.RecipeSelectionGroupComponentId();
      let ParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParcelType(), &key)
      } else {
        self.ParcelType()
      };
      let ParcelId = self.ParcelId();
      let ResultAmountMin = self.ResultAmountMin();
      let ResultAmountMax = self.ResultAmountMax();
    RecipeSelectionGroupExcelT {
      RecipeSelectionGroupId,
      RecipeSelectionGroupComponentId,
      ParcelType,
      ParcelId,
      ResultAmountMin,
      ResultAmountMax,
    }
  }

  #[inline]
  pub fn RecipeSelectionGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeSelectionGroupExcel::VT_RECIPESELECTIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeSelectionGroupComponentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeSelectionGroupExcel::VT_RECIPESELECTIONGROUPCOMPONENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(RecipeSelectionGroupExcel::VT_PARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeSelectionGroupExcel::VT_PARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResultAmountMin(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeSelectionGroupExcel::VT_RESULTAMOUNTMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResultAmountMax(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RecipeSelectionGroupExcel::VT_RESULTAMOUNTMAX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for RecipeSelectionGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("RecipeSelectionGroupId", Self::VT_RECIPESELECTIONGROUPID, false)?
     .visit_field::<i64>("RecipeSelectionGroupComponentId", Self::VT_RECIPESELECTIONGROUPCOMPONENTID, false)?
     .visit_field::<ParcelType>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<i64>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<i64>("ResultAmountMin", Self::VT_RESULTAMOUNTMIN, false)?
     .visit_field::<i64>("ResultAmountMax", Self::VT_RESULTAMOUNTMAX, false)?
     .finish();
    Ok(())
  }
}
pub struct RecipeSelectionGroupExcelArgs {
    pub RecipeSelectionGroupId: i64,
    pub RecipeSelectionGroupComponentId: i64,
    pub ParcelType: ParcelType,
    pub ParcelId: i64,
    pub ResultAmountMin: i64,
    pub ResultAmountMax: i64,
}
impl<'a> Default for RecipeSelectionGroupExcelArgs {
  #[inline]
  fn default() -> Self {
    RecipeSelectionGroupExcelArgs {
      RecipeSelectionGroupId: 0,
      RecipeSelectionGroupComponentId: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      ResultAmountMin: 0,
      ResultAmountMax: 0,
    }
  }
}

impl Serialize for RecipeSelectionGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RecipeSelectionGroupExcel", 6)?;
      s.serialize_field("RecipeSelectionGroupId", &self.RecipeSelectionGroupId())?;
      s.serialize_field("RecipeSelectionGroupComponentId", &self.RecipeSelectionGroupComponentId())?;
      s.serialize_field("ParcelType", &self.ParcelType())?;
      s.serialize_field("ParcelId", &self.ParcelId())?;
      s.serialize_field("ResultAmountMin", &self.ResultAmountMin())?;
      s.serialize_field("ResultAmountMax", &self.ResultAmountMax())?;
    s.end()
  }
}

pub struct RecipeSelectionGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RecipeSelectionGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_RecipeSelectionGroupId(&mut self, RecipeSelectionGroupId: i64) {
    self.fbb_.push_slot::<i64>(RecipeSelectionGroupExcel::VT_RECIPESELECTIONGROUPID, RecipeSelectionGroupId, 0);
  }
  #[inline]
  pub fn add_RecipeSelectionGroupComponentId(&mut self, RecipeSelectionGroupComponentId: i64) {
    self.fbb_.push_slot::<i64>(RecipeSelectionGroupExcel::VT_RECIPESELECTIONGROUPCOMPONENTID, RecipeSelectionGroupComponentId, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(RecipeSelectionGroupExcel::VT_PARCELTYPE, ParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: i64) {
    self.fbb_.push_slot::<i64>(RecipeSelectionGroupExcel::VT_PARCELID, ParcelId, 0);
  }
  #[inline]
  pub fn add_ResultAmountMin(&mut self, ResultAmountMin: i64) {
    self.fbb_.push_slot::<i64>(RecipeSelectionGroupExcel::VT_RESULTAMOUNTMIN, ResultAmountMin, 0);
  }
  #[inline]
  pub fn add_ResultAmountMax(&mut self, ResultAmountMax: i64) {
    self.fbb_.push_slot::<i64>(RecipeSelectionGroupExcel::VT_RESULTAMOUNTMAX, ResultAmountMax, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RecipeSelectionGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RecipeSelectionGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RecipeSelectionGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RecipeSelectionGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RecipeSelectionGroupExcel");
      ds.field("RecipeSelectionGroupId", &self.RecipeSelectionGroupId());
      ds.field("RecipeSelectionGroupComponentId", &self.RecipeSelectionGroupComponentId());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("ResultAmountMin", &self.ResultAmountMin());
      ds.field("ResultAmountMax", &self.ResultAmountMax());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RecipeSelectionGroupExcelT {
  pub RecipeSelectionGroupId: i64,
  pub RecipeSelectionGroupComponentId: i64,
  pub ParcelType: ParcelType,
  pub ParcelId: i64,
  pub ResultAmountMin: i64,
  pub ResultAmountMax: i64,
}
impl Default for RecipeSelectionGroupExcelT {
  fn default() -> Self {
    Self {
      RecipeSelectionGroupId: 0,
      RecipeSelectionGroupComponentId: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      ResultAmountMin: 0,
      ResultAmountMax: 0,
    }
  }
}
impl RecipeSelectionGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RecipeSelectionGroupExcel<'b>> {
    let RecipeSelectionGroupId = self.RecipeSelectionGroupId;
    let RecipeSelectionGroupComponentId = self.RecipeSelectionGroupComponentId;
    let ParcelType = self.ParcelType;
    let ParcelId = self.ParcelId;
    let ResultAmountMin = self.ResultAmountMin;
    let ResultAmountMax = self.ResultAmountMax;
    RecipeSelectionGroupExcel::create(_fbb, &RecipeSelectionGroupExcelArgs{
      RecipeSelectionGroupId,
      RecipeSelectionGroupComponentId,
      ParcelType,
      ParcelId,
      ResultAmountMin,
      ResultAmountMax,
    })
  }
}
