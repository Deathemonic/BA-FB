// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_OPEN_CONDITION_CONTENT: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_OPEN_CONDITION_CONTENT: i32 = 57;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_OPEN_CONDITION_CONTENT: [OpenConditionContent; 58] = [
  OpenConditionContent::Shop,
  OpenConditionContent::Gacha,
  OpenConditionContent::LobbyIllust,
  OpenConditionContent::Raid,
  OpenConditionContent::Cafe,
  OpenConditionContent::Unit_Growth_Skill,
  OpenConditionContent::Unit_Growth_LevelUp,
  OpenConditionContent::Unit_Growth_Transcendence,
  OpenConditionContent::Arena,
  OpenConditionContent::Academy,
  OpenConditionContent::Equip,
  OpenConditionContent::Item,
  OpenConditionContent::Favor,
  OpenConditionContent::Prologue,
  OpenConditionContent::Mission,
  OpenConditionContent::WeekDungeon_Chase,
  OpenConditionContent::__Deprecated_WeekDungeon_FindGift,
  OpenConditionContent::__Deprecated_WeekDungeon_Blood,
  OpenConditionContent::Story_Sub,
  OpenConditionContent::Story_Replay,
  OpenConditionContent::WeekDungeon,
  OpenConditionContent::None,
  OpenConditionContent::Shop_Gem,
  OpenConditionContent::Craft,
  OpenConditionContent::Student,
  OpenConditionContent::GuideMission,
  OpenConditionContent::Clan,
  OpenConditionContent::Echelon,
  OpenConditionContent::Campaign,
  OpenConditionContent::EventContent,
  OpenConditionContent::Guild,
  OpenConditionContent::EventStage_1,
  OpenConditionContent::EventStage_2,
  OpenConditionContent::Talk,
  OpenConditionContent::Billing,
  OpenConditionContent::Schedule,
  OpenConditionContent::Story,
  OpenConditionContent::Tactic_Speed,
  OpenConditionContent::Cafe_Invite,
  OpenConditionContent::EventMiniGame_1,
  OpenConditionContent::SchoolDungeon,
  OpenConditionContent::TimeAttackDungeon,
  OpenConditionContent::ShiftingCraft,
  OpenConditionContent::WorldRaid,
  OpenConditionContent::Tactic_Skip,
  OpenConditionContent::Mulligan,
  OpenConditionContent::EventPermanent,
  OpenConditionContent::Main_L_1_2,
  OpenConditionContent::Main_L_1_3,
  OpenConditionContent::Main_L_1_4,
  OpenConditionContent::EliminateRaid,
  OpenConditionContent::Cafe_2,
  OpenConditionContent::Cafe_Invite_2,
  OpenConditionContent::MultiFloorRaid,
  OpenConditionContent::StrategySkip,
  OpenConditionContent::MinigameDreamMaker,
  OpenConditionContent::MiniGameDefense,
  OpenConditionContent::MiniGameCCG,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OpenConditionContent(pub i32);
#[allow(non_upper_case_globals)]
impl OpenConditionContent {
  pub const Shop: Self = Self(0);
  pub const Gacha: Self = Self(1);
  pub const LobbyIllust: Self = Self(2);
  pub const Raid: Self = Self(3);
  pub const Cafe: Self = Self(4);
  pub const Unit_Growth_Skill: Self = Self(5);
  pub const Unit_Growth_LevelUp: Self = Self(6);
  pub const Unit_Growth_Transcendence: Self = Self(7);
  pub const Arena: Self = Self(8);
  pub const Academy: Self = Self(9);
  pub const Equip: Self = Self(10);
  pub const Item: Self = Self(11);
  pub const Favor: Self = Self(12);
  pub const Prologue: Self = Self(13);
  pub const Mission: Self = Self(14);
  pub const WeekDungeon_Chase: Self = Self(15);
  pub const __Deprecated_WeekDungeon_FindGift: Self = Self(16);
  pub const __Deprecated_WeekDungeon_Blood: Self = Self(17);
  pub const Story_Sub: Self = Self(18);
  pub const Story_Replay: Self = Self(19);
  pub const WeekDungeon: Self = Self(20);
  pub const None: Self = Self(21);
  pub const Shop_Gem: Self = Self(22);
  pub const Craft: Self = Self(23);
  pub const Student: Self = Self(24);
  pub const GuideMission: Self = Self(25);
  pub const Clan: Self = Self(26);
  pub const Echelon: Self = Self(27);
  pub const Campaign: Self = Self(28);
  pub const EventContent: Self = Self(29);
  pub const Guild: Self = Self(30);
  pub const EventStage_1: Self = Self(31);
  pub const EventStage_2: Self = Self(32);
  pub const Talk: Self = Self(33);
  pub const Billing: Self = Self(34);
  pub const Schedule: Self = Self(35);
  pub const Story: Self = Self(36);
  pub const Tactic_Speed: Self = Self(37);
  pub const Cafe_Invite: Self = Self(38);
  pub const EventMiniGame_1: Self = Self(39);
  pub const SchoolDungeon: Self = Self(40);
  pub const TimeAttackDungeon: Self = Self(41);
  pub const ShiftingCraft: Self = Self(42);
  pub const WorldRaid: Self = Self(43);
  pub const Tactic_Skip: Self = Self(44);
  pub const Mulligan: Self = Self(45);
  pub const EventPermanent: Self = Self(46);
  pub const Main_L_1_2: Self = Self(47);
  pub const Main_L_1_3: Self = Self(48);
  pub const Main_L_1_4: Self = Self(49);
  pub const EliminateRaid: Self = Self(50);
  pub const Cafe_2: Self = Self(51);
  pub const Cafe_Invite_2: Self = Self(52);
  pub const MultiFloorRaid: Self = Self(53);
  pub const StrategySkip: Self = Self(54);
  pub const MinigameDreamMaker: Self = Self(55);
  pub const MiniGameDefense: Self = Self(56);
  pub const MiniGameCCG: Self = Self(57);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 57;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Shop,
    Self::Gacha,
    Self::LobbyIllust,
    Self::Raid,
    Self::Cafe,
    Self::Unit_Growth_Skill,
    Self::Unit_Growth_LevelUp,
    Self::Unit_Growth_Transcendence,
    Self::Arena,
    Self::Academy,
    Self::Equip,
    Self::Item,
    Self::Favor,
    Self::Prologue,
    Self::Mission,
    Self::WeekDungeon_Chase,
    Self::__Deprecated_WeekDungeon_FindGift,
    Self::__Deprecated_WeekDungeon_Blood,
    Self::Story_Sub,
    Self::Story_Replay,
    Self::WeekDungeon,
    Self::None,
    Self::Shop_Gem,
    Self::Craft,
    Self::Student,
    Self::GuideMission,
    Self::Clan,
    Self::Echelon,
    Self::Campaign,
    Self::EventContent,
    Self::Guild,
    Self::EventStage_1,
    Self::EventStage_2,
    Self::Talk,
    Self::Billing,
    Self::Schedule,
    Self::Story,
    Self::Tactic_Speed,
    Self::Cafe_Invite,
    Self::EventMiniGame_1,
    Self::SchoolDungeon,
    Self::TimeAttackDungeon,
    Self::ShiftingCraft,
    Self::WorldRaid,
    Self::Tactic_Skip,
    Self::Mulligan,
    Self::EventPermanent,
    Self::Main_L_1_2,
    Self::Main_L_1_3,
    Self::Main_L_1_4,
    Self::EliminateRaid,
    Self::Cafe_2,
    Self::Cafe_Invite_2,
    Self::MultiFloorRaid,
    Self::StrategySkip,
    Self::MinigameDreamMaker,
    Self::MiniGameDefense,
    Self::MiniGameCCG,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Shop => Some("Shop"),
      Self::Gacha => Some("Gacha"),
      Self::LobbyIllust => Some("LobbyIllust"),
      Self::Raid => Some("Raid"),
      Self::Cafe => Some("Cafe"),
      Self::Unit_Growth_Skill => Some("Unit_Growth_Skill"),
      Self::Unit_Growth_LevelUp => Some("Unit_Growth_LevelUp"),
      Self::Unit_Growth_Transcendence => Some("Unit_Growth_Transcendence"),
      Self::Arena => Some("Arena"),
      Self::Academy => Some("Academy"),
      Self::Equip => Some("Equip"),
      Self::Item => Some("Item"),
      Self::Favor => Some("Favor"),
      Self::Prologue => Some("Prologue"),
      Self::Mission => Some("Mission"),
      Self::WeekDungeon_Chase => Some("WeekDungeon_Chase"),
      Self::__Deprecated_WeekDungeon_FindGift => Some("__Deprecated_WeekDungeon_FindGift"),
      Self::__Deprecated_WeekDungeon_Blood => Some("__Deprecated_WeekDungeon_Blood"),
      Self::Story_Sub => Some("Story_Sub"),
      Self::Story_Replay => Some("Story_Replay"),
      Self::WeekDungeon => Some("WeekDungeon"),
      Self::None => Some("None"),
      Self::Shop_Gem => Some("Shop_Gem"),
      Self::Craft => Some("Craft"),
      Self::Student => Some("Student"),
      Self::GuideMission => Some("GuideMission"),
      Self::Clan => Some("Clan"),
      Self::Echelon => Some("Echelon"),
      Self::Campaign => Some("Campaign"),
      Self::EventContent => Some("EventContent"),
      Self::Guild => Some("Guild"),
      Self::EventStage_1 => Some("EventStage_1"),
      Self::EventStage_2 => Some("EventStage_2"),
      Self::Talk => Some("Talk"),
      Self::Billing => Some("Billing"),
      Self::Schedule => Some("Schedule"),
      Self::Story => Some("Story"),
      Self::Tactic_Speed => Some("Tactic_Speed"),
      Self::Cafe_Invite => Some("Cafe_Invite"),
      Self::EventMiniGame_1 => Some("EventMiniGame_1"),
      Self::SchoolDungeon => Some("SchoolDungeon"),
      Self::TimeAttackDungeon => Some("TimeAttackDungeon"),
      Self::ShiftingCraft => Some("ShiftingCraft"),
      Self::WorldRaid => Some("WorldRaid"),
      Self::Tactic_Skip => Some("Tactic_Skip"),
      Self::Mulligan => Some("Mulligan"),
      Self::EventPermanent => Some("EventPermanent"),
      Self::Main_L_1_2 => Some("Main_L_1_2"),
      Self::Main_L_1_3 => Some("Main_L_1_3"),
      Self::Main_L_1_4 => Some("Main_L_1_4"),
      Self::EliminateRaid => Some("EliminateRaid"),
      Self::Cafe_2 => Some("Cafe_2"),
      Self::Cafe_Invite_2 => Some("Cafe_Invite_2"),
      Self::MultiFloorRaid => Some("MultiFloorRaid"),
      Self::StrategySkip => Some("StrategySkip"),
      Self::MinigameDreamMaker => Some("MinigameDreamMaker"),
      Self::MiniGameDefense => Some("MiniGameDefense"),
      Self::MiniGameCCG => Some("MiniGameCCG"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OpenConditionContent {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for OpenConditionContent {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("OpenConditionContent", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for OpenConditionContent {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OpenConditionContent {
    type Output = OpenConditionContent;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OpenConditionContent {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OpenConditionContent {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OpenConditionContent {}
