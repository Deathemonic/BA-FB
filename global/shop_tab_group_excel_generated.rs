// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopTabGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopTabGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopTabGroupExcel<'a> {
  type Inner = ShopTabGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopTabGroupExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SHOPGROUPTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_SHOPCATEGORYTYPES: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopTabGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopTabGroupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShopTabGroupExcel<'bldr>> {
    let mut builder = ShopTabGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShopTabGroup");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ShopCategoryTypes {
        builder.add_ShopCategoryTypes(x);
      }
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.ShopGroupType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ShopGroupType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ShopTabGroupExcelT {
    let key = table_encryption_service::create_key(b"ShopTabGroup");
      let Id = self.Id();
      let ShopGroupType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ShopGroupType(), &key)
      } else {
        self.ShopGroupType()
      };
      let DisplayOrder = self.DisplayOrder();
    let ShopCategoryTypes = self.ShopCategoryTypes().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    ShopTabGroupExcelT {
      Id,
      ShopGroupType,
      DisplayOrder,
      ShopCategoryTypes,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopTabGroupExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopGroupType(&self) -> ShopGroupType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopGroupType>(ShopTabGroupExcel::VT_SHOPGROUPTYPE, Some(ShopGroupType::None)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ShopTabGroupExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShopCategoryTypes(&self) -> Option<flatbuffers::Vector<'a, ShopCategoryType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ShopCategoryType>>>(ShopTabGroupExcel::VT_SHOPCATEGORYTYPES, None)}
  }
}

impl flatbuffers::Verifiable for ShopTabGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ShopGroupType>("ShopGroupType", Self::VT_SHOPGROUPTYPE, false)?
     .visit_field::<i32>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ShopCategoryType>>>("ShopCategoryTypes", Self::VT_SHOPCATEGORYTYPES, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopTabGroupExcelArgs<'a> {
    pub Id: i64,
    pub ShopGroupType: ShopGroupType,
    pub DisplayOrder: i32,
    pub ShopCategoryTypes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ShopCategoryType>>>,
}
impl<'a> Default for ShopTabGroupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShopTabGroupExcelArgs {
      Id: 0,
      ShopGroupType: ShopGroupType::None,
      DisplayOrder: 0,
      ShopCategoryTypes: None,
    }
  }
}

impl Serialize for ShopTabGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopTabGroupExcel", 4)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ShopGroupType", &self.ShopGroupType())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      if let Some(f) = self.ShopCategoryTypes() {
        s.serialize_field("ShopCategoryTypes", &f)?;
      } else {
        s.skip_field("ShopCategoryTypes")?;
      }
    s.end()
  }
}

pub struct ShopTabGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopTabGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ShopTabGroupExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ShopGroupType(&mut self, ShopGroupType: ShopGroupType) {
    self.fbb_.push_slot::<ShopGroupType>(ShopTabGroupExcel::VT_SHOPGROUPTYPE, ShopGroupType, ShopGroupType::None);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i32) {
    self.fbb_.push_slot::<i32>(ShopTabGroupExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_ShopCategoryTypes(&mut self, ShopCategoryTypes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ShopCategoryType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopTabGroupExcel::VT_SHOPCATEGORYTYPES, ShopCategoryTypes);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopTabGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopTabGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopTabGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopTabGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopTabGroupExcel");
      ds.field("Id", &self.Id());
      ds.field("ShopGroupType", &self.ShopGroupType());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("ShopCategoryTypes", &self.ShopCategoryTypes());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopTabGroupExcelT {
  pub Id: i64,
  pub ShopGroupType: ShopGroupType,
  pub DisplayOrder: i32,
  pub ShopCategoryTypes: Option<Vec<ShopCategoryType>>,
}
impl Default for ShopTabGroupExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ShopGroupType: ShopGroupType::None,
      DisplayOrder: 0,
      ShopCategoryTypes: None,
    }
  }
}
impl ShopTabGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopTabGroupExcel<'b>> {
    let Id = self.Id;
    let ShopGroupType = self.ShopGroupType;
    let DisplayOrder = self.DisplayOrder;
    let ShopCategoryTypes = self.ShopCategoryTypes.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    ShopTabGroupExcel::create(_fbb, &ShopTabGroupExcelArgs{
      Id,
      ShopGroupType,
      DisplayOrder,
      ShopCategoryTypes,
    })
  }
}
