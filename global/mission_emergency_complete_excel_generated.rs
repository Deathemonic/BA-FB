// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MissionEmergencyCompleteExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MissionEmergencyCompleteExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MissionEmergencyCompleteExcel<'a> {
  type Inner = MissionEmergencyCompleteExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MissionEmergencyCompleteExcel<'a> {
  pub const VT_MISSIONID: flatbuffers::VOffsetT = 4;
  pub const VT_EMERGENCYCOMPLETE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MissionEmergencyCompleteExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MissionEmergencyCompleteExcelArgs
  ) -> flatbuffers::WIPOffset<MissionEmergencyCompleteExcel<'bldr>> {
    let mut builder = MissionEmergencyCompleteExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MissionEmergencyComplete");
      let x = args.MissionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MissionId(x);
      builder.add_EmergencyComplete(args.EmergencyComplete);
    builder.finish()
  }

  pub fn unpack(&self) -> MissionEmergencyCompleteExcelT {
    let key = table_encryption_service::create_key(b"MissionEmergencyComplete");
      let MissionId = self.MissionId();
      let EmergencyComplete = self.EmergencyComplete();
    MissionEmergencyCompleteExcelT {
      MissionId,
      EmergencyComplete,
    }
  }

  #[inline]
  pub fn MissionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MissionEmergencyCompleteExcel::VT_MISSIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EmergencyComplete(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MissionEmergencyCompleteExcel::VT_EMERGENCYCOMPLETE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MissionEmergencyCompleteExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("MissionId", Self::VT_MISSIONID, false)?
     .visit_field::<bool>("EmergencyComplete", Self::VT_EMERGENCYCOMPLETE, false)?
     .finish();
    Ok(())
  }
}
pub struct MissionEmergencyCompleteExcelArgs {
    pub MissionId: i64,
    pub EmergencyComplete: bool,
}
impl<'a> Default for MissionEmergencyCompleteExcelArgs {
  #[inline]
  fn default() -> Self {
    MissionEmergencyCompleteExcelArgs {
      MissionId: 0,
      EmergencyComplete: false,
    }
  }
}

impl Serialize for MissionEmergencyCompleteExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MissionEmergencyCompleteExcel", 2)?;
      s.serialize_field("MissionId", &self.MissionId())?;
      s.serialize_field("EmergencyComplete", &self.EmergencyComplete())?;
    s.end()
  }
}

pub struct MissionEmergencyCompleteExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MissionEmergencyCompleteExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_MissionId(&mut self, MissionId: i64) {
    self.fbb_.push_slot::<i64>(MissionEmergencyCompleteExcel::VT_MISSIONID, MissionId, 0);
  }
  #[inline]
  pub fn add_EmergencyComplete(&mut self, EmergencyComplete: bool) {
    self.fbb_.push_slot::<bool>(MissionEmergencyCompleteExcel::VT_EMERGENCYCOMPLETE, EmergencyComplete, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MissionEmergencyCompleteExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MissionEmergencyCompleteExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MissionEmergencyCompleteExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MissionEmergencyCompleteExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MissionEmergencyCompleteExcel");
      ds.field("MissionId", &self.MissionId());
      ds.field("EmergencyComplete", &self.EmergencyComplete());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MissionEmergencyCompleteExcelT {
  pub MissionId: i64,
  pub EmergencyComplete: bool,
}
impl Default for MissionEmergencyCompleteExcelT {
  fn default() -> Self {
    Self {
      MissionId: 0,
      EmergencyComplete: false,
    }
  }
}
impl MissionEmergencyCompleteExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MissionEmergencyCompleteExcel<'b>> {
    let MissionId = self.MissionId;
    let EmergencyComplete = self.EmergencyComplete;
    MissionEmergencyCompleteExcel::create(_fbb, &MissionEmergencyCompleteExcelArgs{
      MissionId,
      EmergencyComplete,
    })
  }
}
