// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentLobbyMenuExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentLobbyMenuExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentLobbyMenuExcel<'a> {
  type Inner = EventContentLobbyMenuExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentLobbyMenuExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ICONSPRITENAME: flatbuffers::VOffsetT = 8;
  pub const VT_BUTTONTEXT: flatbuffers::VOffsetT = 10;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 12;
  pub const VT_ICONOFFSETX: flatbuffers::VOffsetT = 14;
  pub const VT_ICONOFFSETY: flatbuffers::VOffsetT = 16;
  pub const VT_REDDOTSPRITENAME: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentLobbyMenuExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentLobbyMenuExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentLobbyMenuExcel<'bldr>> {
    let mut builder = EventContentLobbyMenuExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentLobbyMenu");
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.ReddotSpriteName {
        builder.add_ReddotSpriteName(x);
      }
      let x = args.IconOffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_IconOffsetY(x);
      let x = args.IconOffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_IconOffsetX(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      if let Some(x) = args.ButtonText {
        builder.add_ButtonText(x);
      }
      if let Some(x) = args.IconSpriteName {
        builder.add_IconSpriteName(x);
      }
      let x = args.EventContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventContentType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentLobbyMenuExcelT {
    let key = table_encryption_service::create_key(b"EventContentLobbyMenu");
      let EventContentId = self.EventContentId();
      let EventContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventContentType(), &key)
      } else {
        self.EventContentType()
      };
    let IconSpriteName = self.IconSpriteName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ButtonText = self.ButtonText().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DisplayOrder = self.DisplayOrder();
      let IconOffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.IconOffsetX(), &key)
      } else {
        self.IconOffsetX()
      };
      let IconOffsetY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.IconOffsetY(), &key)
      } else {
        self.IconOffsetY()
      };
    let ReddotSpriteName = self.ReddotSpriteName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentLobbyMenuExcelT {
      EventContentId,
      EventContentType,
      IconSpriteName,
      ButtonText,
      DisplayOrder,
      IconOffsetX,
      IconOffsetY,
      ReddotSpriteName,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentLobbyMenuExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentType(&self) -> EventContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventContentType>(EventContentLobbyMenuExcel::VT_EVENTCONTENTTYPE, Some(EventContentType::Stage)).unwrap()}
  }
  #[inline]
  pub fn IconSpriteName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentLobbyMenuExcel::VT_ICONSPRITENAME, None)}
  }
  #[inline]
  pub fn ButtonText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentLobbyMenuExcel::VT_BUTTONTEXT, None)}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentLobbyMenuExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconOffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentLobbyMenuExcel::VT_ICONOFFSETX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IconOffsetY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentLobbyMenuExcel::VT_ICONOFFSETY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ReddotSpriteName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentLobbyMenuExcel::VT_REDDOTSPRITENAME, None)}
  }
}

impl flatbuffers::Verifiable for EventContentLobbyMenuExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<EventContentType>("EventContentType", Self::VT_EVENTCONTENTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconSpriteName", Self::VT_ICONSPRITENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ButtonText", Self::VT_BUTTONTEXT, false)?
     .visit_field::<i32>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<f32>("IconOffsetX", Self::VT_ICONOFFSETX, false)?
     .visit_field::<f32>("IconOffsetY", Self::VT_ICONOFFSETY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ReddotSpriteName", Self::VT_REDDOTSPRITENAME, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentLobbyMenuExcelArgs<'a> {
    pub EventContentId: i64,
    pub EventContentType: EventContentType,
    pub IconSpriteName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ButtonText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DisplayOrder: i32,
    pub IconOffsetX: f32,
    pub IconOffsetY: f32,
    pub ReddotSpriteName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentLobbyMenuExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentLobbyMenuExcelArgs {
      EventContentId: 0,
      EventContentType: EventContentType::Stage,
      IconSpriteName: None,
      ButtonText: None,
      DisplayOrder: 0,
      IconOffsetX: 0.0,
      IconOffsetY: 0.0,
      ReddotSpriteName: None,
    }
  }
}

impl Serialize for EventContentLobbyMenuExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentLobbyMenuExcel", 8)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventContentType", &self.EventContentType())?;
      if let Some(f) = self.IconSpriteName() {
        s.serialize_field("IconSpriteName", &f)?;
      } else {
        s.skip_field("IconSpriteName")?;
      }
      if let Some(f) = self.ButtonText() {
        s.serialize_field("ButtonText", &f)?;
      } else {
        s.skip_field("ButtonText")?;
      }
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("IconOffsetX", &self.IconOffsetX())?;
      s.serialize_field("IconOffsetY", &self.IconOffsetY())?;
      if let Some(f) = self.ReddotSpriteName() {
        s.serialize_field("ReddotSpriteName", &f)?;
      } else {
        s.skip_field("ReddotSpriteName")?;
      }
    s.end()
  }
}

pub struct EventContentLobbyMenuExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentLobbyMenuExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentLobbyMenuExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventContentType(&mut self, EventContentType: EventContentType) {
    self.fbb_.push_slot::<EventContentType>(EventContentLobbyMenuExcel::VT_EVENTCONTENTTYPE, EventContentType, EventContentType::Stage);
  }
  #[inline]
  pub fn add_IconSpriteName(&mut self, IconSpriteName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLobbyMenuExcel::VT_ICONSPRITENAME, IconSpriteName);
  }
  #[inline]
  pub fn add_ButtonText(&mut self, ButtonText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLobbyMenuExcel::VT_BUTTONTEXT, ButtonText);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i32) {
    self.fbb_.push_slot::<i32>(EventContentLobbyMenuExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_IconOffsetX(&mut self, IconOffsetX: f32) {
    self.fbb_.push_slot::<f32>(EventContentLobbyMenuExcel::VT_ICONOFFSETX, IconOffsetX, 0.0);
  }
  #[inline]
  pub fn add_IconOffsetY(&mut self, IconOffsetY: f32) {
    self.fbb_.push_slot::<f32>(EventContentLobbyMenuExcel::VT_ICONOFFSETY, IconOffsetY, 0.0);
  }
  #[inline]
  pub fn add_ReddotSpriteName(&mut self, ReddotSpriteName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentLobbyMenuExcel::VT_REDDOTSPRITENAME, ReddotSpriteName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentLobbyMenuExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentLobbyMenuExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentLobbyMenuExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentLobbyMenuExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentLobbyMenuExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventContentType", &self.EventContentType());
      ds.field("IconSpriteName", &self.IconSpriteName());
      ds.field("ButtonText", &self.ButtonText());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("IconOffsetX", &self.IconOffsetX());
      ds.field("IconOffsetY", &self.IconOffsetY());
      ds.field("ReddotSpriteName", &self.ReddotSpriteName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentLobbyMenuExcelT {
  pub EventContentId: i64,
  pub EventContentType: EventContentType,
  pub IconSpriteName: Option<String>,
  pub ButtonText: Option<String>,
  pub DisplayOrder: i32,
  pub IconOffsetX: f32,
  pub IconOffsetY: f32,
  pub ReddotSpriteName: Option<String>,
}
impl Default for EventContentLobbyMenuExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventContentType: EventContentType::Stage,
      IconSpriteName: None,
      ButtonText: None,
      DisplayOrder: 0,
      IconOffsetX: 0.0,
      IconOffsetY: 0.0,
      ReddotSpriteName: None,
    }
  }
}
impl EventContentLobbyMenuExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentLobbyMenuExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventContentType = self.EventContentType;
    let IconSpriteName = self.IconSpriteName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ButtonText = self.ButtonText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DisplayOrder = self.DisplayOrder;
    let IconOffsetX = self.IconOffsetX;
    let IconOffsetY = self.IconOffsetY;
    let ReddotSpriteName = self.ReddotSpriteName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentLobbyMenuExcel::create(_fbb, &EventContentLobbyMenuExcelArgs{
      EventContentId,
      EventContentType,
      IconSpriteName,
      ButtonText,
      DisplayOrder,
      IconOffsetX,
      IconOffsetY,
      ReddotSpriteName,
    })
  }
}
