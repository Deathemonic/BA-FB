// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MemoryLobbyExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MemoryLobbyExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MemoryLobbyExcel<'a> {
  type Inner = MemoryLobbyExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MemoryLobbyExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTIONSTEP: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 10;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 12;
  pub const VT_MEMORYLOBBYCATEGORY: flatbuffers::VOffsetT = 14;
  pub const VT_SLOTTEXTURENAME: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDTEXTURENAME: flatbuffers::VOffsetT = 18;
  pub const VT_BGMID: flatbuffers::VOffsetT = 20;
  pub const VT_AUDIOCLIPJP: flatbuffers::VOffsetT = 22;
  pub const VT_AUDIOCLIPKR: flatbuffers::VOffsetT = 24;
  pub const VT_AUDIOCLIPTH: flatbuffers::VOffsetT = 26;
  pub const VT_AUDIOCLIPTW: flatbuffers::VOffsetT = 28;
  pub const VT_AUDIOCLIPEN: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MemoryLobbyExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MemoryLobbyExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MemoryLobbyExcel<'bldr>> {
    let mut builder = MemoryLobbyExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MemoryLobby");
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.AudioClipEn {
        builder.add_AudioClipEn(x);
      }
      if let Some(x) = args.AudioClipTw {
        builder.add_AudioClipTw(x);
      }
      if let Some(x) = args.AudioClipTh {
        builder.add_AudioClipTh(x);
      }
      if let Some(x) = args.AudioClipKr {
        builder.add_AudioClipKr(x);
      }
      if let Some(x) = args.AudioClipJp {
        builder.add_AudioClipJp(x);
      }
      if let Some(x) = args.RewardTextureName {
        builder.add_RewardTextureName(x);
      }
      if let Some(x) = args.SlotTextureName {
        builder.add_SlotTextureName(x);
      }
      let x = args.MemoryLobbyCategory;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MemoryLobbyCategory(x);
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.ProductionStep;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ProductionStep(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MemoryLobbyExcelT {
    let key = table_encryption_service::create_key(b"MemoryLobby");
      let Id = self.Id();
      let ProductionStep = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ProductionStep(), &key)
      } else {
        self.ProductionStep()
      };
      let LocalizeEtcId = self.LocalizeEtcId();
      let CharacterId = self.CharacterId();
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let MemoryLobbyCategory = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MemoryLobbyCategory(), &key)
      } else {
        self.MemoryLobbyCategory()
      };
    let SlotTextureName = self.SlotTextureName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RewardTextureName = self.RewardTextureName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BGMId = self.BGMId();
    let AudioClipJp = self.AudioClipJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AudioClipKr = self.AudioClipKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AudioClipTh = self.AudioClipTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AudioClipTw = self.AudioClipTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AudioClipEn = self.AudioClipEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MemoryLobbyExcelT {
      Id,
      ProductionStep,
      LocalizeEtcId,
      CharacterId,
      PrefabName,
      MemoryLobbyCategory,
      SlotTextureName,
      RewardTextureName,
      BGMId,
      AudioClipJp,
      AudioClipKr,
      AudioClipTh,
      AudioClipTw,
      AudioClipEn,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobbyExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductionStep(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(MemoryLobbyExcel::VT_PRODUCTIONSTEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MemoryLobbyExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobbyExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn MemoryLobbyCategory(&self) -> MemoryLobbyCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MemoryLobbyCategory>(MemoryLobbyExcel::VT_MEMORYLOBBYCATEGORY, Some(MemoryLobbyCategory::None)).unwrap()}
  }
  #[inline]
  pub fn SlotTextureName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_SLOTTEXTURENAME, None)}
  }
  #[inline]
  pub fn RewardTextureName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_REWARDTEXTURENAME, None)}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobbyExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AudioClipJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_AUDIOCLIPJP, None)}
  }
  #[inline]
  pub fn AudioClipKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_AUDIOCLIPKR, None)}
  }
  #[inline]
  pub fn AudioClipTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_AUDIOCLIPTH, None)}
  }
  #[inline]
  pub fn AudioClipTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_AUDIOCLIPTW, None)}
  }
  #[inline]
  pub fn AudioClipEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_AUDIOCLIPEN, None)}
  }
}

impl flatbuffers::Verifiable for MemoryLobbyExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ProductionStep>("ProductionStep", Self::VT_PRODUCTIONSTEP, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<MemoryLobbyCategory>("MemoryLobbyCategory", Self::VT_MEMORYLOBBYCATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SlotTextureName", Self::VT_SLOTTEXTURENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RewardTextureName", Self::VT_REWARDTEXTURENAME, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AudioClipJp", Self::VT_AUDIOCLIPJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AudioClipKr", Self::VT_AUDIOCLIPKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AudioClipTh", Self::VT_AUDIOCLIPTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AudioClipTw", Self::VT_AUDIOCLIPTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AudioClipEn", Self::VT_AUDIOCLIPEN, false)?
     .finish();
    Ok(())
  }
}
pub struct MemoryLobbyExcelArgs<'a> {
    pub Id: i64,
    pub ProductionStep: ProductionStep,
    pub LocalizeEtcId: u32,
    pub CharacterId: i64,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MemoryLobbyCategory: MemoryLobbyCategory,
    pub SlotTextureName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RewardTextureName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BGMId: i64,
    pub AudioClipJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AudioClipKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AudioClipTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AudioClipTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AudioClipEn: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MemoryLobbyExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MemoryLobbyExcelArgs {
      Id: 0,
      ProductionStep: ProductionStep::ToDo,
      LocalizeEtcId: 0,
      CharacterId: 0,
      PrefabName: None,
      MemoryLobbyCategory: MemoryLobbyCategory::None,
      SlotTextureName: None,
      RewardTextureName: None,
      BGMId: 0,
      AudioClipJp: None,
      AudioClipKr: None,
      AudioClipTh: None,
      AudioClipTw: None,
      AudioClipEn: None,
    }
  }
}

impl Serialize for MemoryLobbyExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MemoryLobbyExcel", 14)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("ProductionStep", &self.ProductionStep())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      s.serialize_field("MemoryLobbyCategory", &self.MemoryLobbyCategory())?;
      if let Some(f) = self.SlotTextureName() {
        s.serialize_field("SlotTextureName", &f)?;
      } else {
        s.skip_field("SlotTextureName")?;
      }
      if let Some(f) = self.RewardTextureName() {
        s.serialize_field("RewardTextureName", &f)?;
      } else {
        s.skip_field("RewardTextureName")?;
      }
      s.serialize_field("BGMId", &self.BGMId())?;
      if let Some(f) = self.AudioClipJp() {
        s.serialize_field("AudioClipJp", &f)?;
      } else {
        s.skip_field("AudioClipJp")?;
      }
      if let Some(f) = self.AudioClipKr() {
        s.serialize_field("AudioClipKr", &f)?;
      } else {
        s.skip_field("AudioClipKr")?;
      }
      if let Some(f) = self.AudioClipTh() {
        s.serialize_field("AudioClipTh", &f)?;
      } else {
        s.skip_field("AudioClipTh")?;
      }
      if let Some(f) = self.AudioClipTw() {
        s.serialize_field("AudioClipTw", &f)?;
      } else {
        s.skip_field("AudioClipTw")?;
      }
      if let Some(f) = self.AudioClipEn() {
        s.serialize_field("AudioClipEn", &f)?;
      } else {
        s.skip_field("AudioClipEn")?;
      }
    s.end()
  }
}

pub struct MemoryLobbyExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MemoryLobbyExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobbyExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_ProductionStep(&mut self, ProductionStep: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(MemoryLobbyExcel::VT_PRODUCTIONSTEP, ProductionStep, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(MemoryLobbyExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobbyExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_MemoryLobbyCategory(&mut self, MemoryLobbyCategory: MemoryLobbyCategory) {
    self.fbb_.push_slot::<MemoryLobbyCategory>(MemoryLobbyExcel::VT_MEMORYLOBBYCATEGORY, MemoryLobbyCategory, MemoryLobbyCategory::None);
  }
  #[inline]
  pub fn add_SlotTextureName(&mut self, SlotTextureName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_SLOTTEXTURENAME, SlotTextureName);
  }
  #[inline]
  pub fn add_RewardTextureName(&mut self, RewardTextureName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_REWARDTEXTURENAME, RewardTextureName);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobbyExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_AudioClipJp(&mut self, AudioClipJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_AUDIOCLIPJP, AudioClipJp);
  }
  #[inline]
  pub fn add_AudioClipKr(&mut self, AudioClipKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_AUDIOCLIPKR, AudioClipKr);
  }
  #[inline]
  pub fn add_AudioClipTh(&mut self, AudioClipTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_AUDIOCLIPTH, AudioClipTh);
  }
  #[inline]
  pub fn add_AudioClipTw(&mut self, AudioClipTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_AUDIOCLIPTW, AudioClipTw);
  }
  #[inline]
  pub fn add_AudioClipEn(&mut self, AudioClipEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_AUDIOCLIPEN, AudioClipEn);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MemoryLobbyExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MemoryLobbyExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MemoryLobbyExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MemoryLobbyExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MemoryLobbyExcel");
      ds.field("Id", &self.Id());
      ds.field("ProductionStep", &self.ProductionStep());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("MemoryLobbyCategory", &self.MemoryLobbyCategory());
      ds.field("SlotTextureName", &self.SlotTextureName());
      ds.field("RewardTextureName", &self.RewardTextureName());
      ds.field("BGMId", &self.BGMId());
      ds.field("AudioClipJp", &self.AudioClipJp());
      ds.field("AudioClipKr", &self.AudioClipKr());
      ds.field("AudioClipTh", &self.AudioClipTh());
      ds.field("AudioClipTw", &self.AudioClipTw());
      ds.field("AudioClipEn", &self.AudioClipEn());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MemoryLobbyExcelT {
  pub Id: i64,
  pub ProductionStep: ProductionStep,
  pub LocalizeEtcId: u32,
  pub CharacterId: i64,
  pub PrefabName: Option<String>,
  pub MemoryLobbyCategory: MemoryLobbyCategory,
  pub SlotTextureName: Option<String>,
  pub RewardTextureName: Option<String>,
  pub BGMId: i64,
  pub AudioClipJp: Option<String>,
  pub AudioClipKr: Option<String>,
  pub AudioClipTh: Option<String>,
  pub AudioClipTw: Option<String>,
  pub AudioClipEn: Option<String>,
}
impl Default for MemoryLobbyExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      ProductionStep: ProductionStep::ToDo,
      LocalizeEtcId: 0,
      CharacterId: 0,
      PrefabName: None,
      MemoryLobbyCategory: MemoryLobbyCategory::None,
      SlotTextureName: None,
      RewardTextureName: None,
      BGMId: 0,
      AudioClipJp: None,
      AudioClipKr: None,
      AudioClipTh: None,
      AudioClipTw: None,
      AudioClipEn: None,
    }
  }
}
impl MemoryLobbyExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MemoryLobbyExcel<'b>> {
    let Id = self.Id;
    let ProductionStep = self.ProductionStep;
    let LocalizeEtcId = self.LocalizeEtcId;
    let CharacterId = self.CharacterId;
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MemoryLobbyCategory = self.MemoryLobbyCategory;
    let SlotTextureName = self.SlotTextureName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RewardTextureName = self.RewardTextureName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BGMId = self.BGMId;
    let AudioClipJp = self.AudioClipJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AudioClipKr = self.AudioClipKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AudioClipTh = self.AudioClipTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AudioClipTw = self.AudioClipTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AudioClipEn = self.AudioClipEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MemoryLobbyExcel::create(_fbb, &MemoryLobbyExcelArgs{
      Id,
      ProductionStep,
      LocalizeEtcId,
      CharacterId,
      PrefabName,
      MemoryLobbyCategory,
      SlotTextureName,
      RewardTextureName,
      BGMId,
      AudioClipJp,
      AudioClipKr,
      AudioClipTh,
      AudioClipTw,
      AudioClipEn,
    })
  }
}
