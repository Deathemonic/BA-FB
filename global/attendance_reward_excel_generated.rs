// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AttendanceRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AttendanceRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AttendanceRewardExcel<'a> {
  type Inner = AttendanceRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AttendanceRewardExcel<'a> {
  pub const VT_ATTENDANCEID: flatbuffers::VOffsetT = 4;
  pub const VT_DAY: flatbuffers::VOffsetT = 6;
  pub const VT_REWARDICON: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDID: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDAMOUNT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AttendanceRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AttendanceRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AttendanceRewardExcel<'bldr>> {
    let mut builder = AttendanceRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AttendanceReward");
      let x = args.Day;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Day(x);
      let x = args.AttendanceId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttendanceId(x);
      if let Some(x) = args.RewardAmount {
        builder.add_RewardAmount(x);
      }
      if let Some(x) = args.RewardId {
        builder.add_RewardId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      if let Some(x) = args.RewardIcon {
        builder.add_RewardIcon(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> AttendanceRewardExcelT {
    let key = table_encryption_service::create_key(b"AttendanceReward");
      let AttendanceId = self.AttendanceId();
      let Day = self.Day();
    let RewardIcon = self.RewardIcon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardId = self.RewardId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardAmount = self.RewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    AttendanceRewardExcelT {
      AttendanceId,
      Day,
      RewardIcon,
      RewardParcelType,
      RewardId,
      RewardAmount,
    }
  }

  #[inline]
  pub fn AttendanceId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AttendanceRewardExcel::VT_ATTENDANCEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Day(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AttendanceRewardExcel::VT_DAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardIcon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttendanceRewardExcel::VT_REWARDICON, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(AttendanceRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AttendanceRewardExcel::VT_REWARDID, None)}
  }
  #[inline]
  pub fn RewardAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AttendanceRewardExcel::VT_REWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for AttendanceRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("AttendanceId", Self::VT_ATTENDANCEID, false)?
     .visit_field::<i64>("Day", Self::VT_DAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RewardIcon", Self::VT_REWARDICON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardId", Self::VT_REWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardAmount", Self::VT_REWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct AttendanceRewardExcelArgs<'a> {
    pub AttendanceId: i64,
    pub Day: i64,
    pub RewardIcon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for AttendanceRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AttendanceRewardExcelArgs {
      AttendanceId: 0,
      Day: 0,
      RewardIcon: None,
      RewardParcelType: None,
      RewardId: None,
      RewardAmount: None,
    }
  }
}

impl Serialize for AttendanceRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AttendanceRewardExcel", 6)?;
      s.serialize_field("AttendanceId", &self.AttendanceId())?;
      s.serialize_field("Day", &self.Day())?;
      if let Some(f) = self.RewardIcon() {
        s.serialize_field("RewardIcon", &f)?;
      } else {
        s.skip_field("RewardIcon")?;
      }
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardId() {
        s.serialize_field("RewardId", &f)?;
      } else {
        s.skip_field("RewardId")?;
      }
      if let Some(f) = self.RewardAmount() {
        s.serialize_field("RewardAmount", &f)?;
      } else {
        s.skip_field("RewardAmount")?;
      }
    s.end()
  }
}

pub struct AttendanceRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AttendanceRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_AttendanceId(&mut self, AttendanceId: i64) {
    self.fbb_.push_slot::<i64>(AttendanceRewardExcel::VT_ATTENDANCEID, AttendanceId, 0);
  }
  #[inline]
  pub fn add_Day(&mut self, Day: i64) {
    self.fbb_.push_slot::<i64>(AttendanceRewardExcel::VT_DAY, Day, 0);
  }
  #[inline]
  pub fn add_RewardIcon(&mut self, RewardIcon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceRewardExcel::VT_REWARDICON, RewardIcon);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardId(&mut self, RewardId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceRewardExcel::VT_REWARDID, RewardId);
  }
  #[inline]
  pub fn add_RewardAmount(&mut self, RewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttendanceRewardExcel::VT_REWARDAMOUNT, RewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AttendanceRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AttendanceRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AttendanceRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AttendanceRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AttendanceRewardExcel");
      ds.field("AttendanceId", &self.AttendanceId());
      ds.field("Day", &self.Day());
      ds.field("RewardIcon", &self.RewardIcon());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardId", &self.RewardId());
      ds.field("RewardAmount", &self.RewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AttendanceRewardExcelT {
  pub AttendanceId: i64,
  pub Day: i64,
  pub RewardIcon: Option<String>,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardId: Option<Vec<i64>>,
  pub RewardAmount: Option<Vec<i64>>,
}
impl Default for AttendanceRewardExcelT {
  fn default() -> Self {
    Self {
      AttendanceId: 0,
      Day: 0,
      RewardIcon: None,
      RewardParcelType: None,
      RewardId: None,
      RewardAmount: None,
    }
  }
}
impl AttendanceRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AttendanceRewardExcel<'b>> {
    let AttendanceId = self.AttendanceId;
    let Day = self.Day;
    let RewardIcon = self.RewardIcon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardId = self.RewardId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardAmount = self.RewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    AttendanceRewardExcel::create(_fbb, &AttendanceRewardExcelArgs{
      AttendanceId,
      Day,
      RewardIcon,
      RewardParcelType,
      RewardId,
      RewardAmount,
    })
  }
}
