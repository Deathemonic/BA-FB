// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PresetParcelsExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PresetParcelsExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PresetParcelsExcel<'a> {
  type Inner = PresetParcelsExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PresetParcelsExcel<'a> {
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 6;
  pub const VT_PRESETGROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_PARCELAMOUNT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PresetParcelsExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PresetParcelsExcelArgs
  ) -> flatbuffers::WIPOffset<PresetParcelsExcel<'bldr>> {
    let mut builder = PresetParcelsExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"PresetParcels");
      let x = args.ParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelAmount(x);
      let x = args.PresetGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PresetGroupId(x);
      let x = args.ParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelId(x);
      let x = args.ParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> PresetParcelsExcelT {
    let key = table_encryption_service::create_key(b"PresetParcels");
      let ParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParcelType(), &key)
      } else {
        self.ParcelType()
      };
      let ParcelId = self.ParcelId();
      let PresetGroupId = self.PresetGroupId();
      let ParcelAmount = self.ParcelAmount();
    PresetParcelsExcelT {
      ParcelType,
      ParcelId,
      PresetGroupId,
      ParcelAmount,
    }
  }

  #[inline]
  pub fn ParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(PresetParcelsExcel::VT_PARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PresetParcelsExcel::VT_PARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PresetGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PresetParcelsExcel::VT_PRESETGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PresetParcelsExcel::VT_PARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PresetParcelsExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ParcelType>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<i64>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<i64>("PresetGroupId", Self::VT_PRESETGROUPID, false)?
     .visit_field::<i64>("ParcelAmount", Self::VT_PARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct PresetParcelsExcelArgs {
    pub ParcelType: ParcelType,
    pub ParcelId: i64,
    pub PresetGroupId: i64,
    pub ParcelAmount: i64,
}
impl<'a> Default for PresetParcelsExcelArgs {
  #[inline]
  fn default() -> Self {
    PresetParcelsExcelArgs {
      ParcelType: ParcelType::None,
      ParcelId: 0,
      PresetGroupId: 0,
      ParcelAmount: 0,
    }
  }
}

impl Serialize for PresetParcelsExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PresetParcelsExcel", 4)?;
      s.serialize_field("ParcelType", &self.ParcelType())?;
      s.serialize_field("ParcelId", &self.ParcelId())?;
      s.serialize_field("PresetGroupId", &self.PresetGroupId())?;
      s.serialize_field("ParcelAmount", &self.ParcelAmount())?;
    s.end()
  }
}

pub struct PresetParcelsExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PresetParcelsExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(PresetParcelsExcel::VT_PARCELTYPE, ParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: i64) {
    self.fbb_.push_slot::<i64>(PresetParcelsExcel::VT_PARCELID, ParcelId, 0);
  }
  #[inline]
  pub fn add_PresetGroupId(&mut self, PresetGroupId: i64) {
    self.fbb_.push_slot::<i64>(PresetParcelsExcel::VT_PRESETGROUPID, PresetGroupId, 0);
  }
  #[inline]
  pub fn add_ParcelAmount(&mut self, ParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(PresetParcelsExcel::VT_PARCELAMOUNT, ParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PresetParcelsExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PresetParcelsExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PresetParcelsExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PresetParcelsExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PresetParcelsExcel");
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("PresetGroupId", &self.PresetGroupId());
      ds.field("ParcelAmount", &self.ParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PresetParcelsExcelT {
  pub ParcelType: ParcelType,
  pub ParcelId: i64,
  pub PresetGroupId: i64,
  pub ParcelAmount: i64,
}
impl Default for PresetParcelsExcelT {
  fn default() -> Self {
    Self {
      ParcelType: ParcelType::None,
      ParcelId: 0,
      PresetGroupId: 0,
      ParcelAmount: 0,
    }
  }
}
impl PresetParcelsExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PresetParcelsExcel<'b>> {
    let ParcelType = self.ParcelType;
    let ParcelId = self.ParcelId;
    let PresetGroupId = self.PresetGroupId;
    let ParcelAmount = self.ParcelAmount;
    PresetParcelsExcel::create(_fbb, &PresetParcelsExcelArgs{
      ParcelType,
      ParcelId,
      PresetGroupId,
      ParcelAmount,
    })
  }
}
