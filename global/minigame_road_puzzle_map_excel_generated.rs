// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameRoadPuzzleMapExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameRoadPuzzleMapExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameRoadPuzzleMapExcel<'a> {
  type Inner = MinigameRoadPuzzleMapExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameRoadPuzzleMapExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_MAPGROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_MAP: flatbuffers::VOffsetT = 10;
  pub const VT_MAPBG: flatbuffers::VOffsetT = 12;
  pub const VT_BGMID: flatbuffers::VOffsetT = 14;
  pub const VT_AVAILABLERAILTILE: flatbuffers::VOffsetT = 16;
  pub const VT_AVAILABLERAILTILEAMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_ORIGINALTILECOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_TRAINSPEED: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameRoadPuzzleMapExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameRoadPuzzleMapExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleMapExcel<'bldr>> {
    let mut builder = MinigameRoadPuzzleMapExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleMap");
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.MapGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MapGroupId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.TrainSpeed;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_TrainSpeed(x);
      if let Some(x) = args.OriginalTileCount {
        builder.add_OriginalTileCount(x);
      }
      if let Some(x) = args.AvailableRailTileAmount {
        builder.add_AvailableRailTileAmount(x);
      }
      if let Some(x) = args.AvailableRailTile {
        builder.add_AvailableRailTile(x);
      }
      if let Some(x) = args.MapBG {
        builder.add_MapBG(x);
      }
      if let Some(x) = args.Map {
        builder.add_Map(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameRoadPuzzleMapExcelT {
    let key = table_encryption_service::create_key(b"MinigameRoadPuzzleMap");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let MapGroupId = self.MapGroupId();
    let Map = self.Map().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MapBG = self.MapBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BGMId = self.BGMId();
    let AvailableRailTile = self.AvailableRailTile().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let AvailableRailTileAmount = self.AvailableRailTileAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let OriginalTileCount = self.OriginalTileCount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let TrainSpeed = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.TrainSpeed(), &key)
      } else {
        self.TrainSpeed()
      };
    MinigameRoadPuzzleMapExcelT {
      EventContentId,
      UniqueId,
      MapGroupId,
      Map,
      MapBG,
      BGMId,
      AvailableRailTile,
      AvailableRailTileAmount,
      OriginalTileCount,
      TrainSpeed,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleMapExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleMapExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MapGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleMapExcel::VT_MAPGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Map(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameRoadPuzzleMapExcel::VT_MAP, None)}
  }
  #[inline]
  pub fn MapBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameRoadPuzzleMapExcel::VT_MAPBG, None)}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameRoadPuzzleMapExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AvailableRailTile(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameRoadPuzzleMapExcel::VT_AVAILABLERAILTILE, None)}
  }
  #[inline]
  pub fn AvailableRailTileAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameRoadPuzzleMapExcel::VT_AVAILABLERAILTILEAMOUNT, None)}
  }
  #[inline]
  pub fn OriginalTileCount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MinigameRoadPuzzleMapExcel::VT_ORIGINALTILECOUNT, None)}
  }
  #[inline]
  pub fn TrainSpeed(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(MinigameRoadPuzzleMapExcel::VT_TRAINSPEED, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameRoadPuzzleMapExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("MapGroupId", Self::VT_MAPGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Map", Self::VT_MAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MapBG", Self::VT_MAPBG, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("AvailableRailTile", Self::VT_AVAILABLERAILTILE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("AvailableRailTileAmount", Self::VT_AVAILABLERAILTILEAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("OriginalTileCount", Self::VT_ORIGINALTILECOUNT, false)?
     .visit_field::<f32>("TrainSpeed", Self::VT_TRAINSPEED, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameRoadPuzzleMapExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub MapGroupId: i64,
    pub Map: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MapBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BGMId: i64,
    pub AvailableRailTile: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub AvailableRailTileAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub OriginalTileCount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub TrainSpeed: f32,
}
impl<'a> Default for MinigameRoadPuzzleMapExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameRoadPuzzleMapExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      MapGroupId: 0,
      Map: None,
      MapBG: None,
      BGMId: 0,
      AvailableRailTile: None,
      AvailableRailTileAmount: None,
      OriginalTileCount: None,
      TrainSpeed: 0.0,
    }
  }
}

impl Serialize for MinigameRoadPuzzleMapExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameRoadPuzzleMapExcel", 10)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("MapGroupId", &self.MapGroupId())?;
      if let Some(f) = self.Map() {
        s.serialize_field("Map", &f)?;
      } else {
        s.skip_field("Map")?;
      }
      if let Some(f) = self.MapBG() {
        s.serialize_field("MapBG", &f)?;
      } else {
        s.skip_field("MapBG")?;
      }
      s.serialize_field("BGMId", &self.BGMId())?;
      if let Some(f) = self.AvailableRailTile() {
        s.serialize_field("AvailableRailTile", &f)?;
      } else {
        s.skip_field("AvailableRailTile")?;
      }
      if let Some(f) = self.AvailableRailTileAmount() {
        s.serialize_field("AvailableRailTileAmount", &f)?;
      } else {
        s.skip_field("AvailableRailTileAmount")?;
      }
      if let Some(f) = self.OriginalTileCount() {
        s.serialize_field("OriginalTileCount", &f)?;
      } else {
        s.skip_field("OriginalTileCount")?;
      }
      s.serialize_field("TrainSpeed", &self.TrainSpeed())?;
    s.end()
  }
}

pub struct MinigameRoadPuzzleMapExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameRoadPuzzleMapExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleMapExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleMapExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_MapGroupId(&mut self, MapGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleMapExcel::VT_MAPGROUPID, MapGroupId, 0);
  }
  #[inline]
  pub fn add_Map(&mut self, Map: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleMapExcel::VT_MAP, Map);
  }
  #[inline]
  pub fn add_MapBG(&mut self, MapBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleMapExcel::VT_MAPBG, MapBG);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(MinigameRoadPuzzleMapExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_AvailableRailTile(&mut self, AvailableRailTile: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleMapExcel::VT_AVAILABLERAILTILE, AvailableRailTile);
  }
  #[inline]
  pub fn add_AvailableRailTileAmount(&mut self, AvailableRailTileAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleMapExcel::VT_AVAILABLERAILTILEAMOUNT, AvailableRailTileAmount);
  }
  #[inline]
  pub fn add_OriginalTileCount(&mut self, OriginalTileCount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameRoadPuzzleMapExcel::VT_ORIGINALTILECOUNT, OriginalTileCount);
  }
  #[inline]
  pub fn add_TrainSpeed(&mut self, TrainSpeed: f32) {
    self.fbb_.push_slot::<f32>(MinigameRoadPuzzleMapExcel::VT_TRAINSPEED, TrainSpeed, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameRoadPuzzleMapExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameRoadPuzzleMapExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameRoadPuzzleMapExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameRoadPuzzleMapExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameRoadPuzzleMapExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("MapGroupId", &self.MapGroupId());
      ds.field("Map", &self.Map());
      ds.field("MapBG", &self.MapBG());
      ds.field("BGMId", &self.BGMId());
      ds.field("AvailableRailTile", &self.AvailableRailTile());
      ds.field("AvailableRailTileAmount", &self.AvailableRailTileAmount());
      ds.field("OriginalTileCount", &self.OriginalTileCount());
      ds.field("TrainSpeed", &self.TrainSpeed());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameRoadPuzzleMapExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub MapGroupId: i64,
  pub Map: Option<String>,
  pub MapBG: Option<String>,
  pub BGMId: i64,
  pub AvailableRailTile: Option<Vec<i64>>,
  pub AvailableRailTileAmount: Option<Vec<i64>>,
  pub OriginalTileCount: Option<Vec<i64>>,
  pub TrainSpeed: f32,
}
impl Default for MinigameRoadPuzzleMapExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      MapGroupId: 0,
      Map: None,
      MapBG: None,
      BGMId: 0,
      AvailableRailTile: None,
      AvailableRailTileAmount: None,
      OriginalTileCount: None,
      TrainSpeed: 0.0,
    }
  }
}
impl MinigameRoadPuzzleMapExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameRoadPuzzleMapExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let MapGroupId = self.MapGroupId;
    let Map = self.Map.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MapBG = self.MapBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BGMId = self.BGMId;
    let AvailableRailTile = self.AvailableRailTile.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let AvailableRailTileAmount = self.AvailableRailTileAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let OriginalTileCount = self.OriginalTileCount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let TrainSpeed = self.TrainSpeed;
    MinigameRoadPuzzleMapExcel::create(_fbb, &MinigameRoadPuzzleMapExcelArgs{
      EventContentId,
      UniqueId,
      MapGroupId,
      Map,
      MapBG,
      BGMId,
      AvailableRailTile,
      AvailableRailTileAmount,
      OriginalTileCount,
      TrainSpeed,
    })
  }
}
