// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StageFileRefreshSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StageFileRefreshSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StageFileRefreshSettingExcel<'a> {
  type Inner = StageFileRefreshSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StageFileRefreshSettingExcel<'a> {
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 4;
  pub const VT_FORCESAVE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StageFileRefreshSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StageFileRefreshSettingExcelArgs
  ) -> flatbuffers::WIPOffset<StageFileRefreshSettingExcel<'bldr>> {
    let mut builder = StageFileRefreshSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"StageFileRefreshSetting");
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      builder.add_ForceSave(args.ForceSave);
    builder.finish()
  }

  pub fn unpack(&self) -> StageFileRefreshSettingExcelT {
    let key = table_encryption_service::create_key(b"StageFileRefreshSetting");
      let GroundId = self.GroundId();
      let ForceSave = self.ForceSave();
    StageFileRefreshSettingExcelT {
      GroundId,
      ForceSave,
    }
  }

  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StageFileRefreshSettingExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ForceSave(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StageFileRefreshSettingExcel::VT_FORCESAVE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for StageFileRefreshSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<bool>("ForceSave", Self::VT_FORCESAVE, false)?
     .finish();
    Ok(())
  }
}
pub struct StageFileRefreshSettingExcelArgs {
    pub GroundId: i64,
    pub ForceSave: bool,
}
impl<'a> Default for StageFileRefreshSettingExcelArgs {
  #[inline]
  fn default() -> Self {
    StageFileRefreshSettingExcelArgs {
      GroundId: 0,
      ForceSave: false,
    }
  }
}

impl Serialize for StageFileRefreshSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StageFileRefreshSettingExcel", 2)?;
      s.serialize_field("GroundId", &self.GroundId())?;
      s.serialize_field("ForceSave", &self.ForceSave())?;
    s.end()
  }
}

pub struct StageFileRefreshSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StageFileRefreshSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(StageFileRefreshSettingExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_ForceSave(&mut self, ForceSave: bool) {
    self.fbb_.push_slot::<bool>(StageFileRefreshSettingExcel::VT_FORCESAVE, ForceSave, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StageFileRefreshSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StageFileRefreshSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StageFileRefreshSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StageFileRefreshSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StageFileRefreshSettingExcel");
      ds.field("GroundId", &self.GroundId());
      ds.field("ForceSave", &self.ForceSave());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StageFileRefreshSettingExcelT {
  pub GroundId: i64,
  pub ForceSave: bool,
}
impl Default for StageFileRefreshSettingExcelT {
  fn default() -> Self {
    Self {
      GroundId: 0,
      ForceSave: false,
    }
  }
}
impl StageFileRefreshSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<StageFileRefreshSettingExcel<'b>> {
    let GroundId = self.GroundId;
    let ForceSave = self.ForceSave;
    StageFileRefreshSettingExcel::create(_fbb, &StageFileRefreshSettingExcelArgs{
      GroundId,
      ForceSave,
    })
  }
}
