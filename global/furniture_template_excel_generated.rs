// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FurnitureTemplateExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FurnitureTemplateExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FurnitureTemplateExcel<'a> {
  type Inner = FurnitureTemplateExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FurnitureTemplateExcel<'a> {
  pub const VT_FURNITURETEMPLATEID: flatbuffers::VOffsetT = 4;
  pub const VT_FUNITURETEMPLATETITLE: flatbuffers::VOffsetT = 6;
  pub const VT_THUMBNAILIMAGEPATH: flatbuffers::VOffsetT = 8;
  pub const VT_IMAGEPATH: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FurnitureTemplateExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FurnitureTemplateExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FurnitureTemplateExcel<'bldr>> {
    let mut builder = FurnitureTemplateExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FurnitureTemplate");
      let x = args.FurnitureTemplateId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FurnitureTemplateId(x);
      if let Some(x) = args.ImagePath {
        builder.add_ImagePath(x);
      }
      if let Some(x) = args.ThumbnailImagePath {
        builder.add_ThumbnailImagePath(x);
      }
      let x = args.FunitureTemplateTitle;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_FunitureTemplateTitle(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FurnitureTemplateExcelT {
    let key = table_encryption_service::create_key(b"FurnitureTemplate");
      let FurnitureTemplateId = self.FurnitureTemplateId();
      let FunitureTemplateTitle = self.FunitureTemplateTitle();
    let ThumbnailImagePath = self.ThumbnailImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePath = self.ImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    FurnitureTemplateExcelT {
      FurnitureTemplateId,
      FunitureTemplateTitle,
      ThumbnailImagePath,
      ImagePath,
    }
  }

  #[inline]
  pub fn FurnitureTemplateId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FurnitureTemplateExcel::VT_FURNITURETEMPLATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FunitureTemplateTitle(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(FurnitureTemplateExcel::VT_FUNITURETEMPLATETITLE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ThumbnailImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureTemplateExcel::VT_THUMBNAILIMAGEPATH, None)}
  }
  #[inline]
  pub fn ImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FurnitureTemplateExcel::VT_IMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for FurnitureTemplateExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("FurnitureTemplateId", Self::VT_FURNITURETEMPLATEID, false)?
     .visit_field::<u32>("FunitureTemplateTitle", Self::VT_FUNITURETEMPLATETITLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThumbnailImagePath", Self::VT_THUMBNAILIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePath", Self::VT_IMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct FurnitureTemplateExcelArgs<'a> {
    pub FurnitureTemplateId: i64,
    pub FunitureTemplateTitle: u32,
    pub ThumbnailImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for FurnitureTemplateExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FurnitureTemplateExcelArgs {
      FurnitureTemplateId: 0,
      FunitureTemplateTitle: 0,
      ThumbnailImagePath: None,
      ImagePath: None,
    }
  }
}

impl Serialize for FurnitureTemplateExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FurnitureTemplateExcel", 4)?;
      s.serialize_field("FurnitureTemplateId", &self.FurnitureTemplateId())?;
      s.serialize_field("FunitureTemplateTitle", &self.FunitureTemplateTitle())?;
      if let Some(f) = self.ThumbnailImagePath() {
        s.serialize_field("ThumbnailImagePath", &f)?;
      } else {
        s.skip_field("ThumbnailImagePath")?;
      }
      if let Some(f) = self.ImagePath() {
        s.serialize_field("ImagePath", &f)?;
      } else {
        s.skip_field("ImagePath")?;
      }
    s.end()
  }
}

pub struct FurnitureTemplateExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FurnitureTemplateExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_FurnitureTemplateId(&mut self, FurnitureTemplateId: i64) {
    self.fbb_.push_slot::<i64>(FurnitureTemplateExcel::VT_FURNITURETEMPLATEID, FurnitureTemplateId, 0);
  }
  #[inline]
  pub fn add_FunitureTemplateTitle(&mut self, FunitureTemplateTitle: u32) {
    self.fbb_.push_slot::<u32>(FurnitureTemplateExcel::VT_FUNITURETEMPLATETITLE, FunitureTemplateTitle, 0);
  }
  #[inline]
  pub fn add_ThumbnailImagePath(&mut self, ThumbnailImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureTemplateExcel::VT_THUMBNAILIMAGEPATH, ThumbnailImagePath);
  }
  #[inline]
  pub fn add_ImagePath(&mut self, ImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FurnitureTemplateExcel::VT_IMAGEPATH, ImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FurnitureTemplateExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FurnitureTemplateExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FurnitureTemplateExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FurnitureTemplateExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FurnitureTemplateExcel");
      ds.field("FurnitureTemplateId", &self.FurnitureTemplateId());
      ds.field("FunitureTemplateTitle", &self.FunitureTemplateTitle());
      ds.field("ThumbnailImagePath", &self.ThumbnailImagePath());
      ds.field("ImagePath", &self.ImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FurnitureTemplateExcelT {
  pub FurnitureTemplateId: i64,
  pub FunitureTemplateTitle: u32,
  pub ThumbnailImagePath: Option<String>,
  pub ImagePath: Option<String>,
}
impl Default for FurnitureTemplateExcelT {
  fn default() -> Self {
    Self {
      FurnitureTemplateId: 0,
      FunitureTemplateTitle: 0,
      ThumbnailImagePath: None,
      ImagePath: None,
    }
  }
}
impl FurnitureTemplateExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FurnitureTemplateExcel<'b>> {
    let FurnitureTemplateId = self.FurnitureTemplateId;
    let FunitureTemplateTitle = self.FunitureTemplateTitle;
    let ThumbnailImagePath = self.ThumbnailImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePath = self.ImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    FurnitureTemplateExcel::create(_fbb, &FurnitureTemplateExcelArgs{
      FurnitureTemplateId,
      FunitureTemplateTitle,
      ThumbnailImagePath,
      ImagePath,
    })
  }
}
