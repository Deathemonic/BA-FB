// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AcademyZoneExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AcademyZoneExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AcademyZoneExcel<'a> {
  type Inner = AcademyZoneExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AcademyZoneExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCATIONID: flatbuffers::VOffsetT = 6;
  pub const VT_LOCATIONRANKFORUNLOCK: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 10;
  pub const VT_STUDENTVISITPROB: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_TAGS: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AcademyZoneExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AcademyZoneExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AcademyZoneExcel<'bldr>> {
    let mut builder = AcademyZoneExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AcademyZone");
      let x = args.RewardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardGroupId(x);
      let x = args.LocationRankForUnlock;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LocationRankForUnlock(x);
      let x = args.LocationId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LocationId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.Tags {
        builder.add_Tags(x);
      }
      if let Some(x) = args.StudentVisitProb {
        builder.add_StudentVisitProb(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> AcademyZoneExcelT {
    let key = table_encryption_service::create_key(b"AcademyZone");
      let Id = self.Id();
      let LocationId = self.LocationId();
      let LocationRankForUnlock = self.LocationRankForUnlock();
      let LocalizeEtcId = self.LocalizeEtcId();
    let StudentVisitProb = self.StudentVisitProb().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let RewardGroupId = self.RewardGroupId();
    let Tags = self.Tags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    AcademyZoneExcelT {
      Id,
      LocationId,
      LocationRankForUnlock,
      LocalizeEtcId,
      StudentVisitProb,
      RewardGroupId,
      Tags,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyZoneExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocationId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyZoneExcel::VT_LOCATIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocationRankForUnlock(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyZoneExcel::VT_LOCATIONRANKFORUNLOCK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AcademyZoneExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StudentVisitProb(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AcademyZoneExcel::VT_STUDENTVISITPROB, None)}
  }
  #[inline]
  pub fn RewardGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyZoneExcel::VT_REWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(AcademyZoneExcel::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for AcademyZoneExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("LocationId", Self::VT_LOCATIONID, false)?
     .visit_field::<i64>("LocationRankForUnlock", Self::VT_LOCATIONRANKFORUNLOCK, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StudentVisitProb", Self::VT_STUDENTVISITPROB, false)?
     .visit_field::<i64>("RewardGroupId", Self::VT_REWARDGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("Tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct AcademyZoneExcelArgs<'a> {
    pub Id: i64,
    pub LocationId: i64,
    pub LocationRankForUnlock: i64,
    pub LocalizeEtcId: u32,
    pub StudentVisitProb: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardGroupId: i64,
    pub Tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
}
impl<'a> Default for AcademyZoneExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AcademyZoneExcelArgs {
      Id: 0,
      LocationId: 0,
      LocationRankForUnlock: 0,
      LocalizeEtcId: 0,
      StudentVisitProb: None,
      RewardGroupId: 0,
      Tags: None,
    }
  }
}

impl Serialize for AcademyZoneExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AcademyZoneExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocationId", &self.LocationId())?;
      s.serialize_field("LocationRankForUnlock", &self.LocationRankForUnlock())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.StudentVisitProb() {
        s.serialize_field("StudentVisitProb", &f)?;
      } else {
        s.skip_field("StudentVisitProb")?;
      }
      s.serialize_field("RewardGroupId", &self.RewardGroupId())?;
      if let Some(f) = self.Tags() {
        s.serialize_field("Tags", &f)?;
      } else {
        s.skip_field("Tags")?;
      }
    s.end()
  }
}

pub struct AcademyZoneExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AcademyZoneExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(AcademyZoneExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocationId(&mut self, LocationId: i64) {
    self.fbb_.push_slot::<i64>(AcademyZoneExcel::VT_LOCATIONID, LocationId, 0);
  }
  #[inline]
  pub fn add_LocationRankForUnlock(&mut self, LocationRankForUnlock: i64) {
    self.fbb_.push_slot::<i64>(AcademyZoneExcel::VT_LOCATIONRANKFORUNLOCK, LocationRankForUnlock, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(AcademyZoneExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_StudentVisitProb(&mut self, StudentVisitProb: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyZoneExcel::VT_STUDENTVISITPROB, StudentVisitProb);
  }
  #[inline]
  pub fn add_RewardGroupId(&mut self, RewardGroupId: i64) {
    self.fbb_.push_slot::<i64>(AcademyZoneExcel::VT_REWARDGROUPID, RewardGroupId, 0);
  }
  #[inline]
  pub fn add_Tags(&mut self, Tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyZoneExcel::VT_TAGS, Tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AcademyZoneExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AcademyZoneExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AcademyZoneExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AcademyZoneExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AcademyZoneExcel");
      ds.field("Id", &self.Id());
      ds.field("LocationId", &self.LocationId());
      ds.field("LocationRankForUnlock", &self.LocationRankForUnlock());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("StudentVisitProb", &self.StudentVisitProb());
      ds.field("RewardGroupId", &self.RewardGroupId());
      ds.field("Tags", &self.Tags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AcademyZoneExcelT {
  pub Id: i64,
  pub LocationId: i64,
  pub LocationRankForUnlock: i64,
  pub LocalizeEtcId: u32,
  pub StudentVisitProb: Option<Vec<i64>>,
  pub RewardGroupId: i64,
  pub Tags: Option<Vec<Tag>>,
}
impl Default for AcademyZoneExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocationId: 0,
      LocationRankForUnlock: 0,
      LocalizeEtcId: 0,
      StudentVisitProb: None,
      RewardGroupId: 0,
      Tags: None,
    }
  }
}
impl AcademyZoneExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AcademyZoneExcel<'b>> {
    let Id = self.Id;
    let LocationId = self.LocationId;
    let LocationRankForUnlock = self.LocationRankForUnlock;
    let LocalizeEtcId = self.LocalizeEtcId;
    let StudentVisitProb = self.StudentVisitProb.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardGroupId = self.RewardGroupId;
    let Tags = self.Tags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    AcademyZoneExcel::create(_fbb, &AcademyZoneExcelArgs{
      Id,
      LocationId,
      LocationRankForUnlock,
      LocalizeEtcId,
      StudentVisitProb,
      RewardGroupId,
      Tags,
    })
  }
}
