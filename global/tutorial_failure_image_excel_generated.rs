// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TutorialFailureImageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TutorialFailureImageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TutorialFailureImageExcel<'a> {
  type Inner = TutorialFailureImageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TutorialFailureImageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CONTENTS: flatbuffers::VOffsetT = 6;
  pub const VT_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_IMAGEPATHKR: flatbuffers::VOffsetT = 10;
  pub const VT_IMAGEPATHJP: flatbuffers::VOffsetT = 12;
  pub const VT_IMAGEPATHTH: flatbuffers::VOffsetT = 14;
  pub const VT_IMAGEPATHTW: flatbuffers::VOffsetT = 16;
  pub const VT_IMAGEPATHEN: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TutorialFailureImageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TutorialFailureImageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TutorialFailureImageExcel<'bldr>> {
    let mut builder = TutorialFailureImageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TutorialFailureImage");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ImagePathEn {
        builder.add_ImagePathEn(x);
      }
      if let Some(x) = args.ImagePathTw {
        builder.add_ImagePathTw(x);
      }
      if let Some(x) = args.ImagePathTh {
        builder.add_ImagePathTh(x);
      }
      if let Some(x) = args.ImagePathJp {
        builder.add_ImagePathJp(x);
      }
      if let Some(x) = args.ImagePathKr {
        builder.add_ImagePathKr(x);
      }
      if let Some(x) = args.Type {
        builder.add_Type(x);
      }
      let x = args.Contents;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Contents(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TutorialFailureImageExcelT {
    let key = table_encryption_service::create_key(b"TutorialFailureImage");
      let Id = self.Id();
      let Contents = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Contents(), &key)
      } else {
        self.Contents()
      };
    let Type = self.Type().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePathKr = self.ImagePathKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePathJp = self.ImagePathJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePathTh = self.ImagePathTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePathTw = self.ImagePathTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePathEn = self.ImagePathEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    TutorialFailureImageExcelT {
      Id,
      Contents,
      Type,
      ImagePathKr,
      ImagePathJp,
      ImagePathTh,
      ImagePathTw,
      ImagePathEn,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TutorialFailureImageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Contents(&self) -> TutorialFailureContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TutorialFailureContentType>(TutorialFailureImageExcel::VT_CONTENTS, Some(TutorialFailureContentType::None)).unwrap()}
  }
  #[inline]
  pub fn Type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialFailureImageExcel::VT_TYPE, None)}
  }
  #[inline]
  pub fn ImagePathKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialFailureImageExcel::VT_IMAGEPATHKR, None)}
  }
  #[inline]
  pub fn ImagePathJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialFailureImageExcel::VT_IMAGEPATHJP, None)}
  }
  #[inline]
  pub fn ImagePathTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialFailureImageExcel::VT_IMAGEPATHTH, None)}
  }
  #[inline]
  pub fn ImagePathTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialFailureImageExcel::VT_IMAGEPATHTW, None)}
  }
  #[inline]
  pub fn ImagePathEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TutorialFailureImageExcel::VT_IMAGEPATHEN, None)}
  }
}

impl flatbuffers::Verifiable for TutorialFailureImageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<TutorialFailureContentType>("Contents", Self::VT_CONTENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Type", Self::VT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePathKr", Self::VT_IMAGEPATHKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePathJp", Self::VT_IMAGEPATHJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePathTh", Self::VT_IMAGEPATHTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePathTw", Self::VT_IMAGEPATHTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePathEn", Self::VT_IMAGEPATHEN, false)?
     .finish();
    Ok(())
  }
}
pub struct TutorialFailureImageExcelArgs<'a> {
    pub Id: i64,
    pub Contents: TutorialFailureContentType,
    pub Type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePathKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePathJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePathTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePathTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePathEn: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for TutorialFailureImageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TutorialFailureImageExcelArgs {
      Id: 0,
      Contents: TutorialFailureContentType::None,
      Type: None,
      ImagePathKr: None,
      ImagePathJp: None,
      ImagePathTh: None,
      ImagePathTw: None,
      ImagePathEn: None,
    }
  }
}

impl Serialize for TutorialFailureImageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TutorialFailureImageExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Contents", &self.Contents())?;
      if let Some(f) = self.Type() {
        s.serialize_field("Type", &f)?;
      } else {
        s.skip_field("Type")?;
      }
      if let Some(f) = self.ImagePathKr() {
        s.serialize_field("ImagePathKr", &f)?;
      } else {
        s.skip_field("ImagePathKr")?;
      }
      if let Some(f) = self.ImagePathJp() {
        s.serialize_field("ImagePathJp", &f)?;
      } else {
        s.skip_field("ImagePathJp")?;
      }
      if let Some(f) = self.ImagePathTh() {
        s.serialize_field("ImagePathTh", &f)?;
      } else {
        s.skip_field("ImagePathTh")?;
      }
      if let Some(f) = self.ImagePathTw() {
        s.serialize_field("ImagePathTw", &f)?;
      } else {
        s.skip_field("ImagePathTw")?;
      }
      if let Some(f) = self.ImagePathEn() {
        s.serialize_field("ImagePathEn", &f)?;
      } else {
        s.skip_field("ImagePathEn")?;
      }
    s.end()
  }
}

pub struct TutorialFailureImageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TutorialFailureImageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(TutorialFailureImageExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Contents(&mut self, Contents: TutorialFailureContentType) {
    self.fbb_.push_slot::<TutorialFailureContentType>(TutorialFailureImageExcel::VT_CONTENTS, Contents, TutorialFailureContentType::None);
  }
  #[inline]
  pub fn add_Type(&mut self, Type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialFailureImageExcel::VT_TYPE, Type);
  }
  #[inline]
  pub fn add_ImagePathKr(&mut self, ImagePathKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialFailureImageExcel::VT_IMAGEPATHKR, ImagePathKr);
  }
  #[inline]
  pub fn add_ImagePathJp(&mut self, ImagePathJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialFailureImageExcel::VT_IMAGEPATHJP, ImagePathJp);
  }
  #[inline]
  pub fn add_ImagePathTh(&mut self, ImagePathTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialFailureImageExcel::VT_IMAGEPATHTH, ImagePathTh);
  }
  #[inline]
  pub fn add_ImagePathTw(&mut self, ImagePathTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialFailureImageExcel::VT_IMAGEPATHTW, ImagePathTw);
  }
  #[inline]
  pub fn add_ImagePathEn(&mut self, ImagePathEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TutorialFailureImageExcel::VT_IMAGEPATHEN, ImagePathEn);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TutorialFailureImageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TutorialFailureImageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TutorialFailureImageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TutorialFailureImageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TutorialFailureImageExcel");
      ds.field("Id", &self.Id());
      ds.field("Contents", &self.Contents());
      ds.field("Type", &self.Type());
      ds.field("ImagePathKr", &self.ImagePathKr());
      ds.field("ImagePathJp", &self.ImagePathJp());
      ds.field("ImagePathTh", &self.ImagePathTh());
      ds.field("ImagePathTw", &self.ImagePathTw());
      ds.field("ImagePathEn", &self.ImagePathEn());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TutorialFailureImageExcelT {
  pub Id: i64,
  pub Contents: TutorialFailureContentType,
  pub Type: Option<String>,
  pub ImagePathKr: Option<String>,
  pub ImagePathJp: Option<String>,
  pub ImagePathTh: Option<String>,
  pub ImagePathTw: Option<String>,
  pub ImagePathEn: Option<String>,
}
impl Default for TutorialFailureImageExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Contents: TutorialFailureContentType::None,
      Type: None,
      ImagePathKr: None,
      ImagePathJp: None,
      ImagePathTh: None,
      ImagePathTw: None,
      ImagePathEn: None,
    }
  }
}
impl TutorialFailureImageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TutorialFailureImageExcel<'b>> {
    let Id = self.Id;
    let Contents = self.Contents;
    let Type = self.Type.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePathKr = self.ImagePathKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePathJp = self.ImagePathJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePathTh = self.ImagePathTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePathTw = self.ImagePathTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePathEn = self.ImagePathEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    TutorialFailureImageExcel::create(_fbb, &TutorialFailureImageExcelArgs{
      Id,
      Contents,
      Type,
      ImagePathKr,
      ImagePathJp,
      ImagePathTh,
      ImagePathTw,
      ImagePathEn,
    })
  }
}
