// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopRecruitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopRecruitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopRecruitExcel<'a> {
  type Inner = ShopRecruitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopRecruitExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CATEGORYTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ISLEGACY: flatbuffers::VOffsetT = 8;
  pub const VT_ONEGACHAGOODSID: flatbuffers::VOffsetT = 10;
  pub const VT_TENGACHAGOODSID: flatbuffers::VOffsetT = 12;
  pub const VT_GOODSDEVNAME: flatbuffers::VOffsetT = 14;
  pub const VT_DISPLAYTAG: flatbuffers::VOffsetT = 16;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 18;
  pub const VT_GACHABANNERPATH: flatbuffers::VOffsetT = 20;
  pub const VT_VIDEOID: flatbuffers::VOffsetT = 22;
  pub const VT_LINKEDROBBYBANNERID: flatbuffers::VOffsetT = 24;
  pub const VT_INFOCHARACTERID: flatbuffers::VOffsetT = 26;
  pub const VT_SALEPERIODVISIBLE: flatbuffers::VOffsetT = 28;
  pub const VT_SALEPERIODFROM: flatbuffers::VOffsetT = 30;
  pub const VT_SALEPERIODTO: flatbuffers::VOffsetT = 32;
  pub const VT_RECRUITCOINID: flatbuffers::VOffsetT = 34;
  pub const VT_RECRUITSELLECTIONSHOPID: flatbuffers::VOffsetT = 36;
  pub const VT_PURCHASECOOLTIMEMIN: flatbuffers::VOffsetT = 38;
  pub const VT_PURCHASECOUNTLIMIT: flatbuffers::VOffsetT = 40;
  pub const VT_PURCHASECOUNTRESETTYPE: flatbuffers::VOffsetT = 42;
  pub const VT_ISNEWBIE: flatbuffers::VOffsetT = 44;
  pub const VT_ISSELECTRECRUIT: flatbuffers::VOffsetT = 46;
  pub const VT_DIRECTPAYINVISIBLETOKENID: flatbuffers::VOffsetT = 48;
  pub const VT_DIRECTPAYANDROIDSHOPCASHID: flatbuffers::VOffsetT = 50;
  pub const VT_DIRECTPAYAPPLESHOPCASHID: flatbuffers::VOffsetT = 52;
  pub const VT_SELECTABLEGACHAGROUPID: flatbuffers::VOffsetT = 54;
  pub const VT_MAXSELECTCHARACTERNUM: flatbuffers::VOffsetT = 56;
  pub const VT_DIRECTPAYONESTORESHOPCASHID: flatbuffers::VOffsetT = 58;
  pub const VT_PROBABILITYURLDEV: flatbuffers::VOffsetT = 60;
  pub const VT_PROBABILITYURLLIVE: flatbuffers::VOffsetT = 62;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopRecruitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopRecruitExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShopRecruitExcel<'bldr>> {
    let mut builder = ShopRecruitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShopRecruit");
      let x = args.DirectPayOneStoreShopCashId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DirectPayOneStoreShopCashId(x);
      let x = args.MaxSelectCharacterNum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxSelectCharacterNum(x);
      let x = args.SelectAbleGachaGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SelectAbleGachaGroupId(x);
      let x = args.DirectPayAppleShopCashId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DirectPayAppleShopCashId(x);
      let x = args.DirectPayAndroidShopCashId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DirectPayAndroidShopCashId(x);
      let x = args.DirectPayInvisibleTokenId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DirectPayInvisibleTokenId(x);
      let x = args.PurchaseCountLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PurchaseCountLimit(x);
      let x = args.PurchaseCooltimeMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PurchaseCooltimeMin(x);
      let x = args.RecruitSellectionShopId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecruitSellectionShopId(x);
      let x = args.RecruitCoinId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecruitCoinId(x);
      let x = args.LinkedRobbyBannerId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LinkedRobbyBannerId(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.TenGachaGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TenGachaGoodsId(x);
      let x = args.OneGachaGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OneGachaGoodsId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.ProbabilityUrlLive {
        builder.add_ProbabilityUrlLive(x);
      }
      if let Some(x) = args.ProbabilityUrlDev {
        builder.add_ProbabilityUrlDev(x);
      }
      let x = args.PurchaseCountResetType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PurchaseCountResetType(x);
      if let Some(x) = args.SalePeriodTo {
        builder.add_SalePeriodTo(x);
      }
      if let Some(x) = args.SalePeriodFrom {
        builder.add_SalePeriodFrom(x);
      }
      if let Some(x) = args.InfoCharacterId {
        builder.add_InfoCharacterId(x);
      }
      if let Some(x) = args.VideoId {
        builder.add_VideoId(x);
      }
      if let Some(x) = args.GachaBannerPath {
        builder.add_GachaBannerPath(x);
      }
      let x = args.DisplayTag;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DisplayTag(x);
      if let Some(x) = args.GoodsDevName {
        builder.add_GoodsDevName(x);
      }
      let x = args.CategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CategoryType(x);
      builder.add_IsSelectRecruit(args.IsSelectRecruit);
      builder.add_IsNewbie(args.IsNewbie);
      builder.add_SalePeriodVisible(args.SalePeriodVisible);
      builder.add_IsLegacy(args.IsLegacy);
    builder.finish()
  }

  pub fn unpack(&self) -> ShopRecruitExcelT {
    let key = table_encryption_service::create_key(b"ShopRecruit");
      let Id = self.Id();
      let CategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CategoryType(), &key)
      } else {
        self.CategoryType()
      };
      let IsLegacy = self.IsLegacy();
      let OneGachaGoodsId = self.OneGachaGoodsId();
      let TenGachaGoodsId = self.TenGachaGoodsId();
    let GoodsDevName = self.GoodsDevName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DisplayTag = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DisplayTag(), &key)
      } else {
        self.DisplayTag()
      };
      let DisplayOrder = self.DisplayOrder();
    let GachaBannerPath = self.GachaBannerPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoId = self.VideoId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let LinkedRobbyBannerId = self.LinkedRobbyBannerId();
    let InfoCharacterId = self.InfoCharacterId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let SalePeriodVisible = self.SalePeriodVisible();
    let SalePeriodFrom = self.SalePeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SalePeriodTo = self.SalePeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let RecruitCoinId = self.RecruitCoinId();
      let RecruitSellectionShopId = self.RecruitSellectionShopId();
      let PurchaseCooltimeMin = self.PurchaseCooltimeMin();
      let PurchaseCountLimit = self.PurchaseCountLimit();
      let PurchaseCountResetType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PurchaseCountResetType(), &key)
      } else {
        self.PurchaseCountResetType()
      };
      let IsNewbie = self.IsNewbie();
      let IsSelectRecruit = self.IsSelectRecruit();
      let DirectPayInvisibleTokenId = self.DirectPayInvisibleTokenId();
      let DirectPayAndroidShopCashId = self.DirectPayAndroidShopCashId();
      let DirectPayAppleShopCashId = self.DirectPayAppleShopCashId();
      let SelectAbleGachaGroupId = self.SelectAbleGachaGroupId();
      let MaxSelectCharacterNum = self.MaxSelectCharacterNum();
      let DirectPayOneStoreShopCashId = self.DirectPayOneStoreShopCashId();
    let ProbabilityUrlDev = self.ProbabilityUrlDev().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProbabilityUrlLive = self.ProbabilityUrlLive().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ShopRecruitExcelT {
      Id,
      CategoryType,
      IsLegacy,
      OneGachaGoodsId,
      TenGachaGoodsId,
      GoodsDevName,
      DisplayTag,
      DisplayOrder,
      GachaBannerPath,
      VideoId,
      LinkedRobbyBannerId,
      InfoCharacterId,
      SalePeriodVisible,
      SalePeriodFrom,
      SalePeriodTo,
      RecruitCoinId,
      RecruitSellectionShopId,
      PurchaseCooltimeMin,
      PurchaseCountLimit,
      PurchaseCountResetType,
      IsNewbie,
      IsSelectRecruit,
      DirectPayInvisibleTokenId,
      DirectPayAndroidShopCashId,
      DirectPayAppleShopCashId,
      SelectAbleGachaGroupId,
      MaxSelectCharacterNum,
      DirectPayOneStoreShopCashId,
      ProbabilityUrlDev,
      ProbabilityUrlLive,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CategoryType(&self) -> ShopCategoryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopCategoryType>(ShopRecruitExcel::VT_CATEGORYTYPE, Some(ShopCategoryType::General)).unwrap()}
  }
  #[inline]
  pub fn IsLegacy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopRecruitExcel::VT_ISLEGACY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn OneGachaGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_ONEGACHAGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TenGachaGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_TENGACHAGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GoodsDevName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopRecruitExcel::VT_GOODSDEVNAME, None)}
  }
  #[inline]
  pub fn DisplayTag(&self) -> GachaDisplayTag {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GachaDisplayTag>(ShopRecruitExcel::VT_DISPLAYTAG, Some(GachaDisplayTag::None)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GachaBannerPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopRecruitExcel::VT_GACHABANNERPATH, None)}
  }
  #[inline]
  pub fn VideoId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ShopRecruitExcel::VT_VIDEOID, None)}
  }
  #[inline]
  pub fn LinkedRobbyBannerId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_LINKEDROBBYBANNERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InfoCharacterId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ShopRecruitExcel::VT_INFOCHARACTERID, None)}
  }
  #[inline]
  pub fn SalePeriodVisible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopRecruitExcel::VT_SALEPERIODVISIBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn SalePeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopRecruitExcel::VT_SALEPERIODFROM, None)}
  }
  #[inline]
  pub fn SalePeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopRecruitExcel::VT_SALEPERIODTO, None)}
  }
  #[inline]
  pub fn RecruitCoinId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_RECRUITCOINID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecruitSellectionShopId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_RECRUITSELLECTIONSHOPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PurchaseCooltimeMin(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_PURCHASECOOLTIMEMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PurchaseCountLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_PURCHASECOUNTLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PurchaseCountResetType(&self) -> PurchaseCountResetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PurchaseCountResetType>(ShopRecruitExcel::VT_PURCHASECOUNTRESETTYPE, Some(PurchaseCountResetType::None)).unwrap()}
  }
  #[inline]
  pub fn IsNewbie(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopRecruitExcel::VT_ISNEWBIE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsSelectRecruit(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopRecruitExcel::VT_ISSELECTRECRUIT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn DirectPayInvisibleTokenId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_DIRECTPAYINVISIBLETOKENID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DirectPayAndroidShopCashId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_DIRECTPAYANDROIDSHOPCASHID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DirectPayAppleShopCashId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_DIRECTPAYAPPLESHOPCASHID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SelectAbleGachaGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_SELECTABLEGACHAGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxSelectCharacterNum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_MAXSELECTCHARACTERNUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DirectPayOneStoreShopCashId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopRecruitExcel::VT_DIRECTPAYONESTORESHOPCASHID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProbabilityUrlDev(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopRecruitExcel::VT_PROBABILITYURLDEV, None)}
  }
  #[inline]
  pub fn ProbabilityUrlLive(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopRecruitExcel::VT_PROBABILITYURLLIVE, None)}
  }
}

impl flatbuffers::Verifiable for ShopRecruitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<ShopCategoryType>("CategoryType", Self::VT_CATEGORYTYPE, false)?
     .visit_field::<bool>("IsLegacy", Self::VT_ISLEGACY, false)?
     .visit_field::<i64>("OneGachaGoodsId", Self::VT_ONEGACHAGOODSID, false)?
     .visit_field::<i64>("TenGachaGoodsId", Self::VT_TENGACHAGOODSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GoodsDevName", Self::VT_GOODSDEVNAME, false)?
     .visit_field::<GachaDisplayTag>("DisplayTag", Self::VT_DISPLAYTAG, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaBannerPath", Self::VT_GACHABANNERPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("VideoId", Self::VT_VIDEOID, false)?
     .visit_field::<i64>("LinkedRobbyBannerId", Self::VT_LINKEDROBBYBANNERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("InfoCharacterId", Self::VT_INFOCHARACTERID, false)?
     .visit_field::<bool>("SalePeriodVisible", Self::VT_SALEPERIODVISIBLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodFrom", Self::VT_SALEPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodTo", Self::VT_SALEPERIODTO, false)?
     .visit_field::<i64>("RecruitCoinId", Self::VT_RECRUITCOINID, false)?
     .visit_field::<i64>("RecruitSellectionShopId", Self::VT_RECRUITSELLECTIONSHOPID, false)?
     .visit_field::<i64>("PurchaseCooltimeMin", Self::VT_PURCHASECOOLTIMEMIN, false)?
     .visit_field::<i64>("PurchaseCountLimit", Self::VT_PURCHASECOUNTLIMIT, false)?
     .visit_field::<PurchaseCountResetType>("PurchaseCountResetType", Self::VT_PURCHASECOUNTRESETTYPE, false)?
     .visit_field::<bool>("IsNewbie", Self::VT_ISNEWBIE, false)?
     .visit_field::<bool>("IsSelectRecruit", Self::VT_ISSELECTRECRUIT, false)?
     .visit_field::<i64>("DirectPayInvisibleTokenId", Self::VT_DIRECTPAYINVISIBLETOKENID, false)?
     .visit_field::<i64>("DirectPayAndroidShopCashId", Self::VT_DIRECTPAYANDROIDSHOPCASHID, false)?
     .visit_field::<i64>("DirectPayAppleShopCashId", Self::VT_DIRECTPAYAPPLESHOPCASHID, false)?
     .visit_field::<i64>("SelectAbleGachaGroupId", Self::VT_SELECTABLEGACHAGROUPID, false)?
     .visit_field::<i64>("MaxSelectCharacterNum", Self::VT_MAXSELECTCHARACTERNUM, false)?
     .visit_field::<i64>("DirectPayOneStoreShopCashId", Self::VT_DIRECTPAYONESTORESHOPCASHID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProbabilityUrlDev", Self::VT_PROBABILITYURLDEV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProbabilityUrlLive", Self::VT_PROBABILITYURLLIVE, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopRecruitExcelArgs<'a> {
    pub Id: i64,
    pub CategoryType: ShopCategoryType,
    pub IsLegacy: bool,
    pub OneGachaGoodsId: i64,
    pub TenGachaGoodsId: i64,
    pub GoodsDevName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DisplayTag: GachaDisplayTag,
    pub DisplayOrder: i64,
    pub GachaBannerPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub LinkedRobbyBannerId: i64,
    pub InfoCharacterId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub SalePeriodVisible: bool,
    pub SalePeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SalePeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RecruitCoinId: i64,
    pub RecruitSellectionShopId: i64,
    pub PurchaseCooltimeMin: i64,
    pub PurchaseCountLimit: i64,
    pub PurchaseCountResetType: PurchaseCountResetType,
    pub IsNewbie: bool,
    pub IsSelectRecruit: bool,
    pub DirectPayInvisibleTokenId: i64,
    pub DirectPayAndroidShopCashId: i64,
    pub DirectPayAppleShopCashId: i64,
    pub SelectAbleGachaGroupId: i64,
    pub MaxSelectCharacterNum: i64,
    pub DirectPayOneStoreShopCashId: i64,
    pub ProbabilityUrlDev: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProbabilityUrlLive: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ShopRecruitExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShopRecruitExcelArgs {
      Id: 0,
      CategoryType: ShopCategoryType::General,
      IsLegacy: false,
      OneGachaGoodsId: 0,
      TenGachaGoodsId: 0,
      GoodsDevName: None,
      DisplayTag: GachaDisplayTag::None,
      DisplayOrder: 0,
      GachaBannerPath: None,
      VideoId: None,
      LinkedRobbyBannerId: 0,
      InfoCharacterId: None,
      SalePeriodVisible: false,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      RecruitCoinId: 0,
      RecruitSellectionShopId: 0,
      PurchaseCooltimeMin: 0,
      PurchaseCountLimit: 0,
      PurchaseCountResetType: PurchaseCountResetType::None,
      IsNewbie: false,
      IsSelectRecruit: false,
      DirectPayInvisibleTokenId: 0,
      DirectPayAndroidShopCashId: 0,
      DirectPayAppleShopCashId: 0,
      SelectAbleGachaGroupId: 0,
      MaxSelectCharacterNum: 0,
      DirectPayOneStoreShopCashId: 0,
      ProbabilityUrlDev: None,
      ProbabilityUrlLive: None,
    }
  }
}

impl Serialize for ShopRecruitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopRecruitExcel", 30)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CategoryType", &self.CategoryType())?;
      s.serialize_field("IsLegacy", &self.IsLegacy())?;
      s.serialize_field("OneGachaGoodsId", &self.OneGachaGoodsId())?;
      s.serialize_field("TenGachaGoodsId", &self.TenGachaGoodsId())?;
      if let Some(f) = self.GoodsDevName() {
        s.serialize_field("GoodsDevName", &f)?;
      } else {
        s.skip_field("GoodsDevName")?;
      }
      s.serialize_field("DisplayTag", &self.DisplayTag())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      if let Some(f) = self.GachaBannerPath() {
        s.serialize_field("GachaBannerPath", &f)?;
      } else {
        s.skip_field("GachaBannerPath")?;
      }
      if let Some(f) = self.VideoId() {
        s.serialize_field("VideoId", &f)?;
      } else {
        s.skip_field("VideoId")?;
      }
      s.serialize_field("LinkedRobbyBannerId", &self.LinkedRobbyBannerId())?;
      if let Some(f) = self.InfoCharacterId() {
        s.serialize_field("InfoCharacterId", &f)?;
      } else {
        s.skip_field("InfoCharacterId")?;
      }
      s.serialize_field("SalePeriodVisible", &self.SalePeriodVisible())?;
      if let Some(f) = self.SalePeriodFrom() {
        s.serialize_field("SalePeriodFrom", &f)?;
      } else {
        s.skip_field("SalePeriodFrom")?;
      }
      if let Some(f) = self.SalePeriodTo() {
        s.serialize_field("SalePeriodTo", &f)?;
      } else {
        s.skip_field("SalePeriodTo")?;
      }
      s.serialize_field("RecruitCoinId", &self.RecruitCoinId())?;
      s.serialize_field("RecruitSellectionShopId", &self.RecruitSellectionShopId())?;
      s.serialize_field("PurchaseCooltimeMin", &self.PurchaseCooltimeMin())?;
      s.serialize_field("PurchaseCountLimit", &self.PurchaseCountLimit())?;
      s.serialize_field("PurchaseCountResetType", &self.PurchaseCountResetType())?;
      s.serialize_field("IsNewbie", &self.IsNewbie())?;
      s.serialize_field("IsSelectRecruit", &self.IsSelectRecruit())?;
      s.serialize_field("DirectPayInvisibleTokenId", &self.DirectPayInvisibleTokenId())?;
      s.serialize_field("DirectPayAndroidShopCashId", &self.DirectPayAndroidShopCashId())?;
      s.serialize_field("DirectPayAppleShopCashId", &self.DirectPayAppleShopCashId())?;
      s.serialize_field("SelectAbleGachaGroupId", &self.SelectAbleGachaGroupId())?;
      s.serialize_field("MaxSelectCharacterNum", &self.MaxSelectCharacterNum())?;
      s.serialize_field("DirectPayOneStoreShopCashId", &self.DirectPayOneStoreShopCashId())?;
      if let Some(f) = self.ProbabilityUrlDev() {
        s.serialize_field("ProbabilityUrlDev", &f)?;
      } else {
        s.skip_field("ProbabilityUrlDev")?;
      }
      if let Some(f) = self.ProbabilityUrlLive() {
        s.serialize_field("ProbabilityUrlLive", &f)?;
      } else {
        s.skip_field("ProbabilityUrlLive")?;
      }
    s.end()
  }
}

pub struct ShopRecruitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopRecruitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CategoryType(&mut self, CategoryType: ShopCategoryType) {
    self.fbb_.push_slot::<ShopCategoryType>(ShopRecruitExcel::VT_CATEGORYTYPE, CategoryType, ShopCategoryType::General);
  }
  #[inline]
  pub fn add_IsLegacy(&mut self, IsLegacy: bool) {
    self.fbb_.push_slot::<bool>(ShopRecruitExcel::VT_ISLEGACY, IsLegacy, false);
  }
  #[inline]
  pub fn add_OneGachaGoodsId(&mut self, OneGachaGoodsId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_ONEGACHAGOODSID, OneGachaGoodsId, 0);
  }
  #[inline]
  pub fn add_TenGachaGoodsId(&mut self, TenGachaGoodsId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_TENGACHAGOODSID, TenGachaGoodsId, 0);
  }
  #[inline]
  pub fn add_GoodsDevName(&mut self, GoodsDevName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_GOODSDEVNAME, GoodsDevName);
  }
  #[inline]
  pub fn add_DisplayTag(&mut self, DisplayTag: GachaDisplayTag) {
    self.fbb_.push_slot::<GachaDisplayTag>(ShopRecruitExcel::VT_DISPLAYTAG, DisplayTag, GachaDisplayTag::None);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_GachaBannerPath(&mut self, GachaBannerPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_GACHABANNERPATH, GachaBannerPath);
  }
  #[inline]
  pub fn add_VideoId(&mut self, VideoId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_VIDEOID, VideoId);
  }
  #[inline]
  pub fn add_LinkedRobbyBannerId(&mut self, LinkedRobbyBannerId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_LINKEDROBBYBANNERID, LinkedRobbyBannerId, 0);
  }
  #[inline]
  pub fn add_InfoCharacterId(&mut self, InfoCharacterId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_INFOCHARACTERID, InfoCharacterId);
  }
  #[inline]
  pub fn add_SalePeriodVisible(&mut self, SalePeriodVisible: bool) {
    self.fbb_.push_slot::<bool>(ShopRecruitExcel::VT_SALEPERIODVISIBLE, SalePeriodVisible, false);
  }
  #[inline]
  pub fn add_SalePeriodFrom(&mut self, SalePeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_SALEPERIODFROM, SalePeriodFrom);
  }
  #[inline]
  pub fn add_SalePeriodTo(&mut self, SalePeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_SALEPERIODTO, SalePeriodTo);
  }
  #[inline]
  pub fn add_RecruitCoinId(&mut self, RecruitCoinId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_RECRUITCOINID, RecruitCoinId, 0);
  }
  #[inline]
  pub fn add_RecruitSellectionShopId(&mut self, RecruitSellectionShopId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_RECRUITSELLECTIONSHOPID, RecruitSellectionShopId, 0);
  }
  #[inline]
  pub fn add_PurchaseCooltimeMin(&mut self, PurchaseCooltimeMin: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_PURCHASECOOLTIMEMIN, PurchaseCooltimeMin, 0);
  }
  #[inline]
  pub fn add_PurchaseCountLimit(&mut self, PurchaseCountLimit: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_PURCHASECOUNTLIMIT, PurchaseCountLimit, 0);
  }
  #[inline]
  pub fn add_PurchaseCountResetType(&mut self, PurchaseCountResetType: PurchaseCountResetType) {
    self.fbb_.push_slot::<PurchaseCountResetType>(ShopRecruitExcel::VT_PURCHASECOUNTRESETTYPE, PurchaseCountResetType, PurchaseCountResetType::None);
  }
  #[inline]
  pub fn add_IsNewbie(&mut self, IsNewbie: bool) {
    self.fbb_.push_slot::<bool>(ShopRecruitExcel::VT_ISNEWBIE, IsNewbie, false);
  }
  #[inline]
  pub fn add_IsSelectRecruit(&mut self, IsSelectRecruit: bool) {
    self.fbb_.push_slot::<bool>(ShopRecruitExcel::VT_ISSELECTRECRUIT, IsSelectRecruit, false);
  }
  #[inline]
  pub fn add_DirectPayInvisibleTokenId(&mut self, DirectPayInvisibleTokenId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_DIRECTPAYINVISIBLETOKENID, DirectPayInvisibleTokenId, 0);
  }
  #[inline]
  pub fn add_DirectPayAndroidShopCashId(&mut self, DirectPayAndroidShopCashId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_DIRECTPAYANDROIDSHOPCASHID, DirectPayAndroidShopCashId, 0);
  }
  #[inline]
  pub fn add_DirectPayAppleShopCashId(&mut self, DirectPayAppleShopCashId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_DIRECTPAYAPPLESHOPCASHID, DirectPayAppleShopCashId, 0);
  }
  #[inline]
  pub fn add_SelectAbleGachaGroupId(&mut self, SelectAbleGachaGroupId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_SELECTABLEGACHAGROUPID, SelectAbleGachaGroupId, 0);
  }
  #[inline]
  pub fn add_MaxSelectCharacterNum(&mut self, MaxSelectCharacterNum: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_MAXSELECTCHARACTERNUM, MaxSelectCharacterNum, 0);
  }
  #[inline]
  pub fn add_DirectPayOneStoreShopCashId(&mut self, DirectPayOneStoreShopCashId: i64) {
    self.fbb_.push_slot::<i64>(ShopRecruitExcel::VT_DIRECTPAYONESTORESHOPCASHID, DirectPayOneStoreShopCashId, 0);
  }
  #[inline]
  pub fn add_ProbabilityUrlDev(&mut self, ProbabilityUrlDev: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_PROBABILITYURLDEV, ProbabilityUrlDev);
  }
  #[inline]
  pub fn add_ProbabilityUrlLive(&mut self, ProbabilityUrlLive: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopRecruitExcel::VT_PROBABILITYURLLIVE, ProbabilityUrlLive);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopRecruitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopRecruitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopRecruitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopRecruitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopRecruitExcel");
      ds.field("Id", &self.Id());
      ds.field("CategoryType", &self.CategoryType());
      ds.field("IsLegacy", &self.IsLegacy());
      ds.field("OneGachaGoodsId", &self.OneGachaGoodsId());
      ds.field("TenGachaGoodsId", &self.TenGachaGoodsId());
      ds.field("GoodsDevName", &self.GoodsDevName());
      ds.field("DisplayTag", &self.DisplayTag());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("GachaBannerPath", &self.GachaBannerPath());
      ds.field("VideoId", &self.VideoId());
      ds.field("LinkedRobbyBannerId", &self.LinkedRobbyBannerId());
      ds.field("InfoCharacterId", &self.InfoCharacterId());
      ds.field("SalePeriodVisible", &self.SalePeriodVisible());
      ds.field("SalePeriodFrom", &self.SalePeriodFrom());
      ds.field("SalePeriodTo", &self.SalePeriodTo());
      ds.field("RecruitCoinId", &self.RecruitCoinId());
      ds.field("RecruitSellectionShopId", &self.RecruitSellectionShopId());
      ds.field("PurchaseCooltimeMin", &self.PurchaseCooltimeMin());
      ds.field("PurchaseCountLimit", &self.PurchaseCountLimit());
      ds.field("PurchaseCountResetType", &self.PurchaseCountResetType());
      ds.field("IsNewbie", &self.IsNewbie());
      ds.field("IsSelectRecruit", &self.IsSelectRecruit());
      ds.field("DirectPayInvisibleTokenId", &self.DirectPayInvisibleTokenId());
      ds.field("DirectPayAndroidShopCashId", &self.DirectPayAndroidShopCashId());
      ds.field("DirectPayAppleShopCashId", &self.DirectPayAppleShopCashId());
      ds.field("SelectAbleGachaGroupId", &self.SelectAbleGachaGroupId());
      ds.field("MaxSelectCharacterNum", &self.MaxSelectCharacterNum());
      ds.field("DirectPayOneStoreShopCashId", &self.DirectPayOneStoreShopCashId());
      ds.field("ProbabilityUrlDev", &self.ProbabilityUrlDev());
      ds.field("ProbabilityUrlLive", &self.ProbabilityUrlLive());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopRecruitExcelT {
  pub Id: i64,
  pub CategoryType: ShopCategoryType,
  pub IsLegacy: bool,
  pub OneGachaGoodsId: i64,
  pub TenGachaGoodsId: i64,
  pub GoodsDevName: Option<String>,
  pub DisplayTag: GachaDisplayTag,
  pub DisplayOrder: i64,
  pub GachaBannerPath: Option<String>,
  pub VideoId: Option<Vec<i64>>,
  pub LinkedRobbyBannerId: i64,
  pub InfoCharacterId: Option<Vec<i64>>,
  pub SalePeriodVisible: bool,
  pub SalePeriodFrom: Option<String>,
  pub SalePeriodTo: Option<String>,
  pub RecruitCoinId: i64,
  pub RecruitSellectionShopId: i64,
  pub PurchaseCooltimeMin: i64,
  pub PurchaseCountLimit: i64,
  pub PurchaseCountResetType: PurchaseCountResetType,
  pub IsNewbie: bool,
  pub IsSelectRecruit: bool,
  pub DirectPayInvisibleTokenId: i64,
  pub DirectPayAndroidShopCashId: i64,
  pub DirectPayAppleShopCashId: i64,
  pub SelectAbleGachaGroupId: i64,
  pub MaxSelectCharacterNum: i64,
  pub DirectPayOneStoreShopCashId: i64,
  pub ProbabilityUrlDev: Option<String>,
  pub ProbabilityUrlLive: Option<String>,
}
impl Default for ShopRecruitExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CategoryType: ShopCategoryType::General,
      IsLegacy: false,
      OneGachaGoodsId: 0,
      TenGachaGoodsId: 0,
      GoodsDevName: None,
      DisplayTag: GachaDisplayTag::None,
      DisplayOrder: 0,
      GachaBannerPath: None,
      VideoId: None,
      LinkedRobbyBannerId: 0,
      InfoCharacterId: None,
      SalePeriodVisible: false,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      RecruitCoinId: 0,
      RecruitSellectionShopId: 0,
      PurchaseCooltimeMin: 0,
      PurchaseCountLimit: 0,
      PurchaseCountResetType: PurchaseCountResetType::None,
      IsNewbie: false,
      IsSelectRecruit: false,
      DirectPayInvisibleTokenId: 0,
      DirectPayAndroidShopCashId: 0,
      DirectPayAppleShopCashId: 0,
      SelectAbleGachaGroupId: 0,
      MaxSelectCharacterNum: 0,
      DirectPayOneStoreShopCashId: 0,
      ProbabilityUrlDev: None,
      ProbabilityUrlLive: None,
    }
  }
}
impl ShopRecruitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopRecruitExcel<'b>> {
    let Id = self.Id;
    let CategoryType = self.CategoryType;
    let IsLegacy = self.IsLegacy;
    let OneGachaGoodsId = self.OneGachaGoodsId;
    let TenGachaGoodsId = self.TenGachaGoodsId;
    let GoodsDevName = self.GoodsDevName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DisplayTag = self.DisplayTag;
    let DisplayOrder = self.DisplayOrder;
    let GachaBannerPath = self.GachaBannerPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoId = self.VideoId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LinkedRobbyBannerId = self.LinkedRobbyBannerId;
    let InfoCharacterId = self.InfoCharacterId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SalePeriodVisible = self.SalePeriodVisible;
    let SalePeriodFrom = self.SalePeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SalePeriodTo = self.SalePeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RecruitCoinId = self.RecruitCoinId;
    let RecruitSellectionShopId = self.RecruitSellectionShopId;
    let PurchaseCooltimeMin = self.PurchaseCooltimeMin;
    let PurchaseCountLimit = self.PurchaseCountLimit;
    let PurchaseCountResetType = self.PurchaseCountResetType;
    let IsNewbie = self.IsNewbie;
    let IsSelectRecruit = self.IsSelectRecruit;
    let DirectPayInvisibleTokenId = self.DirectPayInvisibleTokenId;
    let DirectPayAndroidShopCashId = self.DirectPayAndroidShopCashId;
    let DirectPayAppleShopCashId = self.DirectPayAppleShopCashId;
    let SelectAbleGachaGroupId = self.SelectAbleGachaGroupId;
    let MaxSelectCharacterNum = self.MaxSelectCharacterNum;
    let DirectPayOneStoreShopCashId = self.DirectPayOneStoreShopCashId;
    let ProbabilityUrlDev = self.ProbabilityUrlDev.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProbabilityUrlLive = self.ProbabilityUrlLive.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ShopRecruitExcel::create(_fbb, &ShopRecruitExcelArgs{
      Id,
      CategoryType,
      IsLegacy,
      OneGachaGoodsId,
      TenGachaGoodsId,
      GoodsDevName,
      DisplayTag,
      DisplayOrder,
      GachaBannerPath,
      VideoId,
      LinkedRobbyBannerId,
      InfoCharacterId,
      SalePeriodVisible,
      SalePeriodFrom,
      SalePeriodTo,
      RecruitCoinId,
      RecruitSellectionShopId,
      PurchaseCooltimeMin,
      PurchaseCountLimit,
      PurchaseCountResetType,
      IsNewbie,
      IsSelectRecruit,
      DirectPayInvisibleTokenId,
      DirectPayAndroidShopCashId,
      DirectPayAppleShopCashId,
      SelectAbleGachaGroupId,
      MaxSelectCharacterNum,
      DirectPayOneStoreShopCashId,
      ProbabilityUrlDev,
      ProbabilityUrlLive,
    })
  }
}
