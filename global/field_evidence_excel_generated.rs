// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldEvidenceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldEvidenceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldEvidenceExcel<'a> {
  type Inner = FieldEvidenceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldEvidenceExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_SEASONID: flatbuffers::VOffsetT = 6;
  pub const VT_NAMELOCALIZEKEY: flatbuffers::VOffsetT = 8;
  pub const VT_DESCRIPTIONLOCALIZEKEY: flatbuffers::VOffsetT = 10;
  pub const VT_DETAILLOCALIZEKEY: flatbuffers::VOffsetT = 12;
  pub const VT_IMAGEPATH: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldEvidenceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldEvidenceExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldEvidenceExcel<'bldr>> {
    let mut builder = FieldEvidenceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldEvidence");
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.ImagePath {
        builder.add_ImagePath(x);
      }
      if let Some(x) = args.DetailLocalizeKey {
        builder.add_DetailLocalizeKey(x);
      }
      if let Some(x) = args.DescriptionLocalizeKey {
        builder.add_DescriptionLocalizeKey(x);
      }
      if let Some(x) = args.NameLocalizeKey {
        builder.add_NameLocalizeKey(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> FieldEvidenceExcelT {
    let key = table_encryption_service::create_key(b"FieldEvidence");
      let UniqueId = self.UniqueId();
      let SeasonId = self.SeasonId();
    let NameLocalizeKey = self.NameLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DescriptionLocalizeKey = self.DescriptionLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DetailLocalizeKey = self.DetailLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ImagePath = self.ImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    FieldEvidenceExcelT {
      UniqueId,
      SeasonId,
      NameLocalizeKey,
      DescriptionLocalizeKey,
      DetailLocalizeKey,
      ImagePath,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldEvidenceExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldEvidenceExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldEvidenceExcel::VT_NAMELOCALIZEKEY, None)}
  }
  #[inline]
  pub fn DescriptionLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldEvidenceExcel::VT_DESCRIPTIONLOCALIZEKEY, None)}
  }
  #[inline]
  pub fn DetailLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldEvidenceExcel::VT_DETAILLOCALIZEKEY, None)}
  }
  #[inline]
  pub fn ImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldEvidenceExcel::VT_IMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for FieldEvidenceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NameLocalizeKey", Self::VT_NAMELOCALIZEKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DescriptionLocalizeKey", Self::VT_DESCRIPTIONLOCALIZEKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DetailLocalizeKey", Self::VT_DETAILLOCALIZEKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePath", Self::VT_IMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldEvidenceExcelArgs<'a> {
    pub UniqueId: i64,
    pub SeasonId: i64,
    pub NameLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DescriptionLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DetailLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for FieldEvidenceExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldEvidenceExcelArgs {
      UniqueId: 0,
      SeasonId: 0,
      NameLocalizeKey: None,
      DescriptionLocalizeKey: None,
      DetailLocalizeKey: None,
      ImagePath: None,
    }
  }
}

impl Serialize for FieldEvidenceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldEvidenceExcel", 6)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      if let Some(f) = self.NameLocalizeKey() {
        s.serialize_field("NameLocalizeKey", &f)?;
      } else {
        s.skip_field("NameLocalizeKey")?;
      }
      if let Some(f) = self.DescriptionLocalizeKey() {
        s.serialize_field("DescriptionLocalizeKey", &f)?;
      } else {
        s.skip_field("DescriptionLocalizeKey")?;
      }
      if let Some(f) = self.DetailLocalizeKey() {
        s.serialize_field("DetailLocalizeKey", &f)?;
      } else {
        s.skip_field("DetailLocalizeKey")?;
      }
      if let Some(f) = self.ImagePath() {
        s.serialize_field("ImagePath", &f)?;
      } else {
        s.skip_field("ImagePath")?;
      }
    s.end()
  }
}

pub struct FieldEvidenceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldEvidenceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldEvidenceExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(FieldEvidenceExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_NameLocalizeKey(&mut self, NameLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldEvidenceExcel::VT_NAMELOCALIZEKEY, NameLocalizeKey);
  }
  #[inline]
  pub fn add_DescriptionLocalizeKey(&mut self, DescriptionLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldEvidenceExcel::VT_DESCRIPTIONLOCALIZEKEY, DescriptionLocalizeKey);
  }
  #[inline]
  pub fn add_DetailLocalizeKey(&mut self, DetailLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldEvidenceExcel::VT_DETAILLOCALIZEKEY, DetailLocalizeKey);
  }
  #[inline]
  pub fn add_ImagePath(&mut self, ImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldEvidenceExcel::VT_IMAGEPATH, ImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldEvidenceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldEvidenceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldEvidenceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldEvidenceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldEvidenceExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("SeasonId", &self.SeasonId());
      ds.field("NameLocalizeKey", &self.NameLocalizeKey());
      ds.field("DescriptionLocalizeKey", &self.DescriptionLocalizeKey());
      ds.field("DetailLocalizeKey", &self.DetailLocalizeKey());
      ds.field("ImagePath", &self.ImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldEvidenceExcelT {
  pub UniqueId: i64,
  pub SeasonId: i64,
  pub NameLocalizeKey: Option<String>,
  pub DescriptionLocalizeKey: Option<String>,
  pub DetailLocalizeKey: Option<String>,
  pub ImagePath: Option<String>,
}
impl Default for FieldEvidenceExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      SeasonId: 0,
      NameLocalizeKey: None,
      DescriptionLocalizeKey: None,
      DetailLocalizeKey: None,
      ImagePath: None,
    }
  }
}
impl FieldEvidenceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldEvidenceExcel<'b>> {
    let UniqueId = self.UniqueId;
    let SeasonId = self.SeasonId;
    let NameLocalizeKey = self.NameLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DescriptionLocalizeKey = self.DescriptionLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DetailLocalizeKey = self.DetailLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ImagePath = self.ImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    FieldEvidenceExcel::create(_fbb, &FieldEvidenceExcelArgs{
      UniqueId,
      SeasonId,
      NameLocalizeKey,
      DescriptionLocalizeKey,
      DetailLocalizeKey,
      ImagePath,
    })
  }
}
