// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SkillAdditionalTooltipExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SkillAdditionalTooltipExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SkillAdditionalTooltipExcel<'a> {
  type Inner = SkillAdditionalTooltipExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SkillAdditionalTooltipExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_ADDITIONALSKILLGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_SHOWSKILLSLOT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SkillAdditionalTooltipExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SkillAdditionalTooltipExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<SkillAdditionalTooltipExcel<'bldr>> {
    let mut builder = SkillAdditionalTooltipExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"SkillAdditionalTooltip");
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      if let Some(x) = args.ShowSkillSlot {
        builder.add_ShowSkillSlot(x);
      }
      if let Some(x) = args.AdditionalSkillGroupId {
        builder.add_AdditionalSkillGroupId(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> SkillAdditionalTooltipExcelT {
    let key = table_encryption_service::create_key(b"SkillAdditionalTooltip");
      let GroupId = self.GroupId();
    let AdditionalSkillGroupId = self.AdditionalSkillGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ShowSkillSlot = self.ShowSkillSlot().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    SkillAdditionalTooltipExcelT {
      GroupId,
      AdditionalSkillGroupId,
      ShowSkillSlot,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SkillAdditionalTooltipExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AdditionalSkillGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillAdditionalTooltipExcel::VT_ADDITIONALSKILLGROUPID, None)}
  }
  #[inline]
  pub fn ShowSkillSlot(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkillAdditionalTooltipExcel::VT_SHOWSKILLSLOT, None)}
  }
}

impl flatbuffers::Verifiable for SkillAdditionalTooltipExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AdditionalSkillGroupId", Self::VT_ADDITIONALSKILLGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShowSkillSlot", Self::VT_SHOWSKILLSLOT, false)?
     .finish();
    Ok(())
  }
}
pub struct SkillAdditionalTooltipExcelArgs<'a> {
    pub GroupId: i64,
    pub AdditionalSkillGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShowSkillSlot: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SkillAdditionalTooltipExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    SkillAdditionalTooltipExcelArgs {
      GroupId: 0,
      AdditionalSkillGroupId: None,
      ShowSkillSlot: None,
    }
  }
}

impl Serialize for SkillAdditionalTooltipExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SkillAdditionalTooltipExcel", 3)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      if let Some(f) = self.AdditionalSkillGroupId() {
        s.serialize_field("AdditionalSkillGroupId", &f)?;
      } else {
        s.skip_field("AdditionalSkillGroupId")?;
      }
      if let Some(f) = self.ShowSkillSlot() {
        s.serialize_field("ShowSkillSlot", &f)?;
      } else {
        s.skip_field("ShowSkillSlot")?;
      }
    s.end()
  }
}

pub struct SkillAdditionalTooltipExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SkillAdditionalTooltipExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(SkillAdditionalTooltipExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_AdditionalSkillGroupId(&mut self, AdditionalSkillGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillAdditionalTooltipExcel::VT_ADDITIONALSKILLGROUPID, AdditionalSkillGroupId);
  }
  #[inline]
  pub fn add_ShowSkillSlot(&mut self, ShowSkillSlot: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkillAdditionalTooltipExcel::VT_SHOWSKILLSLOT, ShowSkillSlot);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SkillAdditionalTooltipExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SkillAdditionalTooltipExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SkillAdditionalTooltipExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SkillAdditionalTooltipExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SkillAdditionalTooltipExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("AdditionalSkillGroupId", &self.AdditionalSkillGroupId());
      ds.field("ShowSkillSlot", &self.ShowSkillSlot());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SkillAdditionalTooltipExcelT {
  pub GroupId: i64,
  pub AdditionalSkillGroupId: Option<String>,
  pub ShowSkillSlot: Option<String>,
}
impl Default for SkillAdditionalTooltipExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      AdditionalSkillGroupId: None,
      ShowSkillSlot: None,
    }
  }
}
impl SkillAdditionalTooltipExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SkillAdditionalTooltipExcel<'b>> {
    let GroupId = self.GroupId;
    let AdditionalSkillGroupId = self.AdditionalSkillGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShowSkillSlot = self.ShowSkillSlot.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SkillAdditionalTooltipExcel::create(_fbb, &SkillAdditionalTooltipExcelArgs{
      GroupId,
      AdditionalSkillGroupId,
      ShowSkillSlot,
    })
  }
}
