// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGEnemyGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGEnemyGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGEnemyGroupExcel<'a> {
  type Inner = MinigameCCGEnemyGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGEnemyGroupExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_ENEMYAI: flatbuffers::VOffsetT = 6;
  pub const VT_ENEMYBGM: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEENEMYGROUPNAME: flatbuffers::VOffsetT = 10;
  pub const VT_LOCALIZEENEMYGROUPDESC: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGEnemyGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGEnemyGroupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGEnemyGroupExcel<'bldr>> {
    let mut builder = MinigameCCGEnemyGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGEnemyGroup");
      let x = args.EnemyBGM;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnemyBGM(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.LocalizeEnemyGroupDesc;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEnemyGroupDesc(x);
      let x = args.LocalizeEnemyGroupName;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEnemyGroupName(x);
      if let Some(x) = args.EnemyAI {
        builder.add_EnemyAI(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGEnemyGroupExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGEnemyGroup");
      let GroupId = self.GroupId();
    let EnemyAI = self.EnemyAI().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EnemyBGM = self.EnemyBGM();
      let LocalizeEnemyGroupName = self.LocalizeEnemyGroupName();
      let LocalizeEnemyGroupDesc = self.LocalizeEnemyGroupDesc();
    MinigameCCGEnemyGroupExcelT {
      GroupId,
      EnemyAI,
      EnemyBGM,
      LocalizeEnemyGroupName,
      LocalizeEnemyGroupDesc,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGEnemyGroupExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EnemyAI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGEnemyGroupExcel::VT_ENEMYAI, None)}
  }
  #[inline]
  pub fn EnemyBGM(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGEnemyGroupExcel::VT_ENEMYBGM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEnemyGroupName(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGEnemyGroupExcel::VT_LOCALIZEENEMYGROUPNAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEnemyGroupDesc(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MinigameCCGEnemyGroupExcel::VT_LOCALIZEENEMYGROUPDESC, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGEnemyGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EnemyAI", Self::VT_ENEMYAI, false)?
     .visit_field::<i64>("EnemyBGM", Self::VT_ENEMYBGM, false)?
     .visit_field::<u32>("LocalizeEnemyGroupName", Self::VT_LOCALIZEENEMYGROUPNAME, false)?
     .visit_field::<u32>("LocalizeEnemyGroupDesc", Self::VT_LOCALIZEENEMYGROUPDESC, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGEnemyGroupExcelArgs<'a> {
    pub GroupId: i64,
    pub EnemyAI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EnemyBGM: i64,
    pub LocalizeEnemyGroupName: u32,
    pub LocalizeEnemyGroupDesc: u32,
}
impl<'a> Default for MinigameCCGEnemyGroupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGEnemyGroupExcelArgs {
      GroupId: 0,
      EnemyAI: None,
      EnemyBGM: 0,
      LocalizeEnemyGroupName: 0,
      LocalizeEnemyGroupDesc: 0,
    }
  }
}

impl Serialize for MinigameCCGEnemyGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGEnemyGroupExcel", 5)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      if let Some(f) = self.EnemyAI() {
        s.serialize_field("EnemyAI", &f)?;
      } else {
        s.skip_field("EnemyAI")?;
      }
      s.serialize_field("EnemyBGM", &self.EnemyBGM())?;
      s.serialize_field("LocalizeEnemyGroupName", &self.LocalizeEnemyGroupName())?;
      s.serialize_field("LocalizeEnemyGroupDesc", &self.LocalizeEnemyGroupDesc())?;
    s.end()
  }
}

pub struct MinigameCCGEnemyGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGEnemyGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGEnemyGroupExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_EnemyAI(&mut self, EnemyAI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGEnemyGroupExcel::VT_ENEMYAI, EnemyAI);
  }
  #[inline]
  pub fn add_EnemyBGM(&mut self, EnemyBGM: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGEnemyGroupExcel::VT_ENEMYBGM, EnemyBGM, 0);
  }
  #[inline]
  pub fn add_LocalizeEnemyGroupName(&mut self, LocalizeEnemyGroupName: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGEnemyGroupExcel::VT_LOCALIZEENEMYGROUPNAME, LocalizeEnemyGroupName, 0);
  }
  #[inline]
  pub fn add_LocalizeEnemyGroupDesc(&mut self, LocalizeEnemyGroupDesc: u32) {
    self.fbb_.push_slot::<u32>(MinigameCCGEnemyGroupExcel::VT_LOCALIZEENEMYGROUPDESC, LocalizeEnemyGroupDesc, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGEnemyGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGEnemyGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGEnemyGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGEnemyGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGEnemyGroupExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("EnemyAI", &self.EnemyAI());
      ds.field("EnemyBGM", &self.EnemyBGM());
      ds.field("LocalizeEnemyGroupName", &self.LocalizeEnemyGroupName());
      ds.field("LocalizeEnemyGroupDesc", &self.LocalizeEnemyGroupDesc());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGEnemyGroupExcelT {
  pub GroupId: i64,
  pub EnemyAI: Option<String>,
  pub EnemyBGM: i64,
  pub LocalizeEnemyGroupName: u32,
  pub LocalizeEnemyGroupDesc: u32,
}
impl Default for MinigameCCGEnemyGroupExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      EnemyAI: None,
      EnemyBGM: 0,
      LocalizeEnemyGroupName: 0,
      LocalizeEnemyGroupDesc: 0,
    }
  }
}
impl MinigameCCGEnemyGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGEnemyGroupExcel<'b>> {
    let GroupId = self.GroupId;
    let EnemyAI = self.EnemyAI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EnemyBGM = self.EnemyBGM;
    let LocalizeEnemyGroupName = self.LocalizeEnemyGroupName;
    let LocalizeEnemyGroupDesc = self.LocalizeEnemyGroupDesc;
    MinigameCCGEnemyGroupExcel::create(_fbb, &MinigameCCGEnemyGroupExcelArgs{
      GroupId,
      EnemyAI,
      EnemyBGM,
      LocalizeEnemyGroupName,
      LocalizeEnemyGroupDesc,
    })
  }
}
