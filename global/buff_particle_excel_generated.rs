// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BuffParticleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BuffParticleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BuffParticleExcel<'a> {
  type Inner = BuffParticleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BuffParticleExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUENAME: flatbuffers::VOffsetT = 6;
  pub const VT_BUFFTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_BUFFNAME: flatbuffers::VOffsetT = 10;
  pub const VT_RESOURCEPATH: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BuffParticleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BuffParticleExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<BuffParticleExcel<'bldr>> {
    let mut builder = BuffParticleExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BuffParticle");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.ResourcePath {
        builder.add_ResourcePath(x);
      }
      if let Some(x) = args.BuffName {
        builder.add_BuffName(x);
      }
      if let Some(x) = args.BuffType {
        builder.add_BuffType(x);
      }
      if let Some(x) = args.UniqueName {
        builder.add_UniqueName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> BuffParticleExcelT {
    let key = table_encryption_service::create_key(b"BuffParticle");
      let UniqueId = self.UniqueId();
    let UniqueName = self.UniqueName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BuffType = self.BuffType().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BuffName = self.BuffName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ResourcePath = self.ResourcePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    BuffParticleExcelT {
      UniqueId,
      UniqueName,
      BuffType,
      BuffName,
      ResourcePath,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BuffParticleExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BuffParticleExcel::VT_UNIQUENAME, None)}
  }
  #[inline]
  pub fn BuffType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BuffParticleExcel::VT_BUFFTYPE, None)}
  }
  #[inline]
  pub fn BuffName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BuffParticleExcel::VT_BUFFNAME, None)}
  }
  #[inline]
  pub fn ResourcePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BuffParticleExcel::VT_RESOURCEPATH, None)}
  }
}

impl flatbuffers::Verifiable for BuffParticleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("UniqueName", Self::VT_UNIQUENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffType", Self::VT_BUFFTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuffName", Self::VT_BUFFNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ResourcePath", Self::VT_RESOURCEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct BuffParticleExcelArgs<'a> {
    pub UniqueId: i64,
    pub UniqueName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BuffName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ResourcePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for BuffParticleExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    BuffParticleExcelArgs {
      UniqueId: 0,
      UniqueName: None,
      BuffType: None,
      BuffName: None,
      ResourcePath: None,
    }
  }
}

impl Serialize for BuffParticleExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BuffParticleExcel", 5)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      if let Some(f) = self.UniqueName() {
        s.serialize_field("UniqueName", &f)?;
      } else {
        s.skip_field("UniqueName")?;
      }
      if let Some(f) = self.BuffType() {
        s.serialize_field("BuffType", &f)?;
      } else {
        s.skip_field("BuffType")?;
      }
      if let Some(f) = self.BuffName() {
        s.serialize_field("BuffName", &f)?;
      } else {
        s.skip_field("BuffName")?;
      }
      if let Some(f) = self.ResourcePath() {
        s.serialize_field("ResourcePath", &f)?;
      } else {
        s.skip_field("ResourcePath")?;
      }
    s.end()
  }
}

pub struct BuffParticleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BuffParticleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(BuffParticleExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_UniqueName(&mut self, UniqueName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BuffParticleExcel::VT_UNIQUENAME, UniqueName);
  }
  #[inline]
  pub fn add_BuffType(&mut self, BuffType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BuffParticleExcel::VT_BUFFTYPE, BuffType);
  }
  #[inline]
  pub fn add_BuffName(&mut self, BuffName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BuffParticleExcel::VT_BUFFNAME, BuffName);
  }
  #[inline]
  pub fn add_ResourcePath(&mut self, ResourcePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BuffParticleExcel::VT_RESOURCEPATH, ResourcePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BuffParticleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BuffParticleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BuffParticleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BuffParticleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BuffParticleExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("UniqueName", &self.UniqueName());
      ds.field("BuffType", &self.BuffType());
      ds.field("BuffName", &self.BuffName());
      ds.field("ResourcePath", &self.ResourcePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BuffParticleExcelT {
  pub UniqueId: i64,
  pub UniqueName: Option<String>,
  pub BuffType: Option<String>,
  pub BuffName: Option<String>,
  pub ResourcePath: Option<String>,
}
impl Default for BuffParticleExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      UniqueName: None,
      BuffType: None,
      BuffName: None,
      ResourcePath: None,
    }
  }
}
impl BuffParticleExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BuffParticleExcel<'b>> {
    let UniqueId = self.UniqueId;
    let UniqueName = self.UniqueName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffType = self.BuffType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BuffName = self.BuffName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ResourcePath = self.ResourcePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    BuffParticleExcel::create(_fbb, &BuffParticleExcelArgs{
      UniqueId,
      UniqueName,
      BuffType,
      BuffName,
      ResourcePath,
    })
  }
}
