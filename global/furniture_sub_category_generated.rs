// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FURNITURE_SUB_CATEGORY: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FURNITURE_SUB_CATEGORY: i32 = 16;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FURNITURE_SUB_CATEGORY: [FurnitureSubCategory; 17] = [
  FurnitureSubCategory::Table,
  FurnitureSubCategory::Closet,
  FurnitureSubCategory::Chair,
  FurnitureSubCategory::Bed,
  FurnitureSubCategory::Prop,
  FurnitureSubCategory::FurnitureEtc,
  FurnitureSubCategory::FurnitureSubCategory1,
  FurnitureSubCategory::HomeAppliance,
  FurnitureSubCategory::WallDecoration,
  FurnitureSubCategory::FloorDecoration,
  FurnitureSubCategory::DecorationEtc,
  FurnitureSubCategory::DecorationSubCategory1,
  FurnitureSubCategory::Floor,
  FurnitureSubCategory::Background,
  FurnitureSubCategory::Wallpaper,
  FurnitureSubCategory::InteriorsSubCategory1,
  FurnitureSubCategory::All,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct FurnitureSubCategory(pub i32);
#[allow(non_upper_case_globals)]
impl FurnitureSubCategory {
  pub const Table: Self = Self(0);
  pub const Closet: Self = Self(1);
  pub const Chair: Self = Self(2);
  pub const Bed: Self = Self(3);
  pub const Prop: Self = Self(4);
  pub const FurnitureEtc: Self = Self(5);
  pub const FurnitureSubCategory1: Self = Self(6);
  pub const HomeAppliance: Self = Self(7);
  pub const WallDecoration: Self = Self(8);
  pub const FloorDecoration: Self = Self(9);
  pub const DecorationEtc: Self = Self(10);
  pub const DecorationSubCategory1: Self = Self(11);
  pub const Floor: Self = Self(12);
  pub const Background: Self = Self(13);
  pub const Wallpaper: Self = Self(14);
  pub const InteriorsSubCategory1: Self = Self(15);
  pub const All: Self = Self(16);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 16;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Table,
    Self::Closet,
    Self::Chair,
    Self::Bed,
    Self::Prop,
    Self::FurnitureEtc,
    Self::FurnitureSubCategory1,
    Self::HomeAppliance,
    Self::WallDecoration,
    Self::FloorDecoration,
    Self::DecorationEtc,
    Self::DecorationSubCategory1,
    Self::Floor,
    Self::Background,
    Self::Wallpaper,
    Self::InteriorsSubCategory1,
    Self::All,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Table => Some("Table"),
      Self::Closet => Some("Closet"),
      Self::Chair => Some("Chair"),
      Self::Bed => Some("Bed"),
      Self::Prop => Some("Prop"),
      Self::FurnitureEtc => Some("FurnitureEtc"),
      Self::FurnitureSubCategory1 => Some("FurnitureSubCategory1"),
      Self::HomeAppliance => Some("HomeAppliance"),
      Self::WallDecoration => Some("WallDecoration"),
      Self::FloorDecoration => Some("FloorDecoration"),
      Self::DecorationEtc => Some("DecorationEtc"),
      Self::DecorationSubCategory1 => Some("DecorationSubCategory1"),
      Self::Floor => Some("Floor"),
      Self::Background => Some("Background"),
      Self::Wallpaper => Some("Wallpaper"),
      Self::InteriorsSubCategory1 => Some("InteriorsSubCategory1"),
      Self::All => Some("All"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for FurnitureSubCategory {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for FurnitureSubCategory {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("FurnitureSubCategory", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for FurnitureSubCategory {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for FurnitureSubCategory {
    type Output = FurnitureSubCategory;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for FurnitureSubCategory {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for FurnitureSubCategory {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for FurnitureSubCategory {}
