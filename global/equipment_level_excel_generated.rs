// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EquipmentLevelExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EquipmentLevelExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EquipmentLevelExcel<'a> {
  type Inner = EquipmentLevelExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EquipmentLevelExcel<'a> {
  pub const VT_LEVEL: flatbuffers::VOffsetT = 4;
  pub const VT_TIERLEVELEXP: flatbuffers::VOffsetT = 6;
  pub const VT_TOTALEXP: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EquipmentLevelExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EquipmentLevelExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EquipmentLevelExcel<'bldr>> {
    let mut builder = EquipmentLevelExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EquipmentLevel");
      if let Some(x) = args.TotalExp {
        builder.add_TotalExp(x);
      }
      if let Some(x) = args.TierLevelExp {
        builder.add_TierLevelExp(x);
      }
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Level(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EquipmentLevelExcelT {
    let key = table_encryption_service::create_key(b"EquipmentLevel");
      let Level = self.Level();
    let TierLevelExp = self.TierLevelExp().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let TotalExp = self.TotalExp().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    EquipmentLevelExcelT {
      Level,
      TierLevelExp,
      TotalExp,
    }
  }

  #[inline]
  pub fn Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EquipmentLevelExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TierLevelExp(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EquipmentLevelExcel::VT_TIERLEVELEXP, None)}
  }
  #[inline]
  pub fn TotalExp(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EquipmentLevelExcel::VT_TOTALEXP, None)}
  }
}

impl flatbuffers::Verifiable for EquipmentLevelExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("Level", Self::VT_LEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("TierLevelExp", Self::VT_TIERLEVELEXP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("TotalExp", Self::VT_TOTALEXP, false)?
     .finish();
    Ok(())
  }
}
pub struct EquipmentLevelExcelArgs<'a> {
    pub Level: i32,
    pub TierLevelExp: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub TotalExp: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for EquipmentLevelExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EquipmentLevelExcelArgs {
      Level: 0,
      TierLevelExp: None,
      TotalExp: None,
    }
  }
}

impl Serialize for EquipmentLevelExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EquipmentLevelExcel", 3)?;
      s.serialize_field("Level", &self.Level())?;
      if let Some(f) = self.TierLevelExp() {
        s.serialize_field("TierLevelExp", &f)?;
      } else {
        s.skip_field("TierLevelExp")?;
      }
      if let Some(f) = self.TotalExp() {
        s.serialize_field("TotalExp", &f)?;
      } else {
        s.skip_field("TotalExp")?;
      }
    s.end()
  }
}

pub struct EquipmentLevelExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EquipmentLevelExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Level(&mut self, Level: i32) {
    self.fbb_.push_slot::<i32>(EquipmentLevelExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_TierLevelExp(&mut self, TierLevelExp: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentLevelExcel::VT_TIERLEVELEXP, TierLevelExp);
  }
  #[inline]
  pub fn add_TotalExp(&mut self, TotalExp: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EquipmentLevelExcel::VT_TOTALEXP, TotalExp);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EquipmentLevelExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EquipmentLevelExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EquipmentLevelExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EquipmentLevelExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EquipmentLevelExcel");
      ds.field("Level", &self.Level());
      ds.field("TierLevelExp", &self.TierLevelExp());
      ds.field("TotalExp", &self.TotalExp());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EquipmentLevelExcelT {
  pub Level: i32,
  pub TierLevelExp: Option<Vec<i64>>,
  pub TotalExp: Option<Vec<i64>>,
}
impl Default for EquipmentLevelExcelT {
  fn default() -> Self {
    Self {
      Level: 0,
      TierLevelExp: None,
      TotalExp: None,
    }
  }
}
impl EquipmentLevelExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EquipmentLevelExcel<'b>> {
    let Level = self.Level;
    let TierLevelExp = self.TierLevelExp.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let TotalExp = self.TotalExp.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EquipmentLevelExcel::create(_fbb, &EquipmentLevelExcelArgs{
      Level,
      TierLevelExp,
      TotalExp,
    })
  }
}
