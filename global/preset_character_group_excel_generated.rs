// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PresetCharacterGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PresetCharacterGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PresetCharacterGroupExcel<'a> {
  type Inner = PresetCharacterGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PresetCharacterGroupExcel<'a> {
  pub const VT_PRESETCHARACTERGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_GETPRESETTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_LEVEL: flatbuffers::VOffsetT = 8;
  pub const VT_EXP: flatbuffers::VOffsetT = 10;
  pub const VT_FAVOREXP: flatbuffers::VOffsetT = 12;
  pub const VT_FAVORRANK: flatbuffers::VOffsetT = 14;
  pub const VT_STARGRADE: flatbuffers::VOffsetT = 16;
  pub const VT_EXSKILLLEVEL: flatbuffers::VOffsetT = 18;
  pub const VT_PASSIVESKILLLEVEL: flatbuffers::VOffsetT = 20;
  pub const VT_EXTRAPASSIVESKILLLEVEL: flatbuffers::VOffsetT = 22;
  pub const VT_COMMONSKILLLEVEL: flatbuffers::VOffsetT = 24;
  pub const VT_LEADERSKILLLEVEL: flatbuffers::VOffsetT = 26;
  pub const VT_EQUIPSLOT01: flatbuffers::VOffsetT = 28;
  pub const VT_EQUIPSLOTTIER01: flatbuffers::VOffsetT = 30;
  pub const VT_EQUIPSLOTLEVEL01: flatbuffers::VOffsetT = 32;
  pub const VT_EQUIPSLOT02: flatbuffers::VOffsetT = 34;
  pub const VT_EQUIPSLOTTIER02: flatbuffers::VOffsetT = 36;
  pub const VT_EQUIPSLOTLEVEL02: flatbuffers::VOffsetT = 38;
  pub const VT_EQUIPSLOT03: flatbuffers::VOffsetT = 40;
  pub const VT_EQUIPSLOTTIER03: flatbuffers::VOffsetT = 42;
  pub const VT_EQUIPSLOTLEVEL03: flatbuffers::VOffsetT = 44;
  pub const VT_EQUIPCHARACTERWEAPON: flatbuffers::VOffsetT = 46;
  pub const VT_EQUIPCHARACTERWEAPONTIER: flatbuffers::VOffsetT = 48;
  pub const VT_EQUIPCHARACTERWEAPONLEVEL: flatbuffers::VOffsetT = 50;
  pub const VT_EQUIPCHARACTERGEAR: flatbuffers::VOffsetT = 52;
  pub const VT_EQUIPCHARACTERGEARTIER: flatbuffers::VOffsetT = 54;
  pub const VT_EQUIPCHARACTERGEARLEVEL: flatbuffers::VOffsetT = 56;
  pub const VT_POTENTIALTYPE01: flatbuffers::VOffsetT = 58;
  pub const VT_POTENTIALLEVEL01: flatbuffers::VOffsetT = 60;
  pub const VT_POTENTIALTYPE02: flatbuffers::VOffsetT = 62;
  pub const VT_POTENTIALLEVEL02: flatbuffers::VOffsetT = 64;
  pub const VT_POTENTIALTYPE03: flatbuffers::VOffsetT = 66;
  pub const VT_POTENTIALLEVEL03: flatbuffers::VOffsetT = 68;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PresetCharacterGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PresetCharacterGroupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<PresetCharacterGroupExcel<'bldr>> {
    let mut builder = PresetCharacterGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"PresetCharacterGroup");
      let x = args.PresetCharacterGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PresetCharacterGroupId(x);
      let x = args.PotentialLevel03;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PotentialLevel03(x);
      let x = args.PotentialType03;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PotentialType03(x);
      let x = args.PotentialLevel02;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PotentialLevel02(x);
      let x = args.PotentialType02;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PotentialType02(x);
      let x = args.PotentialLevel01;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PotentialLevel01(x);
      let x = args.PotentialType01;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PotentialType01(x);
      let x = args.EquipCharacterGearLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipCharacterGearLevel(x);
      let x = args.EquipCharacterGearTier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipCharacterGearTier(x);
      let x = args.EquipCharacterWeaponLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipCharacterWeaponLevel(x);
      let x = args.EquipCharacterWeaponTier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipCharacterWeaponTier(x);
      let x = args.EquipSlotLevel03;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipSlotLevel03(x);
      let x = args.EquipSlotTier03;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipSlotTier03(x);
      let x = args.EquipSlotLevel02;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipSlotLevel02(x);
      let x = args.EquipSlotTier02;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipSlotTier02(x);
      let x = args.EquipSlotLevel01;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipSlotLevel01(x);
      let x = args.EquipSlotTier01;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_EquipSlotTier01(x);
      let x = args.LeaderSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_LeaderSkillLevel(x);
      let x = args.CommonSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CommonSkillLevel(x);
      let x = args.ExtraPassiveSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExtraPassiveSkillLevel(x);
      let x = args.PassiveSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PassiveSkillLevel(x);
      let x = args.ExSkillLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ExSkillLevel(x);
      let x = args.StarGrade;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StarGrade(x);
      let x = args.FavorRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FavorRank(x);
      let x = args.FavorExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FavorExp(x);
      let x = args.Exp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Exp(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Level(x);
      if let Some(x) = args.GetPresetType {
        builder.add_GetPresetType(x);
      }
      builder.add_EquipCharacterGear(args.EquipCharacterGear);
      builder.add_EquipCharacterWeapon(args.EquipCharacterWeapon);
      builder.add_EquipSlot03(args.EquipSlot03);
      builder.add_EquipSlot02(args.EquipSlot02);
      builder.add_EquipSlot01(args.EquipSlot01);
    builder.finish()
  }

  pub fn unpack(&self) -> PresetCharacterGroupExcelT {
    let key = table_encryption_service::create_key(b"PresetCharacterGroup");
      let PresetCharacterGroupId = self.PresetCharacterGroupId();
    let GetPresetType = self.GetPresetType().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Level = self.Level();
      let Exp = self.Exp();
      let FavorExp = self.FavorExp();
      let FavorRank = self.FavorRank();
      let StarGrade = self.StarGrade();
      let ExSkillLevel = self.ExSkillLevel();
      let PassiveSkillLevel = self.PassiveSkillLevel();
      let ExtraPassiveSkillLevel = self.ExtraPassiveSkillLevel();
      let CommonSkillLevel = self.CommonSkillLevel();
      let LeaderSkillLevel = self.LeaderSkillLevel();
      let EquipSlot01 = self.EquipSlot01();
      let EquipSlotTier01 = self.EquipSlotTier01();
      let EquipSlotLevel01 = self.EquipSlotLevel01();
      let EquipSlot02 = self.EquipSlot02();
      let EquipSlotTier02 = self.EquipSlotTier02();
      let EquipSlotLevel02 = self.EquipSlotLevel02();
      let EquipSlot03 = self.EquipSlot03();
      let EquipSlotTier03 = self.EquipSlotTier03();
      let EquipSlotLevel03 = self.EquipSlotLevel03();
      let EquipCharacterWeapon = self.EquipCharacterWeapon();
      let EquipCharacterWeaponTier = self.EquipCharacterWeaponTier();
      let EquipCharacterWeaponLevel = self.EquipCharacterWeaponLevel();
      let EquipCharacterGear = self.EquipCharacterGear();
      let EquipCharacterGearTier = self.EquipCharacterGearTier();
      let EquipCharacterGearLevel = self.EquipCharacterGearLevel();
      let PotentialType01 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PotentialType01(), &key)
      } else {
        self.PotentialType01()
      };
      let PotentialLevel01 = self.PotentialLevel01();
      let PotentialType02 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PotentialType02(), &key)
      } else {
        self.PotentialType02()
      };
      let PotentialLevel02 = self.PotentialLevel02();
      let PotentialType03 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PotentialType03(), &key)
      } else {
        self.PotentialType03()
      };
      let PotentialLevel03 = self.PotentialLevel03();
    PresetCharacterGroupExcelT {
      PresetCharacterGroupId,
      GetPresetType,
      Level,
      Exp,
      FavorExp,
      FavorRank,
      StarGrade,
      ExSkillLevel,
      PassiveSkillLevel,
      ExtraPassiveSkillLevel,
      CommonSkillLevel,
      LeaderSkillLevel,
      EquipSlot01,
      EquipSlotTier01,
      EquipSlotLevel01,
      EquipSlot02,
      EquipSlotTier02,
      EquipSlotLevel02,
      EquipSlot03,
      EquipSlotTier03,
      EquipSlotLevel03,
      EquipCharacterWeapon,
      EquipCharacterWeaponTier,
      EquipCharacterWeaponLevel,
      EquipCharacterGear,
      EquipCharacterGearTier,
      EquipCharacterGearLevel,
      PotentialType01,
      PotentialLevel01,
      PotentialType02,
      PotentialLevel02,
      PotentialType03,
      PotentialLevel03,
    }
  }

  #[inline]
  pub fn PresetCharacterGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PresetCharacterGroupExcel::VT_PRESETCHARACTERGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GetPresetType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PresetCharacterGroupExcel::VT_GETPRESETTYPE, None)}
  }
  #[inline]
  pub fn Level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Exp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorExp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_FAVOREXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorRank(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_FAVORRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StarGrade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_STARGRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EXSKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PassiveSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_PASSIVESKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExtraPassiveSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EXTRAPASSIVESKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CommonSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_COMMONSKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LeaderSkillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_LEADERSKILLLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipSlot01(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PresetCharacterGroupExcel::VT_EQUIPSLOT01, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EquipSlotTier01(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTTIER01, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipSlotLevel01(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTLEVEL01, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipSlot02(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PresetCharacterGroupExcel::VT_EQUIPSLOT02, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EquipSlotTier02(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTTIER02, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipSlotLevel02(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTLEVEL02, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipSlot03(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PresetCharacterGroupExcel::VT_EQUIPSLOT03, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EquipSlotTier03(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTTIER03, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipSlotLevel03(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTLEVEL03, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipCharacterWeapon(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERWEAPON, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EquipCharacterWeaponTier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERWEAPONTIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipCharacterWeaponLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERWEAPONLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipCharacterGear(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERGEAR, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EquipCharacterGearTier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERGEARTIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EquipCharacterGearLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERGEARLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PotentialType01(&self) -> PotentialStatBonusRateType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PotentialStatBonusRateType>(PresetCharacterGroupExcel::VT_POTENTIALTYPE01, Some(PotentialStatBonusRateType::None)).unwrap()}
  }
  #[inline]
  pub fn PotentialLevel01(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_POTENTIALLEVEL01, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PotentialType02(&self) -> PotentialStatBonusRateType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PotentialStatBonusRateType>(PresetCharacterGroupExcel::VT_POTENTIALTYPE02, Some(PotentialStatBonusRateType::None)).unwrap()}
  }
  #[inline]
  pub fn PotentialLevel02(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_POTENTIALLEVEL02, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PotentialType03(&self) -> PotentialStatBonusRateType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PotentialStatBonusRateType>(PresetCharacterGroupExcel::VT_POTENTIALTYPE03, Some(PotentialStatBonusRateType::None)).unwrap()}
  }
  #[inline]
  pub fn PotentialLevel03(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PresetCharacterGroupExcel::VT_POTENTIALLEVEL03, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PresetCharacterGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("PresetCharacterGroupId", Self::VT_PRESETCHARACTERGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GetPresetType", Self::VT_GETPRESETTYPE, false)?
     .visit_field::<i32>("Level", Self::VT_LEVEL, false)?
     .visit_field::<i32>("Exp", Self::VT_EXP, false)?
     .visit_field::<i32>("FavorExp", Self::VT_FAVOREXP, false)?
     .visit_field::<i32>("FavorRank", Self::VT_FAVORRANK, false)?
     .visit_field::<i32>("StarGrade", Self::VT_STARGRADE, false)?
     .visit_field::<i32>("ExSkillLevel", Self::VT_EXSKILLLEVEL, false)?
     .visit_field::<i32>("PassiveSkillLevel", Self::VT_PASSIVESKILLLEVEL, false)?
     .visit_field::<i32>("ExtraPassiveSkillLevel", Self::VT_EXTRAPASSIVESKILLLEVEL, false)?
     .visit_field::<i32>("CommonSkillLevel", Self::VT_COMMONSKILLLEVEL, false)?
     .visit_field::<i32>("LeaderSkillLevel", Self::VT_LEADERSKILLLEVEL, false)?
     .visit_field::<bool>("EquipSlot01", Self::VT_EQUIPSLOT01, false)?
     .visit_field::<i32>("EquipSlotTier01", Self::VT_EQUIPSLOTTIER01, false)?
     .visit_field::<i32>("EquipSlotLevel01", Self::VT_EQUIPSLOTLEVEL01, false)?
     .visit_field::<bool>("EquipSlot02", Self::VT_EQUIPSLOT02, false)?
     .visit_field::<i32>("EquipSlotTier02", Self::VT_EQUIPSLOTTIER02, false)?
     .visit_field::<i32>("EquipSlotLevel02", Self::VT_EQUIPSLOTLEVEL02, false)?
     .visit_field::<bool>("EquipSlot03", Self::VT_EQUIPSLOT03, false)?
     .visit_field::<i32>("EquipSlotTier03", Self::VT_EQUIPSLOTTIER03, false)?
     .visit_field::<i32>("EquipSlotLevel03", Self::VT_EQUIPSLOTLEVEL03, false)?
     .visit_field::<bool>("EquipCharacterWeapon", Self::VT_EQUIPCHARACTERWEAPON, false)?
     .visit_field::<i32>("EquipCharacterWeaponTier", Self::VT_EQUIPCHARACTERWEAPONTIER, false)?
     .visit_field::<i32>("EquipCharacterWeaponLevel", Self::VT_EQUIPCHARACTERWEAPONLEVEL, false)?
     .visit_field::<bool>("EquipCharacterGear", Self::VT_EQUIPCHARACTERGEAR, false)?
     .visit_field::<i32>("EquipCharacterGearTier", Self::VT_EQUIPCHARACTERGEARTIER, false)?
     .visit_field::<i32>("EquipCharacterGearLevel", Self::VT_EQUIPCHARACTERGEARLEVEL, false)?
     .visit_field::<PotentialStatBonusRateType>("PotentialType01", Self::VT_POTENTIALTYPE01, false)?
     .visit_field::<i32>("PotentialLevel01", Self::VT_POTENTIALLEVEL01, false)?
     .visit_field::<PotentialStatBonusRateType>("PotentialType02", Self::VT_POTENTIALTYPE02, false)?
     .visit_field::<i32>("PotentialLevel02", Self::VT_POTENTIALLEVEL02, false)?
     .visit_field::<PotentialStatBonusRateType>("PotentialType03", Self::VT_POTENTIALTYPE03, false)?
     .visit_field::<i32>("PotentialLevel03", Self::VT_POTENTIALLEVEL03, false)?
     .finish();
    Ok(())
  }
}
pub struct PresetCharacterGroupExcelArgs<'a> {
    pub PresetCharacterGroupId: i64,
    pub GetPresetType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Level: i32,
    pub Exp: i32,
    pub FavorExp: i32,
    pub FavorRank: i32,
    pub StarGrade: i32,
    pub ExSkillLevel: i32,
    pub PassiveSkillLevel: i32,
    pub ExtraPassiveSkillLevel: i32,
    pub CommonSkillLevel: i32,
    pub LeaderSkillLevel: i32,
    pub EquipSlot01: bool,
    pub EquipSlotTier01: i32,
    pub EquipSlotLevel01: i32,
    pub EquipSlot02: bool,
    pub EquipSlotTier02: i32,
    pub EquipSlotLevel02: i32,
    pub EquipSlot03: bool,
    pub EquipSlotTier03: i32,
    pub EquipSlotLevel03: i32,
    pub EquipCharacterWeapon: bool,
    pub EquipCharacterWeaponTier: i32,
    pub EquipCharacterWeaponLevel: i32,
    pub EquipCharacterGear: bool,
    pub EquipCharacterGearTier: i32,
    pub EquipCharacterGearLevel: i32,
    pub PotentialType01: PotentialStatBonusRateType,
    pub PotentialLevel01: i32,
    pub PotentialType02: PotentialStatBonusRateType,
    pub PotentialLevel02: i32,
    pub PotentialType03: PotentialStatBonusRateType,
    pub PotentialLevel03: i32,
}
impl<'a> Default for PresetCharacterGroupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    PresetCharacterGroupExcelArgs {
      PresetCharacterGroupId: 0,
      GetPresetType: None,
      Level: 0,
      Exp: 0,
      FavorExp: 0,
      FavorRank: 0,
      StarGrade: 0,
      ExSkillLevel: 0,
      PassiveSkillLevel: 0,
      ExtraPassiveSkillLevel: 0,
      CommonSkillLevel: 0,
      LeaderSkillLevel: 0,
      EquipSlot01: false,
      EquipSlotTier01: 0,
      EquipSlotLevel01: 0,
      EquipSlot02: false,
      EquipSlotTier02: 0,
      EquipSlotLevel02: 0,
      EquipSlot03: false,
      EquipSlotTier03: 0,
      EquipSlotLevel03: 0,
      EquipCharacterWeapon: false,
      EquipCharacterWeaponTier: 0,
      EquipCharacterWeaponLevel: 0,
      EquipCharacterGear: false,
      EquipCharacterGearTier: 0,
      EquipCharacterGearLevel: 0,
      PotentialType01: PotentialStatBonusRateType::None,
      PotentialLevel01: 0,
      PotentialType02: PotentialStatBonusRateType::None,
      PotentialLevel02: 0,
      PotentialType03: PotentialStatBonusRateType::None,
      PotentialLevel03: 0,
    }
  }
}

impl Serialize for PresetCharacterGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PresetCharacterGroupExcel", 33)?;
      s.serialize_field("PresetCharacterGroupId", &self.PresetCharacterGroupId())?;
      if let Some(f) = self.GetPresetType() {
        s.serialize_field("GetPresetType", &f)?;
      } else {
        s.skip_field("GetPresetType")?;
      }
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("Exp", &self.Exp())?;
      s.serialize_field("FavorExp", &self.FavorExp())?;
      s.serialize_field("FavorRank", &self.FavorRank())?;
      s.serialize_field("StarGrade", &self.StarGrade())?;
      s.serialize_field("ExSkillLevel", &self.ExSkillLevel())?;
      s.serialize_field("PassiveSkillLevel", &self.PassiveSkillLevel())?;
      s.serialize_field("ExtraPassiveSkillLevel", &self.ExtraPassiveSkillLevel())?;
      s.serialize_field("CommonSkillLevel", &self.CommonSkillLevel())?;
      s.serialize_field("LeaderSkillLevel", &self.LeaderSkillLevel())?;
      s.serialize_field("EquipSlot01", &self.EquipSlot01())?;
      s.serialize_field("EquipSlotTier01", &self.EquipSlotTier01())?;
      s.serialize_field("EquipSlotLevel01", &self.EquipSlotLevel01())?;
      s.serialize_field("EquipSlot02", &self.EquipSlot02())?;
      s.serialize_field("EquipSlotTier02", &self.EquipSlotTier02())?;
      s.serialize_field("EquipSlotLevel02", &self.EquipSlotLevel02())?;
      s.serialize_field("EquipSlot03", &self.EquipSlot03())?;
      s.serialize_field("EquipSlotTier03", &self.EquipSlotTier03())?;
      s.serialize_field("EquipSlotLevel03", &self.EquipSlotLevel03())?;
      s.serialize_field("EquipCharacterWeapon", &self.EquipCharacterWeapon())?;
      s.serialize_field("EquipCharacterWeaponTier", &self.EquipCharacterWeaponTier())?;
      s.serialize_field("EquipCharacterWeaponLevel", &self.EquipCharacterWeaponLevel())?;
      s.serialize_field("EquipCharacterGear", &self.EquipCharacterGear())?;
      s.serialize_field("EquipCharacterGearTier", &self.EquipCharacterGearTier())?;
      s.serialize_field("EquipCharacterGearLevel", &self.EquipCharacterGearLevel())?;
      s.serialize_field("PotentialType01", &self.PotentialType01())?;
      s.serialize_field("PotentialLevel01", &self.PotentialLevel01())?;
      s.serialize_field("PotentialType02", &self.PotentialType02())?;
      s.serialize_field("PotentialLevel02", &self.PotentialLevel02())?;
      s.serialize_field("PotentialType03", &self.PotentialType03())?;
      s.serialize_field("PotentialLevel03", &self.PotentialLevel03())?;
    s.end()
  }
}

pub struct PresetCharacterGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PresetCharacterGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_PresetCharacterGroupId(&mut self, PresetCharacterGroupId: i64) {
    self.fbb_.push_slot::<i64>(PresetCharacterGroupExcel::VT_PRESETCHARACTERGROUPID, PresetCharacterGroupId, 0);
  }
  #[inline]
  pub fn add_GetPresetType(&mut self, GetPresetType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PresetCharacterGroupExcel::VT_GETPRESETTYPE, GetPresetType);
  }
  #[inline]
  pub fn add_Level(&mut self, Level: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_Exp(&mut self, Exp: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EXP, Exp, 0);
  }
  #[inline]
  pub fn add_FavorExp(&mut self, FavorExp: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_FAVOREXP, FavorExp, 0);
  }
  #[inline]
  pub fn add_FavorRank(&mut self, FavorRank: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_FAVORRANK, FavorRank, 0);
  }
  #[inline]
  pub fn add_StarGrade(&mut self, StarGrade: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_STARGRADE, StarGrade, 0);
  }
  #[inline]
  pub fn add_ExSkillLevel(&mut self, ExSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EXSKILLLEVEL, ExSkillLevel, 0);
  }
  #[inline]
  pub fn add_PassiveSkillLevel(&mut self, PassiveSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_PASSIVESKILLLEVEL, PassiveSkillLevel, 0);
  }
  #[inline]
  pub fn add_ExtraPassiveSkillLevel(&mut self, ExtraPassiveSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EXTRAPASSIVESKILLLEVEL, ExtraPassiveSkillLevel, 0);
  }
  #[inline]
  pub fn add_CommonSkillLevel(&mut self, CommonSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_COMMONSKILLLEVEL, CommonSkillLevel, 0);
  }
  #[inline]
  pub fn add_LeaderSkillLevel(&mut self, LeaderSkillLevel: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_LEADERSKILLLEVEL, LeaderSkillLevel, 0);
  }
  #[inline]
  pub fn add_EquipSlot01(&mut self, EquipSlot01: bool) {
    self.fbb_.push_slot::<bool>(PresetCharacterGroupExcel::VT_EQUIPSLOT01, EquipSlot01, false);
  }
  #[inline]
  pub fn add_EquipSlotTier01(&mut self, EquipSlotTier01: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTTIER01, EquipSlotTier01, 0);
  }
  #[inline]
  pub fn add_EquipSlotLevel01(&mut self, EquipSlotLevel01: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTLEVEL01, EquipSlotLevel01, 0);
  }
  #[inline]
  pub fn add_EquipSlot02(&mut self, EquipSlot02: bool) {
    self.fbb_.push_slot::<bool>(PresetCharacterGroupExcel::VT_EQUIPSLOT02, EquipSlot02, false);
  }
  #[inline]
  pub fn add_EquipSlotTier02(&mut self, EquipSlotTier02: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTTIER02, EquipSlotTier02, 0);
  }
  #[inline]
  pub fn add_EquipSlotLevel02(&mut self, EquipSlotLevel02: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTLEVEL02, EquipSlotLevel02, 0);
  }
  #[inline]
  pub fn add_EquipSlot03(&mut self, EquipSlot03: bool) {
    self.fbb_.push_slot::<bool>(PresetCharacterGroupExcel::VT_EQUIPSLOT03, EquipSlot03, false);
  }
  #[inline]
  pub fn add_EquipSlotTier03(&mut self, EquipSlotTier03: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTTIER03, EquipSlotTier03, 0);
  }
  #[inline]
  pub fn add_EquipSlotLevel03(&mut self, EquipSlotLevel03: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPSLOTLEVEL03, EquipSlotLevel03, 0);
  }
  #[inline]
  pub fn add_EquipCharacterWeapon(&mut self, EquipCharacterWeapon: bool) {
    self.fbb_.push_slot::<bool>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERWEAPON, EquipCharacterWeapon, false);
  }
  #[inline]
  pub fn add_EquipCharacterWeaponTier(&mut self, EquipCharacterWeaponTier: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERWEAPONTIER, EquipCharacterWeaponTier, 0);
  }
  #[inline]
  pub fn add_EquipCharacterWeaponLevel(&mut self, EquipCharacterWeaponLevel: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERWEAPONLEVEL, EquipCharacterWeaponLevel, 0);
  }
  #[inline]
  pub fn add_EquipCharacterGear(&mut self, EquipCharacterGear: bool) {
    self.fbb_.push_slot::<bool>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERGEAR, EquipCharacterGear, false);
  }
  #[inline]
  pub fn add_EquipCharacterGearTier(&mut self, EquipCharacterGearTier: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERGEARTIER, EquipCharacterGearTier, 0);
  }
  #[inline]
  pub fn add_EquipCharacterGearLevel(&mut self, EquipCharacterGearLevel: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_EQUIPCHARACTERGEARLEVEL, EquipCharacterGearLevel, 0);
  }
  #[inline]
  pub fn add_PotentialType01(&mut self, PotentialType01: PotentialStatBonusRateType) {
    self.fbb_.push_slot::<PotentialStatBonusRateType>(PresetCharacterGroupExcel::VT_POTENTIALTYPE01, PotentialType01, PotentialStatBonusRateType::None);
  }
  #[inline]
  pub fn add_PotentialLevel01(&mut self, PotentialLevel01: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_POTENTIALLEVEL01, PotentialLevel01, 0);
  }
  #[inline]
  pub fn add_PotentialType02(&mut self, PotentialType02: PotentialStatBonusRateType) {
    self.fbb_.push_slot::<PotentialStatBonusRateType>(PresetCharacterGroupExcel::VT_POTENTIALTYPE02, PotentialType02, PotentialStatBonusRateType::None);
  }
  #[inline]
  pub fn add_PotentialLevel02(&mut self, PotentialLevel02: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_POTENTIALLEVEL02, PotentialLevel02, 0);
  }
  #[inline]
  pub fn add_PotentialType03(&mut self, PotentialType03: PotentialStatBonusRateType) {
    self.fbb_.push_slot::<PotentialStatBonusRateType>(PresetCharacterGroupExcel::VT_POTENTIALTYPE03, PotentialType03, PotentialStatBonusRateType::None);
  }
  #[inline]
  pub fn add_PotentialLevel03(&mut self, PotentialLevel03: i32) {
    self.fbb_.push_slot::<i32>(PresetCharacterGroupExcel::VT_POTENTIALLEVEL03, PotentialLevel03, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PresetCharacterGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PresetCharacterGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PresetCharacterGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PresetCharacterGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PresetCharacterGroupExcel");
      ds.field("PresetCharacterGroupId", &self.PresetCharacterGroupId());
      ds.field("GetPresetType", &self.GetPresetType());
      ds.field("Level", &self.Level());
      ds.field("Exp", &self.Exp());
      ds.field("FavorExp", &self.FavorExp());
      ds.field("FavorRank", &self.FavorRank());
      ds.field("StarGrade", &self.StarGrade());
      ds.field("ExSkillLevel", &self.ExSkillLevel());
      ds.field("PassiveSkillLevel", &self.PassiveSkillLevel());
      ds.field("ExtraPassiveSkillLevel", &self.ExtraPassiveSkillLevel());
      ds.field("CommonSkillLevel", &self.CommonSkillLevel());
      ds.field("LeaderSkillLevel", &self.LeaderSkillLevel());
      ds.field("EquipSlot01", &self.EquipSlot01());
      ds.field("EquipSlotTier01", &self.EquipSlotTier01());
      ds.field("EquipSlotLevel01", &self.EquipSlotLevel01());
      ds.field("EquipSlot02", &self.EquipSlot02());
      ds.field("EquipSlotTier02", &self.EquipSlotTier02());
      ds.field("EquipSlotLevel02", &self.EquipSlotLevel02());
      ds.field("EquipSlot03", &self.EquipSlot03());
      ds.field("EquipSlotTier03", &self.EquipSlotTier03());
      ds.field("EquipSlotLevel03", &self.EquipSlotLevel03());
      ds.field("EquipCharacterWeapon", &self.EquipCharacterWeapon());
      ds.field("EquipCharacterWeaponTier", &self.EquipCharacterWeaponTier());
      ds.field("EquipCharacterWeaponLevel", &self.EquipCharacterWeaponLevel());
      ds.field("EquipCharacterGear", &self.EquipCharacterGear());
      ds.field("EquipCharacterGearTier", &self.EquipCharacterGearTier());
      ds.field("EquipCharacterGearLevel", &self.EquipCharacterGearLevel());
      ds.field("PotentialType01", &self.PotentialType01());
      ds.field("PotentialLevel01", &self.PotentialLevel01());
      ds.field("PotentialType02", &self.PotentialType02());
      ds.field("PotentialLevel02", &self.PotentialLevel02());
      ds.field("PotentialType03", &self.PotentialType03());
      ds.field("PotentialLevel03", &self.PotentialLevel03());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PresetCharacterGroupExcelT {
  pub PresetCharacterGroupId: i64,
  pub GetPresetType: Option<String>,
  pub Level: i32,
  pub Exp: i32,
  pub FavorExp: i32,
  pub FavorRank: i32,
  pub StarGrade: i32,
  pub ExSkillLevel: i32,
  pub PassiveSkillLevel: i32,
  pub ExtraPassiveSkillLevel: i32,
  pub CommonSkillLevel: i32,
  pub LeaderSkillLevel: i32,
  pub EquipSlot01: bool,
  pub EquipSlotTier01: i32,
  pub EquipSlotLevel01: i32,
  pub EquipSlot02: bool,
  pub EquipSlotTier02: i32,
  pub EquipSlotLevel02: i32,
  pub EquipSlot03: bool,
  pub EquipSlotTier03: i32,
  pub EquipSlotLevel03: i32,
  pub EquipCharacterWeapon: bool,
  pub EquipCharacterWeaponTier: i32,
  pub EquipCharacterWeaponLevel: i32,
  pub EquipCharacterGear: bool,
  pub EquipCharacterGearTier: i32,
  pub EquipCharacterGearLevel: i32,
  pub PotentialType01: PotentialStatBonusRateType,
  pub PotentialLevel01: i32,
  pub PotentialType02: PotentialStatBonusRateType,
  pub PotentialLevel02: i32,
  pub PotentialType03: PotentialStatBonusRateType,
  pub PotentialLevel03: i32,
}
impl Default for PresetCharacterGroupExcelT {
  fn default() -> Self {
    Self {
      PresetCharacterGroupId: 0,
      GetPresetType: None,
      Level: 0,
      Exp: 0,
      FavorExp: 0,
      FavorRank: 0,
      StarGrade: 0,
      ExSkillLevel: 0,
      PassiveSkillLevel: 0,
      ExtraPassiveSkillLevel: 0,
      CommonSkillLevel: 0,
      LeaderSkillLevel: 0,
      EquipSlot01: false,
      EquipSlotTier01: 0,
      EquipSlotLevel01: 0,
      EquipSlot02: false,
      EquipSlotTier02: 0,
      EquipSlotLevel02: 0,
      EquipSlot03: false,
      EquipSlotTier03: 0,
      EquipSlotLevel03: 0,
      EquipCharacterWeapon: false,
      EquipCharacterWeaponTier: 0,
      EquipCharacterWeaponLevel: 0,
      EquipCharacterGear: false,
      EquipCharacterGearTier: 0,
      EquipCharacterGearLevel: 0,
      PotentialType01: PotentialStatBonusRateType::None,
      PotentialLevel01: 0,
      PotentialType02: PotentialStatBonusRateType::None,
      PotentialLevel02: 0,
      PotentialType03: PotentialStatBonusRateType::None,
      PotentialLevel03: 0,
    }
  }
}
impl PresetCharacterGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PresetCharacterGroupExcel<'b>> {
    let PresetCharacterGroupId = self.PresetCharacterGroupId;
    let GetPresetType = self.GetPresetType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Level = self.Level;
    let Exp = self.Exp;
    let FavorExp = self.FavorExp;
    let FavorRank = self.FavorRank;
    let StarGrade = self.StarGrade;
    let ExSkillLevel = self.ExSkillLevel;
    let PassiveSkillLevel = self.PassiveSkillLevel;
    let ExtraPassiveSkillLevel = self.ExtraPassiveSkillLevel;
    let CommonSkillLevel = self.CommonSkillLevel;
    let LeaderSkillLevel = self.LeaderSkillLevel;
    let EquipSlot01 = self.EquipSlot01;
    let EquipSlotTier01 = self.EquipSlotTier01;
    let EquipSlotLevel01 = self.EquipSlotLevel01;
    let EquipSlot02 = self.EquipSlot02;
    let EquipSlotTier02 = self.EquipSlotTier02;
    let EquipSlotLevel02 = self.EquipSlotLevel02;
    let EquipSlot03 = self.EquipSlot03;
    let EquipSlotTier03 = self.EquipSlotTier03;
    let EquipSlotLevel03 = self.EquipSlotLevel03;
    let EquipCharacterWeapon = self.EquipCharacterWeapon;
    let EquipCharacterWeaponTier = self.EquipCharacterWeaponTier;
    let EquipCharacterWeaponLevel = self.EquipCharacterWeaponLevel;
    let EquipCharacterGear = self.EquipCharacterGear;
    let EquipCharacterGearTier = self.EquipCharacterGearTier;
    let EquipCharacterGearLevel = self.EquipCharacterGearLevel;
    let PotentialType01 = self.PotentialType01;
    let PotentialLevel01 = self.PotentialLevel01;
    let PotentialType02 = self.PotentialType02;
    let PotentialLevel02 = self.PotentialLevel02;
    let PotentialType03 = self.PotentialType03;
    let PotentialLevel03 = self.PotentialLevel03;
    PresetCharacterGroupExcel::create(_fbb, &PresetCharacterGroupExcelArgs{
      PresetCharacterGroupId,
      GetPresetType,
      Level,
      Exp,
      FavorExp,
      FavorRank,
      StarGrade,
      ExSkillLevel,
      PassiveSkillLevel,
      ExtraPassiveSkillLevel,
      CommonSkillLevel,
      LeaderSkillLevel,
      EquipSlot01,
      EquipSlotTier01,
      EquipSlotLevel01,
      EquipSlot02,
      EquipSlotTier02,
      EquipSlotLevel02,
      EquipSlot03,
      EquipSlotTier03,
      EquipSlotLevel03,
      EquipCharacterWeapon,
      EquipCharacterWeaponTier,
      EquipCharacterWeaponLevel,
      EquipCharacterGear,
      EquipCharacterGearTier,
      EquipCharacterGearLevel,
      PotentialType01,
      PotentialLevel01,
      PotentialType02,
      PotentialLevel02,
      PotentialType03,
      PotentialLevel03,
    })
  }
}
