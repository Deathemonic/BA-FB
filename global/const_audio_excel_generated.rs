// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConstAudioExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConstAudioExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConstAudioExcel<'a> {
  type Inner = ConstAudioExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConstAudioExcel<'a> {
  pub const VT_DEFAULTSNAPSHOTNAME: flatbuffers::VOffsetT = 4;
  pub const VT_BATTLESNAPSHOTNAME: flatbuffers::VOffsetT = 6;
  pub const VT_RAIDSNAPSHOTNAME: flatbuffers::VOffsetT = 8;
  pub const VT_EXSKILLCUTINSNAPSHOTNAME: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConstAudioExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConstAudioExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConstAudioExcel<'bldr>> {
    let mut builder = ConstAudioExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConstAudio");
      if let Some(x) = args.ExSkillCutInSnapShotName {
        builder.add_ExSkillCutInSnapShotName(x);
      }
      if let Some(x) = args.RaidSnapShotName {
        builder.add_RaidSnapShotName(x);
      }
      if let Some(x) = args.BattleSnapShotName {
        builder.add_BattleSnapShotName(x);
      }
      if let Some(x) = args.DefaultSnapShotName {
        builder.add_DefaultSnapShotName(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> ConstAudioExcelT {
    let key = table_encryption_service::create_key(b"ConstAudio");
    let DefaultSnapShotName = self.DefaultSnapShotName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BattleSnapShotName = self.BattleSnapShotName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let RaidSnapShotName = self.RaidSnapShotName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ExSkillCutInSnapShotName = self.ExSkillCutInSnapShotName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ConstAudioExcelT {
      DefaultSnapShotName,
      BattleSnapShotName,
      RaidSnapShotName,
      ExSkillCutInSnapShotName,
    }
  }

  #[inline]
  pub fn DefaultSnapShotName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstAudioExcel::VT_DEFAULTSNAPSHOTNAME, None)}
  }
  #[inline]
  pub fn BattleSnapShotName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstAudioExcel::VT_BATTLESNAPSHOTNAME, None)}
  }
  #[inline]
  pub fn RaidSnapShotName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstAudioExcel::VT_RAIDSNAPSHOTNAME, None)}
  }
  #[inline]
  pub fn ExSkillCutInSnapShotName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConstAudioExcel::VT_EXSKILLCUTINSNAPSHOTNAME, None)}
  }
}

impl flatbuffers::Verifiable for ConstAudioExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DefaultSnapShotName", Self::VT_DEFAULTSNAPSHOTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BattleSnapShotName", Self::VT_BATTLESNAPSHOTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RaidSnapShotName", Self::VT_RAIDSNAPSHOTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ExSkillCutInSnapShotName", Self::VT_EXSKILLCUTINSNAPSHOTNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct ConstAudioExcelArgs<'a> {
    pub DefaultSnapShotName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BattleSnapShotName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RaidSnapShotName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ExSkillCutInSnapShotName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ConstAudioExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConstAudioExcelArgs {
      DefaultSnapShotName: None,
      BattleSnapShotName: None,
      RaidSnapShotName: None,
      ExSkillCutInSnapShotName: None,
    }
  }
}

impl Serialize for ConstAudioExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConstAudioExcel", 4)?;
      if let Some(f) = self.DefaultSnapShotName() {
        s.serialize_field("DefaultSnapShotName", &f)?;
      } else {
        s.skip_field("DefaultSnapShotName")?;
      }
      if let Some(f) = self.BattleSnapShotName() {
        s.serialize_field("BattleSnapShotName", &f)?;
      } else {
        s.skip_field("BattleSnapShotName")?;
      }
      if let Some(f) = self.RaidSnapShotName() {
        s.serialize_field("RaidSnapShotName", &f)?;
      } else {
        s.skip_field("RaidSnapShotName")?;
      }
      if let Some(f) = self.ExSkillCutInSnapShotName() {
        s.serialize_field("ExSkillCutInSnapShotName", &f)?;
      } else {
        s.skip_field("ExSkillCutInSnapShotName")?;
      }
    s.end()
  }
}

pub struct ConstAudioExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConstAudioExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_DefaultSnapShotName(&mut self, DefaultSnapShotName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstAudioExcel::VT_DEFAULTSNAPSHOTNAME, DefaultSnapShotName);
  }
  #[inline]
  pub fn add_BattleSnapShotName(&mut self, BattleSnapShotName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstAudioExcel::VT_BATTLESNAPSHOTNAME, BattleSnapShotName);
  }
  #[inline]
  pub fn add_RaidSnapShotName(&mut self, RaidSnapShotName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstAudioExcel::VT_RAIDSNAPSHOTNAME, RaidSnapShotName);
  }
  #[inline]
  pub fn add_ExSkillCutInSnapShotName(&mut self, ExSkillCutInSnapShotName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConstAudioExcel::VT_EXSKILLCUTINSNAPSHOTNAME, ExSkillCutInSnapShotName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConstAudioExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConstAudioExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConstAudioExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConstAudioExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConstAudioExcel");
      ds.field("DefaultSnapShotName", &self.DefaultSnapShotName());
      ds.field("BattleSnapShotName", &self.BattleSnapShotName());
      ds.field("RaidSnapShotName", &self.RaidSnapShotName());
      ds.field("ExSkillCutInSnapShotName", &self.ExSkillCutInSnapShotName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConstAudioExcelT {
  pub DefaultSnapShotName: Option<String>,
  pub BattleSnapShotName: Option<String>,
  pub RaidSnapShotName: Option<String>,
  pub ExSkillCutInSnapShotName: Option<String>,
}
impl Default for ConstAudioExcelT {
  fn default() -> Self {
    Self {
      DefaultSnapShotName: None,
      BattleSnapShotName: None,
      RaidSnapShotName: None,
      ExSkillCutInSnapShotName: None,
    }
  }
}
impl ConstAudioExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConstAudioExcel<'b>> {
    let DefaultSnapShotName = self.DefaultSnapShotName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BattleSnapShotName = self.BattleSnapShotName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RaidSnapShotName = self.RaidSnapShotName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ExSkillCutInSnapShotName = self.ExSkillCutInSnapShotName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ConstAudioExcel::create(_fbb, &ConstAudioExcelArgs{
      DefaultSnapShotName,
      BattleSnapShotName,
      RaidSnapShotName,
      ExSkillCutInSnapShotName,
    })
  }
}
