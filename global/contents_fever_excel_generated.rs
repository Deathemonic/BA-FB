// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContentsFeverExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContentsFeverExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContentsFeverExcel<'a> {
  type Inner = ContentsFeverExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContentsFeverExcel<'a> {
  pub const VT_CONDITIONCONTENT: flatbuffers::VOffsetT = 4;
  pub const VT_SKILLFEVERCHECKCONDITION: flatbuffers::VOffsetT = 6;
  pub const VT_SKILLCOSTFEVER: flatbuffers::VOffsetT = 8;
  pub const VT_FEVERSTARTTIME: flatbuffers::VOffsetT = 10;
  pub const VT_FEVERDURATIONTIME: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContentsFeverExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContentsFeverExcelArgs
  ) -> flatbuffers::WIPOffset<ContentsFeverExcel<'bldr>> {
    let mut builder = ContentsFeverExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ContentsFever");
      let x = args.FeverDurationTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FeverDurationTime(x);
      let x = args.FeverStartTime;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FeverStartTime(x);
      let x = args.SkillCostFever;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SkillCostFever(x);
      let x = args.SkillFeverCheckCondition;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_SkillFeverCheckCondition(x);
      let x = args.ConditionContent;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConditionContent(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ContentsFeverExcelT {
    let key = table_encryption_service::create_key(b"ContentsFever");
      let ConditionContent = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConditionContent(), &key)
      } else {
        self.ConditionContent()
      };
      let SkillFeverCheckCondition = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.SkillFeverCheckCondition(), &key)
      } else {
        self.SkillFeverCheckCondition()
      };
      let SkillCostFever = self.SkillCostFever();
      let FeverStartTime = self.FeverStartTime();
      let FeverDurationTime = self.FeverDurationTime();
    ContentsFeverExcelT {
      ConditionContent,
      SkillFeverCheckCondition,
      SkillCostFever,
      FeverStartTime,
      FeverDurationTime,
    }
  }

  #[inline]
  pub fn ConditionContent(&self) -> FeverBattleType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FeverBattleType>(ContentsFeverExcel::VT_CONDITIONCONTENT, Some(FeverBattleType::Campaign)).unwrap()}
  }
  #[inline]
  pub fn SkillFeverCheckCondition(&self) -> SkillPriorityCheckTarget {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SkillPriorityCheckTarget>(ContentsFeverExcel::VT_SKILLFEVERCHECKCONDITION, Some(SkillPriorityCheckTarget::Ally)).unwrap()}
  }
  #[inline]
  pub fn SkillCostFever(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsFeverExcel::VT_SKILLCOSTFEVER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FeverStartTime(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsFeverExcel::VT_FEVERSTARTTIME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FeverDurationTime(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentsFeverExcel::VT_FEVERDURATIONTIME, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ContentsFeverExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<FeverBattleType>("ConditionContent", Self::VT_CONDITIONCONTENT, false)?
     .visit_field::<SkillPriorityCheckTarget>("SkillFeverCheckCondition", Self::VT_SKILLFEVERCHECKCONDITION, false)?
     .visit_field::<i64>("SkillCostFever", Self::VT_SKILLCOSTFEVER, false)?
     .visit_field::<i64>("FeverStartTime", Self::VT_FEVERSTARTTIME, false)?
     .visit_field::<i64>("FeverDurationTime", Self::VT_FEVERDURATIONTIME, false)?
     .finish();
    Ok(())
  }
}
pub struct ContentsFeverExcelArgs {
    pub ConditionContent: FeverBattleType,
    pub SkillFeverCheckCondition: SkillPriorityCheckTarget,
    pub SkillCostFever: i64,
    pub FeverStartTime: i64,
    pub FeverDurationTime: i64,
}
impl<'a> Default for ContentsFeverExcelArgs {
  #[inline]
  fn default() -> Self {
    ContentsFeverExcelArgs {
      ConditionContent: FeverBattleType::Campaign,
      SkillFeverCheckCondition: SkillPriorityCheckTarget::Ally,
      SkillCostFever: 0,
      FeverStartTime: 0,
      FeverDurationTime: 0,
    }
  }
}

impl Serialize for ContentsFeverExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ContentsFeverExcel", 5)?;
      s.serialize_field("ConditionContent", &self.ConditionContent())?;
      s.serialize_field("SkillFeverCheckCondition", &self.SkillFeverCheckCondition())?;
      s.serialize_field("SkillCostFever", &self.SkillCostFever())?;
      s.serialize_field("FeverStartTime", &self.FeverStartTime())?;
      s.serialize_field("FeverDurationTime", &self.FeverDurationTime())?;
    s.end()
  }
}

pub struct ContentsFeverExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContentsFeverExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ConditionContent(&mut self, ConditionContent: FeverBattleType) {
    self.fbb_.push_slot::<FeverBattleType>(ContentsFeverExcel::VT_CONDITIONCONTENT, ConditionContent, FeverBattleType::Campaign);
  }
  #[inline]
  pub fn add_SkillFeverCheckCondition(&mut self, SkillFeverCheckCondition: SkillPriorityCheckTarget) {
    self.fbb_.push_slot::<SkillPriorityCheckTarget>(ContentsFeverExcel::VT_SKILLFEVERCHECKCONDITION, SkillFeverCheckCondition, SkillPriorityCheckTarget::Ally);
  }
  #[inline]
  pub fn add_SkillCostFever(&mut self, SkillCostFever: i64) {
    self.fbb_.push_slot::<i64>(ContentsFeverExcel::VT_SKILLCOSTFEVER, SkillCostFever, 0);
  }
  #[inline]
  pub fn add_FeverStartTime(&mut self, FeverStartTime: i64) {
    self.fbb_.push_slot::<i64>(ContentsFeverExcel::VT_FEVERSTARTTIME, FeverStartTime, 0);
  }
  #[inline]
  pub fn add_FeverDurationTime(&mut self, FeverDurationTime: i64) {
    self.fbb_.push_slot::<i64>(ContentsFeverExcel::VT_FEVERDURATIONTIME, FeverDurationTime, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContentsFeverExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContentsFeverExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContentsFeverExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContentsFeverExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContentsFeverExcel");
      ds.field("ConditionContent", &self.ConditionContent());
      ds.field("SkillFeverCheckCondition", &self.SkillFeverCheckCondition());
      ds.field("SkillCostFever", &self.SkillCostFever());
      ds.field("FeverStartTime", &self.FeverStartTime());
      ds.field("FeverDurationTime", &self.FeverDurationTime());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ContentsFeverExcelT {
  pub ConditionContent: FeverBattleType,
  pub SkillFeverCheckCondition: SkillPriorityCheckTarget,
  pub SkillCostFever: i64,
  pub FeverStartTime: i64,
  pub FeverDurationTime: i64,
}
impl Default for ContentsFeverExcelT {
  fn default() -> Self {
    Self {
      ConditionContent: FeverBattleType::Campaign,
      SkillFeverCheckCondition: SkillPriorityCheckTarget::Ally,
      SkillCostFever: 0,
      FeverStartTime: 0,
      FeverDurationTime: 0,
    }
  }
}
impl ContentsFeverExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ContentsFeverExcel<'b>> {
    let ConditionContent = self.ConditionContent;
    let SkillFeverCheckCondition = self.SkillFeverCheckCondition;
    let SkillCostFever = self.SkillCostFever;
    let FeverStartTime = self.FeverStartTime;
    let FeverDurationTime = self.FeverDurationTime;
    ContentsFeverExcel::create(_fbb, &ContentsFeverExcelArgs{
      ConditionContent,
      SkillFeverCheckCondition,
      SkillCostFever,
      FeverStartTime,
      FeverDurationTime,
    })
  }
}
