// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GachaElementExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GachaElementExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GachaElementExcel<'a> {
  type Inner = GachaElementExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GachaElementExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_GACHAGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_RARITY: flatbuffers::VOffsetT = 12;
  pub const VT_PARCELAMOUNTMIN: flatbuffers::VOffsetT = 14;
  pub const VT_PARCELAMOUNTMAX: flatbuffers::VOffsetT = 16;
  pub const VT_PROB: flatbuffers::VOffsetT = 18;
  pub const VT_STATE: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GachaElementExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GachaElementExcelArgs
  ) -> flatbuffers::WIPOffset<GachaElementExcel<'bldr>> {
    let mut builder = GachaElementExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GachaElement");
      let x = args.ParcelID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelID(x);
      let x = args.GachaGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GachaGroupID(x);
      let x = args.ID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ID(x);
      let x = args.State;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_State(x);
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      let x = args.ParcelAmountMax;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ParcelAmountMax(x);
      let x = args.ParcelAmountMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ParcelAmountMin(x);
      let x = args.Rarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Rarity(x);
      let x = args.ParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> GachaElementExcelT {
    let key = table_encryption_service::create_key(b"GachaElement");
      let ID = self.ID();
      let GachaGroupID = self.GachaGroupID();
      let ParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParcelType(), &key)
      } else {
        self.ParcelType()
      };
      let ParcelID = self.ParcelID();
      let Rarity = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Rarity(), &key)
      } else {
        self.Rarity()
      };
      let ParcelAmountMin = self.ParcelAmountMin();
      let ParcelAmountMax = self.ParcelAmountMax();
      let Prob = self.Prob();
      let State = self.State();
    GachaElementExcelT {
      ID,
      GachaGroupID,
      ParcelType,
      ParcelID,
      Rarity,
      ParcelAmountMin,
      ParcelAmountMax,
      Prob,
      State,
    }
  }

  #[inline]
  pub fn ID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaElementExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GachaGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaElementExcel::VT_GACHAGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(GachaElementExcel::VT_PARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ParcelID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaElementExcel::VT_PARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(GachaElementExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn ParcelAmountMin(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GachaElementExcel::VT_PARCELAMOUNTMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelAmountMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GachaElementExcel::VT_PARCELAMOUNTMAX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GachaElementExcel::VT_PROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn State(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GachaElementExcel::VT_STATE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GachaElementExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ID", Self::VT_ID, false)?
     .visit_field::<i64>("GachaGroupID", Self::VT_GACHAGROUPID, false)?
     .visit_field::<ParcelType>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<i64>("ParcelID", Self::VT_PARCELID, false)?
     .visit_field::<Rarity>("Rarity", Self::VT_RARITY, false)?
     .visit_field::<i32>("ParcelAmountMin", Self::VT_PARCELAMOUNTMIN, false)?
     .visit_field::<i32>("ParcelAmountMax", Self::VT_PARCELAMOUNTMAX, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .visit_field::<i32>("State", Self::VT_STATE, false)?
     .finish();
    Ok(())
  }
}
pub struct GachaElementExcelArgs {
    pub ID: i64,
    pub GachaGroupID: i64,
    pub ParcelType: ParcelType,
    pub ParcelID: i64,
    pub Rarity: Rarity,
    pub ParcelAmountMin: i32,
    pub ParcelAmountMax: i32,
    pub Prob: i32,
    pub State: i32,
}
impl<'a> Default for GachaElementExcelArgs {
  #[inline]
  fn default() -> Self {
    GachaElementExcelArgs {
      ID: 0,
      GachaGroupID: 0,
      ParcelType: ParcelType::None,
      ParcelID: 0,
      Rarity: Rarity::N,
      ParcelAmountMin: 0,
      ParcelAmountMax: 0,
      Prob: 0,
      State: 0,
    }
  }
}

impl Serialize for GachaElementExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GachaElementExcel", 9)?;
      s.serialize_field("ID", &self.ID())?;
      s.serialize_field("GachaGroupID", &self.GachaGroupID())?;
      s.serialize_field("ParcelType", &self.ParcelType())?;
      s.serialize_field("ParcelID", &self.ParcelID())?;
      s.serialize_field("Rarity", &self.Rarity())?;
      s.serialize_field("ParcelAmountMin", &self.ParcelAmountMin())?;
      s.serialize_field("ParcelAmountMax", &self.ParcelAmountMax())?;
      s.serialize_field("Prob", &self.Prob())?;
      s.serialize_field("State", &self.State())?;
    s.end()
  }
}

pub struct GachaElementExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GachaElementExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ID(&mut self, ID: i64) {
    self.fbb_.push_slot::<i64>(GachaElementExcel::VT_ID, ID, 0);
  }
  #[inline]
  pub fn add_GachaGroupID(&mut self, GachaGroupID: i64) {
    self.fbb_.push_slot::<i64>(GachaElementExcel::VT_GACHAGROUPID, GachaGroupID, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(GachaElementExcel::VT_PARCELTYPE, ParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ParcelID(&mut self, ParcelID: i64) {
    self.fbb_.push_slot::<i64>(GachaElementExcel::VT_PARCELID, ParcelID, 0);
  }
  #[inline]
  pub fn add_Rarity(&mut self, Rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(GachaElementExcel::VT_RARITY, Rarity, Rarity::N);
  }
  #[inline]
  pub fn add_ParcelAmountMin(&mut self, ParcelAmountMin: i32) {
    self.fbb_.push_slot::<i32>(GachaElementExcel::VT_PARCELAMOUNTMIN, ParcelAmountMin, 0);
  }
  #[inline]
  pub fn add_ParcelAmountMax(&mut self, ParcelAmountMax: i32) {
    self.fbb_.push_slot::<i32>(GachaElementExcel::VT_PARCELAMOUNTMAX, ParcelAmountMax, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(GachaElementExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn add_State(&mut self, State: i32) {
    self.fbb_.push_slot::<i32>(GachaElementExcel::VT_STATE, State, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GachaElementExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GachaElementExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GachaElementExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GachaElementExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GachaElementExcel");
      ds.field("ID", &self.ID());
      ds.field("GachaGroupID", &self.GachaGroupID());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelID", &self.ParcelID());
      ds.field("Rarity", &self.Rarity());
      ds.field("ParcelAmountMin", &self.ParcelAmountMin());
      ds.field("ParcelAmountMax", &self.ParcelAmountMax());
      ds.field("Prob", &self.Prob());
      ds.field("State", &self.State());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GachaElementExcelT {
  pub ID: i64,
  pub GachaGroupID: i64,
  pub ParcelType: ParcelType,
  pub ParcelID: i64,
  pub Rarity: Rarity,
  pub ParcelAmountMin: i32,
  pub ParcelAmountMax: i32,
  pub Prob: i32,
  pub State: i32,
}
impl Default for GachaElementExcelT {
  fn default() -> Self {
    Self {
      ID: 0,
      GachaGroupID: 0,
      ParcelType: ParcelType::None,
      ParcelID: 0,
      Rarity: Rarity::N,
      ParcelAmountMin: 0,
      ParcelAmountMax: 0,
      Prob: 0,
      State: 0,
    }
  }
}
impl GachaElementExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GachaElementExcel<'b>> {
    let ID = self.ID;
    let GachaGroupID = self.GachaGroupID;
    let ParcelType = self.ParcelType;
    let ParcelID = self.ParcelID;
    let Rarity = self.Rarity;
    let ParcelAmountMin = self.ParcelAmountMin;
    let ParcelAmountMax = self.ParcelAmountMax;
    let Prob = self.Prob;
    let State = self.State;
    GachaElementExcel::create(_fbb, &GachaElementExcelArgs{
      ID,
      GachaGroupID,
      ParcelType,
      ParcelID,
      Rarity,
      ParcelAmountMin,
      ParcelAmountMax,
      Prob,
      State,
    })
  }
}
