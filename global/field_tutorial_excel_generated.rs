// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldTutorialExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldTutorialExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldTutorialExcel<'a> {
  type Inner = FieldTutorialExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldTutorialExcel<'a> {
  pub const VT_SEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_TUTORIALTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_CONDITIONTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_CONDITIONID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldTutorialExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldTutorialExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldTutorialExcel<'bldr>> {
    let mut builder = FieldTutorialExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldTutorial");
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      if let Some(x) = args.conditionId {
        builder.add_conditionId(x);
      }
      if let Some(x) = args.conditionType {
        builder.add_conditionType(x);
      }
      if let Some(x) = args.tutorialType {
        builder.add_tutorialType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> FieldTutorialExcelT {
    let key = table_encryption_service::create_key(b"FieldTutorial");
      let SeasonId = self.SeasonId();
    let tutorialType = self.tutorialType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let conditionType = self.conditionType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let conditionId = self.conditionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    FieldTutorialExcelT {
      SeasonId,
      tutorialType,
      conditionType,
      conditionId,
    }
  }

  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldTutorialExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn tutorialType(&self) -> Option<flatbuffers::Vector<'a, FieldTutorialType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, FieldTutorialType>>>(FieldTutorialExcel::VT_TUTORIALTYPE, None)}
  }
  #[inline]
  pub fn conditionType(&self) -> Option<flatbuffers::Vector<'a, FieldConditionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, FieldConditionType>>>(FieldTutorialExcel::VT_CONDITIONTYPE, None)}
  }
  #[inline]
  pub fn conditionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(FieldTutorialExcel::VT_CONDITIONID, None)}
  }
}

impl flatbuffers::Verifiable for FieldTutorialExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, FieldTutorialType>>>("tutorialType", Self::VT_TUTORIALTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, FieldConditionType>>>("conditionType", Self::VT_CONDITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("conditionId", Self::VT_CONDITIONID, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldTutorialExcelArgs<'a> {
    pub SeasonId: i64,
    pub tutorialType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, FieldTutorialType>>>,
    pub conditionType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, FieldConditionType>>>,
    pub conditionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for FieldTutorialExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldTutorialExcelArgs {
      SeasonId: 0,
      tutorialType: None,
      conditionType: None,
      conditionId: None,
    }
  }
}

impl Serialize for FieldTutorialExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldTutorialExcel", 4)?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      if let Some(f) = self.tutorialType() {
        s.serialize_field("tutorialType", &f)?;
      } else {
        s.skip_field("tutorialType")?;
      }
      if let Some(f) = self.conditionType() {
        s.serialize_field("conditionType", &f)?;
      } else {
        s.skip_field("conditionType")?;
      }
      if let Some(f) = self.conditionId() {
        s.serialize_field("conditionId", &f)?;
      } else {
        s.skip_field("conditionId")?;
      }
    s.end()
  }
}

pub struct FieldTutorialExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldTutorialExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(FieldTutorialExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_tutorialType(&mut self, tutorialType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , FieldTutorialType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldTutorialExcel::VT_TUTORIALTYPE, tutorialType);
  }
  #[inline]
  pub fn add_conditionType(&mut self, conditionType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , FieldConditionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldTutorialExcel::VT_CONDITIONTYPE, conditionType);
  }
  #[inline]
  pub fn add_conditionId(&mut self, conditionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldTutorialExcel::VT_CONDITIONID, conditionId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldTutorialExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldTutorialExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldTutorialExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldTutorialExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldTutorialExcel");
      ds.field("SeasonId", &self.SeasonId());
      ds.field("tutorialType", &self.tutorialType());
      ds.field("conditionType", &self.conditionType());
      ds.field("conditionId", &self.conditionId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldTutorialExcelT {
  pub SeasonId: i64,
  pub tutorialType: Option<Vec<FieldTutorialType>>,
  pub conditionType: Option<Vec<FieldConditionType>>,
  pub conditionId: Option<Vec<i64>>,
}
impl Default for FieldTutorialExcelT {
  fn default() -> Self {
    Self {
      SeasonId: 0,
      tutorialType: None,
      conditionType: None,
      conditionId: None,
    }
  }
}
impl FieldTutorialExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldTutorialExcel<'b>> {
    let SeasonId = self.SeasonId;
    let tutorialType = self.tutorialType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionType = self.conditionType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let conditionId = self.conditionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    FieldTutorialExcel::create(_fbb, &FieldTutorialExcelArgs{
      SeasonId,
      tutorialType,
      conditionType,
      conditionId,
    })
  }
}
