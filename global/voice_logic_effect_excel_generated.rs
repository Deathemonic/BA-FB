// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VoiceLogicEffectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VoiceLogicEffectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VoiceLogicEffectExcel<'a> {
  type Inner = VoiceLogicEffectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VoiceLogicEffectExcel<'a> {
  pub const VT_LOGICEFFECTNAMEHASH: flatbuffers::VOffsetT = 4;
  pub const VT_SELF_: flatbuffers::VOffsetT = 6;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 8;
  pub const VT_VOICEHASH: flatbuffers::VOffsetT = 10;
  pub const VT_VOICEID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VoiceLogicEffectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VoiceLogicEffectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<VoiceLogicEffectExcel<'bldr>> {
    let mut builder = VoiceLogicEffectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"VoiceLogicEffect");
      let x = args.VoiceId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_VoiceId(x);
      if let Some(x) = args.VoiceHash {
        builder.add_VoiceHash(x);
      }
      let x = args.Priority;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Priority(x);
      let x = args.LogicEffectNameHash;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LogicEffectNameHash(x);
      builder.add_Self_(args.Self_);
    builder.finish()
  }

  pub fn unpack(&self) -> VoiceLogicEffectExcelT {
    let key = table_encryption_service::create_key(b"VoiceLogicEffect");
      let LogicEffectNameHash = self.LogicEffectNameHash();
      let Self_ = self.Self_();
      let Priority = self.Priority();
    let VoiceHash = self.VoiceHash().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
      let VoiceId = self.VoiceId();
    VoiceLogicEffectExcelT {
      LogicEffectNameHash,
      Self_,
      Priority,
      VoiceHash,
      VoiceId,
    }
  }

  #[inline]
  pub fn LogicEffectNameHash(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VoiceLogicEffectExcel::VT_LOGICEFFECTNAMEHASH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Self_(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(VoiceLogicEffectExcel::VT_SELF_, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Priority(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(VoiceLogicEffectExcel::VT_PRIORITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VoiceHash(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(VoiceLogicEffectExcel::VT_VOICEHASH, None)}
  }
  #[inline]
  pub fn VoiceId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(VoiceLogicEffectExcel::VT_VOICEID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for VoiceLogicEffectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("LogicEffectNameHash", Self::VT_LOGICEFFECTNAMEHASH, false)?
     .visit_field::<bool>("Self_", Self::VT_SELF_, false)?
     .visit_field::<i32>("Priority", Self::VT_PRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("VoiceHash", Self::VT_VOICEHASH, false)?
     .visit_field::<u32>("VoiceId", Self::VT_VOICEID, false)?
     .finish();
    Ok(())
  }
}
pub struct VoiceLogicEffectExcelArgs<'a> {
    pub LogicEffectNameHash: u32,
    pub Self_: bool,
    pub Priority: i32,
    pub VoiceHash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub VoiceId: u32,
}
impl<'a> Default for VoiceLogicEffectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    VoiceLogicEffectExcelArgs {
      LogicEffectNameHash: 0,
      Self_: false,
      Priority: 0,
      VoiceHash: None,
      VoiceId: 0,
    }
  }
}

impl Serialize for VoiceLogicEffectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VoiceLogicEffectExcel", 5)?;
      s.serialize_field("LogicEffectNameHash", &self.LogicEffectNameHash())?;
      s.serialize_field("Self_", &self.Self_())?;
      s.serialize_field("Priority", &self.Priority())?;
      if let Some(f) = self.VoiceHash() {
        s.serialize_field("VoiceHash", &f)?;
      } else {
        s.skip_field("VoiceHash")?;
      }
      s.serialize_field("VoiceId", &self.VoiceId())?;
    s.end()
  }
}

pub struct VoiceLogicEffectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VoiceLogicEffectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_LogicEffectNameHash(&mut self, LogicEffectNameHash: u32) {
    self.fbb_.push_slot::<u32>(VoiceLogicEffectExcel::VT_LOGICEFFECTNAMEHASH, LogicEffectNameHash, 0);
  }
  #[inline]
  pub fn add_Self_(&mut self, Self_: bool) {
    self.fbb_.push_slot::<bool>(VoiceLogicEffectExcel::VT_SELF_, Self_, false);
  }
  #[inline]
  pub fn add_Priority(&mut self, Priority: i32) {
    self.fbb_.push_slot::<i32>(VoiceLogicEffectExcel::VT_PRIORITY, Priority, 0);
  }
  #[inline]
  pub fn add_VoiceHash(&mut self, VoiceHash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VoiceLogicEffectExcel::VT_VOICEHASH, VoiceHash);
  }
  #[inline]
  pub fn add_VoiceId(&mut self, VoiceId: u32) {
    self.fbb_.push_slot::<u32>(VoiceLogicEffectExcel::VT_VOICEID, VoiceId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VoiceLogicEffectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VoiceLogicEffectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VoiceLogicEffectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VoiceLogicEffectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VoiceLogicEffectExcel");
      ds.field("LogicEffectNameHash", &self.LogicEffectNameHash());
      ds.field("Self_", &self.Self_());
      ds.field("Priority", &self.Priority());
      ds.field("VoiceHash", &self.VoiceHash());
      ds.field("VoiceId", &self.VoiceId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct VoiceLogicEffectExcelT {
  pub LogicEffectNameHash: u32,
  pub Self_: bool,
  pub Priority: i32,
  pub VoiceHash: Option<Vec<u32>>,
  pub VoiceId: u32,
}
impl Default for VoiceLogicEffectExcelT {
  fn default() -> Self {
    Self {
      LogicEffectNameHash: 0,
      Self_: false,
      Priority: 0,
      VoiceHash: None,
      VoiceId: 0,
    }
  }
}
impl VoiceLogicEffectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<VoiceLogicEffectExcel<'b>> {
    let LogicEffectNameHash = self.LogicEffectNameHash;
    let Self_ = self.Self_;
    let Priority = self.Priority;
    let VoiceHash = self.VoiceHash.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let VoiceId = self.VoiceId;
    VoiceLogicEffectExcel::create(_fbb, &VoiceLogicEffectExcelArgs{
      LogicEffectNameHash,
      Self_,
      Priority,
      VoiceHash,
      VoiceId,
    })
  }
}
