// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DIALOG_CONDITION: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DIALOG_CONDITION: i32 = 30;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DIALOG_CONDITION: [DialogCondition; 31] = [
  DialogCondition::Idle,
  DialogCondition::Enter,
  DialogCondition::Exit,
  DialogCondition::Buy,
  DialogCondition::SoldOut,
  DialogCondition::BoxGachaNormal,
  DialogCondition::BoxGachaPrize,
  DialogCondition::Prize0,
  DialogCondition::Prize1,
  DialogCondition::Prize2,
  DialogCondition::Prize3,
  DialogCondition::Interaction,
  DialogCondition::Luck0,
  DialogCondition::Luck1,
  DialogCondition::Luck2,
  DialogCondition::Luck3,
  DialogCondition::Luck4,
  DialogCondition::Luck5,
  DialogCondition::StoryOpen,
  DialogCondition::CollectionOpen,
  DialogCondition::BoxGachaFinish,
  DialogCondition::FindTreasure,
  DialogCondition::GetTreasure,
  DialogCondition::RoundRenewal,
  DialogCondition::MiniGameDreamMakerEnough01,
  DialogCondition::MiniGameDreamMakerEnough02,
  DialogCondition::MiniGameDreamMakerEnough03,
  DialogCondition::MiniGameDreamMakerEnough04,
  DialogCondition::MiniGameDreamMakerDefault,
  DialogCondition::PassLevelUp,
  DialogCondition::UnlockPassReward,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DialogCondition(pub i32);
#[allow(non_upper_case_globals)]
impl DialogCondition {
  pub const Idle: Self = Self(0);
  pub const Enter: Self = Self(1);
  pub const Exit: Self = Self(2);
  pub const Buy: Self = Self(3);
  pub const SoldOut: Self = Self(4);
  pub const BoxGachaNormal: Self = Self(5);
  pub const BoxGachaPrize: Self = Self(6);
  pub const Prize0: Self = Self(7);
  pub const Prize1: Self = Self(8);
  pub const Prize2: Self = Self(9);
  pub const Prize3: Self = Self(10);
  pub const Interaction: Self = Self(11);
  pub const Luck0: Self = Self(12);
  pub const Luck1: Self = Self(13);
  pub const Luck2: Self = Self(14);
  pub const Luck3: Self = Self(15);
  pub const Luck4: Self = Self(16);
  pub const Luck5: Self = Self(17);
  pub const StoryOpen: Self = Self(18);
  pub const CollectionOpen: Self = Self(19);
  pub const BoxGachaFinish: Self = Self(20);
  pub const FindTreasure: Self = Self(21);
  pub const GetTreasure: Self = Self(22);
  pub const RoundRenewal: Self = Self(23);
  pub const MiniGameDreamMakerEnough01: Self = Self(24);
  pub const MiniGameDreamMakerEnough02: Self = Self(25);
  pub const MiniGameDreamMakerEnough03: Self = Self(26);
  pub const MiniGameDreamMakerEnough04: Self = Self(27);
  pub const MiniGameDreamMakerDefault: Self = Self(28);
  pub const PassLevelUp: Self = Self(29);
  pub const UnlockPassReward: Self = Self(30);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 30;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Idle,
    Self::Enter,
    Self::Exit,
    Self::Buy,
    Self::SoldOut,
    Self::BoxGachaNormal,
    Self::BoxGachaPrize,
    Self::Prize0,
    Self::Prize1,
    Self::Prize2,
    Self::Prize3,
    Self::Interaction,
    Self::Luck0,
    Self::Luck1,
    Self::Luck2,
    Self::Luck3,
    Self::Luck4,
    Self::Luck5,
    Self::StoryOpen,
    Self::CollectionOpen,
    Self::BoxGachaFinish,
    Self::FindTreasure,
    Self::GetTreasure,
    Self::RoundRenewal,
    Self::MiniGameDreamMakerEnough01,
    Self::MiniGameDreamMakerEnough02,
    Self::MiniGameDreamMakerEnough03,
    Self::MiniGameDreamMakerEnough04,
    Self::MiniGameDreamMakerDefault,
    Self::PassLevelUp,
    Self::UnlockPassReward,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Idle => Some("Idle"),
      Self::Enter => Some("Enter"),
      Self::Exit => Some("Exit"),
      Self::Buy => Some("Buy"),
      Self::SoldOut => Some("SoldOut"),
      Self::BoxGachaNormal => Some("BoxGachaNormal"),
      Self::BoxGachaPrize => Some("BoxGachaPrize"),
      Self::Prize0 => Some("Prize0"),
      Self::Prize1 => Some("Prize1"),
      Self::Prize2 => Some("Prize2"),
      Self::Prize3 => Some("Prize3"),
      Self::Interaction => Some("Interaction"),
      Self::Luck0 => Some("Luck0"),
      Self::Luck1 => Some("Luck1"),
      Self::Luck2 => Some("Luck2"),
      Self::Luck3 => Some("Luck3"),
      Self::Luck4 => Some("Luck4"),
      Self::Luck5 => Some("Luck5"),
      Self::StoryOpen => Some("StoryOpen"),
      Self::CollectionOpen => Some("CollectionOpen"),
      Self::BoxGachaFinish => Some("BoxGachaFinish"),
      Self::FindTreasure => Some("FindTreasure"),
      Self::GetTreasure => Some("GetTreasure"),
      Self::RoundRenewal => Some("RoundRenewal"),
      Self::MiniGameDreamMakerEnough01 => Some("MiniGameDreamMakerEnough01"),
      Self::MiniGameDreamMakerEnough02 => Some("MiniGameDreamMakerEnough02"),
      Self::MiniGameDreamMakerEnough03 => Some("MiniGameDreamMakerEnough03"),
      Self::MiniGameDreamMakerEnough04 => Some("MiniGameDreamMakerEnough04"),
      Self::MiniGameDreamMakerDefault => Some("MiniGameDreamMakerDefault"),
      Self::PassLevelUp => Some("PassLevelUp"),
      Self::UnlockPassReward => Some("UnlockPassReward"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DialogCondition {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for DialogCondition {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("DialogCondition", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for DialogCondition {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DialogCondition {
    type Output = DialogCondition;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DialogCondition {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DialogCondition {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DialogCondition {}
