// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopExcel<'a> {
  type Inner = ShopExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 6;
  pub const VT_CATEGORYTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_ISLEGACY: flatbuffers::VOffsetT = 10;
  pub const VT_USEBIGPOPUP: flatbuffers::VOffsetT = 12;
  pub const VT_GOODSID: flatbuffers::VOffsetT = 14;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 16;
  pub const VT_SALEPERIODFROM: flatbuffers::VOffsetT = 18;
  pub const VT_SALEPERIODTO: flatbuffers::VOffsetT = 20;
  pub const VT_PURCHASECOOLTIMEMIN: flatbuffers::VOffsetT = 22;
  pub const VT_PURCHASECOUNTLIMIT: flatbuffers::VOffsetT = 24;
  pub const VT_PURCHASECOUNTRESETTYPE: flatbuffers::VOffsetT = 26;
  pub const VT_BUYREPORTEVENTNAME: flatbuffers::VOffsetT = 28;
  pub const VT_RESTRICTBUYWHENINVENTORYFULL: flatbuffers::VOffsetT = 30;
  pub const VT_DISPLAYTAG: flatbuffers::VOffsetT = 32;
  pub const VT_SHOPUPDATEGROUPID: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShopExcel<'bldr>> {
    let mut builder = ShopExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Shop");
      let x = args.PurchaseCountLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PurchaseCountLimit(x);
      let x = args.PurchaseCooltimeMin;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PurchaseCooltimeMin(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.ShopUpdateGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ShopUpdateGroupId(x);
      let x = args.DisplayTag;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DisplayTag(x);
      if let Some(x) = args.BuyReportEventName {
        builder.add_BuyReportEventName(x);
      }
      let x = args.PurchaseCountResetType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PurchaseCountResetType(x);
      if let Some(x) = args.SalePeriodTo {
        builder.add_SalePeriodTo(x);
      }
      if let Some(x) = args.SalePeriodFrom {
        builder.add_SalePeriodFrom(x);
      }
      if let Some(x) = args.GoodsId {
        builder.add_GoodsId(x);
      }
      let x = args.CategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CategoryType(x);
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      builder.add_RestrictBuyWhenInventoryFull(args.RestrictBuyWhenInventoryFull);
      builder.add_UseBigPopup(args.UseBigPopup);
      builder.add_IsLegacy(args.IsLegacy);
    builder.finish()
  }

  pub fn unpack(&self) -> ShopExcelT {
    let key = table_encryption_service::create_key(b"Shop");
      let Id = self.Id();
      let LocalizeEtcId = self.LocalizeEtcId();
      let CategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CategoryType(), &key)
      } else {
        self.CategoryType()
      };
      let IsLegacy = self.IsLegacy();
      let UseBigPopup = self.UseBigPopup();
    let GoodsId = self.GoodsId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let DisplayOrder = self.DisplayOrder();
    let SalePeriodFrom = self.SalePeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SalePeriodTo = self.SalePeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let PurchaseCooltimeMin = self.PurchaseCooltimeMin();
      let PurchaseCountLimit = self.PurchaseCountLimit();
      let PurchaseCountResetType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PurchaseCountResetType(), &key)
      } else {
        self.PurchaseCountResetType()
      };
    let BuyReportEventName = self.BuyReportEventName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let RestrictBuyWhenInventoryFull = self.RestrictBuyWhenInventoryFull();
      let DisplayTag = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DisplayTag(), &key)
      } else {
        self.DisplayTag()
      };
      let ShopUpdateGroupId = self.ShopUpdateGroupId();
    ShopExcelT {
      Id,
      LocalizeEtcId,
      CategoryType,
      IsLegacy,
      UseBigPopup,
      GoodsId,
      DisplayOrder,
      SalePeriodFrom,
      SalePeriodTo,
      PurchaseCooltimeMin,
      PurchaseCountLimit,
      PurchaseCountResetType,
      BuyReportEventName,
      RestrictBuyWhenInventoryFull,
      DisplayTag,
      ShopUpdateGroupId,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ShopExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CategoryType(&self) -> ShopCategoryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopCategoryType>(ShopExcel::VT_CATEGORYTYPE, Some(ShopCategoryType::General)).unwrap()}
  }
  #[inline]
  pub fn IsLegacy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopExcel::VT_ISLEGACY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn UseBigPopup(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopExcel::VT_USEBIGPOPUP, Some(false)).unwrap()}
  }
  #[inline]
  pub fn GoodsId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ShopExcel::VT_GOODSID, None)}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SalePeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopExcel::VT_SALEPERIODFROM, None)}
  }
  #[inline]
  pub fn SalePeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopExcel::VT_SALEPERIODTO, None)}
  }
  #[inline]
  pub fn PurchaseCooltimeMin(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopExcel::VT_PURCHASECOOLTIMEMIN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PurchaseCountLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopExcel::VT_PURCHASECOUNTLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PurchaseCountResetType(&self) -> PurchaseCountResetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PurchaseCountResetType>(ShopExcel::VT_PURCHASECOUNTRESETTYPE, Some(PurchaseCountResetType::None)).unwrap()}
  }
  #[inline]
  pub fn BuyReportEventName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopExcel::VT_BUYREPORTEVENTNAME, None)}
  }
  #[inline]
  pub fn RestrictBuyWhenInventoryFull(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopExcel::VT_RESTRICTBUYWHENINVENTORYFULL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn DisplayTag(&self) -> ProductDisplayTag {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductDisplayTag>(ShopExcel::VT_DISPLAYTAG, Some(ProductDisplayTag::None)).unwrap()}
  }
  #[inline]
  pub fn ShopUpdateGroupId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ShopExcel::VT_SHOPUPDATEGROUPID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ShopExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<ShopCategoryType>("CategoryType", Self::VT_CATEGORYTYPE, false)?
     .visit_field::<bool>("IsLegacy", Self::VT_ISLEGACY, false)?
     .visit_field::<bool>("UseBigPopup", Self::VT_USEBIGPOPUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("GoodsId", Self::VT_GOODSID, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodFrom", Self::VT_SALEPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodTo", Self::VT_SALEPERIODTO, false)?
     .visit_field::<i64>("PurchaseCooltimeMin", Self::VT_PURCHASECOOLTIMEMIN, false)?
     .visit_field::<i64>("PurchaseCountLimit", Self::VT_PURCHASECOUNTLIMIT, false)?
     .visit_field::<PurchaseCountResetType>("PurchaseCountResetType", Self::VT_PURCHASECOUNTRESETTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuyReportEventName", Self::VT_BUYREPORTEVENTNAME, false)?
     .visit_field::<bool>("RestrictBuyWhenInventoryFull", Self::VT_RESTRICTBUYWHENINVENTORYFULL, false)?
     .visit_field::<ProductDisplayTag>("DisplayTag", Self::VT_DISPLAYTAG, false)?
     .visit_field::<i32>("ShopUpdateGroupId", Self::VT_SHOPUPDATEGROUPID, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopExcelArgs<'a> {
    pub Id: i64,
    pub LocalizeEtcId: u32,
    pub CategoryType: ShopCategoryType,
    pub IsLegacy: bool,
    pub UseBigPopup: bool,
    pub GoodsId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub DisplayOrder: i64,
    pub SalePeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SalePeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PurchaseCooltimeMin: i64,
    pub PurchaseCountLimit: i64,
    pub PurchaseCountResetType: PurchaseCountResetType,
    pub BuyReportEventName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub RestrictBuyWhenInventoryFull: bool,
    pub DisplayTag: ProductDisplayTag,
    pub ShopUpdateGroupId: i32,
}
impl<'a> Default for ShopExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShopExcelArgs {
      Id: 0,
      LocalizeEtcId: 0,
      CategoryType: ShopCategoryType::General,
      IsLegacy: false,
      UseBigPopup: false,
      GoodsId: None,
      DisplayOrder: 0,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      PurchaseCooltimeMin: 0,
      PurchaseCountLimit: 0,
      PurchaseCountResetType: PurchaseCountResetType::None,
      BuyReportEventName: None,
      RestrictBuyWhenInventoryFull: false,
      DisplayTag: ProductDisplayTag::None,
      ShopUpdateGroupId: 0,
    }
  }
}

impl Serialize for ShopExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopExcel", 16)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("CategoryType", &self.CategoryType())?;
      s.serialize_field("IsLegacy", &self.IsLegacy())?;
      s.serialize_field("UseBigPopup", &self.UseBigPopup())?;
      if let Some(f) = self.GoodsId() {
        s.serialize_field("GoodsId", &f)?;
      } else {
        s.skip_field("GoodsId")?;
      }
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      if let Some(f) = self.SalePeriodFrom() {
        s.serialize_field("SalePeriodFrom", &f)?;
      } else {
        s.skip_field("SalePeriodFrom")?;
      }
      if let Some(f) = self.SalePeriodTo() {
        s.serialize_field("SalePeriodTo", &f)?;
      } else {
        s.skip_field("SalePeriodTo")?;
      }
      s.serialize_field("PurchaseCooltimeMin", &self.PurchaseCooltimeMin())?;
      s.serialize_field("PurchaseCountLimit", &self.PurchaseCountLimit())?;
      s.serialize_field("PurchaseCountResetType", &self.PurchaseCountResetType())?;
      if let Some(f) = self.BuyReportEventName() {
        s.serialize_field("BuyReportEventName", &f)?;
      } else {
        s.skip_field("BuyReportEventName")?;
      }
      s.serialize_field("RestrictBuyWhenInventoryFull", &self.RestrictBuyWhenInventoryFull())?;
      s.serialize_field("DisplayTag", &self.DisplayTag())?;
      s.serialize_field("ShopUpdateGroupId", &self.ShopUpdateGroupId())?;
    s.end()
  }
}

pub struct ShopExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ShopExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(ShopExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_CategoryType(&mut self, CategoryType: ShopCategoryType) {
    self.fbb_.push_slot::<ShopCategoryType>(ShopExcel::VT_CATEGORYTYPE, CategoryType, ShopCategoryType::General);
  }
  #[inline]
  pub fn add_IsLegacy(&mut self, IsLegacy: bool) {
    self.fbb_.push_slot::<bool>(ShopExcel::VT_ISLEGACY, IsLegacy, false);
  }
  #[inline]
  pub fn add_UseBigPopup(&mut self, UseBigPopup: bool) {
    self.fbb_.push_slot::<bool>(ShopExcel::VT_USEBIGPOPUP, UseBigPopup, false);
  }
  #[inline]
  pub fn add_GoodsId(&mut self, GoodsId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopExcel::VT_GOODSID, GoodsId);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(ShopExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_SalePeriodFrom(&mut self, SalePeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopExcel::VT_SALEPERIODFROM, SalePeriodFrom);
  }
  #[inline]
  pub fn add_SalePeriodTo(&mut self, SalePeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopExcel::VT_SALEPERIODTO, SalePeriodTo);
  }
  #[inline]
  pub fn add_PurchaseCooltimeMin(&mut self, PurchaseCooltimeMin: i64) {
    self.fbb_.push_slot::<i64>(ShopExcel::VT_PURCHASECOOLTIMEMIN, PurchaseCooltimeMin, 0);
  }
  #[inline]
  pub fn add_PurchaseCountLimit(&mut self, PurchaseCountLimit: i64) {
    self.fbb_.push_slot::<i64>(ShopExcel::VT_PURCHASECOUNTLIMIT, PurchaseCountLimit, 0);
  }
  #[inline]
  pub fn add_PurchaseCountResetType(&mut self, PurchaseCountResetType: PurchaseCountResetType) {
    self.fbb_.push_slot::<PurchaseCountResetType>(ShopExcel::VT_PURCHASECOUNTRESETTYPE, PurchaseCountResetType, PurchaseCountResetType::None);
  }
  #[inline]
  pub fn add_BuyReportEventName(&mut self, BuyReportEventName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopExcel::VT_BUYREPORTEVENTNAME, BuyReportEventName);
  }
  #[inline]
  pub fn add_RestrictBuyWhenInventoryFull(&mut self, RestrictBuyWhenInventoryFull: bool) {
    self.fbb_.push_slot::<bool>(ShopExcel::VT_RESTRICTBUYWHENINVENTORYFULL, RestrictBuyWhenInventoryFull, false);
  }
  #[inline]
  pub fn add_DisplayTag(&mut self, DisplayTag: ProductDisplayTag) {
    self.fbb_.push_slot::<ProductDisplayTag>(ShopExcel::VT_DISPLAYTAG, DisplayTag, ProductDisplayTag::None);
  }
  #[inline]
  pub fn add_ShopUpdateGroupId(&mut self, ShopUpdateGroupId: i32) {
    self.fbb_.push_slot::<i32>(ShopExcel::VT_SHOPUPDATEGROUPID, ShopUpdateGroupId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopExcel");
      ds.field("Id", &self.Id());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("CategoryType", &self.CategoryType());
      ds.field("IsLegacy", &self.IsLegacy());
      ds.field("UseBigPopup", &self.UseBigPopup());
      ds.field("GoodsId", &self.GoodsId());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("SalePeriodFrom", &self.SalePeriodFrom());
      ds.field("SalePeriodTo", &self.SalePeriodTo());
      ds.field("PurchaseCooltimeMin", &self.PurchaseCooltimeMin());
      ds.field("PurchaseCountLimit", &self.PurchaseCountLimit());
      ds.field("PurchaseCountResetType", &self.PurchaseCountResetType());
      ds.field("BuyReportEventName", &self.BuyReportEventName());
      ds.field("RestrictBuyWhenInventoryFull", &self.RestrictBuyWhenInventoryFull());
      ds.field("DisplayTag", &self.DisplayTag());
      ds.field("ShopUpdateGroupId", &self.ShopUpdateGroupId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopExcelT {
  pub Id: i64,
  pub LocalizeEtcId: u32,
  pub CategoryType: ShopCategoryType,
  pub IsLegacy: bool,
  pub UseBigPopup: bool,
  pub GoodsId: Option<Vec<i64>>,
  pub DisplayOrder: i64,
  pub SalePeriodFrom: Option<String>,
  pub SalePeriodTo: Option<String>,
  pub PurchaseCooltimeMin: i64,
  pub PurchaseCountLimit: i64,
  pub PurchaseCountResetType: PurchaseCountResetType,
  pub BuyReportEventName: Option<String>,
  pub RestrictBuyWhenInventoryFull: bool,
  pub DisplayTag: ProductDisplayTag,
  pub ShopUpdateGroupId: i32,
}
impl Default for ShopExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      LocalizeEtcId: 0,
      CategoryType: ShopCategoryType::General,
      IsLegacy: false,
      UseBigPopup: false,
      GoodsId: None,
      DisplayOrder: 0,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      PurchaseCooltimeMin: 0,
      PurchaseCountLimit: 0,
      PurchaseCountResetType: PurchaseCountResetType::None,
      BuyReportEventName: None,
      RestrictBuyWhenInventoryFull: false,
      DisplayTag: ProductDisplayTag::None,
      ShopUpdateGroupId: 0,
    }
  }
}
impl ShopExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopExcel<'b>> {
    let Id = self.Id;
    let LocalizeEtcId = self.LocalizeEtcId;
    let CategoryType = self.CategoryType;
    let IsLegacy = self.IsLegacy;
    let UseBigPopup = self.UseBigPopup;
    let GoodsId = self.GoodsId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let DisplayOrder = self.DisplayOrder;
    let SalePeriodFrom = self.SalePeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SalePeriodTo = self.SalePeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PurchaseCooltimeMin = self.PurchaseCooltimeMin;
    let PurchaseCountLimit = self.PurchaseCountLimit;
    let PurchaseCountResetType = self.PurchaseCountResetType;
    let BuyReportEventName = self.BuyReportEventName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let RestrictBuyWhenInventoryFull = self.RestrictBuyWhenInventoryFull;
    let DisplayTag = self.DisplayTag;
    let ShopUpdateGroupId = self.ShopUpdateGroupId;
    ShopExcel::create(_fbb, &ShopExcelArgs{
      Id,
      LocalizeEtcId,
      CategoryType,
      IsLegacy,
      UseBigPopup,
      GoodsId,
      DisplayOrder,
      SalePeriodFrom,
      SalePeriodTo,
      PurchaseCooltimeMin,
      PurchaseCountLimit,
      PurchaseCountResetType,
      BuyReportEventName,
      RestrictBuyWhenInventoryFull,
      DisplayTag,
      ShopUpdateGroupId,
    })
  }
}
