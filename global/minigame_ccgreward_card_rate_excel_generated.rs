// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGRewardCardRateExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGRewardCardRateExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGRewardCardRateExcel<'a> {
  type Inner = MinigameCCGRewardCardRateExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGRewardCardRateExcel<'a> {
  pub const VT_RARITYGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_CARDRARITY: flatbuffers::VOffsetT = 6;
  pub const VT_RATE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGRewardCardRateExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGRewardCardRateExcelArgs
  ) -> flatbuffers::WIPOffset<MinigameCCGRewardCardRateExcel<'bldr>> {
    let mut builder = MinigameCCGRewardCardRateExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGRewardCardRate");
      let x = args.RarityGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RarityGroupId(x);
      let x = args.Rate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Rate(x);
      let x = args.CardRarity;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_CardRarity(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGRewardCardRateExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGRewardCardRate");
      let RarityGroupId = self.RarityGroupId();
      let CardRarity = self.CardRarity();
      let Rate = self.Rate();
    MinigameCCGRewardCardRateExcelT {
      RarityGroupId,
      CardRarity,
      Rate,
    }
  }

  #[inline]
  pub fn RarityGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGRewardCardRateExcel::VT_RARITYGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CardRarity(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGRewardCardRateExcel::VT_CARDRARITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Rate(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameCCGRewardCardRateExcel::VT_RATE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameCCGRewardCardRateExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("RarityGroupId", Self::VT_RARITYGROUPID, false)?
     .visit_field::<i32>("CardRarity", Self::VT_CARDRARITY, false)?
     .visit_field::<i32>("Rate", Self::VT_RATE, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGRewardCardRateExcelArgs {
    pub RarityGroupId: i64,
    pub CardRarity: i32,
    pub Rate: i32,
}
impl<'a> Default for MinigameCCGRewardCardRateExcelArgs {
  #[inline]
  fn default() -> Self {
    MinigameCCGRewardCardRateExcelArgs {
      RarityGroupId: 0,
      CardRarity: 0,
      Rate: 0,
    }
  }
}

impl Serialize for MinigameCCGRewardCardRateExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGRewardCardRateExcel", 3)?;
      s.serialize_field("RarityGroupId", &self.RarityGroupId())?;
      s.serialize_field("CardRarity", &self.CardRarity())?;
      s.serialize_field("Rate", &self.Rate())?;
    s.end()
  }
}

pub struct MinigameCCGRewardCardRateExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGRewardCardRateExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_RarityGroupId(&mut self, RarityGroupId: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGRewardCardRateExcel::VT_RARITYGROUPID, RarityGroupId, 0);
  }
  #[inline]
  pub fn add_CardRarity(&mut self, CardRarity: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGRewardCardRateExcel::VT_CARDRARITY, CardRarity, 0);
  }
  #[inline]
  pub fn add_Rate(&mut self, Rate: i32) {
    self.fbb_.push_slot::<i32>(MinigameCCGRewardCardRateExcel::VT_RATE, Rate, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGRewardCardRateExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGRewardCardRateExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGRewardCardRateExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGRewardCardRateExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGRewardCardRateExcel");
      ds.field("RarityGroupId", &self.RarityGroupId());
      ds.field("CardRarity", &self.CardRarity());
      ds.field("Rate", &self.Rate());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGRewardCardRateExcelT {
  pub RarityGroupId: i64,
  pub CardRarity: i32,
  pub Rate: i32,
}
impl Default for MinigameCCGRewardCardRateExcelT {
  fn default() -> Self {
    Self {
      RarityGroupId: 0,
      CardRarity: 0,
      Rate: 0,
    }
  }
}
impl MinigameCCGRewardCardRateExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGRewardCardRateExcel<'b>> {
    let RarityGroupId = self.RarityGroupId;
    let CardRarity = self.CardRarity;
    let Rate = self.Rate;
    MinigameCCGRewardCardRateExcel::create(_fbb, &MinigameCCGRewardCardRateExcelArgs{
      RarityGroupId,
      CardRarity,
      Rate,
    })
  }
}
