// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AniEventDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AniEventData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AniEventData<'a> {
  type Inner = AniEventData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AniEventData<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_TIME: flatbuffers::VOffsetT = 6;
  pub const VT_INTPARAM: flatbuffers::VOffsetT = 8;
  pub const VT_FLOATPARAM: flatbuffers::VOffsetT = 10;
  pub const VT_STRINGPARAM: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AniEventData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AniEventDataArgs<'args>
  ) -> flatbuffers::WIPOffset<AniEventData<'bldr>> {
    let mut builder = AniEventDataBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AniEven");
      if let Some(x) = args.StringParam {
        builder.add_StringParam(x);
      }
      let x = args.FloatParam;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_FloatParam(x);
      let x = args.IntParam;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_IntParam(x);
      let x = args.Time;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_Time(x);
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> AniEventDataT {
    let key = table_encryption_service::create_key(b"AniEven");
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Time = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.Time(), &key)
      } else {
        self.Time()
      };
      let IntParam = self.IntParam();
      let FloatParam = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.FloatParam(), &key)
      } else {
        self.FloatParam()
      };
    let StringParam = self.StringParam().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    AniEventDataT {
      Name,
      Time,
      IntParam,
      FloatParam,
      StringParam,
    }
  }

  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniEventData::VT_NAME, None)}
  }
  #[inline]
  pub fn Time(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AniEventData::VT_TIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn IntParam(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AniEventData::VT_INTPARAM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FloatParam(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(AniEventData::VT_FLOATPARAM, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn StringParam(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AniEventData::VT_STRINGPARAM, None)}
  }
}

impl flatbuffers::Verifiable for AniEventData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<f32>("Time", Self::VT_TIME, false)?
     .visit_field::<i32>("IntParam", Self::VT_INTPARAM, false)?
     .visit_field::<f32>("FloatParam", Self::VT_FLOATPARAM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StringParam", Self::VT_STRINGPARAM, false)?
     .finish();
    Ok(())
  }
}
pub struct AniEventDataArgs<'a> {
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Time: f32,
    pub IntParam: i32,
    pub FloatParam: f32,
    pub StringParam: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AniEventDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    AniEventDataArgs {
      Name: None,
      Time: 0.0,
      IntParam: 0,
      FloatParam: 0.0,
      StringParam: None,
    }
  }
}

impl Serialize for AniEventData<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AniEventData", 5)?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      s.serialize_field("Time", &self.Time())?;
      s.serialize_field("IntParam", &self.IntParam())?;
      s.serialize_field("FloatParam", &self.FloatParam())?;
      if let Some(f) = self.StringParam() {
        s.serialize_field("StringParam", &f)?;
      } else {
        s.skip_field("StringParam")?;
      }
    s.end()
  }
}

pub struct AniEventDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AniEventDataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniEventData::VT_NAME, Name);
  }
  #[inline]
  pub fn add_Time(&mut self, Time: f32) {
    self.fbb_.push_slot::<f32>(AniEventData::VT_TIME, Time, 0.0);
  }
  #[inline]
  pub fn add_IntParam(&mut self, IntParam: i32) {
    self.fbb_.push_slot::<i32>(AniEventData::VT_INTPARAM, IntParam, 0);
  }
  #[inline]
  pub fn add_FloatParam(&mut self, FloatParam: f32) {
    self.fbb_.push_slot::<f32>(AniEventData::VT_FLOATPARAM, FloatParam, 0.0);
  }
  #[inline]
  pub fn add_StringParam(&mut self, StringParam: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AniEventData::VT_STRINGPARAM, StringParam);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AniEventDataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AniEventDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AniEventData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AniEventData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AniEventData");
      ds.field("Name", &self.Name());
      ds.field("Time", &self.Time());
      ds.field("IntParam", &self.IntParam());
      ds.field("FloatParam", &self.FloatParam());
      ds.field("StringParam", &self.StringParam());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AniEventDataT {
  pub Name: Option<String>,
  pub Time: f32,
  pub IntParam: i32,
  pub FloatParam: f32,
  pub StringParam: Option<String>,
}
impl Default for AniEventDataT {
  fn default() -> Self {
    Self {
      Name: None,
      Time: 0.0,
      IntParam: 0,
      FloatParam: 0.0,
      StringParam: None,
    }
  }
}
impl AniEventDataT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AniEventData<'b>> {
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Time = self.Time;
    let IntParam = self.IntParam;
    let FloatParam = self.FloatParam;
    let StringParam = self.StringParam.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AniEventData::create(_fbb, &AniEventDataArgs{
      Name,
      Time,
      IntParam,
      FloatParam,
      StringParam,
    })
  }
}
