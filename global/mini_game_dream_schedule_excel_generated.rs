// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameDreamScheduleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameDreamScheduleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameDreamScheduleExcel<'a> {
  type Inner = MiniGameDreamScheduleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameDreamScheduleExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_DREAMMAKERSCHEDULEGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 10;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 12;
  pub const VT_LOADINGRESOURCE01: flatbuffers::VOffsetT = 14;
  pub const VT_LOADINGRESOURCE02: flatbuffers::VOffsetT = 16;
  pub const VT_ANIMATIONNAME: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameDreamScheduleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameDreamScheduleExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameDreamScheduleExcel<'bldr>> {
    let mut builder = MiniGameDreamScheduleExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameDreamSchedule");
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.DreamMakerScheduleGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DreamMakerScheduleGroupId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.AnimationName {
        builder.add_AnimationName(x);
      }
      if let Some(x) = args.LoadingResource02 {
        builder.add_LoadingResource02(x);
      }
      if let Some(x) = args.LoadingResource01 {
        builder.add_LoadingResource01(x);
      }
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameDreamScheduleExcelT {
    let key = table_encryption_service::create_key(b"MiniGameDreamSchedule");
      let EventContentId = self.EventContentId();
      let DreamMakerScheduleGroupId = self.DreamMakerScheduleGroupId();
      let DisplayOrder = self.DisplayOrder();
      let LocalizeEtcId = self.LocalizeEtcId();
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LoadingResource01 = self.LoadingResource01().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let LoadingResource02 = self.LoadingResource02().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AnimationName = self.AnimationName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MiniGameDreamScheduleExcelT {
      EventContentId,
      DreamMakerScheduleGroupId,
      DisplayOrder,
      LocalizeEtcId,
      IconPath,
      LoadingResource01,
      LoadingResource02,
      AnimationName,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DreamMakerScheduleGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleExcel::VT_DREAMMAKERSCHEDULEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameDreamScheduleExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MiniGameDreamScheduleExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamScheduleExcel::VT_ICONPATH, None)}
  }
  #[inline]
  pub fn LoadingResource01(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamScheduleExcel::VT_LOADINGRESOURCE01, None)}
  }
  #[inline]
  pub fn LoadingResource02(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamScheduleExcel::VT_LOADINGRESOURCE02, None)}
  }
  #[inline]
  pub fn AnimationName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameDreamScheduleExcel::VT_ANIMATIONNAME, None)}
  }
}

impl flatbuffers::Verifiable for MiniGameDreamScheduleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("DreamMakerScheduleGroupId", Self::VT_DREAMMAKERSCHEDULEGROUPID, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LoadingResource01", Self::VT_LOADINGRESOURCE01, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LoadingResource02", Self::VT_LOADINGRESOURCE02, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AnimationName", Self::VT_ANIMATIONNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameDreamScheduleExcelArgs<'a> {
    pub EventContentId: i64,
    pub DreamMakerScheduleGroupId: i64,
    pub DisplayOrder: i64,
    pub LocalizeEtcId: u32,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LoadingResource01: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LoadingResource02: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AnimationName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MiniGameDreamScheduleExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameDreamScheduleExcelArgs {
      EventContentId: 0,
      DreamMakerScheduleGroupId: 0,
      DisplayOrder: 0,
      LocalizeEtcId: 0,
      IconPath: None,
      LoadingResource01: None,
      LoadingResource02: None,
      AnimationName: None,
    }
  }
}

impl Serialize for MiniGameDreamScheduleExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameDreamScheduleExcel", 8)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("DreamMakerScheduleGroupId", &self.DreamMakerScheduleGroupId())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
      if let Some(f) = self.LoadingResource01() {
        s.serialize_field("LoadingResource01", &f)?;
      } else {
        s.skip_field("LoadingResource01")?;
      }
      if let Some(f) = self.LoadingResource02() {
        s.serialize_field("LoadingResource02", &f)?;
      } else {
        s.skip_field("LoadingResource02")?;
      }
      if let Some(f) = self.AnimationName() {
        s.serialize_field("AnimationName", &f)?;
      } else {
        s.skip_field("AnimationName")?;
      }
    s.end()
  }
}

pub struct MiniGameDreamScheduleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameDreamScheduleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_DreamMakerScheduleGroupId(&mut self, DreamMakerScheduleGroupId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleExcel::VT_DREAMMAKERSCHEDULEGROUPID, DreamMakerScheduleGroupId, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(MiniGameDreamScheduleExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(MiniGameDreamScheduleExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamScheduleExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn add_LoadingResource01(&mut self, LoadingResource01: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamScheduleExcel::VT_LOADINGRESOURCE01, LoadingResource01);
  }
  #[inline]
  pub fn add_LoadingResource02(&mut self, LoadingResource02: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamScheduleExcel::VT_LOADINGRESOURCE02, LoadingResource02);
  }
  #[inline]
  pub fn add_AnimationName(&mut self, AnimationName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameDreamScheduleExcel::VT_ANIMATIONNAME, AnimationName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameDreamScheduleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameDreamScheduleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameDreamScheduleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameDreamScheduleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameDreamScheduleExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("DreamMakerScheduleGroupId", &self.DreamMakerScheduleGroupId());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("IconPath", &self.IconPath());
      ds.field("LoadingResource01", &self.LoadingResource01());
      ds.field("LoadingResource02", &self.LoadingResource02());
      ds.field("AnimationName", &self.AnimationName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameDreamScheduleExcelT {
  pub EventContentId: i64,
  pub DreamMakerScheduleGroupId: i64,
  pub DisplayOrder: i64,
  pub LocalizeEtcId: u32,
  pub IconPath: Option<String>,
  pub LoadingResource01: Option<String>,
  pub LoadingResource02: Option<String>,
  pub AnimationName: Option<String>,
}
impl Default for MiniGameDreamScheduleExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      DreamMakerScheduleGroupId: 0,
      DisplayOrder: 0,
      LocalizeEtcId: 0,
      IconPath: None,
      LoadingResource01: None,
      LoadingResource02: None,
      AnimationName: None,
    }
  }
}
impl MiniGameDreamScheduleExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameDreamScheduleExcel<'b>> {
    let EventContentId = self.EventContentId;
    let DreamMakerScheduleGroupId = self.DreamMakerScheduleGroupId;
    let DisplayOrder = self.DisplayOrder;
    let LocalizeEtcId = self.LocalizeEtcId;
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LoadingResource01 = self.LoadingResource01.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LoadingResource02 = self.LoadingResource02.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AnimationName = self.AnimationName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MiniGameDreamScheduleExcel::create(_fbb, &MiniGameDreamScheduleExcelArgs{
      EventContentId,
      DreamMakerScheduleGroupId,
      DisplayOrder,
      LocalizeEtcId,
      IconPath,
      LoadingResource01,
      LoadingResource02,
      AnimationName,
    })
  }
}
