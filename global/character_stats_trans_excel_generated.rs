// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterStatsTransExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterStatsTransExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterStatsTransExcel<'a> {
  type Inner = CharacterStatsTransExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterStatsTransExcel<'a> {
  pub const VT_TRANSSUPPORTSTATS: flatbuffers::VOffsetT = 4;
  pub const VT_ECHELONEXTENSIONTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_TRANSSUPPORTSTATSFACTOR: flatbuffers::VOffsetT = 8;
  pub const VT_STATTRANSTYPE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterStatsTransExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterStatsTransExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterStatsTransExcel<'bldr>> {
    let mut builder = CharacterStatsTransExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterStatsTrans");
      let x = args.StatTransType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StatTransType(x);
      let x = args.TransSupportStatsFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_TransSupportStatsFactor(x);
      let x = args.EchelonExtensionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EchelonExtensionType(x);
      let x = args.TransSupportStats;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TransSupportStats(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterStatsTransExcelT {
    let key = table_encryption_service::create_key(b"CharacterStatsTrans");
      let TransSupportStats = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TransSupportStats(), &key)
      } else {
        self.TransSupportStats()
      };
      let EchelonExtensionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EchelonExtensionType(), &key)
      } else {
        self.EchelonExtensionType()
      };
      let TransSupportStatsFactor = self.TransSupportStatsFactor();
      let StatTransType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StatTransType(), &key)
      } else {
        self.StatTransType()
      };
    CharacterStatsTransExcelT {
      TransSupportStats,
      EchelonExtensionType,
      TransSupportStatsFactor,
      StatTransType,
    }
  }

  #[inline]
  pub fn TransSupportStats(&self) -> StatType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StatType>(CharacterStatsTransExcel::VT_TRANSSUPPORTSTATS, Some(StatType::None)).unwrap()}
  }
  #[inline]
  pub fn EchelonExtensionType(&self) -> EchelonExtensionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EchelonExtensionType>(CharacterStatsTransExcel::VT_ECHELONEXTENSIONTYPE, Some(EchelonExtensionType::Base)).unwrap()}
  }
  #[inline]
  pub fn TransSupportStatsFactor(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterStatsTransExcel::VT_TRANSSUPPORTSTATSFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatTransType(&self) -> StatTransType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StatTransType>(CharacterStatsTransExcel::VT_STATTRANSTYPE, Some(StatTransType::SpecialTransStat)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterStatsTransExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<StatType>("TransSupportStats", Self::VT_TRANSSUPPORTSTATS, false)?
     .visit_field::<EchelonExtensionType>("EchelonExtensionType", Self::VT_ECHELONEXTENSIONTYPE, false)?
     .visit_field::<i32>("TransSupportStatsFactor", Self::VT_TRANSSUPPORTSTATSFACTOR, false)?
     .visit_field::<StatTransType>("StatTransType", Self::VT_STATTRANSTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterStatsTransExcelArgs {
    pub TransSupportStats: StatType,
    pub EchelonExtensionType: EchelonExtensionType,
    pub TransSupportStatsFactor: i32,
    pub StatTransType: StatTransType,
}
impl<'a> Default for CharacterStatsTransExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterStatsTransExcelArgs {
      TransSupportStats: StatType::None,
      EchelonExtensionType: EchelonExtensionType::Base,
      TransSupportStatsFactor: 0,
      StatTransType: StatTransType::SpecialTransStat,
    }
  }
}

impl Serialize for CharacterStatsTransExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterStatsTransExcel", 4)?;
      s.serialize_field("TransSupportStats", &self.TransSupportStats())?;
      s.serialize_field("EchelonExtensionType", &self.EchelonExtensionType())?;
      s.serialize_field("TransSupportStatsFactor", &self.TransSupportStatsFactor())?;
      s.serialize_field("StatTransType", &self.StatTransType())?;
    s.end()
  }
}

pub struct CharacterStatsTransExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterStatsTransExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_TransSupportStats(&mut self, TransSupportStats: StatType) {
    self.fbb_.push_slot::<StatType>(CharacterStatsTransExcel::VT_TRANSSUPPORTSTATS, TransSupportStats, StatType::None);
  }
  #[inline]
  pub fn add_EchelonExtensionType(&mut self, EchelonExtensionType: EchelonExtensionType) {
    self.fbb_.push_slot::<EchelonExtensionType>(CharacterStatsTransExcel::VT_ECHELONEXTENSIONTYPE, EchelonExtensionType, EchelonExtensionType::Base);
  }
  #[inline]
  pub fn add_TransSupportStatsFactor(&mut self, TransSupportStatsFactor: i32) {
    self.fbb_.push_slot::<i32>(CharacterStatsTransExcel::VT_TRANSSUPPORTSTATSFACTOR, TransSupportStatsFactor, 0);
  }
  #[inline]
  pub fn add_StatTransType(&mut self, StatTransType: StatTransType) {
    self.fbb_.push_slot::<StatTransType>(CharacterStatsTransExcel::VT_STATTRANSTYPE, StatTransType, StatTransType::SpecialTransStat);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterStatsTransExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterStatsTransExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterStatsTransExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterStatsTransExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterStatsTransExcel");
      ds.field("TransSupportStats", &self.TransSupportStats());
      ds.field("EchelonExtensionType", &self.EchelonExtensionType());
      ds.field("TransSupportStatsFactor", &self.TransSupportStatsFactor());
      ds.field("StatTransType", &self.StatTransType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterStatsTransExcelT {
  pub TransSupportStats: StatType,
  pub EchelonExtensionType: EchelonExtensionType,
  pub TransSupportStatsFactor: i32,
  pub StatTransType: StatTransType,
}
impl Default for CharacterStatsTransExcelT {
  fn default() -> Self {
    Self {
      TransSupportStats: StatType::None,
      EchelonExtensionType: EchelonExtensionType::Base,
      TransSupportStatsFactor: 0,
      StatTransType: StatTransType::SpecialTransStat,
    }
  }
}
impl CharacterStatsTransExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterStatsTransExcel<'b>> {
    let TransSupportStats = self.TransSupportStats;
    let EchelonExtensionType = self.EchelonExtensionType;
    let TransSupportStatsFactor = self.TransSupportStatsFactor;
    let StatTransType = self.StatTransType;
    CharacterStatsTransExcel::create(_fbb, &CharacterStatsTransExcelArgs{
      TransSupportStats,
      EchelonExtensionType,
      TransSupportStatsFactor,
      StatTransType,
    })
  }
}
