// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GachaCraftOpenTagExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GachaCraftOpenTagExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GachaCraftOpenTagExcel<'a> {
  type Inner = GachaCraftOpenTagExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GachaCraftOpenTagExcel<'a> {
  pub const VT_NODETIER: flatbuffers::VOffsetT = 4;
  pub const VT_TAG: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GachaCraftOpenTagExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GachaCraftOpenTagExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<GachaCraftOpenTagExcel<'bldr>> {
    let mut builder = GachaCraftOpenTagExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GachaCraftOpenTag");
      if let Some(x) = args.Tag {
        builder.add_Tag(x);
      }
      let x = args.NodeTier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_NodeTier(x);
    builder.finish()
  }

  pub fn unpack(&self) -> GachaCraftOpenTagExcelT {
    let key = table_encryption_service::create_key(b"GachaCraftOpenTag");
      let NodeTier = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.NodeTier(), &key)
      } else {
        self.NodeTier()
      };
    let Tag = self.Tag().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    GachaCraftOpenTagExcelT {
      NodeTier,
      Tag,
    }
  }

  #[inline]
  pub fn NodeTier(&self) -> CraftNodeTier {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CraftNodeTier>(GachaCraftOpenTagExcel::VT_NODETIER, Some(CraftNodeTier::Base)).unwrap()}
  }
  #[inline]
  pub fn Tag(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(GachaCraftOpenTagExcel::VT_TAG, None)}
  }
}

impl flatbuffers::Verifiable for GachaCraftOpenTagExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<CraftNodeTier>("NodeTier", Self::VT_NODETIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("Tag", Self::VT_TAG, false)?
     .finish();
    Ok(())
  }
}
pub struct GachaCraftOpenTagExcelArgs<'a> {
    pub NodeTier: CraftNodeTier,
    pub Tag: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
}
impl<'a> Default for GachaCraftOpenTagExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    GachaCraftOpenTagExcelArgs {
      NodeTier: CraftNodeTier::Base,
      Tag: None,
    }
  }
}

impl Serialize for GachaCraftOpenTagExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GachaCraftOpenTagExcel", 2)?;
      s.serialize_field("NodeTier", &self.NodeTier())?;
      if let Some(f) = self.Tag() {
        s.serialize_field("Tag", &f)?;
      } else {
        s.skip_field("Tag")?;
      }
    s.end()
  }
}

pub struct GachaCraftOpenTagExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GachaCraftOpenTagExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_NodeTier(&mut self, NodeTier: CraftNodeTier) {
    self.fbb_.push_slot::<CraftNodeTier>(GachaCraftOpenTagExcel::VT_NODETIER, NodeTier, CraftNodeTier::Base);
  }
  #[inline]
  pub fn add_Tag(&mut self, Tag: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GachaCraftOpenTagExcel::VT_TAG, Tag);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GachaCraftOpenTagExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GachaCraftOpenTagExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GachaCraftOpenTagExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GachaCraftOpenTagExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GachaCraftOpenTagExcel");
      ds.field("NodeTier", &self.NodeTier());
      ds.field("Tag", &self.Tag());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GachaCraftOpenTagExcelT {
  pub NodeTier: CraftNodeTier,
  pub Tag: Option<Vec<Tag>>,
}
impl Default for GachaCraftOpenTagExcelT {
  fn default() -> Self {
    Self {
      NodeTier: CraftNodeTier::Base,
      Tag: None,
    }
  }
}
impl GachaCraftOpenTagExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GachaCraftOpenTagExcel<'b>> {
    let NodeTier = self.NodeTier;
    let Tag = self.Tag.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    GachaCraftOpenTagExcel::create(_fbb, &GachaCraftOpenTagExcelArgs{
      NodeTier,
      Tag,
    })
  }
}
