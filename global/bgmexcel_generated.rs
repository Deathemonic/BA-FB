// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BGMExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BGMExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BGMExcel<'a> {
  type Inner = BGMExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BGMExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NATION: flatbuffers::VOffsetT = 6;
  pub const VT_PATH: flatbuffers::VOffsetT = 8;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 10;
  pub const VT_LOOPSTARTTIME: flatbuffers::VOffsetT = 12;
  pub const VT_LOOPENDTIME: flatbuffers::VOffsetT = 14;
  pub const VT_LOOPTRANSTIONTIME: flatbuffers::VOffsetT = 16;
  pub const VT_LOOPOFFSETTIME: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BGMExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BGMExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<BGMExcel<'bldr>> {
    let mut builder = BGMExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BGM");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.LoopOffsetTime {
        builder.add_LoopOffsetTime(x);
      }
      if let Some(x) = args.LoopTranstionTime {
        builder.add_LoopTranstionTime(x);
      }
      if let Some(x) = args.LoopEndTime {
        builder.add_LoopEndTime(x);
      }
      if let Some(x) = args.LoopStartTime {
        builder.add_LoopStartTime(x);
      }
      if let Some(x) = args.Volume {
        builder.add_Volume(x);
      }
      if let Some(x) = args.Path {
        builder.add_Path(x);
      }
      if let Some(x) = args.Nation {
        builder.add_Nation(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> BGMExcelT {
    let key = table_encryption_service::create_key(b"BGM");
      let Id = self.Id();
    let Nation = self.Nation().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let Path = self.Path().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let Volume = self.Volume().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    let LoopStartTime = self.LoopStartTime().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    let LoopEndTime = self.LoopEndTime().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    let LoopTranstionTime = self.LoopTranstionTime().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    let LoopOffsetTime = self.LoopOffsetTime().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_float(*val, &key) } else { *val }).collect()
    });
    BGMExcelT {
      Id,
      Nation,
      Path,
      Volume,
      LoopStartTime,
      LoopEndTime,
      LoopTranstionTime,
      LoopOffsetTime,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BGMExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Nation(&self) -> Option<flatbuffers::Vector<'a, Nation>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Nation>>>(BGMExcel::VT_NATION, None)}
  }
  #[inline]
  pub fn Path(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(BGMExcel::VT_PATH, None)}
  }
  #[inline]
  pub fn Volume(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(BGMExcel::VT_VOLUME, None)}
  }
  #[inline]
  pub fn LoopStartTime(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(BGMExcel::VT_LOOPSTARTTIME, None)}
  }
  #[inline]
  pub fn LoopEndTime(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(BGMExcel::VT_LOOPENDTIME, None)}
  }
  #[inline]
  pub fn LoopTranstionTime(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(BGMExcel::VT_LOOPTRANSTIONTIME, None)}
  }
  #[inline]
  pub fn LoopOffsetTime(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(BGMExcel::VT_LOOPOFFSETTIME, None)}
  }
}

impl flatbuffers::Verifiable for BGMExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Nation>>>("Nation", Self::VT_NATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("Path", Self::VT_PATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("Volume", Self::VT_VOLUME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("LoopStartTime", Self::VT_LOOPSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("LoopEndTime", Self::VT_LOOPENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("LoopTranstionTime", Self::VT_LOOPTRANSTIONTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("LoopOffsetTime", Self::VT_LOOPOFFSETTIME, false)?
     .finish();
    Ok(())
  }
}
pub struct BGMExcelArgs<'a> {
    pub Id: i64,
    pub Nation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Nation>>>,
    pub Path: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub Volume: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub LoopStartTime: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub LoopEndTime: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub LoopTranstionTime: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub LoopOffsetTime: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}
impl<'a> Default for BGMExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    BGMExcelArgs {
      Id: 0,
      Nation: None,
      Path: None,
      Volume: None,
      LoopStartTime: None,
      LoopEndTime: None,
      LoopTranstionTime: None,
      LoopOffsetTime: None,
    }
  }
}

impl Serialize for BGMExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BGMExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Nation() {
        s.serialize_field("Nation", &f)?;
      } else {
        s.skip_field("Nation")?;
      }
      if let Some(f) = self.Path() {
        s.serialize_field("Path", &f)?;
      } else {
        s.skip_field("Path")?;
      }
      if let Some(f) = self.Volume() {
        s.serialize_field("Volume", &f)?;
      } else {
        s.skip_field("Volume")?;
      }
      if let Some(f) = self.LoopStartTime() {
        s.serialize_field("LoopStartTime", &f)?;
      } else {
        s.skip_field("LoopStartTime")?;
      }
      if let Some(f) = self.LoopEndTime() {
        s.serialize_field("LoopEndTime", &f)?;
      } else {
        s.skip_field("LoopEndTime")?;
      }
      if let Some(f) = self.LoopTranstionTime() {
        s.serialize_field("LoopTranstionTime", &f)?;
      } else {
        s.skip_field("LoopTranstionTime")?;
      }
      if let Some(f) = self.LoopOffsetTime() {
        s.serialize_field("LoopOffsetTime", &f)?;
      } else {
        s.skip_field("LoopOffsetTime")?;
      }
    s.end()
  }
}

pub struct BGMExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BGMExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(BGMExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Nation(&mut self, Nation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Nation>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BGMExcel::VT_NATION, Nation);
  }
  #[inline]
  pub fn add_Path(&mut self, Path: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BGMExcel::VT_PATH, Path);
  }
  #[inline]
  pub fn add_Volume(&mut self, Volume: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BGMExcel::VT_VOLUME, Volume);
  }
  #[inline]
  pub fn add_LoopStartTime(&mut self, LoopStartTime: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BGMExcel::VT_LOOPSTARTTIME, LoopStartTime);
  }
  #[inline]
  pub fn add_LoopEndTime(&mut self, LoopEndTime: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BGMExcel::VT_LOOPENDTIME, LoopEndTime);
  }
  #[inline]
  pub fn add_LoopTranstionTime(&mut self, LoopTranstionTime: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BGMExcel::VT_LOOPTRANSTIONTIME, LoopTranstionTime);
  }
  #[inline]
  pub fn add_LoopOffsetTime(&mut self, LoopOffsetTime: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BGMExcel::VT_LOOPOFFSETTIME, LoopOffsetTime);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BGMExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BGMExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BGMExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BGMExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BGMExcel");
      ds.field("Id", &self.Id());
      ds.field("Nation", &self.Nation());
      ds.field("Path", &self.Path());
      ds.field("Volume", &self.Volume());
      ds.field("LoopStartTime", &self.LoopStartTime());
      ds.field("LoopEndTime", &self.LoopEndTime());
      ds.field("LoopTranstionTime", &self.LoopTranstionTime());
      ds.field("LoopOffsetTime", &self.LoopOffsetTime());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BGMExcelT {
  pub Id: i64,
  pub Nation: Option<Vec<Nation>>,
  pub Path: Option<Vec<String>>,
  pub Volume: Option<Vec<f32>>,
  pub LoopStartTime: Option<Vec<f32>>,
  pub LoopEndTime: Option<Vec<f32>>,
  pub LoopTranstionTime: Option<Vec<f32>>,
  pub LoopOffsetTime: Option<Vec<f32>>,
}
impl Default for BGMExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Nation: None,
      Path: None,
      Volume: None,
      LoopStartTime: None,
      LoopEndTime: None,
      LoopTranstionTime: None,
      LoopOffsetTime: None,
    }
  }
}
impl BGMExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BGMExcel<'b>> {
    let Id = self.Id;
    let Nation = self.Nation.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let Path = self.Path.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let Volume = self.Volume.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LoopStartTime = self.LoopStartTime.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LoopEndTime = self.LoopEndTime.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LoopTranstionTime = self.LoopTranstionTime.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let LoopOffsetTime = self.LoopOffsetTime.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    BGMExcel::create(_fbb, &BGMExcelArgs{
      Id,
      Nation,
      Path,
      Volume,
      LoopStartTime,
      LoopEndTime,
      LoopTranstionTime,
      LoopOffsetTime,
    })
  }
}
