// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FixedStrategyExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FixedStrategyExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FixedStrategyExcel<'a> {
  type Inner = FixedStrategyExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FixedStrategyExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_STAGEENTERECHELON01FIXEDECHELONID: flatbuffers::VOffsetT = 6;
  pub const VT_STAGEENTERECHELON01STARTTILE: flatbuffers::VOffsetT = 8;
  pub const VT_STAGEENTERECHELON02FIXEDECHELONID: flatbuffers::VOffsetT = 10;
  pub const VT_STAGEENTERECHELON02STARTTILE: flatbuffers::VOffsetT = 12;
  pub const VT_STAGEENTERECHELON03FIXEDECHELONID: flatbuffers::VOffsetT = 14;
  pub const VT_STAGEENTERECHELON03STARTTILE: flatbuffers::VOffsetT = 16;
  pub const VT_STAGEENTERECHELON04FIXEDECHELONID: flatbuffers::VOffsetT = 18;
  pub const VT_STAGEENTERECHELON04STARTTILE: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FixedStrategyExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FixedStrategyExcelArgs
  ) -> flatbuffers::WIPOffset<FixedStrategyExcel<'bldr>> {
    let mut builder = FixedStrategyExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FixedStrategy");
      let x = args.StageEnterEchelon04Starttile;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon04Starttile(x);
      let x = args.StageEnterEchelon04FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon04FixedEchelonId(x);
      let x = args.StageEnterEchelon03Starttile;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon03Starttile(x);
      let x = args.StageEnterEchelon03FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon03FixedEchelonId(x);
      let x = args.StageEnterEchelon02Starttile;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon02Starttile(x);
      let x = args.StageEnterEchelon02FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon02FixedEchelonId(x);
      let x = args.StageEnterEchelon01Starttile;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon01Starttile(x);
      let x = args.StageEnterEchelon01FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterEchelon01FixedEchelonId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FixedStrategyExcelT {
    let key = table_encryption_service::create_key(b"FixedStrategy");
      let Id = self.Id();
      let StageEnterEchelon01FixedEchelonId = self.StageEnterEchelon01FixedEchelonId();
      let StageEnterEchelon01Starttile = self.StageEnterEchelon01Starttile();
      let StageEnterEchelon02FixedEchelonId = self.StageEnterEchelon02FixedEchelonId();
      let StageEnterEchelon02Starttile = self.StageEnterEchelon02Starttile();
      let StageEnterEchelon03FixedEchelonId = self.StageEnterEchelon03FixedEchelonId();
      let StageEnterEchelon03Starttile = self.StageEnterEchelon03Starttile();
      let StageEnterEchelon04FixedEchelonId = self.StageEnterEchelon04FixedEchelonId();
      let StageEnterEchelon04Starttile = self.StageEnterEchelon04Starttile();
    FixedStrategyExcelT {
      Id,
      StageEnterEchelon01FixedEchelonId,
      StageEnterEchelon01Starttile,
      StageEnterEchelon02FixedEchelonId,
      StageEnterEchelon02Starttile,
      StageEnterEchelon03FixedEchelonId,
      StageEnterEchelon03Starttile,
      StageEnterEchelon04FixedEchelonId,
      StageEnterEchelon04Starttile,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon01FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON01FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon01Starttile(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON01STARTTILE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon02FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON02FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon02Starttile(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON02STARTTILE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon03FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON03FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon03Starttile(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON03STARTTILE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon04FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON04FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterEchelon04Starttile(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON04STARTTILE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FixedStrategyExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("StageEnterEchelon01FixedEchelonId", Self::VT_STAGEENTERECHELON01FIXEDECHELONID, false)?
     .visit_field::<i64>("StageEnterEchelon01Starttile", Self::VT_STAGEENTERECHELON01STARTTILE, false)?
     .visit_field::<i64>("StageEnterEchelon02FixedEchelonId", Self::VT_STAGEENTERECHELON02FIXEDECHELONID, false)?
     .visit_field::<i64>("StageEnterEchelon02Starttile", Self::VT_STAGEENTERECHELON02STARTTILE, false)?
     .visit_field::<i64>("StageEnterEchelon03FixedEchelonId", Self::VT_STAGEENTERECHELON03FIXEDECHELONID, false)?
     .visit_field::<i64>("StageEnterEchelon03Starttile", Self::VT_STAGEENTERECHELON03STARTTILE, false)?
     .visit_field::<i64>("StageEnterEchelon04FixedEchelonId", Self::VT_STAGEENTERECHELON04FIXEDECHELONID, false)?
     .visit_field::<i64>("StageEnterEchelon04Starttile", Self::VT_STAGEENTERECHELON04STARTTILE, false)?
     .finish();
    Ok(())
  }
}
pub struct FixedStrategyExcelArgs {
    pub Id: i64,
    pub StageEnterEchelon01FixedEchelonId: i64,
    pub StageEnterEchelon01Starttile: i64,
    pub StageEnterEchelon02FixedEchelonId: i64,
    pub StageEnterEchelon02Starttile: i64,
    pub StageEnterEchelon03FixedEchelonId: i64,
    pub StageEnterEchelon03Starttile: i64,
    pub StageEnterEchelon04FixedEchelonId: i64,
    pub StageEnterEchelon04Starttile: i64,
}
impl<'a> Default for FixedStrategyExcelArgs {
  #[inline]
  fn default() -> Self {
    FixedStrategyExcelArgs {
      Id: 0,
      StageEnterEchelon01FixedEchelonId: 0,
      StageEnterEchelon01Starttile: 0,
      StageEnterEchelon02FixedEchelonId: 0,
      StageEnterEchelon02Starttile: 0,
      StageEnterEchelon03FixedEchelonId: 0,
      StageEnterEchelon03Starttile: 0,
      StageEnterEchelon04FixedEchelonId: 0,
      StageEnterEchelon04Starttile: 0,
    }
  }
}

impl Serialize for FixedStrategyExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FixedStrategyExcel", 9)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("StageEnterEchelon01FixedEchelonId", &self.StageEnterEchelon01FixedEchelonId())?;
      s.serialize_field("StageEnterEchelon01Starttile", &self.StageEnterEchelon01Starttile())?;
      s.serialize_field("StageEnterEchelon02FixedEchelonId", &self.StageEnterEchelon02FixedEchelonId())?;
      s.serialize_field("StageEnterEchelon02Starttile", &self.StageEnterEchelon02Starttile())?;
      s.serialize_field("StageEnterEchelon03FixedEchelonId", &self.StageEnterEchelon03FixedEchelonId())?;
      s.serialize_field("StageEnterEchelon03Starttile", &self.StageEnterEchelon03Starttile())?;
      s.serialize_field("StageEnterEchelon04FixedEchelonId", &self.StageEnterEchelon04FixedEchelonId())?;
      s.serialize_field("StageEnterEchelon04Starttile", &self.StageEnterEchelon04Starttile())?;
    s.end()
  }
}

pub struct FixedStrategyExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FixedStrategyExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon01FixedEchelonId(&mut self, StageEnterEchelon01FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON01FIXEDECHELONID, StageEnterEchelon01FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon01Starttile(&mut self, StageEnterEchelon01Starttile: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON01STARTTILE, StageEnterEchelon01Starttile, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon02FixedEchelonId(&mut self, StageEnterEchelon02FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON02FIXEDECHELONID, StageEnterEchelon02FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon02Starttile(&mut self, StageEnterEchelon02Starttile: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON02STARTTILE, StageEnterEchelon02Starttile, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon03FixedEchelonId(&mut self, StageEnterEchelon03FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON03FIXEDECHELONID, StageEnterEchelon03FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon03Starttile(&mut self, StageEnterEchelon03Starttile: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON03STARTTILE, StageEnterEchelon03Starttile, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon04FixedEchelonId(&mut self, StageEnterEchelon04FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON04FIXEDECHELONID, StageEnterEchelon04FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_StageEnterEchelon04Starttile(&mut self, StageEnterEchelon04Starttile: i64) {
    self.fbb_.push_slot::<i64>(FixedStrategyExcel::VT_STAGEENTERECHELON04STARTTILE, StageEnterEchelon04Starttile, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FixedStrategyExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FixedStrategyExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FixedStrategyExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FixedStrategyExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FixedStrategyExcel");
      ds.field("Id", &self.Id());
      ds.field("StageEnterEchelon01FixedEchelonId", &self.StageEnterEchelon01FixedEchelonId());
      ds.field("StageEnterEchelon01Starttile", &self.StageEnterEchelon01Starttile());
      ds.field("StageEnterEchelon02FixedEchelonId", &self.StageEnterEchelon02FixedEchelonId());
      ds.field("StageEnterEchelon02Starttile", &self.StageEnterEchelon02Starttile());
      ds.field("StageEnterEchelon03FixedEchelonId", &self.StageEnterEchelon03FixedEchelonId());
      ds.field("StageEnterEchelon03Starttile", &self.StageEnterEchelon03Starttile());
      ds.field("StageEnterEchelon04FixedEchelonId", &self.StageEnterEchelon04FixedEchelonId());
      ds.field("StageEnterEchelon04Starttile", &self.StageEnterEchelon04Starttile());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FixedStrategyExcelT {
  pub Id: i64,
  pub StageEnterEchelon01FixedEchelonId: i64,
  pub StageEnterEchelon01Starttile: i64,
  pub StageEnterEchelon02FixedEchelonId: i64,
  pub StageEnterEchelon02Starttile: i64,
  pub StageEnterEchelon03FixedEchelonId: i64,
  pub StageEnterEchelon03Starttile: i64,
  pub StageEnterEchelon04FixedEchelonId: i64,
  pub StageEnterEchelon04Starttile: i64,
}
impl Default for FixedStrategyExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      StageEnterEchelon01FixedEchelonId: 0,
      StageEnterEchelon01Starttile: 0,
      StageEnterEchelon02FixedEchelonId: 0,
      StageEnterEchelon02Starttile: 0,
      StageEnterEchelon03FixedEchelonId: 0,
      StageEnterEchelon03Starttile: 0,
      StageEnterEchelon04FixedEchelonId: 0,
      StageEnterEchelon04Starttile: 0,
    }
  }
}
impl FixedStrategyExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FixedStrategyExcel<'b>> {
    let Id = self.Id;
    let StageEnterEchelon01FixedEchelonId = self.StageEnterEchelon01FixedEchelonId;
    let StageEnterEchelon01Starttile = self.StageEnterEchelon01Starttile;
    let StageEnterEchelon02FixedEchelonId = self.StageEnterEchelon02FixedEchelonId;
    let StageEnterEchelon02Starttile = self.StageEnterEchelon02Starttile;
    let StageEnterEchelon03FixedEchelonId = self.StageEnterEchelon03FixedEchelonId;
    let StageEnterEchelon03Starttile = self.StageEnterEchelon03Starttile;
    let StageEnterEchelon04FixedEchelonId = self.StageEnterEchelon04FixedEchelonId;
    let StageEnterEchelon04Starttile = self.StageEnterEchelon04Starttile;
    FixedStrategyExcel::create(_fbb, &FixedStrategyExcelArgs{
      Id,
      StageEnterEchelon01FixedEchelonId,
      StageEnterEchelon01Starttile,
      StageEnterEchelon02FixedEchelonId,
      StageEnterEchelon02Starttile,
      StageEnterEchelon03FixedEchelonId,
      StageEnterEchelon03Starttile,
      StageEnterEchelon04FixedEchelonId,
      StageEnterEchelon04Starttile,
    })
  }
}
