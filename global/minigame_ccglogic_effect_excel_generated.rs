// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameCCGLogicEffectExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameCCGLogicEffectExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameCCGLogicEffectExcel<'a> {
  type Inner = MinigameCCGLogicEffectExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameCCGLogicEffectExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DATALOADPATH: flatbuffers::VOffsetT = 6;
  pub const VT_ICON: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameCCGLogicEffectExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameCCGLogicEffectExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameCCGLogicEffectExcel<'bldr>> {
    let mut builder = MinigameCCGLogicEffectExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameCCGLogicEffect");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      if let Some(x) = args.DataLoadPath {
        builder.add_DataLoadPath(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameCCGLogicEffectExcelT {
    let key = table_encryption_service::create_key(b"MinigameCCGLogicEffect");
      let Id = self.Id();
    let DataLoadPath = self.DataLoadPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MinigameCCGLogicEffectExcelT {
      Id,
      DataLoadPath,
      Icon,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameCCGLogicEffectExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DataLoadPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGLogicEffectExcel::VT_DATALOADPATH, None)}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameCCGLogicEffectExcel::VT_ICON, None)}
  }
}

impl flatbuffers::Verifiable for MinigameCCGLogicEffectExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DataLoadPath", Self::VT_DATALOADPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameCCGLogicEffectExcelArgs<'a> {
    pub Id: i64,
    pub DataLoadPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MinigameCCGLogicEffectExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameCCGLogicEffectExcelArgs {
      Id: 0,
      DataLoadPath: None,
      Icon: None,
    }
  }
}

impl Serialize for MinigameCCGLogicEffectExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameCCGLogicEffectExcel", 3)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.DataLoadPath() {
        s.serialize_field("DataLoadPath", &f)?;
      } else {
        s.skip_field("DataLoadPath")?;
      }
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
    s.end()
  }
}

pub struct MinigameCCGLogicEffectExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameCCGLogicEffectExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MinigameCCGLogicEffectExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_DataLoadPath(&mut self, DataLoadPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGLogicEffectExcel::VT_DATALOADPATH, DataLoadPath);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameCCGLogicEffectExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameCCGLogicEffectExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameCCGLogicEffectExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameCCGLogicEffectExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameCCGLogicEffectExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameCCGLogicEffectExcel");
      ds.field("Id", &self.Id());
      ds.field("DataLoadPath", &self.DataLoadPath());
      ds.field("Icon", &self.Icon());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameCCGLogicEffectExcelT {
  pub Id: i64,
  pub DataLoadPath: Option<String>,
  pub Icon: Option<String>,
}
impl Default for MinigameCCGLogicEffectExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      DataLoadPath: None,
      Icon: None,
    }
  }
}
impl MinigameCCGLogicEffectExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameCCGLogicEffectExcel<'b>> {
    let Id = self.Id;
    let DataLoadPath = self.DataLoadPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MinigameCCGLogicEffectExcel::create(_fbb, &MinigameCCGLogicEffectExcelArgs{
      Id,
      DataLoadPath,
      Icon,
    })
  }
}
