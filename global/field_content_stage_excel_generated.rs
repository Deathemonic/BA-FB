// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldContentStageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldContentStageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldContentStageExcel<'a> {
  type Inner = FieldContentStageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldContentStageExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SEASONID: flatbuffers::VOffsetT = 6;
  pub const VT_AREAID: flatbuffers::VOffsetT = 8;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 10;
  pub const VT_STAGEDIFFICULTY: flatbuffers::VOffsetT = 12;
  pub const VT_PREVSTAGEID: flatbuffers::VOffsetT = 14;
  pub const VT_NAME: flatbuffers::VOffsetT = 16;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 18;
  pub const VT_STAGEENTERCOSTTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_STAGEENTERCOSTID: flatbuffers::VOffsetT = 22;
  pub const VT_STAGEENTERCOSTAMOUNT: flatbuffers::VOffsetT = 24;
  pub const VT_STAGETOPOGRAPHY: flatbuffers::VOffsetT = 26;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 28;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 30;
  pub const VT_BGMID: flatbuffers::VOffsetT = 32;
  pub const VT_INSTANTCLEAR: flatbuffers::VOffsetT = 34;
  pub const VT_FIXEDECHELONID: flatbuffers::VOffsetT = 36;
  pub const VT_SKIPFORMATIONSETTINGS: flatbuffers::VOffsetT = 38;
  pub const VT_DAILYLASTPLAY: flatbuffers::VOffsetT = 40;
  pub const VT_STARGOAL: flatbuffers::VOffsetT = 42;
  pub const VT_STARGOALAMOUNT: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldContentStageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldContentStageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldContentStageExcel<'bldr>> {
    let mut builder = FieldContentStageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldContentStage");
      let x = args.FixedEchelonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FixedEchelonId(x);
      let x = args.BGMId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BGMId(x);
      let x = args.GroundID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundID(x);
      let x = args.StageEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageEnterCostId(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.PrevStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PrevStageId(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.AreaId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AreaId(x);
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.starGoalAmount {
        builder.add_starGoalAmount(x);
      }
      if let Some(x) = args.starGoal {
        builder.add_starGoal(x);
      }
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.StageTopography;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageTopography(x);
      let x = args.StageEnterCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_StageEnterCostAmount(x);
      let x = args.StageEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageEnterCostType(x);
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      let x = args.StageDifficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StageDifficulty(x);
      builder.add_DailyLastPlay(args.DailyLastPlay);
      builder.add_SkipFormationSettings(args.SkipFormationSettings);
      builder.add_InstantClear(args.InstantClear);
    builder.finish()
  }

  pub fn unpack(&self) -> FieldContentStageExcelT {
    let key = table_encryption_service::create_key(b"FieldContentStage");
      let Id = self.Id();
      let SeasonId = self.SeasonId();
      let AreaId = self.AreaId();
      let GroupId = self.GroupId();
      let StageDifficulty = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageDifficulty(), &key)
      } else {
        self.StageDifficulty()
      };
      let PrevStageId = self.PrevStageId();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BattleDuration = self.BattleDuration();
      let StageEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageEnterCostType(), &key)
      } else {
        self.StageEnterCostType()
      };
      let StageEnterCostId = self.StageEnterCostId();
      let StageEnterCostAmount = self.StageEnterCostAmount();
      let StageTopography = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StageTopography(), &key)
      } else {
        self.StageTopography()
      };
      let RecommandLevel = self.RecommandLevel();
      let GroundID = self.GroundID();
      let BGMId = self.BGMId();
      let InstantClear = self.InstantClear();
      let FixedEchelonId = self.FixedEchelonId();
      let SkipFormationSettings = self.SkipFormationSettings();
      let DailyLastPlay = self.DailyLastPlay();
    let starGoal = self.starGoal().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let starGoalAmount = self.starGoalAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    FieldContentStageExcelT {
      Id,
      SeasonId,
      AreaId,
      GroupId,
      StageDifficulty,
      PrevStageId,
      Name,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageTopography,
      RecommandLevel,
      GroundID,
      BGMId,
      InstantClear,
      FixedEchelonId,
      SkipFormationSettings,
      DailyLastPlay,
      starGoal,
      starGoalAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AreaId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_AREAID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageDifficulty(&self) -> StageDifficulty {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageDifficulty>(FieldContentStageExcel::VT_STAGEDIFFICULTY, Some(StageDifficulty::None)).unwrap()}
  }
  #[inline]
  pub fn PrevStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_PREVSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldContentStageExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(FieldContentStageExcel::VT_STAGEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_STAGEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageEnterCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FieldContentStageExcel::VT_STAGEENTERCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageTopography(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(FieldContentStageExcel::VT_STAGETOPOGRAPHY, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FieldContentStageExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroundID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BGMId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_BGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InstantClear(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FieldContentStageExcel::VT_INSTANTCLEAR, Some(false)).unwrap()}
  }
  #[inline]
  pub fn FixedEchelonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldContentStageExcel::VT_FIXEDECHELONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SkipFormationSettings(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FieldContentStageExcel::VT_SKIPFORMATIONSETTINGS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn DailyLastPlay(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FieldContentStageExcel::VT_DAILYLASTPLAY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn starGoal(&self) -> Option<flatbuffers::Vector<'a, StarGoalType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, StarGoalType>>>(FieldContentStageExcel::VT_STARGOAL, None)}
  }
  #[inline]
  pub fn starGoalAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(FieldContentStageExcel::VT_STARGOALAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for FieldContentStageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<i64>("AreaId", Self::VT_AREAID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<StageDifficulty>("StageDifficulty", Self::VT_STAGEDIFFICULTY, false)?
     .visit_field::<i64>("PrevStageId", Self::VT_PREVSTAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<ParcelType>("StageEnterCostType", Self::VT_STAGEENTERCOSTTYPE, false)?
     .visit_field::<i64>("StageEnterCostId", Self::VT_STAGEENTERCOSTID, false)?
     .visit_field::<i32>("StageEnterCostAmount", Self::VT_STAGEENTERCOSTAMOUNT, false)?
     .visit_field::<StageTopography>("StageTopography", Self::VT_STAGETOPOGRAPHY, false)?
     .visit_field::<i32>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<i64>("GroundID", Self::VT_GROUNDID, false)?
     .visit_field::<i64>("BGMId", Self::VT_BGMID, false)?
     .visit_field::<bool>("InstantClear", Self::VT_INSTANTCLEAR, false)?
     .visit_field::<i64>("FixedEchelonId", Self::VT_FIXEDECHELONID, false)?
     .visit_field::<bool>("SkipFormationSettings", Self::VT_SKIPFORMATIONSETTINGS, false)?
     .visit_field::<bool>("DailyLastPlay", Self::VT_DAILYLASTPLAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, StarGoalType>>>("starGoal", Self::VT_STARGOAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("starGoalAmount", Self::VT_STARGOALAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldContentStageExcelArgs<'a> {
    pub Id: i64,
    pub SeasonId: i64,
    pub AreaId: i64,
    pub GroupId: i64,
    pub StageDifficulty: StageDifficulty,
    pub PrevStageId: i64,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BattleDuration: i64,
    pub StageEnterCostType: ParcelType,
    pub StageEnterCostId: i64,
    pub StageEnterCostAmount: i32,
    pub StageTopography: StageTopography,
    pub RecommandLevel: i32,
    pub GroundID: i64,
    pub BGMId: i64,
    pub InstantClear: bool,
    pub FixedEchelonId: i64,
    pub SkipFormationSettings: bool,
    pub DailyLastPlay: bool,
    pub starGoal: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, StarGoalType>>>,
    pub starGoalAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for FieldContentStageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldContentStageExcelArgs {
      Id: 0,
      SeasonId: 0,
      AreaId: 0,
      GroupId: 0,
      StageDifficulty: StageDifficulty::None,
      PrevStageId: 0,
      Name: None,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      GroundID: 0,
      BGMId: 0,
      InstantClear: false,
      FixedEchelonId: 0,
      SkipFormationSettings: false,
      DailyLastPlay: false,
      starGoal: None,
      starGoalAmount: None,
    }
  }
}

impl Serialize for FieldContentStageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldContentStageExcel", 21)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      s.serialize_field("AreaId", &self.AreaId())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("StageDifficulty", &self.StageDifficulty())?;
      s.serialize_field("PrevStageId", &self.PrevStageId())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("StageEnterCostType", &self.StageEnterCostType())?;
      s.serialize_field("StageEnterCostId", &self.StageEnterCostId())?;
      s.serialize_field("StageEnterCostAmount", &self.StageEnterCostAmount())?;
      s.serialize_field("StageTopography", &self.StageTopography())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      s.serialize_field("GroundID", &self.GroundID())?;
      s.serialize_field("BGMId", &self.BGMId())?;
      s.serialize_field("InstantClear", &self.InstantClear())?;
      s.serialize_field("FixedEchelonId", &self.FixedEchelonId())?;
      s.serialize_field("SkipFormationSettings", &self.SkipFormationSettings())?;
      s.serialize_field("DailyLastPlay", &self.DailyLastPlay())?;
      if let Some(f) = self.starGoal() {
        s.serialize_field("starGoal", &f)?;
      } else {
        s.skip_field("starGoal")?;
      }
      if let Some(f) = self.starGoalAmount() {
        s.serialize_field("starGoalAmount", &f)?;
      } else {
        s.skip_field("starGoalAmount")?;
      }
    s.end()
  }
}

pub struct FieldContentStageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldContentStageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_AreaId(&mut self, AreaId: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_AREAID, AreaId, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_StageDifficulty(&mut self, StageDifficulty: StageDifficulty) {
    self.fbb_.push_slot::<StageDifficulty>(FieldContentStageExcel::VT_STAGEDIFFICULTY, StageDifficulty, StageDifficulty::None);
  }
  #[inline]
  pub fn add_PrevStageId(&mut self, PrevStageId: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_PREVSTAGEID, PrevStageId, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldContentStageExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_StageEnterCostType(&mut self, StageEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(FieldContentStageExcel::VT_STAGEENTERCOSTTYPE, StageEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_StageEnterCostId(&mut self, StageEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_STAGEENTERCOSTID, StageEnterCostId, 0);
  }
  #[inline]
  pub fn add_StageEnterCostAmount(&mut self, StageEnterCostAmount: i32) {
    self.fbb_.push_slot::<i32>(FieldContentStageExcel::VT_STAGEENTERCOSTAMOUNT, StageEnterCostAmount, 0);
  }
  #[inline]
  pub fn add_StageTopography(&mut self, StageTopography: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(FieldContentStageExcel::VT_STAGETOPOGRAPHY, StageTopography, StageTopography::Street);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i32) {
    self.fbb_.push_slot::<i32>(FieldContentStageExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_GroundID(&mut self, GroundID: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_GROUNDID, GroundID, 0);
  }
  #[inline]
  pub fn add_BGMId(&mut self, BGMId: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_BGMID, BGMId, 0);
  }
  #[inline]
  pub fn add_InstantClear(&mut self, InstantClear: bool) {
    self.fbb_.push_slot::<bool>(FieldContentStageExcel::VT_INSTANTCLEAR, InstantClear, false);
  }
  #[inline]
  pub fn add_FixedEchelonId(&mut self, FixedEchelonId: i64) {
    self.fbb_.push_slot::<i64>(FieldContentStageExcel::VT_FIXEDECHELONID, FixedEchelonId, 0);
  }
  #[inline]
  pub fn add_SkipFormationSettings(&mut self, SkipFormationSettings: bool) {
    self.fbb_.push_slot::<bool>(FieldContentStageExcel::VT_SKIPFORMATIONSETTINGS, SkipFormationSettings, false);
  }
  #[inline]
  pub fn add_DailyLastPlay(&mut self, DailyLastPlay: bool) {
    self.fbb_.push_slot::<bool>(FieldContentStageExcel::VT_DAILYLASTPLAY, DailyLastPlay, false);
  }
  #[inline]
  pub fn add_starGoal(&mut self, starGoal: flatbuffers::WIPOffset<flatbuffers::Vector<'b , StarGoalType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldContentStageExcel::VT_STARGOAL, starGoal);
  }
  #[inline]
  pub fn add_starGoalAmount(&mut self, starGoalAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldContentStageExcel::VT_STARGOALAMOUNT, starGoalAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldContentStageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldContentStageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldContentStageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldContentStageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldContentStageExcel");
      ds.field("Id", &self.Id());
      ds.field("SeasonId", &self.SeasonId());
      ds.field("AreaId", &self.AreaId());
      ds.field("GroupId", &self.GroupId());
      ds.field("StageDifficulty", &self.StageDifficulty());
      ds.field("PrevStageId", &self.PrevStageId());
      ds.field("Name", &self.Name());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("StageEnterCostType", &self.StageEnterCostType());
      ds.field("StageEnterCostId", &self.StageEnterCostId());
      ds.field("StageEnterCostAmount", &self.StageEnterCostAmount());
      ds.field("StageTopography", &self.StageTopography());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("GroundID", &self.GroundID());
      ds.field("BGMId", &self.BGMId());
      ds.field("InstantClear", &self.InstantClear());
      ds.field("FixedEchelonId", &self.FixedEchelonId());
      ds.field("SkipFormationSettings", &self.SkipFormationSettings());
      ds.field("DailyLastPlay", &self.DailyLastPlay());
      ds.field("starGoal", &self.starGoal());
      ds.field("starGoalAmount", &self.starGoalAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldContentStageExcelT {
  pub Id: i64,
  pub SeasonId: i64,
  pub AreaId: i64,
  pub GroupId: i64,
  pub StageDifficulty: StageDifficulty,
  pub PrevStageId: i64,
  pub Name: Option<String>,
  pub BattleDuration: i64,
  pub StageEnterCostType: ParcelType,
  pub StageEnterCostId: i64,
  pub StageEnterCostAmount: i32,
  pub StageTopography: StageTopography,
  pub RecommandLevel: i32,
  pub GroundID: i64,
  pub BGMId: i64,
  pub InstantClear: bool,
  pub FixedEchelonId: i64,
  pub SkipFormationSettings: bool,
  pub DailyLastPlay: bool,
  pub starGoal: Option<Vec<StarGoalType>>,
  pub starGoalAmount: Option<Vec<i32>>,
}
impl Default for FieldContentStageExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      SeasonId: 0,
      AreaId: 0,
      GroupId: 0,
      StageDifficulty: StageDifficulty::None,
      PrevStageId: 0,
      Name: None,
      BattleDuration: 0,
      StageEnterCostType: ParcelType::None,
      StageEnterCostId: 0,
      StageEnterCostAmount: 0,
      StageTopography: StageTopography::Street,
      RecommandLevel: 0,
      GroundID: 0,
      BGMId: 0,
      InstantClear: false,
      FixedEchelonId: 0,
      SkipFormationSettings: false,
      DailyLastPlay: false,
      starGoal: None,
      starGoalAmount: None,
    }
  }
}
impl FieldContentStageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldContentStageExcel<'b>> {
    let Id = self.Id;
    let SeasonId = self.SeasonId;
    let AreaId = self.AreaId;
    let GroupId = self.GroupId;
    let StageDifficulty = self.StageDifficulty;
    let PrevStageId = self.PrevStageId;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BattleDuration = self.BattleDuration;
    let StageEnterCostType = self.StageEnterCostType;
    let StageEnterCostId = self.StageEnterCostId;
    let StageEnterCostAmount = self.StageEnterCostAmount;
    let StageTopography = self.StageTopography;
    let RecommandLevel = self.RecommandLevel;
    let GroundID = self.GroundID;
    let BGMId = self.BGMId;
    let InstantClear = self.InstantClear;
    let FixedEchelonId = self.FixedEchelonId;
    let SkipFormationSettings = self.SkipFormationSettings;
    let DailyLastPlay = self.DailyLastPlay;
    let starGoal = self.starGoal.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let starGoalAmount = self.starGoalAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    FieldContentStageExcel::create(_fbb, &FieldContentStageExcelArgs{
      Id,
      SeasonId,
      AreaId,
      GroupId,
      StageDifficulty,
      PrevStageId,
      Name,
      BattleDuration,
      StageEnterCostType,
      StageEnterCostId,
      StageEnterCostAmount,
      StageTopography,
      RecommandLevel,
      GroundID,
      BGMId,
      InstantClear,
      FixedEchelonId,
      SkipFormationSettings,
      DailyLastPlay,
      starGoal,
      starGoalAmount,
    })
  }
}
