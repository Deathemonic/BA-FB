// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameRoadPuzzleInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameRoadPuzzleInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameRoadPuzzleInfoExcel<'a> {
  type Inner = MiniGameRoadPuzzleInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameRoadPuzzleInfoExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTUSECOSTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTUSECOSTID: flatbuffers::VOffsetT = 8;
  pub const VT_COSTGOODSID: flatbuffers::VOffsetT = 10;
  pub const VT_RAILSETREWARDID: flatbuffers::VOffsetT = 12;
  pub const VT_INSTANTCLEARROUND: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameRoadPuzzleInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameRoadPuzzleInfoExcelArgs
  ) -> flatbuffers::WIPOffset<MiniGameRoadPuzzleInfoExcel<'bldr>> {
    let mut builder = MiniGameRoadPuzzleInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameRoadPuzzleInfo");
      let x = args.RailSetRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RailSetRewardId(x);
      let x = args.CostGoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostGoodsId(x);
      let x = args.EventUseCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventUseCostId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.InstantClearRound;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_InstantClearRound(x);
      let x = args.EventUseCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EventUseCostType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameRoadPuzzleInfoExcelT {
    let key = table_encryption_service::create_key(b"MiniGameRoadPuzzleInfo");
      let EventContentId = self.EventContentId();
      let EventUseCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EventUseCostType(), &key)
      } else {
        self.EventUseCostType()
      };
      let EventUseCostId = self.EventUseCostId();
      let CostGoodsId = self.CostGoodsId();
      let RailSetRewardId = self.RailSetRewardId();
      let InstantClearRound = self.InstantClearRound();
    MiniGameRoadPuzzleInfoExcelT {
      EventContentId,
      EventUseCostType,
      EventUseCostId,
      CostGoodsId,
      RailSetRewardId,
      InstantClearRound,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRoadPuzzleInfoExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventUseCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(MiniGameRoadPuzzleInfoExcel::VT_EVENTUSECOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn EventUseCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRoadPuzzleInfoExcel::VT_EVENTUSECOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostGoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRoadPuzzleInfoExcel::VT_COSTGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RailSetRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRoadPuzzleInfoExcel::VT_RAILSETREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InstantClearRound(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameRoadPuzzleInfoExcel::VT_INSTANTCLEARROUND, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameRoadPuzzleInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<ParcelType>("EventUseCostType", Self::VT_EVENTUSECOSTTYPE, false)?
     .visit_field::<i64>("EventUseCostId", Self::VT_EVENTUSECOSTID, false)?
     .visit_field::<i64>("CostGoodsId", Self::VT_COSTGOODSID, false)?
     .visit_field::<i64>("RailSetRewardId", Self::VT_RAILSETREWARDID, false)?
     .visit_field::<i32>("InstantClearRound", Self::VT_INSTANTCLEARROUND, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameRoadPuzzleInfoExcelArgs {
    pub EventContentId: i64,
    pub EventUseCostType: ParcelType,
    pub EventUseCostId: i64,
    pub CostGoodsId: i64,
    pub RailSetRewardId: i64,
    pub InstantClearRound: i32,
}
impl<'a> Default for MiniGameRoadPuzzleInfoExcelArgs {
  #[inline]
  fn default() -> Self {
    MiniGameRoadPuzzleInfoExcelArgs {
      EventContentId: 0,
      EventUseCostType: ParcelType::None,
      EventUseCostId: 0,
      CostGoodsId: 0,
      RailSetRewardId: 0,
      InstantClearRound: 0,
    }
  }
}

impl Serialize for MiniGameRoadPuzzleInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameRoadPuzzleInfoExcel", 6)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EventUseCostType", &self.EventUseCostType())?;
      s.serialize_field("EventUseCostId", &self.EventUseCostId())?;
      s.serialize_field("CostGoodsId", &self.CostGoodsId())?;
      s.serialize_field("RailSetRewardId", &self.RailSetRewardId())?;
      s.serialize_field("InstantClearRound", &self.InstantClearRound())?;
    s.end()
  }
}

pub struct MiniGameRoadPuzzleInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameRoadPuzzleInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRoadPuzzleInfoExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EventUseCostType(&mut self, EventUseCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(MiniGameRoadPuzzleInfoExcel::VT_EVENTUSECOSTTYPE, EventUseCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_EventUseCostId(&mut self, EventUseCostId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRoadPuzzleInfoExcel::VT_EVENTUSECOSTID, EventUseCostId, 0);
  }
  #[inline]
  pub fn add_CostGoodsId(&mut self, CostGoodsId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRoadPuzzleInfoExcel::VT_COSTGOODSID, CostGoodsId, 0);
  }
  #[inline]
  pub fn add_RailSetRewardId(&mut self, RailSetRewardId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRoadPuzzleInfoExcel::VT_RAILSETREWARDID, RailSetRewardId, 0);
  }
  #[inline]
  pub fn add_InstantClearRound(&mut self, InstantClearRound: i32) {
    self.fbb_.push_slot::<i32>(MiniGameRoadPuzzleInfoExcel::VT_INSTANTCLEARROUND, InstantClearRound, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameRoadPuzzleInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameRoadPuzzleInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameRoadPuzzleInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameRoadPuzzleInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameRoadPuzzleInfoExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EventUseCostType", &self.EventUseCostType());
      ds.field("EventUseCostId", &self.EventUseCostId());
      ds.field("CostGoodsId", &self.CostGoodsId());
      ds.field("RailSetRewardId", &self.RailSetRewardId());
      ds.field("InstantClearRound", &self.InstantClearRound());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameRoadPuzzleInfoExcelT {
  pub EventContentId: i64,
  pub EventUseCostType: ParcelType,
  pub EventUseCostId: i64,
  pub CostGoodsId: i64,
  pub RailSetRewardId: i64,
  pub InstantClearRound: i32,
}
impl Default for MiniGameRoadPuzzleInfoExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      EventUseCostType: ParcelType::None,
      EventUseCostId: 0,
      CostGoodsId: 0,
      RailSetRewardId: 0,
      InstantClearRound: 0,
    }
  }
}
impl MiniGameRoadPuzzleInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameRoadPuzzleInfoExcel<'b>> {
    let EventContentId = self.EventContentId;
    let EventUseCostType = self.EventUseCostType;
    let EventUseCostId = self.EventUseCostId;
    let CostGoodsId = self.CostGoodsId;
    let RailSetRewardId = self.RailSetRewardId;
    let InstantClearRound = self.InstantClearRound;
    MiniGameRoadPuzzleInfoExcel::create(_fbb, &MiniGameRoadPuzzleInfoExcelArgs{
      EventContentId,
      EventUseCostType,
      EventUseCostId,
      CostGoodsId,
      RailSetRewardId,
      InstantClearRound,
    })
  }
}
