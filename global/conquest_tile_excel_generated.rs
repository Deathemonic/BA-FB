// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConquestTileExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConquestTileExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConquestTileExcel<'a> {
  type Inner = ConquestTileExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConquestTileExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_EVENTID: flatbuffers::VOffsetT = 8;
  pub const VT_STEP: flatbuffers::VOffsetT = 10;
  pub const VT_PREFABNAME: flatbuffers::VOffsetT = 12;
  pub const VT_TILENAMELOCALIZE: flatbuffers::VOffsetT = 14;
  pub const VT_TILEIMAGENAME: flatbuffers::VOffsetT = 16;
  pub const VT_PLAYABLE: flatbuffers::VOffsetT = 18;
  pub const VT_TILETYPE: flatbuffers::VOffsetT = 20;
  pub const VT_NOTMAPFOG: flatbuffers::VOffsetT = 22;
  pub const VT_GROUPBONUSID: flatbuffers::VOffsetT = 24;
  pub const VT_CONQUESTCOSTTYPE: flatbuffers::VOffsetT = 26;
  pub const VT_CONQUESTCOSTID: flatbuffers::VOffsetT = 28;
  pub const VT_CONQUESTCOSTAMOUNT: flatbuffers::VOffsetT = 30;
  pub const VT_MANAGECOSTTYPE: flatbuffers::VOffsetT = 32;
  pub const VT_MANAGECOSTID: flatbuffers::VOffsetT = 34;
  pub const VT_MANAGECOSTAMOUNT: flatbuffers::VOffsetT = 36;
  pub const VT_CONQUESTREWARDID: flatbuffers::VOffsetT = 38;
  pub const VT_MASSEROSIONID: flatbuffers::VOffsetT = 40;
  pub const VT_UPGRADE2COSTTYPE: flatbuffers::VOffsetT = 42;
  pub const VT_UPGRADE2COSTID: flatbuffers::VOffsetT = 44;
  pub const VT_UPGRADE2COSTAMOUNT: flatbuffers::VOffsetT = 46;
  pub const VT_UPGRADE3COSTTYPE: flatbuffers::VOffsetT = 48;
  pub const VT_UPGRADE3COSTID: flatbuffers::VOffsetT = 50;
  pub const VT_UPGRADE3COSTAMOUNT: flatbuffers::VOffsetT = 52;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConquestTileExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConquestTileExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ConquestTileExcel<'bldr>> {
    let mut builder = ConquestTileExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ConquestTile");
      let x = args.Upgrade3CostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Upgrade3CostId(x);
      let x = args.Upgrade2CostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Upgrade2CostId(x);
      let x = args.MassErosionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MassErosionId(x);
      let x = args.ConquestRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConquestRewardId(x);
      let x = args.ManageCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ManageCostId(x);
      let x = args.ConquestCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConquestCostId(x);
      let x = args.GroupBonusId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupBonusId(x);
      let x = args.EventId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.Upgrade3CostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Upgrade3CostAmount(x);
      let x = args.Upgrade3CostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Upgrade3CostType(x);
      let x = args.Upgrade2CostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Upgrade2CostAmount(x);
      let x = args.Upgrade2CostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Upgrade2CostType(x);
      let x = args.ManageCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ManageCostAmount(x);
      let x = args.ManageCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ManageCostType(x);
      let x = args.ConquestCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ConquestCostAmount(x);
      let x = args.ConquestCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ConquestCostType(x);
      let x = args.TileType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TileType(x);
      if let Some(x) = args.TileImageName {
        builder.add_TileImageName(x);
      }
      if let Some(x) = args.TileNameLocalize {
        builder.add_TileNameLocalize(x);
      }
      if let Some(x) = args.PrefabName {
        builder.add_PrefabName(x);
      }
      let x = args.Step;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Step(x);
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      builder.add_NotMapFog(args.NotMapFog);
      builder.add_Playable(args.Playable);
    builder.finish()
  }

  pub fn unpack(&self) -> ConquestTileExcelT {
    let key = table_encryption_service::create_key(b"ConquestTile");
      let Id = self.Id();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EventId = self.EventId();
      let Step = self.Step();
    let PrefabName = self.PrefabName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TileNameLocalize = self.TileNameLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TileImageName = self.TileImageName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Playable = self.Playable();
      let TileType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TileType(), &key)
      } else {
        self.TileType()
      };
      let NotMapFog = self.NotMapFog();
      let GroupBonusId = self.GroupBonusId();
      let ConquestCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ConquestCostType(), &key)
      } else {
        self.ConquestCostType()
      };
      let ConquestCostId = self.ConquestCostId();
      let ConquestCostAmount = self.ConquestCostAmount();
      let ManageCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ManageCostType(), &key)
      } else {
        self.ManageCostType()
      };
      let ManageCostId = self.ManageCostId();
      let ManageCostAmount = self.ManageCostAmount();
      let ConquestRewardId = self.ConquestRewardId();
      let MassErosionId = self.MassErosionId();
      let Upgrade2CostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Upgrade2CostType(), &key)
      } else {
        self.Upgrade2CostType()
      };
      let Upgrade2CostId = self.Upgrade2CostId();
      let Upgrade2CostAmount = self.Upgrade2CostAmount();
      let Upgrade3CostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Upgrade3CostType(), &key)
      } else {
        self.Upgrade3CostType()
      };
      let Upgrade3CostId = self.Upgrade3CostId();
      let Upgrade3CostAmount = self.Upgrade3CostAmount();
    ConquestTileExcelT {
      Id,
      Name,
      EventId,
      Step,
      PrefabName,
      TileNameLocalize,
      TileImageName,
      Playable,
      TileType,
      NotMapFog,
      GroupBonusId,
      ConquestCostType,
      ConquestCostId,
      ConquestCostAmount,
      ManageCostType,
      ManageCostId,
      ManageCostAmount,
      ConquestRewardId,
      MassErosionId,
      Upgrade2CostType,
      Upgrade2CostId,
      Upgrade2CostAmount,
      Upgrade3CostType,
      Upgrade3CostId,
      Upgrade3CostAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestTileExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn EventId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_EVENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Step(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestTileExcel::VT_STEP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrefabName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestTileExcel::VT_PREFABNAME, None)}
  }
  #[inline]
  pub fn TileNameLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestTileExcel::VT_TILENAMELOCALIZE, None)}
  }
  #[inline]
  pub fn TileImageName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConquestTileExcel::VT_TILEIMAGENAME, None)}
  }
  #[inline]
  pub fn Playable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestTileExcel::VT_PLAYABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn TileType(&self) -> ConquestTileType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ConquestTileType>(ConquestTileExcel::VT_TILETYPE, Some(ConquestTileType::None)).unwrap()}
  }
  #[inline]
  pub fn NotMapFog(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ConquestTileExcel::VT_NOTMAPFOG, Some(false)).unwrap()}
  }
  #[inline]
  pub fn GroupBonusId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_GROUPBONUSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestTileExcel::VT_CONQUESTCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ConquestCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_CONQUESTCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestTileExcel::VT_CONQUESTCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ManageCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestTileExcel::VT_MANAGECOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ManageCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_MANAGECOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ManageCostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestTileExcel::VT_MANAGECOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ConquestRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_CONQUESTREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MassErosionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_MASSEROSIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Upgrade2CostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestTileExcel::VT_UPGRADE2COSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn Upgrade2CostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_UPGRADE2COSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Upgrade2CostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestTileExcel::VT_UPGRADE2COSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Upgrade3CostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ConquestTileExcel::VT_UPGRADE3COSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn Upgrade3CostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ConquestTileExcel::VT_UPGRADE3COSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Upgrade3CostAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ConquestTileExcel::VT_UPGRADE3COSTAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConquestTileExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<i64>("EventId", Self::VT_EVENTID, false)?
     .visit_field::<i32>("Step", Self::VT_STEP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabName", Self::VT_PREFABNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TileNameLocalize", Self::VT_TILENAMELOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TileImageName", Self::VT_TILEIMAGENAME, false)?
     .visit_field::<bool>("Playable", Self::VT_PLAYABLE, false)?
     .visit_field::<ConquestTileType>("TileType", Self::VT_TILETYPE, false)?
     .visit_field::<bool>("NotMapFog", Self::VT_NOTMAPFOG, false)?
     .visit_field::<i64>("GroupBonusId", Self::VT_GROUPBONUSID, false)?
     .visit_field::<ParcelType>("ConquestCostType", Self::VT_CONQUESTCOSTTYPE, false)?
     .visit_field::<i64>("ConquestCostId", Self::VT_CONQUESTCOSTID, false)?
     .visit_field::<i32>("ConquestCostAmount", Self::VT_CONQUESTCOSTAMOUNT, false)?
     .visit_field::<ParcelType>("ManageCostType", Self::VT_MANAGECOSTTYPE, false)?
     .visit_field::<i64>("ManageCostId", Self::VT_MANAGECOSTID, false)?
     .visit_field::<i32>("ManageCostAmount", Self::VT_MANAGECOSTAMOUNT, false)?
     .visit_field::<i64>("ConquestRewardId", Self::VT_CONQUESTREWARDID, false)?
     .visit_field::<i64>("MassErosionId", Self::VT_MASSEROSIONID, false)?
     .visit_field::<ParcelType>("Upgrade2CostType", Self::VT_UPGRADE2COSTTYPE, false)?
     .visit_field::<i64>("Upgrade2CostId", Self::VT_UPGRADE2COSTID, false)?
     .visit_field::<i32>("Upgrade2CostAmount", Self::VT_UPGRADE2COSTAMOUNT, false)?
     .visit_field::<ParcelType>("Upgrade3CostType", Self::VT_UPGRADE3COSTTYPE, false)?
     .visit_field::<i64>("Upgrade3CostId", Self::VT_UPGRADE3COSTID, false)?
     .visit_field::<i32>("Upgrade3CostAmount", Self::VT_UPGRADE3COSTAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ConquestTileExcelArgs<'a> {
    pub Id: i64,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EventId: i64,
    pub Step: i32,
    pub PrefabName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TileNameLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TileImageName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Playable: bool,
    pub TileType: ConquestTileType,
    pub NotMapFog: bool,
    pub GroupBonusId: i64,
    pub ConquestCostType: ParcelType,
    pub ConquestCostId: i64,
    pub ConquestCostAmount: i32,
    pub ManageCostType: ParcelType,
    pub ManageCostId: i64,
    pub ManageCostAmount: i32,
    pub ConquestRewardId: i64,
    pub MassErosionId: i64,
    pub Upgrade2CostType: ParcelType,
    pub Upgrade2CostId: i64,
    pub Upgrade2CostAmount: i32,
    pub Upgrade3CostType: ParcelType,
    pub Upgrade3CostId: i64,
    pub Upgrade3CostAmount: i32,
}
impl<'a> Default for ConquestTileExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConquestTileExcelArgs {
      Id: 0,
      Name: None,
      EventId: 0,
      Step: 0,
      PrefabName: None,
      TileNameLocalize: None,
      TileImageName: None,
      Playable: false,
      TileType: ConquestTileType::None,
      NotMapFog: false,
      GroupBonusId: 0,
      ConquestCostType: ParcelType::None,
      ConquestCostId: 0,
      ConquestCostAmount: 0,
      ManageCostType: ParcelType::None,
      ManageCostId: 0,
      ManageCostAmount: 0,
      ConquestRewardId: 0,
      MassErosionId: 0,
      Upgrade2CostType: ParcelType::None,
      Upgrade2CostId: 0,
      Upgrade2CostAmount: 0,
      Upgrade3CostType: ParcelType::None,
      Upgrade3CostId: 0,
      Upgrade3CostAmount: 0,
    }
  }
}

impl Serialize for ConquestTileExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConquestTileExcel", 25)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      s.serialize_field("EventId", &self.EventId())?;
      s.serialize_field("Step", &self.Step())?;
      if let Some(f) = self.PrefabName() {
        s.serialize_field("PrefabName", &f)?;
      } else {
        s.skip_field("PrefabName")?;
      }
      if let Some(f) = self.TileNameLocalize() {
        s.serialize_field("TileNameLocalize", &f)?;
      } else {
        s.skip_field("TileNameLocalize")?;
      }
      if let Some(f) = self.TileImageName() {
        s.serialize_field("TileImageName", &f)?;
      } else {
        s.skip_field("TileImageName")?;
      }
      s.serialize_field("Playable", &self.Playable())?;
      s.serialize_field("TileType", &self.TileType())?;
      s.serialize_field("NotMapFog", &self.NotMapFog())?;
      s.serialize_field("GroupBonusId", &self.GroupBonusId())?;
      s.serialize_field("ConquestCostType", &self.ConquestCostType())?;
      s.serialize_field("ConquestCostId", &self.ConquestCostId())?;
      s.serialize_field("ConquestCostAmount", &self.ConquestCostAmount())?;
      s.serialize_field("ManageCostType", &self.ManageCostType())?;
      s.serialize_field("ManageCostId", &self.ManageCostId())?;
      s.serialize_field("ManageCostAmount", &self.ManageCostAmount())?;
      s.serialize_field("ConquestRewardId", &self.ConquestRewardId())?;
      s.serialize_field("MassErosionId", &self.MassErosionId())?;
      s.serialize_field("Upgrade2CostType", &self.Upgrade2CostType())?;
      s.serialize_field("Upgrade2CostId", &self.Upgrade2CostId())?;
      s.serialize_field("Upgrade2CostAmount", &self.Upgrade2CostAmount())?;
      s.serialize_field("Upgrade3CostType", &self.Upgrade3CostType())?;
      s.serialize_field("Upgrade3CostId", &self.Upgrade3CostId())?;
      s.serialize_field("Upgrade3CostAmount", &self.Upgrade3CostAmount())?;
    s.end()
  }
}

pub struct ConquestTileExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConquestTileExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestTileExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_EventId(&mut self, EventId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_EVENTID, EventId, 0);
  }
  #[inline]
  pub fn add_Step(&mut self, Step: i32) {
    self.fbb_.push_slot::<i32>(ConquestTileExcel::VT_STEP, Step, 0);
  }
  #[inline]
  pub fn add_PrefabName(&mut self, PrefabName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestTileExcel::VT_PREFABNAME, PrefabName);
  }
  #[inline]
  pub fn add_TileNameLocalize(&mut self, TileNameLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestTileExcel::VT_TILENAMELOCALIZE, TileNameLocalize);
  }
  #[inline]
  pub fn add_TileImageName(&mut self, TileImageName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConquestTileExcel::VT_TILEIMAGENAME, TileImageName);
  }
  #[inline]
  pub fn add_Playable(&mut self, Playable: bool) {
    self.fbb_.push_slot::<bool>(ConquestTileExcel::VT_PLAYABLE, Playable, false);
  }
  #[inline]
  pub fn add_TileType(&mut self, TileType: ConquestTileType) {
    self.fbb_.push_slot::<ConquestTileType>(ConquestTileExcel::VT_TILETYPE, TileType, ConquestTileType::None);
  }
  #[inline]
  pub fn add_NotMapFog(&mut self, NotMapFog: bool) {
    self.fbb_.push_slot::<bool>(ConquestTileExcel::VT_NOTMAPFOG, NotMapFog, false);
  }
  #[inline]
  pub fn add_GroupBonusId(&mut self, GroupBonusId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_GROUPBONUSID, GroupBonusId, 0);
  }
  #[inline]
  pub fn add_ConquestCostType(&mut self, ConquestCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestTileExcel::VT_CONQUESTCOSTTYPE, ConquestCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_ConquestCostId(&mut self, ConquestCostId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_CONQUESTCOSTID, ConquestCostId, 0);
  }
  #[inline]
  pub fn add_ConquestCostAmount(&mut self, ConquestCostAmount: i32) {
    self.fbb_.push_slot::<i32>(ConquestTileExcel::VT_CONQUESTCOSTAMOUNT, ConquestCostAmount, 0);
  }
  #[inline]
  pub fn add_ManageCostType(&mut self, ManageCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestTileExcel::VT_MANAGECOSTTYPE, ManageCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_ManageCostId(&mut self, ManageCostId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_MANAGECOSTID, ManageCostId, 0);
  }
  #[inline]
  pub fn add_ManageCostAmount(&mut self, ManageCostAmount: i32) {
    self.fbb_.push_slot::<i32>(ConquestTileExcel::VT_MANAGECOSTAMOUNT, ManageCostAmount, 0);
  }
  #[inline]
  pub fn add_ConquestRewardId(&mut self, ConquestRewardId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_CONQUESTREWARDID, ConquestRewardId, 0);
  }
  #[inline]
  pub fn add_MassErosionId(&mut self, MassErosionId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_MASSEROSIONID, MassErosionId, 0);
  }
  #[inline]
  pub fn add_Upgrade2CostType(&mut self, Upgrade2CostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestTileExcel::VT_UPGRADE2COSTTYPE, Upgrade2CostType, ParcelType::None);
  }
  #[inline]
  pub fn add_Upgrade2CostId(&mut self, Upgrade2CostId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_UPGRADE2COSTID, Upgrade2CostId, 0);
  }
  #[inline]
  pub fn add_Upgrade2CostAmount(&mut self, Upgrade2CostAmount: i32) {
    self.fbb_.push_slot::<i32>(ConquestTileExcel::VT_UPGRADE2COSTAMOUNT, Upgrade2CostAmount, 0);
  }
  #[inline]
  pub fn add_Upgrade3CostType(&mut self, Upgrade3CostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ConquestTileExcel::VT_UPGRADE3COSTTYPE, Upgrade3CostType, ParcelType::None);
  }
  #[inline]
  pub fn add_Upgrade3CostId(&mut self, Upgrade3CostId: i64) {
    self.fbb_.push_slot::<i64>(ConquestTileExcel::VT_UPGRADE3COSTID, Upgrade3CostId, 0);
  }
  #[inline]
  pub fn add_Upgrade3CostAmount(&mut self, Upgrade3CostAmount: i32) {
    self.fbb_.push_slot::<i32>(ConquestTileExcel::VT_UPGRADE3COSTAMOUNT, Upgrade3CostAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConquestTileExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConquestTileExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConquestTileExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConquestTileExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConquestTileExcel");
      ds.field("Id", &self.Id());
      ds.field("Name", &self.Name());
      ds.field("EventId", &self.EventId());
      ds.field("Step", &self.Step());
      ds.field("PrefabName", &self.PrefabName());
      ds.field("TileNameLocalize", &self.TileNameLocalize());
      ds.field("TileImageName", &self.TileImageName());
      ds.field("Playable", &self.Playable());
      ds.field("TileType", &self.TileType());
      ds.field("NotMapFog", &self.NotMapFog());
      ds.field("GroupBonusId", &self.GroupBonusId());
      ds.field("ConquestCostType", &self.ConquestCostType());
      ds.field("ConquestCostId", &self.ConquestCostId());
      ds.field("ConquestCostAmount", &self.ConquestCostAmount());
      ds.field("ManageCostType", &self.ManageCostType());
      ds.field("ManageCostId", &self.ManageCostId());
      ds.field("ManageCostAmount", &self.ManageCostAmount());
      ds.field("ConquestRewardId", &self.ConquestRewardId());
      ds.field("MassErosionId", &self.MassErosionId());
      ds.field("Upgrade2CostType", &self.Upgrade2CostType());
      ds.field("Upgrade2CostId", &self.Upgrade2CostId());
      ds.field("Upgrade2CostAmount", &self.Upgrade2CostAmount());
      ds.field("Upgrade3CostType", &self.Upgrade3CostType());
      ds.field("Upgrade3CostId", &self.Upgrade3CostId());
      ds.field("Upgrade3CostAmount", &self.Upgrade3CostAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ConquestTileExcelT {
  pub Id: i64,
  pub Name: Option<String>,
  pub EventId: i64,
  pub Step: i32,
  pub PrefabName: Option<String>,
  pub TileNameLocalize: Option<String>,
  pub TileImageName: Option<String>,
  pub Playable: bool,
  pub TileType: ConquestTileType,
  pub NotMapFog: bool,
  pub GroupBonusId: i64,
  pub ConquestCostType: ParcelType,
  pub ConquestCostId: i64,
  pub ConquestCostAmount: i32,
  pub ManageCostType: ParcelType,
  pub ManageCostId: i64,
  pub ManageCostAmount: i32,
  pub ConquestRewardId: i64,
  pub MassErosionId: i64,
  pub Upgrade2CostType: ParcelType,
  pub Upgrade2CostId: i64,
  pub Upgrade2CostAmount: i32,
  pub Upgrade3CostType: ParcelType,
  pub Upgrade3CostId: i64,
  pub Upgrade3CostAmount: i32,
}
impl Default for ConquestTileExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Name: None,
      EventId: 0,
      Step: 0,
      PrefabName: None,
      TileNameLocalize: None,
      TileImageName: None,
      Playable: false,
      TileType: ConquestTileType::None,
      NotMapFog: false,
      GroupBonusId: 0,
      ConquestCostType: ParcelType::None,
      ConquestCostId: 0,
      ConquestCostAmount: 0,
      ManageCostType: ParcelType::None,
      ManageCostId: 0,
      ManageCostAmount: 0,
      ConquestRewardId: 0,
      MassErosionId: 0,
      Upgrade2CostType: ParcelType::None,
      Upgrade2CostId: 0,
      Upgrade2CostAmount: 0,
      Upgrade3CostType: ParcelType::None,
      Upgrade3CostId: 0,
      Upgrade3CostAmount: 0,
    }
  }
}
impl ConquestTileExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ConquestTileExcel<'b>> {
    let Id = self.Id;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EventId = self.EventId;
    let Step = self.Step;
    let PrefabName = self.PrefabName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TileNameLocalize = self.TileNameLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TileImageName = self.TileImageName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Playable = self.Playable;
    let TileType = self.TileType;
    let NotMapFog = self.NotMapFog;
    let GroupBonusId = self.GroupBonusId;
    let ConquestCostType = self.ConquestCostType;
    let ConquestCostId = self.ConquestCostId;
    let ConquestCostAmount = self.ConquestCostAmount;
    let ManageCostType = self.ManageCostType;
    let ManageCostId = self.ManageCostId;
    let ManageCostAmount = self.ManageCostAmount;
    let ConquestRewardId = self.ConquestRewardId;
    let MassErosionId = self.MassErosionId;
    let Upgrade2CostType = self.Upgrade2CostType;
    let Upgrade2CostId = self.Upgrade2CostId;
    let Upgrade2CostAmount = self.Upgrade2CostAmount;
    let Upgrade3CostType = self.Upgrade3CostType;
    let Upgrade3CostId = self.Upgrade3CostId;
    let Upgrade3CostAmount = self.Upgrade3CostAmount;
    ConquestTileExcel::create(_fbb, &ConquestTileExcelArgs{
      Id,
      Name,
      EventId,
      Step,
      PrefabName,
      TileNameLocalize,
      TileImageName,
      Playable,
      TileType,
      NotMapFog,
      GroupBonusId,
      ConquestCostType,
      ConquestCostId,
      ConquestCostAmount,
      ManageCostType,
      ManageCostId,
      ManageCostAmount,
      ConquestRewardId,
      MassErosionId,
      Upgrade2CostType,
      Upgrade2CostId,
      Upgrade2CostAmount,
      Upgrade3CostType,
      Upgrade3CostId,
      Upgrade3CostAmount,
    })
  }
}
