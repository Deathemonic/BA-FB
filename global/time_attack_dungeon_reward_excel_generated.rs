// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TimeAttackDungeonRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TimeAttackDungeonRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TimeAttackDungeonRewardExcel<'a> {
  type Inner = TimeAttackDungeonRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TimeAttackDungeonRewardExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_REWARDMAXPOINT: flatbuffers::VOffsetT = 6;
  pub const VT_REWARDTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDMINPOINT: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_REWARDPARCELDEFAULTAMOUNT: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDPARCELMAXAMOUNT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TimeAttackDungeonRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TimeAttackDungeonRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonRewardExcel<'bldr>> {
    let mut builder = TimeAttackDungeonRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TimeAttackDungeonReward");
      let x = args.RewardMaxPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardMaxPoint(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.RewardParcelMaxAmount {
        builder.add_RewardParcelMaxAmount(x);
      }
      if let Some(x) = args.RewardParcelDefaultAmount {
        builder.add_RewardParcelDefaultAmount(x);
      }
      if let Some(x) = args.RewardParcelId {
        builder.add_RewardParcelId(x);
      }
      if let Some(x) = args.RewardParcelType {
        builder.add_RewardParcelType(x);
      }
      if let Some(x) = args.RewardMinPoint {
        builder.add_RewardMinPoint(x);
      }
      if let Some(x) = args.RewardType {
        builder.add_RewardType(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> TimeAttackDungeonRewardExcelT {
    let key = table_encryption_service::create_key(b"TimeAttackDungeonReward");
      let Id = self.Id();
      let RewardMaxPoint = self.RewardMaxPoint();
    let RewardType = self.RewardType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardMinPoint = self.RewardMinPoint().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelType = self.RewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardParcelId = self.RewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelDefaultAmount = self.RewardParcelDefaultAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let RewardParcelMaxAmount = self.RewardParcelMaxAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    TimeAttackDungeonRewardExcelT {
      Id,
      RewardMaxPoint,
      RewardType,
      RewardMinPoint,
      RewardParcelType,
      RewardParcelId,
      RewardParcelDefaultAmount,
      RewardParcelMaxAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonRewardExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardMaxPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonRewardExcel::VT_REWARDMAXPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardType(&self) -> Option<flatbuffers::Vector<'a, TimeAttackDungeonRewardType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, TimeAttackDungeonRewardType>>>(TimeAttackDungeonRewardExcel::VT_REWARDTYPE, None)}
  }
  #[inline]
  pub fn RewardMinPoint(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TimeAttackDungeonRewardExcel::VT_REWARDMINPOINT, None)}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELID, None)}
  }
  #[inline]
  pub fn RewardParcelDefaultAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELDEFAULTAMOUNT, None)}
  }
  #[inline]
  pub fn RewardParcelMaxAmount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELMAXAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for TimeAttackDungeonRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("RewardMaxPoint", Self::VT_REWARDMAXPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, TimeAttackDungeonRewardType>>>("RewardType", Self::VT_REWARDTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardMinPoint", Self::VT_REWARDMINPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelDefaultAmount", Self::VT_REWARDPARCELDEFAULTAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("RewardParcelMaxAmount", Self::VT_REWARDPARCELMAXAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct TimeAttackDungeonRewardExcelArgs<'a> {
    pub Id: i64,
    pub RewardMaxPoint: i64,
    pub RewardType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, TimeAttackDungeonRewardType>>>,
    pub RewardMinPoint: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub RewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelDefaultAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardParcelMaxAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for TimeAttackDungeonRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TimeAttackDungeonRewardExcelArgs {
      Id: 0,
      RewardMaxPoint: 0,
      RewardType: None,
      RewardMinPoint: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelDefaultAmount: None,
      RewardParcelMaxAmount: None,
    }
  }
}

impl Serialize for TimeAttackDungeonRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TimeAttackDungeonRewardExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("RewardMaxPoint", &self.RewardMaxPoint())?;
      if let Some(f) = self.RewardType() {
        s.serialize_field("RewardType", &f)?;
      } else {
        s.skip_field("RewardType")?;
      }
      if let Some(f) = self.RewardMinPoint() {
        s.serialize_field("RewardMinPoint", &f)?;
      } else {
        s.skip_field("RewardMinPoint")?;
      }
      if let Some(f) = self.RewardParcelType() {
        s.serialize_field("RewardParcelType", &f)?;
      } else {
        s.skip_field("RewardParcelType")?;
      }
      if let Some(f) = self.RewardParcelId() {
        s.serialize_field("RewardParcelId", &f)?;
      } else {
        s.skip_field("RewardParcelId")?;
      }
      if let Some(f) = self.RewardParcelDefaultAmount() {
        s.serialize_field("RewardParcelDefaultAmount", &f)?;
      } else {
        s.skip_field("RewardParcelDefaultAmount")?;
      }
      if let Some(f) = self.RewardParcelMaxAmount() {
        s.serialize_field("RewardParcelMaxAmount", &f)?;
      } else {
        s.skip_field("RewardParcelMaxAmount")?;
      }
    s.end()
  }
}

pub struct TimeAttackDungeonRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TimeAttackDungeonRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonRewardExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_RewardMaxPoint(&mut self, RewardMaxPoint: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonRewardExcel::VT_REWARDMAXPOINT, RewardMaxPoint, 0);
  }
  #[inline]
  pub fn add_RewardType(&mut self, RewardType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , TimeAttackDungeonRewardType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonRewardExcel::VT_REWARDTYPE, RewardType);
  }
  #[inline]
  pub fn add_RewardMinPoint(&mut self, RewardMinPoint: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonRewardExcel::VT_REWARDMINPOINT, RewardMinPoint);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELID, RewardParcelId);
  }
  #[inline]
  pub fn add_RewardParcelDefaultAmount(&mut self, RewardParcelDefaultAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELDEFAULTAMOUNT, RewardParcelDefaultAmount);
  }
  #[inline]
  pub fn add_RewardParcelMaxAmount(&mut self, RewardParcelMaxAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonRewardExcel::VT_REWARDPARCELMAXAMOUNT, RewardParcelMaxAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TimeAttackDungeonRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TimeAttackDungeonRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TimeAttackDungeonRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TimeAttackDungeonRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TimeAttackDungeonRewardExcel");
      ds.field("Id", &self.Id());
      ds.field("RewardMaxPoint", &self.RewardMaxPoint());
      ds.field("RewardType", &self.RewardType());
      ds.field("RewardMinPoint", &self.RewardMinPoint());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelDefaultAmount", &self.RewardParcelDefaultAmount());
      ds.field("RewardParcelMaxAmount", &self.RewardParcelMaxAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TimeAttackDungeonRewardExcelT {
  pub Id: i64,
  pub RewardMaxPoint: i64,
  pub RewardType: Option<Vec<TimeAttackDungeonRewardType>>,
  pub RewardMinPoint: Option<Vec<i64>>,
  pub RewardParcelType: Option<Vec<ParcelType>>,
  pub RewardParcelId: Option<Vec<i64>>,
  pub RewardParcelDefaultAmount: Option<Vec<i64>>,
  pub RewardParcelMaxAmount: Option<Vec<i64>>,
}
impl Default for TimeAttackDungeonRewardExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      RewardMaxPoint: 0,
      RewardType: None,
      RewardMinPoint: None,
      RewardParcelType: None,
      RewardParcelId: None,
      RewardParcelDefaultAmount: None,
      RewardParcelMaxAmount: None,
    }
  }
}
impl TimeAttackDungeonRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonRewardExcel<'b>> {
    let Id = self.Id;
    let RewardMaxPoint = self.RewardMaxPoint;
    let RewardType = self.RewardType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardMinPoint = self.RewardMinPoint.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelType = self.RewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelId = self.RewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelDefaultAmount = self.RewardParcelDefaultAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardParcelMaxAmount = self.RewardParcelMaxAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    TimeAttackDungeonRewardExcel::create(_fbb, &TimeAttackDungeonRewardExcelArgs{
      Id,
      RewardMaxPoint,
      RewardType,
      RewardMinPoint,
      RewardParcelType,
      RewardParcelId,
      RewardParcelDefaultAmount,
      RewardParcelMaxAmount,
    })
  }
}
