// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioContentCollectionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioContentCollectionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioContentCollectionExcel<'a> {
  type Inner = ScenarioContentCollectionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioContentCollectionExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_GROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_UNLOCKCONDITIONTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_UNLOCKCONDITIONPARAMETER: flatbuffers::VOffsetT = 10;
  pub const VT_MULTIPLECONDITIONCHECKTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_UNLOCKCONDITIONCOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_ISOBJECT: flatbuffers::VOffsetT = 16;
  pub const VT_ISHORIZON: flatbuffers::VOffsetT = 18;
  pub const VT_EMBLEMRESOURCE: flatbuffers::VOffsetT = 20;
  pub const VT_THUMBRESOURCE: flatbuffers::VOffsetT = 22;
  pub const VT_FULLRESOURCE: flatbuffers::VOffsetT = 24;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 26;
  pub const VT_SUBNAMELOCALIZECODEID: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioContentCollectionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioContentCollectionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioContentCollectionExcel<'bldr>> {
    let mut builder = ScenarioContentCollectionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioContentCollection");
      let x = args.UnlockConditionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UnlockConditionCount(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.SubNameLocalizeCodeId {
        builder.add_SubNameLocalizeCodeId(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      if let Some(x) = args.FullResource {
        builder.add_FullResource(x);
      }
      if let Some(x) = args.ThumbResource {
        builder.add_ThumbResource(x);
      }
      if let Some(x) = args.EmblemResource {
        builder.add_EmblemResource(x);
      }
      let x = args.MultipleConditionCheckType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MultipleConditionCheckType(x);
      if let Some(x) = args.UnlockConditionParameter {
        builder.add_UnlockConditionParameter(x);
      }
      let x = args.UnlockConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_UnlockConditionType(x);
      builder.add_IsHorizon(args.IsHorizon);
      builder.add_IsObject(args.IsObject);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioContentCollectionExcelT {
    let key = table_encryption_service::create_key(b"ScenarioContentCollection");
      let Id = self.Id();
      let GroupId = self.GroupId();
      let UnlockConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.UnlockConditionType(), &key)
      } else {
        self.UnlockConditionType()
      };
    let UnlockConditionParameter = self.UnlockConditionParameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let MultipleConditionCheckType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MultipleConditionCheckType(), &key)
      } else {
        self.MultipleConditionCheckType()
      };
      let UnlockConditionCount = self.UnlockConditionCount();
      let IsObject = self.IsObject();
      let IsHorizon = self.IsHorizon();
    let EmblemResource = self.EmblemResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ThumbResource = self.ThumbResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullResource = self.FullResource().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeEtcId = self.LocalizeEtcId();
    let SubNameLocalizeCodeId = self.SubNameLocalizeCodeId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    ScenarioContentCollectionExcelT {
      Id,
      GroupId,
      UnlockConditionType,
      UnlockConditionParameter,
      MultipleConditionCheckType,
      UnlockConditionCount,
      IsObject,
      IsHorizon,
      EmblemResource,
      ThumbResource,
      FullResource,
      LocalizeEtcId,
      SubNameLocalizeCodeId,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioContentCollectionExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioContentCollectionExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UnlockConditionType(&self) -> CollectionUnlockType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CollectionUnlockType>(ScenarioContentCollectionExcel::VT_UNLOCKCONDITIONTYPE, Some(CollectionUnlockType::None)).unwrap()}
  }
  #[inline]
  pub fn UnlockConditionParameter(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(ScenarioContentCollectionExcel::VT_UNLOCKCONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn MultipleConditionCheckType(&self) -> MultipleConditionCheckType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MultipleConditionCheckType>(ScenarioContentCollectionExcel::VT_MULTIPLECONDITIONCHECKTYPE, Some(MultipleConditionCheckType::And)).unwrap()}
  }
  #[inline]
  pub fn UnlockConditionCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ScenarioContentCollectionExcel::VT_UNLOCKCONDITIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsObject(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ScenarioContentCollectionExcel::VT_ISOBJECT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn IsHorizon(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ScenarioContentCollectionExcel::VT_ISHORIZON, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EmblemResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioContentCollectionExcel::VT_EMBLEMRESOURCE, None)}
  }
  #[inline]
  pub fn ThumbResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioContentCollectionExcel::VT_THUMBRESOURCE, None)}
  }
  #[inline]
  pub fn FullResource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioContentCollectionExcel::VT_FULLRESOURCE, None)}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioContentCollectionExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SubNameLocalizeCodeId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioContentCollectionExcel::VT_SUBNAMELOCALIZECODEID, None)}
  }
}

impl flatbuffers::Verifiable for ScenarioContentCollectionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<CollectionUnlockType>("UnlockConditionType", Self::VT_UNLOCKCONDITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("UnlockConditionParameter", Self::VT_UNLOCKCONDITIONPARAMETER, false)?
     .visit_field::<MultipleConditionCheckType>("MultipleConditionCheckType", Self::VT_MULTIPLECONDITIONCHECKTYPE, false)?
     .visit_field::<i64>("UnlockConditionCount", Self::VT_UNLOCKCONDITIONCOUNT, false)?
     .visit_field::<bool>("IsObject", Self::VT_ISOBJECT, false)?
     .visit_field::<bool>("IsHorizon", Self::VT_ISHORIZON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EmblemResource", Self::VT_EMBLEMRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThumbResource", Self::VT_THUMBRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullResource", Self::VT_FULLRESOURCE, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubNameLocalizeCodeId", Self::VT_SUBNAMELOCALIZECODEID, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioContentCollectionExcelArgs<'a> {
    pub Id: i64,
    pub GroupId: i64,
    pub UnlockConditionType: CollectionUnlockType,
    pub UnlockConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub MultipleConditionCheckType: MultipleConditionCheckType,
    pub UnlockConditionCount: i64,
    pub IsObject: bool,
    pub IsHorizon: bool,
    pub EmblemResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ThumbResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeEtcId: u32,
    pub SubNameLocalizeCodeId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ScenarioContentCollectionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioContentCollectionExcelArgs {
      Id: 0,
      GroupId: 0,
      UnlockConditionType: CollectionUnlockType::None,
      UnlockConditionParameter: None,
      MultipleConditionCheckType: MultipleConditionCheckType::And,
      UnlockConditionCount: 0,
      IsObject: false,
      IsHorizon: false,
      EmblemResource: None,
      ThumbResource: None,
      FullResource: None,
      LocalizeEtcId: 0,
      SubNameLocalizeCodeId: None,
    }
  }
}

impl Serialize for ScenarioContentCollectionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioContentCollectionExcel", 13)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("UnlockConditionType", &self.UnlockConditionType())?;
      if let Some(f) = self.UnlockConditionParameter() {
        s.serialize_field("UnlockConditionParameter", &f)?;
      } else {
        s.skip_field("UnlockConditionParameter")?;
      }
      s.serialize_field("MultipleConditionCheckType", &self.MultipleConditionCheckType())?;
      s.serialize_field("UnlockConditionCount", &self.UnlockConditionCount())?;
      s.serialize_field("IsObject", &self.IsObject())?;
      s.serialize_field("IsHorizon", &self.IsHorizon())?;
      if let Some(f) = self.EmblemResource() {
        s.serialize_field("EmblemResource", &f)?;
      } else {
        s.skip_field("EmblemResource")?;
      }
      if let Some(f) = self.ThumbResource() {
        s.serialize_field("ThumbResource", &f)?;
      } else {
        s.skip_field("ThumbResource")?;
      }
      if let Some(f) = self.FullResource() {
        s.serialize_field("FullResource", &f)?;
      } else {
        s.skip_field("FullResource")?;
      }
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.SubNameLocalizeCodeId() {
        s.serialize_field("SubNameLocalizeCodeId", &f)?;
      } else {
        s.skip_field("SubNameLocalizeCodeId")?;
      }
    s.end()
  }
}

pub struct ScenarioContentCollectionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioContentCollectionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ScenarioContentCollectionExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(ScenarioContentCollectionExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_UnlockConditionType(&mut self, UnlockConditionType: CollectionUnlockType) {
    self.fbb_.push_slot::<CollectionUnlockType>(ScenarioContentCollectionExcel::VT_UNLOCKCONDITIONTYPE, UnlockConditionType, CollectionUnlockType::None);
  }
  #[inline]
  pub fn add_UnlockConditionParameter(&mut self, UnlockConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioContentCollectionExcel::VT_UNLOCKCONDITIONPARAMETER, UnlockConditionParameter);
  }
  #[inline]
  pub fn add_MultipleConditionCheckType(&mut self, MultipleConditionCheckType: MultipleConditionCheckType) {
    self.fbb_.push_slot::<MultipleConditionCheckType>(ScenarioContentCollectionExcel::VT_MULTIPLECONDITIONCHECKTYPE, MultipleConditionCheckType, MultipleConditionCheckType::And);
  }
  #[inline]
  pub fn add_UnlockConditionCount(&mut self, UnlockConditionCount: i64) {
    self.fbb_.push_slot::<i64>(ScenarioContentCollectionExcel::VT_UNLOCKCONDITIONCOUNT, UnlockConditionCount, 0);
  }
  #[inline]
  pub fn add_IsObject(&mut self, IsObject: bool) {
    self.fbb_.push_slot::<bool>(ScenarioContentCollectionExcel::VT_ISOBJECT, IsObject, false);
  }
  #[inline]
  pub fn add_IsHorizon(&mut self, IsHorizon: bool) {
    self.fbb_.push_slot::<bool>(ScenarioContentCollectionExcel::VT_ISHORIZON, IsHorizon, false);
  }
  #[inline]
  pub fn add_EmblemResource(&mut self, EmblemResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioContentCollectionExcel::VT_EMBLEMRESOURCE, EmblemResource);
  }
  #[inline]
  pub fn add_ThumbResource(&mut self, ThumbResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioContentCollectionExcel::VT_THUMBRESOURCE, ThumbResource);
  }
  #[inline]
  pub fn add_FullResource(&mut self, FullResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioContentCollectionExcel::VT_FULLRESOURCE, FullResource);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(ScenarioContentCollectionExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_SubNameLocalizeCodeId(&mut self, SubNameLocalizeCodeId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioContentCollectionExcel::VT_SUBNAMELOCALIZECODEID, SubNameLocalizeCodeId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioContentCollectionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioContentCollectionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioContentCollectionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioContentCollectionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioContentCollectionExcel");
      ds.field("Id", &self.Id());
      ds.field("GroupId", &self.GroupId());
      ds.field("UnlockConditionType", &self.UnlockConditionType());
      ds.field("UnlockConditionParameter", &self.UnlockConditionParameter());
      ds.field("MultipleConditionCheckType", &self.MultipleConditionCheckType());
      ds.field("UnlockConditionCount", &self.UnlockConditionCount());
      ds.field("IsObject", &self.IsObject());
      ds.field("IsHorizon", &self.IsHorizon());
      ds.field("EmblemResource", &self.EmblemResource());
      ds.field("ThumbResource", &self.ThumbResource());
      ds.field("FullResource", &self.FullResource());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("SubNameLocalizeCodeId", &self.SubNameLocalizeCodeId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioContentCollectionExcelT {
  pub Id: i64,
  pub GroupId: i64,
  pub UnlockConditionType: CollectionUnlockType,
  pub UnlockConditionParameter: Option<Vec<i64>>,
  pub MultipleConditionCheckType: MultipleConditionCheckType,
  pub UnlockConditionCount: i64,
  pub IsObject: bool,
  pub IsHorizon: bool,
  pub EmblemResource: Option<String>,
  pub ThumbResource: Option<String>,
  pub FullResource: Option<String>,
  pub LocalizeEtcId: u32,
  pub SubNameLocalizeCodeId: Option<String>,
}
impl Default for ScenarioContentCollectionExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      GroupId: 0,
      UnlockConditionType: CollectionUnlockType::None,
      UnlockConditionParameter: None,
      MultipleConditionCheckType: MultipleConditionCheckType::And,
      UnlockConditionCount: 0,
      IsObject: false,
      IsHorizon: false,
      EmblemResource: None,
      ThumbResource: None,
      FullResource: None,
      LocalizeEtcId: 0,
      SubNameLocalizeCodeId: None,
    }
  }
}
impl ScenarioContentCollectionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioContentCollectionExcel<'b>> {
    let Id = self.Id;
    let GroupId = self.GroupId;
    let UnlockConditionType = self.UnlockConditionType;
    let UnlockConditionParameter = self.UnlockConditionParameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MultipleConditionCheckType = self.MultipleConditionCheckType;
    let UnlockConditionCount = self.UnlockConditionCount;
    let IsObject = self.IsObject;
    let IsHorizon = self.IsHorizon;
    let EmblemResource = self.EmblemResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ThumbResource = self.ThumbResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullResource = self.FullResource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeEtcId = self.LocalizeEtcId;
    let SubNameLocalizeCodeId = self.SubNameLocalizeCodeId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ScenarioContentCollectionExcel::create(_fbb, &ScenarioContentCollectionExcelArgs{
      Id,
      GroupId,
      UnlockConditionType,
      UnlockConditionParameter,
      MultipleConditionCheckType,
      UnlockConditionCount,
      IsObject,
      IsHorizon,
      EmblemResource,
      ThumbResource,
      FullResource,
      LocalizeEtcId,
      SubNameLocalizeCodeId,
    })
  }
}
