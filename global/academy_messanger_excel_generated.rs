// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AcademyMessangerExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AcademyMessangerExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AcademyMessangerExcel<'a> {
  type Inner = AcademyMessangerExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AcademyMessangerExcel<'a> {
  pub const VT_MESSAGEGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 8;
  pub const VT_MESSAGECONDITION: flatbuffers::VOffsetT = 10;
  pub const VT_CONDITIONVALUE: flatbuffers::VOffsetT = 12;
  pub const VT_PRECONDITIONGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_PRECONDITIONFAVORSCHEDULEID: flatbuffers::VOffsetT = 16;
  pub const VT_FAVORSCHEDULEID: flatbuffers::VOffsetT = 18;
  pub const VT_NEXTGROUPID: flatbuffers::VOffsetT = 20;
  pub const VT_FEEDBACKTIMEMILLISEC: flatbuffers::VOffsetT = 22;
  pub const VT_MESSAGETYPE: flatbuffers::VOffsetT = 24;
  pub const VT_IMAGEPATH: flatbuffers::VOffsetT = 26;
  pub const VT_MESSAGEKR: flatbuffers::VOffsetT = 28;
  pub const VT_MESSAGEJP: flatbuffers::VOffsetT = 30;
  pub const VT_MESSAGETH: flatbuffers::VOffsetT = 32;
  pub const VT_MESSAGETW: flatbuffers::VOffsetT = 34;
  pub const VT_MESSAGEEN: flatbuffers::VOffsetT = 36;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AcademyMessangerExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AcademyMessangerExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AcademyMessangerExcel<'bldr>> {
    let mut builder = AcademyMessangerExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AcademyMessanger");
      let x = args.FeedbackTimeMillisec;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FeedbackTimeMillisec(x);
      let x = args.NextGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NextGroupId(x);
      let x = args.FavorScheduleId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FavorScheduleId(x);
      let x = args.PreConditionFavorScheduleId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PreConditionFavorScheduleId(x);
      let x = args.PreConditionGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PreConditionGroupId(x);
      let x = args.ConditionValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ConditionValue(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.MessageGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MessageGroupId(x);
      if let Some(x) = args.MessageEN {
        builder.add_MessageEN(x);
      }
      if let Some(x) = args.MessageTW {
        builder.add_MessageTW(x);
      }
      if let Some(x) = args.MessageTH {
        builder.add_MessageTH(x);
      }
      if let Some(x) = args.MessageJP {
        builder.add_MessageJP(x);
      }
      if let Some(x) = args.MessageKR {
        builder.add_MessageKR(x);
      }
      if let Some(x) = args.ImagePath {
        builder.add_ImagePath(x);
      }
      let x = args.MessageType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MessageType(x);
      let x = args.MessageCondition;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_MessageCondition(x);
    builder.finish()
  }

  pub fn unpack(&self) -> AcademyMessangerExcelT {
    let key = table_encryption_service::create_key(b"AcademyMessanger");
      let MessageGroupId = self.MessageGroupId();
      let Id = self.Id();
      let CharacterId = self.CharacterId();
      let MessageCondition = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MessageCondition(), &key)
      } else {
        self.MessageCondition()
      };
      let ConditionValue = self.ConditionValue();
      let PreConditionGroupId = self.PreConditionGroupId();
      let PreConditionFavorScheduleId = self.PreConditionFavorScheduleId();
      let FavorScheduleId = self.FavorScheduleId();
      let NextGroupId = self.NextGroupId();
      let FeedbackTimeMillisec = self.FeedbackTimeMillisec();
      let MessageType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.MessageType(), &key)
      } else {
        self.MessageType()
      };
    let ImagePath = self.ImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MessageKR = self.MessageKR().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MessageJP = self.MessageJP().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MessageTH = self.MessageTH().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MessageTW = self.MessageTW().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MessageEN = self.MessageEN().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    AcademyMessangerExcelT {
      MessageGroupId,
      Id,
      CharacterId,
      MessageCondition,
      ConditionValue,
      PreConditionGroupId,
      PreConditionFavorScheduleId,
      FavorScheduleId,
      NextGroupId,
      FeedbackTimeMillisec,
      MessageType,
      ImagePath,
      MessageKR,
      MessageJP,
      MessageTH,
      MessageTW,
      MessageEN,
    }
  }

  #[inline]
  pub fn MessageGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_MESSAGEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MessageCondition(&self) -> AcademyMessageConditions {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AcademyMessageConditions>(AcademyMessangerExcel::VT_MESSAGECONDITION, Some(AcademyMessageConditions::None)).unwrap()}
  }
  #[inline]
  pub fn ConditionValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_CONDITIONVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PreConditionGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_PRECONDITIONGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PreConditionFavorScheduleId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_PRECONDITIONFAVORSCHEDULEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FavorScheduleId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_FAVORSCHEDULEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NextGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_NEXTGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FeedbackTimeMillisec(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyMessangerExcel::VT_FEEDBACKTIMEMILLISEC, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MessageType(&self) -> AcademyMessageTypes {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AcademyMessageTypes>(AcademyMessangerExcel::VT_MESSAGETYPE, Some(AcademyMessageTypes::None)).unwrap()}
  }
  #[inline]
  pub fn ImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyMessangerExcel::VT_IMAGEPATH, None)}
  }
  #[inline]
  pub fn MessageKR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyMessangerExcel::VT_MESSAGEKR, None)}
  }
  #[inline]
  pub fn MessageJP(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyMessangerExcel::VT_MESSAGEJP, None)}
  }
  #[inline]
  pub fn MessageTH(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyMessangerExcel::VT_MESSAGETH, None)}
  }
  #[inline]
  pub fn MessageTW(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyMessangerExcel::VT_MESSAGETW, None)}
  }
  #[inline]
  pub fn MessageEN(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyMessangerExcel::VT_MESSAGEEN, None)}
  }
}

impl flatbuffers::Verifiable for AcademyMessangerExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("MessageGroupId", Self::VT_MESSAGEGROUPID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<AcademyMessageConditions>("MessageCondition", Self::VT_MESSAGECONDITION, false)?
     .visit_field::<i64>("ConditionValue", Self::VT_CONDITIONVALUE, false)?
     .visit_field::<i64>("PreConditionGroupId", Self::VT_PRECONDITIONGROUPID, false)?
     .visit_field::<i64>("PreConditionFavorScheduleId", Self::VT_PRECONDITIONFAVORSCHEDULEID, false)?
     .visit_field::<i64>("FavorScheduleId", Self::VT_FAVORSCHEDULEID, false)?
     .visit_field::<i64>("NextGroupId", Self::VT_NEXTGROUPID, false)?
     .visit_field::<i64>("FeedbackTimeMillisec", Self::VT_FEEDBACKTIMEMILLISEC, false)?
     .visit_field::<AcademyMessageTypes>("MessageType", Self::VT_MESSAGETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ImagePath", Self::VT_IMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MessageKR", Self::VT_MESSAGEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MessageJP", Self::VT_MESSAGEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MessageTH", Self::VT_MESSAGETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MessageTW", Self::VT_MESSAGETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MessageEN", Self::VT_MESSAGEEN, false)?
     .finish();
    Ok(())
  }
}
pub struct AcademyMessangerExcelArgs<'a> {
    pub MessageGroupId: i64,
    pub Id: i64,
    pub CharacterId: i64,
    pub MessageCondition: AcademyMessageConditions,
    pub ConditionValue: i64,
    pub PreConditionGroupId: i64,
    pub PreConditionFavorScheduleId: i64,
    pub FavorScheduleId: i64,
    pub NextGroupId: i64,
    pub FeedbackTimeMillisec: i64,
    pub MessageType: AcademyMessageTypes,
    pub ImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MessageKR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MessageJP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MessageTH: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MessageTW: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MessageEN: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AcademyMessangerExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AcademyMessangerExcelArgs {
      MessageGroupId: 0,
      Id: 0,
      CharacterId: 0,
      MessageCondition: AcademyMessageConditions::None,
      ConditionValue: 0,
      PreConditionGroupId: 0,
      PreConditionFavorScheduleId: 0,
      FavorScheduleId: 0,
      NextGroupId: 0,
      FeedbackTimeMillisec: 0,
      MessageType: AcademyMessageTypes::None,
      ImagePath: None,
      MessageKR: None,
      MessageJP: None,
      MessageTH: None,
      MessageTW: None,
      MessageEN: None,
    }
  }
}

impl Serialize for AcademyMessangerExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AcademyMessangerExcel", 17)?;
      s.serialize_field("MessageGroupId", &self.MessageGroupId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("MessageCondition", &self.MessageCondition())?;
      s.serialize_field("ConditionValue", &self.ConditionValue())?;
      s.serialize_field("PreConditionGroupId", &self.PreConditionGroupId())?;
      s.serialize_field("PreConditionFavorScheduleId", &self.PreConditionFavorScheduleId())?;
      s.serialize_field("FavorScheduleId", &self.FavorScheduleId())?;
      s.serialize_field("NextGroupId", &self.NextGroupId())?;
      s.serialize_field("FeedbackTimeMillisec", &self.FeedbackTimeMillisec())?;
      s.serialize_field("MessageType", &self.MessageType())?;
      if let Some(f) = self.ImagePath() {
        s.serialize_field("ImagePath", &f)?;
      } else {
        s.skip_field("ImagePath")?;
      }
      if let Some(f) = self.MessageKR() {
        s.serialize_field("MessageKR", &f)?;
      } else {
        s.skip_field("MessageKR")?;
      }
      if let Some(f) = self.MessageJP() {
        s.serialize_field("MessageJP", &f)?;
      } else {
        s.skip_field("MessageJP")?;
      }
      if let Some(f) = self.MessageTH() {
        s.serialize_field("MessageTH", &f)?;
      } else {
        s.skip_field("MessageTH")?;
      }
      if let Some(f) = self.MessageTW() {
        s.serialize_field("MessageTW", &f)?;
      } else {
        s.skip_field("MessageTW")?;
      }
      if let Some(f) = self.MessageEN() {
        s.serialize_field("MessageEN", &f)?;
      } else {
        s.skip_field("MessageEN")?;
      }
    s.end()
  }
}

pub struct AcademyMessangerExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AcademyMessangerExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_MessageGroupId(&mut self, MessageGroupId: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_MESSAGEGROUPID, MessageGroupId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_MessageCondition(&mut self, MessageCondition: AcademyMessageConditions) {
    self.fbb_.push_slot::<AcademyMessageConditions>(AcademyMessangerExcel::VT_MESSAGECONDITION, MessageCondition, AcademyMessageConditions::None);
  }
  #[inline]
  pub fn add_ConditionValue(&mut self, ConditionValue: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_CONDITIONVALUE, ConditionValue, 0);
  }
  #[inline]
  pub fn add_PreConditionGroupId(&mut self, PreConditionGroupId: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_PRECONDITIONGROUPID, PreConditionGroupId, 0);
  }
  #[inline]
  pub fn add_PreConditionFavorScheduleId(&mut self, PreConditionFavorScheduleId: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_PRECONDITIONFAVORSCHEDULEID, PreConditionFavorScheduleId, 0);
  }
  #[inline]
  pub fn add_FavorScheduleId(&mut self, FavorScheduleId: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_FAVORSCHEDULEID, FavorScheduleId, 0);
  }
  #[inline]
  pub fn add_NextGroupId(&mut self, NextGroupId: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_NEXTGROUPID, NextGroupId, 0);
  }
  #[inline]
  pub fn add_FeedbackTimeMillisec(&mut self, FeedbackTimeMillisec: i64) {
    self.fbb_.push_slot::<i64>(AcademyMessangerExcel::VT_FEEDBACKTIMEMILLISEC, FeedbackTimeMillisec, 0);
  }
  #[inline]
  pub fn add_MessageType(&mut self, MessageType: AcademyMessageTypes) {
    self.fbb_.push_slot::<AcademyMessageTypes>(AcademyMessangerExcel::VT_MESSAGETYPE, MessageType, AcademyMessageTypes::None);
  }
  #[inline]
  pub fn add_ImagePath(&mut self, ImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyMessangerExcel::VT_IMAGEPATH, ImagePath);
  }
  #[inline]
  pub fn add_MessageKR(&mut self, MessageKR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyMessangerExcel::VT_MESSAGEKR, MessageKR);
  }
  #[inline]
  pub fn add_MessageJP(&mut self, MessageJP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyMessangerExcel::VT_MESSAGEJP, MessageJP);
  }
  #[inline]
  pub fn add_MessageTH(&mut self, MessageTH: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyMessangerExcel::VT_MESSAGETH, MessageTH);
  }
  #[inline]
  pub fn add_MessageTW(&mut self, MessageTW: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyMessangerExcel::VT_MESSAGETW, MessageTW);
  }
  #[inline]
  pub fn add_MessageEN(&mut self, MessageEN: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyMessangerExcel::VT_MESSAGEEN, MessageEN);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AcademyMessangerExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AcademyMessangerExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AcademyMessangerExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AcademyMessangerExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AcademyMessangerExcel");
      ds.field("MessageGroupId", &self.MessageGroupId());
      ds.field("Id", &self.Id());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("MessageCondition", &self.MessageCondition());
      ds.field("ConditionValue", &self.ConditionValue());
      ds.field("PreConditionGroupId", &self.PreConditionGroupId());
      ds.field("PreConditionFavorScheduleId", &self.PreConditionFavorScheduleId());
      ds.field("FavorScheduleId", &self.FavorScheduleId());
      ds.field("NextGroupId", &self.NextGroupId());
      ds.field("FeedbackTimeMillisec", &self.FeedbackTimeMillisec());
      ds.field("MessageType", &self.MessageType());
      ds.field("ImagePath", &self.ImagePath());
      ds.field("MessageKR", &self.MessageKR());
      ds.field("MessageJP", &self.MessageJP());
      ds.field("MessageTH", &self.MessageTH());
      ds.field("MessageTW", &self.MessageTW());
      ds.field("MessageEN", &self.MessageEN());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AcademyMessangerExcelT {
  pub MessageGroupId: i64,
  pub Id: i64,
  pub CharacterId: i64,
  pub MessageCondition: AcademyMessageConditions,
  pub ConditionValue: i64,
  pub PreConditionGroupId: i64,
  pub PreConditionFavorScheduleId: i64,
  pub FavorScheduleId: i64,
  pub NextGroupId: i64,
  pub FeedbackTimeMillisec: i64,
  pub MessageType: AcademyMessageTypes,
  pub ImagePath: Option<String>,
  pub MessageKR: Option<String>,
  pub MessageJP: Option<String>,
  pub MessageTH: Option<String>,
  pub MessageTW: Option<String>,
  pub MessageEN: Option<String>,
}
impl Default for AcademyMessangerExcelT {
  fn default() -> Self {
    Self {
      MessageGroupId: 0,
      Id: 0,
      CharacterId: 0,
      MessageCondition: AcademyMessageConditions::None,
      ConditionValue: 0,
      PreConditionGroupId: 0,
      PreConditionFavorScheduleId: 0,
      FavorScheduleId: 0,
      NextGroupId: 0,
      FeedbackTimeMillisec: 0,
      MessageType: AcademyMessageTypes::None,
      ImagePath: None,
      MessageKR: None,
      MessageJP: None,
      MessageTH: None,
      MessageTW: None,
      MessageEN: None,
    }
  }
}
impl AcademyMessangerExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AcademyMessangerExcel<'b>> {
    let MessageGroupId = self.MessageGroupId;
    let Id = self.Id;
    let CharacterId = self.CharacterId;
    let MessageCondition = self.MessageCondition;
    let ConditionValue = self.ConditionValue;
    let PreConditionGroupId = self.PreConditionGroupId;
    let PreConditionFavorScheduleId = self.PreConditionFavorScheduleId;
    let FavorScheduleId = self.FavorScheduleId;
    let NextGroupId = self.NextGroupId;
    let FeedbackTimeMillisec = self.FeedbackTimeMillisec;
    let MessageType = self.MessageType;
    let ImagePath = self.ImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MessageKR = self.MessageKR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MessageJP = self.MessageJP.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MessageTH = self.MessageTH.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MessageTW = self.MessageTW.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MessageEN = self.MessageEN.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AcademyMessangerExcel::create(_fbb, &AcademyMessangerExcelArgs{
      MessageGroupId,
      Id,
      CharacterId,
      MessageCondition,
      ConditionValue,
      PreConditionGroupId,
      PreConditionFavorScheduleId,
      FavorScheduleId,
      NextGroupId,
      FeedbackTimeMillisec,
      MessageType,
      ImagePath,
      MessageKR,
      MessageJP,
      MessageTH,
      MessageTW,
      MessageEN,
    })
  }
}
