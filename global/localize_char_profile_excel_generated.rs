// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocalizeCharProfileExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeCharProfileExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeCharProfileExcel<'a> {
  type Inner = LocalizeCharProfileExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeCharProfileExcel<'a> {
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 4;
  pub const VT_STATUSMESSAGEKR: flatbuffers::VOffsetT = 6;
  pub const VT_STATUSMESSAGEJP: flatbuffers::VOffsetT = 8;
  pub const VT_STATUSMESSAGETH: flatbuffers::VOffsetT = 10;
  pub const VT_STATUSMESSAGETW: flatbuffers::VOffsetT = 12;
  pub const VT_STATUSMESSAGEEN: flatbuffers::VOffsetT = 14;
  pub const VT_FULLNAMEKR: flatbuffers::VOffsetT = 16;
  pub const VT_FULLNAMEJP: flatbuffers::VOffsetT = 18;
  pub const VT_FULLNAMETH: flatbuffers::VOffsetT = 20;
  pub const VT_FULLNAMETW: flatbuffers::VOffsetT = 22;
  pub const VT_FULLNAMEEN: flatbuffers::VOffsetT = 24;
  pub const VT_FAMILYNAMEKR: flatbuffers::VOffsetT = 26;
  pub const VT_FAMILYNAMERUBYKR: flatbuffers::VOffsetT = 28;
  pub const VT_PERSONALNAMEKR: flatbuffers::VOffsetT = 30;
  pub const VT_PERSONALNAMERUBYKR: flatbuffers::VOffsetT = 32;
  pub const VT_FAMILYNAMEJP: flatbuffers::VOffsetT = 34;
  pub const VT_FAMILYNAMERUBYJP: flatbuffers::VOffsetT = 36;
  pub const VT_PERSONALNAMEJP: flatbuffers::VOffsetT = 38;
  pub const VT_PERSONALNAMERUBYJP: flatbuffers::VOffsetT = 40;
  pub const VT_FAMILYNAMETH: flatbuffers::VOffsetT = 42;
  pub const VT_FAMILYNAMERUBYTH: flatbuffers::VOffsetT = 44;
  pub const VT_PERSONALNAMETH: flatbuffers::VOffsetT = 46;
  pub const VT_PERSONALNAMERUBYTH: flatbuffers::VOffsetT = 48;
  pub const VT_FAMILYNAMETW: flatbuffers::VOffsetT = 50;
  pub const VT_FAMILYNAMERUBYTW: flatbuffers::VOffsetT = 52;
  pub const VT_PERSONALNAMETW: flatbuffers::VOffsetT = 54;
  pub const VT_PERSONALNAMERUBYTW: flatbuffers::VOffsetT = 56;
  pub const VT_FAMILYNAMEEN: flatbuffers::VOffsetT = 58;
  pub const VT_FAMILYNAMERUBYEN: flatbuffers::VOffsetT = 60;
  pub const VT_PERSONALNAMEEN: flatbuffers::VOffsetT = 62;
  pub const VT_PERSONALNAMERUBYEN: flatbuffers::VOffsetT = 64;
  pub const VT_SCHOOLYEARKR: flatbuffers::VOffsetT = 66;
  pub const VT_SCHOOLYEARJP: flatbuffers::VOffsetT = 68;
  pub const VT_SCHOOLYEARTH: flatbuffers::VOffsetT = 70;
  pub const VT_SCHOOLYEARTW: flatbuffers::VOffsetT = 72;
  pub const VT_SCHOOLYEAREN: flatbuffers::VOffsetT = 74;
  pub const VT_CHARACTERAGEKR: flatbuffers::VOffsetT = 76;
  pub const VT_CHARACTERAGEJP: flatbuffers::VOffsetT = 78;
  pub const VT_CHARACTERAGETH: flatbuffers::VOffsetT = 80;
  pub const VT_CHARACTERAGETW: flatbuffers::VOffsetT = 82;
  pub const VT_CHARACTERAGEEN: flatbuffers::VOffsetT = 84;
  pub const VT_BIRTHDAY: flatbuffers::VOffsetT = 86;
  pub const VT_BIRTHDAYKR: flatbuffers::VOffsetT = 88;
  pub const VT_BIRTHDAYJP: flatbuffers::VOffsetT = 90;
  pub const VT_BIRTHDAYTH: flatbuffers::VOffsetT = 92;
  pub const VT_BIRTHDAYTW: flatbuffers::VOffsetT = 94;
  pub const VT_BIRTHDAYEN: flatbuffers::VOffsetT = 96;
  pub const VT_CHARHEIGHTKR: flatbuffers::VOffsetT = 98;
  pub const VT_CHARHEIGHTJP: flatbuffers::VOffsetT = 100;
  pub const VT_CHARHEIGHTTH: flatbuffers::VOffsetT = 102;
  pub const VT_CHARHEIGHTTW: flatbuffers::VOffsetT = 104;
  pub const VT_CHARHEIGHTEN: flatbuffers::VOffsetT = 106;
  pub const VT_DESIGNERNAMEKR: flatbuffers::VOffsetT = 108;
  pub const VT_DESIGNERNAMEJP: flatbuffers::VOffsetT = 110;
  pub const VT_DESIGNERNAMETH: flatbuffers::VOffsetT = 112;
  pub const VT_DESIGNERNAMETW: flatbuffers::VOffsetT = 114;
  pub const VT_DESIGNERNAMEEN: flatbuffers::VOffsetT = 116;
  pub const VT_ILLUSTRATORNAMEKR: flatbuffers::VOffsetT = 118;
  pub const VT_ILLUSTRATORNAMEJP: flatbuffers::VOffsetT = 120;
  pub const VT_ILLUSTRATORNAMETH: flatbuffers::VOffsetT = 122;
  pub const VT_ILLUSTRATORNAMETW: flatbuffers::VOffsetT = 124;
  pub const VT_ILLUSTRATORNAMEEN: flatbuffers::VOffsetT = 126;
  pub const VT_CHARACTERVOICEKR: flatbuffers::VOffsetT = 128;
  pub const VT_CHARACTERVOICEJP: flatbuffers::VOffsetT = 130;
  pub const VT_CHARACTERVOICETH: flatbuffers::VOffsetT = 132;
  pub const VT_CHARACTERVOICETW: flatbuffers::VOffsetT = 134;
  pub const VT_CHARACTERVOICEEN: flatbuffers::VOffsetT = 136;
  pub const VT_KRCHARACTERVOICEKR: flatbuffers::VOffsetT = 138;
  pub const VT_KRCHARACTERVOICETH: flatbuffers::VOffsetT = 140;
  pub const VT_KRCHARACTERVOICETW: flatbuffers::VOffsetT = 142;
  pub const VT_KRCHARACTERVOICEEN: flatbuffers::VOffsetT = 144;
  pub const VT_HOBBYKR: flatbuffers::VOffsetT = 146;
  pub const VT_HOBBYJP: flatbuffers::VOffsetT = 148;
  pub const VT_HOBBYTH: flatbuffers::VOffsetT = 150;
  pub const VT_HOBBYTW: flatbuffers::VOffsetT = 152;
  pub const VT_HOBBYEN: flatbuffers::VOffsetT = 154;
  pub const VT_WEAPONNAMEKR: flatbuffers::VOffsetT = 156;
  pub const VT_WEAPONDESCKR: flatbuffers::VOffsetT = 158;
  pub const VT_WEAPONNAMEJP: flatbuffers::VOffsetT = 160;
  pub const VT_WEAPONDESCJP: flatbuffers::VOffsetT = 162;
  pub const VT_WEAPONNAMETH: flatbuffers::VOffsetT = 164;
  pub const VT_WEAPONDESCTH: flatbuffers::VOffsetT = 166;
  pub const VT_WEAPONNAMETW: flatbuffers::VOffsetT = 168;
  pub const VT_WEAPONDESCTW: flatbuffers::VOffsetT = 170;
  pub const VT_WEAPONNAMEEN: flatbuffers::VOffsetT = 172;
  pub const VT_WEAPONDESCEN: flatbuffers::VOffsetT = 174;
  pub const VT_PROFILEINTRODUCTIONKR: flatbuffers::VOffsetT = 176;
  pub const VT_PROFILEINTRODUCTIONJP: flatbuffers::VOffsetT = 178;
  pub const VT_PROFILEINTRODUCTIONTH: flatbuffers::VOffsetT = 180;
  pub const VT_PROFILEINTRODUCTIONTW: flatbuffers::VOffsetT = 182;
  pub const VT_PROFILEINTRODUCTIONEN: flatbuffers::VOffsetT = 184;
  pub const VT_CHARACTERSSRNEWKR: flatbuffers::VOffsetT = 186;
  pub const VT_CHARACTERSSRNEWJP: flatbuffers::VOffsetT = 188;
  pub const VT_CHARACTERSSRNEWTH: flatbuffers::VOffsetT = 190;
  pub const VT_CHARACTERSSRNEWTW: flatbuffers::VOffsetT = 192;
  pub const VT_CHARACTERSSRNEWEN: flatbuffers::VOffsetT = 194;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeCharProfileExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeCharProfileExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'bldr>> {
    let mut builder = LocalizeCharProfileExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LocalizeCharProfile");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      if let Some(x) = args.CharacterSSRNewEn {
        builder.add_CharacterSSRNewEn(x);
      }
      if let Some(x) = args.CharacterSSRNewTw {
        builder.add_CharacterSSRNewTw(x);
      }
      if let Some(x) = args.CharacterSSRNewTh {
        builder.add_CharacterSSRNewTh(x);
      }
      if let Some(x) = args.CharacterSSRNewJp {
        builder.add_CharacterSSRNewJp(x);
      }
      if let Some(x) = args.CharacterSSRNewKr {
        builder.add_CharacterSSRNewKr(x);
      }
      if let Some(x) = args.ProfileIntroductionEn {
        builder.add_ProfileIntroductionEn(x);
      }
      if let Some(x) = args.ProfileIntroductionTw {
        builder.add_ProfileIntroductionTw(x);
      }
      if let Some(x) = args.ProfileIntroductionTh {
        builder.add_ProfileIntroductionTh(x);
      }
      if let Some(x) = args.ProfileIntroductionJp {
        builder.add_ProfileIntroductionJp(x);
      }
      if let Some(x) = args.ProfileIntroductionKr {
        builder.add_ProfileIntroductionKr(x);
      }
      if let Some(x) = args.WeaponDescEn {
        builder.add_WeaponDescEn(x);
      }
      if let Some(x) = args.WeaponNameEn {
        builder.add_WeaponNameEn(x);
      }
      if let Some(x) = args.WeaponDescTw {
        builder.add_WeaponDescTw(x);
      }
      if let Some(x) = args.WeaponNameTw {
        builder.add_WeaponNameTw(x);
      }
      if let Some(x) = args.WeaponDescTh {
        builder.add_WeaponDescTh(x);
      }
      if let Some(x) = args.WeaponNameTh {
        builder.add_WeaponNameTh(x);
      }
      if let Some(x) = args.WeaponDescJp {
        builder.add_WeaponDescJp(x);
      }
      if let Some(x) = args.WeaponNameJp {
        builder.add_WeaponNameJp(x);
      }
      if let Some(x) = args.WeaponDescKr {
        builder.add_WeaponDescKr(x);
      }
      if let Some(x) = args.WeaponNameKr {
        builder.add_WeaponNameKr(x);
      }
      if let Some(x) = args.HobbyEn {
        builder.add_HobbyEn(x);
      }
      if let Some(x) = args.HobbyTw {
        builder.add_HobbyTw(x);
      }
      if let Some(x) = args.HobbyTh {
        builder.add_HobbyTh(x);
      }
      if let Some(x) = args.HobbyJp {
        builder.add_HobbyJp(x);
      }
      if let Some(x) = args.HobbyKr {
        builder.add_HobbyKr(x);
      }
      if let Some(x) = args.KRCharacterVoiceEn {
        builder.add_KRCharacterVoiceEn(x);
      }
      if let Some(x) = args.KRCharacterVoiceTw {
        builder.add_KRCharacterVoiceTw(x);
      }
      if let Some(x) = args.KRCharacterVoiceTh {
        builder.add_KRCharacterVoiceTh(x);
      }
      if let Some(x) = args.KRCharacterVoiceKr {
        builder.add_KRCharacterVoiceKr(x);
      }
      if let Some(x) = args.CharacterVoiceEn {
        builder.add_CharacterVoiceEn(x);
      }
      if let Some(x) = args.CharacterVoiceTw {
        builder.add_CharacterVoiceTw(x);
      }
      if let Some(x) = args.CharacterVoiceTh {
        builder.add_CharacterVoiceTh(x);
      }
      if let Some(x) = args.CharacterVoiceJp {
        builder.add_CharacterVoiceJp(x);
      }
      if let Some(x) = args.CharacterVoiceKr {
        builder.add_CharacterVoiceKr(x);
      }
      if let Some(x) = args.IllustratorNameEn {
        builder.add_IllustratorNameEn(x);
      }
      if let Some(x) = args.IllustratorNameTw {
        builder.add_IllustratorNameTw(x);
      }
      if let Some(x) = args.IllustratorNameTh {
        builder.add_IllustratorNameTh(x);
      }
      if let Some(x) = args.IllustratorNameJp {
        builder.add_IllustratorNameJp(x);
      }
      if let Some(x) = args.IllustratorNameKr {
        builder.add_IllustratorNameKr(x);
      }
      if let Some(x) = args.DesignerNameEn {
        builder.add_DesignerNameEn(x);
      }
      if let Some(x) = args.DesignerNameTw {
        builder.add_DesignerNameTw(x);
      }
      if let Some(x) = args.DesignerNameTh {
        builder.add_DesignerNameTh(x);
      }
      if let Some(x) = args.DesignerNameJp {
        builder.add_DesignerNameJp(x);
      }
      if let Some(x) = args.DesignerNameKr {
        builder.add_DesignerNameKr(x);
      }
      if let Some(x) = args.CharHeightEn {
        builder.add_CharHeightEn(x);
      }
      if let Some(x) = args.CharHeightTw {
        builder.add_CharHeightTw(x);
      }
      if let Some(x) = args.CharHeightTh {
        builder.add_CharHeightTh(x);
      }
      if let Some(x) = args.CharHeightJp {
        builder.add_CharHeightJp(x);
      }
      if let Some(x) = args.CharHeightKr {
        builder.add_CharHeightKr(x);
      }
      if let Some(x) = args.BirthdayEn {
        builder.add_BirthdayEn(x);
      }
      if let Some(x) = args.BirthdayTw {
        builder.add_BirthdayTw(x);
      }
      if let Some(x) = args.BirthdayTh {
        builder.add_BirthdayTh(x);
      }
      if let Some(x) = args.BirthdayJp {
        builder.add_BirthdayJp(x);
      }
      if let Some(x) = args.BirthdayKr {
        builder.add_BirthdayKr(x);
      }
      if let Some(x) = args.BirthDay {
        builder.add_BirthDay(x);
      }
      if let Some(x) = args.CharacterAgeEn {
        builder.add_CharacterAgeEn(x);
      }
      if let Some(x) = args.CharacterAgeTw {
        builder.add_CharacterAgeTw(x);
      }
      if let Some(x) = args.CharacterAgeTh {
        builder.add_CharacterAgeTh(x);
      }
      if let Some(x) = args.CharacterAgeJp {
        builder.add_CharacterAgeJp(x);
      }
      if let Some(x) = args.CharacterAgeKr {
        builder.add_CharacterAgeKr(x);
      }
      if let Some(x) = args.SchoolYearEn {
        builder.add_SchoolYearEn(x);
      }
      if let Some(x) = args.SchoolYearTw {
        builder.add_SchoolYearTw(x);
      }
      if let Some(x) = args.SchoolYearTh {
        builder.add_SchoolYearTh(x);
      }
      if let Some(x) = args.SchoolYearJp {
        builder.add_SchoolYearJp(x);
      }
      if let Some(x) = args.SchoolYearKr {
        builder.add_SchoolYearKr(x);
      }
      if let Some(x) = args.PersonalNameRubyEn {
        builder.add_PersonalNameRubyEn(x);
      }
      if let Some(x) = args.PersonalNameEn {
        builder.add_PersonalNameEn(x);
      }
      if let Some(x) = args.FamilyNameRubyEn {
        builder.add_FamilyNameRubyEn(x);
      }
      if let Some(x) = args.FamilyNameEn {
        builder.add_FamilyNameEn(x);
      }
      if let Some(x) = args.PersonalNameRubyTw {
        builder.add_PersonalNameRubyTw(x);
      }
      if let Some(x) = args.PersonalNameTw {
        builder.add_PersonalNameTw(x);
      }
      if let Some(x) = args.FamilyNameRubyTw {
        builder.add_FamilyNameRubyTw(x);
      }
      if let Some(x) = args.FamilyNameTw {
        builder.add_FamilyNameTw(x);
      }
      if let Some(x) = args.PersonalNameRubyTh {
        builder.add_PersonalNameRubyTh(x);
      }
      if let Some(x) = args.PersonalNameTh {
        builder.add_PersonalNameTh(x);
      }
      if let Some(x) = args.FamilyNameRubyTh {
        builder.add_FamilyNameRubyTh(x);
      }
      if let Some(x) = args.FamilyNameTh {
        builder.add_FamilyNameTh(x);
      }
      if let Some(x) = args.PersonalNameRubyJp {
        builder.add_PersonalNameRubyJp(x);
      }
      if let Some(x) = args.PersonalNameJp {
        builder.add_PersonalNameJp(x);
      }
      if let Some(x) = args.FamilyNameRubyJp {
        builder.add_FamilyNameRubyJp(x);
      }
      if let Some(x) = args.FamilyNameJp {
        builder.add_FamilyNameJp(x);
      }
      if let Some(x) = args.PersonalNameRubyKr {
        builder.add_PersonalNameRubyKr(x);
      }
      if let Some(x) = args.PersonalNameKr {
        builder.add_PersonalNameKr(x);
      }
      if let Some(x) = args.FamilyNameRubyKr {
        builder.add_FamilyNameRubyKr(x);
      }
      if let Some(x) = args.FamilyNameKr {
        builder.add_FamilyNameKr(x);
      }
      if let Some(x) = args.FullNameEn {
        builder.add_FullNameEn(x);
      }
      if let Some(x) = args.FullNameTw {
        builder.add_FullNameTw(x);
      }
      if let Some(x) = args.FullNameTh {
        builder.add_FullNameTh(x);
      }
      if let Some(x) = args.FullNameJp {
        builder.add_FullNameJp(x);
      }
      if let Some(x) = args.FullNameKr {
        builder.add_FullNameKr(x);
      }
      if let Some(x) = args.StatusMessageEn {
        builder.add_StatusMessageEn(x);
      }
      if let Some(x) = args.StatusMessageTw {
        builder.add_StatusMessageTw(x);
      }
      if let Some(x) = args.StatusMessageTh {
        builder.add_StatusMessageTh(x);
      }
      if let Some(x) = args.StatusMessageJp {
        builder.add_StatusMessageJp(x);
      }
      if let Some(x) = args.StatusMessageKr {
        builder.add_StatusMessageKr(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> LocalizeCharProfileExcelT {
    let key = table_encryption_service::create_key(b"LocalizeCharProfile");
      let CharacterId = self.CharacterId();
    let StatusMessageKr = self.StatusMessageKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StatusMessageJp = self.StatusMessageJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StatusMessageTh = self.StatusMessageTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StatusMessageTw = self.StatusMessageTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StatusMessageEn = self.StatusMessageEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullNameKr = self.FullNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullNameJp = self.FullNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullNameTh = self.FullNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullNameTw = self.FullNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FullNameEn = self.FullNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameKr = self.FamilyNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameRubyKr = self.FamilyNameRubyKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameKr = self.PersonalNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameRubyKr = self.PersonalNameRubyKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameJp = self.FamilyNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameRubyJp = self.FamilyNameRubyJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameJp = self.PersonalNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameRubyJp = self.PersonalNameRubyJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameTh = self.FamilyNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameRubyTh = self.FamilyNameRubyTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameTh = self.PersonalNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameRubyTh = self.PersonalNameRubyTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameTw = self.FamilyNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameRubyTw = self.FamilyNameRubyTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameTw = self.PersonalNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameRubyTw = self.PersonalNameRubyTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameEn = self.FamilyNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FamilyNameRubyEn = self.FamilyNameRubyEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameEn = self.PersonalNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PersonalNameRubyEn = self.PersonalNameRubyEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SchoolYearKr = self.SchoolYearKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SchoolYearJp = self.SchoolYearJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SchoolYearTh = self.SchoolYearTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SchoolYearTw = self.SchoolYearTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SchoolYearEn = self.SchoolYearEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterAgeKr = self.CharacterAgeKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterAgeJp = self.CharacterAgeJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterAgeTh = self.CharacterAgeTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterAgeTw = self.CharacterAgeTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterAgeEn = self.CharacterAgeEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthDay = self.BirthDay().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthdayKr = self.BirthdayKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthdayJp = self.BirthdayJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthdayTh = self.BirthdayTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthdayTw = self.BirthdayTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BirthdayEn = self.BirthdayEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharHeightKr = self.CharHeightKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharHeightJp = self.CharHeightJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharHeightTh = self.CharHeightTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharHeightTw = self.CharHeightTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharHeightEn = self.CharHeightEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignerNameKr = self.DesignerNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignerNameJp = self.DesignerNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignerNameTh = self.DesignerNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignerNameTw = self.DesignerNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let DesignerNameEn = self.DesignerNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IllustratorNameKr = self.IllustratorNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IllustratorNameJp = self.IllustratorNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IllustratorNameTh = self.IllustratorNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IllustratorNameTw = self.IllustratorNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let IllustratorNameEn = self.IllustratorNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterVoiceKr = self.CharacterVoiceKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterVoiceJp = self.CharacterVoiceJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterVoiceTh = self.CharacterVoiceTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterVoiceTw = self.CharacterVoiceTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterVoiceEn = self.CharacterVoiceEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let KRCharacterVoiceKr = self.KRCharacterVoiceKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let KRCharacterVoiceTh = self.KRCharacterVoiceTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let KRCharacterVoiceTw = self.KRCharacterVoiceTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let KRCharacterVoiceEn = self.KRCharacterVoiceEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HobbyKr = self.HobbyKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HobbyJp = self.HobbyJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HobbyTh = self.HobbyTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HobbyTw = self.HobbyTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HobbyEn = self.HobbyEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponNameKr = self.WeaponNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponDescKr = self.WeaponDescKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponNameJp = self.WeaponNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponDescJp = self.WeaponDescJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponNameTh = self.WeaponNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponDescTh = self.WeaponDescTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponNameTw = self.WeaponNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponDescTw = self.WeaponDescTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponNameEn = self.WeaponNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let WeaponDescEn = self.WeaponDescEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProfileIntroductionKr = self.ProfileIntroductionKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProfileIntroductionJp = self.ProfileIntroductionJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProfileIntroductionTh = self.ProfileIntroductionTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProfileIntroductionTw = self.ProfileIntroductionTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ProfileIntroductionEn = self.ProfileIntroductionEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterSSRNewKr = self.CharacterSSRNewKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterSSRNewJp = self.CharacterSSRNewJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterSSRNewTh = self.CharacterSSRNewTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterSSRNewTw = self.CharacterSSRNewTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let CharacterSSRNewEn = self.CharacterSSRNewEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    LocalizeCharProfileExcelT {
      CharacterId,
      StatusMessageKr,
      StatusMessageJp,
      StatusMessageTh,
      StatusMessageTw,
      StatusMessageEn,
      FullNameKr,
      FullNameJp,
      FullNameTh,
      FullNameTw,
      FullNameEn,
      FamilyNameKr,
      FamilyNameRubyKr,
      PersonalNameKr,
      PersonalNameRubyKr,
      FamilyNameJp,
      FamilyNameRubyJp,
      PersonalNameJp,
      PersonalNameRubyJp,
      FamilyNameTh,
      FamilyNameRubyTh,
      PersonalNameTh,
      PersonalNameRubyTh,
      FamilyNameTw,
      FamilyNameRubyTw,
      PersonalNameTw,
      PersonalNameRubyTw,
      FamilyNameEn,
      FamilyNameRubyEn,
      PersonalNameEn,
      PersonalNameRubyEn,
      SchoolYearKr,
      SchoolYearJp,
      SchoolYearTh,
      SchoolYearTw,
      SchoolYearEn,
      CharacterAgeKr,
      CharacterAgeJp,
      CharacterAgeTh,
      CharacterAgeTw,
      CharacterAgeEn,
      BirthDay,
      BirthdayKr,
      BirthdayJp,
      BirthdayTh,
      BirthdayTw,
      BirthdayEn,
      CharHeightKr,
      CharHeightJp,
      CharHeightTh,
      CharHeightTw,
      CharHeightEn,
      DesignerNameKr,
      DesignerNameJp,
      DesignerNameTh,
      DesignerNameTw,
      DesignerNameEn,
      IllustratorNameKr,
      IllustratorNameJp,
      IllustratorNameTh,
      IllustratorNameTw,
      IllustratorNameEn,
      CharacterVoiceKr,
      CharacterVoiceJp,
      CharacterVoiceTh,
      CharacterVoiceTw,
      CharacterVoiceEn,
      KRCharacterVoiceKr,
      KRCharacterVoiceTh,
      KRCharacterVoiceTw,
      KRCharacterVoiceEn,
      HobbyKr,
      HobbyJp,
      HobbyTh,
      HobbyTw,
      HobbyEn,
      WeaponNameKr,
      WeaponDescKr,
      WeaponNameJp,
      WeaponDescJp,
      WeaponNameTh,
      WeaponDescTh,
      WeaponNameTw,
      WeaponDescTw,
      WeaponNameEn,
      WeaponDescEn,
      ProfileIntroductionKr,
      ProfileIntroductionJp,
      ProfileIntroductionTh,
      ProfileIntroductionTw,
      ProfileIntroductionEn,
      CharacterSSRNewKr,
      CharacterSSRNewJp,
      CharacterSSRNewTh,
      CharacterSSRNewTw,
      CharacterSSRNewEn,
    }
  }

  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeCharProfileExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatusMessageKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEKR, None)}
  }
  #[inline]
  pub fn StatusMessageJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEJP, None)}
  }
  #[inline]
  pub fn StatusMessageTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUSMESSAGETH, None)}
  }
  #[inline]
  pub fn StatusMessageTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUSMESSAGETW, None)}
  }
  #[inline]
  pub fn StatusMessageEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEEN, None)}
  }
  #[inline]
  pub fn FullNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULLNAMEKR, None)}
  }
  #[inline]
  pub fn FullNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULLNAMEJP, None)}
  }
  #[inline]
  pub fn FullNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULLNAMETH, None)}
  }
  #[inline]
  pub fn FullNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULLNAMETW, None)}
  }
  #[inline]
  pub fn FullNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULLNAMEEN, None)}
  }
  #[inline]
  pub fn FamilyNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMEKR, None)}
  }
  #[inline]
  pub fn FamilyNameRubyKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYKR, None)}
  }
  #[inline]
  pub fn PersonalNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMEKR, None)}
  }
  #[inline]
  pub fn PersonalNameRubyKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYKR, None)}
  }
  #[inline]
  pub fn FamilyNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMEJP, None)}
  }
  #[inline]
  pub fn FamilyNameRubyJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYJP, None)}
  }
  #[inline]
  pub fn PersonalNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMEJP, None)}
  }
  #[inline]
  pub fn PersonalNameRubyJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYJP, None)}
  }
  #[inline]
  pub fn FamilyNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMETH, None)}
  }
  #[inline]
  pub fn FamilyNameRubyTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYTH, None)}
  }
  #[inline]
  pub fn PersonalNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMETH, None)}
  }
  #[inline]
  pub fn PersonalNameRubyTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYTH, None)}
  }
  #[inline]
  pub fn FamilyNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMETW, None)}
  }
  #[inline]
  pub fn FamilyNameRubyTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYTW, None)}
  }
  #[inline]
  pub fn PersonalNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMETW, None)}
  }
  #[inline]
  pub fn PersonalNameRubyTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYTW, None)}
  }
  #[inline]
  pub fn FamilyNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMEEN, None)}
  }
  #[inline]
  pub fn FamilyNameRubyEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYEN, None)}
  }
  #[inline]
  pub fn PersonalNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMEEN, None)}
  }
  #[inline]
  pub fn PersonalNameRubyEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYEN, None)}
  }
  #[inline]
  pub fn SchoolYearKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOLYEARKR, None)}
  }
  #[inline]
  pub fn SchoolYearJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOLYEARJP, None)}
  }
  #[inline]
  pub fn SchoolYearTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOLYEARTH, None)}
  }
  #[inline]
  pub fn SchoolYearTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOLYEARTW, None)}
  }
  #[inline]
  pub fn SchoolYearEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOLYEAREN, None)}
  }
  #[inline]
  pub fn CharacterAgeKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERAGEKR, None)}
  }
  #[inline]
  pub fn CharacterAgeJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERAGEJP, None)}
  }
  #[inline]
  pub fn CharacterAgeTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERAGETH, None)}
  }
  #[inline]
  pub fn CharacterAgeTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERAGETW, None)}
  }
  #[inline]
  pub fn CharacterAgeEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERAGEEN, None)}
  }
  #[inline]
  pub fn BirthDay(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAY, None)}
  }
  #[inline]
  pub fn BirthdayKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAYKR, None)}
  }
  #[inline]
  pub fn BirthdayJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAYJP, None)}
  }
  #[inline]
  pub fn BirthdayTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAYTH, None)}
  }
  #[inline]
  pub fn BirthdayTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAYTW, None)}
  }
  #[inline]
  pub fn BirthdayEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAYEN, None)}
  }
  #[inline]
  pub fn CharHeightKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARHEIGHTKR, None)}
  }
  #[inline]
  pub fn CharHeightJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARHEIGHTJP, None)}
  }
  #[inline]
  pub fn CharHeightTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARHEIGHTTH, None)}
  }
  #[inline]
  pub fn CharHeightTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARHEIGHTTW, None)}
  }
  #[inline]
  pub fn CharHeightEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARHEIGHTEN, None)}
  }
  #[inline]
  pub fn DesignerNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEKR, None)}
  }
  #[inline]
  pub fn DesignerNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEJP, None)}
  }
  #[inline]
  pub fn DesignerNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNERNAMETH, None)}
  }
  #[inline]
  pub fn DesignerNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNERNAMETW, None)}
  }
  #[inline]
  pub fn DesignerNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEEN, None)}
  }
  #[inline]
  pub fn IllustratorNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEKR, None)}
  }
  #[inline]
  pub fn IllustratorNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEJP, None)}
  }
  #[inline]
  pub fn IllustratorNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMETH, None)}
  }
  #[inline]
  pub fn IllustratorNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMETW, None)}
  }
  #[inline]
  pub fn IllustratorNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEEN, None)}
  }
  #[inline]
  pub fn CharacterVoiceKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEKR, None)}
  }
  #[inline]
  pub fn CharacterVoiceJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEJP, None)}
  }
  #[inline]
  pub fn CharacterVoiceTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERVOICETH, None)}
  }
  #[inline]
  pub fn CharacterVoiceTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERVOICETW, None)}
  }
  #[inline]
  pub fn CharacterVoiceEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEEN, None)}
  }
  #[inline]
  pub fn KRCharacterVoiceKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICEKR, None)}
  }
  #[inline]
  pub fn KRCharacterVoiceTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICETH, None)}
  }
  #[inline]
  pub fn KRCharacterVoiceTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICETW, None)}
  }
  #[inline]
  pub fn KRCharacterVoiceEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICEEN, None)}
  }
  #[inline]
  pub fn HobbyKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBYKR, None)}
  }
  #[inline]
  pub fn HobbyJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBYJP, None)}
  }
  #[inline]
  pub fn HobbyTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBYTH, None)}
  }
  #[inline]
  pub fn HobbyTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBYTW, None)}
  }
  #[inline]
  pub fn HobbyEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBYEN, None)}
  }
  #[inline]
  pub fn WeaponNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONNAMEKR, None)}
  }
  #[inline]
  pub fn WeaponDescKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONDESCKR, None)}
  }
  #[inline]
  pub fn WeaponNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONNAMEJP, None)}
  }
  #[inline]
  pub fn WeaponDescJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONDESCJP, None)}
  }
  #[inline]
  pub fn WeaponNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONNAMETH, None)}
  }
  #[inline]
  pub fn WeaponDescTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONDESCTH, None)}
  }
  #[inline]
  pub fn WeaponNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONNAMETW, None)}
  }
  #[inline]
  pub fn WeaponDescTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONDESCTW, None)}
  }
  #[inline]
  pub fn WeaponNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONNAMEEN, None)}
  }
  #[inline]
  pub fn WeaponDescEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPONDESCEN, None)}
  }
  #[inline]
  pub fn ProfileIntroductionKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONKR, None)}
  }
  #[inline]
  pub fn ProfileIntroductionJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONJP, None)}
  }
  #[inline]
  pub fn ProfileIntroductionTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONTH, None)}
  }
  #[inline]
  pub fn ProfileIntroductionTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONTW, None)}
  }
  #[inline]
  pub fn ProfileIntroductionEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONEN, None)}
  }
  #[inline]
  pub fn CharacterSSRNewKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWKR, None)}
  }
  #[inline]
  pub fn CharacterSSRNewJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWJP, None)}
  }
  #[inline]
  pub fn CharacterSSRNewTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWTH, None)}
  }
  #[inline]
  pub fn CharacterSSRNewTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWTW, None)}
  }
  #[inline]
  pub fn CharacterSSRNewEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWEN, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeCharProfileExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatusMessageKr", Self::VT_STATUSMESSAGEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatusMessageJp", Self::VT_STATUSMESSAGEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatusMessageTh", Self::VT_STATUSMESSAGETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatusMessageTw", Self::VT_STATUSMESSAGETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StatusMessageEn", Self::VT_STATUSMESSAGEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullNameKr", Self::VT_FULLNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullNameJp", Self::VT_FULLNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullNameTh", Self::VT_FULLNAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullNameTw", Self::VT_FULLNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FullNameEn", Self::VT_FULLNAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameKr", Self::VT_FAMILYNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameRubyKr", Self::VT_FAMILYNAMERUBYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameKr", Self::VT_PERSONALNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameRubyKr", Self::VT_PERSONALNAMERUBYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameJp", Self::VT_FAMILYNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameRubyJp", Self::VT_FAMILYNAMERUBYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameJp", Self::VT_PERSONALNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameRubyJp", Self::VT_PERSONALNAMERUBYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameTh", Self::VT_FAMILYNAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameRubyTh", Self::VT_FAMILYNAMERUBYTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameTh", Self::VT_PERSONALNAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameRubyTh", Self::VT_PERSONALNAMERUBYTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameTw", Self::VT_FAMILYNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameRubyTw", Self::VT_FAMILYNAMERUBYTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameTw", Self::VT_PERSONALNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameRubyTw", Self::VT_PERSONALNAMERUBYTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameEn", Self::VT_FAMILYNAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FamilyNameRubyEn", Self::VT_FAMILYNAMERUBYEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameEn", Self::VT_PERSONALNAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PersonalNameRubyEn", Self::VT_PERSONALNAMERUBYEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SchoolYearKr", Self::VT_SCHOOLYEARKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SchoolYearJp", Self::VT_SCHOOLYEARJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SchoolYearTh", Self::VT_SCHOOLYEARTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SchoolYearTw", Self::VT_SCHOOLYEARTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SchoolYearEn", Self::VT_SCHOOLYEAREN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterAgeKr", Self::VT_CHARACTERAGEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterAgeJp", Self::VT_CHARACTERAGEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterAgeTh", Self::VT_CHARACTERAGETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterAgeTw", Self::VT_CHARACTERAGETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterAgeEn", Self::VT_CHARACTERAGEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthDay", Self::VT_BIRTHDAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthdayKr", Self::VT_BIRTHDAYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthdayJp", Self::VT_BIRTHDAYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthdayTh", Self::VT_BIRTHDAYTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthdayTw", Self::VT_BIRTHDAYTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BirthdayEn", Self::VT_BIRTHDAYEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharHeightKr", Self::VT_CHARHEIGHTKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharHeightJp", Self::VT_CHARHEIGHTJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharHeightTh", Self::VT_CHARHEIGHTTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharHeightTw", Self::VT_CHARHEIGHTTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharHeightEn", Self::VT_CHARHEIGHTEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignerNameKr", Self::VT_DESIGNERNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignerNameJp", Self::VT_DESIGNERNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignerNameTh", Self::VT_DESIGNERNAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignerNameTw", Self::VT_DESIGNERNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DesignerNameEn", Self::VT_DESIGNERNAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IllustratorNameKr", Self::VT_ILLUSTRATORNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IllustratorNameJp", Self::VT_ILLUSTRATORNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IllustratorNameTh", Self::VT_ILLUSTRATORNAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IllustratorNameTw", Self::VT_ILLUSTRATORNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IllustratorNameEn", Self::VT_ILLUSTRATORNAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterVoiceKr", Self::VT_CHARACTERVOICEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterVoiceJp", Self::VT_CHARACTERVOICEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterVoiceTh", Self::VT_CHARACTERVOICETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterVoiceTw", Self::VT_CHARACTERVOICETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterVoiceEn", Self::VT_CHARACTERVOICEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("KRCharacterVoiceKr", Self::VT_KRCHARACTERVOICEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("KRCharacterVoiceTh", Self::VT_KRCHARACTERVOICETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("KRCharacterVoiceTw", Self::VT_KRCHARACTERVOICETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("KRCharacterVoiceEn", Self::VT_KRCHARACTERVOICEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HobbyKr", Self::VT_HOBBYKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HobbyJp", Self::VT_HOBBYJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HobbyTh", Self::VT_HOBBYTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HobbyTw", Self::VT_HOBBYTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HobbyEn", Self::VT_HOBBYEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponNameKr", Self::VT_WEAPONNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponDescKr", Self::VT_WEAPONDESCKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponNameJp", Self::VT_WEAPONNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponDescJp", Self::VT_WEAPONDESCJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponNameTh", Self::VT_WEAPONNAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponDescTh", Self::VT_WEAPONDESCTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponNameTw", Self::VT_WEAPONNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponDescTw", Self::VT_WEAPONDESCTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponNameEn", Self::VT_WEAPONNAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("WeaponDescEn", Self::VT_WEAPONDESCEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProfileIntroductionKr", Self::VT_PROFILEINTRODUCTIONKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProfileIntroductionJp", Self::VT_PROFILEINTRODUCTIONJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProfileIntroductionTh", Self::VT_PROFILEINTRODUCTIONTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProfileIntroductionTw", Self::VT_PROFILEINTRODUCTIONTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ProfileIntroductionEn", Self::VT_PROFILEINTRODUCTIONEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterSSRNewKr", Self::VT_CHARACTERSSRNEWKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterSSRNewJp", Self::VT_CHARACTERSSRNEWJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterSSRNewTh", Self::VT_CHARACTERSSRNEWTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterSSRNewTw", Self::VT_CHARACTERSSRNEWTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CharacterSSRNewEn", Self::VT_CHARACTERSSRNEWEN, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeCharProfileExcelArgs<'a> {
    pub CharacterId: i64,
    pub StatusMessageKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StatusMessageJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StatusMessageTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StatusMessageTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StatusMessageEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FullNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameRubyKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameRubyKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameRubyJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameRubyJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameRubyTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameRubyTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameRubyTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameRubyTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FamilyNameRubyEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PersonalNameRubyEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SchoolYearKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SchoolYearJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SchoolYearTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SchoolYearTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SchoolYearEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterAgeKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterAgeJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterAgeTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterAgeTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterAgeEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthDay: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthdayKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthdayJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthdayTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthdayTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BirthdayEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharHeightKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharHeightJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharHeightTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharHeightTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharHeightEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignerNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignerNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignerNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignerNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DesignerNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IllustratorNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IllustratorNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IllustratorNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IllustratorNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IllustratorNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterVoiceEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub KRCharacterVoiceKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub KRCharacterVoiceTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub KRCharacterVoiceTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub KRCharacterVoiceEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HobbyKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HobbyJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HobbyTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HobbyTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HobbyEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponDescKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponDescJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponDescTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponDescTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub WeaponDescEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProfileIntroductionKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProfileIntroductionJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProfileIntroductionTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProfileIntroductionTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ProfileIntroductionEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterSSRNewKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterSSRNewJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterSSRNewTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterSSRNewTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub CharacterSSRNewEn: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocalizeCharProfileExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeCharProfileExcelArgs {
      CharacterId: 0,
      StatusMessageKr: None,
      StatusMessageJp: None,
      StatusMessageTh: None,
      StatusMessageTw: None,
      StatusMessageEn: None,
      FullNameKr: None,
      FullNameJp: None,
      FullNameTh: None,
      FullNameTw: None,
      FullNameEn: None,
      FamilyNameKr: None,
      FamilyNameRubyKr: None,
      PersonalNameKr: None,
      PersonalNameRubyKr: None,
      FamilyNameJp: None,
      FamilyNameRubyJp: None,
      PersonalNameJp: None,
      PersonalNameRubyJp: None,
      FamilyNameTh: None,
      FamilyNameRubyTh: None,
      PersonalNameTh: None,
      PersonalNameRubyTh: None,
      FamilyNameTw: None,
      FamilyNameRubyTw: None,
      PersonalNameTw: None,
      PersonalNameRubyTw: None,
      FamilyNameEn: None,
      FamilyNameRubyEn: None,
      PersonalNameEn: None,
      PersonalNameRubyEn: None,
      SchoolYearKr: None,
      SchoolYearJp: None,
      SchoolYearTh: None,
      SchoolYearTw: None,
      SchoolYearEn: None,
      CharacterAgeKr: None,
      CharacterAgeJp: None,
      CharacterAgeTh: None,
      CharacterAgeTw: None,
      CharacterAgeEn: None,
      BirthDay: None,
      BirthdayKr: None,
      BirthdayJp: None,
      BirthdayTh: None,
      BirthdayTw: None,
      BirthdayEn: None,
      CharHeightKr: None,
      CharHeightJp: None,
      CharHeightTh: None,
      CharHeightTw: None,
      CharHeightEn: None,
      DesignerNameKr: None,
      DesignerNameJp: None,
      DesignerNameTh: None,
      DesignerNameTw: None,
      DesignerNameEn: None,
      IllustratorNameKr: None,
      IllustratorNameJp: None,
      IllustratorNameTh: None,
      IllustratorNameTw: None,
      IllustratorNameEn: None,
      CharacterVoiceKr: None,
      CharacterVoiceJp: None,
      CharacterVoiceTh: None,
      CharacterVoiceTw: None,
      CharacterVoiceEn: None,
      KRCharacterVoiceKr: None,
      KRCharacterVoiceTh: None,
      KRCharacterVoiceTw: None,
      KRCharacterVoiceEn: None,
      HobbyKr: None,
      HobbyJp: None,
      HobbyTh: None,
      HobbyTw: None,
      HobbyEn: None,
      WeaponNameKr: None,
      WeaponDescKr: None,
      WeaponNameJp: None,
      WeaponDescJp: None,
      WeaponNameTh: None,
      WeaponDescTh: None,
      WeaponNameTw: None,
      WeaponDescTw: None,
      WeaponNameEn: None,
      WeaponDescEn: None,
      ProfileIntroductionKr: None,
      ProfileIntroductionJp: None,
      ProfileIntroductionTh: None,
      ProfileIntroductionTw: None,
      ProfileIntroductionEn: None,
      CharacterSSRNewKr: None,
      CharacterSSRNewJp: None,
      CharacterSSRNewTh: None,
      CharacterSSRNewTw: None,
      CharacterSSRNewEn: None,
    }
  }
}

impl Serialize for LocalizeCharProfileExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LocalizeCharProfileExcel", 96)?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.StatusMessageKr() {
        s.serialize_field("StatusMessageKr", &f)?;
      } else {
        s.skip_field("StatusMessageKr")?;
      }
      if let Some(f) = self.StatusMessageJp() {
        s.serialize_field("StatusMessageJp", &f)?;
      } else {
        s.skip_field("StatusMessageJp")?;
      }
      if let Some(f) = self.StatusMessageTh() {
        s.serialize_field("StatusMessageTh", &f)?;
      } else {
        s.skip_field("StatusMessageTh")?;
      }
      if let Some(f) = self.StatusMessageTw() {
        s.serialize_field("StatusMessageTw", &f)?;
      } else {
        s.skip_field("StatusMessageTw")?;
      }
      if let Some(f) = self.StatusMessageEn() {
        s.serialize_field("StatusMessageEn", &f)?;
      } else {
        s.skip_field("StatusMessageEn")?;
      }
      if let Some(f) = self.FullNameKr() {
        s.serialize_field("FullNameKr", &f)?;
      } else {
        s.skip_field("FullNameKr")?;
      }
      if let Some(f) = self.FullNameJp() {
        s.serialize_field("FullNameJp", &f)?;
      } else {
        s.skip_field("FullNameJp")?;
      }
      if let Some(f) = self.FullNameTh() {
        s.serialize_field("FullNameTh", &f)?;
      } else {
        s.skip_field("FullNameTh")?;
      }
      if let Some(f) = self.FullNameTw() {
        s.serialize_field("FullNameTw", &f)?;
      } else {
        s.skip_field("FullNameTw")?;
      }
      if let Some(f) = self.FullNameEn() {
        s.serialize_field("FullNameEn", &f)?;
      } else {
        s.skip_field("FullNameEn")?;
      }
      if let Some(f) = self.FamilyNameKr() {
        s.serialize_field("FamilyNameKr", &f)?;
      } else {
        s.skip_field("FamilyNameKr")?;
      }
      if let Some(f) = self.FamilyNameRubyKr() {
        s.serialize_field("FamilyNameRubyKr", &f)?;
      } else {
        s.skip_field("FamilyNameRubyKr")?;
      }
      if let Some(f) = self.PersonalNameKr() {
        s.serialize_field("PersonalNameKr", &f)?;
      } else {
        s.skip_field("PersonalNameKr")?;
      }
      if let Some(f) = self.PersonalNameRubyKr() {
        s.serialize_field("PersonalNameRubyKr", &f)?;
      } else {
        s.skip_field("PersonalNameRubyKr")?;
      }
      if let Some(f) = self.FamilyNameJp() {
        s.serialize_field("FamilyNameJp", &f)?;
      } else {
        s.skip_field("FamilyNameJp")?;
      }
      if let Some(f) = self.FamilyNameRubyJp() {
        s.serialize_field("FamilyNameRubyJp", &f)?;
      } else {
        s.skip_field("FamilyNameRubyJp")?;
      }
      if let Some(f) = self.PersonalNameJp() {
        s.serialize_field("PersonalNameJp", &f)?;
      } else {
        s.skip_field("PersonalNameJp")?;
      }
      if let Some(f) = self.PersonalNameRubyJp() {
        s.serialize_field("PersonalNameRubyJp", &f)?;
      } else {
        s.skip_field("PersonalNameRubyJp")?;
      }
      if let Some(f) = self.FamilyNameTh() {
        s.serialize_field("FamilyNameTh", &f)?;
      } else {
        s.skip_field("FamilyNameTh")?;
      }
      if let Some(f) = self.FamilyNameRubyTh() {
        s.serialize_field("FamilyNameRubyTh", &f)?;
      } else {
        s.skip_field("FamilyNameRubyTh")?;
      }
      if let Some(f) = self.PersonalNameTh() {
        s.serialize_field("PersonalNameTh", &f)?;
      } else {
        s.skip_field("PersonalNameTh")?;
      }
      if let Some(f) = self.PersonalNameRubyTh() {
        s.serialize_field("PersonalNameRubyTh", &f)?;
      } else {
        s.skip_field("PersonalNameRubyTh")?;
      }
      if let Some(f) = self.FamilyNameTw() {
        s.serialize_field("FamilyNameTw", &f)?;
      } else {
        s.skip_field("FamilyNameTw")?;
      }
      if let Some(f) = self.FamilyNameRubyTw() {
        s.serialize_field("FamilyNameRubyTw", &f)?;
      } else {
        s.skip_field("FamilyNameRubyTw")?;
      }
      if let Some(f) = self.PersonalNameTw() {
        s.serialize_field("PersonalNameTw", &f)?;
      } else {
        s.skip_field("PersonalNameTw")?;
      }
      if let Some(f) = self.PersonalNameRubyTw() {
        s.serialize_field("PersonalNameRubyTw", &f)?;
      } else {
        s.skip_field("PersonalNameRubyTw")?;
      }
      if let Some(f) = self.FamilyNameEn() {
        s.serialize_field("FamilyNameEn", &f)?;
      } else {
        s.skip_field("FamilyNameEn")?;
      }
      if let Some(f) = self.FamilyNameRubyEn() {
        s.serialize_field("FamilyNameRubyEn", &f)?;
      } else {
        s.skip_field("FamilyNameRubyEn")?;
      }
      if let Some(f) = self.PersonalNameEn() {
        s.serialize_field("PersonalNameEn", &f)?;
      } else {
        s.skip_field("PersonalNameEn")?;
      }
      if let Some(f) = self.PersonalNameRubyEn() {
        s.serialize_field("PersonalNameRubyEn", &f)?;
      } else {
        s.skip_field("PersonalNameRubyEn")?;
      }
      if let Some(f) = self.SchoolYearKr() {
        s.serialize_field("SchoolYearKr", &f)?;
      } else {
        s.skip_field("SchoolYearKr")?;
      }
      if let Some(f) = self.SchoolYearJp() {
        s.serialize_field("SchoolYearJp", &f)?;
      } else {
        s.skip_field("SchoolYearJp")?;
      }
      if let Some(f) = self.SchoolYearTh() {
        s.serialize_field("SchoolYearTh", &f)?;
      } else {
        s.skip_field("SchoolYearTh")?;
      }
      if let Some(f) = self.SchoolYearTw() {
        s.serialize_field("SchoolYearTw", &f)?;
      } else {
        s.skip_field("SchoolYearTw")?;
      }
      if let Some(f) = self.SchoolYearEn() {
        s.serialize_field("SchoolYearEn", &f)?;
      } else {
        s.skip_field("SchoolYearEn")?;
      }
      if let Some(f) = self.CharacterAgeKr() {
        s.serialize_field("CharacterAgeKr", &f)?;
      } else {
        s.skip_field("CharacterAgeKr")?;
      }
      if let Some(f) = self.CharacterAgeJp() {
        s.serialize_field("CharacterAgeJp", &f)?;
      } else {
        s.skip_field("CharacterAgeJp")?;
      }
      if let Some(f) = self.CharacterAgeTh() {
        s.serialize_field("CharacterAgeTh", &f)?;
      } else {
        s.skip_field("CharacterAgeTh")?;
      }
      if let Some(f) = self.CharacterAgeTw() {
        s.serialize_field("CharacterAgeTw", &f)?;
      } else {
        s.skip_field("CharacterAgeTw")?;
      }
      if let Some(f) = self.CharacterAgeEn() {
        s.serialize_field("CharacterAgeEn", &f)?;
      } else {
        s.skip_field("CharacterAgeEn")?;
      }
      if let Some(f) = self.BirthDay() {
        s.serialize_field("BirthDay", &f)?;
      } else {
        s.skip_field("BirthDay")?;
      }
      if let Some(f) = self.BirthdayKr() {
        s.serialize_field("BirthdayKr", &f)?;
      } else {
        s.skip_field("BirthdayKr")?;
      }
      if let Some(f) = self.BirthdayJp() {
        s.serialize_field("BirthdayJp", &f)?;
      } else {
        s.skip_field("BirthdayJp")?;
      }
      if let Some(f) = self.BirthdayTh() {
        s.serialize_field("BirthdayTh", &f)?;
      } else {
        s.skip_field("BirthdayTh")?;
      }
      if let Some(f) = self.BirthdayTw() {
        s.serialize_field("BirthdayTw", &f)?;
      } else {
        s.skip_field("BirthdayTw")?;
      }
      if let Some(f) = self.BirthdayEn() {
        s.serialize_field("BirthdayEn", &f)?;
      } else {
        s.skip_field("BirthdayEn")?;
      }
      if let Some(f) = self.CharHeightKr() {
        s.serialize_field("CharHeightKr", &f)?;
      } else {
        s.skip_field("CharHeightKr")?;
      }
      if let Some(f) = self.CharHeightJp() {
        s.serialize_field("CharHeightJp", &f)?;
      } else {
        s.skip_field("CharHeightJp")?;
      }
      if let Some(f) = self.CharHeightTh() {
        s.serialize_field("CharHeightTh", &f)?;
      } else {
        s.skip_field("CharHeightTh")?;
      }
      if let Some(f) = self.CharHeightTw() {
        s.serialize_field("CharHeightTw", &f)?;
      } else {
        s.skip_field("CharHeightTw")?;
      }
      if let Some(f) = self.CharHeightEn() {
        s.serialize_field("CharHeightEn", &f)?;
      } else {
        s.skip_field("CharHeightEn")?;
      }
      if let Some(f) = self.DesignerNameKr() {
        s.serialize_field("DesignerNameKr", &f)?;
      } else {
        s.skip_field("DesignerNameKr")?;
      }
      if let Some(f) = self.DesignerNameJp() {
        s.serialize_field("DesignerNameJp", &f)?;
      } else {
        s.skip_field("DesignerNameJp")?;
      }
      if let Some(f) = self.DesignerNameTh() {
        s.serialize_field("DesignerNameTh", &f)?;
      } else {
        s.skip_field("DesignerNameTh")?;
      }
      if let Some(f) = self.DesignerNameTw() {
        s.serialize_field("DesignerNameTw", &f)?;
      } else {
        s.skip_field("DesignerNameTw")?;
      }
      if let Some(f) = self.DesignerNameEn() {
        s.serialize_field("DesignerNameEn", &f)?;
      } else {
        s.skip_field("DesignerNameEn")?;
      }
      if let Some(f) = self.IllustratorNameKr() {
        s.serialize_field("IllustratorNameKr", &f)?;
      } else {
        s.skip_field("IllustratorNameKr")?;
      }
      if let Some(f) = self.IllustratorNameJp() {
        s.serialize_field("IllustratorNameJp", &f)?;
      } else {
        s.skip_field("IllustratorNameJp")?;
      }
      if let Some(f) = self.IllustratorNameTh() {
        s.serialize_field("IllustratorNameTh", &f)?;
      } else {
        s.skip_field("IllustratorNameTh")?;
      }
      if let Some(f) = self.IllustratorNameTw() {
        s.serialize_field("IllustratorNameTw", &f)?;
      } else {
        s.skip_field("IllustratorNameTw")?;
      }
      if let Some(f) = self.IllustratorNameEn() {
        s.serialize_field("IllustratorNameEn", &f)?;
      } else {
        s.skip_field("IllustratorNameEn")?;
      }
      if let Some(f) = self.CharacterVoiceKr() {
        s.serialize_field("CharacterVoiceKr", &f)?;
      } else {
        s.skip_field("CharacterVoiceKr")?;
      }
      if let Some(f) = self.CharacterVoiceJp() {
        s.serialize_field("CharacterVoiceJp", &f)?;
      } else {
        s.skip_field("CharacterVoiceJp")?;
      }
      if let Some(f) = self.CharacterVoiceTh() {
        s.serialize_field("CharacterVoiceTh", &f)?;
      } else {
        s.skip_field("CharacterVoiceTh")?;
      }
      if let Some(f) = self.CharacterVoiceTw() {
        s.serialize_field("CharacterVoiceTw", &f)?;
      } else {
        s.skip_field("CharacterVoiceTw")?;
      }
      if let Some(f) = self.CharacterVoiceEn() {
        s.serialize_field("CharacterVoiceEn", &f)?;
      } else {
        s.skip_field("CharacterVoiceEn")?;
      }
      if let Some(f) = self.KRCharacterVoiceKr() {
        s.serialize_field("KRCharacterVoiceKr", &f)?;
      } else {
        s.skip_field("KRCharacterVoiceKr")?;
      }
      if let Some(f) = self.KRCharacterVoiceTh() {
        s.serialize_field("KRCharacterVoiceTh", &f)?;
      } else {
        s.skip_field("KRCharacterVoiceTh")?;
      }
      if let Some(f) = self.KRCharacterVoiceTw() {
        s.serialize_field("KRCharacterVoiceTw", &f)?;
      } else {
        s.skip_field("KRCharacterVoiceTw")?;
      }
      if let Some(f) = self.KRCharacterVoiceEn() {
        s.serialize_field("KRCharacterVoiceEn", &f)?;
      } else {
        s.skip_field("KRCharacterVoiceEn")?;
      }
      if let Some(f) = self.HobbyKr() {
        s.serialize_field("HobbyKr", &f)?;
      } else {
        s.skip_field("HobbyKr")?;
      }
      if let Some(f) = self.HobbyJp() {
        s.serialize_field("HobbyJp", &f)?;
      } else {
        s.skip_field("HobbyJp")?;
      }
      if let Some(f) = self.HobbyTh() {
        s.serialize_field("HobbyTh", &f)?;
      } else {
        s.skip_field("HobbyTh")?;
      }
      if let Some(f) = self.HobbyTw() {
        s.serialize_field("HobbyTw", &f)?;
      } else {
        s.skip_field("HobbyTw")?;
      }
      if let Some(f) = self.HobbyEn() {
        s.serialize_field("HobbyEn", &f)?;
      } else {
        s.skip_field("HobbyEn")?;
      }
      if let Some(f) = self.WeaponNameKr() {
        s.serialize_field("WeaponNameKr", &f)?;
      } else {
        s.skip_field("WeaponNameKr")?;
      }
      if let Some(f) = self.WeaponDescKr() {
        s.serialize_field("WeaponDescKr", &f)?;
      } else {
        s.skip_field("WeaponDescKr")?;
      }
      if let Some(f) = self.WeaponNameJp() {
        s.serialize_field("WeaponNameJp", &f)?;
      } else {
        s.skip_field("WeaponNameJp")?;
      }
      if let Some(f) = self.WeaponDescJp() {
        s.serialize_field("WeaponDescJp", &f)?;
      } else {
        s.skip_field("WeaponDescJp")?;
      }
      if let Some(f) = self.WeaponNameTh() {
        s.serialize_field("WeaponNameTh", &f)?;
      } else {
        s.skip_field("WeaponNameTh")?;
      }
      if let Some(f) = self.WeaponDescTh() {
        s.serialize_field("WeaponDescTh", &f)?;
      } else {
        s.skip_field("WeaponDescTh")?;
      }
      if let Some(f) = self.WeaponNameTw() {
        s.serialize_field("WeaponNameTw", &f)?;
      } else {
        s.skip_field("WeaponNameTw")?;
      }
      if let Some(f) = self.WeaponDescTw() {
        s.serialize_field("WeaponDescTw", &f)?;
      } else {
        s.skip_field("WeaponDescTw")?;
      }
      if let Some(f) = self.WeaponNameEn() {
        s.serialize_field("WeaponNameEn", &f)?;
      } else {
        s.skip_field("WeaponNameEn")?;
      }
      if let Some(f) = self.WeaponDescEn() {
        s.serialize_field("WeaponDescEn", &f)?;
      } else {
        s.skip_field("WeaponDescEn")?;
      }
      if let Some(f) = self.ProfileIntroductionKr() {
        s.serialize_field("ProfileIntroductionKr", &f)?;
      } else {
        s.skip_field("ProfileIntroductionKr")?;
      }
      if let Some(f) = self.ProfileIntroductionJp() {
        s.serialize_field("ProfileIntroductionJp", &f)?;
      } else {
        s.skip_field("ProfileIntroductionJp")?;
      }
      if let Some(f) = self.ProfileIntroductionTh() {
        s.serialize_field("ProfileIntroductionTh", &f)?;
      } else {
        s.skip_field("ProfileIntroductionTh")?;
      }
      if let Some(f) = self.ProfileIntroductionTw() {
        s.serialize_field("ProfileIntroductionTw", &f)?;
      } else {
        s.skip_field("ProfileIntroductionTw")?;
      }
      if let Some(f) = self.ProfileIntroductionEn() {
        s.serialize_field("ProfileIntroductionEn", &f)?;
      } else {
        s.skip_field("ProfileIntroductionEn")?;
      }
      if let Some(f) = self.CharacterSSRNewKr() {
        s.serialize_field("CharacterSSRNewKr", &f)?;
      } else {
        s.skip_field("CharacterSSRNewKr")?;
      }
      if let Some(f) = self.CharacterSSRNewJp() {
        s.serialize_field("CharacterSSRNewJp", &f)?;
      } else {
        s.skip_field("CharacterSSRNewJp")?;
      }
      if let Some(f) = self.CharacterSSRNewTh() {
        s.serialize_field("CharacterSSRNewTh", &f)?;
      } else {
        s.skip_field("CharacterSSRNewTh")?;
      }
      if let Some(f) = self.CharacterSSRNewTw() {
        s.serialize_field("CharacterSSRNewTw", &f)?;
      } else {
        s.skip_field("CharacterSSRNewTw")?;
      }
      if let Some(f) = self.CharacterSSRNewEn() {
        s.serialize_field("CharacterSSRNewEn", &f)?;
      } else {
        s.skip_field("CharacterSSRNewEn")?;
      }
    s.end()
  }
}

pub struct LocalizeCharProfileExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeCharProfileExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(LocalizeCharProfileExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_StatusMessageKr(&mut self, StatusMessageKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEKR, StatusMessageKr);
  }
  #[inline]
  pub fn add_StatusMessageJp(&mut self, StatusMessageJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEJP, StatusMessageJp);
  }
  #[inline]
  pub fn add_StatusMessageTh(&mut self, StatusMessageTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUSMESSAGETH, StatusMessageTh);
  }
  #[inline]
  pub fn add_StatusMessageTw(&mut self, StatusMessageTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUSMESSAGETW, StatusMessageTw);
  }
  #[inline]
  pub fn add_StatusMessageEn(&mut self, StatusMessageEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUSMESSAGEEN, StatusMessageEn);
  }
  #[inline]
  pub fn add_FullNameKr(&mut self, FullNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULLNAMEKR, FullNameKr);
  }
  #[inline]
  pub fn add_FullNameJp(&mut self, FullNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULLNAMEJP, FullNameJp);
  }
  #[inline]
  pub fn add_FullNameTh(&mut self, FullNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULLNAMETH, FullNameTh);
  }
  #[inline]
  pub fn add_FullNameTw(&mut self, FullNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULLNAMETW, FullNameTw);
  }
  #[inline]
  pub fn add_FullNameEn(&mut self, FullNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULLNAMEEN, FullNameEn);
  }
  #[inline]
  pub fn add_FamilyNameKr(&mut self, FamilyNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMEKR, FamilyNameKr);
  }
  #[inline]
  pub fn add_FamilyNameRubyKr(&mut self, FamilyNameRubyKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYKR, FamilyNameRubyKr);
  }
  #[inline]
  pub fn add_PersonalNameKr(&mut self, PersonalNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMEKR, PersonalNameKr);
  }
  #[inline]
  pub fn add_PersonalNameRubyKr(&mut self, PersonalNameRubyKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYKR, PersonalNameRubyKr);
  }
  #[inline]
  pub fn add_FamilyNameJp(&mut self, FamilyNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMEJP, FamilyNameJp);
  }
  #[inline]
  pub fn add_FamilyNameRubyJp(&mut self, FamilyNameRubyJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYJP, FamilyNameRubyJp);
  }
  #[inline]
  pub fn add_PersonalNameJp(&mut self, PersonalNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMEJP, PersonalNameJp);
  }
  #[inline]
  pub fn add_PersonalNameRubyJp(&mut self, PersonalNameRubyJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYJP, PersonalNameRubyJp);
  }
  #[inline]
  pub fn add_FamilyNameTh(&mut self, FamilyNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMETH, FamilyNameTh);
  }
  #[inline]
  pub fn add_FamilyNameRubyTh(&mut self, FamilyNameRubyTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYTH, FamilyNameRubyTh);
  }
  #[inline]
  pub fn add_PersonalNameTh(&mut self, PersonalNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMETH, PersonalNameTh);
  }
  #[inline]
  pub fn add_PersonalNameRubyTh(&mut self, PersonalNameRubyTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYTH, PersonalNameRubyTh);
  }
  #[inline]
  pub fn add_FamilyNameTw(&mut self, FamilyNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMETW, FamilyNameTw);
  }
  #[inline]
  pub fn add_FamilyNameRubyTw(&mut self, FamilyNameRubyTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYTW, FamilyNameRubyTw);
  }
  #[inline]
  pub fn add_PersonalNameTw(&mut self, PersonalNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMETW, PersonalNameTw);
  }
  #[inline]
  pub fn add_PersonalNameRubyTw(&mut self, PersonalNameRubyTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYTW, PersonalNameRubyTw);
  }
  #[inline]
  pub fn add_FamilyNameEn(&mut self, FamilyNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMEEN, FamilyNameEn);
  }
  #[inline]
  pub fn add_FamilyNameRubyEn(&mut self, FamilyNameRubyEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILYNAMERUBYEN, FamilyNameRubyEn);
  }
  #[inline]
  pub fn add_PersonalNameEn(&mut self, PersonalNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMEEN, PersonalNameEn);
  }
  #[inline]
  pub fn add_PersonalNameRubyEn(&mut self, PersonalNameRubyEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONALNAMERUBYEN, PersonalNameRubyEn);
  }
  #[inline]
  pub fn add_SchoolYearKr(&mut self, SchoolYearKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOLYEARKR, SchoolYearKr);
  }
  #[inline]
  pub fn add_SchoolYearJp(&mut self, SchoolYearJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOLYEARJP, SchoolYearJp);
  }
  #[inline]
  pub fn add_SchoolYearTh(&mut self, SchoolYearTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOLYEARTH, SchoolYearTh);
  }
  #[inline]
  pub fn add_SchoolYearTw(&mut self, SchoolYearTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOLYEARTW, SchoolYearTw);
  }
  #[inline]
  pub fn add_SchoolYearEn(&mut self, SchoolYearEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOLYEAREN, SchoolYearEn);
  }
  #[inline]
  pub fn add_CharacterAgeKr(&mut self, CharacterAgeKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERAGEKR, CharacterAgeKr);
  }
  #[inline]
  pub fn add_CharacterAgeJp(&mut self, CharacterAgeJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERAGEJP, CharacterAgeJp);
  }
  #[inline]
  pub fn add_CharacterAgeTh(&mut self, CharacterAgeTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERAGETH, CharacterAgeTh);
  }
  #[inline]
  pub fn add_CharacterAgeTw(&mut self, CharacterAgeTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERAGETW, CharacterAgeTw);
  }
  #[inline]
  pub fn add_CharacterAgeEn(&mut self, CharacterAgeEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERAGEEN, CharacterAgeEn);
  }
  #[inline]
  pub fn add_BirthDay(&mut self, BirthDay: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAY, BirthDay);
  }
  #[inline]
  pub fn add_BirthdayKr(&mut self, BirthdayKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAYKR, BirthdayKr);
  }
  #[inline]
  pub fn add_BirthdayJp(&mut self, BirthdayJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAYJP, BirthdayJp);
  }
  #[inline]
  pub fn add_BirthdayTh(&mut self, BirthdayTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAYTH, BirthdayTh);
  }
  #[inline]
  pub fn add_BirthdayTw(&mut self, BirthdayTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAYTW, BirthdayTw);
  }
  #[inline]
  pub fn add_BirthdayEn(&mut self, BirthdayEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAYEN, BirthdayEn);
  }
  #[inline]
  pub fn add_CharHeightKr(&mut self, CharHeightKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARHEIGHTKR, CharHeightKr);
  }
  #[inline]
  pub fn add_CharHeightJp(&mut self, CharHeightJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARHEIGHTJP, CharHeightJp);
  }
  #[inline]
  pub fn add_CharHeightTh(&mut self, CharHeightTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARHEIGHTTH, CharHeightTh);
  }
  #[inline]
  pub fn add_CharHeightTw(&mut self, CharHeightTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARHEIGHTTW, CharHeightTw);
  }
  #[inline]
  pub fn add_CharHeightEn(&mut self, CharHeightEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARHEIGHTEN, CharHeightEn);
  }
  #[inline]
  pub fn add_DesignerNameKr(&mut self, DesignerNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEKR, DesignerNameKr);
  }
  #[inline]
  pub fn add_DesignerNameJp(&mut self, DesignerNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEJP, DesignerNameJp);
  }
  #[inline]
  pub fn add_DesignerNameTh(&mut self, DesignerNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNERNAMETH, DesignerNameTh);
  }
  #[inline]
  pub fn add_DesignerNameTw(&mut self, DesignerNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNERNAMETW, DesignerNameTw);
  }
  #[inline]
  pub fn add_DesignerNameEn(&mut self, DesignerNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNERNAMEEN, DesignerNameEn);
  }
  #[inline]
  pub fn add_IllustratorNameKr(&mut self, IllustratorNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEKR, IllustratorNameKr);
  }
  #[inline]
  pub fn add_IllustratorNameJp(&mut self, IllustratorNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEJP, IllustratorNameJp);
  }
  #[inline]
  pub fn add_IllustratorNameTh(&mut self, IllustratorNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMETH, IllustratorNameTh);
  }
  #[inline]
  pub fn add_IllustratorNameTw(&mut self, IllustratorNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMETW, IllustratorNameTw);
  }
  #[inline]
  pub fn add_IllustratorNameEn(&mut self, IllustratorNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATORNAMEEN, IllustratorNameEn);
  }
  #[inline]
  pub fn add_CharacterVoiceKr(&mut self, CharacterVoiceKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEKR, CharacterVoiceKr);
  }
  #[inline]
  pub fn add_CharacterVoiceJp(&mut self, CharacterVoiceJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEJP, CharacterVoiceJp);
  }
  #[inline]
  pub fn add_CharacterVoiceTh(&mut self, CharacterVoiceTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERVOICETH, CharacterVoiceTh);
  }
  #[inline]
  pub fn add_CharacterVoiceTw(&mut self, CharacterVoiceTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERVOICETW, CharacterVoiceTw);
  }
  #[inline]
  pub fn add_CharacterVoiceEn(&mut self, CharacterVoiceEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERVOICEEN, CharacterVoiceEn);
  }
  #[inline]
  pub fn add_KRCharacterVoiceKr(&mut self, KRCharacterVoiceKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICEKR, KRCharacterVoiceKr);
  }
  #[inline]
  pub fn add_KRCharacterVoiceTh(&mut self, KRCharacterVoiceTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICETH, KRCharacterVoiceTh);
  }
  #[inline]
  pub fn add_KRCharacterVoiceTw(&mut self, KRCharacterVoiceTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICETW, KRCharacterVoiceTw);
  }
  #[inline]
  pub fn add_KRCharacterVoiceEn(&mut self, KRCharacterVoiceEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_KRCHARACTERVOICEEN, KRCharacterVoiceEn);
  }
  #[inline]
  pub fn add_HobbyKr(&mut self, HobbyKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBYKR, HobbyKr);
  }
  #[inline]
  pub fn add_HobbyJp(&mut self, HobbyJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBYJP, HobbyJp);
  }
  #[inline]
  pub fn add_HobbyTh(&mut self, HobbyTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBYTH, HobbyTh);
  }
  #[inline]
  pub fn add_HobbyTw(&mut self, HobbyTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBYTW, HobbyTw);
  }
  #[inline]
  pub fn add_HobbyEn(&mut self, HobbyEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBYEN, HobbyEn);
  }
  #[inline]
  pub fn add_WeaponNameKr(&mut self, WeaponNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONNAMEKR, WeaponNameKr);
  }
  #[inline]
  pub fn add_WeaponDescKr(&mut self, WeaponDescKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONDESCKR, WeaponDescKr);
  }
  #[inline]
  pub fn add_WeaponNameJp(&mut self, WeaponNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONNAMEJP, WeaponNameJp);
  }
  #[inline]
  pub fn add_WeaponDescJp(&mut self, WeaponDescJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONDESCJP, WeaponDescJp);
  }
  #[inline]
  pub fn add_WeaponNameTh(&mut self, WeaponNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONNAMETH, WeaponNameTh);
  }
  #[inline]
  pub fn add_WeaponDescTh(&mut self, WeaponDescTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONDESCTH, WeaponDescTh);
  }
  #[inline]
  pub fn add_WeaponNameTw(&mut self, WeaponNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONNAMETW, WeaponNameTw);
  }
  #[inline]
  pub fn add_WeaponDescTw(&mut self, WeaponDescTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONDESCTW, WeaponDescTw);
  }
  #[inline]
  pub fn add_WeaponNameEn(&mut self, WeaponNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONNAMEEN, WeaponNameEn);
  }
  #[inline]
  pub fn add_WeaponDescEn(&mut self, WeaponDescEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPONDESCEN, WeaponDescEn);
  }
  #[inline]
  pub fn add_ProfileIntroductionKr(&mut self, ProfileIntroductionKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONKR, ProfileIntroductionKr);
  }
  #[inline]
  pub fn add_ProfileIntroductionJp(&mut self, ProfileIntroductionJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONJP, ProfileIntroductionJp);
  }
  #[inline]
  pub fn add_ProfileIntroductionTh(&mut self, ProfileIntroductionTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONTH, ProfileIntroductionTh);
  }
  #[inline]
  pub fn add_ProfileIntroductionTw(&mut self, ProfileIntroductionTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONTW, ProfileIntroductionTw);
  }
  #[inline]
  pub fn add_ProfileIntroductionEn(&mut self, ProfileIntroductionEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILEINTRODUCTIONEN, ProfileIntroductionEn);
  }
  #[inline]
  pub fn add_CharacterSSRNewKr(&mut self, CharacterSSRNewKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWKR, CharacterSSRNewKr);
  }
  #[inline]
  pub fn add_CharacterSSRNewJp(&mut self, CharacterSSRNewJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWJP, CharacterSSRNewJp);
  }
  #[inline]
  pub fn add_CharacterSSRNewTh(&mut self, CharacterSSRNewTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWTH, CharacterSSRNewTh);
  }
  #[inline]
  pub fn add_CharacterSSRNewTw(&mut self, CharacterSSRNewTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWTW, CharacterSSRNewTw);
  }
  #[inline]
  pub fn add_CharacterSSRNewEn(&mut self, CharacterSSRNewEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTERSSRNEWEN, CharacterSSRNewEn);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeCharProfileExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeCharProfileExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeCharProfileExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeCharProfileExcel");
      ds.field("CharacterId", &self.CharacterId());
      ds.field("StatusMessageKr", &self.StatusMessageKr());
      ds.field("StatusMessageJp", &self.StatusMessageJp());
      ds.field("StatusMessageTh", &self.StatusMessageTh());
      ds.field("StatusMessageTw", &self.StatusMessageTw());
      ds.field("StatusMessageEn", &self.StatusMessageEn());
      ds.field("FullNameKr", &self.FullNameKr());
      ds.field("FullNameJp", &self.FullNameJp());
      ds.field("FullNameTh", &self.FullNameTh());
      ds.field("FullNameTw", &self.FullNameTw());
      ds.field("FullNameEn", &self.FullNameEn());
      ds.field("FamilyNameKr", &self.FamilyNameKr());
      ds.field("FamilyNameRubyKr", &self.FamilyNameRubyKr());
      ds.field("PersonalNameKr", &self.PersonalNameKr());
      ds.field("PersonalNameRubyKr", &self.PersonalNameRubyKr());
      ds.field("FamilyNameJp", &self.FamilyNameJp());
      ds.field("FamilyNameRubyJp", &self.FamilyNameRubyJp());
      ds.field("PersonalNameJp", &self.PersonalNameJp());
      ds.field("PersonalNameRubyJp", &self.PersonalNameRubyJp());
      ds.field("FamilyNameTh", &self.FamilyNameTh());
      ds.field("FamilyNameRubyTh", &self.FamilyNameRubyTh());
      ds.field("PersonalNameTh", &self.PersonalNameTh());
      ds.field("PersonalNameRubyTh", &self.PersonalNameRubyTh());
      ds.field("FamilyNameTw", &self.FamilyNameTw());
      ds.field("FamilyNameRubyTw", &self.FamilyNameRubyTw());
      ds.field("PersonalNameTw", &self.PersonalNameTw());
      ds.field("PersonalNameRubyTw", &self.PersonalNameRubyTw());
      ds.field("FamilyNameEn", &self.FamilyNameEn());
      ds.field("FamilyNameRubyEn", &self.FamilyNameRubyEn());
      ds.field("PersonalNameEn", &self.PersonalNameEn());
      ds.field("PersonalNameRubyEn", &self.PersonalNameRubyEn());
      ds.field("SchoolYearKr", &self.SchoolYearKr());
      ds.field("SchoolYearJp", &self.SchoolYearJp());
      ds.field("SchoolYearTh", &self.SchoolYearTh());
      ds.field("SchoolYearTw", &self.SchoolYearTw());
      ds.field("SchoolYearEn", &self.SchoolYearEn());
      ds.field("CharacterAgeKr", &self.CharacterAgeKr());
      ds.field("CharacterAgeJp", &self.CharacterAgeJp());
      ds.field("CharacterAgeTh", &self.CharacterAgeTh());
      ds.field("CharacterAgeTw", &self.CharacterAgeTw());
      ds.field("CharacterAgeEn", &self.CharacterAgeEn());
      ds.field("BirthDay", &self.BirthDay());
      ds.field("BirthdayKr", &self.BirthdayKr());
      ds.field("BirthdayJp", &self.BirthdayJp());
      ds.field("BirthdayTh", &self.BirthdayTh());
      ds.field("BirthdayTw", &self.BirthdayTw());
      ds.field("BirthdayEn", &self.BirthdayEn());
      ds.field("CharHeightKr", &self.CharHeightKr());
      ds.field("CharHeightJp", &self.CharHeightJp());
      ds.field("CharHeightTh", &self.CharHeightTh());
      ds.field("CharHeightTw", &self.CharHeightTw());
      ds.field("CharHeightEn", &self.CharHeightEn());
      ds.field("DesignerNameKr", &self.DesignerNameKr());
      ds.field("DesignerNameJp", &self.DesignerNameJp());
      ds.field("DesignerNameTh", &self.DesignerNameTh());
      ds.field("DesignerNameTw", &self.DesignerNameTw());
      ds.field("DesignerNameEn", &self.DesignerNameEn());
      ds.field("IllustratorNameKr", &self.IllustratorNameKr());
      ds.field("IllustratorNameJp", &self.IllustratorNameJp());
      ds.field("IllustratorNameTh", &self.IllustratorNameTh());
      ds.field("IllustratorNameTw", &self.IllustratorNameTw());
      ds.field("IllustratorNameEn", &self.IllustratorNameEn());
      ds.field("CharacterVoiceKr", &self.CharacterVoiceKr());
      ds.field("CharacterVoiceJp", &self.CharacterVoiceJp());
      ds.field("CharacterVoiceTh", &self.CharacterVoiceTh());
      ds.field("CharacterVoiceTw", &self.CharacterVoiceTw());
      ds.field("CharacterVoiceEn", &self.CharacterVoiceEn());
      ds.field("KRCharacterVoiceKr", &self.KRCharacterVoiceKr());
      ds.field("KRCharacterVoiceTh", &self.KRCharacterVoiceTh());
      ds.field("KRCharacterVoiceTw", &self.KRCharacterVoiceTw());
      ds.field("KRCharacterVoiceEn", &self.KRCharacterVoiceEn());
      ds.field("HobbyKr", &self.HobbyKr());
      ds.field("HobbyJp", &self.HobbyJp());
      ds.field("HobbyTh", &self.HobbyTh());
      ds.field("HobbyTw", &self.HobbyTw());
      ds.field("HobbyEn", &self.HobbyEn());
      ds.field("WeaponNameKr", &self.WeaponNameKr());
      ds.field("WeaponDescKr", &self.WeaponDescKr());
      ds.field("WeaponNameJp", &self.WeaponNameJp());
      ds.field("WeaponDescJp", &self.WeaponDescJp());
      ds.field("WeaponNameTh", &self.WeaponNameTh());
      ds.field("WeaponDescTh", &self.WeaponDescTh());
      ds.field("WeaponNameTw", &self.WeaponNameTw());
      ds.field("WeaponDescTw", &self.WeaponDescTw());
      ds.field("WeaponNameEn", &self.WeaponNameEn());
      ds.field("WeaponDescEn", &self.WeaponDescEn());
      ds.field("ProfileIntroductionKr", &self.ProfileIntroductionKr());
      ds.field("ProfileIntroductionJp", &self.ProfileIntroductionJp());
      ds.field("ProfileIntroductionTh", &self.ProfileIntroductionTh());
      ds.field("ProfileIntroductionTw", &self.ProfileIntroductionTw());
      ds.field("ProfileIntroductionEn", &self.ProfileIntroductionEn());
      ds.field("CharacterSSRNewKr", &self.CharacterSSRNewKr());
      ds.field("CharacterSSRNewJp", &self.CharacterSSRNewJp());
      ds.field("CharacterSSRNewTh", &self.CharacterSSRNewTh());
      ds.field("CharacterSSRNewTw", &self.CharacterSSRNewTw());
      ds.field("CharacterSSRNewEn", &self.CharacterSSRNewEn());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LocalizeCharProfileExcelT {
  pub CharacterId: i64,
  pub StatusMessageKr: Option<String>,
  pub StatusMessageJp: Option<String>,
  pub StatusMessageTh: Option<String>,
  pub StatusMessageTw: Option<String>,
  pub StatusMessageEn: Option<String>,
  pub FullNameKr: Option<String>,
  pub FullNameJp: Option<String>,
  pub FullNameTh: Option<String>,
  pub FullNameTw: Option<String>,
  pub FullNameEn: Option<String>,
  pub FamilyNameKr: Option<String>,
  pub FamilyNameRubyKr: Option<String>,
  pub PersonalNameKr: Option<String>,
  pub PersonalNameRubyKr: Option<String>,
  pub FamilyNameJp: Option<String>,
  pub FamilyNameRubyJp: Option<String>,
  pub PersonalNameJp: Option<String>,
  pub PersonalNameRubyJp: Option<String>,
  pub FamilyNameTh: Option<String>,
  pub FamilyNameRubyTh: Option<String>,
  pub PersonalNameTh: Option<String>,
  pub PersonalNameRubyTh: Option<String>,
  pub FamilyNameTw: Option<String>,
  pub FamilyNameRubyTw: Option<String>,
  pub PersonalNameTw: Option<String>,
  pub PersonalNameRubyTw: Option<String>,
  pub FamilyNameEn: Option<String>,
  pub FamilyNameRubyEn: Option<String>,
  pub PersonalNameEn: Option<String>,
  pub PersonalNameRubyEn: Option<String>,
  pub SchoolYearKr: Option<String>,
  pub SchoolYearJp: Option<String>,
  pub SchoolYearTh: Option<String>,
  pub SchoolYearTw: Option<String>,
  pub SchoolYearEn: Option<String>,
  pub CharacterAgeKr: Option<String>,
  pub CharacterAgeJp: Option<String>,
  pub CharacterAgeTh: Option<String>,
  pub CharacterAgeTw: Option<String>,
  pub CharacterAgeEn: Option<String>,
  pub BirthDay: Option<String>,
  pub BirthdayKr: Option<String>,
  pub BirthdayJp: Option<String>,
  pub BirthdayTh: Option<String>,
  pub BirthdayTw: Option<String>,
  pub BirthdayEn: Option<String>,
  pub CharHeightKr: Option<String>,
  pub CharHeightJp: Option<String>,
  pub CharHeightTh: Option<String>,
  pub CharHeightTw: Option<String>,
  pub CharHeightEn: Option<String>,
  pub DesignerNameKr: Option<String>,
  pub DesignerNameJp: Option<String>,
  pub DesignerNameTh: Option<String>,
  pub DesignerNameTw: Option<String>,
  pub DesignerNameEn: Option<String>,
  pub IllustratorNameKr: Option<String>,
  pub IllustratorNameJp: Option<String>,
  pub IllustratorNameTh: Option<String>,
  pub IllustratorNameTw: Option<String>,
  pub IllustratorNameEn: Option<String>,
  pub CharacterVoiceKr: Option<String>,
  pub CharacterVoiceJp: Option<String>,
  pub CharacterVoiceTh: Option<String>,
  pub CharacterVoiceTw: Option<String>,
  pub CharacterVoiceEn: Option<String>,
  pub KRCharacterVoiceKr: Option<String>,
  pub KRCharacterVoiceTh: Option<String>,
  pub KRCharacterVoiceTw: Option<String>,
  pub KRCharacterVoiceEn: Option<String>,
  pub HobbyKr: Option<String>,
  pub HobbyJp: Option<String>,
  pub HobbyTh: Option<String>,
  pub HobbyTw: Option<String>,
  pub HobbyEn: Option<String>,
  pub WeaponNameKr: Option<String>,
  pub WeaponDescKr: Option<String>,
  pub WeaponNameJp: Option<String>,
  pub WeaponDescJp: Option<String>,
  pub WeaponNameTh: Option<String>,
  pub WeaponDescTh: Option<String>,
  pub WeaponNameTw: Option<String>,
  pub WeaponDescTw: Option<String>,
  pub WeaponNameEn: Option<String>,
  pub WeaponDescEn: Option<String>,
  pub ProfileIntroductionKr: Option<String>,
  pub ProfileIntroductionJp: Option<String>,
  pub ProfileIntroductionTh: Option<String>,
  pub ProfileIntroductionTw: Option<String>,
  pub ProfileIntroductionEn: Option<String>,
  pub CharacterSSRNewKr: Option<String>,
  pub CharacterSSRNewJp: Option<String>,
  pub CharacterSSRNewTh: Option<String>,
  pub CharacterSSRNewTw: Option<String>,
  pub CharacterSSRNewEn: Option<String>,
}
impl Default for LocalizeCharProfileExcelT {
  fn default() -> Self {
    Self {
      CharacterId: 0,
      StatusMessageKr: None,
      StatusMessageJp: None,
      StatusMessageTh: None,
      StatusMessageTw: None,
      StatusMessageEn: None,
      FullNameKr: None,
      FullNameJp: None,
      FullNameTh: None,
      FullNameTw: None,
      FullNameEn: None,
      FamilyNameKr: None,
      FamilyNameRubyKr: None,
      PersonalNameKr: None,
      PersonalNameRubyKr: None,
      FamilyNameJp: None,
      FamilyNameRubyJp: None,
      PersonalNameJp: None,
      PersonalNameRubyJp: None,
      FamilyNameTh: None,
      FamilyNameRubyTh: None,
      PersonalNameTh: None,
      PersonalNameRubyTh: None,
      FamilyNameTw: None,
      FamilyNameRubyTw: None,
      PersonalNameTw: None,
      PersonalNameRubyTw: None,
      FamilyNameEn: None,
      FamilyNameRubyEn: None,
      PersonalNameEn: None,
      PersonalNameRubyEn: None,
      SchoolYearKr: None,
      SchoolYearJp: None,
      SchoolYearTh: None,
      SchoolYearTw: None,
      SchoolYearEn: None,
      CharacterAgeKr: None,
      CharacterAgeJp: None,
      CharacterAgeTh: None,
      CharacterAgeTw: None,
      CharacterAgeEn: None,
      BirthDay: None,
      BirthdayKr: None,
      BirthdayJp: None,
      BirthdayTh: None,
      BirthdayTw: None,
      BirthdayEn: None,
      CharHeightKr: None,
      CharHeightJp: None,
      CharHeightTh: None,
      CharHeightTw: None,
      CharHeightEn: None,
      DesignerNameKr: None,
      DesignerNameJp: None,
      DesignerNameTh: None,
      DesignerNameTw: None,
      DesignerNameEn: None,
      IllustratorNameKr: None,
      IllustratorNameJp: None,
      IllustratorNameTh: None,
      IllustratorNameTw: None,
      IllustratorNameEn: None,
      CharacterVoiceKr: None,
      CharacterVoiceJp: None,
      CharacterVoiceTh: None,
      CharacterVoiceTw: None,
      CharacterVoiceEn: None,
      KRCharacterVoiceKr: None,
      KRCharacterVoiceTh: None,
      KRCharacterVoiceTw: None,
      KRCharacterVoiceEn: None,
      HobbyKr: None,
      HobbyJp: None,
      HobbyTh: None,
      HobbyTw: None,
      HobbyEn: None,
      WeaponNameKr: None,
      WeaponDescKr: None,
      WeaponNameJp: None,
      WeaponDescJp: None,
      WeaponNameTh: None,
      WeaponDescTh: None,
      WeaponNameTw: None,
      WeaponDescTw: None,
      WeaponNameEn: None,
      WeaponDescEn: None,
      ProfileIntroductionKr: None,
      ProfileIntroductionJp: None,
      ProfileIntroductionTh: None,
      ProfileIntroductionTw: None,
      ProfileIntroductionEn: None,
      CharacterSSRNewKr: None,
      CharacterSSRNewJp: None,
      CharacterSSRNewTh: None,
      CharacterSSRNewTw: None,
      CharacterSSRNewEn: None,
    }
  }
}
impl LocalizeCharProfileExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'b>> {
    let CharacterId = self.CharacterId;
    let StatusMessageKr = self.StatusMessageKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StatusMessageJp = self.StatusMessageJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StatusMessageTh = self.StatusMessageTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StatusMessageTw = self.StatusMessageTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StatusMessageEn = self.StatusMessageEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullNameKr = self.FullNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullNameJp = self.FullNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullNameTh = self.FullNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullNameTw = self.FullNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FullNameEn = self.FullNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameKr = self.FamilyNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameRubyKr = self.FamilyNameRubyKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameKr = self.PersonalNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameRubyKr = self.PersonalNameRubyKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameJp = self.FamilyNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameRubyJp = self.FamilyNameRubyJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameJp = self.PersonalNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameRubyJp = self.PersonalNameRubyJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameTh = self.FamilyNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameRubyTh = self.FamilyNameRubyTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameTh = self.PersonalNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameRubyTh = self.PersonalNameRubyTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameTw = self.FamilyNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameRubyTw = self.FamilyNameRubyTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameTw = self.PersonalNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameRubyTw = self.PersonalNameRubyTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameEn = self.FamilyNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FamilyNameRubyEn = self.FamilyNameRubyEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameEn = self.PersonalNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PersonalNameRubyEn = self.PersonalNameRubyEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SchoolYearKr = self.SchoolYearKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SchoolYearJp = self.SchoolYearJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SchoolYearTh = self.SchoolYearTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SchoolYearTw = self.SchoolYearTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SchoolYearEn = self.SchoolYearEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterAgeKr = self.CharacterAgeKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterAgeJp = self.CharacterAgeJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterAgeTh = self.CharacterAgeTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterAgeTw = self.CharacterAgeTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterAgeEn = self.CharacterAgeEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthDay = self.BirthDay.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthdayKr = self.BirthdayKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthdayJp = self.BirthdayJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthdayTh = self.BirthdayTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthdayTw = self.BirthdayTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BirthdayEn = self.BirthdayEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharHeightKr = self.CharHeightKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharHeightJp = self.CharHeightJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharHeightTh = self.CharHeightTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharHeightTw = self.CharHeightTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharHeightEn = self.CharHeightEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignerNameKr = self.DesignerNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignerNameJp = self.DesignerNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignerNameTh = self.DesignerNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignerNameTw = self.DesignerNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DesignerNameEn = self.DesignerNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IllustratorNameKr = self.IllustratorNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IllustratorNameJp = self.IllustratorNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IllustratorNameTh = self.IllustratorNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IllustratorNameTw = self.IllustratorNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IllustratorNameEn = self.IllustratorNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceKr = self.CharacterVoiceKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceJp = self.CharacterVoiceJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceTh = self.CharacterVoiceTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceTw = self.CharacterVoiceTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterVoiceEn = self.CharacterVoiceEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let KRCharacterVoiceKr = self.KRCharacterVoiceKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let KRCharacterVoiceTh = self.KRCharacterVoiceTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let KRCharacterVoiceTw = self.KRCharacterVoiceTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let KRCharacterVoiceEn = self.KRCharacterVoiceEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HobbyKr = self.HobbyKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HobbyJp = self.HobbyJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HobbyTh = self.HobbyTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HobbyTw = self.HobbyTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HobbyEn = self.HobbyEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponNameKr = self.WeaponNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponDescKr = self.WeaponDescKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponNameJp = self.WeaponNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponDescJp = self.WeaponDescJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponNameTh = self.WeaponNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponDescTh = self.WeaponDescTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponNameTw = self.WeaponNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponDescTw = self.WeaponDescTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponNameEn = self.WeaponNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let WeaponDescEn = self.WeaponDescEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProfileIntroductionKr = self.ProfileIntroductionKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProfileIntroductionJp = self.ProfileIntroductionJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProfileIntroductionTh = self.ProfileIntroductionTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProfileIntroductionTw = self.ProfileIntroductionTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ProfileIntroductionEn = self.ProfileIntroductionEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterSSRNewKr = self.CharacterSSRNewKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterSSRNewJp = self.CharacterSSRNewJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterSSRNewTh = self.CharacterSSRNewTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterSSRNewTw = self.CharacterSSRNewTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let CharacterSSRNewEn = self.CharacterSSRNewEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LocalizeCharProfileExcel::create(_fbb, &LocalizeCharProfileExcelArgs{
      CharacterId,
      StatusMessageKr,
      StatusMessageJp,
      StatusMessageTh,
      StatusMessageTw,
      StatusMessageEn,
      FullNameKr,
      FullNameJp,
      FullNameTh,
      FullNameTw,
      FullNameEn,
      FamilyNameKr,
      FamilyNameRubyKr,
      PersonalNameKr,
      PersonalNameRubyKr,
      FamilyNameJp,
      FamilyNameRubyJp,
      PersonalNameJp,
      PersonalNameRubyJp,
      FamilyNameTh,
      FamilyNameRubyTh,
      PersonalNameTh,
      PersonalNameRubyTh,
      FamilyNameTw,
      FamilyNameRubyTw,
      PersonalNameTw,
      PersonalNameRubyTw,
      FamilyNameEn,
      FamilyNameRubyEn,
      PersonalNameEn,
      PersonalNameRubyEn,
      SchoolYearKr,
      SchoolYearJp,
      SchoolYearTh,
      SchoolYearTw,
      SchoolYearEn,
      CharacterAgeKr,
      CharacterAgeJp,
      CharacterAgeTh,
      CharacterAgeTw,
      CharacterAgeEn,
      BirthDay,
      BirthdayKr,
      BirthdayJp,
      BirthdayTh,
      BirthdayTw,
      BirthdayEn,
      CharHeightKr,
      CharHeightJp,
      CharHeightTh,
      CharHeightTw,
      CharHeightEn,
      DesignerNameKr,
      DesignerNameJp,
      DesignerNameTh,
      DesignerNameTw,
      DesignerNameEn,
      IllustratorNameKr,
      IllustratorNameJp,
      IllustratorNameTh,
      IllustratorNameTw,
      IllustratorNameEn,
      CharacterVoiceKr,
      CharacterVoiceJp,
      CharacterVoiceTh,
      CharacterVoiceTw,
      CharacterVoiceEn,
      KRCharacterVoiceKr,
      KRCharacterVoiceTh,
      KRCharacterVoiceTw,
      KRCharacterVoiceEn,
      HobbyKr,
      HobbyJp,
      HobbyTh,
      HobbyTw,
      HobbyEn,
      WeaponNameKr,
      WeaponDescKr,
      WeaponNameJp,
      WeaponDescJp,
      WeaponNameTh,
      WeaponDescTh,
      WeaponNameTw,
      WeaponDescTw,
      WeaponNameEn,
      WeaponDescEn,
      ProfileIntroductionKr,
      ProfileIntroductionJp,
      ProfileIntroductionTh,
      ProfileIntroductionTw,
      ProfileIntroductionEn,
      CharacterSSRNewKr,
      CharacterSSRNewJp,
      CharacterSSRNewTh,
      CharacterSSRNewTw,
      CharacterSSRNewEn,
    })
  }
}
