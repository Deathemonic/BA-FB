// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AddressableWhiteListExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AddressableWhiteListExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AddressableWhiteListExcel<'a> {
  type Inner = AddressableWhiteListExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AddressableWhiteListExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_FOLDERPATH: flatbuffers::VOffsetT = 6;
  pub const VT_RESOURCEPATH: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AddressableWhiteListExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AddressableWhiteListExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AddressableWhiteListExcel<'bldr>> {
    let mut builder = AddressableWhiteListExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"AddressableWhiteList");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.resourcePath {
        builder.add_resourcePath(x);
      }
      if let Some(x) = args.folderPath {
        builder.add_folderPath(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> AddressableWhiteListExcelT {
    let key = table_encryption_service::create_key(b"AddressableWhiteList");
      let Id = self.Id();
    let folderPath = self.folderPath().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let resourcePath = self.resourcePath().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    AddressableWhiteListExcelT {
      Id,
      folderPath,
      resourcePath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AddressableWhiteListExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn folderPath(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AddressableWhiteListExcel::VT_FOLDERPATH, None)}
  }
  #[inline]
  pub fn resourcePath(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AddressableWhiteListExcel::VT_RESOURCEPATH, None)}
  }
}

impl flatbuffers::Verifiable for AddressableWhiteListExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("folderPath", Self::VT_FOLDERPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("resourcePath", Self::VT_RESOURCEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct AddressableWhiteListExcelArgs<'a> {
    pub Id: i64,
    pub folderPath: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub resourcePath: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for AddressableWhiteListExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AddressableWhiteListExcelArgs {
      Id: 0,
      folderPath: None,
      resourcePath: None,
    }
  }
}

impl Serialize for AddressableWhiteListExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AddressableWhiteListExcel", 3)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.folderPath() {
        s.serialize_field("folderPath", &f)?;
      } else {
        s.skip_field("folderPath")?;
      }
      if let Some(f) = self.resourcePath() {
        s.serialize_field("resourcePath", &f)?;
      } else {
        s.skip_field("resourcePath")?;
      }
    s.end()
  }
}

pub struct AddressableWhiteListExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AddressableWhiteListExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(AddressableWhiteListExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_folderPath(&mut self, folderPath: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AddressableWhiteListExcel::VT_FOLDERPATH, folderPath);
  }
  #[inline]
  pub fn add_resourcePath(&mut self, resourcePath: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AddressableWhiteListExcel::VT_RESOURCEPATH, resourcePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AddressableWhiteListExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AddressableWhiteListExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AddressableWhiteListExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AddressableWhiteListExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AddressableWhiteListExcel");
      ds.field("Id", &self.Id());
      ds.field("folderPath", &self.folderPath());
      ds.field("resourcePath", &self.resourcePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AddressableWhiteListExcelT {
  pub Id: i64,
  pub folderPath: Option<Vec<String>>,
  pub resourcePath: Option<Vec<String>>,
}
impl Default for AddressableWhiteListExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      folderPath: None,
      resourcePath: None,
    }
  }
}
impl AddressableWhiteListExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AddressableWhiteListExcel<'b>> {
    let Id = self.Id;
    let folderPath = self.folderPath.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let resourcePath = self.resourcePath.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    AddressableWhiteListExcel::create(_fbb, &AddressableWhiteListExcelArgs{
      Id,
      folderPath,
      resourcePath,
    })
  }
}
