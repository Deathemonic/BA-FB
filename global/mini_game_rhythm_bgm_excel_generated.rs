// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGameRhythmBgmExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGameRhythmBgmExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGameRhythmBgmExcel<'a> {
  type Inner = MiniGameRhythmBgmExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGameRhythmBgmExcel<'a> {
  pub const VT_RHYTHMBGMID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_STAGESELECTIMAGEPATH: flatbuffers::VOffsetT = 8;
  pub const VT_BPM: flatbuffers::VOffsetT = 10;
  pub const VT_BGM: flatbuffers::VOffsetT = 12;
  pub const VT_BGMNAMETEXT: flatbuffers::VOffsetT = 14;
  pub const VT_BGMARTISTTEXT: flatbuffers::VOffsetT = 16;
  pub const VT_HASLYRICIST: flatbuffers::VOffsetT = 18;
  pub const VT_BGMCOMPOSERTEXT: flatbuffers::VOffsetT = 20;
  pub const VT_BGMLENGTH: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGameRhythmBgmExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGameRhythmBgmExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGameRhythmBgmExcel<'bldr>> {
    let mut builder = MiniGameRhythmBgmExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGameRhythmBgm");
      let x = args.Bgm;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Bgm(x);
      let x = args.Bpm;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Bpm(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.RhythmBgmId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RhythmBgmId(x);
      let x = args.BgmLength;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_BgmLength(x);
      if let Some(x) = args.BgmComposerText {
        builder.add_BgmComposerText(x);
      }
      if let Some(x) = args.BgmArtistText {
        builder.add_BgmArtistText(x);
      }
      if let Some(x) = args.BgmNameText {
        builder.add_BgmNameText(x);
      }
      if let Some(x) = args.StageSelectImagePath {
        builder.add_StageSelectImagePath(x);
      }
      builder.add_HasLyricist(args.HasLyricist);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGameRhythmBgmExcelT {
    let key = table_encryption_service::create_key(b"MiniGameRhythmBgm");
      let RhythmBgmId = self.RhythmBgmId();
      let EventContentId = self.EventContentId();
    let StageSelectImagePath = self.StageSelectImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Bpm = self.Bpm();
      let Bgm = self.Bgm();
    let BgmNameText = self.BgmNameText().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let BgmArtistText = self.BgmArtistText().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let HasLyricist = self.HasLyricist();
    let BgmComposerText = self.BgmComposerText().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BgmLength = self.BgmLength();
    MiniGameRhythmBgmExcelT {
      RhythmBgmId,
      EventContentId,
      StageSelectImagePath,
      Bpm,
      Bgm,
      BgmNameText,
      BgmArtistText,
      HasLyricist,
      BgmComposerText,
      BgmLength,
    }
  }

  #[inline]
  pub fn RhythmBgmId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRhythmBgmExcel::VT_RHYTHMBGMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRhythmBgmExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StageSelectImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameRhythmBgmExcel::VT_STAGESELECTIMAGEPATH, None)}
  }
  #[inline]
  pub fn Bpm(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRhythmBgmExcel::VT_BPM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Bgm(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGameRhythmBgmExcel::VT_BGM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BgmNameText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameRhythmBgmExcel::VT_BGMNAMETEXT, None)}
  }
  #[inline]
  pub fn BgmArtistText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameRhythmBgmExcel::VT_BGMARTISTTEXT, None)}
  }
  #[inline]
  pub fn HasLyricist(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MiniGameRhythmBgmExcel::VT_HASLYRICIST, Some(false)).unwrap()}
  }
  #[inline]
  pub fn BgmComposerText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGameRhythmBgmExcel::VT_BGMCOMPOSERTEXT, None)}
  }
  #[inline]
  pub fn BgmLength(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGameRhythmBgmExcel::VT_BGMLENGTH, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MiniGameRhythmBgmExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("RhythmBgmId", Self::VT_RHYTHMBGMID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StageSelectImagePath", Self::VT_STAGESELECTIMAGEPATH, false)?
     .visit_field::<i64>("Bpm", Self::VT_BPM, false)?
     .visit_field::<i64>("Bgm", Self::VT_BGM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgmNameText", Self::VT_BGMNAMETEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgmArtistText", Self::VT_BGMARTISTTEXT, false)?
     .visit_field::<bool>("HasLyricist", Self::VT_HASLYRICIST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BgmComposerText", Self::VT_BGMCOMPOSERTEXT, false)?
     .visit_field::<i32>("BgmLength", Self::VT_BGMLENGTH, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGameRhythmBgmExcelArgs<'a> {
    pub RhythmBgmId: i64,
    pub EventContentId: i64,
    pub StageSelectImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Bpm: i64,
    pub Bgm: i64,
    pub BgmNameText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BgmArtistText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HasLyricist: bool,
    pub BgmComposerText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BgmLength: i32,
}
impl<'a> Default for MiniGameRhythmBgmExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGameRhythmBgmExcelArgs {
      RhythmBgmId: 0,
      EventContentId: 0,
      StageSelectImagePath: None,
      Bpm: 0,
      Bgm: 0,
      BgmNameText: None,
      BgmArtistText: None,
      HasLyricist: false,
      BgmComposerText: None,
      BgmLength: 0,
    }
  }
}

impl Serialize for MiniGameRhythmBgmExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGameRhythmBgmExcel", 10)?;
      s.serialize_field("RhythmBgmId", &self.RhythmBgmId())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      if let Some(f) = self.StageSelectImagePath() {
        s.serialize_field("StageSelectImagePath", &f)?;
      } else {
        s.skip_field("StageSelectImagePath")?;
      }
      s.serialize_field("Bpm", &self.Bpm())?;
      s.serialize_field("Bgm", &self.Bgm())?;
      if let Some(f) = self.BgmNameText() {
        s.serialize_field("BgmNameText", &f)?;
      } else {
        s.skip_field("BgmNameText")?;
      }
      if let Some(f) = self.BgmArtistText() {
        s.serialize_field("BgmArtistText", &f)?;
      } else {
        s.skip_field("BgmArtistText")?;
      }
      s.serialize_field("HasLyricist", &self.HasLyricist())?;
      if let Some(f) = self.BgmComposerText() {
        s.serialize_field("BgmComposerText", &f)?;
      } else {
        s.skip_field("BgmComposerText")?;
      }
      s.serialize_field("BgmLength", &self.BgmLength())?;
    s.end()
  }
}

pub struct MiniGameRhythmBgmExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGameRhythmBgmExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_RhythmBgmId(&mut self, RhythmBgmId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRhythmBgmExcel::VT_RHYTHMBGMID, RhythmBgmId, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRhythmBgmExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_StageSelectImagePath(&mut self, StageSelectImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameRhythmBgmExcel::VT_STAGESELECTIMAGEPATH, StageSelectImagePath);
  }
  #[inline]
  pub fn add_Bpm(&mut self, Bpm: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRhythmBgmExcel::VT_BPM, Bpm, 0);
  }
  #[inline]
  pub fn add_Bgm(&mut self, Bgm: i64) {
    self.fbb_.push_slot::<i64>(MiniGameRhythmBgmExcel::VT_BGM, Bgm, 0);
  }
  #[inline]
  pub fn add_BgmNameText(&mut self, BgmNameText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameRhythmBgmExcel::VT_BGMNAMETEXT, BgmNameText);
  }
  #[inline]
  pub fn add_BgmArtistText(&mut self, BgmArtistText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameRhythmBgmExcel::VT_BGMARTISTTEXT, BgmArtistText);
  }
  #[inline]
  pub fn add_HasLyricist(&mut self, HasLyricist: bool) {
    self.fbb_.push_slot::<bool>(MiniGameRhythmBgmExcel::VT_HASLYRICIST, HasLyricist, false);
  }
  #[inline]
  pub fn add_BgmComposerText(&mut self, BgmComposerText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGameRhythmBgmExcel::VT_BGMCOMPOSERTEXT, BgmComposerText);
  }
  #[inline]
  pub fn add_BgmLength(&mut self, BgmLength: i32) {
    self.fbb_.push_slot::<i32>(MiniGameRhythmBgmExcel::VT_BGMLENGTH, BgmLength, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGameRhythmBgmExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGameRhythmBgmExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGameRhythmBgmExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGameRhythmBgmExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGameRhythmBgmExcel");
      ds.field("RhythmBgmId", &self.RhythmBgmId());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("StageSelectImagePath", &self.StageSelectImagePath());
      ds.field("Bpm", &self.Bpm());
      ds.field("Bgm", &self.Bgm());
      ds.field("BgmNameText", &self.BgmNameText());
      ds.field("BgmArtistText", &self.BgmArtistText());
      ds.field("HasLyricist", &self.HasLyricist());
      ds.field("BgmComposerText", &self.BgmComposerText());
      ds.field("BgmLength", &self.BgmLength());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGameRhythmBgmExcelT {
  pub RhythmBgmId: i64,
  pub EventContentId: i64,
  pub StageSelectImagePath: Option<String>,
  pub Bpm: i64,
  pub Bgm: i64,
  pub BgmNameText: Option<String>,
  pub BgmArtistText: Option<String>,
  pub HasLyricist: bool,
  pub BgmComposerText: Option<String>,
  pub BgmLength: i32,
}
impl Default for MiniGameRhythmBgmExcelT {
  fn default() -> Self {
    Self {
      RhythmBgmId: 0,
      EventContentId: 0,
      StageSelectImagePath: None,
      Bpm: 0,
      Bgm: 0,
      BgmNameText: None,
      BgmArtistText: None,
      HasLyricist: false,
      BgmComposerText: None,
      BgmLength: 0,
    }
  }
}
impl MiniGameRhythmBgmExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGameRhythmBgmExcel<'b>> {
    let RhythmBgmId = self.RhythmBgmId;
    let EventContentId = self.EventContentId;
    let StageSelectImagePath = self.StageSelectImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Bpm = self.Bpm;
    let Bgm = self.Bgm;
    let BgmNameText = self.BgmNameText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BgmArtistText = self.BgmArtistText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HasLyricist = self.HasLyricist;
    let BgmComposerText = self.BgmComposerText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BgmLength = self.BgmLength;
    MiniGameRhythmBgmExcel::create(_fbb, &MiniGameRhythmBgmExcelArgs{
      RhythmBgmId,
      EventContentId,
      StageSelectImagePath,
      Bpm,
      Bgm,
      BgmNameText,
      BgmArtistText,
      HasLyricist,
      BgmComposerText,
      BgmLength,
    })
  }
}
