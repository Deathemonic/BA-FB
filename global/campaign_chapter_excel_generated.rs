// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CampaignChapterExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CampaignChapterExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CampaignChapterExcel<'a> {
  type Inner = CampaignChapterExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CampaignChapterExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_NORMALIMAGEPATH: flatbuffers::VOffsetT = 8;
  pub const VT_HARDIMAGEPATH: flatbuffers::VOffsetT = 10;
  pub const VT_ORDER: flatbuffers::VOffsetT = 12;
  pub const VT_PRECHAPTERID: flatbuffers::VOffsetT = 14;
  pub const VT_CHAPTERREWARDID: flatbuffers::VOffsetT = 16;
  pub const VT_CHAPTERHARDREWARDID: flatbuffers::VOffsetT = 18;
  pub const VT_CHAPTERVERYHARDREWARDID: flatbuffers::VOffsetT = 20;
  pub const VT_NORMALCAMPAIGNSTAGEID: flatbuffers::VOffsetT = 22;
  pub const VT_NORMALEXTRASTAGEID: flatbuffers::VOffsetT = 24;
  pub const VT_HARDCAMPAIGNSTAGEID: flatbuffers::VOffsetT = 26;
  pub const VT_VERYHARDCAMPAIGNSTAGEID: flatbuffers::VOffsetT = 28;
  pub const VT_ISTACTICSKIP: flatbuffers::VOffsetT = 30;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CampaignChapterExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CampaignChapterExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CampaignChapterExcel<'bldr>> {
    let mut builder = CampaignChapterExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CampaignChapter");
      let x = args.ChapterVeryHardRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChapterVeryHardRewardId(x);
      let x = args.ChapterHardRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChapterHardRewardId(x);
      let x = args.ChapterRewardId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChapterRewardId(x);
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Order(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.VeryHardCampaignStageId {
        builder.add_VeryHardCampaignStageId(x);
      }
      if let Some(x) = args.HardCampaignStageId {
        builder.add_HardCampaignStageId(x);
      }
      if let Some(x) = args.NormalExtraStageId {
        builder.add_NormalExtraStageId(x);
      }
      if let Some(x) = args.NormalCampaignStageId {
        builder.add_NormalCampaignStageId(x);
      }
      if let Some(x) = args.PreChapterId {
        builder.add_PreChapterId(x);
      }
      if let Some(x) = args.HardImagePath {
        builder.add_HardImagePath(x);
      }
      if let Some(x) = args.NormalImagePath {
        builder.add_NormalImagePath(x);
      }
      if let Some(x) = args.Name {
        builder.add_Name(x);
      }
      builder.add_IsTacticSkip(args.IsTacticSkip);
    builder.finish()
  }

  pub fn unpack(&self) -> CampaignChapterExcelT {
    let key = table_encryption_service::create_key(b"CampaignChapter");
      let Id = self.Id();
    let Name = self.Name().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let NormalImagePath = self.NormalImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let HardImagePath = self.HardImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let Order = self.Order();
    let PreChapterId = self.PreChapterId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let ChapterRewardId = self.ChapterRewardId();
      let ChapterHardRewardId = self.ChapterHardRewardId();
      let ChapterVeryHardRewardId = self.ChapterVeryHardRewardId();
    let NormalCampaignStageId = self.NormalCampaignStageId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let NormalExtraStageId = self.NormalExtraStageId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let HardCampaignStageId = self.HardCampaignStageId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let VeryHardCampaignStageId = self.VeryHardCampaignStageId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let IsTacticSkip = self.IsTacticSkip();
    CampaignChapterExcelT {
      Id,
      Name,
      NormalImagePath,
      HardImagePath,
      Order,
      PreChapterId,
      ChapterRewardId,
      ChapterHardRewardId,
      ChapterVeryHardRewardId,
      NormalCampaignStageId,
      NormalExtraStageId,
      HardCampaignStageId,
      VeryHardCampaignStageId,
      IsTacticSkip,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignChapterExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignChapterExcel::VT_NAME, None)}
  }
  #[inline]
  pub fn NormalImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignChapterExcel::VT_NORMALIMAGEPATH, None)}
  }
  #[inline]
  pub fn HardImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CampaignChapterExcel::VT_HARDIMAGEPATH, None)}
  }
  #[inline]
  pub fn Order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignChapterExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PreChapterId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignChapterExcel::VT_PRECHAPTERID, None)}
  }
  #[inline]
  pub fn ChapterRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignChapterExcel::VT_CHAPTERREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChapterHardRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignChapterExcel::VT_CHAPTERHARDREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ChapterVeryHardRewardId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CampaignChapterExcel::VT_CHAPTERVERYHARDREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NormalCampaignStageId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignChapterExcel::VT_NORMALCAMPAIGNSTAGEID, None)}
  }
  #[inline]
  pub fn NormalExtraStageId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignChapterExcel::VT_NORMALEXTRASTAGEID, None)}
  }
  #[inline]
  pub fn HardCampaignStageId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignChapterExcel::VT_HARDCAMPAIGNSTAGEID, None)}
  }
  #[inline]
  pub fn VeryHardCampaignStageId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CampaignChapterExcel::VT_VERYHARDCAMPAIGNSTAGEID, None)}
  }
  #[inline]
  pub fn IsTacticSkip(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CampaignChapterExcel::VT_ISTACTICSKIP, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CampaignChapterExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NormalImagePath", Self::VT_NORMALIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("HardImagePath", Self::VT_HARDIMAGEPATH, false)?
     .visit_field::<i64>("Order", Self::VT_ORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("PreChapterId", Self::VT_PRECHAPTERID, false)?
     .visit_field::<i64>("ChapterRewardId", Self::VT_CHAPTERREWARDID, false)?
     .visit_field::<i64>("ChapterHardRewardId", Self::VT_CHAPTERHARDREWARDID, false)?
     .visit_field::<i64>("ChapterVeryHardRewardId", Self::VT_CHAPTERVERYHARDREWARDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("NormalCampaignStageId", Self::VT_NORMALCAMPAIGNSTAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("NormalExtraStageId", Self::VT_NORMALEXTRASTAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("HardCampaignStageId", Self::VT_HARDCAMPAIGNSTAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("VeryHardCampaignStageId", Self::VT_VERYHARDCAMPAIGNSTAGEID, false)?
     .visit_field::<bool>("IsTacticSkip", Self::VT_ISTACTICSKIP, false)?
     .finish();
    Ok(())
  }
}
pub struct CampaignChapterExcelArgs<'a> {
    pub Id: i64,
    pub Name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub NormalImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub HardImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub Order: i64,
    pub PreChapterId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub ChapterRewardId: i64,
    pub ChapterHardRewardId: i64,
    pub ChapterVeryHardRewardId: i64,
    pub NormalCampaignStageId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub NormalExtraStageId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub HardCampaignStageId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub VeryHardCampaignStageId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub IsTacticSkip: bool,
}
impl<'a> Default for CampaignChapterExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CampaignChapterExcelArgs {
      Id: 0,
      Name: None,
      NormalImagePath: None,
      HardImagePath: None,
      Order: 0,
      PreChapterId: None,
      ChapterRewardId: 0,
      ChapterHardRewardId: 0,
      ChapterVeryHardRewardId: 0,
      NormalCampaignStageId: None,
      NormalExtraStageId: None,
      HardCampaignStageId: None,
      VeryHardCampaignStageId: None,
      IsTacticSkip: false,
    }
  }
}

impl Serialize for CampaignChapterExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CampaignChapterExcel", 14)?;
      s.serialize_field("Id", &self.Id())?;
      if let Some(f) = self.Name() {
        s.serialize_field("Name", &f)?;
      } else {
        s.skip_field("Name")?;
      }
      if let Some(f) = self.NormalImagePath() {
        s.serialize_field("NormalImagePath", &f)?;
      } else {
        s.skip_field("NormalImagePath")?;
      }
      if let Some(f) = self.HardImagePath() {
        s.serialize_field("HardImagePath", &f)?;
      } else {
        s.skip_field("HardImagePath")?;
      }
      s.serialize_field("Order", &self.Order())?;
      if let Some(f) = self.PreChapterId() {
        s.serialize_field("PreChapterId", &f)?;
      } else {
        s.skip_field("PreChapterId")?;
      }
      s.serialize_field("ChapterRewardId", &self.ChapterRewardId())?;
      s.serialize_field("ChapterHardRewardId", &self.ChapterHardRewardId())?;
      s.serialize_field("ChapterVeryHardRewardId", &self.ChapterVeryHardRewardId())?;
      if let Some(f) = self.NormalCampaignStageId() {
        s.serialize_field("NormalCampaignStageId", &f)?;
      } else {
        s.skip_field("NormalCampaignStageId")?;
      }
      if let Some(f) = self.NormalExtraStageId() {
        s.serialize_field("NormalExtraStageId", &f)?;
      } else {
        s.skip_field("NormalExtraStageId")?;
      }
      if let Some(f) = self.HardCampaignStageId() {
        s.serialize_field("HardCampaignStageId", &f)?;
      } else {
        s.skip_field("HardCampaignStageId")?;
      }
      if let Some(f) = self.VeryHardCampaignStageId() {
        s.serialize_field("VeryHardCampaignStageId", &f)?;
      } else {
        s.skip_field("VeryHardCampaignStageId")?;
      }
      s.serialize_field("IsTacticSkip", &self.IsTacticSkip())?;
    s.end()
  }
}

pub struct CampaignChapterExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CampaignChapterExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CampaignChapterExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Name(&mut self, Name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_NAME, Name);
  }
  #[inline]
  pub fn add_NormalImagePath(&mut self, NormalImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_NORMALIMAGEPATH, NormalImagePath);
  }
  #[inline]
  pub fn add_HardImagePath(&mut self, HardImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_HARDIMAGEPATH, HardImagePath);
  }
  #[inline]
  pub fn add_Order(&mut self, Order: i64) {
    self.fbb_.push_slot::<i64>(CampaignChapterExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_PreChapterId(&mut self, PreChapterId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_PRECHAPTERID, PreChapterId);
  }
  #[inline]
  pub fn add_ChapterRewardId(&mut self, ChapterRewardId: i64) {
    self.fbb_.push_slot::<i64>(CampaignChapterExcel::VT_CHAPTERREWARDID, ChapterRewardId, 0);
  }
  #[inline]
  pub fn add_ChapterHardRewardId(&mut self, ChapterHardRewardId: i64) {
    self.fbb_.push_slot::<i64>(CampaignChapterExcel::VT_CHAPTERHARDREWARDID, ChapterHardRewardId, 0);
  }
  #[inline]
  pub fn add_ChapterVeryHardRewardId(&mut self, ChapterVeryHardRewardId: i64) {
    self.fbb_.push_slot::<i64>(CampaignChapterExcel::VT_CHAPTERVERYHARDREWARDID, ChapterVeryHardRewardId, 0);
  }
  #[inline]
  pub fn add_NormalCampaignStageId(&mut self, NormalCampaignStageId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_NORMALCAMPAIGNSTAGEID, NormalCampaignStageId);
  }
  #[inline]
  pub fn add_NormalExtraStageId(&mut self, NormalExtraStageId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_NORMALEXTRASTAGEID, NormalExtraStageId);
  }
  #[inline]
  pub fn add_HardCampaignStageId(&mut self, HardCampaignStageId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_HARDCAMPAIGNSTAGEID, HardCampaignStageId);
  }
  #[inline]
  pub fn add_VeryHardCampaignStageId(&mut self, VeryHardCampaignStageId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CampaignChapterExcel::VT_VERYHARDCAMPAIGNSTAGEID, VeryHardCampaignStageId);
  }
  #[inline]
  pub fn add_IsTacticSkip(&mut self, IsTacticSkip: bool) {
    self.fbb_.push_slot::<bool>(CampaignChapterExcel::VT_ISTACTICSKIP, IsTacticSkip, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CampaignChapterExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CampaignChapterExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CampaignChapterExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CampaignChapterExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CampaignChapterExcel");
      ds.field("Id", &self.Id());
      ds.field("Name", &self.Name());
      ds.field("NormalImagePath", &self.NormalImagePath());
      ds.field("HardImagePath", &self.HardImagePath());
      ds.field("Order", &self.Order());
      ds.field("PreChapterId", &self.PreChapterId());
      ds.field("ChapterRewardId", &self.ChapterRewardId());
      ds.field("ChapterHardRewardId", &self.ChapterHardRewardId());
      ds.field("ChapterVeryHardRewardId", &self.ChapterVeryHardRewardId());
      ds.field("NormalCampaignStageId", &self.NormalCampaignStageId());
      ds.field("NormalExtraStageId", &self.NormalExtraStageId());
      ds.field("HardCampaignStageId", &self.HardCampaignStageId());
      ds.field("VeryHardCampaignStageId", &self.VeryHardCampaignStageId());
      ds.field("IsTacticSkip", &self.IsTacticSkip());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CampaignChapterExcelT {
  pub Id: i64,
  pub Name: Option<String>,
  pub NormalImagePath: Option<String>,
  pub HardImagePath: Option<String>,
  pub Order: i64,
  pub PreChapterId: Option<Vec<i64>>,
  pub ChapterRewardId: i64,
  pub ChapterHardRewardId: i64,
  pub ChapterVeryHardRewardId: i64,
  pub NormalCampaignStageId: Option<Vec<i64>>,
  pub NormalExtraStageId: Option<Vec<i64>>,
  pub HardCampaignStageId: Option<Vec<i64>>,
  pub VeryHardCampaignStageId: Option<Vec<i64>>,
  pub IsTacticSkip: bool,
}
impl Default for CampaignChapterExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Name: None,
      NormalImagePath: None,
      HardImagePath: None,
      Order: 0,
      PreChapterId: None,
      ChapterRewardId: 0,
      ChapterHardRewardId: 0,
      ChapterVeryHardRewardId: 0,
      NormalCampaignStageId: None,
      NormalExtraStageId: None,
      HardCampaignStageId: None,
      VeryHardCampaignStageId: None,
      IsTacticSkip: false,
    }
  }
}
impl CampaignChapterExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CampaignChapterExcel<'b>> {
    let Id = self.Id;
    let Name = self.Name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let NormalImagePath = self.NormalImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let HardImagePath = self.HardImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let Order = self.Order;
    let PreChapterId = self.PreChapterId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ChapterRewardId = self.ChapterRewardId;
    let ChapterHardRewardId = self.ChapterHardRewardId;
    let ChapterVeryHardRewardId = self.ChapterVeryHardRewardId;
    let NormalCampaignStageId = self.NormalCampaignStageId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let NormalExtraStageId = self.NormalExtraStageId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let HardCampaignStageId = self.HardCampaignStageId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let VeryHardCampaignStageId = self.VeryHardCampaignStageId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let IsTacticSkip = self.IsTacticSkip;
    CampaignChapterExcel::create(_fbb, &CampaignChapterExcelArgs{
      Id,
      Name,
      NormalImagePath,
      HardImagePath,
      Order,
      PreChapterId,
      ChapterRewardId,
      ChapterHardRewardId,
      ChapterVeryHardRewardId,
      NormalCampaignStageId,
      NormalExtraStageId,
      HardCampaignStageId,
      VeryHardCampaignStageId,
      IsTacticSkip,
    })
  }
}
