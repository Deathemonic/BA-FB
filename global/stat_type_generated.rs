// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_STAT_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_STAT_TYPE: i32 = 83;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STAT_TYPE: [StatType; 84] = [
  StatType::None,
  StatType::MaxHP,
  StatType::AttackPower,
  StatType::DefensePower,
  StatType::HealPower,
  StatType::AccuracyPoint,
  StatType::AccuracyRate,
  StatType::DodgePoint,
  StatType::DodgeRate,
  StatType::CriticalPoint,
  StatType::CriticalChanceRate,
  StatType::CriticalResistChanceRate,
  StatType::CriticalDamageRate,
  StatType::MoveSpeed,
  StatType::SightRange,
  StatType::ActiveGauge,
  StatType::StabilityPoint,
  StatType::StabilityRate,
  StatType::ReloadTime,
  StatType::MaxBulletCount,
  StatType::IgnoreDelayCount,
  StatType::WeaponRange,
  StatType::BlockRate,
  StatType::BodyRadius,
  StatType::ActionCount,
  StatType::StrategyMobility,
  StatType::StrategySightRange,
  StatType::StreetBattleAdaptation,
  StatType::OutdoorBattleAdaptation,
  StatType::IndoorBattleAdaptation,
  StatType::HealEffectivenessRate,
  StatType::CriticalChanceResistPoint,
  StatType::CriticalDamageResistRate,
  StatType::LifeRecoverOnHit,
  StatType::NormalAttackSpeed,
  StatType::AmmoCost,
  StatType::GroggyGauge,
  StatType::GroggyTime,
  StatType::DamageRatio,
  StatType::DamagedRatio,
  StatType::OppressionPower,
  StatType::OppressionResist,
  StatType::RegenCost,
  StatType::InitialWeaponRangeRate,
  StatType::DefensePenetration,
  StatType::DefensePenetrationResisit,
  StatType::ExtendBuffDuration,
  StatType::ExtendDebuffDuration,
  StatType::ExtendCrowdControlDuration,
  StatType::EnhanceExplosionRate,
  StatType::EnhancePierceRate,
  StatType::EnhanceMysticRate,
  StatType::EnhanceLightArmorRate,
  StatType::EnhanceHeavyArmorRate,
  StatType::EnhanceUnarmedRate,
  StatType::EnhanceSiegeRate,
  StatType::EnhanceNormalRate,
  StatType::EnhanceStructureRate,
  StatType::EnhanceNormalArmorRate,
  StatType::DamageRatio2Increase,
  StatType::DamageRatio2Decrease,
  StatType::DamagedRatio2Increase,
  StatType::DamagedRatio2Decrease,
  StatType::EnhanceSonicRate,
  StatType::EnhanceElasticArmorRate,
  StatType::ExDamagedRatioIncrease,
  StatType::ExDamagedRatioDecrease,
  StatType::EnhanceExDamageRate,
  StatType::ReduceExDamagedRate,
  StatType::HealRate,
  StatType::HealLightArmorRate,
  StatType::HealHeavyArmorRate,
  StatType::HealUnarmedRate,
  StatType::HealElasticArmorRate,
  StatType::HealNormalArmorRate,
  StatType::HealedExplosionRate,
  StatType::HealedPierceRate,
  StatType::HealedMysticRate,
  StatType::HealedSonicRate,
  StatType::HealedNormalRate,
  StatType::GrowthScore,
  StatType::CharacterBulletTypeEnhanceRate,
  StatType::MaxCostIncrease,
  StatType::Max,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct StatType(pub i32);
#[allow(non_upper_case_globals)]
impl StatType {
  pub const None: Self = Self(0);
  pub const MaxHP: Self = Self(1);
  pub const AttackPower: Self = Self(2);
  pub const DefensePower: Self = Self(3);
  pub const HealPower: Self = Self(4);
  pub const AccuracyPoint: Self = Self(5);
  pub const AccuracyRate: Self = Self(6);
  pub const DodgePoint: Self = Self(7);
  pub const DodgeRate: Self = Self(8);
  pub const CriticalPoint: Self = Self(9);
  pub const CriticalChanceRate: Self = Self(10);
  pub const CriticalResistChanceRate: Self = Self(11);
  pub const CriticalDamageRate: Self = Self(12);
  pub const MoveSpeed: Self = Self(13);
  pub const SightRange: Self = Self(14);
  pub const ActiveGauge: Self = Self(15);
  pub const StabilityPoint: Self = Self(16);
  pub const StabilityRate: Self = Self(17);
  pub const ReloadTime: Self = Self(18);
  pub const MaxBulletCount: Self = Self(19);
  pub const IgnoreDelayCount: Self = Self(20);
  pub const WeaponRange: Self = Self(21);
  pub const BlockRate: Self = Self(22);
  pub const BodyRadius: Self = Self(23);
  pub const ActionCount: Self = Self(24);
  pub const StrategyMobility: Self = Self(25);
  pub const StrategySightRange: Self = Self(26);
  pub const StreetBattleAdaptation: Self = Self(27);
  pub const OutdoorBattleAdaptation: Self = Self(28);
  pub const IndoorBattleAdaptation: Self = Self(29);
  pub const HealEffectivenessRate: Self = Self(30);
  pub const CriticalChanceResistPoint: Self = Self(31);
  pub const CriticalDamageResistRate: Self = Self(32);
  pub const LifeRecoverOnHit: Self = Self(33);
  pub const NormalAttackSpeed: Self = Self(34);
  pub const AmmoCost: Self = Self(35);
  pub const GroggyGauge: Self = Self(36);
  pub const GroggyTime: Self = Self(37);
  pub const DamageRatio: Self = Self(38);
  pub const DamagedRatio: Self = Self(39);
  pub const OppressionPower: Self = Self(40);
  pub const OppressionResist: Self = Self(41);
  pub const RegenCost: Self = Self(42);
  pub const InitialWeaponRangeRate: Self = Self(43);
  pub const DefensePenetration: Self = Self(44);
  pub const DefensePenetrationResisit: Self = Self(45);
  pub const ExtendBuffDuration: Self = Self(46);
  pub const ExtendDebuffDuration: Self = Self(47);
  pub const ExtendCrowdControlDuration: Self = Self(48);
  pub const EnhanceExplosionRate: Self = Self(49);
  pub const EnhancePierceRate: Self = Self(50);
  pub const EnhanceMysticRate: Self = Self(51);
  pub const EnhanceLightArmorRate: Self = Self(52);
  pub const EnhanceHeavyArmorRate: Self = Self(53);
  pub const EnhanceUnarmedRate: Self = Self(54);
  pub const EnhanceSiegeRate: Self = Self(55);
  pub const EnhanceNormalRate: Self = Self(56);
  pub const EnhanceStructureRate: Self = Self(57);
  pub const EnhanceNormalArmorRate: Self = Self(58);
  pub const DamageRatio2Increase: Self = Self(59);
  pub const DamageRatio2Decrease: Self = Self(60);
  pub const DamagedRatio2Increase: Self = Self(61);
  pub const DamagedRatio2Decrease: Self = Self(62);
  pub const EnhanceSonicRate: Self = Self(63);
  pub const EnhanceElasticArmorRate: Self = Self(64);
  pub const ExDamagedRatioIncrease: Self = Self(65);
  pub const ExDamagedRatioDecrease: Self = Self(66);
  pub const EnhanceExDamageRate: Self = Self(67);
  pub const ReduceExDamagedRate: Self = Self(68);
  pub const HealRate: Self = Self(69);
  pub const HealLightArmorRate: Self = Self(70);
  pub const HealHeavyArmorRate: Self = Self(71);
  pub const HealUnarmedRate: Self = Self(72);
  pub const HealElasticArmorRate: Self = Self(73);
  pub const HealNormalArmorRate: Self = Self(74);
  pub const HealedExplosionRate: Self = Self(75);
  pub const HealedPierceRate: Self = Self(76);
  pub const HealedMysticRate: Self = Self(77);
  pub const HealedSonicRate: Self = Self(78);
  pub const HealedNormalRate: Self = Self(79);
  pub const GrowthScore: Self = Self(80);
  pub const CharacterBulletTypeEnhanceRate: Self = Self(81);
  pub const MaxCostIncrease: Self = Self(82);
  pub const Max: Self = Self(83);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 83;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::MaxHP,
    Self::AttackPower,
    Self::DefensePower,
    Self::HealPower,
    Self::AccuracyPoint,
    Self::AccuracyRate,
    Self::DodgePoint,
    Self::DodgeRate,
    Self::CriticalPoint,
    Self::CriticalChanceRate,
    Self::CriticalResistChanceRate,
    Self::CriticalDamageRate,
    Self::MoveSpeed,
    Self::SightRange,
    Self::ActiveGauge,
    Self::StabilityPoint,
    Self::StabilityRate,
    Self::ReloadTime,
    Self::MaxBulletCount,
    Self::IgnoreDelayCount,
    Self::WeaponRange,
    Self::BlockRate,
    Self::BodyRadius,
    Self::ActionCount,
    Self::StrategyMobility,
    Self::StrategySightRange,
    Self::StreetBattleAdaptation,
    Self::OutdoorBattleAdaptation,
    Self::IndoorBattleAdaptation,
    Self::HealEffectivenessRate,
    Self::CriticalChanceResistPoint,
    Self::CriticalDamageResistRate,
    Self::LifeRecoverOnHit,
    Self::NormalAttackSpeed,
    Self::AmmoCost,
    Self::GroggyGauge,
    Self::GroggyTime,
    Self::DamageRatio,
    Self::DamagedRatio,
    Self::OppressionPower,
    Self::OppressionResist,
    Self::RegenCost,
    Self::InitialWeaponRangeRate,
    Self::DefensePenetration,
    Self::DefensePenetrationResisit,
    Self::ExtendBuffDuration,
    Self::ExtendDebuffDuration,
    Self::ExtendCrowdControlDuration,
    Self::EnhanceExplosionRate,
    Self::EnhancePierceRate,
    Self::EnhanceMysticRate,
    Self::EnhanceLightArmorRate,
    Self::EnhanceHeavyArmorRate,
    Self::EnhanceUnarmedRate,
    Self::EnhanceSiegeRate,
    Self::EnhanceNormalRate,
    Self::EnhanceStructureRate,
    Self::EnhanceNormalArmorRate,
    Self::DamageRatio2Increase,
    Self::DamageRatio2Decrease,
    Self::DamagedRatio2Increase,
    Self::DamagedRatio2Decrease,
    Self::EnhanceSonicRate,
    Self::EnhanceElasticArmorRate,
    Self::ExDamagedRatioIncrease,
    Self::ExDamagedRatioDecrease,
    Self::EnhanceExDamageRate,
    Self::ReduceExDamagedRate,
    Self::HealRate,
    Self::HealLightArmorRate,
    Self::HealHeavyArmorRate,
    Self::HealUnarmedRate,
    Self::HealElasticArmorRate,
    Self::HealNormalArmorRate,
    Self::HealedExplosionRate,
    Self::HealedPierceRate,
    Self::HealedMysticRate,
    Self::HealedSonicRate,
    Self::HealedNormalRate,
    Self::GrowthScore,
    Self::CharacterBulletTypeEnhanceRate,
    Self::MaxCostIncrease,
    Self::Max,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::MaxHP => Some("MaxHP"),
      Self::AttackPower => Some("AttackPower"),
      Self::DefensePower => Some("DefensePower"),
      Self::HealPower => Some("HealPower"),
      Self::AccuracyPoint => Some("AccuracyPoint"),
      Self::AccuracyRate => Some("AccuracyRate"),
      Self::DodgePoint => Some("DodgePoint"),
      Self::DodgeRate => Some("DodgeRate"),
      Self::CriticalPoint => Some("CriticalPoint"),
      Self::CriticalChanceRate => Some("CriticalChanceRate"),
      Self::CriticalResistChanceRate => Some("CriticalResistChanceRate"),
      Self::CriticalDamageRate => Some("CriticalDamageRate"),
      Self::MoveSpeed => Some("MoveSpeed"),
      Self::SightRange => Some("SightRange"),
      Self::ActiveGauge => Some("ActiveGauge"),
      Self::StabilityPoint => Some("StabilityPoint"),
      Self::StabilityRate => Some("StabilityRate"),
      Self::ReloadTime => Some("ReloadTime"),
      Self::MaxBulletCount => Some("MaxBulletCount"),
      Self::IgnoreDelayCount => Some("IgnoreDelayCount"),
      Self::WeaponRange => Some("WeaponRange"),
      Self::BlockRate => Some("BlockRate"),
      Self::BodyRadius => Some("BodyRadius"),
      Self::ActionCount => Some("ActionCount"),
      Self::StrategyMobility => Some("StrategyMobility"),
      Self::StrategySightRange => Some("StrategySightRange"),
      Self::StreetBattleAdaptation => Some("StreetBattleAdaptation"),
      Self::OutdoorBattleAdaptation => Some("OutdoorBattleAdaptation"),
      Self::IndoorBattleAdaptation => Some("IndoorBattleAdaptation"),
      Self::HealEffectivenessRate => Some("HealEffectivenessRate"),
      Self::CriticalChanceResistPoint => Some("CriticalChanceResistPoint"),
      Self::CriticalDamageResistRate => Some("CriticalDamageResistRate"),
      Self::LifeRecoverOnHit => Some("LifeRecoverOnHit"),
      Self::NormalAttackSpeed => Some("NormalAttackSpeed"),
      Self::AmmoCost => Some("AmmoCost"),
      Self::GroggyGauge => Some("GroggyGauge"),
      Self::GroggyTime => Some("GroggyTime"),
      Self::DamageRatio => Some("DamageRatio"),
      Self::DamagedRatio => Some("DamagedRatio"),
      Self::OppressionPower => Some("OppressionPower"),
      Self::OppressionResist => Some("OppressionResist"),
      Self::RegenCost => Some("RegenCost"),
      Self::InitialWeaponRangeRate => Some("InitialWeaponRangeRate"),
      Self::DefensePenetration => Some("DefensePenetration"),
      Self::DefensePenetrationResisit => Some("DefensePenetrationResisit"),
      Self::ExtendBuffDuration => Some("ExtendBuffDuration"),
      Self::ExtendDebuffDuration => Some("ExtendDebuffDuration"),
      Self::ExtendCrowdControlDuration => Some("ExtendCrowdControlDuration"),
      Self::EnhanceExplosionRate => Some("EnhanceExplosionRate"),
      Self::EnhancePierceRate => Some("EnhancePierceRate"),
      Self::EnhanceMysticRate => Some("EnhanceMysticRate"),
      Self::EnhanceLightArmorRate => Some("EnhanceLightArmorRate"),
      Self::EnhanceHeavyArmorRate => Some("EnhanceHeavyArmorRate"),
      Self::EnhanceUnarmedRate => Some("EnhanceUnarmedRate"),
      Self::EnhanceSiegeRate => Some("EnhanceSiegeRate"),
      Self::EnhanceNormalRate => Some("EnhanceNormalRate"),
      Self::EnhanceStructureRate => Some("EnhanceStructureRate"),
      Self::EnhanceNormalArmorRate => Some("EnhanceNormalArmorRate"),
      Self::DamageRatio2Increase => Some("DamageRatio2Increase"),
      Self::DamageRatio2Decrease => Some("DamageRatio2Decrease"),
      Self::DamagedRatio2Increase => Some("DamagedRatio2Increase"),
      Self::DamagedRatio2Decrease => Some("DamagedRatio2Decrease"),
      Self::EnhanceSonicRate => Some("EnhanceSonicRate"),
      Self::EnhanceElasticArmorRate => Some("EnhanceElasticArmorRate"),
      Self::ExDamagedRatioIncrease => Some("ExDamagedRatioIncrease"),
      Self::ExDamagedRatioDecrease => Some("ExDamagedRatioDecrease"),
      Self::EnhanceExDamageRate => Some("EnhanceExDamageRate"),
      Self::ReduceExDamagedRate => Some("ReduceExDamagedRate"),
      Self::HealRate => Some("HealRate"),
      Self::HealLightArmorRate => Some("HealLightArmorRate"),
      Self::HealHeavyArmorRate => Some("HealHeavyArmorRate"),
      Self::HealUnarmedRate => Some("HealUnarmedRate"),
      Self::HealElasticArmorRate => Some("HealElasticArmorRate"),
      Self::HealNormalArmorRate => Some("HealNormalArmorRate"),
      Self::HealedExplosionRate => Some("HealedExplosionRate"),
      Self::HealedPierceRate => Some("HealedPierceRate"),
      Self::HealedMysticRate => Some("HealedMysticRate"),
      Self::HealedSonicRate => Some("HealedSonicRate"),
      Self::HealedNormalRate => Some("HealedNormalRate"),
      Self::GrowthScore => Some("GrowthScore"),
      Self::CharacterBulletTypeEnhanceRate => Some("CharacterBulletTypeEnhanceRate"),
      Self::MaxCostIncrease => Some("MaxCostIncrease"),
      Self::Max => Some("Max"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for StatType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for StatType {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("StatType", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for StatType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for StatType {
    type Output = StatType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for StatType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for StatType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for StatType {}
