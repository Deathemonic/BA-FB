// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentZoneExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentZoneExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentZoneExcel<'a> {
  type Inner = EventContentZoneExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentZoneExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ORIGINALZONEID: flatbuffers::VOffsetT = 6;
  pub const VT_LOCATIONID: flatbuffers::VOffsetT = 8;
  pub const VT_LOCATIONRANK: flatbuffers::VOffsetT = 10;
  pub const VT_EVENTPOINTFORLOCATIONRANK: flatbuffers::VOffsetT = 12;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 14;
  pub const VT_STUDENTVISITPROB: flatbuffers::VOffsetT = 16;
  pub const VT_REWARDGROUPID: flatbuffers::VOffsetT = 18;
  pub const VT_TAGS: flatbuffers::VOffsetT = 20;
  pub const VT_WHITELISTTAGS: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentZoneExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentZoneExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentZoneExcel<'bldr>> {
    let mut builder = EventContentZoneExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentZone");
      let x = args.RewardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardGroupId(x);
      let x = args.EventPointForLocationRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventPointForLocationRank(x);
      let x = args.LocationRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LocationRank(x);
      let x = args.LocationId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LocationId(x);
      let x = args.OriginalZoneId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OriginalZoneId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.whiteListTags {
        builder.add_whiteListTags(x);
      }
      if let Some(x) = args.tags {
        builder.add_tags(x);
      }
      if let Some(x) = args.studentVisitProb {
        builder.add_studentVisitProb(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentZoneExcelT {
    let key = table_encryption_service::create_key(b"EventContentZone");
      let Id = self.Id();
      let OriginalZoneId = self.OriginalZoneId();
      let LocationId = self.LocationId();
      let LocationRank = self.LocationRank();
      let EventPointForLocationRank = self.EventPointForLocationRank();
      let LocalizeEtcId = self.LocalizeEtcId();
    let studentVisitProb = self.studentVisitProb().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let RewardGroupId = self.RewardGroupId();
    let tags = self.tags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let whiteListTags = self.whiteListTags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    EventContentZoneExcelT {
      Id,
      OriginalZoneId,
      LocationId,
      LocationRank,
      EventPointForLocationRank,
      LocalizeEtcId,
      studentVisitProb,
      RewardGroupId,
      tags,
      whiteListTags,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OriginalZoneId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneExcel::VT_ORIGINALZONEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocationId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneExcel::VT_LOCATIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocationRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneExcel::VT_LOCATIONRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventPointForLocationRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneExcel::VT_EVENTPOINTFORLOCATIONRANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentZoneExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn studentVisitProb(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(EventContentZoneExcel::VT_STUDENTVISITPROB, None)}
  }
  #[inline]
  pub fn RewardGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentZoneExcel::VT_REWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(EventContentZoneExcel::VT_TAGS, None)}
  }
  #[inline]
  pub fn whiteListTags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(EventContentZoneExcel::VT_WHITELISTTAGS, None)}
  }
}

impl flatbuffers::Verifiable for EventContentZoneExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("OriginalZoneId", Self::VT_ORIGINALZONEID, false)?
     .visit_field::<i64>("LocationId", Self::VT_LOCATIONID, false)?
     .visit_field::<i64>("LocationRank", Self::VT_LOCATIONRANK, false)?
     .visit_field::<i64>("EventPointForLocationRank", Self::VT_EVENTPOINTFORLOCATIONRANK, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("studentVisitProb", Self::VT_STUDENTVISITPROB, false)?
     .visit_field::<i64>("RewardGroupId", Self::VT_REWARDGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("whiteListTags", Self::VT_WHITELISTTAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentZoneExcelArgs<'a> {
    pub Id: i64,
    pub OriginalZoneId: i64,
    pub LocationId: i64,
    pub LocationRank: i64,
    pub EventPointForLocationRank: i64,
    pub LocalizeEtcId: u32,
    pub studentVisitProb: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub RewardGroupId: i64,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub whiteListTags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
}
impl<'a> Default for EventContentZoneExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentZoneExcelArgs {
      Id: 0,
      OriginalZoneId: 0,
      LocationId: 0,
      LocationRank: 0,
      EventPointForLocationRank: 0,
      LocalizeEtcId: 0,
      studentVisitProb: None,
      RewardGroupId: 0,
      tags: None,
      whiteListTags: None,
    }
  }
}

impl Serialize for EventContentZoneExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentZoneExcel", 10)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("OriginalZoneId", &self.OriginalZoneId())?;
      s.serialize_field("LocationId", &self.LocationId())?;
      s.serialize_field("LocationRank", &self.LocationRank())?;
      s.serialize_field("EventPointForLocationRank", &self.EventPointForLocationRank())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.studentVisitProb() {
        s.serialize_field("studentVisitProb", &f)?;
      } else {
        s.skip_field("studentVisitProb")?;
      }
      s.serialize_field("RewardGroupId", &self.RewardGroupId())?;
      if let Some(f) = self.tags() {
        s.serialize_field("tags", &f)?;
      } else {
        s.skip_field("tags")?;
      }
      if let Some(f) = self.whiteListTags() {
        s.serialize_field("whiteListTags", &f)?;
      } else {
        s.skip_field("whiteListTags")?;
      }
    s.end()
  }
}

pub struct EventContentZoneExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentZoneExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_OriginalZoneId(&mut self, OriginalZoneId: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneExcel::VT_ORIGINALZONEID, OriginalZoneId, 0);
  }
  #[inline]
  pub fn add_LocationId(&mut self, LocationId: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneExcel::VT_LOCATIONID, LocationId, 0);
  }
  #[inline]
  pub fn add_LocationRank(&mut self, LocationRank: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneExcel::VT_LOCATIONRANK, LocationRank, 0);
  }
  #[inline]
  pub fn add_EventPointForLocationRank(&mut self, EventPointForLocationRank: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneExcel::VT_EVENTPOINTFORLOCATIONRANK, EventPointForLocationRank, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(EventContentZoneExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_studentVisitProb(&mut self, studentVisitProb: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneExcel::VT_STUDENTVISITPROB, studentVisitProb);
  }
  #[inline]
  pub fn add_RewardGroupId(&mut self, RewardGroupId: i64) {
    self.fbb_.push_slot::<i64>(EventContentZoneExcel::VT_REWARDGROUPID, RewardGroupId, 0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneExcel::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_whiteListTags(&mut self, whiteListTags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentZoneExcel::VT_WHITELISTTAGS, whiteListTags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentZoneExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentZoneExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentZoneExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentZoneExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentZoneExcel");
      ds.field("Id", &self.Id());
      ds.field("OriginalZoneId", &self.OriginalZoneId());
      ds.field("LocationId", &self.LocationId());
      ds.field("LocationRank", &self.LocationRank());
      ds.field("EventPointForLocationRank", &self.EventPointForLocationRank());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("studentVisitProb", &self.studentVisitProb());
      ds.field("RewardGroupId", &self.RewardGroupId());
      ds.field("tags", &self.tags());
      ds.field("whiteListTags", &self.whiteListTags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentZoneExcelT {
  pub Id: i64,
  pub OriginalZoneId: i64,
  pub LocationId: i64,
  pub LocationRank: i64,
  pub EventPointForLocationRank: i64,
  pub LocalizeEtcId: u32,
  pub studentVisitProb: Option<Vec<i64>>,
  pub RewardGroupId: i64,
  pub tags: Option<Vec<Tag>>,
  pub whiteListTags: Option<Vec<Tag>>,
}
impl Default for EventContentZoneExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      OriginalZoneId: 0,
      LocationId: 0,
      LocationRank: 0,
      EventPointForLocationRank: 0,
      LocalizeEtcId: 0,
      studentVisitProb: None,
      RewardGroupId: 0,
      tags: None,
      whiteListTags: None,
    }
  }
}
impl EventContentZoneExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentZoneExcel<'b>> {
    let Id = self.Id;
    let OriginalZoneId = self.OriginalZoneId;
    let LocationId = self.LocationId;
    let LocationRank = self.LocationRank;
    let EventPointForLocationRank = self.EventPointForLocationRank;
    let LocalizeEtcId = self.LocalizeEtcId;
    let studentVisitProb = self.studentVisitProb.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardGroupId = self.RewardGroupId;
    let tags = self.tags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let whiteListTags = self.whiteListTags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    EventContentZoneExcel::create(_fbb, &EventContentZoneExcelArgs{
      Id,
      OriginalZoneId,
      LocationId,
      LocationRank,
      EventPointForLocationRank,
      LocalizeEtcId,
      studentVisitProb,
      RewardGroupId,
      tags,
      whiteListTags,
    })
  }
}
