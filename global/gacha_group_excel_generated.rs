// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GachaGroupExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GachaGroupExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GachaGroupExcel<'a> {
  type Inner = GachaGroupExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GachaGroupExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAMEKR: flatbuffers::VOffsetT = 6;
  pub const VT_ISRECURSIVE: flatbuffers::VOffsetT = 8;
  pub const VT_GROUPTYPE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GachaGroupExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GachaGroupExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<GachaGroupExcel<'bldr>> {
    let mut builder = GachaGroupExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GachaGroup");
      let x = args.ID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ID(x);
      let x = args.GroupType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_GroupType(x);
      if let Some(x) = args.NameKr {
        builder.add_NameKr(x);
      }
      builder.add_IsRecursive(args.IsRecursive);
    builder.finish()
  }

  pub fn unpack(&self) -> GachaGroupExcelT {
    let key = table_encryption_service::create_key(b"GachaGroup");
      let ID = self.ID();
    let NameKr = self.NameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let IsRecursive = self.IsRecursive();
      let GroupType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.GroupType(), &key)
      } else {
        self.GroupType()
      };
    GachaGroupExcelT {
      ID,
      NameKr,
      IsRecursive,
      GroupType,
    }
  }

  #[inline]
  pub fn ID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GachaGroupExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GachaGroupExcel::VT_NAMEKR, None)}
  }
  #[inline]
  pub fn IsRecursive(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(GachaGroupExcel::VT_ISRECURSIVE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn GroupType(&self) -> GachaGroupType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GachaGroupType>(GachaGroupExcel::VT_GROUPTYPE, Some(GachaGroupType::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GachaGroupExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ID", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("NameKr", Self::VT_NAMEKR, false)?
     .visit_field::<bool>("IsRecursive", Self::VT_ISRECURSIVE, false)?
     .visit_field::<GachaGroupType>("GroupType", Self::VT_GROUPTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct GachaGroupExcelArgs<'a> {
    pub ID: i64,
    pub NameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub IsRecursive: bool,
    pub GroupType: GachaGroupType,
}
impl<'a> Default for GachaGroupExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    GachaGroupExcelArgs {
      ID: 0,
      NameKr: None,
      IsRecursive: false,
      GroupType: GachaGroupType::None,
    }
  }
}

impl Serialize for GachaGroupExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GachaGroupExcel", 4)?;
      s.serialize_field("ID", &self.ID())?;
      if let Some(f) = self.NameKr() {
        s.serialize_field("NameKr", &f)?;
      } else {
        s.skip_field("NameKr")?;
      }
      s.serialize_field("IsRecursive", &self.IsRecursive())?;
      s.serialize_field("GroupType", &self.GroupType())?;
    s.end()
  }
}

pub struct GachaGroupExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GachaGroupExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ID(&mut self, ID: i64) {
    self.fbb_.push_slot::<i64>(GachaGroupExcel::VT_ID, ID, 0);
  }
  #[inline]
  pub fn add_NameKr(&mut self, NameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GachaGroupExcel::VT_NAMEKR, NameKr);
  }
  #[inline]
  pub fn add_IsRecursive(&mut self, IsRecursive: bool) {
    self.fbb_.push_slot::<bool>(GachaGroupExcel::VT_ISRECURSIVE, IsRecursive, false);
  }
  #[inline]
  pub fn add_GroupType(&mut self, GroupType: GachaGroupType) {
    self.fbb_.push_slot::<GachaGroupType>(GachaGroupExcel::VT_GROUPTYPE, GroupType, GachaGroupType::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GachaGroupExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GachaGroupExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GachaGroupExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GachaGroupExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GachaGroupExcel");
      ds.field("ID", &self.ID());
      ds.field("NameKr", &self.NameKr());
      ds.field("IsRecursive", &self.IsRecursive());
      ds.field("GroupType", &self.GroupType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GachaGroupExcelT {
  pub ID: i64,
  pub NameKr: Option<String>,
  pub IsRecursive: bool,
  pub GroupType: GachaGroupType,
}
impl Default for GachaGroupExcelT {
  fn default() -> Self {
    Self {
      ID: 0,
      NameKr: None,
      IsRecursive: false,
      GroupType: GachaGroupType::None,
    }
  }
}
impl GachaGroupExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GachaGroupExcel<'b>> {
    let ID = self.ID;
    let NameKr = self.NameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let IsRecursive = self.IsRecursive;
    let GroupType = self.GroupType;
    GachaGroupExcel::create(_fbb, &GachaGroupExcelArgs{
      ID,
      NameKr,
      IsRecursive,
      GroupType,
    })
  }
}
