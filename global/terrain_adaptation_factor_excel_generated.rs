// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TerrainAdaptationFactorExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TerrainAdaptationFactorExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TerrainAdaptationFactorExcel<'a> {
  type Inner = TerrainAdaptationFactorExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TerrainAdaptationFactorExcel<'a> {
  pub const VT_TERRAINADAPTATION: flatbuffers::VOffsetT = 4;
  pub const VT_TERRAINADAPTATIONSTAT: flatbuffers::VOffsetT = 6;
  pub const VT_SHOTFACTOR: flatbuffers::VOffsetT = 8;
  pub const VT_BLOCKFACTOR: flatbuffers::VOffsetT = 10;
  pub const VT_ACCURACYFACTOR: flatbuffers::VOffsetT = 12;
  pub const VT_DODGEFACTOR: flatbuffers::VOffsetT = 14;
  pub const VT_ATTACKPOWERFACTOR: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TerrainAdaptationFactorExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TerrainAdaptationFactorExcelArgs
  ) -> flatbuffers::WIPOffset<TerrainAdaptationFactorExcel<'bldr>> {
    let mut builder = TerrainAdaptationFactorExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TerrainAdaptationFactor");
      let x = args.AttackPowerFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackPowerFactor(x);
      let x = args.DodgeFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DodgeFactor(x);
      let x = args.AccuracyFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccuracyFactor(x);
      let x = args.BlockFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BlockFactor(x);
      let x = args.ShotFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ShotFactor(x);
      let x = args.TerrainAdaptationStat;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TerrainAdaptationStat(x);
      let x = args.TerrainAdaptation;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TerrainAdaptation(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TerrainAdaptationFactorExcelT {
    let key = table_encryption_service::create_key(b"TerrainAdaptationFactor");
      let TerrainAdaptation = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TerrainAdaptation(), &key)
      } else {
        self.TerrainAdaptation()
      };
      let TerrainAdaptationStat = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TerrainAdaptationStat(), &key)
      } else {
        self.TerrainAdaptationStat()
      };
      let ShotFactor = self.ShotFactor();
      let BlockFactor = self.BlockFactor();
      let AccuracyFactor = self.AccuracyFactor();
      let DodgeFactor = self.DodgeFactor();
      let AttackPowerFactor = self.AttackPowerFactor();
    TerrainAdaptationFactorExcelT {
      TerrainAdaptation,
      TerrainAdaptationStat,
      ShotFactor,
      BlockFactor,
      AccuracyFactor,
      DodgeFactor,
      AttackPowerFactor,
    }
  }

  #[inline]
  pub fn TerrainAdaptation(&self) -> StageTopography {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StageTopography>(TerrainAdaptationFactorExcel::VT_TERRAINADAPTATION, Some(StageTopography::Street)).unwrap()}
  }
  #[inline]
  pub fn TerrainAdaptationStat(&self) -> TerrainAdaptationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TerrainAdaptationStat>(TerrainAdaptationFactorExcel::VT_TERRAINADAPTATIONSTAT, Some(TerrainAdaptationStat::D)).unwrap()}
  }
  #[inline]
  pub fn ShotFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TerrainAdaptationFactorExcel::VT_SHOTFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BlockFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TerrainAdaptationFactorExcel::VT_BLOCKFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AccuracyFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TerrainAdaptationFactorExcel::VT_ACCURACYFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DodgeFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TerrainAdaptationFactorExcel::VT_DODGEFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackPowerFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TerrainAdaptationFactorExcel::VT_ATTACKPOWERFACTOR, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TerrainAdaptationFactorExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<StageTopography>("TerrainAdaptation", Self::VT_TERRAINADAPTATION, false)?
     .visit_field::<TerrainAdaptationStat>("TerrainAdaptationStat", Self::VT_TERRAINADAPTATIONSTAT, false)?
     .visit_field::<i64>("ShotFactor", Self::VT_SHOTFACTOR, false)?
     .visit_field::<i64>("BlockFactor", Self::VT_BLOCKFACTOR, false)?
     .visit_field::<i64>("AccuracyFactor", Self::VT_ACCURACYFACTOR, false)?
     .visit_field::<i64>("DodgeFactor", Self::VT_DODGEFACTOR, false)?
     .visit_field::<i64>("AttackPowerFactor", Self::VT_ATTACKPOWERFACTOR, false)?
     .finish();
    Ok(())
  }
}
pub struct TerrainAdaptationFactorExcelArgs {
    pub TerrainAdaptation: StageTopography,
    pub TerrainAdaptationStat: TerrainAdaptationStat,
    pub ShotFactor: i64,
    pub BlockFactor: i64,
    pub AccuracyFactor: i64,
    pub DodgeFactor: i64,
    pub AttackPowerFactor: i64,
}
impl<'a> Default for TerrainAdaptationFactorExcelArgs {
  #[inline]
  fn default() -> Self {
    TerrainAdaptationFactorExcelArgs {
      TerrainAdaptation: StageTopography::Street,
      TerrainAdaptationStat: TerrainAdaptationStat::D,
      ShotFactor: 0,
      BlockFactor: 0,
      AccuracyFactor: 0,
      DodgeFactor: 0,
      AttackPowerFactor: 0,
    }
  }
}

impl Serialize for TerrainAdaptationFactorExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TerrainAdaptationFactorExcel", 7)?;
      s.serialize_field("TerrainAdaptation", &self.TerrainAdaptation())?;
      s.serialize_field("TerrainAdaptationStat", &self.TerrainAdaptationStat())?;
      s.serialize_field("ShotFactor", &self.ShotFactor())?;
      s.serialize_field("BlockFactor", &self.BlockFactor())?;
      s.serialize_field("AccuracyFactor", &self.AccuracyFactor())?;
      s.serialize_field("DodgeFactor", &self.DodgeFactor())?;
      s.serialize_field("AttackPowerFactor", &self.AttackPowerFactor())?;
    s.end()
  }
}

pub struct TerrainAdaptationFactorExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TerrainAdaptationFactorExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_TerrainAdaptation(&mut self, TerrainAdaptation: StageTopography) {
    self.fbb_.push_slot::<StageTopography>(TerrainAdaptationFactorExcel::VT_TERRAINADAPTATION, TerrainAdaptation, StageTopography::Street);
  }
  #[inline]
  pub fn add_TerrainAdaptationStat(&mut self, TerrainAdaptationStat: TerrainAdaptationStat) {
    self.fbb_.push_slot::<TerrainAdaptationStat>(TerrainAdaptationFactorExcel::VT_TERRAINADAPTATIONSTAT, TerrainAdaptationStat, TerrainAdaptationStat::D);
  }
  #[inline]
  pub fn add_ShotFactor(&mut self, ShotFactor: i64) {
    self.fbb_.push_slot::<i64>(TerrainAdaptationFactorExcel::VT_SHOTFACTOR, ShotFactor, 0);
  }
  #[inline]
  pub fn add_BlockFactor(&mut self, BlockFactor: i64) {
    self.fbb_.push_slot::<i64>(TerrainAdaptationFactorExcel::VT_BLOCKFACTOR, BlockFactor, 0);
  }
  #[inline]
  pub fn add_AccuracyFactor(&mut self, AccuracyFactor: i64) {
    self.fbb_.push_slot::<i64>(TerrainAdaptationFactorExcel::VT_ACCURACYFACTOR, AccuracyFactor, 0);
  }
  #[inline]
  pub fn add_DodgeFactor(&mut self, DodgeFactor: i64) {
    self.fbb_.push_slot::<i64>(TerrainAdaptationFactorExcel::VT_DODGEFACTOR, DodgeFactor, 0);
  }
  #[inline]
  pub fn add_AttackPowerFactor(&mut self, AttackPowerFactor: i64) {
    self.fbb_.push_slot::<i64>(TerrainAdaptationFactorExcel::VT_ATTACKPOWERFACTOR, AttackPowerFactor, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TerrainAdaptationFactorExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TerrainAdaptationFactorExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TerrainAdaptationFactorExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TerrainAdaptationFactorExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TerrainAdaptationFactorExcel");
      ds.field("TerrainAdaptation", &self.TerrainAdaptation());
      ds.field("TerrainAdaptationStat", &self.TerrainAdaptationStat());
      ds.field("ShotFactor", &self.ShotFactor());
      ds.field("BlockFactor", &self.BlockFactor());
      ds.field("AccuracyFactor", &self.AccuracyFactor());
      ds.field("DodgeFactor", &self.DodgeFactor());
      ds.field("AttackPowerFactor", &self.AttackPowerFactor());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TerrainAdaptationFactorExcelT {
  pub TerrainAdaptation: StageTopography,
  pub TerrainAdaptationStat: TerrainAdaptationStat,
  pub ShotFactor: i64,
  pub BlockFactor: i64,
  pub AccuracyFactor: i64,
  pub DodgeFactor: i64,
  pub AttackPowerFactor: i64,
}
impl Default for TerrainAdaptationFactorExcelT {
  fn default() -> Self {
    Self {
      TerrainAdaptation: StageTopography::Street,
      TerrainAdaptationStat: TerrainAdaptationStat::D,
      ShotFactor: 0,
      BlockFactor: 0,
      AccuracyFactor: 0,
      DodgeFactor: 0,
      AttackPowerFactor: 0,
    }
  }
}
impl TerrainAdaptationFactorExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TerrainAdaptationFactorExcel<'b>> {
    let TerrainAdaptation = self.TerrainAdaptation;
    let TerrainAdaptationStat = self.TerrainAdaptationStat;
    let ShotFactor = self.ShotFactor;
    let BlockFactor = self.BlockFactor;
    let AccuracyFactor = self.AccuracyFactor;
    let DodgeFactor = self.DodgeFactor;
    let AttackPowerFactor = self.AttackPowerFactor;
    TerrainAdaptationFactorExcel::create(_fbb, &TerrainAdaptationFactorExcelArgs{
      TerrainAdaptation,
      TerrainAdaptationStat,
      ShotFactor,
      BlockFactor,
      AccuracyFactor,
      DodgeFactor,
      AttackPowerFactor,
    })
  }
}
