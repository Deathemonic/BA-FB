// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WorldRaidStageRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WorldRaidStageRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WorldRaidStageRewardExcel<'a> {
  type Inner = WorldRaidStageRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WorldRaidStageRewardExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_ISCLEARSTAGEREWARDHIDEINFO: flatbuffers::VOffsetT = 6;
  pub const VT_CLEARSTAGEREWARDPROB: flatbuffers::VOffsetT = 8;
  pub const VT_CLEARSTAGEREWARDPARCELTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_CLEARSTAGEREWARDPARCELUNIQUEID: flatbuffers::VOffsetT = 12;
  pub const VT_CLEARSTAGEREWARDPARCELUNIQUENAME: flatbuffers::VOffsetT = 14;
  pub const VT_CLEARSTAGEREWARDAMOUNT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WorldRaidStageRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WorldRaidStageRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<WorldRaidStageRewardExcel<'bldr>> {
    let mut builder = WorldRaidStageRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"WorldRaidStageReward");
      let x = args.ClearStageRewardAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearStageRewardAmount(x);
      let x = args.ClearStageRewardParcelUniqueID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearStageRewardParcelUniqueID(x);
      let x = args.ClearStageRewardProb;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearStageRewardProb(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      if let Some(x) = args.ClearStageRewardParcelUniqueName {
        builder.add_ClearStageRewardParcelUniqueName(x);
      }
      let x = args.ClearStageRewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ClearStageRewardParcelType(x);
      builder.add_IsClearStageRewardHideInfo(args.IsClearStageRewardHideInfo);
    builder.finish()
  }

  pub fn unpack(&self) -> WorldRaidStageRewardExcelT {
    let key = table_encryption_service::create_key(b"WorldRaidStageReward");
      let GroupId = self.GroupId();
      let IsClearStageRewardHideInfo = self.IsClearStageRewardHideInfo();
      let ClearStageRewardProb = self.ClearStageRewardProb();
      let ClearStageRewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ClearStageRewardParcelType(), &key)
      } else {
        self.ClearStageRewardParcelType()
      };
      let ClearStageRewardParcelUniqueID = self.ClearStageRewardParcelUniqueID();
    let ClearStageRewardParcelUniqueName = self.ClearStageRewardParcelUniqueName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ClearStageRewardAmount = self.ClearStageRewardAmount();
    WorldRaidStageRewardExcelT {
      GroupId,
      IsClearStageRewardHideInfo,
      ClearStageRewardProb,
      ClearStageRewardParcelType,
      ClearStageRewardParcelUniqueID,
      ClearStageRewardParcelUniqueName,
      ClearStageRewardAmount,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WorldRaidStageRewardExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsClearStageRewardHideInfo(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(WorldRaidStageRewardExcel::VT_ISCLEARSTAGEREWARDHIDEINFO, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ClearStageRewardProb(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ClearStageRewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ClearStageRewardParcelUniqueID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPARCELUNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ClearStageRewardParcelUniqueName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPARCELUNIQUENAME, None)}
  }
  #[inline]
  pub fn ClearStageRewardAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for WorldRaidStageRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<bool>("IsClearStageRewardHideInfo", Self::VT_ISCLEARSTAGEREWARDHIDEINFO, false)?
     .visit_field::<i64>("ClearStageRewardProb", Self::VT_CLEARSTAGEREWARDPROB, false)?
     .visit_field::<ParcelType>("ClearStageRewardParcelType", Self::VT_CLEARSTAGEREWARDPARCELTYPE, false)?
     .visit_field::<i64>("ClearStageRewardParcelUniqueID", Self::VT_CLEARSTAGEREWARDPARCELUNIQUEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ClearStageRewardParcelUniqueName", Self::VT_CLEARSTAGEREWARDPARCELUNIQUENAME, false)?
     .visit_field::<i64>("ClearStageRewardAmount", Self::VT_CLEARSTAGEREWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct WorldRaidStageRewardExcelArgs<'a> {
    pub GroupId: i64,
    pub IsClearStageRewardHideInfo: bool,
    pub ClearStageRewardProb: i64,
    pub ClearStageRewardParcelType: ParcelType,
    pub ClearStageRewardParcelUniqueID: i64,
    pub ClearStageRewardParcelUniqueName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ClearStageRewardAmount: i64,
}
impl<'a> Default for WorldRaidStageRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    WorldRaidStageRewardExcelArgs {
      GroupId: 0,
      IsClearStageRewardHideInfo: false,
      ClearStageRewardProb: 0,
      ClearStageRewardParcelType: ParcelType::None,
      ClearStageRewardParcelUniqueID: 0,
      ClearStageRewardParcelUniqueName: None,
      ClearStageRewardAmount: 0,
    }
  }
}

impl Serialize for WorldRaidStageRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WorldRaidStageRewardExcel", 7)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("IsClearStageRewardHideInfo", &self.IsClearStageRewardHideInfo())?;
      s.serialize_field("ClearStageRewardProb", &self.ClearStageRewardProb())?;
      s.serialize_field("ClearStageRewardParcelType", &self.ClearStageRewardParcelType())?;
      s.serialize_field("ClearStageRewardParcelUniqueID", &self.ClearStageRewardParcelUniqueID())?;
      if let Some(f) = self.ClearStageRewardParcelUniqueName() {
        s.serialize_field("ClearStageRewardParcelUniqueName", &f)?;
      } else {
        s.skip_field("ClearStageRewardParcelUniqueName")?;
      }
      s.serialize_field("ClearStageRewardAmount", &self.ClearStageRewardAmount())?;
    s.end()
  }
}

pub struct WorldRaidStageRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WorldRaidStageRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(WorldRaidStageRewardExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_IsClearStageRewardHideInfo(&mut self, IsClearStageRewardHideInfo: bool) {
    self.fbb_.push_slot::<bool>(WorldRaidStageRewardExcel::VT_ISCLEARSTAGEREWARDHIDEINFO, IsClearStageRewardHideInfo, false);
  }
  #[inline]
  pub fn add_ClearStageRewardProb(&mut self, ClearStageRewardProb: i64) {
    self.fbb_.push_slot::<i64>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPROB, ClearStageRewardProb, 0);
  }
  #[inline]
  pub fn add_ClearStageRewardParcelType(&mut self, ClearStageRewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPARCELTYPE, ClearStageRewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ClearStageRewardParcelUniqueID(&mut self, ClearStageRewardParcelUniqueID: i64) {
    self.fbb_.push_slot::<i64>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPARCELUNIQUEID, ClearStageRewardParcelUniqueID, 0);
  }
  #[inline]
  pub fn add_ClearStageRewardParcelUniqueName(&mut self, ClearStageRewardParcelUniqueName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDPARCELUNIQUENAME, ClearStageRewardParcelUniqueName);
  }
  #[inline]
  pub fn add_ClearStageRewardAmount(&mut self, ClearStageRewardAmount: i64) {
    self.fbb_.push_slot::<i64>(WorldRaidStageRewardExcel::VT_CLEARSTAGEREWARDAMOUNT, ClearStageRewardAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WorldRaidStageRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WorldRaidStageRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WorldRaidStageRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WorldRaidStageRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WorldRaidStageRewardExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("IsClearStageRewardHideInfo", &self.IsClearStageRewardHideInfo());
      ds.field("ClearStageRewardProb", &self.ClearStageRewardProb());
      ds.field("ClearStageRewardParcelType", &self.ClearStageRewardParcelType());
      ds.field("ClearStageRewardParcelUniqueID", &self.ClearStageRewardParcelUniqueID());
      ds.field("ClearStageRewardParcelUniqueName", &self.ClearStageRewardParcelUniqueName());
      ds.field("ClearStageRewardAmount", &self.ClearStageRewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WorldRaidStageRewardExcelT {
  pub GroupId: i64,
  pub IsClearStageRewardHideInfo: bool,
  pub ClearStageRewardProb: i64,
  pub ClearStageRewardParcelType: ParcelType,
  pub ClearStageRewardParcelUniqueID: i64,
  pub ClearStageRewardParcelUniqueName: Option<String>,
  pub ClearStageRewardAmount: i64,
}
impl Default for WorldRaidStageRewardExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      IsClearStageRewardHideInfo: false,
      ClearStageRewardProb: 0,
      ClearStageRewardParcelType: ParcelType::None,
      ClearStageRewardParcelUniqueID: 0,
      ClearStageRewardParcelUniqueName: None,
      ClearStageRewardAmount: 0,
    }
  }
}
impl WorldRaidStageRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WorldRaidStageRewardExcel<'b>> {
    let GroupId = self.GroupId;
    let IsClearStageRewardHideInfo = self.IsClearStageRewardHideInfo;
    let ClearStageRewardProb = self.ClearStageRewardProb;
    let ClearStageRewardParcelType = self.ClearStageRewardParcelType;
    let ClearStageRewardParcelUniqueID = self.ClearStageRewardParcelUniqueID;
    let ClearStageRewardParcelUniqueName = self.ClearStageRewardParcelUniqueName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ClearStageRewardAmount = self.ClearStageRewardAmount;
    WorldRaidStageRewardExcel::create(_fbb, &WorldRaidStageRewardExcelArgs{
      GroupId,
      IsClearStageRewardHideInfo,
      ClearStageRewardProb,
      ClearStageRewardParcelType,
      ClearStageRewardParcelUniqueID,
      ClearStageRewardParcelUniqueName,
      ClearStageRewardAmount,
    })
  }
}
