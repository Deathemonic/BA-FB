// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PossessionCheckExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PossessionCheckExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PossessionCheckExcel<'a> {
  type Inner = PossessionCheckExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PossessionCheckExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_DEFAULTPARCELTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DEFAULTPARCELID: flatbuffers::VOffsetT = 8;
  pub const VT_DEFAULTPARCELAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_REPLACEPARCELTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_REPLACEPARCELID: flatbuffers::VOffsetT = 14;
  pub const VT_REPLACEPARCELAMOUNT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PossessionCheckExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PossessionCheckExcelArgs
  ) -> flatbuffers::WIPOffset<PossessionCheckExcel<'bldr>> {
    let mut builder = PossessionCheckExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"PossessionCheck");
      let x = args.ReplaceParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ReplaceParcelId(x);
      let x = args.DefaultParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefaultParcelId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.ReplaceParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ReplaceParcelAmount(x);
      let x = args.ReplaceParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ReplaceParcelType(x);
      let x = args.DefaultParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DefaultParcelAmount(x);
      let x = args.DefaultParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DefaultParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> PossessionCheckExcelT {
    let key = table_encryption_service::create_key(b"PossessionCheck");
      let UniqueId = self.UniqueId();
      let DefaultParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DefaultParcelType(), &key)
      } else {
        self.DefaultParcelType()
      };
      let DefaultParcelId = self.DefaultParcelId();
      let DefaultParcelAmount = self.DefaultParcelAmount();
      let ReplaceParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ReplaceParcelType(), &key)
      } else {
        self.ReplaceParcelType()
      };
      let ReplaceParcelId = self.ReplaceParcelId();
      let ReplaceParcelAmount = self.ReplaceParcelAmount();
    PossessionCheckExcelT {
      UniqueId,
      DefaultParcelType,
      DefaultParcelId,
      DefaultParcelAmount,
      ReplaceParcelType,
      ReplaceParcelId,
      ReplaceParcelAmount,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PossessionCheckExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefaultParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(PossessionCheckExcel::VT_DEFAULTPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn DefaultParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PossessionCheckExcel::VT_DEFAULTPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefaultParcelAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PossessionCheckExcel::VT_DEFAULTPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplaceParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(PossessionCheckExcel::VT_REPLACEPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ReplaceParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PossessionCheckExcel::VT_REPLACEPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReplaceParcelAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PossessionCheckExcel::VT_REPLACEPARCELAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PossessionCheckExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<ParcelType>("DefaultParcelType", Self::VT_DEFAULTPARCELTYPE, false)?
     .visit_field::<i64>("DefaultParcelId", Self::VT_DEFAULTPARCELID, false)?
     .visit_field::<i32>("DefaultParcelAmount", Self::VT_DEFAULTPARCELAMOUNT, false)?
     .visit_field::<ParcelType>("ReplaceParcelType", Self::VT_REPLACEPARCELTYPE, false)?
     .visit_field::<i64>("ReplaceParcelId", Self::VT_REPLACEPARCELID, false)?
     .visit_field::<i32>("ReplaceParcelAmount", Self::VT_REPLACEPARCELAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct PossessionCheckExcelArgs {
    pub UniqueId: i64,
    pub DefaultParcelType: ParcelType,
    pub DefaultParcelId: i64,
    pub DefaultParcelAmount: i32,
    pub ReplaceParcelType: ParcelType,
    pub ReplaceParcelId: i64,
    pub ReplaceParcelAmount: i32,
}
impl<'a> Default for PossessionCheckExcelArgs {
  #[inline]
  fn default() -> Self {
    PossessionCheckExcelArgs {
      UniqueId: 0,
      DefaultParcelType: ParcelType::None,
      DefaultParcelId: 0,
      DefaultParcelAmount: 0,
      ReplaceParcelType: ParcelType::None,
      ReplaceParcelId: 0,
      ReplaceParcelAmount: 0,
    }
  }
}

impl Serialize for PossessionCheckExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PossessionCheckExcel", 7)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("DefaultParcelType", &self.DefaultParcelType())?;
      s.serialize_field("DefaultParcelId", &self.DefaultParcelId())?;
      s.serialize_field("DefaultParcelAmount", &self.DefaultParcelAmount())?;
      s.serialize_field("ReplaceParcelType", &self.ReplaceParcelType())?;
      s.serialize_field("ReplaceParcelId", &self.ReplaceParcelId())?;
      s.serialize_field("ReplaceParcelAmount", &self.ReplaceParcelAmount())?;
    s.end()
  }
}

pub struct PossessionCheckExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PossessionCheckExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(PossessionCheckExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_DefaultParcelType(&mut self, DefaultParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(PossessionCheckExcel::VT_DEFAULTPARCELTYPE, DefaultParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_DefaultParcelId(&mut self, DefaultParcelId: i64) {
    self.fbb_.push_slot::<i64>(PossessionCheckExcel::VT_DEFAULTPARCELID, DefaultParcelId, 0);
  }
  #[inline]
  pub fn add_DefaultParcelAmount(&mut self, DefaultParcelAmount: i32) {
    self.fbb_.push_slot::<i32>(PossessionCheckExcel::VT_DEFAULTPARCELAMOUNT, DefaultParcelAmount, 0);
  }
  #[inline]
  pub fn add_ReplaceParcelType(&mut self, ReplaceParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(PossessionCheckExcel::VT_REPLACEPARCELTYPE, ReplaceParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ReplaceParcelId(&mut self, ReplaceParcelId: i64) {
    self.fbb_.push_slot::<i64>(PossessionCheckExcel::VT_REPLACEPARCELID, ReplaceParcelId, 0);
  }
  #[inline]
  pub fn add_ReplaceParcelAmount(&mut self, ReplaceParcelAmount: i32) {
    self.fbb_.push_slot::<i32>(PossessionCheckExcel::VT_REPLACEPARCELAMOUNT, ReplaceParcelAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PossessionCheckExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PossessionCheckExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PossessionCheckExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PossessionCheckExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PossessionCheckExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("DefaultParcelType", &self.DefaultParcelType());
      ds.field("DefaultParcelId", &self.DefaultParcelId());
      ds.field("DefaultParcelAmount", &self.DefaultParcelAmount());
      ds.field("ReplaceParcelType", &self.ReplaceParcelType());
      ds.field("ReplaceParcelId", &self.ReplaceParcelId());
      ds.field("ReplaceParcelAmount", &self.ReplaceParcelAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PossessionCheckExcelT {
  pub UniqueId: i64,
  pub DefaultParcelType: ParcelType,
  pub DefaultParcelId: i64,
  pub DefaultParcelAmount: i32,
  pub ReplaceParcelType: ParcelType,
  pub ReplaceParcelId: i64,
  pub ReplaceParcelAmount: i32,
}
impl Default for PossessionCheckExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      DefaultParcelType: ParcelType::None,
      DefaultParcelId: 0,
      DefaultParcelAmount: 0,
      ReplaceParcelType: ParcelType::None,
      ReplaceParcelId: 0,
      ReplaceParcelAmount: 0,
    }
  }
}
impl PossessionCheckExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PossessionCheckExcel<'b>> {
    let UniqueId = self.UniqueId;
    let DefaultParcelType = self.DefaultParcelType;
    let DefaultParcelId = self.DefaultParcelId;
    let DefaultParcelAmount = self.DefaultParcelAmount;
    let ReplaceParcelType = self.ReplaceParcelType;
    let ReplaceParcelId = self.ReplaceParcelId;
    let ReplaceParcelAmount = self.ReplaceParcelAmount;
    PossessionCheckExcel::create(_fbb, &PossessionCheckExcelArgs{
      UniqueId,
      DefaultParcelType,
      DefaultParcelId,
      DefaultParcelAmount,
      ReplaceParcelType,
      ReplaceParcelId,
      ReplaceParcelAmount,
    })
  }
}
