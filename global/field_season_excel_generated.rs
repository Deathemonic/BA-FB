// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FieldSeasonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FieldSeasonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FieldSeasonExcel<'a> {
  type Inner = FieldSeasonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FieldSeasonExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_ENTRYDATEID: flatbuffers::VOffsetT = 8;
  pub const VT_INSTANTENTRYDATEID: flatbuffers::VOffsetT = 10;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 12;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 14;
  pub const VT_LOBBYBGMCHANGESTAGEID: flatbuffers::VOffsetT = 16;
  pub const VT_FIELDPREFABCONTROLID: flatbuffers::VOffsetT = 18;
  pub const VT_FIELDGETKEYWORDCALLDIALOGENUM: flatbuffers::VOffsetT = 20;
  pub const VT_MASTERYIMAGEPATH: flatbuffers::VOffsetT = 22;
  pub const VT_FIELDLOBBYTITLEIMAGEPATH: flatbuffers::VOffsetT = 24;
  pub const VT_KEYWORDLOGOIMAGEPATH: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FieldSeasonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FieldSeasonExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<FieldSeasonExcel<'bldr>> {
    let mut builder = FieldSeasonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FieldSeason");
      let x = args.FieldPrefabControlID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FieldPrefabControlID(x);
      let x = args.LobbyBGMChangeStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_LobbyBGMChangeStageId(x);
      let x = args.InstantEntryDateId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_InstantEntryDateId(x);
      let x = args.EntryDateId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EntryDateId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      if let Some(x) = args.KeywordLogoImagePath {
        builder.add_KeywordLogoImagePath(x);
      }
      if let Some(x) = args.FieldLobbyTitleImagePath {
        builder.add_FieldLobbyTitleImagePath(x);
      }
      if let Some(x) = args.MasteryImagePath {
        builder.add_MasteryImagePath(x);
      }
      let x = args.FieldGetKeywordCallDialogEnum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_FieldGetKeywordCallDialogEnum(x);
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> FieldSeasonExcelT {
    let key = table_encryption_service::create_key(b"FieldSeason");
      let UniqueId = self.UniqueId();
      let EventContentId = self.EventContentId();
      let EntryDateId = self.EntryDateId();
      let InstantEntryDateId = self.InstantEntryDateId();
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LobbyBGMChangeStageId = self.LobbyBGMChangeStageId();
      let FieldPrefabControlID = self.FieldPrefabControlID();
      let FieldGetKeywordCallDialogEnum = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.FieldGetKeywordCallDialogEnum(), &key)
      } else {
        self.FieldGetKeywordCallDialogEnum()
      };
    let MasteryImagePath = self.MasteryImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let FieldLobbyTitleImagePath = self.FieldLobbyTitleImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let KeywordLogoImagePath = self.KeywordLogoImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    FieldSeasonExcelT {
      UniqueId,
      EventContentId,
      EntryDateId,
      InstantEntryDateId,
      StartDate,
      EndDate,
      LobbyBGMChangeStageId,
      FieldPrefabControlID,
      FieldGetKeywordCallDialogEnum,
      MasteryImagePath,
      FieldLobbyTitleImagePath,
      KeywordLogoImagePath,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSeasonExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSeasonExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EntryDateId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSeasonExcel::VT_ENTRYDATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn InstantEntryDateId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSeasonExcel::VT_INSTANTENTRYDATEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldSeasonExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldSeasonExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn LobbyBGMChangeStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSeasonExcel::VT_LOBBYBGMCHANGESTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FieldPrefabControlID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FieldSeasonExcel::VT_FIELDPREFABCONTROLID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FieldGetKeywordCallDialogEnum(&self) -> FieldDialogType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FieldDialogType>(FieldSeasonExcel::VT_FIELDGETKEYWORDCALLDIALOGENUM, Some(FieldDialogType::None)).unwrap()}
  }
  #[inline]
  pub fn MasteryImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldSeasonExcel::VT_MASTERYIMAGEPATH, None)}
  }
  #[inline]
  pub fn FieldLobbyTitleImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldSeasonExcel::VT_FIELDLOBBYTITLEIMAGEPATH, None)}
  }
  #[inline]
  pub fn KeywordLogoImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FieldSeasonExcel::VT_KEYWORDLOGOIMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for FieldSeasonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("EntryDateId", Self::VT_ENTRYDATEID, false)?
     .visit_field::<i64>("InstantEntryDateId", Self::VT_INSTANTENTRYDATEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<i64>("LobbyBGMChangeStageId", Self::VT_LOBBYBGMCHANGESTAGEID, false)?
     .visit_field::<i64>("FieldPrefabControlID", Self::VT_FIELDPREFABCONTROLID, false)?
     .visit_field::<FieldDialogType>("FieldGetKeywordCallDialogEnum", Self::VT_FIELDGETKEYWORDCALLDIALOGENUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MasteryImagePath", Self::VT_MASTERYIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("FieldLobbyTitleImagePath", Self::VT_FIELDLOBBYTITLEIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("KeywordLogoImagePath", Self::VT_KEYWORDLOGOIMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct FieldSeasonExcelArgs<'a> {
    pub UniqueId: i64,
    pub EventContentId: i64,
    pub EntryDateId: i64,
    pub InstantEntryDateId: i64,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LobbyBGMChangeStageId: i64,
    pub FieldPrefabControlID: i64,
    pub FieldGetKeywordCallDialogEnum: FieldDialogType,
    pub MasteryImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub FieldLobbyTitleImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub KeywordLogoImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for FieldSeasonExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    FieldSeasonExcelArgs {
      UniqueId: 0,
      EventContentId: 0,
      EntryDateId: 0,
      InstantEntryDateId: 0,
      StartDate: None,
      EndDate: None,
      LobbyBGMChangeStageId: 0,
      FieldPrefabControlID: 0,
      FieldGetKeywordCallDialogEnum: FieldDialogType::None,
      MasteryImagePath: None,
      FieldLobbyTitleImagePath: None,
      KeywordLogoImagePath: None,
    }
  }
}

impl Serialize for FieldSeasonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FieldSeasonExcel", 12)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("EntryDateId", &self.EntryDateId())?;
      s.serialize_field("InstantEntryDateId", &self.InstantEntryDateId())?;
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      s.serialize_field("LobbyBGMChangeStageId", &self.LobbyBGMChangeStageId())?;
      s.serialize_field("FieldPrefabControlID", &self.FieldPrefabControlID())?;
      s.serialize_field("FieldGetKeywordCallDialogEnum", &self.FieldGetKeywordCallDialogEnum())?;
      if let Some(f) = self.MasteryImagePath() {
        s.serialize_field("MasteryImagePath", &f)?;
      } else {
        s.skip_field("MasteryImagePath")?;
      }
      if let Some(f) = self.FieldLobbyTitleImagePath() {
        s.serialize_field("FieldLobbyTitleImagePath", &f)?;
      } else {
        s.skip_field("FieldLobbyTitleImagePath")?;
      }
      if let Some(f) = self.KeywordLogoImagePath() {
        s.serialize_field("KeywordLogoImagePath", &f)?;
      } else {
        s.skip_field("KeywordLogoImagePath")?;
      }
    s.end()
  }
}

pub struct FieldSeasonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FieldSeasonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(FieldSeasonExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(FieldSeasonExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_EntryDateId(&mut self, EntryDateId: i64) {
    self.fbb_.push_slot::<i64>(FieldSeasonExcel::VT_ENTRYDATEID, EntryDateId, 0);
  }
  #[inline]
  pub fn add_InstantEntryDateId(&mut self, InstantEntryDateId: i64) {
    self.fbb_.push_slot::<i64>(FieldSeasonExcel::VT_INSTANTENTRYDATEID, InstantEntryDateId, 0);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSeasonExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSeasonExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_LobbyBGMChangeStageId(&mut self, LobbyBGMChangeStageId: i64) {
    self.fbb_.push_slot::<i64>(FieldSeasonExcel::VT_LOBBYBGMCHANGESTAGEID, LobbyBGMChangeStageId, 0);
  }
  #[inline]
  pub fn add_FieldPrefabControlID(&mut self, FieldPrefabControlID: i64) {
    self.fbb_.push_slot::<i64>(FieldSeasonExcel::VT_FIELDPREFABCONTROLID, FieldPrefabControlID, 0);
  }
  #[inline]
  pub fn add_FieldGetKeywordCallDialogEnum(&mut self, FieldGetKeywordCallDialogEnum: FieldDialogType) {
    self.fbb_.push_slot::<FieldDialogType>(FieldSeasonExcel::VT_FIELDGETKEYWORDCALLDIALOGENUM, FieldGetKeywordCallDialogEnum, FieldDialogType::None);
  }
  #[inline]
  pub fn add_MasteryImagePath(&mut self, MasteryImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSeasonExcel::VT_MASTERYIMAGEPATH, MasteryImagePath);
  }
  #[inline]
  pub fn add_FieldLobbyTitleImagePath(&mut self, FieldLobbyTitleImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSeasonExcel::VT_FIELDLOBBYTITLEIMAGEPATH, FieldLobbyTitleImagePath);
  }
  #[inline]
  pub fn add_KeywordLogoImagePath(&mut self, KeywordLogoImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FieldSeasonExcel::VT_KEYWORDLOGOIMAGEPATH, KeywordLogoImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FieldSeasonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FieldSeasonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FieldSeasonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FieldSeasonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FieldSeasonExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("EntryDateId", &self.EntryDateId());
      ds.field("InstantEntryDateId", &self.InstantEntryDateId());
      ds.field("StartDate", &self.StartDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("LobbyBGMChangeStageId", &self.LobbyBGMChangeStageId());
      ds.field("FieldPrefabControlID", &self.FieldPrefabControlID());
      ds.field("FieldGetKeywordCallDialogEnum", &self.FieldGetKeywordCallDialogEnum());
      ds.field("MasteryImagePath", &self.MasteryImagePath());
      ds.field("FieldLobbyTitleImagePath", &self.FieldLobbyTitleImagePath());
      ds.field("KeywordLogoImagePath", &self.KeywordLogoImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FieldSeasonExcelT {
  pub UniqueId: i64,
  pub EventContentId: i64,
  pub EntryDateId: i64,
  pub InstantEntryDateId: i64,
  pub StartDate: Option<String>,
  pub EndDate: Option<String>,
  pub LobbyBGMChangeStageId: i64,
  pub FieldPrefabControlID: i64,
  pub FieldGetKeywordCallDialogEnum: FieldDialogType,
  pub MasteryImagePath: Option<String>,
  pub FieldLobbyTitleImagePath: Option<String>,
  pub KeywordLogoImagePath: Option<String>,
}
impl Default for FieldSeasonExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      EventContentId: 0,
      EntryDateId: 0,
      InstantEntryDateId: 0,
      StartDate: None,
      EndDate: None,
      LobbyBGMChangeStageId: 0,
      FieldPrefabControlID: 0,
      FieldGetKeywordCallDialogEnum: FieldDialogType::None,
      MasteryImagePath: None,
      FieldLobbyTitleImagePath: None,
      KeywordLogoImagePath: None,
    }
  }
}
impl FieldSeasonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FieldSeasonExcel<'b>> {
    let UniqueId = self.UniqueId;
    let EventContentId = self.EventContentId;
    let EntryDateId = self.EntryDateId;
    let InstantEntryDateId = self.InstantEntryDateId;
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LobbyBGMChangeStageId = self.LobbyBGMChangeStageId;
    let FieldPrefabControlID = self.FieldPrefabControlID;
    let FieldGetKeywordCallDialogEnum = self.FieldGetKeywordCallDialogEnum;
    let MasteryImagePath = self.MasteryImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let FieldLobbyTitleImagePath = self.FieldLobbyTitleImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let KeywordLogoImagePath = self.KeywordLogoImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    FieldSeasonExcel::create(_fbb, &FieldSeasonExcelArgs{
      UniqueId,
      EventContentId,
      EntryDateId,
      InstantEntryDateId,
      StartDate,
      EndDate,
      LobbyBGMChangeStageId,
      FieldPrefabControlID,
      FieldGetKeywordCallDialogEnum,
      MasteryImagePath,
      FieldLobbyTitleImagePath,
      KeywordLogoImagePath,
    })
  }
}
