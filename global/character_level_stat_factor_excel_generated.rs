// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterLevelStatFactorExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterLevelStatFactorExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterLevelStatFactorExcel<'a> {
  type Inner = CharacterLevelStatFactorExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterLevelStatFactorExcel<'a> {
  pub const VT_LEVEL: flatbuffers::VOffsetT = 4;
  pub const VT_CRITICALFACTOR: flatbuffers::VOffsetT = 6;
  pub const VT_STABILITYFACTOR: flatbuffers::VOffsetT = 8;
  pub const VT_DEFENCEFACTOR: flatbuffers::VOffsetT = 10;
  pub const VT_ACCURACYFACTOR: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterLevelStatFactorExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterLevelStatFactorExcelArgs
  ) -> flatbuffers::WIPOffset<CharacterLevelStatFactorExcel<'bldr>> {
    let mut builder = CharacterLevelStatFactorExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterLevelStatFactor");
      let x = args.AccuracyFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccuracyFactor(x);
      let x = args.DefenceFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefenceFactor(x);
      let x = args.StabilityFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StabilityFactor(x);
      let x = args.CriticalFactor;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CriticalFactor(x);
      let x = args.Level;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Level(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterLevelStatFactorExcelT {
    let key = table_encryption_service::create_key(b"CharacterLevelStatFactor");
      let Level = self.Level();
      let CriticalFactor = self.CriticalFactor();
      let StabilityFactor = self.StabilityFactor();
      let DefenceFactor = self.DefenceFactor();
      let AccuracyFactor = self.AccuracyFactor();
    CharacterLevelStatFactorExcelT {
      Level,
      CriticalFactor,
      StabilityFactor,
      DefenceFactor,
      AccuracyFactor,
    }
  }

  #[inline]
  pub fn Level(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterLevelStatFactorExcel::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CriticalFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterLevelStatFactorExcel::VT_CRITICALFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StabilityFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterLevelStatFactorExcel::VT_STABILITYFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefenceFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterLevelStatFactorExcel::VT_DEFENCEFACTOR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AccuracyFactor(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterLevelStatFactorExcel::VT_ACCURACYFACTOR, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterLevelStatFactorExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Level", Self::VT_LEVEL, false)?
     .visit_field::<i64>("CriticalFactor", Self::VT_CRITICALFACTOR, false)?
     .visit_field::<i64>("StabilityFactor", Self::VT_STABILITYFACTOR, false)?
     .visit_field::<i64>("DefenceFactor", Self::VT_DEFENCEFACTOR, false)?
     .visit_field::<i64>("AccuracyFactor", Self::VT_ACCURACYFACTOR, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterLevelStatFactorExcelArgs {
    pub Level: i64,
    pub CriticalFactor: i64,
    pub StabilityFactor: i64,
    pub DefenceFactor: i64,
    pub AccuracyFactor: i64,
}
impl<'a> Default for CharacterLevelStatFactorExcelArgs {
  #[inline]
  fn default() -> Self {
    CharacterLevelStatFactorExcelArgs {
      Level: 0,
      CriticalFactor: 0,
      StabilityFactor: 0,
      DefenceFactor: 0,
      AccuracyFactor: 0,
    }
  }
}

impl Serialize for CharacterLevelStatFactorExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterLevelStatFactorExcel", 5)?;
      s.serialize_field("Level", &self.Level())?;
      s.serialize_field("CriticalFactor", &self.CriticalFactor())?;
      s.serialize_field("StabilityFactor", &self.StabilityFactor())?;
      s.serialize_field("DefenceFactor", &self.DefenceFactor())?;
      s.serialize_field("AccuracyFactor", &self.AccuracyFactor())?;
    s.end()
  }
}

pub struct CharacterLevelStatFactorExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterLevelStatFactorExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Level(&mut self, Level: i64) {
    self.fbb_.push_slot::<i64>(CharacterLevelStatFactorExcel::VT_LEVEL, Level, 0);
  }
  #[inline]
  pub fn add_CriticalFactor(&mut self, CriticalFactor: i64) {
    self.fbb_.push_slot::<i64>(CharacterLevelStatFactorExcel::VT_CRITICALFACTOR, CriticalFactor, 0);
  }
  #[inline]
  pub fn add_StabilityFactor(&mut self, StabilityFactor: i64) {
    self.fbb_.push_slot::<i64>(CharacterLevelStatFactorExcel::VT_STABILITYFACTOR, StabilityFactor, 0);
  }
  #[inline]
  pub fn add_DefenceFactor(&mut self, DefenceFactor: i64) {
    self.fbb_.push_slot::<i64>(CharacterLevelStatFactorExcel::VT_DEFENCEFACTOR, DefenceFactor, 0);
  }
  #[inline]
  pub fn add_AccuracyFactor(&mut self, AccuracyFactor: i64) {
    self.fbb_.push_slot::<i64>(CharacterLevelStatFactorExcel::VT_ACCURACYFACTOR, AccuracyFactor, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterLevelStatFactorExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterLevelStatFactorExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterLevelStatFactorExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterLevelStatFactorExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterLevelStatFactorExcel");
      ds.field("Level", &self.Level());
      ds.field("CriticalFactor", &self.CriticalFactor());
      ds.field("StabilityFactor", &self.StabilityFactor());
      ds.field("DefenceFactor", &self.DefenceFactor());
      ds.field("AccuracyFactor", &self.AccuracyFactor());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterLevelStatFactorExcelT {
  pub Level: i64,
  pub CriticalFactor: i64,
  pub StabilityFactor: i64,
  pub DefenceFactor: i64,
  pub AccuracyFactor: i64,
}
impl Default for CharacterLevelStatFactorExcelT {
  fn default() -> Self {
    Self {
      Level: 0,
      CriticalFactor: 0,
      StabilityFactor: 0,
      DefenceFactor: 0,
      AccuracyFactor: 0,
    }
  }
}
impl CharacterLevelStatFactorExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterLevelStatFactorExcel<'b>> {
    let Level = self.Level;
    let CriticalFactor = self.CriticalFactor;
    let StabilityFactor = self.StabilityFactor;
    let DefenceFactor = self.DefenceFactor;
    let AccuracyFactor = self.AccuracyFactor;
    CharacterLevelStatFactorExcel::create(_fbb, &CharacterLevelStatFactorExcelArgs{
      Level,
      CriticalFactor,
      StabilityFactor,
      DefenceFactor,
      AccuracyFactor,
    })
  }
}
