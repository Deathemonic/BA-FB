// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FloaterCommonExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FloaterCommonExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FloaterCommonExcel<'a> {
  type Inner = FloaterCommonExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FloaterCommonExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TACTICENTITYTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_FLOATEROFFSETPOSX: flatbuffers::VOffsetT = 8;
  pub const VT_FLOATEROFFSETPOSY: flatbuffers::VOffsetT = 10;
  pub const VT_FLOATERRANDOMPOSRANGEX: flatbuffers::VOffsetT = 12;
  pub const VT_FLOATERRANDOMPOSRANGEY: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FloaterCommonExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FloaterCommonExcelArgs
  ) -> flatbuffers::WIPOffset<FloaterCommonExcel<'bldr>> {
    let mut builder = FloaterCommonExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"FloaterCommon");
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.FloaterRandomPosRangeY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FloaterRandomPosRangeY(x);
      let x = args.FloaterRandomPosRangeX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FloaterRandomPosRangeX(x);
      let x = args.FloaterOffsetPosY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FloaterOffsetPosY(x);
      let x = args.FloaterOffsetPosX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_FloaterOffsetPosX(x);
      let x = args.TacticEntityType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TacticEntityType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> FloaterCommonExcelT {
    let key = table_encryption_service::create_key(b"FloaterCommon");
      let Id = self.Id();
      let TacticEntityType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TacticEntityType(), &key)
      } else {
        self.TacticEntityType()
      };
      let FloaterOffsetPosX = self.FloaterOffsetPosX();
      let FloaterOffsetPosY = self.FloaterOffsetPosY();
      let FloaterRandomPosRangeX = self.FloaterRandomPosRangeX();
      let FloaterRandomPosRangeY = self.FloaterRandomPosRangeY();
    FloaterCommonExcelT {
      Id,
      TacticEntityType,
      FloaterOffsetPosX,
      FloaterOffsetPosY,
      FloaterRandomPosRangeX,
      FloaterRandomPosRangeY,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FloaterCommonExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TacticEntityType(&self) -> TacticEntityType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticEntityType>(FloaterCommonExcel::VT_TACTICENTITYTYPE, Some(TacticEntityType::None)).unwrap()}
  }
  #[inline]
  pub fn FloaterOffsetPosX(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FloaterCommonExcel::VT_FLOATEROFFSETPOSX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FloaterOffsetPosY(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FloaterCommonExcel::VT_FLOATEROFFSETPOSY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FloaterRandomPosRangeX(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FloaterCommonExcel::VT_FLOATERRANDOMPOSRANGEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FloaterRandomPosRangeY(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FloaterCommonExcel::VT_FLOATERRANDOMPOSRANGEY, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FloaterCommonExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<TacticEntityType>("TacticEntityType", Self::VT_TACTICENTITYTYPE, false)?
     .visit_field::<i32>("FloaterOffsetPosX", Self::VT_FLOATEROFFSETPOSX, false)?
     .visit_field::<i32>("FloaterOffsetPosY", Self::VT_FLOATEROFFSETPOSY, false)?
     .visit_field::<i32>("FloaterRandomPosRangeX", Self::VT_FLOATERRANDOMPOSRANGEX, false)?
     .visit_field::<i32>("FloaterRandomPosRangeY", Self::VT_FLOATERRANDOMPOSRANGEY, false)?
     .finish();
    Ok(())
  }
}
pub struct FloaterCommonExcelArgs {
    pub Id: i64,
    pub TacticEntityType: TacticEntityType,
    pub FloaterOffsetPosX: i32,
    pub FloaterOffsetPosY: i32,
    pub FloaterRandomPosRangeX: i32,
    pub FloaterRandomPosRangeY: i32,
}
impl<'a> Default for FloaterCommonExcelArgs {
  #[inline]
  fn default() -> Self {
    FloaterCommonExcelArgs {
      Id: 0,
      TacticEntityType: TacticEntityType::None,
      FloaterOffsetPosX: 0,
      FloaterOffsetPosY: 0,
      FloaterRandomPosRangeX: 0,
      FloaterRandomPosRangeY: 0,
    }
  }
}

impl Serialize for FloaterCommonExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FloaterCommonExcel", 6)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("TacticEntityType", &self.TacticEntityType())?;
      s.serialize_field("FloaterOffsetPosX", &self.FloaterOffsetPosX())?;
      s.serialize_field("FloaterOffsetPosY", &self.FloaterOffsetPosY())?;
      s.serialize_field("FloaterRandomPosRangeX", &self.FloaterRandomPosRangeX())?;
      s.serialize_field("FloaterRandomPosRangeY", &self.FloaterRandomPosRangeY())?;
    s.end()
  }
}

pub struct FloaterCommonExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FloaterCommonExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(FloaterCommonExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_TacticEntityType(&mut self, TacticEntityType: TacticEntityType) {
    self.fbb_.push_slot::<TacticEntityType>(FloaterCommonExcel::VT_TACTICENTITYTYPE, TacticEntityType, TacticEntityType::None);
  }
  #[inline]
  pub fn add_FloaterOffsetPosX(&mut self, FloaterOffsetPosX: i32) {
    self.fbb_.push_slot::<i32>(FloaterCommonExcel::VT_FLOATEROFFSETPOSX, FloaterOffsetPosX, 0);
  }
  #[inline]
  pub fn add_FloaterOffsetPosY(&mut self, FloaterOffsetPosY: i32) {
    self.fbb_.push_slot::<i32>(FloaterCommonExcel::VT_FLOATEROFFSETPOSY, FloaterOffsetPosY, 0);
  }
  #[inline]
  pub fn add_FloaterRandomPosRangeX(&mut self, FloaterRandomPosRangeX: i32) {
    self.fbb_.push_slot::<i32>(FloaterCommonExcel::VT_FLOATERRANDOMPOSRANGEX, FloaterRandomPosRangeX, 0);
  }
  #[inline]
  pub fn add_FloaterRandomPosRangeY(&mut self, FloaterRandomPosRangeY: i32) {
    self.fbb_.push_slot::<i32>(FloaterCommonExcel::VT_FLOATERRANDOMPOSRANGEY, FloaterRandomPosRangeY, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FloaterCommonExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FloaterCommonExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FloaterCommonExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FloaterCommonExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FloaterCommonExcel");
      ds.field("Id", &self.Id());
      ds.field("TacticEntityType", &self.TacticEntityType());
      ds.field("FloaterOffsetPosX", &self.FloaterOffsetPosX());
      ds.field("FloaterOffsetPosY", &self.FloaterOffsetPosY());
      ds.field("FloaterRandomPosRangeX", &self.FloaterRandomPosRangeX());
      ds.field("FloaterRandomPosRangeY", &self.FloaterRandomPosRangeY());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FloaterCommonExcelT {
  pub Id: i64,
  pub TacticEntityType: TacticEntityType,
  pub FloaterOffsetPosX: i32,
  pub FloaterOffsetPosY: i32,
  pub FloaterRandomPosRangeX: i32,
  pub FloaterRandomPosRangeY: i32,
}
impl Default for FloaterCommonExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      TacticEntityType: TacticEntityType::None,
      FloaterOffsetPosX: 0,
      FloaterOffsetPosY: 0,
      FloaterRandomPosRangeX: 0,
      FloaterRandomPosRangeY: 0,
    }
  }
}
impl FloaterCommonExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FloaterCommonExcel<'b>> {
    let Id = self.Id;
    let TacticEntityType = self.TacticEntityType;
    let FloaterOffsetPosX = self.FloaterOffsetPosX;
    let FloaterOffsetPosY = self.FloaterOffsetPosY;
    let FloaterRandomPosRangeX = self.FloaterRandomPosRangeX;
    let FloaterRandomPosRangeY = self.FloaterRandomPosRangeY;
    FloaterCommonExcel::create(_fbb, &FloaterCommonExcelArgs{
      Id,
      TacticEntityType,
      FloaterOffsetPosX,
      FloaterOffsetPosY,
      FloaterRandomPosRangeX,
      FloaterRandomPosRangeY,
    })
  }
}
