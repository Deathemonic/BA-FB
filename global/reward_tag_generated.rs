// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_REWARD_TAG: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_REWARD_TAG: i32 = 22;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_REWARD_TAG: [RewardTag; 23] = [
  RewardTag::Default,
  RewardTag::FirstClear,
  RewardTag::StrategyObject,
  RewardTag::Event,
  RewardTag::ThreeStar,
  RewardTag::ProductMonthly,
  RewardTag::Rare,
  RewardTag::EventBonus,
  RewardTag::TimeWeight,
  RewardTag::ProductWeekly,
  RewardTag::ProductBiweekly,
  RewardTag::EventPermanentReward,
  RewardTag::ConquestManageEvent,
  RewardTag::ConquestManageDefault,
  RewardTag::ConquestCalculateDefault,
  RewardTag::ConquestCalculateLevel2,
  RewardTag::ConquestCalculateLevel3,
  RewardTag::ConquestFootholdUpgrade2,
  RewardTag::ConquestFootholdUpgrade3,
  RewardTag::ConquestErosionPenalty,
  RewardTag::GemBonus,
  RewardTag::GemPaid,
  RewardTag::ConquestTileConquer,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RewardTag(pub i32);
#[allow(non_upper_case_globals)]
impl RewardTag {
  pub const Default: Self = Self(0);
  pub const FirstClear: Self = Self(1);
  pub const StrategyObject: Self = Self(2);
  pub const Event: Self = Self(3);
  pub const ThreeStar: Self = Self(4);
  pub const ProductMonthly: Self = Self(5);
  pub const Rare: Self = Self(6);
  pub const EventBonus: Self = Self(7);
  pub const TimeWeight: Self = Self(8);
  pub const ProductWeekly: Self = Self(9);
  pub const ProductBiweekly: Self = Self(10);
  pub const EventPermanentReward: Self = Self(11);
  pub const ConquestManageEvent: Self = Self(12);
  pub const ConquestManageDefault: Self = Self(13);
  pub const ConquestCalculateDefault: Self = Self(14);
  pub const ConquestCalculateLevel2: Self = Self(15);
  pub const ConquestCalculateLevel3: Self = Self(16);
  pub const ConquestFootholdUpgrade2: Self = Self(17);
  pub const ConquestFootholdUpgrade3: Self = Self(18);
  pub const ConquestErosionPenalty: Self = Self(19);
  pub const GemBonus: Self = Self(20);
  pub const GemPaid: Self = Self(21);
  pub const ConquestTileConquer: Self = Self(22);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 22;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Default,
    Self::FirstClear,
    Self::StrategyObject,
    Self::Event,
    Self::ThreeStar,
    Self::ProductMonthly,
    Self::Rare,
    Self::EventBonus,
    Self::TimeWeight,
    Self::ProductWeekly,
    Self::ProductBiweekly,
    Self::EventPermanentReward,
    Self::ConquestManageEvent,
    Self::ConquestManageDefault,
    Self::ConquestCalculateDefault,
    Self::ConquestCalculateLevel2,
    Self::ConquestCalculateLevel3,
    Self::ConquestFootholdUpgrade2,
    Self::ConquestFootholdUpgrade3,
    Self::ConquestErosionPenalty,
    Self::GemBonus,
    Self::GemPaid,
    Self::ConquestTileConquer,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Default => Some("Default"),
      Self::FirstClear => Some("FirstClear"),
      Self::StrategyObject => Some("StrategyObject"),
      Self::Event => Some("Event"),
      Self::ThreeStar => Some("ThreeStar"),
      Self::ProductMonthly => Some("ProductMonthly"),
      Self::Rare => Some("Rare"),
      Self::EventBonus => Some("EventBonus"),
      Self::TimeWeight => Some("TimeWeight"),
      Self::ProductWeekly => Some("ProductWeekly"),
      Self::ProductBiweekly => Some("ProductBiweekly"),
      Self::EventPermanentReward => Some("EventPermanentReward"),
      Self::ConquestManageEvent => Some("ConquestManageEvent"),
      Self::ConquestManageDefault => Some("ConquestManageDefault"),
      Self::ConquestCalculateDefault => Some("ConquestCalculateDefault"),
      Self::ConquestCalculateLevel2 => Some("ConquestCalculateLevel2"),
      Self::ConquestCalculateLevel3 => Some("ConquestCalculateLevel3"),
      Self::ConquestFootholdUpgrade2 => Some("ConquestFootholdUpgrade2"),
      Self::ConquestFootholdUpgrade3 => Some("ConquestFootholdUpgrade3"),
      Self::ConquestErosionPenalty => Some("ConquestErosionPenalty"),
      Self::GemBonus => Some("GemBonus"),
      Self::GemPaid => Some("GemPaid"),
      Self::ConquestTileConquer => Some("ConquestTileConquer"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RewardTag {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for RewardTag {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("RewardTag", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for RewardTag {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RewardTag {
    type Output = RewardTag;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RewardTag {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RewardTag {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RewardTag {}
