// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MissionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MissionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MissionExcel<'a> {
  type Inner = MissionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MissionExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CATEGORY: flatbuffers::VOffsetT = 6;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 8;
  pub const VT_RESETTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_TOASTDISPLAYTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_TOASTIMAGEPATH: flatbuffers::VOffsetT = 14;
  pub const VT_VIEWFLAG: flatbuffers::VOffsetT = 16;
  pub const VT_LIMIT: flatbuffers::VOffsetT = 18;
  pub const VT_STARTDATE: flatbuffers::VOffsetT = 20;
  pub const VT_ENDDATE: flatbuffers::VOffsetT = 22;
  pub const VT_ENDDAY: flatbuffers::VOffsetT = 24;
  pub const VT_STARTABLEENDDATE: flatbuffers::VOffsetT = 26;
  pub const VT_DATEAUTOREFER: flatbuffers::VOffsetT = 28;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 30;
  pub const VT_PREMISSIONID: flatbuffers::VOffsetT = 32;
  pub const VT_ACCOUNTTYPE: flatbuffers::VOffsetT = 34;
  pub const VT_ACCOUNTLEVEL: flatbuffers::VOffsetT = 36;
  pub const VT_CONTENTTAGS: flatbuffers::VOffsetT = 38;
  pub const VT_SHORTCUTUI: flatbuffers::VOffsetT = 40;
  pub const VT_CHALLENGESTAGESHORTCUT: flatbuffers::VOffsetT = 42;
  pub const VT_COMPLETECONDITIONTYPE: flatbuffers::VOffsetT = 44;
  pub const VT_COMPLETECONDITIONCOUNT: flatbuffers::VOffsetT = 46;
  pub const VT_COMPLETECONDITIONPARAMETER: flatbuffers::VOffsetT = 48;
  pub const VT_COMPLETECONDITIONPARAMETERTAG: flatbuffers::VOffsetT = 50;
  pub const VT_REWARDICON: flatbuffers::VOffsetT = 52;
  pub const VT_MISSIONREWARDPARCELTYPE: flatbuffers::VOffsetT = 54;
  pub const VT_MISSIONREWARDPARCELID: flatbuffers::VOffsetT = 56;
  pub const VT_MISSIONREWARDAMOUNT: flatbuffers::VOffsetT = 58;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MissionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MissionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MissionExcel<'bldr>> {
    let mut builder = MissionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"Mission");
      let x = args.CompleteConditionCount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CompleteConditionCount(x);
      let x = args.ChallengeStageShortcut;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ChallengeStageShortcut(x);
      let x = args.AccountLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccountLevel(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.EndDay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EndDay(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.MissionRewardAmount {
        builder.add_MissionRewardAmount(x);
      }
      if let Some(x) = args.MissionRewardParcelId {
        builder.add_MissionRewardParcelId(x);
      }
      if let Some(x) = args.MissionRewardParcelType {
        builder.add_MissionRewardParcelType(x);
      }
      if let Some(x) = args.RewardIcon {
        builder.add_RewardIcon(x);
      }
      if let Some(x) = args.CompleteConditionParameterTag {
        builder.add_CompleteConditionParameterTag(x);
      }
      if let Some(x) = args.CompleteConditionParameter {
        builder.add_CompleteConditionParameter(x);
      }
      let x = args.CompleteConditionType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CompleteConditionType(x);
      if let Some(x) = args.ShortcutUI {
        builder.add_ShortcutUI(x);
      }
      if let Some(x) = args.ContentTags {
        builder.add_ContentTags(x);
      }
      let x = args.AccountType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_AccountType(x);
      if let Some(x) = args.PreMissionId {
        builder.add_PreMissionId(x);
      }
      let x = args.DateAutoRefer;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DateAutoRefer(x);
      if let Some(x) = args.StartableEndDate {
        builder.add_StartableEndDate(x);
      }
      if let Some(x) = args.EndDate {
        builder.add_EndDate(x);
      }
      if let Some(x) = args.StartDate {
        builder.add_StartDate(x);
      }
      if let Some(x) = args.ToastImagePath {
        builder.add_ToastImagePath(x);
      }
      let x = args.ToastDisplayType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ToastDisplayType(x);
      let x = args.ResetType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ResetType(x);
      let x = args.Description;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Description(x);
      let x = args.Category;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_Category(x);
      builder.add_Limit(args.Limit);
      builder.add_ViewFlag(args.ViewFlag);
    builder.finish()
  }

  pub fn unpack(&self) -> MissionExcelT {
    let key = table_encryption_service::create_key(b"Mission");
      let Id = self.Id();
      let Category = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.Category(), &key)
      } else {
        self.Category()
      };
      let Description = self.Description();
      let ResetType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ResetType(), &key)
      } else {
        self.ResetType()
      };
      let ToastDisplayType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ToastDisplayType(), &key)
      } else {
        self.ToastDisplayType()
      };
    let ToastImagePath = self.ToastImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ViewFlag = self.ViewFlag();
      let Limit = self.Limit();
    let StartDate = self.StartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndDate = self.EndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let EndDay = self.EndDay();
    let StartableEndDate = self.StartableEndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DateAutoRefer = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DateAutoRefer(), &key)
      } else {
        self.DateAutoRefer()
      };
      let DisplayOrder = self.DisplayOrder();
    let PreMissionId = self.PreMissionId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let AccountType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.AccountType(), &key)
      } else {
        self.AccountType()
      };
      let AccountLevel = self.AccountLevel();
    let ContentTags = self.ContentTags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let ShortcutUI = self.ShortcutUI().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
      let ChallengeStageShortcut = self.ChallengeStageShortcut();
      let CompleteConditionType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CompleteConditionType(), &key)
      } else {
        self.CompleteConditionType()
      };
      let CompleteConditionCount = self.CompleteConditionCount();
    let CompleteConditionParameter = self.CompleteConditionParameter().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let CompleteConditionParameterTag = self.CompleteConditionParameterTag().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let RewardIcon = self.RewardIcon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MissionRewardParcelType = self.MissionRewardParcelType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let MissionRewardParcelId = self.MissionRewardParcelId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let MissionRewardAmount = self.MissionRewardAmount().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    MissionExcelT {
      Id,
      Category,
      Description,
      ResetType,
      ToastDisplayType,
      ToastImagePath,
      ViewFlag,
      Limit,
      StartDate,
      EndDate,
      EndDay,
      StartableEndDate,
      DateAutoRefer,
      DisplayOrder,
      PreMissionId,
      AccountType,
      AccountLevel,
      ContentTags,
      ShortcutUI,
      ChallengeStageShortcut,
      CompleteConditionType,
      CompleteConditionCount,
      CompleteConditionParameter,
      CompleteConditionParameterTag,
      RewardIcon,
      MissionRewardParcelType,
      MissionRewardParcelId,
      MissionRewardAmount,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MissionExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Category(&self) -> MissionCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionCategory>(MissionExcel::VT_CATEGORY, Some(MissionCategory::Challenge)).unwrap()}
  }
  #[inline]
  pub fn Description(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MissionExcel::VT_DESCRIPTION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ResetType(&self) -> MissionResetType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionResetType>(MissionExcel::VT_RESETTYPE, Some(MissionResetType::None)).unwrap()}
  }
  #[inline]
  pub fn ToastDisplayType(&self) -> MissionToastDisplayConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionToastDisplayConditionType>(MissionExcel::VT_TOASTDISPLAYTYPE, Some(MissionToastDisplayConditionType::Always)).unwrap()}
  }
  #[inline]
  pub fn ToastImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MissionExcel::VT_TOASTIMAGEPATH, None)}
  }
  #[inline]
  pub fn ViewFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MissionExcel::VT_VIEWFLAG, Some(false)).unwrap()}
  }
  #[inline]
  pub fn Limit(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MissionExcel::VT_LIMIT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn StartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MissionExcel::VT_STARTDATE, None)}
  }
  #[inline]
  pub fn EndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MissionExcel::VT_ENDDATE, None)}
  }
  #[inline]
  pub fn EndDay(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MissionExcel::VT_ENDDAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StartableEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MissionExcel::VT_STARTABLEENDDATE, None)}
  }
  #[inline]
  pub fn DateAutoRefer(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(MissionExcel::VT_DATEAUTOREFER, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MissionExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PreMissionId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MissionExcel::VT_PREMISSIONID, None)}
  }
  #[inline]
  pub fn AccountType(&self) -> AccountState {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AccountState>(MissionExcel::VT_ACCOUNTTYPE, Some(AccountState::WaitingSignIn)).unwrap()}
  }
  #[inline]
  pub fn AccountLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MissionExcel::VT_ACCOUNTLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentTags(&self) -> Option<flatbuffers::Vector<'a, SuddenMissionContentType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, SuddenMissionContentType>>>(MissionExcel::VT_CONTENTTAGS, None)}
  }
  #[inline]
  pub fn ShortcutUI(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(MissionExcel::VT_SHORTCUTUI, None)}
  }
  #[inline]
  pub fn ChallengeStageShortcut(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MissionExcel::VT_CHALLENGESTAGESHORTCUT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CompleteConditionType(&self) -> MissionCompleteConditionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MissionCompleteConditionType>(MissionExcel::VT_COMPLETECONDITIONTYPE, Some(MissionCompleteConditionType::None)).unwrap()}
  }
  #[inline]
  pub fn CompleteConditionCount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MissionExcel::VT_COMPLETECONDITIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CompleteConditionParameter(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MissionExcel::VT_COMPLETECONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn CompleteConditionParameterTag(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(MissionExcel::VT_COMPLETECONDITIONPARAMETERTAG, None)}
  }
  #[inline]
  pub fn RewardIcon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MissionExcel::VT_REWARDICON, None)}
  }
  #[inline]
  pub fn MissionRewardParcelType(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(MissionExcel::VT_MISSIONREWARDPARCELTYPE, None)}
  }
  #[inline]
  pub fn MissionRewardParcelId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(MissionExcel::VT_MISSIONREWARDPARCELID, None)}
  }
  #[inline]
  pub fn MissionRewardAmount(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(MissionExcel::VT_MISSIONREWARDAMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for MissionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<MissionCategory>("Category", Self::VT_CATEGORY, false)?
     .visit_field::<u32>("Description", Self::VT_DESCRIPTION, false)?
     .visit_field::<MissionResetType>("ResetType", Self::VT_RESETTYPE, false)?
     .visit_field::<MissionToastDisplayConditionType>("ToastDisplayType", Self::VT_TOASTDISPLAYTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ToastImagePath", Self::VT_TOASTIMAGEPATH, false)?
     .visit_field::<bool>("ViewFlag", Self::VT_VIEWFLAG, false)?
     .visit_field::<bool>("Limit", Self::VT_LIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartDate", Self::VT_STARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndDate", Self::VT_ENDDATE, false)?
     .visit_field::<i64>("EndDay", Self::VT_ENDDAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("StartableEndDate", Self::VT_STARTABLEENDDATE, false)?
     .visit_field::<ContentType>("DateAutoRefer", Self::VT_DATEAUTOREFER, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("PreMissionId", Self::VT_PREMISSIONID, false)?
     .visit_field::<AccountState>("AccountType", Self::VT_ACCOUNTTYPE, false)?
     .visit_field::<i64>("AccountLevel", Self::VT_ACCOUNTLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, SuddenMissionContentType>>>("ContentTags", Self::VT_CONTENTTAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ShortcutUI", Self::VT_SHORTCUTUI, false)?
     .visit_field::<i64>("ChallengeStageShortcut", Self::VT_CHALLENGESTAGESHORTCUT, false)?
     .visit_field::<MissionCompleteConditionType>("CompleteConditionType", Self::VT_COMPLETECONDITIONTYPE, false)?
     .visit_field::<i64>("CompleteConditionCount", Self::VT_COMPLETECONDITIONCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("CompleteConditionParameter", Self::VT_COMPLETECONDITIONPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("CompleteConditionParameterTag", Self::VT_COMPLETECONDITIONPARAMETERTAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("RewardIcon", Self::VT_REWARDICON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("MissionRewardParcelType", Self::VT_MISSIONREWARDPARCELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MissionRewardParcelId", Self::VT_MISSIONREWARDPARCELID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("MissionRewardAmount", Self::VT_MISSIONREWARDAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct MissionExcelArgs<'a> {
    pub Id: i64,
    pub Category: MissionCategory,
    pub Description: u32,
    pub ResetType: MissionResetType,
    pub ToastDisplayType: MissionToastDisplayConditionType,
    pub ToastImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ViewFlag: bool,
    pub Limit: bool,
    pub StartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndDay: i64,
    pub StartableEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DateAutoRefer: ContentType,
    pub DisplayOrder: i64,
    pub PreMissionId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub AccountType: AccountState,
    pub AccountLevel: i64,
    pub ContentTags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, SuddenMissionContentType>>>,
    pub ShortcutUI: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ChallengeStageShortcut: i64,
    pub CompleteConditionType: MissionCompleteConditionType,
    pub CompleteConditionCount: i64,
    pub CompleteConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub CompleteConditionParameterTag: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub RewardIcon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MissionRewardParcelType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub MissionRewardParcelId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub MissionRewardAmount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for MissionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MissionExcelArgs {
      Id: 0,
      Category: MissionCategory::Challenge,
      Description: 0,
      ResetType: MissionResetType::None,
      ToastDisplayType: MissionToastDisplayConditionType::Always,
      ToastImagePath: None,
      ViewFlag: false,
      Limit: false,
      StartDate: None,
      EndDate: None,
      EndDay: 0,
      StartableEndDate: None,
      DateAutoRefer: ContentType::None,
      DisplayOrder: 0,
      PreMissionId: None,
      AccountType: AccountState::WaitingSignIn,
      AccountLevel: 0,
      ContentTags: None,
      ShortcutUI: None,
      ChallengeStageShortcut: 0,
      CompleteConditionType: MissionCompleteConditionType::None,
      CompleteConditionCount: 0,
      CompleteConditionParameter: None,
      CompleteConditionParameterTag: None,
      RewardIcon: None,
      MissionRewardParcelType: None,
      MissionRewardParcelId: None,
      MissionRewardAmount: None,
    }
  }
}

impl Serialize for MissionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MissionExcel", 28)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("Category", &self.Category())?;
      s.serialize_field("Description", &self.Description())?;
      s.serialize_field("ResetType", &self.ResetType())?;
      s.serialize_field("ToastDisplayType", &self.ToastDisplayType())?;
      if let Some(f) = self.ToastImagePath() {
        s.serialize_field("ToastImagePath", &f)?;
      } else {
        s.skip_field("ToastImagePath")?;
      }
      s.serialize_field("ViewFlag", &self.ViewFlag())?;
      s.serialize_field("Limit", &self.Limit())?;
      if let Some(f) = self.StartDate() {
        s.serialize_field("StartDate", &f)?;
      } else {
        s.skip_field("StartDate")?;
      }
      if let Some(f) = self.EndDate() {
        s.serialize_field("EndDate", &f)?;
      } else {
        s.skip_field("EndDate")?;
      }
      s.serialize_field("EndDay", &self.EndDay())?;
      if let Some(f) = self.StartableEndDate() {
        s.serialize_field("StartableEndDate", &f)?;
      } else {
        s.skip_field("StartableEndDate")?;
      }
      s.serialize_field("DateAutoRefer", &self.DateAutoRefer())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      if let Some(f) = self.PreMissionId() {
        s.serialize_field("PreMissionId", &f)?;
      } else {
        s.skip_field("PreMissionId")?;
      }
      s.serialize_field("AccountType", &self.AccountType())?;
      s.serialize_field("AccountLevel", &self.AccountLevel())?;
      if let Some(f) = self.ContentTags() {
        s.serialize_field("ContentTags", &f)?;
      } else {
        s.skip_field("ContentTags")?;
      }
      if let Some(f) = self.ShortcutUI() {
        s.serialize_field("ShortcutUI", &f)?;
      } else {
        s.skip_field("ShortcutUI")?;
      }
      s.serialize_field("ChallengeStageShortcut", &self.ChallengeStageShortcut())?;
      s.serialize_field("CompleteConditionType", &self.CompleteConditionType())?;
      s.serialize_field("CompleteConditionCount", &self.CompleteConditionCount())?;
      if let Some(f) = self.CompleteConditionParameter() {
        s.serialize_field("CompleteConditionParameter", &f)?;
      } else {
        s.skip_field("CompleteConditionParameter")?;
      }
      if let Some(f) = self.CompleteConditionParameterTag() {
        s.serialize_field("CompleteConditionParameterTag", &f)?;
      } else {
        s.skip_field("CompleteConditionParameterTag")?;
      }
      if let Some(f) = self.RewardIcon() {
        s.serialize_field("RewardIcon", &f)?;
      } else {
        s.skip_field("RewardIcon")?;
      }
      if let Some(f) = self.MissionRewardParcelType() {
        s.serialize_field("MissionRewardParcelType", &f)?;
      } else {
        s.skip_field("MissionRewardParcelType")?;
      }
      if let Some(f) = self.MissionRewardParcelId() {
        s.serialize_field("MissionRewardParcelId", &f)?;
      } else {
        s.skip_field("MissionRewardParcelId")?;
      }
      if let Some(f) = self.MissionRewardAmount() {
        s.serialize_field("MissionRewardAmount", &f)?;
      } else {
        s.skip_field("MissionRewardAmount")?;
      }
    s.end()
  }
}

pub struct MissionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MissionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MissionExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_Category(&mut self, Category: MissionCategory) {
    self.fbb_.push_slot::<MissionCategory>(MissionExcel::VT_CATEGORY, Category, MissionCategory::Challenge);
  }
  #[inline]
  pub fn add_Description(&mut self, Description: u32) {
    self.fbb_.push_slot::<u32>(MissionExcel::VT_DESCRIPTION, Description, 0);
  }
  #[inline]
  pub fn add_ResetType(&mut self, ResetType: MissionResetType) {
    self.fbb_.push_slot::<MissionResetType>(MissionExcel::VT_RESETTYPE, ResetType, MissionResetType::None);
  }
  #[inline]
  pub fn add_ToastDisplayType(&mut self, ToastDisplayType: MissionToastDisplayConditionType) {
    self.fbb_.push_slot::<MissionToastDisplayConditionType>(MissionExcel::VT_TOASTDISPLAYTYPE, ToastDisplayType, MissionToastDisplayConditionType::Always);
  }
  #[inline]
  pub fn add_ToastImagePath(&mut self, ToastImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_TOASTIMAGEPATH, ToastImagePath);
  }
  #[inline]
  pub fn add_ViewFlag(&mut self, ViewFlag: bool) {
    self.fbb_.push_slot::<bool>(MissionExcel::VT_VIEWFLAG, ViewFlag, false);
  }
  #[inline]
  pub fn add_Limit(&mut self, Limit: bool) {
    self.fbb_.push_slot::<bool>(MissionExcel::VT_LIMIT, Limit, false);
  }
  #[inline]
  pub fn add_StartDate(&mut self, StartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_STARTDATE, StartDate);
  }
  #[inline]
  pub fn add_EndDate(&mut self, EndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_ENDDATE, EndDate);
  }
  #[inline]
  pub fn add_EndDay(&mut self, EndDay: i64) {
    self.fbb_.push_slot::<i64>(MissionExcel::VT_ENDDAY, EndDay, 0);
  }
  #[inline]
  pub fn add_StartableEndDate(&mut self, StartableEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_STARTABLEENDDATE, StartableEndDate);
  }
  #[inline]
  pub fn add_DateAutoRefer(&mut self, DateAutoRefer: ContentType) {
    self.fbb_.push_slot::<ContentType>(MissionExcel::VT_DATEAUTOREFER, DateAutoRefer, ContentType::None);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(MissionExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_PreMissionId(&mut self, PreMissionId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_PREMISSIONID, PreMissionId);
  }
  #[inline]
  pub fn add_AccountType(&mut self, AccountType: AccountState) {
    self.fbb_.push_slot::<AccountState>(MissionExcel::VT_ACCOUNTTYPE, AccountType, AccountState::WaitingSignIn);
  }
  #[inline]
  pub fn add_AccountLevel(&mut self, AccountLevel: i64) {
    self.fbb_.push_slot::<i64>(MissionExcel::VT_ACCOUNTLEVEL, AccountLevel, 0);
  }
  #[inline]
  pub fn add_ContentTags(&mut self, ContentTags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , SuddenMissionContentType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_CONTENTTAGS, ContentTags);
  }
  #[inline]
  pub fn add_ShortcutUI(&mut self, ShortcutUI: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_SHORTCUTUI, ShortcutUI);
  }
  #[inline]
  pub fn add_ChallengeStageShortcut(&mut self, ChallengeStageShortcut: i64) {
    self.fbb_.push_slot::<i64>(MissionExcel::VT_CHALLENGESTAGESHORTCUT, ChallengeStageShortcut, 0);
  }
  #[inline]
  pub fn add_CompleteConditionType(&mut self, CompleteConditionType: MissionCompleteConditionType) {
    self.fbb_.push_slot::<MissionCompleteConditionType>(MissionExcel::VT_COMPLETECONDITIONTYPE, CompleteConditionType, MissionCompleteConditionType::None);
  }
  #[inline]
  pub fn add_CompleteConditionCount(&mut self, CompleteConditionCount: i64) {
    self.fbb_.push_slot::<i64>(MissionExcel::VT_COMPLETECONDITIONCOUNT, CompleteConditionCount, 0);
  }
  #[inline]
  pub fn add_CompleteConditionParameter(&mut self, CompleteConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_COMPLETECONDITIONPARAMETER, CompleteConditionParameter);
  }
  #[inline]
  pub fn add_CompleteConditionParameterTag(&mut self, CompleteConditionParameterTag: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_COMPLETECONDITIONPARAMETERTAG, CompleteConditionParameterTag);
  }
  #[inline]
  pub fn add_RewardIcon(&mut self, RewardIcon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_REWARDICON, RewardIcon);
  }
  #[inline]
  pub fn add_MissionRewardParcelType(&mut self, MissionRewardParcelType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_MISSIONREWARDPARCELTYPE, MissionRewardParcelType);
  }
  #[inline]
  pub fn add_MissionRewardParcelId(&mut self, MissionRewardParcelId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_MISSIONREWARDPARCELID, MissionRewardParcelId);
  }
  #[inline]
  pub fn add_MissionRewardAmount(&mut self, MissionRewardAmount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MissionExcel::VT_MISSIONREWARDAMOUNT, MissionRewardAmount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MissionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MissionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MissionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MissionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MissionExcel");
      ds.field("Id", &self.Id());
      ds.field("Category", &self.Category());
      ds.field("Description", &self.Description());
      ds.field("ResetType", &self.ResetType());
      ds.field("ToastDisplayType", &self.ToastDisplayType());
      ds.field("ToastImagePath", &self.ToastImagePath());
      ds.field("ViewFlag", &self.ViewFlag());
      ds.field("Limit", &self.Limit());
      ds.field("StartDate", &self.StartDate());
      ds.field("EndDate", &self.EndDate());
      ds.field("EndDay", &self.EndDay());
      ds.field("StartableEndDate", &self.StartableEndDate());
      ds.field("DateAutoRefer", &self.DateAutoRefer());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("PreMissionId", &self.PreMissionId());
      ds.field("AccountType", &self.AccountType());
      ds.field("AccountLevel", &self.AccountLevel());
      ds.field("ContentTags", &self.ContentTags());
      ds.field("ShortcutUI", &self.ShortcutUI());
      ds.field("ChallengeStageShortcut", &self.ChallengeStageShortcut());
      ds.field("CompleteConditionType", &self.CompleteConditionType());
      ds.field("CompleteConditionCount", &self.CompleteConditionCount());
      ds.field("CompleteConditionParameter", &self.CompleteConditionParameter());
      ds.field("CompleteConditionParameterTag", &self.CompleteConditionParameterTag());
      ds.field("RewardIcon", &self.RewardIcon());
      ds.field("MissionRewardParcelType", &self.MissionRewardParcelType());
      ds.field("MissionRewardParcelId", &self.MissionRewardParcelId());
      ds.field("MissionRewardAmount", &self.MissionRewardAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MissionExcelT {
  pub Id: i64,
  pub Category: MissionCategory,
  pub Description: u32,
  pub ResetType: MissionResetType,
  pub ToastDisplayType: MissionToastDisplayConditionType,
  pub ToastImagePath: Option<String>,
  pub ViewFlag: bool,
  pub Limit: bool,
  pub StartDate: Option<String>,
  pub EndDate: Option<String>,
  pub EndDay: i64,
  pub StartableEndDate: Option<String>,
  pub DateAutoRefer: ContentType,
  pub DisplayOrder: i64,
  pub PreMissionId: Option<Vec<i64>>,
  pub AccountType: AccountState,
  pub AccountLevel: i64,
  pub ContentTags: Option<Vec<SuddenMissionContentType>>,
  pub ShortcutUI: Option<Vec<String>>,
  pub ChallengeStageShortcut: i64,
  pub CompleteConditionType: MissionCompleteConditionType,
  pub CompleteConditionCount: i64,
  pub CompleteConditionParameter: Option<Vec<i64>>,
  pub CompleteConditionParameterTag: Option<Vec<Tag>>,
  pub RewardIcon: Option<String>,
  pub MissionRewardParcelType: Option<Vec<ParcelType>>,
  pub MissionRewardParcelId: Option<Vec<i64>>,
  pub MissionRewardAmount: Option<Vec<i32>>,
}
impl Default for MissionExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      Category: MissionCategory::Challenge,
      Description: 0,
      ResetType: MissionResetType::None,
      ToastDisplayType: MissionToastDisplayConditionType::Always,
      ToastImagePath: None,
      ViewFlag: false,
      Limit: false,
      StartDate: None,
      EndDate: None,
      EndDay: 0,
      StartableEndDate: None,
      DateAutoRefer: ContentType::None,
      DisplayOrder: 0,
      PreMissionId: None,
      AccountType: AccountState::WaitingSignIn,
      AccountLevel: 0,
      ContentTags: None,
      ShortcutUI: None,
      ChallengeStageShortcut: 0,
      CompleteConditionType: MissionCompleteConditionType::None,
      CompleteConditionCount: 0,
      CompleteConditionParameter: None,
      CompleteConditionParameterTag: None,
      RewardIcon: None,
      MissionRewardParcelType: None,
      MissionRewardParcelId: None,
      MissionRewardAmount: None,
    }
  }
}
impl MissionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MissionExcel<'b>> {
    let Id = self.Id;
    let Category = self.Category;
    let Description = self.Description;
    let ResetType = self.ResetType;
    let ToastDisplayType = self.ToastDisplayType;
    let ToastImagePath = self.ToastImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ViewFlag = self.ViewFlag;
    let Limit = self.Limit;
    let StartDate = self.StartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDate = self.EndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndDay = self.EndDay;
    let StartableEndDate = self.StartableEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DateAutoRefer = self.DateAutoRefer;
    let DisplayOrder = self.DisplayOrder;
    let PreMissionId = self.PreMissionId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let AccountType = self.AccountType;
    let AccountLevel = self.AccountLevel;
    let ContentTags = self.ContentTags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let ShortcutUI = self.ShortcutUI.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ChallengeStageShortcut = self.ChallengeStageShortcut;
    let CompleteConditionType = self.CompleteConditionType;
    let CompleteConditionCount = self.CompleteConditionCount;
    let CompleteConditionParameter = self.CompleteConditionParameter.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let CompleteConditionParameterTag = self.CompleteConditionParameterTag.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let RewardIcon = self.RewardIcon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MissionRewardParcelType = self.MissionRewardParcelType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MissionRewardParcelId = self.MissionRewardParcelId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MissionRewardAmount = self.MissionRewardAmount.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    MissionExcel::create(_fbb, &MissionExcelArgs{
      Id,
      Category,
      Description,
      ResetType,
      ToastDisplayType,
      ToastImagePath,
      ViewFlag,
      Limit,
      StartDate,
      EndDate,
      EndDay,
      StartableEndDate,
      DateAutoRefer,
      DisplayOrder,
      PreMissionId,
      AccountType,
      AccountLevel,
      ContentTags,
      ShortcutUI,
      ChallengeStageShortcut,
      CompleteConditionType,
      CompleteConditionCount,
      CompleteConditionParameter,
      CompleteConditionParameterTag,
      RewardIcon,
      MissionRewardParcelType,
      MissionRewardParcelId,
      MissionRewardAmount,
    })
  }
}
