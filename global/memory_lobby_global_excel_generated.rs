// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MemoryLobby_GlobalExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MemoryLobby_GlobalExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MemoryLobby_GlobalExcel<'a> {
  type Inner = MemoryLobby_GlobalExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MemoryLobby_GlobalExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 6;
  pub const VT_PREFABNAMEKR: flatbuffers::VOffsetT = 8;
  pub const VT_PREFABNAMETW: flatbuffers::VOffsetT = 10;
  pub const VT_PREFABNAMEASIA: flatbuffers::VOffsetT = 12;
  pub const VT_PREFABNAMENA: flatbuffers::VOffsetT = 14;
  pub const VT_PREFABNAMEGLOBAL: flatbuffers::VOffsetT = 16;
  pub const VT_PREFABNAMETEEN: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MemoryLobby_GlobalExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MemoryLobby_GlobalExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MemoryLobby_GlobalExcel<'bldr>> {
    let mut builder = MemoryLobby_GlobalExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MemoryLobby_Global");
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.PrefabNameTeen {
        builder.add_PrefabNameTeen(x);
      }
      if let Some(x) = args.PrefabNameGlobal {
        builder.add_PrefabNameGlobal(x);
      }
      if let Some(x) = args.PrefabNameNa {
        builder.add_PrefabNameNa(x);
      }
      if let Some(x) = args.PrefabNameAsia {
        builder.add_PrefabNameAsia(x);
      }
      if let Some(x) = args.PrefabNameTw {
        builder.add_PrefabNameTw(x);
      }
      if let Some(x) = args.PrefabNameKr {
        builder.add_PrefabNameKr(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> MemoryLobby_GlobalExcelT {
    let key = table_encryption_service::create_key(b"MemoryLobby_Global");
      let Id = self.Id();
      let CharacterId = self.CharacterId();
    let PrefabNameKr = self.PrefabNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabNameTw = self.PrefabNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabNameAsia = self.PrefabNameAsia().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabNameNa = self.PrefabNameNa().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabNameGlobal = self.PrefabNameGlobal().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PrefabNameTeen = self.PrefabNameTeen().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MemoryLobby_GlobalExcelT {
      Id,
      CharacterId,
      PrefabNameKr,
      PrefabNameTw,
      PrefabNameAsia,
      PrefabNameNa,
      PrefabNameGlobal,
      PrefabNameTeen,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobby_GlobalExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobby_GlobalExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PrefabNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobby_GlobalExcel::VT_PREFABNAMEKR, None)}
  }
  #[inline]
  pub fn PrefabNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobby_GlobalExcel::VT_PREFABNAMETW, None)}
  }
  #[inline]
  pub fn PrefabNameAsia(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobby_GlobalExcel::VT_PREFABNAMEASIA, None)}
  }
  #[inline]
  pub fn PrefabNameNa(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobby_GlobalExcel::VT_PREFABNAMENA, None)}
  }
  #[inline]
  pub fn PrefabNameGlobal(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobby_GlobalExcel::VT_PREFABNAMEGLOBAL, None)}
  }
  #[inline]
  pub fn PrefabNameTeen(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobby_GlobalExcel::VT_PREFABNAMETEEN, None)}
  }
}

impl flatbuffers::Verifiable for MemoryLobby_GlobalExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabNameKr", Self::VT_PREFABNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabNameTw", Self::VT_PREFABNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabNameAsia", Self::VT_PREFABNAMEASIA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabNameNa", Self::VT_PREFABNAMENA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabNameGlobal", Self::VT_PREFABNAMEGLOBAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PrefabNameTeen", Self::VT_PREFABNAMETEEN, false)?
     .finish();
    Ok(())
  }
}
pub struct MemoryLobby_GlobalExcelArgs<'a> {
    pub Id: i64,
    pub CharacterId: i64,
    pub PrefabNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabNameAsia: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabNameNa: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabNameGlobal: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PrefabNameTeen: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MemoryLobby_GlobalExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MemoryLobby_GlobalExcelArgs {
      Id: 0,
      CharacterId: 0,
      PrefabNameKr: None,
      PrefabNameTw: None,
      PrefabNameAsia: None,
      PrefabNameNa: None,
      PrefabNameGlobal: None,
      PrefabNameTeen: None,
    }
  }
}

impl Serialize for MemoryLobby_GlobalExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MemoryLobby_GlobalExcel", 8)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      if let Some(f) = self.PrefabNameKr() {
        s.serialize_field("PrefabNameKr", &f)?;
      } else {
        s.skip_field("PrefabNameKr")?;
      }
      if let Some(f) = self.PrefabNameTw() {
        s.serialize_field("PrefabNameTw", &f)?;
      } else {
        s.skip_field("PrefabNameTw")?;
      }
      if let Some(f) = self.PrefabNameAsia() {
        s.serialize_field("PrefabNameAsia", &f)?;
      } else {
        s.skip_field("PrefabNameAsia")?;
      }
      if let Some(f) = self.PrefabNameNa() {
        s.serialize_field("PrefabNameNa", &f)?;
      } else {
        s.skip_field("PrefabNameNa")?;
      }
      if let Some(f) = self.PrefabNameGlobal() {
        s.serialize_field("PrefabNameGlobal", &f)?;
      } else {
        s.skip_field("PrefabNameGlobal")?;
      }
      if let Some(f) = self.PrefabNameTeen() {
        s.serialize_field("PrefabNameTeen", &f)?;
      } else {
        s.skip_field("PrefabNameTeen")?;
      }
    s.end()
  }
}

pub struct MemoryLobby_GlobalExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MemoryLobby_GlobalExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobby_GlobalExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobby_GlobalExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_PrefabNameKr(&mut self, PrefabNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobby_GlobalExcel::VT_PREFABNAMEKR, PrefabNameKr);
  }
  #[inline]
  pub fn add_PrefabNameTw(&mut self, PrefabNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobby_GlobalExcel::VT_PREFABNAMETW, PrefabNameTw);
  }
  #[inline]
  pub fn add_PrefabNameAsia(&mut self, PrefabNameAsia: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobby_GlobalExcel::VT_PREFABNAMEASIA, PrefabNameAsia);
  }
  #[inline]
  pub fn add_PrefabNameNa(&mut self, PrefabNameNa: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobby_GlobalExcel::VT_PREFABNAMENA, PrefabNameNa);
  }
  #[inline]
  pub fn add_PrefabNameGlobal(&mut self, PrefabNameGlobal: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobby_GlobalExcel::VT_PREFABNAMEGLOBAL, PrefabNameGlobal);
  }
  #[inline]
  pub fn add_PrefabNameTeen(&mut self, PrefabNameTeen: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobby_GlobalExcel::VT_PREFABNAMETEEN, PrefabNameTeen);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MemoryLobby_GlobalExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MemoryLobby_GlobalExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MemoryLobby_GlobalExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MemoryLobby_GlobalExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MemoryLobby_GlobalExcel");
      ds.field("Id", &self.Id());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("PrefabNameKr", &self.PrefabNameKr());
      ds.field("PrefabNameTw", &self.PrefabNameTw());
      ds.field("PrefabNameAsia", &self.PrefabNameAsia());
      ds.field("PrefabNameNa", &self.PrefabNameNa());
      ds.field("PrefabNameGlobal", &self.PrefabNameGlobal());
      ds.field("PrefabNameTeen", &self.PrefabNameTeen());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MemoryLobby_GlobalExcelT {
  pub Id: i64,
  pub CharacterId: i64,
  pub PrefabNameKr: Option<String>,
  pub PrefabNameTw: Option<String>,
  pub PrefabNameAsia: Option<String>,
  pub PrefabNameNa: Option<String>,
  pub PrefabNameGlobal: Option<String>,
  pub PrefabNameTeen: Option<String>,
}
impl Default for MemoryLobby_GlobalExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CharacterId: 0,
      PrefabNameKr: None,
      PrefabNameTw: None,
      PrefabNameAsia: None,
      PrefabNameNa: None,
      PrefabNameGlobal: None,
      PrefabNameTeen: None,
    }
  }
}
impl MemoryLobby_GlobalExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MemoryLobby_GlobalExcel<'b>> {
    let Id = self.Id;
    let CharacterId = self.CharacterId;
    let PrefabNameKr = self.PrefabNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabNameTw = self.PrefabNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabNameAsia = self.PrefabNameAsia.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabNameNa = self.PrefabNameNa.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabNameGlobal = self.PrefabNameGlobal.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PrefabNameTeen = self.PrefabNameTeen.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MemoryLobby_GlobalExcel::create(_fbb, &MemoryLobby_GlobalExcelArgs{
      Id,
      CharacterId,
      PrefabNameKr,
      PrefabNameTw,
      PrefabNameAsia,
      PrefabNameNa,
      PrefabNameGlobal,
      PrefabNameTeen,
    })
  }
}
