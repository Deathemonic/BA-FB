// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioBGNameExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioBGNameExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioBGNameExcel<'a> {
  type Inner = ScenarioBGNameExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioBGNameExcel<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTIONSTEP: flatbuffers::VOffsetT = 6;
  pub const VT_BGFILENAME: flatbuffers::VOffsetT = 8;
  pub const VT_BGTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_ANIMATIONROOT: flatbuffers::VOffsetT = 12;
  pub const VT_ANIMATIONNAME: flatbuffers::VOffsetT = 14;
  pub const VT_SPINESCALE: flatbuffers::VOffsetT = 16;
  pub const VT_SPINELOCALPOSX: flatbuffers::VOffsetT = 18;
  pub const VT_SPINELOCALPOSY: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioBGNameExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioBGNameExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ScenarioBGNameExcel<'bldr>> {
    let mut builder = ScenarioBGNameExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioBGName");
      let x = args.SpineLocalPosY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SpineLocalPosY(x);
      let x = args.SpineLocalPosX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_SpineLocalPosX(x);
      let x = args.SpineScale;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_SpineScale(x);
      if let Some(x) = args.AnimationName {
        builder.add_AnimationName(x);
      }
      if let Some(x) = args.AnimationRoot {
        builder.add_AnimationRoot(x);
      }
      let x = args.BGType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_BGType(x);
      if let Some(x) = args.BGFileName {
        builder.add_BGFileName(x);
      }
      let x = args.ProductionStep;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ProductionStep(x);
      let x = args.Name;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_Name(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioBGNameExcelT {
    let key = table_encryption_service::create_key(b"ScenarioBGName");
      let Name = self.Name();
      let ProductionStep = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ProductionStep(), &key)
      } else {
        self.ProductionStep()
      };
    let BGFileName = self.BGFileName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BGType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.BGType(), &key)
      } else {
        self.BGType()
      };
    let AnimationRoot = self.AnimationRoot().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let AnimationName = self.AnimationName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let SpineScale = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.SpineScale(), &key)
      } else {
        self.SpineScale()
      };
      let SpineLocalPosX = self.SpineLocalPosX();
      let SpineLocalPosY = self.SpineLocalPosY();
    ScenarioBGNameExcelT {
      Name,
      ProductionStep,
      BGFileName,
      BGType,
      AnimationRoot,
      AnimationName,
      SpineScale,
      SpineLocalPosX,
      SpineLocalPosY,
    }
  }

  #[inline]
  pub fn Name(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGNameExcel::VT_NAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ProductionStep(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(ScenarioBGNameExcel::VT_PRODUCTIONSTEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn BGFileName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioBGNameExcel::VT_BGFILENAME, None)}
  }
  #[inline]
  pub fn BGType(&self) -> ScenarioBGType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ScenarioBGType>(ScenarioBGNameExcel::VT_BGTYPE, Some(ScenarioBGType::None)).unwrap()}
  }
  #[inline]
  pub fn AnimationRoot(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioBGNameExcel::VT_ANIMATIONROOT, None)}
  }
  #[inline]
  pub fn AnimationName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScenarioBGNameExcel::VT_ANIMATIONNAME, None)}
  }
  #[inline]
  pub fn SpineScale(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(ScenarioBGNameExcel::VT_SPINESCALE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn SpineLocalPosX(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ScenarioBGNameExcel::VT_SPINELOCALPOSX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SpineLocalPosY(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ScenarioBGNameExcel::VT_SPINELOCALPOSY, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScenarioBGNameExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("Name", Self::VT_NAME, false)?
     .visit_field::<ProductionStep>("ProductionStep", Self::VT_PRODUCTIONSTEP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BGFileName", Self::VT_BGFILENAME, false)?
     .visit_field::<ScenarioBGType>("BGType", Self::VT_BGTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AnimationRoot", Self::VT_ANIMATIONROOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("AnimationName", Self::VT_ANIMATIONNAME, false)?
     .visit_field::<f32>("SpineScale", Self::VT_SPINESCALE, false)?
     .visit_field::<i32>("SpineLocalPosX", Self::VT_SPINELOCALPOSX, false)?
     .visit_field::<i32>("SpineLocalPosY", Self::VT_SPINELOCALPOSY, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioBGNameExcelArgs<'a> {
    pub Name: u32,
    pub ProductionStep: ProductionStep,
    pub BGFileName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BGType: ScenarioBGType,
    pub AnimationRoot: Option<flatbuffers::WIPOffset<&'a str>>,
    pub AnimationName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SpineScale: f32,
    pub SpineLocalPosX: i32,
    pub SpineLocalPosY: i32,
}
impl<'a> Default for ScenarioBGNameExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScenarioBGNameExcelArgs {
      Name: 0,
      ProductionStep: ProductionStep::ToDo,
      BGFileName: None,
      BGType: ScenarioBGType::None,
      AnimationRoot: None,
      AnimationName: None,
      SpineScale: 0.0,
      SpineLocalPosX: 0,
      SpineLocalPosY: 0,
    }
  }
}

impl Serialize for ScenarioBGNameExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioBGNameExcel", 9)?;
      s.serialize_field("Name", &self.Name())?;
      s.serialize_field("ProductionStep", &self.ProductionStep())?;
      if let Some(f) = self.BGFileName() {
        s.serialize_field("BGFileName", &f)?;
      } else {
        s.skip_field("BGFileName")?;
      }
      s.serialize_field("BGType", &self.BGType())?;
      if let Some(f) = self.AnimationRoot() {
        s.serialize_field("AnimationRoot", &f)?;
      } else {
        s.skip_field("AnimationRoot")?;
      }
      if let Some(f) = self.AnimationName() {
        s.serialize_field("AnimationName", &f)?;
      } else {
        s.skip_field("AnimationName")?;
      }
      s.serialize_field("SpineScale", &self.SpineScale())?;
      s.serialize_field("SpineLocalPosX", &self.SpineLocalPosX())?;
      s.serialize_field("SpineLocalPosY", &self.SpineLocalPosY())?;
    s.end()
  }
}

pub struct ScenarioBGNameExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioBGNameExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Name(&mut self, Name: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGNameExcel::VT_NAME, Name, 0);
  }
  #[inline]
  pub fn add_ProductionStep(&mut self, ProductionStep: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(ScenarioBGNameExcel::VT_PRODUCTIONSTEP, ProductionStep, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_BGFileName(&mut self, BGFileName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioBGNameExcel::VT_BGFILENAME, BGFileName);
  }
  #[inline]
  pub fn add_BGType(&mut self, BGType: ScenarioBGType) {
    self.fbb_.push_slot::<ScenarioBGType>(ScenarioBGNameExcel::VT_BGTYPE, BGType, ScenarioBGType::None);
  }
  #[inline]
  pub fn add_AnimationRoot(&mut self, AnimationRoot: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioBGNameExcel::VT_ANIMATIONROOT, AnimationRoot);
  }
  #[inline]
  pub fn add_AnimationName(&mut self, AnimationName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScenarioBGNameExcel::VT_ANIMATIONNAME, AnimationName);
  }
  #[inline]
  pub fn add_SpineScale(&mut self, SpineScale: f32) {
    self.fbb_.push_slot::<f32>(ScenarioBGNameExcel::VT_SPINESCALE, SpineScale, 0.0);
  }
  #[inline]
  pub fn add_SpineLocalPosX(&mut self, SpineLocalPosX: i32) {
    self.fbb_.push_slot::<i32>(ScenarioBGNameExcel::VT_SPINELOCALPOSX, SpineLocalPosX, 0);
  }
  #[inline]
  pub fn add_SpineLocalPosY(&mut self, SpineLocalPosY: i32) {
    self.fbb_.push_slot::<i32>(ScenarioBGNameExcel::VT_SPINELOCALPOSY, SpineLocalPosY, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioBGNameExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioBGNameExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioBGNameExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioBGNameExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioBGNameExcel");
      ds.field("Name", &self.Name());
      ds.field("ProductionStep", &self.ProductionStep());
      ds.field("BGFileName", &self.BGFileName());
      ds.field("BGType", &self.BGType());
      ds.field("AnimationRoot", &self.AnimationRoot());
      ds.field("AnimationName", &self.AnimationName());
      ds.field("SpineScale", &self.SpineScale());
      ds.field("SpineLocalPosX", &self.SpineLocalPosX());
      ds.field("SpineLocalPosY", &self.SpineLocalPosY());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioBGNameExcelT {
  pub Name: u32,
  pub ProductionStep: ProductionStep,
  pub BGFileName: Option<String>,
  pub BGType: ScenarioBGType,
  pub AnimationRoot: Option<String>,
  pub AnimationName: Option<String>,
  pub SpineScale: f32,
  pub SpineLocalPosX: i32,
  pub SpineLocalPosY: i32,
}
impl Default for ScenarioBGNameExcelT {
  fn default() -> Self {
    Self {
      Name: 0,
      ProductionStep: ProductionStep::ToDo,
      BGFileName: None,
      BGType: ScenarioBGType::None,
      AnimationRoot: None,
      AnimationName: None,
      SpineScale: 0.0,
      SpineLocalPosX: 0,
      SpineLocalPosY: 0,
    }
  }
}
impl ScenarioBGNameExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioBGNameExcel<'b>> {
    let Name = self.Name;
    let ProductionStep = self.ProductionStep;
    let BGFileName = self.BGFileName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BGType = self.BGType;
    let AnimationRoot = self.AnimationRoot.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let AnimationName = self.AnimationName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SpineScale = self.SpineScale;
    let SpineLocalPosX = self.SpineLocalPosX;
    let SpineLocalPosY = self.SpineLocalPosY;
    ScenarioBGNameExcel::create(_fbb, &ScenarioBGNameExcelArgs{
      Name,
      ProductionStep,
      BGFileName,
      BGType,
      AnimationRoot,
      AnimationName,
      SpineScale,
      SpineLocalPosX,
      SpineLocalPosY,
    })
  }
}
