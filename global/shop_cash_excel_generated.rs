// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ShopCashExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ShopCashExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ShopCashExcel<'a> {
  type Inner = ShopCashExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ShopCashExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CASHPRODUCTID: flatbuffers::VOffsetT = 6;
  pub const VT_PACKAGETYPE: flatbuffers::VOffsetT = 8;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 10;
  pub const VT_ICONPATH: flatbuffers::VOffsetT = 12;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 14;
  pub const VT_RENEWALDISPLAYORDER: flatbuffers::VOffsetT = 16;
  pub const VT_CATEGORYTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_DISPLAYTAG: flatbuffers::VOffsetT = 20;
  pub const VT_SALEPERIODFROM: flatbuffers::VOffsetT = 22;
  pub const VT_SALEPERIODTO: flatbuffers::VOffsetT = 24;
  pub const VT_PERIODTAG: flatbuffers::VOffsetT = 26;
  pub const VT_ACCOUNTLEVELLIMIT: flatbuffers::VOffsetT = 28;
  pub const VT_ACCOUNTLEVELHIDE: flatbuffers::VOffsetT = 30;
  pub const VT_CLEARMISSIONLIMIT: flatbuffers::VOffsetT = 32;
  pub const VT_CLEARMISSIONHIDE: flatbuffers::VOffsetT = 34;
  pub const VT_PURCHASEREPORTEVENTNAME: flatbuffers::VOffsetT = 36;
  pub const VT_PACKAGECLIENTTYPE: flatbuffers::VOffsetT = 38;
  pub const VT_ISSTARTDASH: flatbuffers::VOffsetT = 40;
  pub const VT_VIEWFLAG: flatbuffers::VOffsetT = 42;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ShopCashExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ShopCashExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<ShopCashExcel<'bldr>> {
    let mut builder = ShopCashExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ShopCash");
      let x = args.ClearMissionLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearMissionLimit(x);
      let x = args.AccountLevelLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AccountLevelLimit(x);
      let x = args.RenewalDisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RenewalDisplayOrder(x);
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.CashProductId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CashProductId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.PackageClientType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PackageClientType(x);
      if let Some(x) = args.PurchaseReportEventName {
        builder.add_PurchaseReportEventName(x);
      }
      if let Some(x) = args.SalePeriodTo {
        builder.add_SalePeriodTo(x);
      }
      if let Some(x) = args.SalePeriodFrom {
        builder.add_SalePeriodFrom(x);
      }
      let x = args.DisplayTag;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DisplayTag(x);
      let x = args.CategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CategoryType(x);
      if let Some(x) = args.IconPath {
        builder.add_IconPath(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      let x = args.PackageType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_PackageType(x);
      builder.add_ViewFlag(args.ViewFlag);
      builder.add_IsStartDash(args.IsStartDash);
      builder.add_ClearMissionHide(args.ClearMissionHide);
      builder.add_AccountLevelHide(args.AccountLevelHide);
      builder.add_PeriodTag(args.PeriodTag);
    builder.finish()
  }

  pub fn unpack(&self) -> ShopCashExcelT {
    let key = table_encryption_service::create_key(b"ShopCash");
      let Id = self.Id();
      let CashProductId = self.CashProductId();
      let PackageType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PackageType(), &key)
      } else {
        self.PackageType()
      };
      let LocalizeEtcId = self.LocalizeEtcId();
    let IconPath = self.IconPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let DisplayOrder = self.DisplayOrder();
      let RenewalDisplayOrder = self.RenewalDisplayOrder();
      let CategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CategoryType(), &key)
      } else {
        self.CategoryType()
      };
      let DisplayTag = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DisplayTag(), &key)
      } else {
        self.DisplayTag()
      };
    let SalePeriodFrom = self.SalePeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SalePeriodTo = self.SalePeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let PeriodTag = self.PeriodTag();
      let AccountLevelLimit = self.AccountLevelLimit();
      let AccountLevelHide = self.AccountLevelHide();
      let ClearMissionLimit = self.ClearMissionLimit();
      let ClearMissionHide = self.ClearMissionHide();
    let PurchaseReportEventName = self.PurchaseReportEventName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let PackageClientType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.PackageClientType(), &key)
      } else {
        self.PackageClientType()
      };
      let IsStartDash = self.IsStartDash();
      let ViewFlag = self.ViewFlag();
    ShopCashExcelT {
      Id,
      CashProductId,
      PackageType,
      LocalizeEtcId,
      IconPath,
      DisplayOrder,
      RenewalDisplayOrder,
      CategoryType,
      DisplayTag,
      SalePeriodFrom,
      SalePeriodTo,
      PeriodTag,
      AccountLevelLimit,
      AccountLevelHide,
      ClearMissionLimit,
      ClearMissionHide,
      PurchaseReportEventName,
      PackageClientType,
      IsStartDash,
      ViewFlag,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CashProductId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashExcel::VT_CASHPRODUCTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PackageType(&self) -> PurchaseSourceType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PurchaseSourceType>(ShopCashExcel::VT_PACKAGETYPE, Some(PurchaseSourceType::None)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ShopCashExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IconPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopCashExcel::VT_ICONPATH, None)}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RenewalDisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashExcel::VT_RENEWALDISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CategoryType(&self) -> ProductCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductCategory>(ShopCashExcel::VT_CATEGORYTYPE, Some(ProductCategory::None)).unwrap()}
  }
  #[inline]
  pub fn DisplayTag(&self) -> ProductDisplayTag {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductDisplayTag>(ShopCashExcel::VT_DISPLAYTAG, Some(ProductDisplayTag::None)).unwrap()}
  }
  #[inline]
  pub fn SalePeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopCashExcel::VT_SALEPERIODFROM, None)}
  }
  #[inline]
  pub fn SalePeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopCashExcel::VT_SALEPERIODTO, None)}
  }
  #[inline]
  pub fn PeriodTag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopCashExcel::VT_PERIODTAG, Some(false)).unwrap()}
  }
  #[inline]
  pub fn AccountLevelLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashExcel::VT_ACCOUNTLEVELLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AccountLevelHide(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopCashExcel::VT_ACCOUNTLEVELHIDE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ClearMissionLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ShopCashExcel::VT_CLEARMISSIONLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ClearMissionHide(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopCashExcel::VT_CLEARMISSIONHIDE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn PurchaseReportEventName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ShopCashExcel::VT_PURCHASEREPORTEVENTNAME, None)}
  }
  #[inline]
  pub fn PackageClientType(&self) -> PurchaseSourceType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PurchaseSourceType>(ShopCashExcel::VT_PACKAGECLIENTTYPE, Some(PurchaseSourceType::None)).unwrap()}
  }
  #[inline]
  pub fn IsStartDash(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopCashExcel::VT_ISSTARTDASH, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ViewFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ShopCashExcel::VT_VIEWFLAG, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ShopCashExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CashProductId", Self::VT_CASHPRODUCTID, false)?
     .visit_field::<PurchaseSourceType>("PackageType", Self::VT_PACKAGETYPE, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("IconPath", Self::VT_ICONPATH, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<i64>("RenewalDisplayOrder", Self::VT_RENEWALDISPLAYORDER, false)?
     .visit_field::<ProductCategory>("CategoryType", Self::VT_CATEGORYTYPE, false)?
     .visit_field::<ProductDisplayTag>("DisplayTag", Self::VT_DISPLAYTAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodFrom", Self::VT_SALEPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodTo", Self::VT_SALEPERIODTO, false)?
     .visit_field::<bool>("PeriodTag", Self::VT_PERIODTAG, false)?
     .visit_field::<i64>("AccountLevelLimit", Self::VT_ACCOUNTLEVELLIMIT, false)?
     .visit_field::<bool>("AccountLevelHide", Self::VT_ACCOUNTLEVELHIDE, false)?
     .visit_field::<i64>("ClearMissionLimit", Self::VT_CLEARMISSIONLIMIT, false)?
     .visit_field::<bool>("ClearMissionHide", Self::VT_CLEARMISSIONHIDE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PurchaseReportEventName", Self::VT_PURCHASEREPORTEVENTNAME, false)?
     .visit_field::<PurchaseSourceType>("PackageClientType", Self::VT_PACKAGECLIENTTYPE, false)?
     .visit_field::<bool>("IsStartDash", Self::VT_ISSTARTDASH, false)?
     .visit_field::<bool>("ViewFlag", Self::VT_VIEWFLAG, false)?
     .finish();
    Ok(())
  }
}
pub struct ShopCashExcelArgs<'a> {
    pub Id: i64,
    pub CashProductId: i64,
    pub PackageType: PurchaseSourceType,
    pub LocalizeEtcId: u32,
    pub IconPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub DisplayOrder: i64,
    pub RenewalDisplayOrder: i64,
    pub CategoryType: ProductCategory,
    pub DisplayTag: ProductDisplayTag,
    pub SalePeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SalePeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PeriodTag: bool,
    pub AccountLevelLimit: i64,
    pub AccountLevelHide: bool,
    pub ClearMissionLimit: i64,
    pub ClearMissionHide: bool,
    pub PurchaseReportEventName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PackageClientType: PurchaseSourceType,
    pub IsStartDash: bool,
    pub ViewFlag: bool,
}
impl<'a> Default for ShopCashExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    ShopCashExcelArgs {
      Id: 0,
      CashProductId: 0,
      PackageType: PurchaseSourceType::None,
      LocalizeEtcId: 0,
      IconPath: None,
      DisplayOrder: 0,
      RenewalDisplayOrder: 0,
      CategoryType: ProductCategory::None,
      DisplayTag: ProductDisplayTag::None,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      PeriodTag: false,
      AccountLevelLimit: 0,
      AccountLevelHide: false,
      ClearMissionLimit: 0,
      ClearMissionHide: false,
      PurchaseReportEventName: None,
      PackageClientType: PurchaseSourceType::None,
      IsStartDash: false,
      ViewFlag: false,
    }
  }
}

impl Serialize for ShopCashExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ShopCashExcel", 20)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CashProductId", &self.CashProductId())?;
      s.serialize_field("PackageType", &self.PackageType())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.IconPath() {
        s.serialize_field("IconPath", &f)?;
      } else {
        s.skip_field("IconPath")?;
      }
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("RenewalDisplayOrder", &self.RenewalDisplayOrder())?;
      s.serialize_field("CategoryType", &self.CategoryType())?;
      s.serialize_field("DisplayTag", &self.DisplayTag())?;
      if let Some(f) = self.SalePeriodFrom() {
        s.serialize_field("SalePeriodFrom", &f)?;
      } else {
        s.skip_field("SalePeriodFrom")?;
      }
      if let Some(f) = self.SalePeriodTo() {
        s.serialize_field("SalePeriodTo", &f)?;
      } else {
        s.skip_field("SalePeriodTo")?;
      }
      s.serialize_field("PeriodTag", &self.PeriodTag())?;
      s.serialize_field("AccountLevelLimit", &self.AccountLevelLimit())?;
      s.serialize_field("AccountLevelHide", &self.AccountLevelHide())?;
      s.serialize_field("ClearMissionLimit", &self.ClearMissionLimit())?;
      s.serialize_field("ClearMissionHide", &self.ClearMissionHide())?;
      if let Some(f) = self.PurchaseReportEventName() {
        s.serialize_field("PurchaseReportEventName", &f)?;
      } else {
        s.skip_field("PurchaseReportEventName")?;
      }
      s.serialize_field("PackageClientType", &self.PackageClientType())?;
      s.serialize_field("IsStartDash", &self.IsStartDash())?;
      s.serialize_field("ViewFlag", &self.ViewFlag())?;
    s.end()
  }
}

pub struct ShopCashExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ShopCashExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(ShopCashExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CashProductId(&mut self, CashProductId: i64) {
    self.fbb_.push_slot::<i64>(ShopCashExcel::VT_CASHPRODUCTID, CashProductId, 0);
  }
  #[inline]
  pub fn add_PackageType(&mut self, PackageType: PurchaseSourceType) {
    self.fbb_.push_slot::<PurchaseSourceType>(ShopCashExcel::VT_PACKAGETYPE, PackageType, PurchaseSourceType::None);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(ShopCashExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_IconPath(&mut self, IconPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopCashExcel::VT_ICONPATH, IconPath);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(ShopCashExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_RenewalDisplayOrder(&mut self, RenewalDisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(ShopCashExcel::VT_RENEWALDISPLAYORDER, RenewalDisplayOrder, 0);
  }
  #[inline]
  pub fn add_CategoryType(&mut self, CategoryType: ProductCategory) {
    self.fbb_.push_slot::<ProductCategory>(ShopCashExcel::VT_CATEGORYTYPE, CategoryType, ProductCategory::None);
  }
  #[inline]
  pub fn add_DisplayTag(&mut self, DisplayTag: ProductDisplayTag) {
    self.fbb_.push_slot::<ProductDisplayTag>(ShopCashExcel::VT_DISPLAYTAG, DisplayTag, ProductDisplayTag::None);
  }
  #[inline]
  pub fn add_SalePeriodFrom(&mut self, SalePeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopCashExcel::VT_SALEPERIODFROM, SalePeriodFrom);
  }
  #[inline]
  pub fn add_SalePeriodTo(&mut self, SalePeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopCashExcel::VT_SALEPERIODTO, SalePeriodTo);
  }
  #[inline]
  pub fn add_PeriodTag(&mut self, PeriodTag: bool) {
    self.fbb_.push_slot::<bool>(ShopCashExcel::VT_PERIODTAG, PeriodTag, false);
  }
  #[inline]
  pub fn add_AccountLevelLimit(&mut self, AccountLevelLimit: i64) {
    self.fbb_.push_slot::<i64>(ShopCashExcel::VT_ACCOUNTLEVELLIMIT, AccountLevelLimit, 0);
  }
  #[inline]
  pub fn add_AccountLevelHide(&mut self, AccountLevelHide: bool) {
    self.fbb_.push_slot::<bool>(ShopCashExcel::VT_ACCOUNTLEVELHIDE, AccountLevelHide, false);
  }
  #[inline]
  pub fn add_ClearMissionLimit(&mut self, ClearMissionLimit: i64) {
    self.fbb_.push_slot::<i64>(ShopCashExcel::VT_CLEARMISSIONLIMIT, ClearMissionLimit, 0);
  }
  #[inline]
  pub fn add_ClearMissionHide(&mut self, ClearMissionHide: bool) {
    self.fbb_.push_slot::<bool>(ShopCashExcel::VT_CLEARMISSIONHIDE, ClearMissionHide, false);
  }
  #[inline]
  pub fn add_PurchaseReportEventName(&mut self, PurchaseReportEventName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ShopCashExcel::VT_PURCHASEREPORTEVENTNAME, PurchaseReportEventName);
  }
  #[inline]
  pub fn add_PackageClientType(&mut self, PackageClientType: PurchaseSourceType) {
    self.fbb_.push_slot::<PurchaseSourceType>(ShopCashExcel::VT_PACKAGECLIENTTYPE, PackageClientType, PurchaseSourceType::None);
  }
  #[inline]
  pub fn add_IsStartDash(&mut self, IsStartDash: bool) {
    self.fbb_.push_slot::<bool>(ShopCashExcel::VT_ISSTARTDASH, IsStartDash, false);
  }
  #[inline]
  pub fn add_ViewFlag(&mut self, ViewFlag: bool) {
    self.fbb_.push_slot::<bool>(ShopCashExcel::VT_VIEWFLAG, ViewFlag, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ShopCashExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ShopCashExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ShopCashExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ShopCashExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ShopCashExcel");
      ds.field("Id", &self.Id());
      ds.field("CashProductId", &self.CashProductId());
      ds.field("PackageType", &self.PackageType());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("IconPath", &self.IconPath());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("RenewalDisplayOrder", &self.RenewalDisplayOrder());
      ds.field("CategoryType", &self.CategoryType());
      ds.field("DisplayTag", &self.DisplayTag());
      ds.field("SalePeriodFrom", &self.SalePeriodFrom());
      ds.field("SalePeriodTo", &self.SalePeriodTo());
      ds.field("PeriodTag", &self.PeriodTag());
      ds.field("AccountLevelLimit", &self.AccountLevelLimit());
      ds.field("AccountLevelHide", &self.AccountLevelHide());
      ds.field("ClearMissionLimit", &self.ClearMissionLimit());
      ds.field("ClearMissionHide", &self.ClearMissionHide());
      ds.field("PurchaseReportEventName", &self.PurchaseReportEventName());
      ds.field("PackageClientType", &self.PackageClientType());
      ds.field("IsStartDash", &self.IsStartDash());
      ds.field("ViewFlag", &self.ViewFlag());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ShopCashExcelT {
  pub Id: i64,
  pub CashProductId: i64,
  pub PackageType: PurchaseSourceType,
  pub LocalizeEtcId: u32,
  pub IconPath: Option<String>,
  pub DisplayOrder: i64,
  pub RenewalDisplayOrder: i64,
  pub CategoryType: ProductCategory,
  pub DisplayTag: ProductDisplayTag,
  pub SalePeriodFrom: Option<String>,
  pub SalePeriodTo: Option<String>,
  pub PeriodTag: bool,
  pub AccountLevelLimit: i64,
  pub AccountLevelHide: bool,
  pub ClearMissionLimit: i64,
  pub ClearMissionHide: bool,
  pub PurchaseReportEventName: Option<String>,
  pub PackageClientType: PurchaseSourceType,
  pub IsStartDash: bool,
  pub ViewFlag: bool,
}
impl Default for ShopCashExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CashProductId: 0,
      PackageType: PurchaseSourceType::None,
      LocalizeEtcId: 0,
      IconPath: None,
      DisplayOrder: 0,
      RenewalDisplayOrder: 0,
      CategoryType: ProductCategory::None,
      DisplayTag: ProductDisplayTag::None,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      PeriodTag: false,
      AccountLevelLimit: 0,
      AccountLevelHide: false,
      ClearMissionLimit: 0,
      ClearMissionHide: false,
      PurchaseReportEventName: None,
      PackageClientType: PurchaseSourceType::None,
      IsStartDash: false,
      ViewFlag: false,
    }
  }
}
impl ShopCashExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ShopCashExcel<'b>> {
    let Id = self.Id;
    let CashProductId = self.CashProductId;
    let PackageType = self.PackageType;
    let LocalizeEtcId = self.LocalizeEtcId;
    let IconPath = self.IconPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let DisplayOrder = self.DisplayOrder;
    let RenewalDisplayOrder = self.RenewalDisplayOrder;
    let CategoryType = self.CategoryType;
    let DisplayTag = self.DisplayTag;
    let SalePeriodFrom = self.SalePeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SalePeriodTo = self.SalePeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PeriodTag = self.PeriodTag;
    let AccountLevelLimit = self.AccountLevelLimit;
    let AccountLevelHide = self.AccountLevelHide;
    let ClearMissionLimit = self.ClearMissionLimit;
    let ClearMissionHide = self.ClearMissionHide;
    let PurchaseReportEventName = self.PurchaseReportEventName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PackageClientType = self.PackageClientType;
    let IsStartDash = self.IsStartDash;
    let ViewFlag = self.ViewFlag;
    ShopCashExcel::create(_fbb, &ShopCashExcelArgs{
      Id,
      CashProductId,
      PackageType,
      LocalizeEtcId,
      IconPath,
      DisplayOrder,
      RenewalDisplayOrder,
      CategoryType,
      DisplayTag,
      SalePeriodFrom,
      SalePeriodTo,
      PeriodTag,
      AccountLevelLimit,
      AccountLevelHide,
      ClearMissionLimit,
      ClearMissionHide,
      PurchaseReportEventName,
      PackageClientType,
      IsStartDash,
      ViewFlag,
    })
  }
}
