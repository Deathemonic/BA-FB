// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BossExternalBTExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BossExternalBTExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BossExternalBTExcel<'a> {
  type Inner = BossExternalBTExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BossExternalBTExcel<'a> {
  pub const VT_EXTERNALBTID: flatbuffers::VOffsetT = 4;
  pub const VT_AIPHASE: flatbuffers::VOffsetT = 6;
  pub const VT_EXTERNALBTNODETYPE: flatbuffers::VOffsetT = 8;
  pub const VT_EXTERNALBTTRIGGER: flatbuffers::VOffsetT = 10;
  pub const VT_TRIGGERARGUMENT: flatbuffers::VOffsetT = 12;
  pub const VT_BEHAVIORRATE: flatbuffers::VOffsetT = 14;
  pub const VT_EXTERNALBEHAVIOR: flatbuffers::VOffsetT = 16;
  pub const VT_BEHAVIORARGUMENT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BossExternalBTExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BossExternalBTExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<BossExternalBTExcel<'bldr>> {
    let mut builder = BossExternalBTExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BossExternalBT");
      let x = args.BehaviorRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BehaviorRate(x);
      let x = args.AIPhase;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AIPhase(x);
      let x = args.ExternalBTId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExternalBTId(x);
      if let Some(x) = args.BehaviorArgument {
        builder.add_BehaviorArgument(x);
      }
      let x = args.ExternalBehavior;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ExternalBehavior(x);
      if let Some(x) = args.TriggerArgument {
        builder.add_TriggerArgument(x);
      }
      let x = args.ExternalBTTrigger;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ExternalBTTrigger(x);
      let x = args.ExternalBTNodeType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ExternalBTNodeType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BossExternalBTExcelT {
    let key = table_encryption_service::create_key(b"BossExternalBT");
      let ExternalBTId = self.ExternalBTId();
      let AIPhase = self.AIPhase();
      let ExternalBTNodeType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ExternalBTNodeType(), &key)
      } else {
        self.ExternalBTNodeType()
      };
      let ExternalBTTrigger = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ExternalBTTrigger(), &key)
      } else {
        self.ExternalBTTrigger()
      };
    let TriggerArgument = self.TriggerArgument().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BehaviorRate = self.BehaviorRate();
      let ExternalBehavior = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ExternalBehavior(), &key)
      } else {
        self.ExternalBehavior()
      };
    let BehaviorArgument = self.BehaviorArgument().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    BossExternalBTExcelT {
      ExternalBTId,
      AIPhase,
      ExternalBTNodeType,
      ExternalBTTrigger,
      TriggerArgument,
      BehaviorRate,
      ExternalBehavior,
      BehaviorArgument,
    }
  }

  #[inline]
  pub fn ExternalBTId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BossExternalBTExcel::VT_EXTERNALBTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AIPhase(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BossExternalBTExcel::VT_AIPHASE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExternalBTNodeType(&self) -> ExternalBTNodeType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExternalBTNodeType>(BossExternalBTExcel::VT_EXTERNALBTNODETYPE, Some(ExternalBTNodeType::Sequence)).unwrap()}
  }
  #[inline]
  pub fn ExternalBTTrigger(&self) -> ExternalBTTrigger {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExternalBTTrigger>(BossExternalBTExcel::VT_EXTERNALBTTRIGGER, Some(ExternalBTTrigger::None)).unwrap()}
  }
  #[inline]
  pub fn TriggerArgument(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BossExternalBTExcel::VT_TRIGGERARGUMENT, None)}
  }
  #[inline]
  pub fn BehaviorRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BossExternalBTExcel::VT_BEHAVIORRATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExternalBehavior(&self) -> ExternalBehavior {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ExternalBehavior>(BossExternalBTExcel::VT_EXTERNALBEHAVIOR, Some(ExternalBehavior::UseNextExSkill)).unwrap()}
  }
  #[inline]
  pub fn BehaviorArgument(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BossExternalBTExcel::VT_BEHAVIORARGUMENT, None)}
  }
}

impl flatbuffers::Verifiable for BossExternalBTExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("ExternalBTId", Self::VT_EXTERNALBTID, false)?
     .visit_field::<i64>("AIPhase", Self::VT_AIPHASE, false)?
     .visit_field::<ExternalBTNodeType>("ExternalBTNodeType", Self::VT_EXTERNALBTNODETYPE, false)?
     .visit_field::<ExternalBTTrigger>("ExternalBTTrigger", Self::VT_EXTERNALBTTRIGGER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TriggerArgument", Self::VT_TRIGGERARGUMENT, false)?
     .visit_field::<i64>("BehaviorRate", Self::VT_BEHAVIORRATE, false)?
     .visit_field::<ExternalBehavior>("ExternalBehavior", Self::VT_EXTERNALBEHAVIOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BehaviorArgument", Self::VT_BEHAVIORARGUMENT, false)?
     .finish();
    Ok(())
  }
}
pub struct BossExternalBTExcelArgs<'a> {
    pub ExternalBTId: i64,
    pub AIPhase: i64,
    pub ExternalBTNodeType: ExternalBTNodeType,
    pub ExternalBTTrigger: ExternalBTTrigger,
    pub TriggerArgument: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BehaviorRate: i64,
    pub ExternalBehavior: ExternalBehavior,
    pub BehaviorArgument: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for BossExternalBTExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    BossExternalBTExcelArgs {
      ExternalBTId: 0,
      AIPhase: 0,
      ExternalBTNodeType: ExternalBTNodeType::Sequence,
      ExternalBTTrigger: ExternalBTTrigger::None,
      TriggerArgument: None,
      BehaviorRate: 0,
      ExternalBehavior: ExternalBehavior::UseNextExSkill,
      BehaviorArgument: None,
    }
  }
}

impl Serialize for BossExternalBTExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BossExternalBTExcel", 8)?;
      s.serialize_field("ExternalBTId", &self.ExternalBTId())?;
      s.serialize_field("AIPhase", &self.AIPhase())?;
      s.serialize_field("ExternalBTNodeType", &self.ExternalBTNodeType())?;
      s.serialize_field("ExternalBTTrigger", &self.ExternalBTTrigger())?;
      if let Some(f) = self.TriggerArgument() {
        s.serialize_field("TriggerArgument", &f)?;
      } else {
        s.skip_field("TriggerArgument")?;
      }
      s.serialize_field("BehaviorRate", &self.BehaviorRate())?;
      s.serialize_field("ExternalBehavior", &self.ExternalBehavior())?;
      if let Some(f) = self.BehaviorArgument() {
        s.serialize_field("BehaviorArgument", &f)?;
      } else {
        s.skip_field("BehaviorArgument")?;
      }
    s.end()
  }
}

pub struct BossExternalBTExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BossExternalBTExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ExternalBTId(&mut self, ExternalBTId: i64) {
    self.fbb_.push_slot::<i64>(BossExternalBTExcel::VT_EXTERNALBTID, ExternalBTId, 0);
  }
  #[inline]
  pub fn add_AIPhase(&mut self, AIPhase: i64) {
    self.fbb_.push_slot::<i64>(BossExternalBTExcel::VT_AIPHASE, AIPhase, 0);
  }
  #[inline]
  pub fn add_ExternalBTNodeType(&mut self, ExternalBTNodeType: ExternalBTNodeType) {
    self.fbb_.push_slot::<ExternalBTNodeType>(BossExternalBTExcel::VT_EXTERNALBTNODETYPE, ExternalBTNodeType, ExternalBTNodeType::Sequence);
  }
  #[inline]
  pub fn add_ExternalBTTrigger(&mut self, ExternalBTTrigger: ExternalBTTrigger) {
    self.fbb_.push_slot::<ExternalBTTrigger>(BossExternalBTExcel::VT_EXTERNALBTTRIGGER, ExternalBTTrigger, ExternalBTTrigger::None);
  }
  #[inline]
  pub fn add_TriggerArgument(&mut self, TriggerArgument: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BossExternalBTExcel::VT_TRIGGERARGUMENT, TriggerArgument);
  }
  #[inline]
  pub fn add_BehaviorRate(&mut self, BehaviorRate: i64) {
    self.fbb_.push_slot::<i64>(BossExternalBTExcel::VT_BEHAVIORRATE, BehaviorRate, 0);
  }
  #[inline]
  pub fn add_ExternalBehavior(&mut self, ExternalBehavior: ExternalBehavior) {
    self.fbb_.push_slot::<ExternalBehavior>(BossExternalBTExcel::VT_EXTERNALBEHAVIOR, ExternalBehavior, ExternalBehavior::UseNextExSkill);
  }
  #[inline]
  pub fn add_BehaviorArgument(&mut self, BehaviorArgument: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BossExternalBTExcel::VT_BEHAVIORARGUMENT, BehaviorArgument);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BossExternalBTExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BossExternalBTExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BossExternalBTExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BossExternalBTExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BossExternalBTExcel");
      ds.field("ExternalBTId", &self.ExternalBTId());
      ds.field("AIPhase", &self.AIPhase());
      ds.field("ExternalBTNodeType", &self.ExternalBTNodeType());
      ds.field("ExternalBTTrigger", &self.ExternalBTTrigger());
      ds.field("TriggerArgument", &self.TriggerArgument());
      ds.field("BehaviorRate", &self.BehaviorRate());
      ds.field("ExternalBehavior", &self.ExternalBehavior());
      ds.field("BehaviorArgument", &self.BehaviorArgument());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BossExternalBTExcelT {
  pub ExternalBTId: i64,
  pub AIPhase: i64,
  pub ExternalBTNodeType: ExternalBTNodeType,
  pub ExternalBTTrigger: ExternalBTTrigger,
  pub TriggerArgument: Option<String>,
  pub BehaviorRate: i64,
  pub ExternalBehavior: ExternalBehavior,
  pub BehaviorArgument: Option<String>,
}
impl Default for BossExternalBTExcelT {
  fn default() -> Self {
    Self {
      ExternalBTId: 0,
      AIPhase: 0,
      ExternalBTNodeType: ExternalBTNodeType::Sequence,
      ExternalBTTrigger: ExternalBTTrigger::None,
      TriggerArgument: None,
      BehaviorRate: 0,
      ExternalBehavior: ExternalBehavior::UseNextExSkill,
      BehaviorArgument: None,
    }
  }
}
impl BossExternalBTExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BossExternalBTExcel<'b>> {
    let ExternalBTId = self.ExternalBTId;
    let AIPhase = self.AIPhase;
    let ExternalBTNodeType = self.ExternalBTNodeType;
    let ExternalBTTrigger = self.ExternalBTTrigger;
    let TriggerArgument = self.TriggerArgument.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BehaviorRate = self.BehaviorRate;
    let ExternalBehavior = self.ExternalBehavior;
    let BehaviorArgument = self.BehaviorArgument.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    BossExternalBTExcel::create(_fbb, &BossExternalBTExcelArgs{
      ExternalBTId,
      AIPhase,
      ExternalBTNodeType,
      ExternalBTTrigger,
      TriggerArgument,
      BehaviorRate,
      ExternalBehavior,
      BehaviorArgument,
    })
  }
}
