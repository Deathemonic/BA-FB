// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterCalculationLimitExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterCalculationLimitExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterCalculationLimitExcel<'a> {
  type Inner = CharacterCalculationLimitExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterCalculationLimitExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TACTICENTITYTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_CALCULATIONVALUE: flatbuffers::VOffsetT = 8;
  pub const VT_MINVALUE: flatbuffers::VOffsetT = 10;
  pub const VT_MAXVALUE: flatbuffers::VOffsetT = 12;
  pub const VT_LIMITSTARTVALUE: flatbuffers::VOffsetT = 14;
  pub const VT_DECREASERATE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterCalculationLimitExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterCalculationLimitExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterCalculationLimitExcel<'bldr>> {
    let mut builder = CharacterCalculationLimitExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterCalculationLimit");
      let x = args.MaxValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxValue(x);
      let x = args.MinValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MinValue(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.decreaseRate {
        builder.add_decreaseRate(x);
      }
      if let Some(x) = args.limitStartValue {
        builder.add_limitStartValue(x);
      }
      let x = args.CalculationValue;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CalculationValue(x);
      let x = args.TacticEntityType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TacticEntityType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterCalculationLimitExcelT {
    let key = table_encryption_service::create_key(b"CharacterCalculationLimit");
      let Id = self.Id();
      let TacticEntityType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TacticEntityType(), &key)
      } else {
        self.TacticEntityType()
      };
      let CalculationValue = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CalculationValue(), &key)
      } else {
        self.CalculationValue()
      };
      let MinValue = self.MinValue();
      let MaxValue = self.MaxValue();
    let limitStartValue = self.limitStartValue().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let decreaseRate = self.decreaseRate().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    CharacterCalculationLimitExcelT {
      Id,
      TacticEntityType,
      CalculationValue,
      MinValue,
      MaxValue,
      limitStartValue,
      decreaseRate,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterCalculationLimitExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TacticEntityType(&self) -> TacticEntityType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticEntityType>(CharacterCalculationLimitExcel::VT_TACTICENTITYTYPE, Some(TacticEntityType::None)).unwrap()}
  }
  #[inline]
  pub fn CalculationValue(&self) -> BattleCalculationStat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BattleCalculationStat>(CharacterCalculationLimitExcel::VT_CALCULATIONVALUE, Some(BattleCalculationStat::FinalDamage)).unwrap()}
  }
  #[inline]
  pub fn MinValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterCalculationLimitExcel::VT_MINVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxValue(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterCalculationLimitExcel::VT_MAXVALUE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn limitStartValue(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterCalculationLimitExcel::VT_LIMITSTARTVALUE, None)}
  }
  #[inline]
  pub fn decreaseRate(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterCalculationLimitExcel::VT_DECREASERATE, None)}
  }
}

impl flatbuffers::Verifiable for CharacterCalculationLimitExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<TacticEntityType>("TacticEntityType", Self::VT_TACTICENTITYTYPE, false)?
     .visit_field::<BattleCalculationStat>("CalculationValue", Self::VT_CALCULATIONVALUE, false)?
     .visit_field::<i64>("MinValue", Self::VT_MINVALUE, false)?
     .visit_field::<i64>("MaxValue", Self::VT_MAXVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("limitStartValue", Self::VT_LIMITSTARTVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("decreaseRate", Self::VT_DECREASERATE, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterCalculationLimitExcelArgs<'a> {
    pub Id: i64,
    pub TacticEntityType: TacticEntityType,
    pub CalculationValue: BattleCalculationStat,
    pub MinValue: i64,
    pub MaxValue: i64,
    pub limitStartValue: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub decreaseRate: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for CharacterCalculationLimitExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterCalculationLimitExcelArgs {
      Id: 0,
      TacticEntityType: TacticEntityType::None,
      CalculationValue: BattleCalculationStat::FinalDamage,
      MinValue: 0,
      MaxValue: 0,
      limitStartValue: None,
      decreaseRate: None,
    }
  }
}

impl Serialize for CharacterCalculationLimitExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterCalculationLimitExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("TacticEntityType", &self.TacticEntityType())?;
      s.serialize_field("CalculationValue", &self.CalculationValue())?;
      s.serialize_field("MinValue", &self.MinValue())?;
      s.serialize_field("MaxValue", &self.MaxValue())?;
      if let Some(f) = self.limitStartValue() {
        s.serialize_field("limitStartValue", &f)?;
      } else {
        s.skip_field("limitStartValue")?;
      }
      if let Some(f) = self.decreaseRate() {
        s.serialize_field("decreaseRate", &f)?;
      } else {
        s.skip_field("decreaseRate")?;
      }
    s.end()
  }
}

pub struct CharacterCalculationLimitExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterCalculationLimitExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterCalculationLimitExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_TacticEntityType(&mut self, TacticEntityType: TacticEntityType) {
    self.fbb_.push_slot::<TacticEntityType>(CharacterCalculationLimitExcel::VT_TACTICENTITYTYPE, TacticEntityType, TacticEntityType::None);
  }
  #[inline]
  pub fn add_CalculationValue(&mut self, CalculationValue: BattleCalculationStat) {
    self.fbb_.push_slot::<BattleCalculationStat>(CharacterCalculationLimitExcel::VT_CALCULATIONVALUE, CalculationValue, BattleCalculationStat::FinalDamage);
  }
  #[inline]
  pub fn add_MinValue(&mut self, MinValue: i64) {
    self.fbb_.push_slot::<i64>(CharacterCalculationLimitExcel::VT_MINVALUE, MinValue, 0);
  }
  #[inline]
  pub fn add_MaxValue(&mut self, MaxValue: i64) {
    self.fbb_.push_slot::<i64>(CharacterCalculationLimitExcel::VT_MAXVALUE, MaxValue, 0);
  }
  #[inline]
  pub fn add_limitStartValue(&mut self, limitStartValue: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterCalculationLimitExcel::VT_LIMITSTARTVALUE, limitStartValue);
  }
  #[inline]
  pub fn add_decreaseRate(&mut self, decreaseRate: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterCalculationLimitExcel::VT_DECREASERATE, decreaseRate);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterCalculationLimitExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterCalculationLimitExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterCalculationLimitExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterCalculationLimitExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterCalculationLimitExcel");
      ds.field("Id", &self.Id());
      ds.field("TacticEntityType", &self.TacticEntityType());
      ds.field("CalculationValue", &self.CalculationValue());
      ds.field("MinValue", &self.MinValue());
      ds.field("MaxValue", &self.MaxValue());
      ds.field("limitStartValue", &self.limitStartValue());
      ds.field("decreaseRate", &self.decreaseRate());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterCalculationLimitExcelT {
  pub Id: i64,
  pub TacticEntityType: TacticEntityType,
  pub CalculationValue: BattleCalculationStat,
  pub MinValue: i64,
  pub MaxValue: i64,
  pub limitStartValue: Option<Vec<i64>>,
  pub decreaseRate: Option<Vec<i64>>,
}
impl Default for CharacterCalculationLimitExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      TacticEntityType: TacticEntityType::None,
      CalculationValue: BattleCalculationStat::FinalDamage,
      MinValue: 0,
      MaxValue: 0,
      limitStartValue: None,
      decreaseRate: None,
    }
  }
}
impl CharacterCalculationLimitExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterCalculationLimitExcel<'b>> {
    let Id = self.Id;
    let TacticEntityType = self.TacticEntityType;
    let CalculationValue = self.CalculationValue;
    let MinValue = self.MinValue;
    let MaxValue = self.MaxValue;
    let limitStartValue = self.limitStartValue.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let decreaseRate = self.decreaseRate.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CharacterCalculationLimitExcel::create(_fbb, &CharacterCalculationLimitExcelArgs{
      Id,
      TacticEntityType,
      CalculationValue,
      MinValue,
      MaxValue,
      limitStartValue,
      decreaseRate,
    })
  }
}
