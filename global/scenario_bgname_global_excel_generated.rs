// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScenarioBGName_GlobalExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScenarioBGName_GlobalExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScenarioBGName_GlobalExcel<'a> {
  type Inner = ScenarioBGName_GlobalExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScenarioBGName_GlobalExcel<'a> {
  pub const VT_GROUPNAME: flatbuffers::VOffsetT = 4;
  pub const VT_NAMEKR: flatbuffers::VOffsetT = 6;
  pub const VT_NAMETW: flatbuffers::VOffsetT = 8;
  pub const VT_NAMEASIA: flatbuffers::VOffsetT = 10;
  pub const VT_NAMENA: flatbuffers::VOffsetT = 12;
  pub const VT_NAMEGLOBAL: flatbuffers::VOffsetT = 14;
  pub const VT_NAMETEEN: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScenarioBGName_GlobalExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScenarioBGName_GlobalExcelArgs
  ) -> flatbuffers::WIPOffset<ScenarioBGName_GlobalExcel<'bldr>> {
    let mut builder = ScenarioBGName_GlobalExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ScenarioBGName_Global");
      let x = args.NameTeen;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_NameTeen(x);
      let x = args.NameGlobal;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_NameGlobal(x);
      let x = args.NameNa;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_NameNa(x);
      let x = args.NameAsia;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_NameAsia(x);
      let x = args.NameTw;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_NameTw(x);
      let x = args.NameKr;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_NameKr(x);
      let x = args.GroupName;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_GroupName(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ScenarioBGName_GlobalExcelT {
    let key = table_encryption_service::create_key(b"ScenarioBGName_Global");
      let GroupName = self.GroupName();
      let NameKr = self.NameKr();
      let NameTw = self.NameTw();
      let NameAsia = self.NameAsia();
      let NameNa = self.NameNa();
      let NameGlobal = self.NameGlobal();
      let NameTeen = self.NameTeen();
    ScenarioBGName_GlobalExcelT {
      GroupName,
      NameKr,
      NameTw,
      NameAsia,
      NameNa,
      NameGlobal,
      NameTeen,
    }
  }

  #[inline]
  pub fn GroupName(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGName_GlobalExcel::VT_GROUPNAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameKr(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGName_GlobalExcel::VT_NAMEKR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameTw(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGName_GlobalExcel::VT_NAMETW, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameAsia(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGName_GlobalExcel::VT_NAMEASIA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameNa(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGName_GlobalExcel::VT_NAMENA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameGlobal(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGName_GlobalExcel::VT_NAMEGLOBAL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NameTeen(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(ScenarioBGName_GlobalExcel::VT_NAMETEEN, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScenarioBGName_GlobalExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("GroupName", Self::VT_GROUPNAME, false)?
     .visit_field::<u32>("NameKr", Self::VT_NAMEKR, false)?
     .visit_field::<u32>("NameTw", Self::VT_NAMETW, false)?
     .visit_field::<u32>("NameAsia", Self::VT_NAMEASIA, false)?
     .visit_field::<u32>("NameNa", Self::VT_NAMENA, false)?
     .visit_field::<u32>("NameGlobal", Self::VT_NAMEGLOBAL, false)?
     .visit_field::<u32>("NameTeen", Self::VT_NAMETEEN, false)?
     .finish();
    Ok(())
  }
}
pub struct ScenarioBGName_GlobalExcelArgs {
    pub GroupName: u32,
    pub NameKr: u32,
    pub NameTw: u32,
    pub NameAsia: u32,
    pub NameNa: u32,
    pub NameGlobal: u32,
    pub NameTeen: u32,
}
impl<'a> Default for ScenarioBGName_GlobalExcelArgs {
  #[inline]
  fn default() -> Self {
    ScenarioBGName_GlobalExcelArgs {
      GroupName: 0,
      NameKr: 0,
      NameTw: 0,
      NameAsia: 0,
      NameNa: 0,
      NameGlobal: 0,
      NameTeen: 0,
    }
  }
}

impl Serialize for ScenarioBGName_GlobalExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScenarioBGName_GlobalExcel", 7)?;
      s.serialize_field("GroupName", &self.GroupName())?;
      s.serialize_field("NameKr", &self.NameKr())?;
      s.serialize_field("NameTw", &self.NameTw())?;
      s.serialize_field("NameAsia", &self.NameAsia())?;
      s.serialize_field("NameNa", &self.NameNa())?;
      s.serialize_field("NameGlobal", &self.NameGlobal())?;
      s.serialize_field("NameTeen", &self.NameTeen())?;
    s.end()
  }
}

pub struct ScenarioBGName_GlobalExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScenarioBGName_GlobalExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupName(&mut self, GroupName: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGName_GlobalExcel::VT_GROUPNAME, GroupName, 0);
  }
  #[inline]
  pub fn add_NameKr(&mut self, NameKr: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGName_GlobalExcel::VT_NAMEKR, NameKr, 0);
  }
  #[inline]
  pub fn add_NameTw(&mut self, NameTw: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGName_GlobalExcel::VT_NAMETW, NameTw, 0);
  }
  #[inline]
  pub fn add_NameAsia(&mut self, NameAsia: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGName_GlobalExcel::VT_NAMEASIA, NameAsia, 0);
  }
  #[inline]
  pub fn add_NameNa(&mut self, NameNa: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGName_GlobalExcel::VT_NAMENA, NameNa, 0);
  }
  #[inline]
  pub fn add_NameGlobal(&mut self, NameGlobal: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGName_GlobalExcel::VT_NAMEGLOBAL, NameGlobal, 0);
  }
  #[inline]
  pub fn add_NameTeen(&mut self, NameTeen: u32) {
    self.fbb_.push_slot::<u32>(ScenarioBGName_GlobalExcel::VT_NAMETEEN, NameTeen, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScenarioBGName_GlobalExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScenarioBGName_GlobalExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScenarioBGName_GlobalExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScenarioBGName_GlobalExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScenarioBGName_GlobalExcel");
      ds.field("GroupName", &self.GroupName());
      ds.field("NameKr", &self.NameKr());
      ds.field("NameTw", &self.NameTw());
      ds.field("NameAsia", &self.NameAsia());
      ds.field("NameNa", &self.NameNa());
      ds.field("NameGlobal", &self.NameGlobal());
      ds.field("NameTeen", &self.NameTeen());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ScenarioBGName_GlobalExcelT {
  pub GroupName: u32,
  pub NameKr: u32,
  pub NameTw: u32,
  pub NameAsia: u32,
  pub NameNa: u32,
  pub NameGlobal: u32,
  pub NameTeen: u32,
}
impl Default for ScenarioBGName_GlobalExcelT {
  fn default() -> Self {
    Self {
      GroupName: 0,
      NameKr: 0,
      NameTw: 0,
      NameAsia: 0,
      NameNa: 0,
      NameGlobal: 0,
      NameTeen: 0,
    }
  }
}
impl ScenarioBGName_GlobalExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ScenarioBGName_GlobalExcel<'b>> {
    let GroupName = self.GroupName;
    let NameKr = self.NameKr;
    let NameTw = self.NameTw;
    let NameAsia = self.NameAsia;
    let NameNa = self.NameNa;
    let NameGlobal = self.NameGlobal;
    let NameTeen = self.NameTeen;
    ScenarioBGName_GlobalExcel::create(_fbb, &ScenarioBGName_GlobalExcelArgs{
      GroupName,
      NameKr,
      NameTw,
      NameAsia,
      NameNa,
      NameGlobal,
      NameTeen,
    })
  }
}
