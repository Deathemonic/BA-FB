// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WeekDungeonRewardExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WeekDungeonRewardExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WeekDungeonRewardExcel<'a> {
  type Inner = WeekDungeonRewardExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WeekDungeonRewardExcel<'a> {
  pub const VT_GROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_DUNGEONTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_REWARDPARCELTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_REWARDPARCELID: flatbuffers::VOffsetT = 10;
  pub const VT_REWARDPARCELAMOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_REWARDPARCELPROBABILITY: flatbuffers::VOffsetT = 14;
  pub const VT_ISDISPLAYED: flatbuffers::VOffsetT = 16;
  pub const VT_DROPITEMMODELPREFABPATH: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WeekDungeonRewardExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WeekDungeonRewardExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<WeekDungeonRewardExcel<'bldr>> {
    let mut builder = WeekDungeonRewardExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"WeekDungeonReward");
      let x = args.RewardParcelProbability;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelProbability(x);
      let x = args.RewardParcelAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelAmount(x);
      let x = args.RewardParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RewardParcelId(x);
      let x = args.GroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroupId(x);
      if let Some(x) = args.DropItemModelPrefabPath {
        builder.add_DropItemModelPrefabPath(x);
      }
      let x = args.RewardParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_RewardParcelType(x);
      let x = args.DungeonType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DungeonType(x);
      builder.add_IsDisplayed(args.IsDisplayed);
    builder.finish()
  }

  pub fn unpack(&self) -> WeekDungeonRewardExcelT {
    let key = table_encryption_service::create_key(b"WeekDungeonReward");
      let GroupId = self.GroupId();
      let DungeonType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DungeonType(), &key)
      } else {
        self.DungeonType()
      };
      let RewardParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.RewardParcelType(), &key)
      } else {
        self.RewardParcelType()
      };
      let RewardParcelId = self.RewardParcelId();
      let RewardParcelAmount = self.RewardParcelAmount();
      let RewardParcelProbability = self.RewardParcelProbability();
      let IsDisplayed = self.IsDisplayed();
    let DropItemModelPrefabPath = self.DropItemModelPrefabPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    WeekDungeonRewardExcelT {
      GroupId,
      DungeonType,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      RewardParcelProbability,
      IsDisplayed,
      DropItemModelPrefabPath,
    }
  }

  #[inline]
  pub fn GroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WeekDungeonRewardExcel::VT_GROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DungeonType(&self) -> WeekDungeonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WeekDungeonType>(WeekDungeonRewardExcel::VT_DUNGEONTYPE, Some(WeekDungeonType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(WeekDungeonRewardExcel::VT_REWARDPARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WeekDungeonRewardExcel::VT_REWARDPARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WeekDungeonRewardExcel::VT_REWARDPARCELAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RewardParcelProbability(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WeekDungeonRewardExcel::VT_REWARDPARCELPROBABILITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsDisplayed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(WeekDungeonRewardExcel::VT_ISDISPLAYED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn DropItemModelPrefabPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeekDungeonRewardExcel::VT_DROPITEMMODELPREFABPATH, None)}
  }
}

impl flatbuffers::Verifiable for WeekDungeonRewardExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GroupId", Self::VT_GROUPID, false)?
     .visit_field::<WeekDungeonType>("DungeonType", Self::VT_DUNGEONTYPE, false)?
     .visit_field::<ParcelType>("RewardParcelType", Self::VT_REWARDPARCELTYPE, false)?
     .visit_field::<i64>("RewardParcelId", Self::VT_REWARDPARCELID, false)?
     .visit_field::<i64>("RewardParcelAmount", Self::VT_REWARDPARCELAMOUNT, false)?
     .visit_field::<i64>("RewardParcelProbability", Self::VT_REWARDPARCELPROBABILITY, false)?
     .visit_field::<bool>("IsDisplayed", Self::VT_ISDISPLAYED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DropItemModelPrefabPath", Self::VT_DROPITEMMODELPREFABPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct WeekDungeonRewardExcelArgs<'a> {
    pub GroupId: i64,
    pub DungeonType: WeekDungeonType,
    pub RewardParcelType: ParcelType,
    pub RewardParcelId: i64,
    pub RewardParcelAmount: i64,
    pub RewardParcelProbability: i64,
    pub IsDisplayed: bool,
    pub DropItemModelPrefabPath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for WeekDungeonRewardExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    WeekDungeonRewardExcelArgs {
      GroupId: 0,
      DungeonType: WeekDungeonType::None,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
      RewardParcelProbability: 0,
      IsDisplayed: false,
      DropItemModelPrefabPath: None,
    }
  }
}

impl Serialize for WeekDungeonRewardExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WeekDungeonRewardExcel", 8)?;
      s.serialize_field("GroupId", &self.GroupId())?;
      s.serialize_field("DungeonType", &self.DungeonType())?;
      s.serialize_field("RewardParcelType", &self.RewardParcelType())?;
      s.serialize_field("RewardParcelId", &self.RewardParcelId())?;
      s.serialize_field("RewardParcelAmount", &self.RewardParcelAmount())?;
      s.serialize_field("RewardParcelProbability", &self.RewardParcelProbability())?;
      s.serialize_field("IsDisplayed", &self.IsDisplayed())?;
      if let Some(f) = self.DropItemModelPrefabPath() {
        s.serialize_field("DropItemModelPrefabPath", &f)?;
      } else {
        s.skip_field("DropItemModelPrefabPath")?;
      }
    s.end()
  }
}

pub struct WeekDungeonRewardExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WeekDungeonRewardExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GroupId(&mut self, GroupId: i64) {
    self.fbb_.push_slot::<i64>(WeekDungeonRewardExcel::VT_GROUPID, GroupId, 0);
  }
  #[inline]
  pub fn add_DungeonType(&mut self, DungeonType: WeekDungeonType) {
    self.fbb_.push_slot::<WeekDungeonType>(WeekDungeonRewardExcel::VT_DUNGEONTYPE, DungeonType, WeekDungeonType::None);
  }
  #[inline]
  pub fn add_RewardParcelType(&mut self, RewardParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(WeekDungeonRewardExcel::VT_REWARDPARCELTYPE, RewardParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_RewardParcelId(&mut self, RewardParcelId: i64) {
    self.fbb_.push_slot::<i64>(WeekDungeonRewardExcel::VT_REWARDPARCELID, RewardParcelId, 0);
  }
  #[inline]
  pub fn add_RewardParcelAmount(&mut self, RewardParcelAmount: i64) {
    self.fbb_.push_slot::<i64>(WeekDungeonRewardExcel::VT_REWARDPARCELAMOUNT, RewardParcelAmount, 0);
  }
  #[inline]
  pub fn add_RewardParcelProbability(&mut self, RewardParcelProbability: i64) {
    self.fbb_.push_slot::<i64>(WeekDungeonRewardExcel::VT_REWARDPARCELPROBABILITY, RewardParcelProbability, 0);
  }
  #[inline]
  pub fn add_IsDisplayed(&mut self, IsDisplayed: bool) {
    self.fbb_.push_slot::<bool>(WeekDungeonRewardExcel::VT_ISDISPLAYED, IsDisplayed, false);
  }
  #[inline]
  pub fn add_DropItemModelPrefabPath(&mut self, DropItemModelPrefabPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeekDungeonRewardExcel::VT_DROPITEMMODELPREFABPATH, DropItemModelPrefabPath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WeekDungeonRewardExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WeekDungeonRewardExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WeekDungeonRewardExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WeekDungeonRewardExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WeekDungeonRewardExcel");
      ds.field("GroupId", &self.GroupId());
      ds.field("DungeonType", &self.DungeonType());
      ds.field("RewardParcelType", &self.RewardParcelType());
      ds.field("RewardParcelId", &self.RewardParcelId());
      ds.field("RewardParcelAmount", &self.RewardParcelAmount());
      ds.field("RewardParcelProbability", &self.RewardParcelProbability());
      ds.field("IsDisplayed", &self.IsDisplayed());
      ds.field("DropItemModelPrefabPath", &self.DropItemModelPrefabPath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WeekDungeonRewardExcelT {
  pub GroupId: i64,
  pub DungeonType: WeekDungeonType,
  pub RewardParcelType: ParcelType,
  pub RewardParcelId: i64,
  pub RewardParcelAmount: i64,
  pub RewardParcelProbability: i64,
  pub IsDisplayed: bool,
  pub DropItemModelPrefabPath: Option<String>,
}
impl Default for WeekDungeonRewardExcelT {
  fn default() -> Self {
    Self {
      GroupId: 0,
      DungeonType: WeekDungeonType::None,
      RewardParcelType: ParcelType::None,
      RewardParcelId: 0,
      RewardParcelAmount: 0,
      RewardParcelProbability: 0,
      IsDisplayed: false,
      DropItemModelPrefabPath: None,
    }
  }
}
impl WeekDungeonRewardExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WeekDungeonRewardExcel<'b>> {
    let GroupId = self.GroupId;
    let DungeonType = self.DungeonType;
    let RewardParcelType = self.RewardParcelType;
    let RewardParcelId = self.RewardParcelId;
    let RewardParcelAmount = self.RewardParcelAmount;
    let RewardParcelProbability = self.RewardParcelProbability;
    let IsDisplayed = self.IsDisplayed;
    let DropItemModelPrefabPath = self.DropItemModelPrefabPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    WeekDungeonRewardExcel::create(_fbb, &WeekDungeonRewardExcelArgs{
      GroupId,
      DungeonType,
      RewardParcelType,
      RewardParcelId,
      RewardParcelAmount,
      RewardParcelProbability,
      IsDisplayed,
      DropItemModelPrefabPath,
    })
  }
}
