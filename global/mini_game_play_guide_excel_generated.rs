// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MiniGamePlayGuideExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MiniGamePlayGuideExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MiniGamePlayGuideExcel<'a> {
  type Inner = MiniGamePlayGuideExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MiniGamePlayGuideExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 6;
  pub const VT_ISPCBUILD: flatbuffers::VOffsetT = 8;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 10;
  pub const VT_GUIDETITLE: flatbuffers::VOffsetT = 12;
  pub const VT_GUIDEIMAGEPATH: flatbuffers::VOffsetT = 14;
  pub const VT_GUIDETEXT: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MiniGamePlayGuideExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MiniGamePlayGuideExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MiniGamePlayGuideExcel<'bldr>> {
    let mut builder = MiniGamePlayGuideExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MiniGamePlayGuide");
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.GuideText {
        builder.add_GuideText(x);
      }
      if let Some(x) = args.GuideImagePath {
        builder.add_GuideImagePath(x);
      }
      if let Some(x) = args.GuideTitle {
        builder.add_GuideTitle(x);
      }
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      builder.add_IsPcBuild(args.IsPcBuild);
    builder.finish()
  }

  pub fn unpack(&self) -> MiniGamePlayGuideExcelT {
    let key = table_encryption_service::create_key(b"MiniGamePlayGuide");
      let Id = self.Id();
      let EventContentId = self.EventContentId();
      let IsPcBuild = self.IsPcBuild();
      let DisplayOrder = self.DisplayOrder();
    let GuideTitle = self.GuideTitle().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GuideImagePath = self.GuideImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GuideText = self.GuideText().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    MiniGamePlayGuideExcelT {
      Id,
      EventContentId,
      IsPcBuild,
      DisplayOrder,
      GuideTitle,
      GuideImagePath,
      GuideText,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGamePlayGuideExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MiniGamePlayGuideExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsPcBuild(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MiniGamePlayGuideExcel::VT_ISPCBUILD, Some(false)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MiniGamePlayGuideExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GuideTitle(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGamePlayGuideExcel::VT_GUIDETITLE, None)}
  }
  #[inline]
  pub fn GuideImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGamePlayGuideExcel::VT_GUIDEIMAGEPATH, None)}
  }
  #[inline]
  pub fn GuideText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MiniGamePlayGuideExcel::VT_GUIDETEXT, None)}
  }
}

impl flatbuffers::Verifiable for MiniGamePlayGuideExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<bool>("IsPcBuild", Self::VT_ISPCBUILD, false)?
     .visit_field::<i32>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GuideTitle", Self::VT_GUIDETITLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GuideImagePath", Self::VT_GUIDEIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GuideText", Self::VT_GUIDETEXT, false)?
     .finish();
    Ok(())
  }
}
pub struct MiniGamePlayGuideExcelArgs<'a> {
    pub Id: i64,
    pub EventContentId: i64,
    pub IsPcBuild: bool,
    pub DisplayOrder: i32,
    pub GuideTitle: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GuideImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GuideText: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MiniGamePlayGuideExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MiniGamePlayGuideExcelArgs {
      Id: 0,
      EventContentId: 0,
      IsPcBuild: false,
      DisplayOrder: 0,
      GuideTitle: None,
      GuideImagePath: None,
      GuideText: None,
    }
  }
}

impl Serialize for MiniGamePlayGuideExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MiniGamePlayGuideExcel", 7)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("IsPcBuild", &self.IsPcBuild())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      if let Some(f) = self.GuideTitle() {
        s.serialize_field("GuideTitle", &f)?;
      } else {
        s.skip_field("GuideTitle")?;
      }
      if let Some(f) = self.GuideImagePath() {
        s.serialize_field("GuideImagePath", &f)?;
      } else {
        s.skip_field("GuideImagePath")?;
      }
      if let Some(f) = self.GuideText() {
        s.serialize_field("GuideText", &f)?;
      } else {
        s.skip_field("GuideText")?;
      }
    s.end()
  }
}

pub struct MiniGamePlayGuideExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MiniGamePlayGuideExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(MiniGamePlayGuideExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MiniGamePlayGuideExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_IsPcBuild(&mut self, IsPcBuild: bool) {
    self.fbb_.push_slot::<bool>(MiniGamePlayGuideExcel::VT_ISPCBUILD, IsPcBuild, false);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i32) {
    self.fbb_.push_slot::<i32>(MiniGamePlayGuideExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_GuideTitle(&mut self, GuideTitle: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGamePlayGuideExcel::VT_GUIDETITLE, GuideTitle);
  }
  #[inline]
  pub fn add_GuideImagePath(&mut self, GuideImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGamePlayGuideExcel::VT_GUIDEIMAGEPATH, GuideImagePath);
  }
  #[inline]
  pub fn add_GuideText(&mut self, GuideText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MiniGamePlayGuideExcel::VT_GUIDETEXT, GuideText);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MiniGamePlayGuideExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MiniGamePlayGuideExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MiniGamePlayGuideExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MiniGamePlayGuideExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MiniGamePlayGuideExcel");
      ds.field("Id", &self.Id());
      ds.field("EventContentId", &self.EventContentId());
      ds.field("IsPcBuild", &self.IsPcBuild());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("GuideTitle", &self.GuideTitle());
      ds.field("GuideImagePath", &self.GuideImagePath());
      ds.field("GuideText", &self.GuideText());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MiniGamePlayGuideExcelT {
  pub Id: i64,
  pub EventContentId: i64,
  pub IsPcBuild: bool,
  pub DisplayOrder: i32,
  pub GuideTitle: Option<String>,
  pub GuideImagePath: Option<String>,
  pub GuideText: Option<String>,
}
impl Default for MiniGamePlayGuideExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      EventContentId: 0,
      IsPcBuild: false,
      DisplayOrder: 0,
      GuideTitle: None,
      GuideImagePath: None,
      GuideText: None,
    }
  }
}
impl MiniGamePlayGuideExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MiniGamePlayGuideExcel<'b>> {
    let Id = self.Id;
    let EventContentId = self.EventContentId;
    let IsPcBuild = self.IsPcBuild;
    let DisplayOrder = self.DisplayOrder;
    let GuideTitle = self.GuideTitle.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GuideImagePath = self.GuideImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GuideText = self.GuideText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MiniGamePlayGuideExcel::create(_fbb, &MiniGamePlayGuideExcelArgs{
      Id,
      EventContentId,
      IsPcBuild,
      DisplayOrder,
      GuideTitle,
      GuideImagePath,
      GuideText,
    })
  }
}
