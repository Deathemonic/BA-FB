// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterGearExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterGearExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterGearExcel<'a> {
  type Inner = CharacterGearExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterGearExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTERID: flatbuffers::VOffsetT = 6;
  pub const VT_STATLEVELUPTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_TIER: flatbuffers::VOffsetT = 10;
  pub const VT_NEXTTIEREQUIPMENT: flatbuffers::VOffsetT = 12;
  pub const VT_RECIPEID: flatbuffers::VOffsetT = 14;
  pub const VT_OPENFAVORLEVEL: flatbuffers::VOffsetT = 16;
  pub const VT_MAXLEVEL: flatbuffers::VOffsetT = 18;
  pub const VT_LEARNSKILLSLOT: flatbuffers::VOffsetT = 20;
  pub const VT_STATTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_MINSTATVALUE: flatbuffers::VOffsetT = 24;
  pub const VT_MAXSTATVALUE: flatbuffers::VOffsetT = 26;
  pub const VT_ICON: flatbuffers::VOffsetT = 28;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 30;
  pub const VT_TAGS: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterGearExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterGearExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterGearExcel<'bldr>> {
    let mut builder = CharacterGearExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterGear");
      let x = args.MaxLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxLevel(x);
      let x = args.OpenFavorLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OpenFavorLevel(x);
      let x = args.RecipeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RecipeId(x);
      let x = args.NextTierEquipment;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NextTierEquipment(x);
      let x = args.Tier;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Tier(x);
      let x = args.CharacterId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CharacterId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.Tags {
        builder.add_Tags(x);
      }
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      if let Some(x) = args.Icon {
        builder.add_Icon(x);
      }
      if let Some(x) = args.MaxStatValue {
        builder.add_MaxStatValue(x);
      }
      if let Some(x) = args.MinStatValue {
        builder.add_MinStatValue(x);
      }
      if let Some(x) = args.StatType {
        builder.add_StatType(x);
      }
      if let Some(x) = args.LearnSkillSlot {
        builder.add_LearnSkillSlot(x);
      }
      let x = args.StatLevelUpType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_StatLevelUpType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterGearExcelT {
    let key = table_encryption_service::create_key(b"CharacterGear");
      let Id = self.Id();
      let CharacterId = self.CharacterId();
      let StatLevelUpType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.StatLevelUpType(), &key)
      } else {
        self.StatLevelUpType()
      };
      let Tier = self.Tier();
      let NextTierEquipment = self.NextTierEquipment();
      let RecipeId = self.RecipeId();
      let OpenFavorLevel = self.OpenFavorLevel();
      let MaxLevel = self.MaxLevel();
    let LearnSkillSlot = self.LearnSkillSlot().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let StatType = self.StatType().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let MinStatValue = self.MinStatValue().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let MaxStatValue = self.MaxStatValue().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let Icon = self.Icon().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let LocalizeEtcId = self.LocalizeEtcId();
    let Tags = self.Tags().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    CharacterGearExcelT {
      Id,
      CharacterId,
      StatLevelUpType,
      Tier,
      NextTierEquipment,
      RecipeId,
      OpenFavorLevel,
      MaxLevel,
      LearnSkillSlot,
      StatType,
      MinStatValue,
      MaxStatValue,
      Icon,
      LocalizeEtcId,
      Tags,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterGearExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CharacterId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterGearExcel::VT_CHARACTERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StatLevelUpType(&self) -> StatLevelUpType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StatLevelUpType>(CharacterGearExcel::VT_STATLEVELUPTYPE, Some(StatLevelUpType::Standard)).unwrap()}
  }
  #[inline]
  pub fn Tier(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterGearExcel::VT_TIER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NextTierEquipment(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterGearExcel::VT_NEXTTIEREQUIPMENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecipeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterGearExcel::VT_RECIPEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OpenFavorLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterGearExcel::VT_OPENFAVORLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxLevel(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterGearExcel::VT_MAXLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LearnSkillSlot(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterGearExcel::VT_LEARNSKILLSLOT, None)}
  }
  #[inline]
  pub fn StatType(&self) -> Option<flatbuffers::Vector<'a, EquipmentOptionType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, EquipmentOptionType>>>(CharacterGearExcel::VT_STATTYPE, None)}
  }
  #[inline]
  pub fn MinStatValue(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterGearExcel::VT_MINSTATVALUE, None)}
  }
  #[inline]
  pub fn MaxStatValue(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(CharacterGearExcel::VT_MAXSTATVALUE, None)}
  }
  #[inline]
  pub fn Icon(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterGearExcel::VT_ICON, None)}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CharacterGearExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Tags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(CharacterGearExcel::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for CharacterGearExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("CharacterId", Self::VT_CHARACTERID, false)?
     .visit_field::<StatLevelUpType>("StatLevelUpType", Self::VT_STATLEVELUPTYPE, false)?
     .visit_field::<i64>("Tier", Self::VT_TIER, false)?
     .visit_field::<i64>("NextTierEquipment", Self::VT_NEXTTIEREQUIPMENT, false)?
     .visit_field::<i64>("RecipeId", Self::VT_RECIPEID, false)?
     .visit_field::<i64>("OpenFavorLevel", Self::VT_OPENFAVORLEVEL, false)?
     .visit_field::<i64>("MaxLevel", Self::VT_MAXLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LearnSkillSlot", Self::VT_LEARNSKILLSLOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, EquipmentOptionType>>>("StatType", Self::VT_STATTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MinStatValue", Self::VT_MINSTATVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("MaxStatValue", Self::VT_MAXSTATVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("Icon", Self::VT_ICON, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("Tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterGearExcelArgs<'a> {
    pub Id: i64,
    pub CharacterId: i64,
    pub StatLevelUpType: StatLevelUpType,
    pub Tier: i64,
    pub NextTierEquipment: i64,
    pub RecipeId: i64,
    pub OpenFavorLevel: i64,
    pub MaxLevel: i64,
    pub LearnSkillSlot: Option<flatbuffers::WIPOffset<&'a str>>,
    pub StatType: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, EquipmentOptionType>>>,
    pub MinStatValue: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub MaxStatValue: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub Icon: Option<flatbuffers::WIPOffset<&'a str>>,
    pub LocalizeEtcId: u32,
    pub Tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
}
impl<'a> Default for CharacterGearExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterGearExcelArgs {
      Id: 0,
      CharacterId: 0,
      StatLevelUpType: StatLevelUpType::Standard,
      Tier: 0,
      NextTierEquipment: 0,
      RecipeId: 0,
      OpenFavorLevel: 0,
      MaxLevel: 0,
      LearnSkillSlot: None,
      StatType: None,
      MinStatValue: None,
      MaxStatValue: None,
      Icon: None,
      LocalizeEtcId: 0,
      Tags: None,
    }
  }
}

impl Serialize for CharacterGearExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterGearExcel", 15)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("CharacterId", &self.CharacterId())?;
      s.serialize_field("StatLevelUpType", &self.StatLevelUpType())?;
      s.serialize_field("Tier", &self.Tier())?;
      s.serialize_field("NextTierEquipment", &self.NextTierEquipment())?;
      s.serialize_field("RecipeId", &self.RecipeId())?;
      s.serialize_field("OpenFavorLevel", &self.OpenFavorLevel())?;
      s.serialize_field("MaxLevel", &self.MaxLevel())?;
      if let Some(f) = self.LearnSkillSlot() {
        s.serialize_field("LearnSkillSlot", &f)?;
      } else {
        s.skip_field("LearnSkillSlot")?;
      }
      if let Some(f) = self.StatType() {
        s.serialize_field("StatType", &f)?;
      } else {
        s.skip_field("StatType")?;
      }
      if let Some(f) = self.MinStatValue() {
        s.serialize_field("MinStatValue", &f)?;
      } else {
        s.skip_field("MinStatValue")?;
      }
      if let Some(f) = self.MaxStatValue() {
        s.serialize_field("MaxStatValue", &f)?;
      } else {
        s.skip_field("MaxStatValue")?;
      }
      if let Some(f) = self.Icon() {
        s.serialize_field("Icon", &f)?;
      } else {
        s.skip_field("Icon")?;
      }
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      if let Some(f) = self.Tags() {
        s.serialize_field("Tags", &f)?;
      } else {
        s.skip_field("Tags")?;
      }
    s.end()
  }
}

pub struct CharacterGearExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterGearExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(CharacterGearExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_CharacterId(&mut self, CharacterId: i64) {
    self.fbb_.push_slot::<i64>(CharacterGearExcel::VT_CHARACTERID, CharacterId, 0);
  }
  #[inline]
  pub fn add_StatLevelUpType(&mut self, StatLevelUpType: StatLevelUpType) {
    self.fbb_.push_slot::<StatLevelUpType>(CharacterGearExcel::VT_STATLEVELUPTYPE, StatLevelUpType, StatLevelUpType::Standard);
  }
  #[inline]
  pub fn add_Tier(&mut self, Tier: i64) {
    self.fbb_.push_slot::<i64>(CharacterGearExcel::VT_TIER, Tier, 0);
  }
  #[inline]
  pub fn add_NextTierEquipment(&mut self, NextTierEquipment: i64) {
    self.fbb_.push_slot::<i64>(CharacterGearExcel::VT_NEXTTIEREQUIPMENT, NextTierEquipment, 0);
  }
  #[inline]
  pub fn add_RecipeId(&mut self, RecipeId: i64) {
    self.fbb_.push_slot::<i64>(CharacterGearExcel::VT_RECIPEID, RecipeId, 0);
  }
  #[inline]
  pub fn add_OpenFavorLevel(&mut self, OpenFavorLevel: i64) {
    self.fbb_.push_slot::<i64>(CharacterGearExcel::VT_OPENFAVORLEVEL, OpenFavorLevel, 0);
  }
  #[inline]
  pub fn add_MaxLevel(&mut self, MaxLevel: i64) {
    self.fbb_.push_slot::<i64>(CharacterGearExcel::VT_MAXLEVEL, MaxLevel, 0);
  }
  #[inline]
  pub fn add_LearnSkillSlot(&mut self, LearnSkillSlot: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterGearExcel::VT_LEARNSKILLSLOT, LearnSkillSlot);
  }
  #[inline]
  pub fn add_StatType(&mut self, StatType: flatbuffers::WIPOffset<flatbuffers::Vector<'b , EquipmentOptionType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterGearExcel::VT_STATTYPE, StatType);
  }
  #[inline]
  pub fn add_MinStatValue(&mut self, MinStatValue: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterGearExcel::VT_MINSTATVALUE, MinStatValue);
  }
  #[inline]
  pub fn add_MaxStatValue(&mut self, MaxStatValue: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterGearExcel::VT_MAXSTATVALUE, MaxStatValue);
  }
  #[inline]
  pub fn add_Icon(&mut self, Icon: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterGearExcel::VT_ICON, Icon);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(CharacterGearExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_Tags(&mut self, Tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterGearExcel::VT_TAGS, Tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterGearExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterGearExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterGearExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterGearExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterGearExcel");
      ds.field("Id", &self.Id());
      ds.field("CharacterId", &self.CharacterId());
      ds.field("StatLevelUpType", &self.StatLevelUpType());
      ds.field("Tier", &self.Tier());
      ds.field("NextTierEquipment", &self.NextTierEquipment());
      ds.field("RecipeId", &self.RecipeId());
      ds.field("OpenFavorLevel", &self.OpenFavorLevel());
      ds.field("MaxLevel", &self.MaxLevel());
      ds.field("LearnSkillSlot", &self.LearnSkillSlot());
      ds.field("StatType", &self.StatType());
      ds.field("MinStatValue", &self.MinStatValue());
      ds.field("MaxStatValue", &self.MaxStatValue());
      ds.field("Icon", &self.Icon());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("Tags", &self.Tags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterGearExcelT {
  pub Id: i64,
  pub CharacterId: i64,
  pub StatLevelUpType: StatLevelUpType,
  pub Tier: i64,
  pub NextTierEquipment: i64,
  pub RecipeId: i64,
  pub OpenFavorLevel: i64,
  pub MaxLevel: i64,
  pub LearnSkillSlot: Option<String>,
  pub StatType: Option<Vec<EquipmentOptionType>>,
  pub MinStatValue: Option<Vec<i64>>,
  pub MaxStatValue: Option<Vec<i64>>,
  pub Icon: Option<String>,
  pub LocalizeEtcId: u32,
  pub Tags: Option<Vec<Tag>>,
}
impl Default for CharacterGearExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      CharacterId: 0,
      StatLevelUpType: StatLevelUpType::Standard,
      Tier: 0,
      NextTierEquipment: 0,
      RecipeId: 0,
      OpenFavorLevel: 0,
      MaxLevel: 0,
      LearnSkillSlot: None,
      StatType: None,
      MinStatValue: None,
      MaxStatValue: None,
      Icon: None,
      LocalizeEtcId: 0,
      Tags: None,
    }
  }
}
impl CharacterGearExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterGearExcel<'b>> {
    let Id = self.Id;
    let CharacterId = self.CharacterId;
    let StatLevelUpType = self.StatLevelUpType;
    let Tier = self.Tier;
    let NextTierEquipment = self.NextTierEquipment;
    let RecipeId = self.RecipeId;
    let OpenFavorLevel = self.OpenFavorLevel;
    let MaxLevel = self.MaxLevel;
    let LearnSkillSlot = self.LearnSkillSlot.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let StatType = self.StatType.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MinStatValue = self.MinStatValue.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let MaxStatValue = self.MaxStatValue.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let Icon = self.Icon.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let LocalizeEtcId = self.LocalizeEtcId;
    let Tags = self.Tags.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    CharacterGearExcel::create(_fbb, &CharacterGearExcelArgs{
      Id,
      CharacterId,
      StatLevelUpType,
      Tier,
      NextTierEquipment,
      RecipeId,
      OpenFavorLevel,
      MaxLevel,
      LearnSkillSlot,
      StatType,
      MinStatValue,
      MaxStatValue,
      Icon,
      LocalizeEtcId,
      Tags,
    })
  }
}
