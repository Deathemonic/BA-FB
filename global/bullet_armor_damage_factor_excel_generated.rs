// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BulletArmorDamageFactorExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BulletArmorDamageFactorExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BulletArmorDamageFactorExcel<'a> {
  type Inner = BulletArmorDamageFactorExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BulletArmorDamageFactorExcel<'a> {
  pub const VT_DAMAGEFACTORGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_BULLETTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ARMORTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_DAMAGERATE: flatbuffers::VOffsetT = 10;
  pub const VT_DAMAGEATTRIBUTE: flatbuffers::VOffsetT = 12;
  pub const VT_MINDAMAGERATE: flatbuffers::VOffsetT = 14;
  pub const VT_MAXDAMAGERATE: flatbuffers::VOffsetT = 16;
  pub const VT_SHOWHIGHLIGHTFLOATER: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BulletArmorDamageFactorExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BulletArmorDamageFactorExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<BulletArmorDamageFactorExcel<'bldr>> {
    let mut builder = BulletArmorDamageFactorExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BulletArmorDamageFactor");
      let x = args.MaxDamageRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MaxDamageRate(x);
      let x = args.MinDamageRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_MinDamageRate(x);
      let x = args.DamageRate;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DamageRate(x);
      let x = args.DamageAttribute;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DamageAttribute(x);
      let x = args.ArmorType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ArmorType(x);
      let x = args.BulletType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_BulletType(x);
      if let Some(x) = args.DamageFactorGroupId {
        builder.add_DamageFactorGroupId(x);
      }
      builder.add_ShowHighlightFloater(args.ShowHighlightFloater);
    builder.finish()
  }

  pub fn unpack(&self) -> BulletArmorDamageFactorExcelT {
    let key = table_encryption_service::create_key(b"BulletArmorDamageFactor");
    let DamageFactorGroupId = self.DamageFactorGroupId().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let BulletType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.BulletType(), &key)
      } else {
        self.BulletType()
      };
      let ArmorType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ArmorType(), &key)
      } else {
        self.ArmorType()
      };
      let DamageRate = self.DamageRate();
      let DamageAttribute = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DamageAttribute(), &key)
      } else {
        self.DamageAttribute()
      };
      let MinDamageRate = self.MinDamageRate();
      let MaxDamageRate = self.MaxDamageRate();
      let ShowHighlightFloater = self.ShowHighlightFloater();
    BulletArmorDamageFactorExcelT {
      DamageFactorGroupId,
      BulletType,
      ArmorType,
      DamageRate,
      DamageAttribute,
      MinDamageRate,
      MaxDamageRate,
      ShowHighlightFloater,
    }
  }

  #[inline]
  pub fn DamageFactorGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BulletArmorDamageFactorExcel::VT_DAMAGEFACTORGROUPID, None)}
  }
  #[inline]
  pub fn BulletType(&self) -> BulletType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BulletType>(BulletArmorDamageFactorExcel::VT_BULLETTYPE, Some(BulletType::Normal)).unwrap()}
  }
  #[inline]
  pub fn ArmorType(&self) -> ArmorType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ArmorType>(BulletArmorDamageFactorExcel::VT_ARMORTYPE, Some(ArmorType::LightArmor)).unwrap()}
  }
  #[inline]
  pub fn DamageRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BulletArmorDamageFactorExcel::VT_DAMAGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DamageAttribute(&self) -> DamageAttribute {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DamageAttribute>(BulletArmorDamageFactorExcel::VT_DAMAGEATTRIBUTE, Some(DamageAttribute::Resist)).unwrap()}
  }
  #[inline]
  pub fn MinDamageRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BulletArmorDamageFactorExcel::VT_MINDAMAGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxDamageRate(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BulletArmorDamageFactorExcel::VT_MAXDAMAGERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShowHighlightFloater(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(BulletArmorDamageFactorExcel::VT_SHOWHIGHLIGHTFLOATER, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BulletArmorDamageFactorExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("DamageFactorGroupId", Self::VT_DAMAGEFACTORGROUPID, false)?
     .visit_field::<BulletType>("BulletType", Self::VT_BULLETTYPE, false)?
     .visit_field::<ArmorType>("ArmorType", Self::VT_ARMORTYPE, false)?
     .visit_field::<i64>("DamageRate", Self::VT_DAMAGERATE, false)?
     .visit_field::<DamageAttribute>("DamageAttribute", Self::VT_DAMAGEATTRIBUTE, false)?
     .visit_field::<i64>("MinDamageRate", Self::VT_MINDAMAGERATE, false)?
     .visit_field::<i64>("MaxDamageRate", Self::VT_MAXDAMAGERATE, false)?
     .visit_field::<bool>("ShowHighlightFloater", Self::VT_SHOWHIGHLIGHTFLOATER, false)?
     .finish();
    Ok(())
  }
}
pub struct BulletArmorDamageFactorExcelArgs<'a> {
    pub DamageFactorGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub BulletType: BulletType,
    pub ArmorType: ArmorType,
    pub DamageRate: i64,
    pub DamageAttribute: DamageAttribute,
    pub MinDamageRate: i64,
    pub MaxDamageRate: i64,
    pub ShowHighlightFloater: bool,
}
impl<'a> Default for BulletArmorDamageFactorExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    BulletArmorDamageFactorExcelArgs {
      DamageFactorGroupId: None,
      BulletType: BulletType::Normal,
      ArmorType: ArmorType::LightArmor,
      DamageRate: 0,
      DamageAttribute: DamageAttribute::Resist,
      MinDamageRate: 0,
      MaxDamageRate: 0,
      ShowHighlightFloater: false,
    }
  }
}

impl Serialize for BulletArmorDamageFactorExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BulletArmorDamageFactorExcel", 8)?;
      if let Some(f) = self.DamageFactorGroupId() {
        s.serialize_field("DamageFactorGroupId", &f)?;
      } else {
        s.skip_field("DamageFactorGroupId")?;
      }
      s.serialize_field("BulletType", &self.BulletType())?;
      s.serialize_field("ArmorType", &self.ArmorType())?;
      s.serialize_field("DamageRate", &self.DamageRate())?;
      s.serialize_field("DamageAttribute", &self.DamageAttribute())?;
      s.serialize_field("MinDamageRate", &self.MinDamageRate())?;
      s.serialize_field("MaxDamageRate", &self.MaxDamageRate())?;
      s.serialize_field("ShowHighlightFloater", &self.ShowHighlightFloater())?;
    s.end()
  }
}

pub struct BulletArmorDamageFactorExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BulletArmorDamageFactorExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_DamageFactorGroupId(&mut self, DamageFactorGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BulletArmorDamageFactorExcel::VT_DAMAGEFACTORGROUPID, DamageFactorGroupId);
  }
  #[inline]
  pub fn add_BulletType(&mut self, BulletType: BulletType) {
    self.fbb_.push_slot::<BulletType>(BulletArmorDamageFactorExcel::VT_BULLETTYPE, BulletType, BulletType::Normal);
  }
  #[inline]
  pub fn add_ArmorType(&mut self, ArmorType: ArmorType) {
    self.fbb_.push_slot::<ArmorType>(BulletArmorDamageFactorExcel::VT_ARMORTYPE, ArmorType, ArmorType::LightArmor);
  }
  #[inline]
  pub fn add_DamageRate(&mut self, DamageRate: i64) {
    self.fbb_.push_slot::<i64>(BulletArmorDamageFactorExcel::VT_DAMAGERATE, DamageRate, 0);
  }
  #[inline]
  pub fn add_DamageAttribute(&mut self, DamageAttribute: DamageAttribute) {
    self.fbb_.push_slot::<DamageAttribute>(BulletArmorDamageFactorExcel::VT_DAMAGEATTRIBUTE, DamageAttribute, DamageAttribute::Resist);
  }
  #[inline]
  pub fn add_MinDamageRate(&mut self, MinDamageRate: i64) {
    self.fbb_.push_slot::<i64>(BulletArmorDamageFactorExcel::VT_MINDAMAGERATE, MinDamageRate, 0);
  }
  #[inline]
  pub fn add_MaxDamageRate(&mut self, MaxDamageRate: i64) {
    self.fbb_.push_slot::<i64>(BulletArmorDamageFactorExcel::VT_MAXDAMAGERATE, MaxDamageRate, 0);
  }
  #[inline]
  pub fn add_ShowHighlightFloater(&mut self, ShowHighlightFloater: bool) {
    self.fbb_.push_slot::<bool>(BulletArmorDamageFactorExcel::VT_SHOWHIGHLIGHTFLOATER, ShowHighlightFloater, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BulletArmorDamageFactorExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BulletArmorDamageFactorExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BulletArmorDamageFactorExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BulletArmorDamageFactorExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BulletArmorDamageFactorExcel");
      ds.field("DamageFactorGroupId", &self.DamageFactorGroupId());
      ds.field("BulletType", &self.BulletType());
      ds.field("ArmorType", &self.ArmorType());
      ds.field("DamageRate", &self.DamageRate());
      ds.field("DamageAttribute", &self.DamageAttribute());
      ds.field("MinDamageRate", &self.MinDamageRate());
      ds.field("MaxDamageRate", &self.MaxDamageRate());
      ds.field("ShowHighlightFloater", &self.ShowHighlightFloater());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BulletArmorDamageFactorExcelT {
  pub DamageFactorGroupId: Option<String>,
  pub BulletType: BulletType,
  pub ArmorType: ArmorType,
  pub DamageRate: i64,
  pub DamageAttribute: DamageAttribute,
  pub MinDamageRate: i64,
  pub MaxDamageRate: i64,
  pub ShowHighlightFloater: bool,
}
impl Default for BulletArmorDamageFactorExcelT {
  fn default() -> Self {
    Self {
      DamageFactorGroupId: None,
      BulletType: BulletType::Normal,
      ArmorType: ArmorType::LightArmor,
      DamageRate: 0,
      DamageAttribute: DamageAttribute::Resist,
      MinDamageRate: 0,
      MaxDamageRate: 0,
      ShowHighlightFloater: false,
    }
  }
}
impl BulletArmorDamageFactorExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BulletArmorDamageFactorExcel<'b>> {
    let DamageFactorGroupId = self.DamageFactorGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let BulletType = self.BulletType;
    let ArmorType = self.ArmorType;
    let DamageRate = self.DamageRate;
    let DamageAttribute = self.DamageAttribute;
    let MinDamageRate = self.MinDamageRate;
    let MaxDamageRate = self.MaxDamageRate;
    let ShowHighlightFloater = self.ShowHighlightFloater;
    BulletArmorDamageFactorExcel::create(_fbb, &BulletArmorDamageFactorExcelArgs{
      DamageFactorGroupId,
      BulletType,
      ArmorType,
      DamageRate,
      DamageAttribute,
      MinDamageRate,
      MaxDamageRate,
      ShowHighlightFloater,
    })
  }
}
