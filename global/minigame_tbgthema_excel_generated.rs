// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MinigameTBGThemaExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MinigameTBGThemaExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MinigameTBGThemaExcel<'a> {
  type Inner = MinigameTBGThemaExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MinigameTBGThemaExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 6;
  pub const VT_THEMAINDEX: flatbuffers::VOffsetT = 8;
  pub const VT_THEMATYPE: flatbuffers::VOffsetT = 10;
  pub const VT_THEMAMAP: flatbuffers::VOffsetT = 12;
  pub const VT_THEMAMAPBG: flatbuffers::VOffsetT = 14;
  pub const VT_PORTALCONDITION: flatbuffers::VOffsetT = 16;
  pub const VT_PORTALCONDITIONPARAMETER: flatbuffers::VOffsetT = 18;
  pub const VT_THEMANAMELOCALIZE: flatbuffers::VOffsetT = 20;
  pub const VT_THEMALOADINGIMAGE: flatbuffers::VOffsetT = 22;
  pub const VT_THEMAPLAYERPREFAB: flatbuffers::VOffsetT = 24;
  pub const VT_THEMALEADERID: flatbuffers::VOffsetT = 26;
  pub const VT_THEMAGOALLOCALIZE: flatbuffers::VOffsetT = 28;
  pub const VT_INSTANTCLEARCOSTAMOUNT: flatbuffers::VOffsetT = 30;
  pub const VT_ISTUTORIAL: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MinigameTBGThemaExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MinigameTBGThemaExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MinigameTBGThemaExcel<'bldr>> {
    let mut builder = MinigameTBGThemaExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"MinigameTBGThema");
      let x = args.InstantClearCostAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_InstantClearCostAmount(x);
      let x = args.ThemaLeaderId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ThemaLeaderId(x);
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.ThemaGoalLocalize {
        builder.add_ThemaGoalLocalize(x);
      }
      if let Some(x) = args.ThemaPlayerPrefab {
        builder.add_ThemaPlayerPrefab(x);
      }
      if let Some(x) = args.ThemaLoadingImage {
        builder.add_ThemaLoadingImage(x);
      }
      if let Some(x) = args.ThemaNameLocalize {
        builder.add_ThemaNameLocalize(x);
      }
      if let Some(x) = args.PortalConditionParameter {
        builder.add_PortalConditionParameter(x);
      }
      if let Some(x) = args.PortalCondition {
        builder.add_PortalCondition(x);
      }
      if let Some(x) = args.ThemaMapBG {
        builder.add_ThemaMapBG(x);
      }
      if let Some(x) = args.ThemaMap {
        builder.add_ThemaMap(x);
      }
      let x = args.ThemaType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ThemaType(x);
      let x = args.ThemaIndex;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ThemaIndex(x);
      builder.add_IsTutorial(args.IsTutorial);
    builder.finish()
  }

  pub fn unpack(&self) -> MinigameTBGThemaExcelT {
    let key = table_encryption_service::create_key(b"MinigameTBGThema");
      let EventContentId = self.EventContentId();
      let UniqueId = self.UniqueId();
      let ThemaIndex = self.ThemaIndex();
      let ThemaType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ThemaType(), &key)
      } else {
        self.ThemaType()
      };
    let ThemaMap = self.ThemaMap().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ThemaMapBG = self.ThemaMapBG().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PortalCondition = self.PortalCondition().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(*val, &key) } else { *val }).collect()
    });
    let PortalConditionParameter = self.PortalConditionParameter().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let ThemaNameLocalize = self.ThemaNameLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ThemaLoadingImage = self.ThemaLoadingImage().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ThemaPlayerPrefab = self.ThemaPlayerPrefab().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ThemaLeaderId = self.ThemaLeaderId();
    let ThemaGoalLocalize = self.ThemaGoalLocalize().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let InstantClearCostAmount = self.InstantClearCostAmount();
      let IsTutorial = self.IsTutorial();
    MinigameTBGThemaExcelT {
      EventContentId,
      UniqueId,
      ThemaIndex,
      ThemaType,
      ThemaMap,
      ThemaMapBG,
      PortalCondition,
      PortalConditionParameter,
      ThemaNameLocalize,
      ThemaLoadingImage,
      ThemaPlayerPrefab,
      ThemaLeaderId,
      ThemaGoalLocalize,
      InstantClearCostAmount,
      IsTutorial,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGThemaExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGThemaExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ThemaIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MinigameTBGThemaExcel::VT_THEMAINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ThemaType(&self) -> TBGThemaType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TBGThemaType>(MinigameTBGThemaExcel::VT_THEMATYPE, Some(TBGThemaType::None)).unwrap()}
  }
  #[inline]
  pub fn ThemaMap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGThemaExcel::VT_THEMAMAP, None)}
  }
  #[inline]
  pub fn ThemaMapBG(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGThemaExcel::VT_THEMAMAPBG, None)}
  }
  #[inline]
  pub fn PortalCondition(&self) -> Option<flatbuffers::Vector<'a, TBGPortalCondition>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, TBGPortalCondition>>>(MinigameTBGThemaExcel::VT_PORTALCONDITION, None)}
  }
  #[inline]
  pub fn PortalConditionParameter(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(MinigameTBGThemaExcel::VT_PORTALCONDITIONPARAMETER, None)}
  }
  #[inline]
  pub fn ThemaNameLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGThemaExcel::VT_THEMANAMELOCALIZE, None)}
  }
  #[inline]
  pub fn ThemaLoadingImage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGThemaExcel::VT_THEMALOADINGIMAGE, None)}
  }
  #[inline]
  pub fn ThemaPlayerPrefab(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGThemaExcel::VT_THEMAPLAYERPREFAB, None)}
  }
  #[inline]
  pub fn ThemaLeaderId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGThemaExcel::VT_THEMALEADERID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ThemaGoalLocalize(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MinigameTBGThemaExcel::VT_THEMAGOALLOCALIZE, None)}
  }
  #[inline]
  pub fn InstantClearCostAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MinigameTBGThemaExcel::VT_INSTANTCLEARCOSTAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsTutorial(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MinigameTBGThemaExcel::VT_ISTUTORIAL, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MinigameTBGThemaExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<i32>("ThemaIndex", Self::VT_THEMAINDEX, false)?
     .visit_field::<TBGThemaType>("ThemaType", Self::VT_THEMATYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThemaMap", Self::VT_THEMAMAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThemaMapBG", Self::VT_THEMAMAPBG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, TBGPortalCondition>>>("PortalCondition", Self::VT_PORTALCONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("PortalConditionParameter", Self::VT_PORTALCONDITIONPARAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThemaNameLocalize", Self::VT_THEMANAMELOCALIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThemaLoadingImage", Self::VT_THEMALOADINGIMAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThemaPlayerPrefab", Self::VT_THEMAPLAYERPREFAB, false)?
     .visit_field::<i64>("ThemaLeaderId", Self::VT_THEMALEADERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ThemaGoalLocalize", Self::VT_THEMAGOALLOCALIZE, false)?
     .visit_field::<i64>("InstantClearCostAmount", Self::VT_INSTANTCLEARCOSTAMOUNT, false)?
     .visit_field::<bool>("IsTutorial", Self::VT_ISTUTORIAL, false)?
     .finish();
    Ok(())
  }
}
pub struct MinigameTBGThemaExcelArgs<'a> {
    pub EventContentId: i64,
    pub UniqueId: i64,
    pub ThemaIndex: i32,
    pub ThemaType: TBGThemaType,
    pub ThemaMap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ThemaMapBG: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PortalCondition: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, TBGPortalCondition>>>,
    pub PortalConditionParameter: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ThemaNameLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ThemaLoadingImage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ThemaPlayerPrefab: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ThemaLeaderId: i64,
    pub ThemaGoalLocalize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub InstantClearCostAmount: i64,
    pub IsTutorial: bool,
}
impl<'a> Default for MinigameTBGThemaExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MinigameTBGThemaExcelArgs {
      EventContentId: 0,
      UniqueId: 0,
      ThemaIndex: 0,
      ThemaType: TBGThemaType::None,
      ThemaMap: None,
      ThemaMapBG: None,
      PortalCondition: None,
      PortalConditionParameter: None,
      ThemaNameLocalize: None,
      ThemaLoadingImage: None,
      ThemaPlayerPrefab: None,
      ThemaLeaderId: 0,
      ThemaGoalLocalize: None,
      InstantClearCostAmount: 0,
      IsTutorial: false,
    }
  }
}

impl Serialize for MinigameTBGThemaExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MinigameTBGThemaExcel", 15)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("ThemaIndex", &self.ThemaIndex())?;
      s.serialize_field("ThemaType", &self.ThemaType())?;
      if let Some(f) = self.ThemaMap() {
        s.serialize_field("ThemaMap", &f)?;
      } else {
        s.skip_field("ThemaMap")?;
      }
      if let Some(f) = self.ThemaMapBG() {
        s.serialize_field("ThemaMapBG", &f)?;
      } else {
        s.skip_field("ThemaMapBG")?;
      }
      if let Some(f) = self.PortalCondition() {
        s.serialize_field("PortalCondition", &f)?;
      } else {
        s.skip_field("PortalCondition")?;
      }
      if let Some(f) = self.PortalConditionParameter() {
        s.serialize_field("PortalConditionParameter", &f)?;
      } else {
        s.skip_field("PortalConditionParameter")?;
      }
      if let Some(f) = self.ThemaNameLocalize() {
        s.serialize_field("ThemaNameLocalize", &f)?;
      } else {
        s.skip_field("ThemaNameLocalize")?;
      }
      if let Some(f) = self.ThemaLoadingImage() {
        s.serialize_field("ThemaLoadingImage", &f)?;
      } else {
        s.skip_field("ThemaLoadingImage")?;
      }
      if let Some(f) = self.ThemaPlayerPrefab() {
        s.serialize_field("ThemaPlayerPrefab", &f)?;
      } else {
        s.skip_field("ThemaPlayerPrefab")?;
      }
      s.serialize_field("ThemaLeaderId", &self.ThemaLeaderId())?;
      if let Some(f) = self.ThemaGoalLocalize() {
        s.serialize_field("ThemaGoalLocalize", &f)?;
      } else {
        s.skip_field("ThemaGoalLocalize")?;
      }
      s.serialize_field("InstantClearCostAmount", &self.InstantClearCostAmount())?;
      s.serialize_field("IsTutorial", &self.IsTutorial())?;
    s.end()
  }
}

pub struct MinigameTBGThemaExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MinigameTBGThemaExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGThemaExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGThemaExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_ThemaIndex(&mut self, ThemaIndex: i32) {
    self.fbb_.push_slot::<i32>(MinigameTBGThemaExcel::VT_THEMAINDEX, ThemaIndex, 0);
  }
  #[inline]
  pub fn add_ThemaType(&mut self, ThemaType: TBGThemaType) {
    self.fbb_.push_slot::<TBGThemaType>(MinigameTBGThemaExcel::VT_THEMATYPE, ThemaType, TBGThemaType::None);
  }
  #[inline]
  pub fn add_ThemaMap(&mut self, ThemaMap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_THEMAMAP, ThemaMap);
  }
  #[inline]
  pub fn add_ThemaMapBG(&mut self, ThemaMapBG: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_THEMAMAPBG, ThemaMapBG);
  }
  #[inline]
  pub fn add_PortalCondition(&mut self, PortalCondition: flatbuffers::WIPOffset<flatbuffers::Vector<'b , TBGPortalCondition>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_PORTALCONDITION, PortalCondition);
  }
  #[inline]
  pub fn add_PortalConditionParameter(&mut self, PortalConditionParameter: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_PORTALCONDITIONPARAMETER, PortalConditionParameter);
  }
  #[inline]
  pub fn add_ThemaNameLocalize(&mut self, ThemaNameLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_THEMANAMELOCALIZE, ThemaNameLocalize);
  }
  #[inline]
  pub fn add_ThemaLoadingImage(&mut self, ThemaLoadingImage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_THEMALOADINGIMAGE, ThemaLoadingImage);
  }
  #[inline]
  pub fn add_ThemaPlayerPrefab(&mut self, ThemaPlayerPrefab: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_THEMAPLAYERPREFAB, ThemaPlayerPrefab);
  }
  #[inline]
  pub fn add_ThemaLeaderId(&mut self, ThemaLeaderId: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGThemaExcel::VT_THEMALEADERID, ThemaLeaderId, 0);
  }
  #[inline]
  pub fn add_ThemaGoalLocalize(&mut self, ThemaGoalLocalize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MinigameTBGThemaExcel::VT_THEMAGOALLOCALIZE, ThemaGoalLocalize);
  }
  #[inline]
  pub fn add_InstantClearCostAmount(&mut self, InstantClearCostAmount: i64) {
    self.fbb_.push_slot::<i64>(MinigameTBGThemaExcel::VT_INSTANTCLEARCOSTAMOUNT, InstantClearCostAmount, 0);
  }
  #[inline]
  pub fn add_IsTutorial(&mut self, IsTutorial: bool) {
    self.fbb_.push_slot::<bool>(MinigameTBGThemaExcel::VT_ISTUTORIAL, IsTutorial, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MinigameTBGThemaExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MinigameTBGThemaExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MinigameTBGThemaExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MinigameTBGThemaExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MinigameTBGThemaExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("UniqueId", &self.UniqueId());
      ds.field("ThemaIndex", &self.ThemaIndex());
      ds.field("ThemaType", &self.ThemaType());
      ds.field("ThemaMap", &self.ThemaMap());
      ds.field("ThemaMapBG", &self.ThemaMapBG());
      ds.field("PortalCondition", &self.PortalCondition());
      ds.field("PortalConditionParameter", &self.PortalConditionParameter());
      ds.field("ThemaNameLocalize", &self.ThemaNameLocalize());
      ds.field("ThemaLoadingImage", &self.ThemaLoadingImage());
      ds.field("ThemaPlayerPrefab", &self.ThemaPlayerPrefab());
      ds.field("ThemaLeaderId", &self.ThemaLeaderId());
      ds.field("ThemaGoalLocalize", &self.ThemaGoalLocalize());
      ds.field("InstantClearCostAmount", &self.InstantClearCostAmount());
      ds.field("IsTutorial", &self.IsTutorial());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MinigameTBGThemaExcelT {
  pub EventContentId: i64,
  pub UniqueId: i64,
  pub ThemaIndex: i32,
  pub ThemaType: TBGThemaType,
  pub ThemaMap: Option<String>,
  pub ThemaMapBG: Option<String>,
  pub PortalCondition: Option<Vec<TBGPortalCondition>>,
  pub PortalConditionParameter: Option<Vec<String>>,
  pub ThemaNameLocalize: Option<String>,
  pub ThemaLoadingImage: Option<String>,
  pub ThemaPlayerPrefab: Option<String>,
  pub ThemaLeaderId: i64,
  pub ThemaGoalLocalize: Option<String>,
  pub InstantClearCostAmount: i64,
  pub IsTutorial: bool,
}
impl Default for MinigameTBGThemaExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      UniqueId: 0,
      ThemaIndex: 0,
      ThemaType: TBGThemaType::None,
      ThemaMap: None,
      ThemaMapBG: None,
      PortalCondition: None,
      PortalConditionParameter: None,
      ThemaNameLocalize: None,
      ThemaLoadingImage: None,
      ThemaPlayerPrefab: None,
      ThemaLeaderId: 0,
      ThemaGoalLocalize: None,
      InstantClearCostAmount: 0,
      IsTutorial: false,
    }
  }
}
impl MinigameTBGThemaExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MinigameTBGThemaExcel<'b>> {
    let EventContentId = self.EventContentId;
    let UniqueId = self.UniqueId;
    let ThemaIndex = self.ThemaIndex;
    let ThemaType = self.ThemaType;
    let ThemaMap = self.ThemaMap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ThemaMapBG = self.ThemaMapBG.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PortalCondition = self.PortalCondition.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let PortalConditionParameter = self.PortalConditionParameter.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ThemaNameLocalize = self.ThemaNameLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ThemaLoadingImage = self.ThemaLoadingImage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ThemaPlayerPrefab = self.ThemaPlayerPrefab.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ThemaLeaderId = self.ThemaLeaderId;
    let ThemaGoalLocalize = self.ThemaGoalLocalize.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let InstantClearCostAmount = self.InstantClearCostAmount;
    let IsTutorial = self.IsTutorial;
    MinigameTBGThemaExcel::create(_fbb, &MinigameTBGThemaExcelArgs{
      EventContentId,
      UniqueId,
      ThemaIndex,
      ThemaType,
      ThemaMap,
      ThemaMapBG,
      PortalCondition,
      PortalConditionParameter,
      ThemaNameLocalize,
      ThemaLoadingImage,
      ThemaPlayerPrefab,
      ThemaLeaderId,
      ThemaGoalLocalize,
      InstantClearCostAmount,
      IsTutorial,
    })
  }
}
