// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentShopRefreshExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentShopRefreshExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentShopRefreshExcel<'a> {
  type Inner = EventContentShopRefreshExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentShopRefreshExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEETCID: flatbuffers::VOffsetT = 8;
  pub const VT_ISLEGACY: flatbuffers::VOffsetT = 10;
  pub const VT_GOODSID: flatbuffers::VOffsetT = 12;
  pub const VT_DISPLAYORDER: flatbuffers::VOffsetT = 14;
  pub const VT_CATEGORYTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_REFRESHGROUP: flatbuffers::VOffsetT = 18;
  pub const VT_PROB: flatbuffers::VOffsetT = 20;
  pub const VT_BUYREPORTEVENTNAME: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentShopRefreshExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentShopRefreshExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<EventContentShopRefreshExcel<'bldr>> {
    let mut builder = EventContentShopRefreshExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentShopRefresh");
      let x = args.DisplayOrder;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DisplayOrder(x);
      let x = args.GoodsId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GoodsId(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      if let Some(x) = args.BuyReportEventName {
        builder.add_BuyReportEventName(x);
      }
      let x = args.Prob;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Prob(x);
      let x = args.RefreshGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RefreshGroup(x);
      let x = args.CategoryType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_CategoryType(x);
      let x = args.LocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcId(x);
      builder.add_IsLegacy(args.IsLegacy);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentShopRefreshExcelT {
    let key = table_encryption_service::create_key(b"EventContentShopRefresh");
      let EventContentId = self.EventContentId();
      let Id = self.Id();
      let LocalizeEtcId = self.LocalizeEtcId();
      let IsLegacy = self.IsLegacy();
      let GoodsId = self.GoodsId();
      let DisplayOrder = self.DisplayOrder();
      let CategoryType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.CategoryType(), &key)
      } else {
        self.CategoryType()
      };
      let RefreshGroup = self.RefreshGroup();
      let Prob = self.Prob();
    let BuyReportEventName = self.BuyReportEventName().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    EventContentShopRefreshExcelT {
      EventContentId,
      Id,
      LocalizeEtcId,
      IsLegacy,
      GoodsId,
      DisplayOrder,
      CategoryType,
      RefreshGroup,
      Prob,
      BuyReportEventName,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentShopRefreshExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentShopRefreshExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EventContentShopRefreshExcel::VT_LOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsLegacy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EventContentShopRefreshExcel::VT_ISLEGACY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn GoodsId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentShopRefreshExcel::VT_GOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DisplayOrder(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentShopRefreshExcel::VT_DISPLAYORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CategoryType(&self) -> ShopCategoryType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ShopCategoryType>(EventContentShopRefreshExcel::VT_CATEGORYTYPE, Some(ShopCategoryType::General)).unwrap()}
  }
  #[inline]
  pub fn RefreshGroup(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentShopRefreshExcel::VT_REFRESHGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Prob(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EventContentShopRefreshExcel::VT_PROB, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuyReportEventName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EventContentShopRefreshExcel::VT_BUYREPORTEVENTNAME, None)}
  }
}

impl flatbuffers::Verifiable for EventContentShopRefreshExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<u32>("LocalizeEtcId", Self::VT_LOCALIZEETCID, false)?
     .visit_field::<bool>("IsLegacy", Self::VT_ISLEGACY, false)?
     .visit_field::<i64>("GoodsId", Self::VT_GOODSID, false)?
     .visit_field::<i64>("DisplayOrder", Self::VT_DISPLAYORDER, false)?
     .visit_field::<ShopCategoryType>("CategoryType", Self::VT_CATEGORYTYPE, false)?
     .visit_field::<i32>("RefreshGroup", Self::VT_REFRESHGROUP, false)?
     .visit_field::<i32>("Prob", Self::VT_PROB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("BuyReportEventName", Self::VT_BUYREPORTEVENTNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentShopRefreshExcelArgs<'a> {
    pub EventContentId: i64,
    pub Id: i64,
    pub LocalizeEtcId: u32,
    pub IsLegacy: bool,
    pub GoodsId: i64,
    pub DisplayOrder: i64,
    pub CategoryType: ShopCategoryType,
    pub RefreshGroup: i32,
    pub Prob: i32,
    pub BuyReportEventName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventContentShopRefreshExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventContentShopRefreshExcelArgs {
      EventContentId: 0,
      Id: 0,
      LocalizeEtcId: 0,
      IsLegacy: false,
      GoodsId: 0,
      DisplayOrder: 0,
      CategoryType: ShopCategoryType::General,
      RefreshGroup: 0,
      Prob: 0,
      BuyReportEventName: None,
    }
  }
}

impl Serialize for EventContentShopRefreshExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentShopRefreshExcel", 10)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("LocalizeEtcId", &self.LocalizeEtcId())?;
      s.serialize_field("IsLegacy", &self.IsLegacy())?;
      s.serialize_field("GoodsId", &self.GoodsId())?;
      s.serialize_field("DisplayOrder", &self.DisplayOrder())?;
      s.serialize_field("CategoryType", &self.CategoryType())?;
      s.serialize_field("RefreshGroup", &self.RefreshGroup())?;
      s.serialize_field("Prob", &self.Prob())?;
      if let Some(f) = self.BuyReportEventName() {
        s.serialize_field("BuyReportEventName", &f)?;
      } else {
        s.skip_field("BuyReportEventName")?;
      }
    s.end()
  }
}

pub struct EventContentShopRefreshExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentShopRefreshExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentShopRefreshExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(EventContentShopRefreshExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_LocalizeEtcId(&mut self, LocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(EventContentShopRefreshExcel::VT_LOCALIZEETCID, LocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_IsLegacy(&mut self, IsLegacy: bool) {
    self.fbb_.push_slot::<bool>(EventContentShopRefreshExcel::VT_ISLEGACY, IsLegacy, false);
  }
  #[inline]
  pub fn add_GoodsId(&mut self, GoodsId: i64) {
    self.fbb_.push_slot::<i64>(EventContentShopRefreshExcel::VT_GOODSID, GoodsId, 0);
  }
  #[inline]
  pub fn add_DisplayOrder(&mut self, DisplayOrder: i64) {
    self.fbb_.push_slot::<i64>(EventContentShopRefreshExcel::VT_DISPLAYORDER, DisplayOrder, 0);
  }
  #[inline]
  pub fn add_CategoryType(&mut self, CategoryType: ShopCategoryType) {
    self.fbb_.push_slot::<ShopCategoryType>(EventContentShopRefreshExcel::VT_CATEGORYTYPE, CategoryType, ShopCategoryType::General);
  }
  #[inline]
  pub fn add_RefreshGroup(&mut self, RefreshGroup: i32) {
    self.fbb_.push_slot::<i32>(EventContentShopRefreshExcel::VT_REFRESHGROUP, RefreshGroup, 0);
  }
  #[inline]
  pub fn add_Prob(&mut self, Prob: i32) {
    self.fbb_.push_slot::<i32>(EventContentShopRefreshExcel::VT_PROB, Prob, 0);
  }
  #[inline]
  pub fn add_BuyReportEventName(&mut self, BuyReportEventName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventContentShopRefreshExcel::VT_BUYREPORTEVENTNAME, BuyReportEventName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentShopRefreshExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentShopRefreshExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentShopRefreshExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentShopRefreshExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentShopRefreshExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("Id", &self.Id());
      ds.field("LocalizeEtcId", &self.LocalizeEtcId());
      ds.field("IsLegacy", &self.IsLegacy());
      ds.field("GoodsId", &self.GoodsId());
      ds.field("DisplayOrder", &self.DisplayOrder());
      ds.field("CategoryType", &self.CategoryType());
      ds.field("RefreshGroup", &self.RefreshGroup());
      ds.field("Prob", &self.Prob());
      ds.field("BuyReportEventName", &self.BuyReportEventName());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentShopRefreshExcelT {
  pub EventContentId: i64,
  pub Id: i64,
  pub LocalizeEtcId: u32,
  pub IsLegacy: bool,
  pub GoodsId: i64,
  pub DisplayOrder: i64,
  pub CategoryType: ShopCategoryType,
  pub RefreshGroup: i32,
  pub Prob: i32,
  pub BuyReportEventName: Option<String>,
}
impl Default for EventContentShopRefreshExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      Id: 0,
      LocalizeEtcId: 0,
      IsLegacy: false,
      GoodsId: 0,
      DisplayOrder: 0,
      CategoryType: ShopCategoryType::General,
      RefreshGroup: 0,
      Prob: 0,
      BuyReportEventName: None,
    }
  }
}
impl EventContentShopRefreshExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentShopRefreshExcel<'b>> {
    let EventContentId = self.EventContentId;
    let Id = self.Id;
    let LocalizeEtcId = self.LocalizeEtcId;
    let IsLegacy = self.IsLegacy;
    let GoodsId = self.GoodsId;
    let DisplayOrder = self.DisplayOrder;
    let CategoryType = self.CategoryType;
    let RefreshGroup = self.RefreshGroup;
    let Prob = self.Prob;
    let BuyReportEventName = self.BuyReportEventName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EventContentShopRefreshExcel::create(_fbb, &EventContentShopRefreshExcelArgs{
      EventContentId,
      Id,
      LocalizeEtcId,
      IsLegacy,
      GoodsId,
      DisplayOrder,
      CategoryType,
      RefreshGroup,
      Prob,
      BuyReportEventName,
    })
  }
}
