// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_WORLD_RAID_DIFFICULTY: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_WORLD_RAID_DIFFICULTY: i32 = 7;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_WORLD_RAID_DIFFICULTY: [WorldRaidDifficulty; 8] = [
  WorldRaidDifficulty::None,
  WorldRaidDifficulty::A,
  WorldRaidDifficulty::B,
  WorldRaidDifficulty::C,
  WorldRaidDifficulty::D,
  WorldRaidDifficulty::E,
  WorldRaidDifficulty::F,
  WorldRaidDifficulty::G,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct WorldRaidDifficulty(pub i32);
#[allow(non_upper_case_globals)]
impl WorldRaidDifficulty {
  pub const None: Self = Self(0);
  pub const A: Self = Self(1);
  pub const B: Self = Self(2);
  pub const C: Self = Self(3);
  pub const D: Self = Self(4);
  pub const E: Self = Self(5);
  pub const F: Self = Self(6);
  pub const G: Self = Self(7);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 7;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::A,
    Self::B,
    Self::C,
    Self::D,
    Self::E,
    Self::F,
    Self::G,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::A => Some("A"),
      Self::B => Some("B"),
      Self::C => Some("C"),
      Self::D => Some("D"),
      Self::E => Some("E"),
      Self::F => Some("F"),
      Self::G => Some("G"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for WorldRaidDifficulty {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl Serialize for WorldRaidDifficulty {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    serializer.serialize_unit_variant("WorldRaidDifficulty", self.0 as u32, self.variant_name().unwrap())
  }
}

impl<'a> flatbuffers::Follow<'a> for WorldRaidDifficulty {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for WorldRaidDifficulty {
    type Output = WorldRaidDifficulty;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for WorldRaidDifficulty {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for WorldRaidDifficulty {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for WorldRaidDifficulty {}
