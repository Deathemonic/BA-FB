// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TacticArenaSimulatorSettingExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TacticArenaSimulatorSettingExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TacticArenaSimulatorSettingExcel<'a> {
  type Inner = TacticArenaSimulatorSettingExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TacticArenaSimulatorSettingExcel<'a> {
  pub const VT_ORDER: flatbuffers::VOffsetT = 4;
  pub const VT_REPEAT: flatbuffers::VOffsetT = 6;
  pub const VT_ATTACKERFROM: flatbuffers::VOffsetT = 8;
  pub const VT_ATTACKERUSERARENAGROUP: flatbuffers::VOffsetT = 10;
  pub const VT_ATTACKERUSERARENARANK: flatbuffers::VOffsetT = 12;
  pub const VT_ATTACKERPRESETGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_ATTACKERSTRIKERNUM: flatbuffers::VOffsetT = 16;
  pub const VT_ATTACKERSPECIALNUM: flatbuffers::VOffsetT = 18;
  pub const VT_DEFENDERFROM: flatbuffers::VOffsetT = 20;
  pub const VT_DEFENDERUSERARENAGROUP: flatbuffers::VOffsetT = 22;
  pub const VT_DEFENDERUSERARENARANK: flatbuffers::VOffsetT = 24;
  pub const VT_DEFENDERPRESETGROUPID: flatbuffers::VOffsetT = 26;
  pub const VT_DEFENDERSTRIKERNUM: flatbuffers::VOffsetT = 28;
  pub const VT_DEFENDERSPECIALNUM: flatbuffers::VOffsetT = 30;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TacticArenaSimulatorSettingExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TacticArenaSimulatorSettingExcelArgs
  ) -> flatbuffers::WIPOffset<TacticArenaSimulatorSettingExcel<'bldr>> {
    let mut builder = TacticArenaSimulatorSettingExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TacticArenaSimulatorSetting");
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.DefenderSpecialNum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefenderSpecialNum(x);
      let x = args.DefenderStrikerNum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefenderStrikerNum(x);
      let x = args.DefenderPresetGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefenderPresetGroupId(x);
      let x = args.DefenderUserArenaRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefenderUserArenaRank(x);
      let x = args.DefenderUserArenaGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DefenderUserArenaGroup(x);
      let x = args.AttackerSpecialNum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackerSpecialNum(x);
      let x = args.AttackerStrikerNum;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackerStrikerNum(x);
      let x = args.AttackerPresetGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackerPresetGroupId(x);
      let x = args.AttackerUserArenaRank;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackerUserArenaRank(x);
      let x = args.AttackerUserArenaGroup;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_AttackerUserArenaGroup(x);
      let x = args.Repeat;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Repeat(x);
      let x = args.Order;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Order(x);
      let x = args.DefenderFrom;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_DefenderFrom(x);
      let x = args.AttackerFrom;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_AttackerFrom(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TacticArenaSimulatorSettingExcelT {
    let key = table_encryption_service::create_key(b"TacticArenaSimulatorSetting");
      let Order = self.Order();
      let Repeat = self.Repeat();
      let AttackerFrom = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.AttackerFrom(), &key)
      } else {
        self.AttackerFrom()
      };
      let AttackerUserArenaGroup = self.AttackerUserArenaGroup();
      let AttackerUserArenaRank = self.AttackerUserArenaRank();
      let AttackerPresetGroupId = self.AttackerPresetGroupId();
      let AttackerStrikerNum = self.AttackerStrikerNum();
      let AttackerSpecialNum = self.AttackerSpecialNum();
      let DefenderFrom = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.DefenderFrom(), &key)
      } else {
        self.DefenderFrom()
      };
      let DefenderUserArenaGroup = self.DefenderUserArenaGroup();
      let DefenderUserArenaRank = self.DefenderUserArenaRank();
      let DefenderPresetGroupId = self.DefenderPresetGroupId();
      let DefenderStrikerNum = self.DefenderStrikerNum();
      let DefenderSpecialNum = self.DefenderSpecialNum();
      let GroundId = self.GroundId();
    TacticArenaSimulatorSettingExcelT {
      Order,
      Repeat,
      AttackerFrom,
      AttackerUserArenaGroup,
      AttackerUserArenaRank,
      AttackerPresetGroupId,
      AttackerStrikerNum,
      AttackerSpecialNum,
      DefenderFrom,
      DefenderUserArenaGroup,
      DefenderUserArenaRank,
      DefenderPresetGroupId,
      DefenderStrikerNum,
      DefenderSpecialNum,
      GroundId,
    }
  }

  #[inline]
  pub fn Order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Repeat(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_REPEAT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackerFrom(&self) -> ArenaSimulatorServer {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ArenaSimulatorServer>(TacticArenaSimulatorSettingExcel::VT_ATTACKERFROM, Some(ArenaSimulatorServer::Preset)).unwrap()}
  }
  #[inline]
  pub fn AttackerUserArenaGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERUSERARENAGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackerUserArenaRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERUSERARENARANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackerPresetGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERPRESETGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackerStrikerNum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERSTRIKERNUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AttackerSpecialNum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERSPECIALNUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefenderFrom(&self) -> ArenaSimulatorServer {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ArenaSimulatorServer>(TacticArenaSimulatorSettingExcel::VT_DEFENDERFROM, Some(ArenaSimulatorServer::Preset)).unwrap()}
  }
  #[inline]
  pub fn DefenderUserArenaGroup(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERUSERARENAGROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefenderUserArenaRank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERUSERARENARANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefenderPresetGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERPRESETGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefenderStrikerNum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERSTRIKERNUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DefenderSpecialNum(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERSPECIALNUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TacticArenaSimulatorSettingExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TacticArenaSimulatorSettingExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Order", Self::VT_ORDER, false)?
     .visit_field::<i64>("Repeat", Self::VT_REPEAT, false)?
     .visit_field::<ArenaSimulatorServer>("AttackerFrom", Self::VT_ATTACKERFROM, false)?
     .visit_field::<i64>("AttackerUserArenaGroup", Self::VT_ATTACKERUSERARENAGROUP, false)?
     .visit_field::<i64>("AttackerUserArenaRank", Self::VT_ATTACKERUSERARENARANK, false)?
     .visit_field::<i64>("AttackerPresetGroupId", Self::VT_ATTACKERPRESETGROUPID, false)?
     .visit_field::<i64>("AttackerStrikerNum", Self::VT_ATTACKERSTRIKERNUM, false)?
     .visit_field::<i64>("AttackerSpecialNum", Self::VT_ATTACKERSPECIALNUM, false)?
     .visit_field::<ArenaSimulatorServer>("DefenderFrom", Self::VT_DEFENDERFROM, false)?
     .visit_field::<i64>("DefenderUserArenaGroup", Self::VT_DEFENDERUSERARENAGROUP, false)?
     .visit_field::<i64>("DefenderUserArenaRank", Self::VT_DEFENDERUSERARENARANK, false)?
     .visit_field::<i64>("DefenderPresetGroupId", Self::VT_DEFENDERPRESETGROUPID, false)?
     .visit_field::<i64>("DefenderStrikerNum", Self::VT_DEFENDERSTRIKERNUM, false)?
     .visit_field::<i64>("DefenderSpecialNum", Self::VT_DEFENDERSPECIALNUM, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .finish();
    Ok(())
  }
}
pub struct TacticArenaSimulatorSettingExcelArgs {
    pub Order: i64,
    pub Repeat: i64,
    pub AttackerFrom: ArenaSimulatorServer,
    pub AttackerUserArenaGroup: i64,
    pub AttackerUserArenaRank: i64,
    pub AttackerPresetGroupId: i64,
    pub AttackerStrikerNum: i64,
    pub AttackerSpecialNum: i64,
    pub DefenderFrom: ArenaSimulatorServer,
    pub DefenderUserArenaGroup: i64,
    pub DefenderUserArenaRank: i64,
    pub DefenderPresetGroupId: i64,
    pub DefenderStrikerNum: i64,
    pub DefenderSpecialNum: i64,
    pub GroundId: i64,
}
impl<'a> Default for TacticArenaSimulatorSettingExcelArgs {
  #[inline]
  fn default() -> Self {
    TacticArenaSimulatorSettingExcelArgs {
      Order: 0,
      Repeat: 0,
      AttackerFrom: ArenaSimulatorServer::Preset,
      AttackerUserArenaGroup: 0,
      AttackerUserArenaRank: 0,
      AttackerPresetGroupId: 0,
      AttackerStrikerNum: 0,
      AttackerSpecialNum: 0,
      DefenderFrom: ArenaSimulatorServer::Preset,
      DefenderUserArenaGroup: 0,
      DefenderUserArenaRank: 0,
      DefenderPresetGroupId: 0,
      DefenderStrikerNum: 0,
      DefenderSpecialNum: 0,
      GroundId: 0,
    }
  }
}

impl Serialize for TacticArenaSimulatorSettingExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TacticArenaSimulatorSettingExcel", 15)?;
      s.serialize_field("Order", &self.Order())?;
      s.serialize_field("Repeat", &self.Repeat())?;
      s.serialize_field("AttackerFrom", &self.AttackerFrom())?;
      s.serialize_field("AttackerUserArenaGroup", &self.AttackerUserArenaGroup())?;
      s.serialize_field("AttackerUserArenaRank", &self.AttackerUserArenaRank())?;
      s.serialize_field("AttackerPresetGroupId", &self.AttackerPresetGroupId())?;
      s.serialize_field("AttackerStrikerNum", &self.AttackerStrikerNum())?;
      s.serialize_field("AttackerSpecialNum", &self.AttackerSpecialNum())?;
      s.serialize_field("DefenderFrom", &self.DefenderFrom())?;
      s.serialize_field("DefenderUserArenaGroup", &self.DefenderUserArenaGroup())?;
      s.serialize_field("DefenderUserArenaRank", &self.DefenderUserArenaRank())?;
      s.serialize_field("DefenderPresetGroupId", &self.DefenderPresetGroupId())?;
      s.serialize_field("DefenderStrikerNum", &self.DefenderStrikerNum())?;
      s.serialize_field("DefenderSpecialNum", &self.DefenderSpecialNum())?;
      s.serialize_field("GroundId", &self.GroundId())?;
    s.end()
  }
}

pub struct TacticArenaSimulatorSettingExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TacticArenaSimulatorSettingExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Order(&mut self, Order: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_ORDER, Order, 0);
  }
  #[inline]
  pub fn add_Repeat(&mut self, Repeat: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_REPEAT, Repeat, 0);
  }
  #[inline]
  pub fn add_AttackerFrom(&mut self, AttackerFrom: ArenaSimulatorServer) {
    self.fbb_.push_slot::<ArenaSimulatorServer>(TacticArenaSimulatorSettingExcel::VT_ATTACKERFROM, AttackerFrom, ArenaSimulatorServer::Preset);
  }
  #[inline]
  pub fn add_AttackerUserArenaGroup(&mut self, AttackerUserArenaGroup: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERUSERARENAGROUP, AttackerUserArenaGroup, 0);
  }
  #[inline]
  pub fn add_AttackerUserArenaRank(&mut self, AttackerUserArenaRank: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERUSERARENARANK, AttackerUserArenaRank, 0);
  }
  #[inline]
  pub fn add_AttackerPresetGroupId(&mut self, AttackerPresetGroupId: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERPRESETGROUPID, AttackerPresetGroupId, 0);
  }
  #[inline]
  pub fn add_AttackerStrikerNum(&mut self, AttackerStrikerNum: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERSTRIKERNUM, AttackerStrikerNum, 0);
  }
  #[inline]
  pub fn add_AttackerSpecialNum(&mut self, AttackerSpecialNum: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_ATTACKERSPECIALNUM, AttackerSpecialNum, 0);
  }
  #[inline]
  pub fn add_DefenderFrom(&mut self, DefenderFrom: ArenaSimulatorServer) {
    self.fbb_.push_slot::<ArenaSimulatorServer>(TacticArenaSimulatorSettingExcel::VT_DEFENDERFROM, DefenderFrom, ArenaSimulatorServer::Preset);
  }
  #[inline]
  pub fn add_DefenderUserArenaGroup(&mut self, DefenderUserArenaGroup: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERUSERARENAGROUP, DefenderUserArenaGroup, 0);
  }
  #[inline]
  pub fn add_DefenderUserArenaRank(&mut self, DefenderUserArenaRank: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERUSERARENARANK, DefenderUserArenaRank, 0);
  }
  #[inline]
  pub fn add_DefenderPresetGroupId(&mut self, DefenderPresetGroupId: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERPRESETGROUPID, DefenderPresetGroupId, 0);
  }
  #[inline]
  pub fn add_DefenderStrikerNum(&mut self, DefenderStrikerNum: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERSTRIKERNUM, DefenderStrikerNum, 0);
  }
  #[inline]
  pub fn add_DefenderSpecialNum(&mut self, DefenderSpecialNum: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_DEFENDERSPECIALNUM, DefenderSpecialNum, 0);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(TacticArenaSimulatorSettingExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TacticArenaSimulatorSettingExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TacticArenaSimulatorSettingExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TacticArenaSimulatorSettingExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TacticArenaSimulatorSettingExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TacticArenaSimulatorSettingExcel");
      ds.field("Order", &self.Order());
      ds.field("Repeat", &self.Repeat());
      ds.field("AttackerFrom", &self.AttackerFrom());
      ds.field("AttackerUserArenaGroup", &self.AttackerUserArenaGroup());
      ds.field("AttackerUserArenaRank", &self.AttackerUserArenaRank());
      ds.field("AttackerPresetGroupId", &self.AttackerPresetGroupId());
      ds.field("AttackerStrikerNum", &self.AttackerStrikerNum());
      ds.field("AttackerSpecialNum", &self.AttackerSpecialNum());
      ds.field("DefenderFrom", &self.DefenderFrom());
      ds.field("DefenderUserArenaGroup", &self.DefenderUserArenaGroup());
      ds.field("DefenderUserArenaRank", &self.DefenderUserArenaRank());
      ds.field("DefenderPresetGroupId", &self.DefenderPresetGroupId());
      ds.field("DefenderStrikerNum", &self.DefenderStrikerNum());
      ds.field("DefenderSpecialNum", &self.DefenderSpecialNum());
      ds.field("GroundId", &self.GroundId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TacticArenaSimulatorSettingExcelT {
  pub Order: i64,
  pub Repeat: i64,
  pub AttackerFrom: ArenaSimulatorServer,
  pub AttackerUserArenaGroup: i64,
  pub AttackerUserArenaRank: i64,
  pub AttackerPresetGroupId: i64,
  pub AttackerStrikerNum: i64,
  pub AttackerSpecialNum: i64,
  pub DefenderFrom: ArenaSimulatorServer,
  pub DefenderUserArenaGroup: i64,
  pub DefenderUserArenaRank: i64,
  pub DefenderPresetGroupId: i64,
  pub DefenderStrikerNum: i64,
  pub DefenderSpecialNum: i64,
  pub GroundId: i64,
}
impl Default for TacticArenaSimulatorSettingExcelT {
  fn default() -> Self {
    Self {
      Order: 0,
      Repeat: 0,
      AttackerFrom: ArenaSimulatorServer::Preset,
      AttackerUserArenaGroup: 0,
      AttackerUserArenaRank: 0,
      AttackerPresetGroupId: 0,
      AttackerStrikerNum: 0,
      AttackerSpecialNum: 0,
      DefenderFrom: ArenaSimulatorServer::Preset,
      DefenderUserArenaGroup: 0,
      DefenderUserArenaRank: 0,
      DefenderPresetGroupId: 0,
      DefenderStrikerNum: 0,
      DefenderSpecialNum: 0,
      GroundId: 0,
    }
  }
}
impl TacticArenaSimulatorSettingExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TacticArenaSimulatorSettingExcel<'b>> {
    let Order = self.Order;
    let Repeat = self.Repeat;
    let AttackerFrom = self.AttackerFrom;
    let AttackerUserArenaGroup = self.AttackerUserArenaGroup;
    let AttackerUserArenaRank = self.AttackerUserArenaRank;
    let AttackerPresetGroupId = self.AttackerPresetGroupId;
    let AttackerStrikerNum = self.AttackerStrikerNum;
    let AttackerSpecialNum = self.AttackerSpecialNum;
    let DefenderFrom = self.DefenderFrom;
    let DefenderUserArenaGroup = self.DefenderUserArenaGroup;
    let DefenderUserArenaRank = self.DefenderUserArenaRank;
    let DefenderPresetGroupId = self.DefenderPresetGroupId;
    let DefenderStrikerNum = self.DefenderStrikerNum;
    let DefenderSpecialNum = self.DefenderSpecialNum;
    let GroundId = self.GroundId;
    TacticArenaSimulatorSettingExcel::create(_fbb, &TacticArenaSimulatorSettingExcelArgs{
      Order,
      Repeat,
      AttackerFrom,
      AttackerUserArenaGroup,
      AttackerUserArenaRank,
      AttackerPresetGroupId,
      AttackerStrikerNum,
      AttackerSpecialNum,
      DefenderFrom,
      DefenderUserArenaGroup,
      DefenderUserArenaRank,
      DefenderPresetGroupId,
      DefenderStrikerNum,
      DefenderSpecialNum,
      GroundId,
    })
  }
}
