// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CharacterVictoryInteractionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterVictoryInteractionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterVictoryInteractionExcel<'a> {
  type Inner = CharacterVictoryInteractionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterVictoryInteractionExcel<'a> {
  pub const VT_INTERACTIONID: flatbuffers::VOffsetT = 4;
  pub const VT_COSTUMEID01: flatbuffers::VOffsetT = 6;
  pub const VT_POSITIONINDEX01: flatbuffers::VOffsetT = 8;
  pub const VT_VICTORYSTARTANIMATIONPATH01: flatbuffers::VOffsetT = 10;
  pub const VT_VICTORYENDANIMATIONPATH01: flatbuffers::VOffsetT = 12;
  pub const VT_VOICEEVENT01: flatbuffers::VOffsetT = 14;
  pub const VT_COSTUMEID02: flatbuffers::VOffsetT = 16;
  pub const VT_POSITIONINDEX02: flatbuffers::VOffsetT = 18;
  pub const VT_VICTORYSTARTANIMATIONPATH02: flatbuffers::VOffsetT = 20;
  pub const VT_VICTORYENDANIMATIONPATH02: flatbuffers::VOffsetT = 22;
  pub const VT_VOICEEVENT02: flatbuffers::VOffsetT = 24;
  pub const VT_COSTUMEID03: flatbuffers::VOffsetT = 26;
  pub const VT_POSITIONINDEX03: flatbuffers::VOffsetT = 28;
  pub const VT_VICTORYSTARTANIMATIONPATH03: flatbuffers::VOffsetT = 30;
  pub const VT_VICTORYENDANIMATIONPATH03: flatbuffers::VOffsetT = 32;
  pub const VT_VOICEEVENT03: flatbuffers::VOffsetT = 34;
  pub const VT_COSTUMEID04: flatbuffers::VOffsetT = 36;
  pub const VT_POSITIONINDEX04: flatbuffers::VOffsetT = 38;
  pub const VT_VICTORYSTARTANIMATIONPATH04: flatbuffers::VOffsetT = 40;
  pub const VT_VICTORYENDANIMATIONPATH04: flatbuffers::VOffsetT = 42;
  pub const VT_VOICEEVENT04: flatbuffers::VOffsetT = 44;
  pub const VT_COSTUMEID05: flatbuffers::VOffsetT = 46;
  pub const VT_POSITIONINDEX05: flatbuffers::VOffsetT = 48;
  pub const VT_VICTORYSTARTANIMATIONPATH05: flatbuffers::VOffsetT = 50;
  pub const VT_VICTORYENDANIMATIONPATH05: flatbuffers::VOffsetT = 52;
  pub const VT_VOICEEVENT05: flatbuffers::VOffsetT = 54;
  pub const VT_COSTUMEID06: flatbuffers::VOffsetT = 56;
  pub const VT_POSITIONINDEX06: flatbuffers::VOffsetT = 58;
  pub const VT_VICTORYSTARTANIMATIONPATH06: flatbuffers::VOffsetT = 60;
  pub const VT_VICTORYENDANIMATIONPATH06: flatbuffers::VOffsetT = 62;
  pub const VT_VOICEEVENT06: flatbuffers::VOffsetT = 64;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterVictoryInteractionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterVictoryInteractionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterVictoryInteractionExcel<'bldr>> {
    let mut builder = CharacterVictoryInteractionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CharacterVictoryInteraction");
      let x = args.CostumeId06;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeId06(x);
      let x = args.CostumeId05;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeId05(x);
      let x = args.CostumeId04;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeId04(x);
      let x = args.CostumeId03;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeId03(x);
      let x = args.CostumeId02;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeId02(x);
      let x = args.CostumeId01;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_CostumeId01(x);
      let x = args.InteractionId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_InteractionId(x);
      let x = args.VoiceEvent06;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceEvent06(x);
      if let Some(x) = args.VictoryEndAnimationPath06 {
        builder.add_VictoryEndAnimationPath06(x);
      }
      if let Some(x) = args.VictoryStartAnimationPath06 {
        builder.add_VictoryStartAnimationPath06(x);
      }
      let x = args.PositionIndex06;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PositionIndex06(x);
      let x = args.VoiceEvent05;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceEvent05(x);
      if let Some(x) = args.VictoryEndAnimationPath05 {
        builder.add_VictoryEndAnimationPath05(x);
      }
      if let Some(x) = args.VictoryStartAnimationPath05 {
        builder.add_VictoryStartAnimationPath05(x);
      }
      let x = args.PositionIndex05;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PositionIndex05(x);
      let x = args.VoiceEvent04;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceEvent04(x);
      if let Some(x) = args.VictoryEndAnimationPath04 {
        builder.add_VictoryEndAnimationPath04(x);
      }
      if let Some(x) = args.VictoryStartAnimationPath04 {
        builder.add_VictoryStartAnimationPath04(x);
      }
      let x = args.PositionIndex04;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PositionIndex04(x);
      let x = args.VoiceEvent03;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceEvent03(x);
      if let Some(x) = args.VictoryEndAnimationPath03 {
        builder.add_VictoryEndAnimationPath03(x);
      }
      if let Some(x) = args.VictoryStartAnimationPath03 {
        builder.add_VictoryStartAnimationPath03(x);
      }
      let x = args.PositionIndex03;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PositionIndex03(x);
      let x = args.VoiceEvent02;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceEvent02(x);
      if let Some(x) = args.VictoryEndAnimationPath02 {
        builder.add_VictoryEndAnimationPath02(x);
      }
      if let Some(x) = args.VictoryStartAnimationPath02 {
        builder.add_VictoryStartAnimationPath02(x);
      }
      let x = args.PositionIndex02;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PositionIndex02(x);
      let x = args.VoiceEvent01;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_VoiceEvent01(x);
      if let Some(x) = args.VictoryEndAnimationPath01 {
        builder.add_VictoryEndAnimationPath01(x);
      }
      if let Some(x) = args.VictoryStartAnimationPath01 {
        builder.add_VictoryStartAnimationPath01(x);
      }
      let x = args.PositionIndex01;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_PositionIndex01(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CharacterVictoryInteractionExcelT {
    let key = table_encryption_service::create_key(b"CharacterVictoryInteraction");
      let InteractionId = self.InteractionId();
      let CostumeId01 = self.CostumeId01();
      let PositionIndex01 = self.PositionIndex01();
    let VictoryStartAnimationPath01 = self.VictoryStartAnimationPath01().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VictoryEndAnimationPath01 = self.VictoryEndAnimationPath01().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceEvent01 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceEvent01(), &key)
      } else {
        self.VoiceEvent01()
      };
      let CostumeId02 = self.CostumeId02();
      let PositionIndex02 = self.PositionIndex02();
    let VictoryStartAnimationPath02 = self.VictoryStartAnimationPath02().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VictoryEndAnimationPath02 = self.VictoryEndAnimationPath02().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceEvent02 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceEvent02(), &key)
      } else {
        self.VoiceEvent02()
      };
      let CostumeId03 = self.CostumeId03();
      let PositionIndex03 = self.PositionIndex03();
    let VictoryStartAnimationPath03 = self.VictoryStartAnimationPath03().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VictoryEndAnimationPath03 = self.VictoryEndAnimationPath03().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceEvent03 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceEvent03(), &key)
      } else {
        self.VoiceEvent03()
      };
      let CostumeId04 = self.CostumeId04();
      let PositionIndex04 = self.PositionIndex04();
    let VictoryStartAnimationPath04 = self.VictoryStartAnimationPath04().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VictoryEndAnimationPath04 = self.VictoryEndAnimationPath04().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceEvent04 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceEvent04(), &key)
      } else {
        self.VoiceEvent04()
      };
      let CostumeId05 = self.CostumeId05();
      let PositionIndex05 = self.PositionIndex05();
    let VictoryStartAnimationPath05 = self.VictoryStartAnimationPath05().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VictoryEndAnimationPath05 = self.VictoryEndAnimationPath05().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceEvent05 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceEvent05(), &key)
      } else {
        self.VoiceEvent05()
      };
      let CostumeId06 = self.CostumeId06();
      let PositionIndex06 = self.PositionIndex06();
    let VictoryStartAnimationPath06 = self.VictoryStartAnimationPath06().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VictoryEndAnimationPath06 = self.VictoryEndAnimationPath06().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let VoiceEvent06 = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.VoiceEvent06(), &key)
      } else {
        self.VoiceEvent06()
      };
    CharacterVictoryInteractionExcelT {
      InteractionId,
      CostumeId01,
      PositionIndex01,
      VictoryStartAnimationPath01,
      VictoryEndAnimationPath01,
      VoiceEvent01,
      CostumeId02,
      PositionIndex02,
      VictoryStartAnimationPath02,
      VictoryEndAnimationPath02,
      VoiceEvent02,
      CostumeId03,
      PositionIndex03,
      VictoryStartAnimationPath03,
      VictoryEndAnimationPath03,
      VoiceEvent03,
      CostumeId04,
      PositionIndex04,
      VictoryStartAnimationPath04,
      VictoryEndAnimationPath04,
      VoiceEvent04,
      CostumeId05,
      PositionIndex05,
      VictoryStartAnimationPath05,
      VictoryEndAnimationPath05,
      VoiceEvent05,
      CostumeId06,
      PositionIndex06,
      VictoryStartAnimationPath06,
      VictoryEndAnimationPath06,
      VoiceEvent06,
    }
  }

  #[inline]
  pub fn InteractionId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVictoryInteractionExcel::VT_INTERACTIONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CostumeId01(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID01, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PositionIndex01(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX01, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VictoryStartAnimationPath01(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH01, None)}
  }
  #[inline]
  pub fn VictoryEndAnimationPath01(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH01, None)}
  }
  #[inline]
  pub fn VoiceEvent01(&self) -> VoiceEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT01, Some(VoiceEvent::OnTSA)).unwrap()}
  }
  #[inline]
  pub fn CostumeId02(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID02, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PositionIndex02(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX02, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VictoryStartAnimationPath02(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH02, None)}
  }
  #[inline]
  pub fn VictoryEndAnimationPath02(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH02, None)}
  }
  #[inline]
  pub fn VoiceEvent02(&self) -> VoiceEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT02, Some(VoiceEvent::OnTSA)).unwrap()}
  }
  #[inline]
  pub fn CostumeId03(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID03, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PositionIndex03(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX03, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VictoryStartAnimationPath03(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH03, None)}
  }
  #[inline]
  pub fn VictoryEndAnimationPath03(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH03, None)}
  }
  #[inline]
  pub fn VoiceEvent03(&self) -> VoiceEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT03, Some(VoiceEvent::OnTSA)).unwrap()}
  }
  #[inline]
  pub fn CostumeId04(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID04, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PositionIndex04(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX04, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VictoryStartAnimationPath04(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH04, None)}
  }
  #[inline]
  pub fn VictoryEndAnimationPath04(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH04, None)}
  }
  #[inline]
  pub fn VoiceEvent04(&self) -> VoiceEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT04, Some(VoiceEvent::OnTSA)).unwrap()}
  }
  #[inline]
  pub fn CostumeId05(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID05, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PositionIndex05(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX05, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VictoryStartAnimationPath05(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH05, None)}
  }
  #[inline]
  pub fn VictoryEndAnimationPath05(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH05, None)}
  }
  #[inline]
  pub fn VoiceEvent05(&self) -> VoiceEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT05, Some(VoiceEvent::OnTSA)).unwrap()}
  }
  #[inline]
  pub fn CostumeId06(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID06, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PositionIndex06(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX06, Some(0)).unwrap()}
  }
  #[inline]
  pub fn VictoryStartAnimationPath06(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH06, None)}
  }
  #[inline]
  pub fn VictoryEndAnimationPath06(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH06, None)}
  }
  #[inline]
  pub fn VoiceEvent06(&self) -> VoiceEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT06, Some(VoiceEvent::OnTSA)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterVictoryInteractionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("InteractionId", Self::VT_INTERACTIONID, false)?
     .visit_field::<i64>("CostumeId01", Self::VT_COSTUMEID01, false)?
     .visit_field::<i32>("PositionIndex01", Self::VT_POSITIONINDEX01, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryStartAnimationPath01", Self::VT_VICTORYSTARTANIMATIONPATH01, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryEndAnimationPath01", Self::VT_VICTORYENDANIMATIONPATH01, false)?
     .visit_field::<VoiceEvent>("VoiceEvent01", Self::VT_VOICEEVENT01, false)?
     .visit_field::<i64>("CostumeId02", Self::VT_COSTUMEID02, false)?
     .visit_field::<i32>("PositionIndex02", Self::VT_POSITIONINDEX02, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryStartAnimationPath02", Self::VT_VICTORYSTARTANIMATIONPATH02, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryEndAnimationPath02", Self::VT_VICTORYENDANIMATIONPATH02, false)?
     .visit_field::<VoiceEvent>("VoiceEvent02", Self::VT_VOICEEVENT02, false)?
     .visit_field::<i64>("CostumeId03", Self::VT_COSTUMEID03, false)?
     .visit_field::<i32>("PositionIndex03", Self::VT_POSITIONINDEX03, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryStartAnimationPath03", Self::VT_VICTORYSTARTANIMATIONPATH03, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryEndAnimationPath03", Self::VT_VICTORYENDANIMATIONPATH03, false)?
     .visit_field::<VoiceEvent>("VoiceEvent03", Self::VT_VOICEEVENT03, false)?
     .visit_field::<i64>("CostumeId04", Self::VT_COSTUMEID04, false)?
     .visit_field::<i32>("PositionIndex04", Self::VT_POSITIONINDEX04, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryStartAnimationPath04", Self::VT_VICTORYSTARTANIMATIONPATH04, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryEndAnimationPath04", Self::VT_VICTORYENDANIMATIONPATH04, false)?
     .visit_field::<VoiceEvent>("VoiceEvent04", Self::VT_VOICEEVENT04, false)?
     .visit_field::<i64>("CostumeId05", Self::VT_COSTUMEID05, false)?
     .visit_field::<i32>("PositionIndex05", Self::VT_POSITIONINDEX05, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryStartAnimationPath05", Self::VT_VICTORYSTARTANIMATIONPATH05, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryEndAnimationPath05", Self::VT_VICTORYENDANIMATIONPATH05, false)?
     .visit_field::<VoiceEvent>("VoiceEvent05", Self::VT_VOICEEVENT05, false)?
     .visit_field::<i64>("CostumeId06", Self::VT_COSTUMEID06, false)?
     .visit_field::<i32>("PositionIndex06", Self::VT_POSITIONINDEX06, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryStartAnimationPath06", Self::VT_VICTORYSTARTANIMATIONPATH06, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("VictoryEndAnimationPath06", Self::VT_VICTORYENDANIMATIONPATH06, false)?
     .visit_field::<VoiceEvent>("VoiceEvent06", Self::VT_VOICEEVENT06, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterVictoryInteractionExcelArgs<'a> {
    pub InteractionId: i64,
    pub CostumeId01: i64,
    pub PositionIndex01: i32,
    pub VictoryStartAnimationPath01: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VictoryEndAnimationPath01: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceEvent01: VoiceEvent,
    pub CostumeId02: i64,
    pub PositionIndex02: i32,
    pub VictoryStartAnimationPath02: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VictoryEndAnimationPath02: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceEvent02: VoiceEvent,
    pub CostumeId03: i64,
    pub PositionIndex03: i32,
    pub VictoryStartAnimationPath03: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VictoryEndAnimationPath03: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceEvent03: VoiceEvent,
    pub CostumeId04: i64,
    pub PositionIndex04: i32,
    pub VictoryStartAnimationPath04: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VictoryEndAnimationPath04: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceEvent04: VoiceEvent,
    pub CostumeId05: i64,
    pub PositionIndex05: i32,
    pub VictoryStartAnimationPath05: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VictoryEndAnimationPath05: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceEvent05: VoiceEvent,
    pub CostumeId06: i64,
    pub PositionIndex06: i32,
    pub VictoryStartAnimationPath06: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VictoryEndAnimationPath06: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VoiceEvent06: VoiceEvent,
}
impl<'a> Default for CharacterVictoryInteractionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterVictoryInteractionExcelArgs {
      InteractionId: 0,
      CostumeId01: 0,
      PositionIndex01: 0,
      VictoryStartAnimationPath01: None,
      VictoryEndAnimationPath01: None,
      VoiceEvent01: VoiceEvent::OnTSA,
      CostumeId02: 0,
      PositionIndex02: 0,
      VictoryStartAnimationPath02: None,
      VictoryEndAnimationPath02: None,
      VoiceEvent02: VoiceEvent::OnTSA,
      CostumeId03: 0,
      PositionIndex03: 0,
      VictoryStartAnimationPath03: None,
      VictoryEndAnimationPath03: None,
      VoiceEvent03: VoiceEvent::OnTSA,
      CostumeId04: 0,
      PositionIndex04: 0,
      VictoryStartAnimationPath04: None,
      VictoryEndAnimationPath04: None,
      VoiceEvent04: VoiceEvent::OnTSA,
      CostumeId05: 0,
      PositionIndex05: 0,
      VictoryStartAnimationPath05: None,
      VictoryEndAnimationPath05: None,
      VoiceEvent05: VoiceEvent::OnTSA,
      CostumeId06: 0,
      PositionIndex06: 0,
      VictoryStartAnimationPath06: None,
      VictoryEndAnimationPath06: None,
      VoiceEvent06: VoiceEvent::OnTSA,
    }
  }
}

impl Serialize for CharacterVictoryInteractionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CharacterVictoryInteractionExcel", 31)?;
      s.serialize_field("InteractionId", &self.InteractionId())?;
      s.serialize_field("CostumeId01", &self.CostumeId01())?;
      s.serialize_field("PositionIndex01", &self.PositionIndex01())?;
      if let Some(f) = self.VictoryStartAnimationPath01() {
        s.serialize_field("VictoryStartAnimationPath01", &f)?;
      } else {
        s.skip_field("VictoryStartAnimationPath01")?;
      }
      if let Some(f) = self.VictoryEndAnimationPath01() {
        s.serialize_field("VictoryEndAnimationPath01", &f)?;
      } else {
        s.skip_field("VictoryEndAnimationPath01")?;
      }
      s.serialize_field("VoiceEvent01", &self.VoiceEvent01())?;
      s.serialize_field("CostumeId02", &self.CostumeId02())?;
      s.serialize_field("PositionIndex02", &self.PositionIndex02())?;
      if let Some(f) = self.VictoryStartAnimationPath02() {
        s.serialize_field("VictoryStartAnimationPath02", &f)?;
      } else {
        s.skip_field("VictoryStartAnimationPath02")?;
      }
      if let Some(f) = self.VictoryEndAnimationPath02() {
        s.serialize_field("VictoryEndAnimationPath02", &f)?;
      } else {
        s.skip_field("VictoryEndAnimationPath02")?;
      }
      s.serialize_field("VoiceEvent02", &self.VoiceEvent02())?;
      s.serialize_field("CostumeId03", &self.CostumeId03())?;
      s.serialize_field("PositionIndex03", &self.PositionIndex03())?;
      if let Some(f) = self.VictoryStartAnimationPath03() {
        s.serialize_field("VictoryStartAnimationPath03", &f)?;
      } else {
        s.skip_field("VictoryStartAnimationPath03")?;
      }
      if let Some(f) = self.VictoryEndAnimationPath03() {
        s.serialize_field("VictoryEndAnimationPath03", &f)?;
      } else {
        s.skip_field("VictoryEndAnimationPath03")?;
      }
      s.serialize_field("VoiceEvent03", &self.VoiceEvent03())?;
      s.serialize_field("CostumeId04", &self.CostumeId04())?;
      s.serialize_field("PositionIndex04", &self.PositionIndex04())?;
      if let Some(f) = self.VictoryStartAnimationPath04() {
        s.serialize_field("VictoryStartAnimationPath04", &f)?;
      } else {
        s.skip_field("VictoryStartAnimationPath04")?;
      }
      if let Some(f) = self.VictoryEndAnimationPath04() {
        s.serialize_field("VictoryEndAnimationPath04", &f)?;
      } else {
        s.skip_field("VictoryEndAnimationPath04")?;
      }
      s.serialize_field("VoiceEvent04", &self.VoiceEvent04())?;
      s.serialize_field("CostumeId05", &self.CostumeId05())?;
      s.serialize_field("PositionIndex05", &self.PositionIndex05())?;
      if let Some(f) = self.VictoryStartAnimationPath05() {
        s.serialize_field("VictoryStartAnimationPath05", &f)?;
      } else {
        s.skip_field("VictoryStartAnimationPath05")?;
      }
      if let Some(f) = self.VictoryEndAnimationPath05() {
        s.serialize_field("VictoryEndAnimationPath05", &f)?;
      } else {
        s.skip_field("VictoryEndAnimationPath05")?;
      }
      s.serialize_field("VoiceEvent05", &self.VoiceEvent05())?;
      s.serialize_field("CostumeId06", &self.CostumeId06())?;
      s.serialize_field("PositionIndex06", &self.PositionIndex06())?;
      if let Some(f) = self.VictoryStartAnimationPath06() {
        s.serialize_field("VictoryStartAnimationPath06", &f)?;
      } else {
        s.skip_field("VictoryStartAnimationPath06")?;
      }
      if let Some(f) = self.VictoryEndAnimationPath06() {
        s.serialize_field("VictoryEndAnimationPath06", &f)?;
      } else {
        s.skip_field("VictoryEndAnimationPath06")?;
      }
      s.serialize_field("VoiceEvent06", &self.VoiceEvent06())?;
    s.end()
  }
}

pub struct CharacterVictoryInteractionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterVictoryInteractionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_InteractionId(&mut self, InteractionId: i64) {
    self.fbb_.push_slot::<i64>(CharacterVictoryInteractionExcel::VT_INTERACTIONID, InteractionId, 0);
  }
  #[inline]
  pub fn add_CostumeId01(&mut self, CostumeId01: i64) {
    self.fbb_.push_slot::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID01, CostumeId01, 0);
  }
  #[inline]
  pub fn add_PositionIndex01(&mut self, PositionIndex01: i32) {
    self.fbb_.push_slot::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX01, PositionIndex01, 0);
  }
  #[inline]
  pub fn add_VictoryStartAnimationPath01(&mut self, VictoryStartAnimationPath01: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH01, VictoryStartAnimationPath01);
  }
  #[inline]
  pub fn add_VictoryEndAnimationPath01(&mut self, VictoryEndAnimationPath01: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH01, VictoryEndAnimationPath01);
  }
  #[inline]
  pub fn add_VoiceEvent01(&mut self, VoiceEvent01: VoiceEvent) {
    self.fbb_.push_slot::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT01, VoiceEvent01, VoiceEvent::OnTSA);
  }
  #[inline]
  pub fn add_CostumeId02(&mut self, CostumeId02: i64) {
    self.fbb_.push_slot::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID02, CostumeId02, 0);
  }
  #[inline]
  pub fn add_PositionIndex02(&mut self, PositionIndex02: i32) {
    self.fbb_.push_slot::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX02, PositionIndex02, 0);
  }
  #[inline]
  pub fn add_VictoryStartAnimationPath02(&mut self, VictoryStartAnimationPath02: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH02, VictoryStartAnimationPath02);
  }
  #[inline]
  pub fn add_VictoryEndAnimationPath02(&mut self, VictoryEndAnimationPath02: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH02, VictoryEndAnimationPath02);
  }
  #[inline]
  pub fn add_VoiceEvent02(&mut self, VoiceEvent02: VoiceEvent) {
    self.fbb_.push_slot::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT02, VoiceEvent02, VoiceEvent::OnTSA);
  }
  #[inline]
  pub fn add_CostumeId03(&mut self, CostumeId03: i64) {
    self.fbb_.push_slot::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID03, CostumeId03, 0);
  }
  #[inline]
  pub fn add_PositionIndex03(&mut self, PositionIndex03: i32) {
    self.fbb_.push_slot::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX03, PositionIndex03, 0);
  }
  #[inline]
  pub fn add_VictoryStartAnimationPath03(&mut self, VictoryStartAnimationPath03: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH03, VictoryStartAnimationPath03);
  }
  #[inline]
  pub fn add_VictoryEndAnimationPath03(&mut self, VictoryEndAnimationPath03: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH03, VictoryEndAnimationPath03);
  }
  #[inline]
  pub fn add_VoiceEvent03(&mut self, VoiceEvent03: VoiceEvent) {
    self.fbb_.push_slot::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT03, VoiceEvent03, VoiceEvent::OnTSA);
  }
  #[inline]
  pub fn add_CostumeId04(&mut self, CostumeId04: i64) {
    self.fbb_.push_slot::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID04, CostumeId04, 0);
  }
  #[inline]
  pub fn add_PositionIndex04(&mut self, PositionIndex04: i32) {
    self.fbb_.push_slot::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX04, PositionIndex04, 0);
  }
  #[inline]
  pub fn add_VictoryStartAnimationPath04(&mut self, VictoryStartAnimationPath04: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH04, VictoryStartAnimationPath04);
  }
  #[inline]
  pub fn add_VictoryEndAnimationPath04(&mut self, VictoryEndAnimationPath04: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH04, VictoryEndAnimationPath04);
  }
  #[inline]
  pub fn add_VoiceEvent04(&mut self, VoiceEvent04: VoiceEvent) {
    self.fbb_.push_slot::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT04, VoiceEvent04, VoiceEvent::OnTSA);
  }
  #[inline]
  pub fn add_CostumeId05(&mut self, CostumeId05: i64) {
    self.fbb_.push_slot::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID05, CostumeId05, 0);
  }
  #[inline]
  pub fn add_PositionIndex05(&mut self, PositionIndex05: i32) {
    self.fbb_.push_slot::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX05, PositionIndex05, 0);
  }
  #[inline]
  pub fn add_VictoryStartAnimationPath05(&mut self, VictoryStartAnimationPath05: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH05, VictoryStartAnimationPath05);
  }
  #[inline]
  pub fn add_VictoryEndAnimationPath05(&mut self, VictoryEndAnimationPath05: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH05, VictoryEndAnimationPath05);
  }
  #[inline]
  pub fn add_VoiceEvent05(&mut self, VoiceEvent05: VoiceEvent) {
    self.fbb_.push_slot::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT05, VoiceEvent05, VoiceEvent::OnTSA);
  }
  #[inline]
  pub fn add_CostumeId06(&mut self, CostumeId06: i64) {
    self.fbb_.push_slot::<i64>(CharacterVictoryInteractionExcel::VT_COSTUMEID06, CostumeId06, 0);
  }
  #[inline]
  pub fn add_PositionIndex06(&mut self, PositionIndex06: i32) {
    self.fbb_.push_slot::<i32>(CharacterVictoryInteractionExcel::VT_POSITIONINDEX06, PositionIndex06, 0);
  }
  #[inline]
  pub fn add_VictoryStartAnimationPath06(&mut self, VictoryStartAnimationPath06: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYSTARTANIMATIONPATH06, VictoryStartAnimationPath06);
  }
  #[inline]
  pub fn add_VictoryEndAnimationPath06(&mut self, VictoryEndAnimationPath06: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterVictoryInteractionExcel::VT_VICTORYENDANIMATIONPATH06, VictoryEndAnimationPath06);
  }
  #[inline]
  pub fn add_VoiceEvent06(&mut self, VoiceEvent06: VoiceEvent) {
    self.fbb_.push_slot::<VoiceEvent>(CharacterVictoryInteractionExcel::VT_VOICEEVENT06, VoiceEvent06, VoiceEvent::OnTSA);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterVictoryInteractionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterVictoryInteractionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterVictoryInteractionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterVictoryInteractionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterVictoryInteractionExcel");
      ds.field("InteractionId", &self.InteractionId());
      ds.field("CostumeId01", &self.CostumeId01());
      ds.field("PositionIndex01", &self.PositionIndex01());
      ds.field("VictoryStartAnimationPath01", &self.VictoryStartAnimationPath01());
      ds.field("VictoryEndAnimationPath01", &self.VictoryEndAnimationPath01());
      ds.field("VoiceEvent01", &self.VoiceEvent01());
      ds.field("CostumeId02", &self.CostumeId02());
      ds.field("PositionIndex02", &self.PositionIndex02());
      ds.field("VictoryStartAnimationPath02", &self.VictoryStartAnimationPath02());
      ds.field("VictoryEndAnimationPath02", &self.VictoryEndAnimationPath02());
      ds.field("VoiceEvent02", &self.VoiceEvent02());
      ds.field("CostumeId03", &self.CostumeId03());
      ds.field("PositionIndex03", &self.PositionIndex03());
      ds.field("VictoryStartAnimationPath03", &self.VictoryStartAnimationPath03());
      ds.field("VictoryEndAnimationPath03", &self.VictoryEndAnimationPath03());
      ds.field("VoiceEvent03", &self.VoiceEvent03());
      ds.field("CostumeId04", &self.CostumeId04());
      ds.field("PositionIndex04", &self.PositionIndex04());
      ds.field("VictoryStartAnimationPath04", &self.VictoryStartAnimationPath04());
      ds.field("VictoryEndAnimationPath04", &self.VictoryEndAnimationPath04());
      ds.field("VoiceEvent04", &self.VoiceEvent04());
      ds.field("CostumeId05", &self.CostumeId05());
      ds.field("PositionIndex05", &self.PositionIndex05());
      ds.field("VictoryStartAnimationPath05", &self.VictoryStartAnimationPath05());
      ds.field("VictoryEndAnimationPath05", &self.VictoryEndAnimationPath05());
      ds.field("VoiceEvent05", &self.VoiceEvent05());
      ds.field("CostumeId06", &self.CostumeId06());
      ds.field("PositionIndex06", &self.PositionIndex06());
      ds.field("VictoryStartAnimationPath06", &self.VictoryStartAnimationPath06());
      ds.field("VictoryEndAnimationPath06", &self.VictoryEndAnimationPath06());
      ds.field("VoiceEvent06", &self.VoiceEvent06());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CharacterVictoryInteractionExcelT {
  pub InteractionId: i64,
  pub CostumeId01: i64,
  pub PositionIndex01: i32,
  pub VictoryStartAnimationPath01: Option<String>,
  pub VictoryEndAnimationPath01: Option<String>,
  pub VoiceEvent01: VoiceEvent,
  pub CostumeId02: i64,
  pub PositionIndex02: i32,
  pub VictoryStartAnimationPath02: Option<String>,
  pub VictoryEndAnimationPath02: Option<String>,
  pub VoiceEvent02: VoiceEvent,
  pub CostumeId03: i64,
  pub PositionIndex03: i32,
  pub VictoryStartAnimationPath03: Option<String>,
  pub VictoryEndAnimationPath03: Option<String>,
  pub VoiceEvent03: VoiceEvent,
  pub CostumeId04: i64,
  pub PositionIndex04: i32,
  pub VictoryStartAnimationPath04: Option<String>,
  pub VictoryEndAnimationPath04: Option<String>,
  pub VoiceEvent04: VoiceEvent,
  pub CostumeId05: i64,
  pub PositionIndex05: i32,
  pub VictoryStartAnimationPath05: Option<String>,
  pub VictoryEndAnimationPath05: Option<String>,
  pub VoiceEvent05: VoiceEvent,
  pub CostumeId06: i64,
  pub PositionIndex06: i32,
  pub VictoryStartAnimationPath06: Option<String>,
  pub VictoryEndAnimationPath06: Option<String>,
  pub VoiceEvent06: VoiceEvent,
}
impl Default for CharacterVictoryInteractionExcelT {
  fn default() -> Self {
    Self {
      InteractionId: 0,
      CostumeId01: 0,
      PositionIndex01: 0,
      VictoryStartAnimationPath01: None,
      VictoryEndAnimationPath01: None,
      VoiceEvent01: VoiceEvent::OnTSA,
      CostumeId02: 0,
      PositionIndex02: 0,
      VictoryStartAnimationPath02: None,
      VictoryEndAnimationPath02: None,
      VoiceEvent02: VoiceEvent::OnTSA,
      CostumeId03: 0,
      PositionIndex03: 0,
      VictoryStartAnimationPath03: None,
      VictoryEndAnimationPath03: None,
      VoiceEvent03: VoiceEvent::OnTSA,
      CostumeId04: 0,
      PositionIndex04: 0,
      VictoryStartAnimationPath04: None,
      VictoryEndAnimationPath04: None,
      VoiceEvent04: VoiceEvent::OnTSA,
      CostumeId05: 0,
      PositionIndex05: 0,
      VictoryStartAnimationPath05: None,
      VictoryEndAnimationPath05: None,
      VoiceEvent05: VoiceEvent::OnTSA,
      CostumeId06: 0,
      PositionIndex06: 0,
      VictoryStartAnimationPath06: None,
      VictoryEndAnimationPath06: None,
      VoiceEvent06: VoiceEvent::OnTSA,
    }
  }
}
impl CharacterVictoryInteractionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CharacterVictoryInteractionExcel<'b>> {
    let InteractionId = self.InteractionId;
    let CostumeId01 = self.CostumeId01;
    let PositionIndex01 = self.PositionIndex01;
    let VictoryStartAnimationPath01 = self.VictoryStartAnimationPath01.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VictoryEndAnimationPath01 = self.VictoryEndAnimationPath01.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceEvent01 = self.VoiceEvent01;
    let CostumeId02 = self.CostumeId02;
    let PositionIndex02 = self.PositionIndex02;
    let VictoryStartAnimationPath02 = self.VictoryStartAnimationPath02.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VictoryEndAnimationPath02 = self.VictoryEndAnimationPath02.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceEvent02 = self.VoiceEvent02;
    let CostumeId03 = self.CostumeId03;
    let PositionIndex03 = self.PositionIndex03;
    let VictoryStartAnimationPath03 = self.VictoryStartAnimationPath03.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VictoryEndAnimationPath03 = self.VictoryEndAnimationPath03.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceEvent03 = self.VoiceEvent03;
    let CostumeId04 = self.CostumeId04;
    let PositionIndex04 = self.PositionIndex04;
    let VictoryStartAnimationPath04 = self.VictoryStartAnimationPath04.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VictoryEndAnimationPath04 = self.VictoryEndAnimationPath04.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceEvent04 = self.VoiceEvent04;
    let CostumeId05 = self.CostumeId05;
    let PositionIndex05 = self.PositionIndex05;
    let VictoryStartAnimationPath05 = self.VictoryStartAnimationPath05.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VictoryEndAnimationPath05 = self.VictoryEndAnimationPath05.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceEvent05 = self.VoiceEvent05;
    let CostumeId06 = self.CostumeId06;
    let PositionIndex06 = self.PositionIndex06;
    let VictoryStartAnimationPath06 = self.VictoryStartAnimationPath06.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VictoryEndAnimationPath06 = self.VictoryEndAnimationPath06.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VoiceEvent06 = self.VoiceEvent06;
    CharacterVictoryInteractionExcel::create(_fbb, &CharacterVictoryInteractionExcelArgs{
      InteractionId,
      CostumeId01,
      PositionIndex01,
      VictoryStartAnimationPath01,
      VictoryEndAnimationPath01,
      VoiceEvent01,
      CostumeId02,
      PositionIndex02,
      VictoryStartAnimationPath02,
      VictoryEndAnimationPath02,
      VoiceEvent02,
      CostumeId03,
      PositionIndex03,
      VictoryStartAnimationPath03,
      VictoryEndAnimationPath03,
      VoiceEvent03,
      CostumeId04,
      PositionIndex04,
      VictoryStartAnimationPath04,
      VictoryEndAnimationPath04,
      VoiceEvent04,
      CostumeId05,
      PositionIndex05,
      VictoryStartAnimationPath05,
      VictoryEndAnimationPath05,
      VoiceEvent05,
      CostumeId06,
      PositionIndex06,
      VictoryStartAnimationPath06,
      VictoryEndAnimationPath06,
      VoiceEvent06,
    })
  }
}
