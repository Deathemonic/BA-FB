// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LocalizeGachaShopExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeGachaShopExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeGachaShopExcel<'a> {
  type Inner = LocalizeGachaShopExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeGachaShopExcel<'a> {
  pub const VT_GACHASHOPID: flatbuffers::VOffsetT = 4;
  pub const VT_TABNAMEKR: flatbuffers::VOffsetT = 6;
  pub const VT_TABNAMEJP: flatbuffers::VOffsetT = 8;
  pub const VT_TABNAMETH: flatbuffers::VOffsetT = 10;
  pub const VT_TABNAMETW: flatbuffers::VOffsetT = 12;
  pub const VT_TABNAMEEN: flatbuffers::VOffsetT = 14;
  pub const VT_TITLENAMEKR: flatbuffers::VOffsetT = 16;
  pub const VT_TITLENAMEJP: flatbuffers::VOffsetT = 18;
  pub const VT_TITLENAMETH: flatbuffers::VOffsetT = 20;
  pub const VT_TITLENAMETW: flatbuffers::VOffsetT = 22;
  pub const VT_TITLENAMEEN: flatbuffers::VOffsetT = 24;
  pub const VT_SUBTITLEKR: flatbuffers::VOffsetT = 26;
  pub const VT_SUBTITLEJP: flatbuffers::VOffsetT = 28;
  pub const VT_SUBTITLETH: flatbuffers::VOffsetT = 30;
  pub const VT_SUBTITLETW: flatbuffers::VOffsetT = 32;
  pub const VT_SUBTITLEEN: flatbuffers::VOffsetT = 34;
  pub const VT_GACHADESCRIPTIONKR: flatbuffers::VOffsetT = 36;
  pub const VT_GACHADESCRIPTIONJP: flatbuffers::VOffsetT = 38;
  pub const VT_GACHADESCRIPTIONTH: flatbuffers::VOffsetT = 40;
  pub const VT_GACHADESCRIPTIONTW: flatbuffers::VOffsetT = 42;
  pub const VT_GACHADESCRIPTIONEN: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeGachaShopExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeGachaShopExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeGachaShopExcel<'bldr>> {
    let mut builder = LocalizeGachaShopExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"LocalizeGachaShop");
      let x = args.GachaShopId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GachaShopId(x);
      if let Some(x) = args.GachaDescriptionEn {
        builder.add_GachaDescriptionEn(x);
      }
      if let Some(x) = args.GachaDescriptionTw {
        builder.add_GachaDescriptionTw(x);
      }
      if let Some(x) = args.GachaDescriptionTh {
        builder.add_GachaDescriptionTh(x);
      }
      if let Some(x) = args.GachaDescriptionJp {
        builder.add_GachaDescriptionJp(x);
      }
      if let Some(x) = args.GachaDescriptionKr {
        builder.add_GachaDescriptionKr(x);
      }
      if let Some(x) = args.SubTitleEn {
        builder.add_SubTitleEn(x);
      }
      if let Some(x) = args.SubTitleTw {
        builder.add_SubTitleTw(x);
      }
      if let Some(x) = args.SubTitleTh {
        builder.add_SubTitleTh(x);
      }
      if let Some(x) = args.SubTitleJp {
        builder.add_SubTitleJp(x);
      }
      if let Some(x) = args.SubTitleKr {
        builder.add_SubTitleKr(x);
      }
      if let Some(x) = args.TitleNameEn {
        builder.add_TitleNameEn(x);
      }
      if let Some(x) = args.TitleNameTw {
        builder.add_TitleNameTw(x);
      }
      if let Some(x) = args.TitleNameTh {
        builder.add_TitleNameTh(x);
      }
      if let Some(x) = args.TitleNameJp {
        builder.add_TitleNameJp(x);
      }
      if let Some(x) = args.TitleNameKr {
        builder.add_TitleNameKr(x);
      }
      if let Some(x) = args.TabNameEn {
        builder.add_TabNameEn(x);
      }
      if let Some(x) = args.TabNameTw {
        builder.add_TabNameTw(x);
      }
      if let Some(x) = args.TabNameTh {
        builder.add_TabNameTh(x);
      }
      if let Some(x) = args.TabNameJp {
        builder.add_TabNameJp(x);
      }
      if let Some(x) = args.TabNameKr {
        builder.add_TabNameKr(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> LocalizeGachaShopExcelT {
    let key = table_encryption_service::create_key(b"LocalizeGachaShop");
      let GachaShopId = self.GachaShopId();
    let TabNameKr = self.TabNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TabNameJp = self.TabNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TabNameTh = self.TabNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TabNameTw = self.TabNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TabNameEn = self.TabNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleNameKr = self.TitleNameKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleNameJp = self.TitleNameJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleNameTh = self.TitleNameTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleNameTw = self.TitleNameTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let TitleNameEn = self.TitleNameEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubTitleKr = self.SubTitleKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubTitleJp = self.SubTitleJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubTitleTh = self.SubTitleTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubTitleTw = self.SubTitleTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SubTitleEn = self.SubTitleEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GachaDescriptionKr = self.GachaDescriptionKr().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GachaDescriptionJp = self.GachaDescriptionJp().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GachaDescriptionTh = self.GachaDescriptionTh().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GachaDescriptionTw = self.GachaDescriptionTw().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let GachaDescriptionEn = self.GachaDescriptionEn().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    LocalizeGachaShopExcelT {
      GachaShopId,
      TabNameKr,
      TabNameJp,
      TabNameTh,
      TabNameTw,
      TabNameEn,
      TitleNameKr,
      TitleNameJp,
      TitleNameTh,
      TitleNameTw,
      TitleNameEn,
      SubTitleKr,
      SubTitleJp,
      SubTitleTh,
      SubTitleTw,
      SubTitleEn,
      GachaDescriptionKr,
      GachaDescriptionJp,
      GachaDescriptionTh,
      GachaDescriptionTw,
      GachaDescriptionEn,
    }
  }

  #[inline]
  pub fn GachaShopId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeGachaShopExcel::VT_GACHASHOPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TabNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TABNAMEKR, None)}
  }
  #[inline]
  pub fn TabNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TABNAMEJP, None)}
  }
  #[inline]
  pub fn TabNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TABNAMETH, None)}
  }
  #[inline]
  pub fn TabNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TABNAMETW, None)}
  }
  #[inline]
  pub fn TabNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TABNAMEEN, None)}
  }
  #[inline]
  pub fn TitleNameKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TITLENAMEKR, None)}
  }
  #[inline]
  pub fn TitleNameJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TITLENAMEJP, None)}
  }
  #[inline]
  pub fn TitleNameTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TITLENAMETH, None)}
  }
  #[inline]
  pub fn TitleNameTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TITLENAMETW, None)}
  }
  #[inline]
  pub fn TitleNameEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_TITLENAMEEN, None)}
  }
  #[inline]
  pub fn SubTitleKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_SUBTITLEKR, None)}
  }
  #[inline]
  pub fn SubTitleJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_SUBTITLEJP, None)}
  }
  #[inline]
  pub fn SubTitleTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_SUBTITLETH, None)}
  }
  #[inline]
  pub fn SubTitleTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_SUBTITLETW, None)}
  }
  #[inline]
  pub fn SubTitleEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_SUBTITLEEN, None)}
  }
  #[inline]
  pub fn GachaDescriptionKr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONKR, None)}
  }
  #[inline]
  pub fn GachaDescriptionJp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONJP, None)}
  }
  #[inline]
  pub fn GachaDescriptionTh(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONTH, None)}
  }
  #[inline]
  pub fn GachaDescriptionTw(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONTW, None)}
  }
  #[inline]
  pub fn GachaDescriptionEn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONEN, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeGachaShopExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("GachaShopId", Self::VT_GACHASHOPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabNameKr", Self::VT_TABNAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabNameJp", Self::VT_TABNAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabNameTh", Self::VT_TABNAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabNameTw", Self::VT_TABNAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabNameEn", Self::VT_TABNAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleNameKr", Self::VT_TITLENAMEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleNameJp", Self::VT_TITLENAMEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleNameTh", Self::VT_TITLENAMETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleNameTw", Self::VT_TITLENAMETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TitleNameEn", Self::VT_TITLENAMEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubTitleKr", Self::VT_SUBTITLEKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubTitleJp", Self::VT_SUBTITLEJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubTitleTh", Self::VT_SUBTITLETH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubTitleTw", Self::VT_SUBTITLETW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SubTitleEn", Self::VT_SUBTITLEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaDescriptionKr", Self::VT_GACHADESCRIPTIONKR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaDescriptionJp", Self::VT_GACHADESCRIPTIONJP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaDescriptionTh", Self::VT_GACHADESCRIPTIONTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaDescriptionTw", Self::VT_GACHADESCRIPTIONTW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("GachaDescriptionEn", Self::VT_GACHADESCRIPTIONEN, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeGachaShopExcelArgs<'a> {
    pub GachaShopId: i64,
    pub TabNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TabNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TabNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TabNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TabNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleNameKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleNameJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleNameTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleNameTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub TitleNameEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubTitleKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubTitleJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubTitleTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubTitleTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SubTitleEn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GachaDescriptionKr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GachaDescriptionJp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GachaDescriptionTh: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GachaDescriptionTw: Option<flatbuffers::WIPOffset<&'a str>>,
    pub GachaDescriptionEn: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocalizeGachaShopExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeGachaShopExcelArgs {
      GachaShopId: 0,
      TabNameKr: None,
      TabNameJp: None,
      TabNameTh: None,
      TabNameTw: None,
      TabNameEn: None,
      TitleNameKr: None,
      TitleNameJp: None,
      TitleNameTh: None,
      TitleNameTw: None,
      TitleNameEn: None,
      SubTitleKr: None,
      SubTitleJp: None,
      SubTitleTh: None,
      SubTitleTw: None,
      SubTitleEn: None,
      GachaDescriptionKr: None,
      GachaDescriptionJp: None,
      GachaDescriptionTh: None,
      GachaDescriptionTw: None,
      GachaDescriptionEn: None,
    }
  }
}

impl Serialize for LocalizeGachaShopExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LocalizeGachaShopExcel", 21)?;
      s.serialize_field("GachaShopId", &self.GachaShopId())?;
      if let Some(f) = self.TabNameKr() {
        s.serialize_field("TabNameKr", &f)?;
      } else {
        s.skip_field("TabNameKr")?;
      }
      if let Some(f) = self.TabNameJp() {
        s.serialize_field("TabNameJp", &f)?;
      } else {
        s.skip_field("TabNameJp")?;
      }
      if let Some(f) = self.TabNameTh() {
        s.serialize_field("TabNameTh", &f)?;
      } else {
        s.skip_field("TabNameTh")?;
      }
      if let Some(f) = self.TabNameTw() {
        s.serialize_field("TabNameTw", &f)?;
      } else {
        s.skip_field("TabNameTw")?;
      }
      if let Some(f) = self.TabNameEn() {
        s.serialize_field("TabNameEn", &f)?;
      } else {
        s.skip_field("TabNameEn")?;
      }
      if let Some(f) = self.TitleNameKr() {
        s.serialize_field("TitleNameKr", &f)?;
      } else {
        s.skip_field("TitleNameKr")?;
      }
      if let Some(f) = self.TitleNameJp() {
        s.serialize_field("TitleNameJp", &f)?;
      } else {
        s.skip_field("TitleNameJp")?;
      }
      if let Some(f) = self.TitleNameTh() {
        s.serialize_field("TitleNameTh", &f)?;
      } else {
        s.skip_field("TitleNameTh")?;
      }
      if let Some(f) = self.TitleNameTw() {
        s.serialize_field("TitleNameTw", &f)?;
      } else {
        s.skip_field("TitleNameTw")?;
      }
      if let Some(f) = self.TitleNameEn() {
        s.serialize_field("TitleNameEn", &f)?;
      } else {
        s.skip_field("TitleNameEn")?;
      }
      if let Some(f) = self.SubTitleKr() {
        s.serialize_field("SubTitleKr", &f)?;
      } else {
        s.skip_field("SubTitleKr")?;
      }
      if let Some(f) = self.SubTitleJp() {
        s.serialize_field("SubTitleJp", &f)?;
      } else {
        s.skip_field("SubTitleJp")?;
      }
      if let Some(f) = self.SubTitleTh() {
        s.serialize_field("SubTitleTh", &f)?;
      } else {
        s.skip_field("SubTitleTh")?;
      }
      if let Some(f) = self.SubTitleTw() {
        s.serialize_field("SubTitleTw", &f)?;
      } else {
        s.skip_field("SubTitleTw")?;
      }
      if let Some(f) = self.SubTitleEn() {
        s.serialize_field("SubTitleEn", &f)?;
      } else {
        s.skip_field("SubTitleEn")?;
      }
      if let Some(f) = self.GachaDescriptionKr() {
        s.serialize_field("GachaDescriptionKr", &f)?;
      } else {
        s.skip_field("GachaDescriptionKr")?;
      }
      if let Some(f) = self.GachaDescriptionJp() {
        s.serialize_field("GachaDescriptionJp", &f)?;
      } else {
        s.skip_field("GachaDescriptionJp")?;
      }
      if let Some(f) = self.GachaDescriptionTh() {
        s.serialize_field("GachaDescriptionTh", &f)?;
      } else {
        s.skip_field("GachaDescriptionTh")?;
      }
      if let Some(f) = self.GachaDescriptionTw() {
        s.serialize_field("GachaDescriptionTw", &f)?;
      } else {
        s.skip_field("GachaDescriptionTw")?;
      }
      if let Some(f) = self.GachaDescriptionEn() {
        s.serialize_field("GachaDescriptionEn", &f)?;
      } else {
        s.skip_field("GachaDescriptionEn")?;
      }
    s.end()
  }
}

pub struct LocalizeGachaShopExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeGachaShopExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_GachaShopId(&mut self, GachaShopId: i64) {
    self.fbb_.push_slot::<i64>(LocalizeGachaShopExcel::VT_GACHASHOPID, GachaShopId, 0);
  }
  #[inline]
  pub fn add_TabNameKr(&mut self, TabNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TABNAMEKR, TabNameKr);
  }
  #[inline]
  pub fn add_TabNameJp(&mut self, TabNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TABNAMEJP, TabNameJp);
  }
  #[inline]
  pub fn add_TabNameTh(&mut self, TabNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TABNAMETH, TabNameTh);
  }
  #[inline]
  pub fn add_TabNameTw(&mut self, TabNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TABNAMETW, TabNameTw);
  }
  #[inline]
  pub fn add_TabNameEn(&mut self, TabNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TABNAMEEN, TabNameEn);
  }
  #[inline]
  pub fn add_TitleNameKr(&mut self, TitleNameKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TITLENAMEKR, TitleNameKr);
  }
  #[inline]
  pub fn add_TitleNameJp(&mut self, TitleNameJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TITLENAMEJP, TitleNameJp);
  }
  #[inline]
  pub fn add_TitleNameTh(&mut self, TitleNameTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TITLENAMETH, TitleNameTh);
  }
  #[inline]
  pub fn add_TitleNameTw(&mut self, TitleNameTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TITLENAMETW, TitleNameTw);
  }
  #[inline]
  pub fn add_TitleNameEn(&mut self, TitleNameEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_TITLENAMEEN, TitleNameEn);
  }
  #[inline]
  pub fn add_SubTitleKr(&mut self, SubTitleKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_SUBTITLEKR, SubTitleKr);
  }
  #[inline]
  pub fn add_SubTitleJp(&mut self, SubTitleJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_SUBTITLEJP, SubTitleJp);
  }
  #[inline]
  pub fn add_SubTitleTh(&mut self, SubTitleTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_SUBTITLETH, SubTitleTh);
  }
  #[inline]
  pub fn add_SubTitleTw(&mut self, SubTitleTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_SUBTITLETW, SubTitleTw);
  }
  #[inline]
  pub fn add_SubTitleEn(&mut self, SubTitleEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_SUBTITLEEN, SubTitleEn);
  }
  #[inline]
  pub fn add_GachaDescriptionKr(&mut self, GachaDescriptionKr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONKR, GachaDescriptionKr);
  }
  #[inline]
  pub fn add_GachaDescriptionJp(&mut self, GachaDescriptionJp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONJP, GachaDescriptionJp);
  }
  #[inline]
  pub fn add_GachaDescriptionTh(&mut self, GachaDescriptionTh: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONTH, GachaDescriptionTh);
  }
  #[inline]
  pub fn add_GachaDescriptionTw(&mut self, GachaDescriptionTw: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONTW, GachaDescriptionTw);
  }
  #[inline]
  pub fn add_GachaDescriptionEn(&mut self, GachaDescriptionEn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeGachaShopExcel::VT_GACHADESCRIPTIONEN, GachaDescriptionEn);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeGachaShopExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeGachaShopExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeGachaShopExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeGachaShopExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeGachaShopExcel");
      ds.field("GachaShopId", &self.GachaShopId());
      ds.field("TabNameKr", &self.TabNameKr());
      ds.field("TabNameJp", &self.TabNameJp());
      ds.field("TabNameTh", &self.TabNameTh());
      ds.field("TabNameTw", &self.TabNameTw());
      ds.field("TabNameEn", &self.TabNameEn());
      ds.field("TitleNameKr", &self.TitleNameKr());
      ds.field("TitleNameJp", &self.TitleNameJp());
      ds.field("TitleNameTh", &self.TitleNameTh());
      ds.field("TitleNameTw", &self.TitleNameTw());
      ds.field("TitleNameEn", &self.TitleNameEn());
      ds.field("SubTitleKr", &self.SubTitleKr());
      ds.field("SubTitleJp", &self.SubTitleJp());
      ds.field("SubTitleTh", &self.SubTitleTh());
      ds.field("SubTitleTw", &self.SubTitleTw());
      ds.field("SubTitleEn", &self.SubTitleEn());
      ds.field("GachaDescriptionKr", &self.GachaDescriptionKr());
      ds.field("GachaDescriptionJp", &self.GachaDescriptionJp());
      ds.field("GachaDescriptionTh", &self.GachaDescriptionTh());
      ds.field("GachaDescriptionTw", &self.GachaDescriptionTw());
      ds.field("GachaDescriptionEn", &self.GachaDescriptionEn());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LocalizeGachaShopExcelT {
  pub GachaShopId: i64,
  pub TabNameKr: Option<String>,
  pub TabNameJp: Option<String>,
  pub TabNameTh: Option<String>,
  pub TabNameTw: Option<String>,
  pub TabNameEn: Option<String>,
  pub TitleNameKr: Option<String>,
  pub TitleNameJp: Option<String>,
  pub TitleNameTh: Option<String>,
  pub TitleNameTw: Option<String>,
  pub TitleNameEn: Option<String>,
  pub SubTitleKr: Option<String>,
  pub SubTitleJp: Option<String>,
  pub SubTitleTh: Option<String>,
  pub SubTitleTw: Option<String>,
  pub SubTitleEn: Option<String>,
  pub GachaDescriptionKr: Option<String>,
  pub GachaDescriptionJp: Option<String>,
  pub GachaDescriptionTh: Option<String>,
  pub GachaDescriptionTw: Option<String>,
  pub GachaDescriptionEn: Option<String>,
}
impl Default for LocalizeGachaShopExcelT {
  fn default() -> Self {
    Self {
      GachaShopId: 0,
      TabNameKr: None,
      TabNameJp: None,
      TabNameTh: None,
      TabNameTw: None,
      TabNameEn: None,
      TitleNameKr: None,
      TitleNameJp: None,
      TitleNameTh: None,
      TitleNameTw: None,
      TitleNameEn: None,
      SubTitleKr: None,
      SubTitleJp: None,
      SubTitleTh: None,
      SubTitleTw: None,
      SubTitleEn: None,
      GachaDescriptionKr: None,
      GachaDescriptionJp: None,
      GachaDescriptionTh: None,
      GachaDescriptionTw: None,
      GachaDescriptionEn: None,
    }
  }
}
impl LocalizeGachaShopExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LocalizeGachaShopExcel<'b>> {
    let GachaShopId = self.GachaShopId;
    let TabNameKr = self.TabNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TabNameJp = self.TabNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TabNameTh = self.TabNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TabNameTw = self.TabNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TabNameEn = self.TabNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleNameKr = self.TitleNameKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleNameJp = self.TitleNameJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleNameTh = self.TitleNameTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleNameTw = self.TitleNameTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let TitleNameEn = self.TitleNameEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubTitleKr = self.SubTitleKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubTitleJp = self.SubTitleJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubTitleTh = self.SubTitleTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubTitleTw = self.SubTitleTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SubTitleEn = self.SubTitleEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GachaDescriptionKr = self.GachaDescriptionKr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GachaDescriptionJp = self.GachaDescriptionJp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GachaDescriptionTh = self.GachaDescriptionTh.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GachaDescriptionTw = self.GachaDescriptionTw.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let GachaDescriptionEn = self.GachaDescriptionEn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LocalizeGachaShopExcel::create(_fbb, &LocalizeGachaShopExcelArgs{
      GachaShopId,
      TabNameKr,
      TabNameJp,
      TabNameTh,
      TabNameTw,
      TabNameEn,
      TitleNameKr,
      TitleNameJp,
      TitleNameTh,
      TitleNameTw,
      TitleNameEn,
      SubTitleKr,
      SubTitleJp,
      SubTitleTh,
      SubTitleTw,
      SubTitleEn,
      GachaDescriptionKr,
      GachaDescriptionJp,
      GachaDescriptionTh,
      GachaDescriptionTw,
      GachaDescriptionEn,
    })
  }
}
