// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CombatEmojiExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CombatEmojiExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CombatEmojiExcel<'a> {
  type Inner = CombatEmojiExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CombatEmojiExcel<'a> {
  pub const VT_UNIQUEID: flatbuffers::VOffsetT = 4;
  pub const VT_EMOJIEVENT: flatbuffers::VOffsetT = 6;
  pub const VT_ORDEROFPRIORITY: flatbuffers::VOffsetT = 8;
  pub const VT_EMOJIDURATION: flatbuffers::VOffsetT = 10;
  pub const VT_EMOJIREVERSAL: flatbuffers::VOffsetT = 12;
  pub const VT_EMOJITURNON: flatbuffers::VOffsetT = 14;
  pub const VT_SHOWEMOJIDELAY: flatbuffers::VOffsetT = 16;
  pub const VT_SHOWDEFAULTBG: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CombatEmojiExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CombatEmojiExcelArgs
  ) -> flatbuffers::WIPOffset<CombatEmojiExcel<'bldr>> {
    let mut builder = CombatEmojiExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CombatEmoji");
      let x = args.UniqueId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_UniqueId(x);
      let x = args.ShowEmojiDelay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_ShowEmojiDelay(x);
      let x = args.OrderOfPriority;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_OrderOfPriority(x);
      let x = args.EmojiEvent;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_EmojiEvent(x);
      builder.add_ShowDefaultBG(args.ShowDefaultBG);
      builder.add_EmojiTurnOn(args.EmojiTurnOn);
      builder.add_EmojiReversal(args.EmojiReversal);
      builder.add_EmojiDuration(args.EmojiDuration);
    builder.finish()
  }

  pub fn unpack(&self) -> CombatEmojiExcelT {
    let key = table_encryption_service::create_key(b"CombatEmoji");
      let UniqueId = self.UniqueId();
      let EmojiEvent = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.EmojiEvent(), &key)
      } else {
        self.EmojiEvent()
      };
      let OrderOfPriority = self.OrderOfPriority();
      let EmojiDuration = self.EmojiDuration();
      let EmojiReversal = self.EmojiReversal();
      let EmojiTurnOn = self.EmojiTurnOn();
      let ShowEmojiDelay = self.ShowEmojiDelay();
      let ShowDefaultBG = self.ShowDefaultBG();
    CombatEmojiExcelT {
      UniqueId,
      EmojiEvent,
      OrderOfPriority,
      EmojiDuration,
      EmojiReversal,
      EmojiTurnOn,
      ShowEmojiDelay,
      ShowDefaultBG,
    }
  }

  #[inline]
  pub fn UniqueId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CombatEmojiExcel::VT_UNIQUEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EmojiEvent(&self) -> EmojiEvent {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EmojiEvent>(CombatEmojiExcel::VT_EMOJIEVENT, Some(EmojiEvent::EnterConver)).unwrap()}
  }
  #[inline]
  pub fn OrderOfPriority(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CombatEmojiExcel::VT_ORDEROFPRIORITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn EmojiDuration(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CombatEmojiExcel::VT_EMOJIDURATION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EmojiReversal(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CombatEmojiExcel::VT_EMOJIREVERSAL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn EmojiTurnOn(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CombatEmojiExcel::VT_EMOJITURNON, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ShowEmojiDelay(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CombatEmojiExcel::VT_SHOWEMOJIDELAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ShowDefaultBG(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CombatEmojiExcel::VT_SHOWDEFAULTBG, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CombatEmojiExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("UniqueId", Self::VT_UNIQUEID, false)?
     .visit_field::<EmojiEvent>("EmojiEvent", Self::VT_EMOJIEVENT, false)?
     .visit_field::<i32>("OrderOfPriority", Self::VT_ORDEROFPRIORITY, false)?
     .visit_field::<bool>("EmojiDuration", Self::VT_EMOJIDURATION, false)?
     .visit_field::<bool>("EmojiReversal", Self::VT_EMOJIREVERSAL, false)?
     .visit_field::<bool>("EmojiTurnOn", Self::VT_EMOJITURNON, false)?
     .visit_field::<i32>("ShowEmojiDelay", Self::VT_SHOWEMOJIDELAY, false)?
     .visit_field::<bool>("ShowDefaultBG", Self::VT_SHOWDEFAULTBG, false)?
     .finish();
    Ok(())
  }
}
pub struct CombatEmojiExcelArgs {
    pub UniqueId: i64,
    pub EmojiEvent: EmojiEvent,
    pub OrderOfPriority: i32,
    pub EmojiDuration: bool,
    pub EmojiReversal: bool,
    pub EmojiTurnOn: bool,
    pub ShowEmojiDelay: i32,
    pub ShowDefaultBG: bool,
}
impl<'a> Default for CombatEmojiExcelArgs {
  #[inline]
  fn default() -> Self {
    CombatEmojiExcelArgs {
      UniqueId: 0,
      EmojiEvent: EmojiEvent::EnterConver,
      OrderOfPriority: 0,
      EmojiDuration: false,
      EmojiReversal: false,
      EmojiTurnOn: false,
      ShowEmojiDelay: 0,
      ShowDefaultBG: false,
    }
  }
}

impl Serialize for CombatEmojiExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CombatEmojiExcel", 8)?;
      s.serialize_field("UniqueId", &self.UniqueId())?;
      s.serialize_field("EmojiEvent", &self.EmojiEvent())?;
      s.serialize_field("OrderOfPriority", &self.OrderOfPriority())?;
      s.serialize_field("EmojiDuration", &self.EmojiDuration())?;
      s.serialize_field("EmojiReversal", &self.EmojiReversal())?;
      s.serialize_field("EmojiTurnOn", &self.EmojiTurnOn())?;
      s.serialize_field("ShowEmojiDelay", &self.ShowEmojiDelay())?;
      s.serialize_field("ShowDefaultBG", &self.ShowDefaultBG())?;
    s.end()
  }
}

pub struct CombatEmojiExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CombatEmojiExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_UniqueId(&mut self, UniqueId: i64) {
    self.fbb_.push_slot::<i64>(CombatEmojiExcel::VT_UNIQUEID, UniqueId, 0);
  }
  #[inline]
  pub fn add_EmojiEvent(&mut self, EmojiEvent: EmojiEvent) {
    self.fbb_.push_slot::<EmojiEvent>(CombatEmojiExcel::VT_EMOJIEVENT, EmojiEvent, EmojiEvent::EnterConver);
  }
  #[inline]
  pub fn add_OrderOfPriority(&mut self, OrderOfPriority: i32) {
    self.fbb_.push_slot::<i32>(CombatEmojiExcel::VT_ORDEROFPRIORITY, OrderOfPriority, 0);
  }
  #[inline]
  pub fn add_EmojiDuration(&mut self, EmojiDuration: bool) {
    self.fbb_.push_slot::<bool>(CombatEmojiExcel::VT_EMOJIDURATION, EmojiDuration, false);
  }
  #[inline]
  pub fn add_EmojiReversal(&mut self, EmojiReversal: bool) {
    self.fbb_.push_slot::<bool>(CombatEmojiExcel::VT_EMOJIREVERSAL, EmojiReversal, false);
  }
  #[inline]
  pub fn add_EmojiTurnOn(&mut self, EmojiTurnOn: bool) {
    self.fbb_.push_slot::<bool>(CombatEmojiExcel::VT_EMOJITURNON, EmojiTurnOn, false);
  }
  #[inline]
  pub fn add_ShowEmojiDelay(&mut self, ShowEmojiDelay: i32) {
    self.fbb_.push_slot::<i32>(CombatEmojiExcel::VT_SHOWEMOJIDELAY, ShowEmojiDelay, 0);
  }
  #[inline]
  pub fn add_ShowDefaultBG(&mut self, ShowDefaultBG: bool) {
    self.fbb_.push_slot::<bool>(CombatEmojiExcel::VT_SHOWDEFAULTBG, ShowDefaultBG, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CombatEmojiExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CombatEmojiExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CombatEmojiExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CombatEmojiExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CombatEmojiExcel");
      ds.field("UniqueId", &self.UniqueId());
      ds.field("EmojiEvent", &self.EmojiEvent());
      ds.field("OrderOfPriority", &self.OrderOfPriority());
      ds.field("EmojiDuration", &self.EmojiDuration());
      ds.field("EmojiReversal", &self.EmojiReversal());
      ds.field("EmojiTurnOn", &self.EmojiTurnOn());
      ds.field("ShowEmojiDelay", &self.ShowEmojiDelay());
      ds.field("ShowDefaultBG", &self.ShowDefaultBG());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CombatEmojiExcelT {
  pub UniqueId: i64,
  pub EmojiEvent: EmojiEvent,
  pub OrderOfPriority: i32,
  pub EmojiDuration: bool,
  pub EmojiReversal: bool,
  pub EmojiTurnOn: bool,
  pub ShowEmojiDelay: i32,
  pub ShowDefaultBG: bool,
}
impl Default for CombatEmojiExcelT {
  fn default() -> Self {
    Self {
      UniqueId: 0,
      EmojiEvent: EmojiEvent::EnterConver,
      OrderOfPriority: 0,
      EmojiDuration: false,
      EmojiReversal: false,
      EmojiTurnOn: false,
      ShowEmojiDelay: 0,
      ShowDefaultBG: false,
    }
  }
}
impl CombatEmojiExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CombatEmojiExcel<'b>> {
    let UniqueId = self.UniqueId;
    let EmojiEvent = self.EmojiEvent;
    let OrderOfPriority = self.OrderOfPriority;
    let EmojiDuration = self.EmojiDuration;
    let EmojiReversal = self.EmojiReversal;
    let EmojiTurnOn = self.EmojiTurnOn;
    let ShowEmojiDelay = self.ShowEmojiDelay;
    let ShowDefaultBG = self.ShowDefaultBG;
    CombatEmojiExcel::create(_fbb, &CombatEmojiExcelArgs{
      UniqueId,
      EmojiEvent,
      OrderOfPriority,
      EmojiDuration,
      EmojiReversal,
      EmojiTurnOn,
      ShowEmojiDelay,
      ShowDefaultBG,
    })
  }
}
