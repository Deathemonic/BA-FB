// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GuideMissionOpenStageConditionExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GuideMissionOpenStageConditionExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GuideMissionOpenStageConditionExcel<'a> {
  type Inner = GuideMissionOpenStageConditionExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GuideMissionOpenStageConditionExcel<'a> {
  pub const VT_SEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_ORDERNUMBER: flatbuffers::VOffsetT = 6;
  pub const VT_TABLOCALIZECODE: flatbuffers::VOffsetT = 8;
  pub const VT_CLEARSCENARIOMODEID: flatbuffers::VOffsetT = 10;
  pub const VT_LOCKSCENARIOTEXTLOCAILZECODE: flatbuffers::VOffsetT = 12;
  pub const VT_SHORTCUTSCENARIOUI: flatbuffers::VOffsetT = 14;
  pub const VT_CLEARSTAGEID: flatbuffers::VOffsetT = 16;
  pub const VT_LOCKSTAGETEXTLOCAILZECODE: flatbuffers::VOffsetT = 18;
  pub const VT_SHORTCUTSTAGEUI: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GuideMissionOpenStageConditionExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GuideMissionOpenStageConditionExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<GuideMissionOpenStageConditionExcel<'bldr>> {
    let mut builder = GuideMissionOpenStageConditionExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GuideMissionOpenStageCondition");
      let x = args.ClearStageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearStageId(x);
      let x = args.ClearScenarioModeId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearScenarioModeId(x);
      let x = args.OrderNumber;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_OrderNumber(x);
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      if let Some(x) = args.ShortcutStageUI {
        builder.add_ShortcutStageUI(x);
      }
      if let Some(x) = args.LockStageTextLocailzeCode {
        builder.add_LockStageTextLocailzeCode(x);
      }
      if let Some(x) = args.ShortcutScenarioUI {
        builder.add_ShortcutScenarioUI(x);
      }
      if let Some(x) = args.LockScenarioTextLocailzeCode {
        builder.add_LockScenarioTextLocailzeCode(x);
      }
      if let Some(x) = args.TabLocalizeCode {
        builder.add_TabLocalizeCode(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> GuideMissionOpenStageConditionExcelT {
    let key = table_encryption_service::create_key(b"GuideMissionOpenStageCondition");
      let SeasonId = self.SeasonId();
      let OrderNumber = self.OrderNumber();
    let TabLocalizeCode = self.TabLocalizeCode().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ClearScenarioModeId = self.ClearScenarioModeId();
    let LockScenarioTextLocailzeCode = self.LockScenarioTextLocailzeCode().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ShortcutScenarioUI = self.ShortcutScenarioUI().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
      let ClearStageId = self.ClearStageId();
    let LockStageTextLocailzeCode = self.LockStageTextLocailzeCode().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let ShortcutStageUI = self.ShortcutStageUI().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    GuideMissionOpenStageConditionExcelT {
      SeasonId,
      OrderNumber,
      TabLocalizeCode,
      ClearScenarioModeId,
      LockScenarioTextLocailzeCode,
      ShortcutScenarioUI,
      ClearStageId,
      LockStageTextLocailzeCode,
      ShortcutStageUI,
    }
  }

  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GuideMissionOpenStageConditionExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OrderNumber(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GuideMissionOpenStageConditionExcel::VT_ORDERNUMBER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TabLocalizeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GuideMissionOpenStageConditionExcel::VT_TABLOCALIZECODE, None)}
  }
  #[inline]
  pub fn ClearScenarioModeId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GuideMissionOpenStageConditionExcel::VT_CLEARSCENARIOMODEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LockScenarioTextLocailzeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GuideMissionOpenStageConditionExcel::VT_LOCKSCENARIOTEXTLOCAILZECODE, None)}
  }
  #[inline]
  pub fn ShortcutScenarioUI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GuideMissionOpenStageConditionExcel::VT_SHORTCUTSCENARIOUI, None)}
  }
  #[inline]
  pub fn ClearStageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GuideMissionOpenStageConditionExcel::VT_CLEARSTAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LockStageTextLocailzeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GuideMissionOpenStageConditionExcel::VT_LOCKSTAGETEXTLOCAILZECODE, None)}
  }
  #[inline]
  pub fn ShortcutStageUI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GuideMissionOpenStageConditionExcel::VT_SHORTCUTSTAGEUI, None)}
  }
}

impl flatbuffers::Verifiable for GuideMissionOpenStageConditionExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<i64>("OrderNumber", Self::VT_ORDERNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("TabLocalizeCode", Self::VT_TABLOCALIZECODE, false)?
     .visit_field::<i64>("ClearScenarioModeId", Self::VT_CLEARSCENARIOMODEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LockScenarioTextLocailzeCode", Self::VT_LOCKSCENARIOTEXTLOCAILZECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShortcutScenarioUI", Self::VT_SHORTCUTSCENARIOUI, false)?
     .visit_field::<i64>("ClearStageId", Self::VT_CLEARSTAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LockStageTextLocailzeCode", Self::VT_LOCKSTAGETEXTLOCAILZECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ShortcutStageUI", Self::VT_SHORTCUTSTAGEUI, false)?
     .finish();
    Ok(())
  }
}
pub struct GuideMissionOpenStageConditionExcelArgs<'a> {
    pub SeasonId: i64,
    pub OrderNumber: i64,
    pub TabLocalizeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ClearScenarioModeId: i64,
    pub LockScenarioTextLocailzeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShortcutScenarioUI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ClearStageId: i64,
    pub LockStageTextLocailzeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ShortcutStageUI: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for GuideMissionOpenStageConditionExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    GuideMissionOpenStageConditionExcelArgs {
      SeasonId: 0,
      OrderNumber: 0,
      TabLocalizeCode: None,
      ClearScenarioModeId: 0,
      LockScenarioTextLocailzeCode: None,
      ShortcutScenarioUI: None,
      ClearStageId: 0,
      LockStageTextLocailzeCode: None,
      ShortcutStageUI: None,
    }
  }
}

impl Serialize for GuideMissionOpenStageConditionExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GuideMissionOpenStageConditionExcel", 9)?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      s.serialize_field("OrderNumber", &self.OrderNumber())?;
      if let Some(f) = self.TabLocalizeCode() {
        s.serialize_field("TabLocalizeCode", &f)?;
      } else {
        s.skip_field("TabLocalizeCode")?;
      }
      s.serialize_field("ClearScenarioModeId", &self.ClearScenarioModeId())?;
      if let Some(f) = self.LockScenarioTextLocailzeCode() {
        s.serialize_field("LockScenarioTextLocailzeCode", &f)?;
      } else {
        s.skip_field("LockScenarioTextLocailzeCode")?;
      }
      if let Some(f) = self.ShortcutScenarioUI() {
        s.serialize_field("ShortcutScenarioUI", &f)?;
      } else {
        s.skip_field("ShortcutScenarioUI")?;
      }
      s.serialize_field("ClearStageId", &self.ClearStageId())?;
      if let Some(f) = self.LockStageTextLocailzeCode() {
        s.serialize_field("LockStageTextLocailzeCode", &f)?;
      } else {
        s.skip_field("LockStageTextLocailzeCode")?;
      }
      if let Some(f) = self.ShortcutStageUI() {
        s.serialize_field("ShortcutStageUI", &f)?;
      } else {
        s.skip_field("ShortcutStageUI")?;
      }
    s.end()
  }
}

pub struct GuideMissionOpenStageConditionExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GuideMissionOpenStageConditionExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(GuideMissionOpenStageConditionExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_OrderNumber(&mut self, OrderNumber: i64) {
    self.fbb_.push_slot::<i64>(GuideMissionOpenStageConditionExcel::VT_ORDERNUMBER, OrderNumber, 0);
  }
  #[inline]
  pub fn add_TabLocalizeCode(&mut self, TabLocalizeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GuideMissionOpenStageConditionExcel::VT_TABLOCALIZECODE, TabLocalizeCode);
  }
  #[inline]
  pub fn add_ClearScenarioModeId(&mut self, ClearScenarioModeId: i64) {
    self.fbb_.push_slot::<i64>(GuideMissionOpenStageConditionExcel::VT_CLEARSCENARIOMODEID, ClearScenarioModeId, 0);
  }
  #[inline]
  pub fn add_LockScenarioTextLocailzeCode(&mut self, LockScenarioTextLocailzeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GuideMissionOpenStageConditionExcel::VT_LOCKSCENARIOTEXTLOCAILZECODE, LockScenarioTextLocailzeCode);
  }
  #[inline]
  pub fn add_ShortcutScenarioUI(&mut self, ShortcutScenarioUI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GuideMissionOpenStageConditionExcel::VT_SHORTCUTSCENARIOUI, ShortcutScenarioUI);
  }
  #[inline]
  pub fn add_ClearStageId(&mut self, ClearStageId: i64) {
    self.fbb_.push_slot::<i64>(GuideMissionOpenStageConditionExcel::VT_CLEARSTAGEID, ClearStageId, 0);
  }
  #[inline]
  pub fn add_LockStageTextLocailzeCode(&mut self, LockStageTextLocailzeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GuideMissionOpenStageConditionExcel::VT_LOCKSTAGETEXTLOCAILZECODE, LockStageTextLocailzeCode);
  }
  #[inline]
  pub fn add_ShortcutStageUI(&mut self, ShortcutStageUI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GuideMissionOpenStageConditionExcel::VT_SHORTCUTSTAGEUI, ShortcutStageUI);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GuideMissionOpenStageConditionExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GuideMissionOpenStageConditionExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GuideMissionOpenStageConditionExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GuideMissionOpenStageConditionExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GuideMissionOpenStageConditionExcel");
      ds.field("SeasonId", &self.SeasonId());
      ds.field("OrderNumber", &self.OrderNumber());
      ds.field("TabLocalizeCode", &self.TabLocalizeCode());
      ds.field("ClearScenarioModeId", &self.ClearScenarioModeId());
      ds.field("LockScenarioTextLocailzeCode", &self.LockScenarioTextLocailzeCode());
      ds.field("ShortcutScenarioUI", &self.ShortcutScenarioUI());
      ds.field("ClearStageId", &self.ClearStageId());
      ds.field("LockStageTextLocailzeCode", &self.LockStageTextLocailzeCode());
      ds.field("ShortcutStageUI", &self.ShortcutStageUI());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GuideMissionOpenStageConditionExcelT {
  pub SeasonId: i64,
  pub OrderNumber: i64,
  pub TabLocalizeCode: Option<String>,
  pub ClearScenarioModeId: i64,
  pub LockScenarioTextLocailzeCode: Option<String>,
  pub ShortcutScenarioUI: Option<String>,
  pub ClearStageId: i64,
  pub LockStageTextLocailzeCode: Option<String>,
  pub ShortcutStageUI: Option<String>,
}
impl Default for GuideMissionOpenStageConditionExcelT {
  fn default() -> Self {
    Self {
      SeasonId: 0,
      OrderNumber: 0,
      TabLocalizeCode: None,
      ClearScenarioModeId: 0,
      LockScenarioTextLocailzeCode: None,
      ShortcutScenarioUI: None,
      ClearStageId: 0,
      LockStageTextLocailzeCode: None,
      ShortcutStageUI: None,
    }
  }
}
impl GuideMissionOpenStageConditionExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GuideMissionOpenStageConditionExcel<'b>> {
    let SeasonId = self.SeasonId;
    let OrderNumber = self.OrderNumber;
    let TabLocalizeCode = self.TabLocalizeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ClearScenarioModeId = self.ClearScenarioModeId;
    let LockScenarioTextLocailzeCode = self.LockScenarioTextLocailzeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShortcutScenarioUI = self.ShortcutScenarioUI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ClearStageId = self.ClearStageId;
    let LockStageTextLocailzeCode = self.LockStageTextLocailzeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ShortcutStageUI = self.ShortcutStageUI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    GuideMissionOpenStageConditionExcel::create(_fbb, &GuideMissionOpenStageConditionExcelArgs{
      SeasonId,
      OrderNumber,
      TabLocalizeCode,
      ClearScenarioModeId,
      LockScenarioTextLocailzeCode,
      ShortcutScenarioUI,
      ClearStageId,
      LockStageTextLocailzeCode,
      ShortcutStageUI,
    })
  }
}
