// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GroundNodeFlatOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GroundNodeFlat<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GroundNodeFlat<'a> {
  type Inner = GroundNodeFlat<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GroundNodeFlat<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_ISCANNOTUSESKILL: flatbuffers::VOffsetT = 8;
  pub const VT_POSITIONOFFSET: flatbuffers::VOffsetT = 10;
  pub const VT_NODETYPE: flatbuffers::VOffsetT = 12;
  pub const VT_ORIGINALNODETYPE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GroundNodeFlat { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GroundNodeFlatArgs<'args>
  ) -> flatbuffers::WIPOffset<GroundNodeFlat<'bldr>> {
    let mut builder = GroundNodeFlatBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"GroundNod");
      let x = args.OriginalNodeType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_OriginalNodeType(x);
      let x = args.NodeType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_NodeType(x);
      if let Some(x) = args.PositionOffset {
        builder.add_PositionOffset(x);
      }
      let x = args.Y;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Y(x);
      let x = args.X;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_X(x);
      builder.add_IsCanNotUseSkill(args.IsCanNotUseSkill);
    builder.finish()
  }

  pub fn unpack(&self) -> GroundNodeFlatT {
    let key = table_encryption_service::create_key(b"GroundNod");
      let X = self.X();
      let Y = self.Y();
      let IsCanNotUseSkill = self.IsCanNotUseSkill();
    let PositionOffset = self.PositionOffset().map(|x| {
      Box::new(x.unpack())
    });
      let NodeType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.NodeType(), &key)
      } else {
        self.NodeType()
      };
      let OriginalNodeType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.OriginalNodeType(), &key)
      } else {
        self.OriginalNodeType()
      };
    GroundNodeFlatT {
      X,
      Y,
      IsCanNotUseSkill,
      PositionOffset,
      NodeType,
      OriginalNodeType,
    }
  }

  #[inline]
  pub fn X(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GroundNodeFlat::VT_X, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Y(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GroundNodeFlat::VT_Y, Some(0)).unwrap()}
  }
  #[inline]
  pub fn IsCanNotUseSkill(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(GroundNodeFlat::VT_ISCANNOTUSESKILL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn PositionOffset(&self) -> Option<GroundVector3<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<GroundVector3>>(GroundNodeFlat::VT_POSITIONOFFSET, None)}
  }
  #[inline]
  pub fn NodeType(&self) -> GroundNodeType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GroundNodeType>(GroundNodeFlat::VT_NODETYPE, Some(GroundNodeType::None)).unwrap()}
  }
  #[inline]
  pub fn OriginalNodeType(&self) -> GroundNodeType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GroundNodeType>(GroundNodeFlat::VT_ORIGINALNODETYPE, Some(GroundNodeType::None)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GroundNodeFlat<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("X", Self::VT_X, false)?
     .visit_field::<i32>("Y", Self::VT_Y, false)?
     .visit_field::<bool>("IsCanNotUseSkill", Self::VT_ISCANNOTUSESKILL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<GroundVector3>>("PositionOffset", Self::VT_POSITIONOFFSET, false)?
     .visit_field::<GroundNodeType>("NodeType", Self::VT_NODETYPE, false)?
     .visit_field::<GroundNodeType>("OriginalNodeType", Self::VT_ORIGINALNODETYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct GroundNodeFlatArgs<'a> {
    pub X: i32,
    pub Y: i32,
    pub IsCanNotUseSkill: bool,
    pub PositionOffset: Option<flatbuffers::WIPOffset<GroundVector3<'a>>>,
    pub NodeType: GroundNodeType,
    pub OriginalNodeType: GroundNodeType,
}
impl<'a> Default for GroundNodeFlatArgs<'a> {
  #[inline]
  fn default() -> Self {
    GroundNodeFlatArgs {
      X: 0,
      Y: 0,
      IsCanNotUseSkill: false,
      PositionOffset: None,
      NodeType: GroundNodeType::None,
      OriginalNodeType: GroundNodeType::None,
    }
  }
}

impl Serialize for GroundNodeFlat<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("GroundNodeFlat", 6)?;
      s.serialize_field("X", &self.X())?;
      s.serialize_field("Y", &self.Y())?;
      s.serialize_field("IsCanNotUseSkill", &self.IsCanNotUseSkill())?;
      if let Some(f) = self.PositionOffset() {
        s.serialize_field("PositionOffset", &f)?;
      } else {
        s.skip_field("PositionOffset")?;
      }
      s.serialize_field("NodeType", &self.NodeType())?;
      s.serialize_field("OriginalNodeType", &self.OriginalNodeType())?;
    s.end()
  }
}

pub struct GroundNodeFlatBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GroundNodeFlatBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_X(&mut self, X: i32) {
    self.fbb_.push_slot::<i32>(GroundNodeFlat::VT_X, X, 0);
  }
  #[inline]
  pub fn add_Y(&mut self, Y: i32) {
    self.fbb_.push_slot::<i32>(GroundNodeFlat::VT_Y, Y, 0);
  }
  #[inline]
  pub fn add_IsCanNotUseSkill(&mut self, IsCanNotUseSkill: bool) {
    self.fbb_.push_slot::<bool>(GroundNodeFlat::VT_ISCANNOTUSESKILL, IsCanNotUseSkill, false);
  }
  #[inline]
  pub fn add_PositionOffset(&mut self, PositionOffset: flatbuffers::WIPOffset<GroundVector3<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<GroundVector3>>(GroundNodeFlat::VT_POSITIONOFFSET, PositionOffset);
  }
  #[inline]
  pub fn add_NodeType(&mut self, NodeType: GroundNodeType) {
    self.fbb_.push_slot::<GroundNodeType>(GroundNodeFlat::VT_NODETYPE, NodeType, GroundNodeType::None);
  }
  #[inline]
  pub fn add_OriginalNodeType(&mut self, OriginalNodeType: GroundNodeType) {
    self.fbb_.push_slot::<GroundNodeType>(GroundNodeFlat::VT_ORIGINALNODETYPE, OriginalNodeType, GroundNodeType::None);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GroundNodeFlatBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GroundNodeFlatBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GroundNodeFlat<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GroundNodeFlat<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GroundNodeFlat");
      ds.field("X", &self.X());
      ds.field("Y", &self.Y());
      ds.field("IsCanNotUseSkill", &self.IsCanNotUseSkill());
      ds.field("PositionOffset", &self.PositionOffset());
      ds.field("NodeType", &self.NodeType());
      ds.field("OriginalNodeType", &self.OriginalNodeType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GroundNodeFlatT {
  pub X: i32,
  pub Y: i32,
  pub IsCanNotUseSkill: bool,
  pub PositionOffset: Option<Box<GroundVector3T>>,
  pub NodeType: GroundNodeType,
  pub OriginalNodeType: GroundNodeType,
}
impl Default for GroundNodeFlatT {
  fn default() -> Self {
    Self {
      X: 0,
      Y: 0,
      IsCanNotUseSkill: false,
      PositionOffset: None,
      NodeType: GroundNodeType::None,
      OriginalNodeType: GroundNodeType::None,
    }
  }
}
impl GroundNodeFlatT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GroundNodeFlat<'b>> {
    let X = self.X;
    let Y = self.Y;
    let IsCanNotUseSkill = self.IsCanNotUseSkill;
    let PositionOffset = self.PositionOffset.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let NodeType = self.NodeType;
    let OriginalNodeType = self.OriginalNodeType;
    GroundNodeFlat::create(_fbb, &GroundNodeFlatArgs{
      X,
      Y,
      IsCanNotUseSkill,
      PositionOffset,
      NodeType,
      OriginalNodeType,
    })
  }
}
