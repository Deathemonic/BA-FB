// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventContentArchiveBannerOffsetExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventContentArchiveBannerOffsetExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventContentArchiveBannerOffsetExcel<'a> {
  type Inner = EventContentArchiveBannerOffsetExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventContentArchiveBannerOffsetExcel<'a> {
  pub const VT_EVENTCONTENTID: flatbuffers::VOffsetT = 4;
  pub const VT_OFFSETX: flatbuffers::VOffsetT = 6;
  pub const VT_OFFSETY: flatbuffers::VOffsetT = 8;
  pub const VT_SCALEX: flatbuffers::VOffsetT = 10;
  pub const VT_SCALEY: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventContentArchiveBannerOffsetExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventContentArchiveBannerOffsetExcelArgs
  ) -> flatbuffers::WIPOffset<EventContentArchiveBannerOffsetExcel<'bldr>> {
    let mut builder = EventContentArchiveBannerOffsetExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"EventContentArchiveBannerOffset");
      let x = args.EventContentId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EventContentId(x);
      let x = args.ScaleY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ScaleY(x);
      let x = args.ScaleX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_ScaleX(x);
      let x = args.OffsetY;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_OffsetY(x);
      let x = args.OffsetX;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::encrypt_float(x, &key) } else { x };
      builder.add_OffsetX(x);
    builder.finish()
  }

  pub fn unpack(&self) -> EventContentArchiveBannerOffsetExcelT {
    let key = table_encryption_service::create_key(b"EventContentArchiveBannerOffset");
      let EventContentId = self.EventContentId();
      let OffsetX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.OffsetX(), &key)
      } else {
        self.OffsetX()
      };
      let OffsetY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.OffsetY(), &key)
      } else {
        self.OffsetY()
      };
      let ScaleX = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ScaleX(), &key)
      } else {
        self.ScaleX()
      };
      let ScaleY = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_float(self.ScaleY(), &key)
      } else {
        self.ScaleY()
      };
    EventContentArchiveBannerOffsetExcelT {
      EventContentId,
      OffsetX,
      OffsetY,
      ScaleX,
      ScaleY,
    }
  }

  #[inline]
  pub fn EventContentId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EventContentArchiveBannerOffsetExcel::VT_EVENTCONTENTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn OffsetX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentArchiveBannerOffsetExcel::VT_OFFSETX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn OffsetY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentArchiveBannerOffsetExcel::VT_OFFSETY, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ScaleX(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentArchiveBannerOffsetExcel::VT_SCALEX, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn ScaleY(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(EventContentArchiveBannerOffsetExcel::VT_SCALEY, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EventContentArchiveBannerOffsetExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EventContentId", Self::VT_EVENTCONTENTID, false)?
     .visit_field::<f32>("OffsetX", Self::VT_OFFSETX, false)?
     .visit_field::<f32>("OffsetY", Self::VT_OFFSETY, false)?
     .visit_field::<f32>("ScaleX", Self::VT_SCALEX, false)?
     .visit_field::<f32>("ScaleY", Self::VT_SCALEY, false)?
     .finish();
    Ok(())
  }
}
pub struct EventContentArchiveBannerOffsetExcelArgs {
    pub EventContentId: i64,
    pub OffsetX: f32,
    pub OffsetY: f32,
    pub ScaleX: f32,
    pub ScaleY: f32,
}
impl<'a> Default for EventContentArchiveBannerOffsetExcelArgs {
  #[inline]
  fn default() -> Self {
    EventContentArchiveBannerOffsetExcelArgs {
      EventContentId: 0,
      OffsetX: 0.0,
      OffsetY: 0.0,
      ScaleX: 0.0,
      ScaleY: 0.0,
    }
  }
}

impl Serialize for EventContentArchiveBannerOffsetExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EventContentArchiveBannerOffsetExcel", 5)?;
      s.serialize_field("EventContentId", &self.EventContentId())?;
      s.serialize_field("OffsetX", &self.OffsetX())?;
      s.serialize_field("OffsetY", &self.OffsetY())?;
      s.serialize_field("ScaleX", &self.ScaleX())?;
      s.serialize_field("ScaleY", &self.ScaleY())?;
    s.end()
  }
}

pub struct EventContentArchiveBannerOffsetExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventContentArchiveBannerOffsetExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EventContentId(&mut self, EventContentId: i64) {
    self.fbb_.push_slot::<i64>(EventContentArchiveBannerOffsetExcel::VT_EVENTCONTENTID, EventContentId, 0);
  }
  #[inline]
  pub fn add_OffsetX(&mut self, OffsetX: f32) {
    self.fbb_.push_slot::<f32>(EventContentArchiveBannerOffsetExcel::VT_OFFSETX, OffsetX, 0.0);
  }
  #[inline]
  pub fn add_OffsetY(&mut self, OffsetY: f32) {
    self.fbb_.push_slot::<f32>(EventContentArchiveBannerOffsetExcel::VT_OFFSETY, OffsetY, 0.0);
  }
  #[inline]
  pub fn add_ScaleX(&mut self, ScaleX: f32) {
    self.fbb_.push_slot::<f32>(EventContentArchiveBannerOffsetExcel::VT_SCALEX, ScaleX, 0.0);
  }
  #[inline]
  pub fn add_ScaleY(&mut self, ScaleY: f32) {
    self.fbb_.push_slot::<f32>(EventContentArchiveBannerOffsetExcel::VT_SCALEY, ScaleY, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventContentArchiveBannerOffsetExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventContentArchiveBannerOffsetExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventContentArchiveBannerOffsetExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventContentArchiveBannerOffsetExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventContentArchiveBannerOffsetExcel");
      ds.field("EventContentId", &self.EventContentId());
      ds.field("OffsetX", &self.OffsetX());
      ds.field("OffsetY", &self.OffsetY());
      ds.field("ScaleX", &self.ScaleX());
      ds.field("ScaleY", &self.ScaleY());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EventContentArchiveBannerOffsetExcelT {
  pub EventContentId: i64,
  pub OffsetX: f32,
  pub OffsetY: f32,
  pub ScaleX: f32,
  pub ScaleY: f32,
}
impl Default for EventContentArchiveBannerOffsetExcelT {
  fn default() -> Self {
    Self {
      EventContentId: 0,
      OffsetX: 0.0,
      OffsetY: 0.0,
      ScaleX: 0.0,
      ScaleY: 0.0,
    }
  }
}
impl EventContentArchiveBannerOffsetExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EventContentArchiveBannerOffsetExcel<'b>> {
    let EventContentId = self.EventContentId;
    let OffsetX = self.OffsetX;
    let OffsetY = self.OffsetY;
    let ScaleX = self.ScaleX;
    let ScaleY = self.ScaleY;
    EventContentArchiveBannerOffsetExcel::create(_fbb, &EventContentArchiveBannerOffsetExcelArgs{
      EventContentId,
      OffsetX,
      OffsetY,
      ScaleX,
      ScaleY,
    })
  }
}
