// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum BattlePassInfoExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BattlePassInfoExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BattlePassInfoExcel<'a> {
  type Inner = BattlePassInfoExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BattlePassInfoExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_FREEREWARDGROUPID: flatbuffers::VOffsetT = 6;
  pub const VT_PURCHASEREWARDGROUPID: flatbuffers::VOffsetT = 8;
  pub const VT_NORMALPRODUCTGROUPID: flatbuffers::VOffsetT = 10;
  pub const VT_PREMIUMPRODUCTGROUPID: flatbuffers::VOffsetT = 12;
  pub const VT_DISCOUNTPREMIUMPRODUCTGROUPID: flatbuffers::VOffsetT = 14;
  pub const VT_NEXTLVNEEDEXP: flatbuffers::VOffsetT = 16;
  pub const VT_PASSLVUPGOODSID: flatbuffers::VOffsetT = 18;
  pub const VT_BUYPREMIUMLVUPAMOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_SALEPERIODFROM: flatbuffers::VOffsetT = 22;
  pub const VT_SALEPERIODTO: flatbuffers::VOffsetT = 24;
  pub const VT_VIDEOID: flatbuffers::VOffsetT = 26;
  pub const VT_FLAVORTEXTGROUPID: flatbuffers::VOffsetT = 28;
  pub const VT_EXCLUSIVEREWARDID: flatbuffers::VOffsetT = 30;
  pub const VT_EXCLUSIVEEMBLEMID: flatbuffers::VOffsetT = 32;
  pub const VT_PASSEXPLOCALIZEETCID: flatbuffers::VOffsetT = 34;
  pub const VT_LOBBYBANNERPATH: flatbuffers::VOffsetT = 36;
  pub const VT_MAINICONPARCELPATH: flatbuffers::VOffsetT = 38;
  pub const VT_PURCHASESTEPPRODUCTIMAGEPATH: flatbuffers::VOffsetT = 40;
  pub const VT_PURCHASESTEPBGIMAGEPATH: flatbuffers::VOffsetT = 42;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BattlePassInfoExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BattlePassInfoExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<BattlePassInfoExcel<'bldr>> {
    let mut builder = BattlePassInfoExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"BattlePassInfo");
      let x = args.ExclusiveEmblemID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExclusiveEmblemID(x);
      let x = args.ExclusiveRewardID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ExclusiveRewardID(x);
      let x = args.FlavorTextGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FlavorTextGroupID(x);
      let x = args.PassLvUpGoodsID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PassLvUpGoodsID(x);
      let x = args.DiscountPremiumProductGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_DiscountPremiumProductGroupID(x);
      let x = args.PremiumProductGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PremiumProductGroupID(x);
      let x = args.NormalProductGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_NormalProductGroupID(x);
      let x = args.PurchaseRewardGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_PurchaseRewardGroupID(x);
      let x = args.FreeRewardGroupID;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_FreeRewardGroupID(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.PurchaseStepBgImagePath {
        builder.add_PurchaseStepBgImagePath(x);
      }
      if let Some(x) = args.PurchaseStepProductImagePath {
        builder.add_PurchaseStepProductImagePath(x);
      }
      if let Some(x) = args.MainIconParcelPath {
        builder.add_MainIconParcelPath(x);
      }
      if let Some(x) = args.LobbyBannerPath {
        builder.add_LobbyBannerPath(x);
      }
      let x = args.PassExpLocalizeEtcId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_PassExpLocalizeEtcId(x);
      if let Some(x) = args.VideoId {
        builder.add_VideoId(x);
      }
      if let Some(x) = args.SalePeriodTo {
        builder.add_SalePeriodTo(x);
      }
      if let Some(x) = args.SalePeriodFrom {
        builder.add_SalePeriodFrom(x);
      }
      let x = args.BuyPremiumLvUpAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_BuyPremiumLvUpAmount(x);
      let x = args.NextLvNeedExp;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_NextLvNeedExp(x);
    builder.finish()
  }

  pub fn unpack(&self) -> BattlePassInfoExcelT {
    let key = table_encryption_service::create_key(b"BattlePassInfo");
      let Id = self.Id();
      let FreeRewardGroupID = self.FreeRewardGroupID();
      let PurchaseRewardGroupID = self.PurchaseRewardGroupID();
      let NormalProductGroupID = self.NormalProductGroupID();
      let PremiumProductGroupID = self.PremiumProductGroupID();
      let DiscountPremiumProductGroupID = self.DiscountPremiumProductGroupID();
      let NextLvNeedExp = self.NextLvNeedExp();
      let PassLvUpGoodsID = self.PassLvUpGoodsID();
      let BuyPremiumLvUpAmount = self.BuyPremiumLvUpAmount();
    let SalePeriodFrom = self.SalePeriodFrom().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SalePeriodTo = self.SalePeriodTo().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let VideoId = self.VideoId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
      let FlavorTextGroupID = self.FlavorTextGroupID();
      let ExclusiveRewardID = self.ExclusiveRewardID();
      let ExclusiveEmblemID = self.ExclusiveEmblemID();
      let PassExpLocalizeEtcId = self.PassExpLocalizeEtcId();
    let LobbyBannerPath = self.LobbyBannerPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let MainIconParcelPath = self.MainIconParcelPath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PurchaseStepProductImagePath = self.PurchaseStepProductImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let PurchaseStepBgImagePath = self.PurchaseStepBgImagePath().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    BattlePassInfoExcelT {
      Id,
      FreeRewardGroupID,
      PurchaseRewardGroupID,
      NormalProductGroupID,
      PremiumProductGroupID,
      DiscountPremiumProductGroupID,
      NextLvNeedExp,
      PassLvUpGoodsID,
      BuyPremiumLvUpAmount,
      SalePeriodFrom,
      SalePeriodTo,
      VideoId,
      FlavorTextGroupID,
      ExclusiveRewardID,
      ExclusiveEmblemID,
      PassExpLocalizeEtcId,
      LobbyBannerPath,
      MainIconParcelPath,
      PurchaseStepProductImagePath,
      PurchaseStepBgImagePath,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn FreeRewardGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_FREEREWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PurchaseRewardGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_PURCHASEREWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NormalProductGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_NORMALPRODUCTGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PremiumProductGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_PREMIUMPRODUCTGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn DiscountPremiumProductGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_DISCOUNTPREMIUMPRODUCTGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn NextLvNeedExp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattlePassInfoExcel::VT_NEXTLVNEEDEXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PassLvUpGoodsID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_PASSLVUPGOODSID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BuyPremiumLvUpAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BattlePassInfoExcel::VT_BUYPREMIUMLVUPAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SalePeriodFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassInfoExcel::VT_SALEPERIODFROM, None)}
  }
  #[inline]
  pub fn SalePeriodTo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassInfoExcel::VT_SALEPERIODTO, None)}
  }
  #[inline]
  pub fn VideoId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(BattlePassInfoExcel::VT_VIDEOID, None)}
  }
  #[inline]
  pub fn FlavorTextGroupID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_FLAVORTEXTGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExclusiveRewardID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_EXCLUSIVEREWARDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ExclusiveEmblemID(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(BattlePassInfoExcel::VT_EXCLUSIVEEMBLEMID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn PassExpLocalizeEtcId(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(BattlePassInfoExcel::VT_PASSEXPLOCALIZEETCID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LobbyBannerPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassInfoExcel::VT_LOBBYBANNERPATH, None)}
  }
  #[inline]
  pub fn MainIconParcelPath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassInfoExcel::VT_MAINICONPARCELPATH, None)}
  }
  #[inline]
  pub fn PurchaseStepProductImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassInfoExcel::VT_PURCHASESTEPPRODUCTIMAGEPATH, None)}
  }
  #[inline]
  pub fn PurchaseStepBgImagePath(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BattlePassInfoExcel::VT_PURCHASESTEPBGIMAGEPATH, None)}
  }
}

impl flatbuffers::Verifiable for BattlePassInfoExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<i64>("FreeRewardGroupID", Self::VT_FREEREWARDGROUPID, false)?
     .visit_field::<i64>("PurchaseRewardGroupID", Self::VT_PURCHASEREWARDGROUPID, false)?
     .visit_field::<i64>("NormalProductGroupID", Self::VT_NORMALPRODUCTGROUPID, false)?
     .visit_field::<i64>("PremiumProductGroupID", Self::VT_PREMIUMPRODUCTGROUPID, false)?
     .visit_field::<i64>("DiscountPremiumProductGroupID", Self::VT_DISCOUNTPREMIUMPRODUCTGROUPID, false)?
     .visit_field::<i32>("NextLvNeedExp", Self::VT_NEXTLVNEEDEXP, false)?
     .visit_field::<i64>("PassLvUpGoodsID", Self::VT_PASSLVUPGOODSID, false)?
     .visit_field::<i32>("BuyPremiumLvUpAmount", Self::VT_BUYPREMIUMLVUPAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodFrom", Self::VT_SALEPERIODFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SalePeriodTo", Self::VT_SALEPERIODTO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("VideoId", Self::VT_VIDEOID, false)?
     .visit_field::<i64>("FlavorTextGroupID", Self::VT_FLAVORTEXTGROUPID, false)?
     .visit_field::<i64>("ExclusiveRewardID", Self::VT_EXCLUSIVEREWARDID, false)?
     .visit_field::<i64>("ExclusiveEmblemID", Self::VT_EXCLUSIVEEMBLEMID, false)?
     .visit_field::<u32>("PassExpLocalizeEtcId", Self::VT_PASSEXPLOCALIZEETCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("LobbyBannerPath", Self::VT_LOBBYBANNERPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("MainIconParcelPath", Self::VT_MAINICONPARCELPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PurchaseStepProductImagePath", Self::VT_PURCHASESTEPPRODUCTIMAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("PurchaseStepBgImagePath", Self::VT_PURCHASESTEPBGIMAGEPATH, false)?
     .finish();
    Ok(())
  }
}
pub struct BattlePassInfoExcelArgs<'a> {
    pub Id: i64,
    pub FreeRewardGroupID: i64,
    pub PurchaseRewardGroupID: i64,
    pub NormalProductGroupID: i64,
    pub PremiumProductGroupID: i64,
    pub DiscountPremiumProductGroupID: i64,
    pub NextLvNeedExp: i32,
    pub PassLvUpGoodsID: i64,
    pub BuyPremiumLvUpAmount: i32,
    pub SalePeriodFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SalePeriodTo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub VideoId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub FlavorTextGroupID: i64,
    pub ExclusiveRewardID: i64,
    pub ExclusiveEmblemID: i64,
    pub PassExpLocalizeEtcId: u32,
    pub LobbyBannerPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub MainIconParcelPath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PurchaseStepProductImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub PurchaseStepBgImagePath: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for BattlePassInfoExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    BattlePassInfoExcelArgs {
      Id: 0,
      FreeRewardGroupID: 0,
      PurchaseRewardGroupID: 0,
      NormalProductGroupID: 0,
      PremiumProductGroupID: 0,
      DiscountPremiumProductGroupID: 0,
      NextLvNeedExp: 0,
      PassLvUpGoodsID: 0,
      BuyPremiumLvUpAmount: 0,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      VideoId: None,
      FlavorTextGroupID: 0,
      ExclusiveRewardID: 0,
      ExclusiveEmblemID: 0,
      PassExpLocalizeEtcId: 0,
      LobbyBannerPath: None,
      MainIconParcelPath: None,
      PurchaseStepProductImagePath: None,
      PurchaseStepBgImagePath: None,
    }
  }
}

impl Serialize for BattlePassInfoExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("BattlePassInfoExcel", 20)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("FreeRewardGroupID", &self.FreeRewardGroupID())?;
      s.serialize_field("PurchaseRewardGroupID", &self.PurchaseRewardGroupID())?;
      s.serialize_field("NormalProductGroupID", &self.NormalProductGroupID())?;
      s.serialize_field("PremiumProductGroupID", &self.PremiumProductGroupID())?;
      s.serialize_field("DiscountPremiumProductGroupID", &self.DiscountPremiumProductGroupID())?;
      s.serialize_field("NextLvNeedExp", &self.NextLvNeedExp())?;
      s.serialize_field("PassLvUpGoodsID", &self.PassLvUpGoodsID())?;
      s.serialize_field("BuyPremiumLvUpAmount", &self.BuyPremiumLvUpAmount())?;
      if let Some(f) = self.SalePeriodFrom() {
        s.serialize_field("SalePeriodFrom", &f)?;
      } else {
        s.skip_field("SalePeriodFrom")?;
      }
      if let Some(f) = self.SalePeriodTo() {
        s.serialize_field("SalePeriodTo", &f)?;
      } else {
        s.skip_field("SalePeriodTo")?;
      }
      if let Some(f) = self.VideoId() {
        s.serialize_field("VideoId", &f)?;
      } else {
        s.skip_field("VideoId")?;
      }
      s.serialize_field("FlavorTextGroupID", &self.FlavorTextGroupID())?;
      s.serialize_field("ExclusiveRewardID", &self.ExclusiveRewardID())?;
      s.serialize_field("ExclusiveEmblemID", &self.ExclusiveEmblemID())?;
      s.serialize_field("PassExpLocalizeEtcId", &self.PassExpLocalizeEtcId())?;
      if let Some(f) = self.LobbyBannerPath() {
        s.serialize_field("LobbyBannerPath", &f)?;
      } else {
        s.skip_field("LobbyBannerPath")?;
      }
      if let Some(f) = self.MainIconParcelPath() {
        s.serialize_field("MainIconParcelPath", &f)?;
      } else {
        s.skip_field("MainIconParcelPath")?;
      }
      if let Some(f) = self.PurchaseStepProductImagePath() {
        s.serialize_field("PurchaseStepProductImagePath", &f)?;
      } else {
        s.skip_field("PurchaseStepProductImagePath")?;
      }
      if let Some(f) = self.PurchaseStepBgImagePath() {
        s.serialize_field("PurchaseStepBgImagePath", &f)?;
      } else {
        s.skip_field("PurchaseStepBgImagePath")?;
      }
    s.end()
  }
}

pub struct BattlePassInfoExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BattlePassInfoExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_FreeRewardGroupID(&mut self, FreeRewardGroupID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_FREEREWARDGROUPID, FreeRewardGroupID, 0);
  }
  #[inline]
  pub fn add_PurchaseRewardGroupID(&mut self, PurchaseRewardGroupID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_PURCHASEREWARDGROUPID, PurchaseRewardGroupID, 0);
  }
  #[inline]
  pub fn add_NormalProductGroupID(&mut self, NormalProductGroupID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_NORMALPRODUCTGROUPID, NormalProductGroupID, 0);
  }
  #[inline]
  pub fn add_PremiumProductGroupID(&mut self, PremiumProductGroupID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_PREMIUMPRODUCTGROUPID, PremiumProductGroupID, 0);
  }
  #[inline]
  pub fn add_DiscountPremiumProductGroupID(&mut self, DiscountPremiumProductGroupID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_DISCOUNTPREMIUMPRODUCTGROUPID, DiscountPremiumProductGroupID, 0);
  }
  #[inline]
  pub fn add_NextLvNeedExp(&mut self, NextLvNeedExp: i32) {
    self.fbb_.push_slot::<i32>(BattlePassInfoExcel::VT_NEXTLVNEEDEXP, NextLvNeedExp, 0);
  }
  #[inline]
  pub fn add_PassLvUpGoodsID(&mut self, PassLvUpGoodsID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_PASSLVUPGOODSID, PassLvUpGoodsID, 0);
  }
  #[inline]
  pub fn add_BuyPremiumLvUpAmount(&mut self, BuyPremiumLvUpAmount: i32) {
    self.fbb_.push_slot::<i32>(BattlePassInfoExcel::VT_BUYPREMIUMLVUPAMOUNT, BuyPremiumLvUpAmount, 0);
  }
  #[inline]
  pub fn add_SalePeriodFrom(&mut self, SalePeriodFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassInfoExcel::VT_SALEPERIODFROM, SalePeriodFrom);
  }
  #[inline]
  pub fn add_SalePeriodTo(&mut self, SalePeriodTo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassInfoExcel::VT_SALEPERIODTO, SalePeriodTo);
  }
  #[inline]
  pub fn add_VideoId(&mut self, VideoId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassInfoExcel::VT_VIDEOID, VideoId);
  }
  #[inline]
  pub fn add_FlavorTextGroupID(&mut self, FlavorTextGroupID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_FLAVORTEXTGROUPID, FlavorTextGroupID, 0);
  }
  #[inline]
  pub fn add_ExclusiveRewardID(&mut self, ExclusiveRewardID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_EXCLUSIVEREWARDID, ExclusiveRewardID, 0);
  }
  #[inline]
  pub fn add_ExclusiveEmblemID(&mut self, ExclusiveEmblemID: i64) {
    self.fbb_.push_slot::<i64>(BattlePassInfoExcel::VT_EXCLUSIVEEMBLEMID, ExclusiveEmblemID, 0);
  }
  #[inline]
  pub fn add_PassExpLocalizeEtcId(&mut self, PassExpLocalizeEtcId: u32) {
    self.fbb_.push_slot::<u32>(BattlePassInfoExcel::VT_PASSEXPLOCALIZEETCID, PassExpLocalizeEtcId, 0);
  }
  #[inline]
  pub fn add_LobbyBannerPath(&mut self, LobbyBannerPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassInfoExcel::VT_LOBBYBANNERPATH, LobbyBannerPath);
  }
  #[inline]
  pub fn add_MainIconParcelPath(&mut self, MainIconParcelPath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassInfoExcel::VT_MAINICONPARCELPATH, MainIconParcelPath);
  }
  #[inline]
  pub fn add_PurchaseStepProductImagePath(&mut self, PurchaseStepProductImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassInfoExcel::VT_PURCHASESTEPPRODUCTIMAGEPATH, PurchaseStepProductImagePath);
  }
  #[inline]
  pub fn add_PurchaseStepBgImagePath(&mut self, PurchaseStepBgImagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BattlePassInfoExcel::VT_PURCHASESTEPBGIMAGEPATH, PurchaseStepBgImagePath);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BattlePassInfoExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BattlePassInfoExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BattlePassInfoExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BattlePassInfoExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BattlePassInfoExcel");
      ds.field("Id", &self.Id());
      ds.field("FreeRewardGroupID", &self.FreeRewardGroupID());
      ds.field("PurchaseRewardGroupID", &self.PurchaseRewardGroupID());
      ds.field("NormalProductGroupID", &self.NormalProductGroupID());
      ds.field("PremiumProductGroupID", &self.PremiumProductGroupID());
      ds.field("DiscountPremiumProductGroupID", &self.DiscountPremiumProductGroupID());
      ds.field("NextLvNeedExp", &self.NextLvNeedExp());
      ds.field("PassLvUpGoodsID", &self.PassLvUpGoodsID());
      ds.field("BuyPremiumLvUpAmount", &self.BuyPremiumLvUpAmount());
      ds.field("SalePeriodFrom", &self.SalePeriodFrom());
      ds.field("SalePeriodTo", &self.SalePeriodTo());
      ds.field("VideoId", &self.VideoId());
      ds.field("FlavorTextGroupID", &self.FlavorTextGroupID());
      ds.field("ExclusiveRewardID", &self.ExclusiveRewardID());
      ds.field("ExclusiveEmblemID", &self.ExclusiveEmblemID());
      ds.field("PassExpLocalizeEtcId", &self.PassExpLocalizeEtcId());
      ds.field("LobbyBannerPath", &self.LobbyBannerPath());
      ds.field("MainIconParcelPath", &self.MainIconParcelPath());
      ds.field("PurchaseStepProductImagePath", &self.PurchaseStepProductImagePath());
      ds.field("PurchaseStepBgImagePath", &self.PurchaseStepBgImagePath());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BattlePassInfoExcelT {
  pub Id: i64,
  pub FreeRewardGroupID: i64,
  pub PurchaseRewardGroupID: i64,
  pub NormalProductGroupID: i64,
  pub PremiumProductGroupID: i64,
  pub DiscountPremiumProductGroupID: i64,
  pub NextLvNeedExp: i32,
  pub PassLvUpGoodsID: i64,
  pub BuyPremiumLvUpAmount: i32,
  pub SalePeriodFrom: Option<String>,
  pub SalePeriodTo: Option<String>,
  pub VideoId: Option<Vec<i64>>,
  pub FlavorTextGroupID: i64,
  pub ExclusiveRewardID: i64,
  pub ExclusiveEmblemID: i64,
  pub PassExpLocalizeEtcId: u32,
  pub LobbyBannerPath: Option<String>,
  pub MainIconParcelPath: Option<String>,
  pub PurchaseStepProductImagePath: Option<String>,
  pub PurchaseStepBgImagePath: Option<String>,
}
impl Default for BattlePassInfoExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      FreeRewardGroupID: 0,
      PurchaseRewardGroupID: 0,
      NormalProductGroupID: 0,
      PremiumProductGroupID: 0,
      DiscountPremiumProductGroupID: 0,
      NextLvNeedExp: 0,
      PassLvUpGoodsID: 0,
      BuyPremiumLvUpAmount: 0,
      SalePeriodFrom: None,
      SalePeriodTo: None,
      VideoId: None,
      FlavorTextGroupID: 0,
      ExclusiveRewardID: 0,
      ExclusiveEmblemID: 0,
      PassExpLocalizeEtcId: 0,
      LobbyBannerPath: None,
      MainIconParcelPath: None,
      PurchaseStepProductImagePath: None,
      PurchaseStepBgImagePath: None,
    }
  }
}
impl BattlePassInfoExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BattlePassInfoExcel<'b>> {
    let Id = self.Id;
    let FreeRewardGroupID = self.FreeRewardGroupID;
    let PurchaseRewardGroupID = self.PurchaseRewardGroupID;
    let NormalProductGroupID = self.NormalProductGroupID;
    let PremiumProductGroupID = self.PremiumProductGroupID;
    let DiscountPremiumProductGroupID = self.DiscountPremiumProductGroupID;
    let NextLvNeedExp = self.NextLvNeedExp;
    let PassLvUpGoodsID = self.PassLvUpGoodsID;
    let BuyPremiumLvUpAmount = self.BuyPremiumLvUpAmount;
    let SalePeriodFrom = self.SalePeriodFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SalePeriodTo = self.SalePeriodTo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let VideoId = self.VideoId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let FlavorTextGroupID = self.FlavorTextGroupID;
    let ExclusiveRewardID = self.ExclusiveRewardID;
    let ExclusiveEmblemID = self.ExclusiveEmblemID;
    let PassExpLocalizeEtcId = self.PassExpLocalizeEtcId;
    let LobbyBannerPath = self.LobbyBannerPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let MainIconParcelPath = self.MainIconParcelPath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PurchaseStepProductImagePath = self.PurchaseStepProductImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let PurchaseStepBgImagePath = self.PurchaseStepBgImagePath.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    BattlePassInfoExcel::create(_fbb, &BattlePassInfoExcelArgs{
      Id,
      FreeRewardGroupID,
      PurchaseRewardGroupID,
      NormalProductGroupID,
      PremiumProductGroupID,
      DiscountPremiumProductGroupID,
      NextLvNeedExp,
      PassLvUpGoodsID,
      BuyPremiumLvUpAmount,
      SalePeriodFrom,
      SalePeriodTo,
      VideoId,
      FlavorTextGroupID,
      ExclusiveRewardID,
      ExclusiveEmblemID,
      PassExpLocalizeEtcId,
      LobbyBannerPath,
      MainIconParcelPath,
      PurchaseStepProductImagePath,
      PurchaseStepBgImagePath,
    })
  }
}
