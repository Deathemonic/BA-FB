// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CouponStuffExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CouponStuffExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CouponStuffExcel<'a> {
  type Inner = CouponStuffExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CouponStuffExcel<'a> {
  pub const VT_STUFFID: flatbuffers::VOffsetT = 4;
  pub const VT_PARCELTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_PARCELID: flatbuffers::VOffsetT = 8;
  pub const VT_LIMITAMOUNT: flatbuffers::VOffsetT = 10;
  pub const VT_COUPONSTUFFNAMELOCALIZEKEY: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CouponStuffExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CouponStuffExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CouponStuffExcel<'bldr>> {
    let mut builder = CouponStuffExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"CouponStuff");
      let x = args.ParcelId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ParcelId(x);
      let x = args.StuffId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StuffId(x);
      if let Some(x) = args.CouponStuffNameLocalizeKey {
        builder.add_CouponStuffNameLocalizeKey(x);
      }
      let x = args.LimitAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_LimitAmount(x);
      let x = args.ParcelType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ParcelType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> CouponStuffExcelT {
    let key = table_encryption_service::create_key(b"CouponStuff");
      let StuffId = self.StuffId();
      let ParcelType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ParcelType(), &key)
      } else {
        self.ParcelType()
      };
      let ParcelId = self.ParcelId();
      let LimitAmount = self.LimitAmount();
    let CouponStuffNameLocalizeKey = self.CouponStuffNameLocalizeKey().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    CouponStuffExcelT {
      StuffId,
      ParcelType,
      ParcelId,
      LimitAmount,
      CouponStuffNameLocalizeKey,
    }
  }

  #[inline]
  pub fn StuffId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CouponStuffExcel::VT_STUFFID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ParcelType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(CouponStuffExcel::VT_PARCELTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ParcelId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CouponStuffExcel::VT_PARCELID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn LimitAmount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CouponStuffExcel::VT_LIMITAMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn CouponStuffNameLocalizeKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CouponStuffExcel::VT_COUPONSTUFFNAMELOCALIZEKEY, None)}
  }
}

impl flatbuffers::Verifiable for CouponStuffExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("StuffId", Self::VT_STUFFID, false)?
     .visit_field::<ParcelType>("ParcelType", Self::VT_PARCELTYPE, false)?
     .visit_field::<i64>("ParcelId", Self::VT_PARCELID, false)?
     .visit_field::<i32>("LimitAmount", Self::VT_LIMITAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("CouponStuffNameLocalizeKey", Self::VT_COUPONSTUFFNAMELOCALIZEKEY, false)?
     .finish();
    Ok(())
  }
}
pub struct CouponStuffExcelArgs<'a> {
    pub StuffId: i64,
    pub ParcelType: ParcelType,
    pub ParcelId: i64,
    pub LimitAmount: i32,
    pub CouponStuffNameLocalizeKey: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CouponStuffExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CouponStuffExcelArgs {
      StuffId: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      LimitAmount: 0,
      CouponStuffNameLocalizeKey: None,
    }
  }
}

impl Serialize for CouponStuffExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CouponStuffExcel", 5)?;
      s.serialize_field("StuffId", &self.StuffId())?;
      s.serialize_field("ParcelType", &self.ParcelType())?;
      s.serialize_field("ParcelId", &self.ParcelId())?;
      s.serialize_field("LimitAmount", &self.LimitAmount())?;
      if let Some(f) = self.CouponStuffNameLocalizeKey() {
        s.serialize_field("CouponStuffNameLocalizeKey", &f)?;
      } else {
        s.skip_field("CouponStuffNameLocalizeKey")?;
      }
    s.end()
  }
}

pub struct CouponStuffExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CouponStuffExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_StuffId(&mut self, StuffId: i64) {
    self.fbb_.push_slot::<i64>(CouponStuffExcel::VT_STUFFID, StuffId, 0);
  }
  #[inline]
  pub fn add_ParcelType(&mut self, ParcelType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(CouponStuffExcel::VT_PARCELTYPE, ParcelType, ParcelType::None);
  }
  #[inline]
  pub fn add_ParcelId(&mut self, ParcelId: i64) {
    self.fbb_.push_slot::<i64>(CouponStuffExcel::VT_PARCELID, ParcelId, 0);
  }
  #[inline]
  pub fn add_LimitAmount(&mut self, LimitAmount: i32) {
    self.fbb_.push_slot::<i32>(CouponStuffExcel::VT_LIMITAMOUNT, LimitAmount, 0);
  }
  #[inline]
  pub fn add_CouponStuffNameLocalizeKey(&mut self, CouponStuffNameLocalizeKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CouponStuffExcel::VT_COUPONSTUFFNAMELOCALIZEKEY, CouponStuffNameLocalizeKey);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CouponStuffExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CouponStuffExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CouponStuffExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CouponStuffExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CouponStuffExcel");
      ds.field("StuffId", &self.StuffId());
      ds.field("ParcelType", &self.ParcelType());
      ds.field("ParcelId", &self.ParcelId());
      ds.field("LimitAmount", &self.LimitAmount());
      ds.field("CouponStuffNameLocalizeKey", &self.CouponStuffNameLocalizeKey());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CouponStuffExcelT {
  pub StuffId: i64,
  pub ParcelType: ParcelType,
  pub ParcelId: i64,
  pub LimitAmount: i32,
  pub CouponStuffNameLocalizeKey: Option<String>,
}
impl Default for CouponStuffExcelT {
  fn default() -> Self {
    Self {
      StuffId: 0,
      ParcelType: ParcelType::None,
      ParcelId: 0,
      LimitAmount: 0,
      CouponStuffNameLocalizeKey: None,
    }
  }
}
impl CouponStuffExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CouponStuffExcel<'b>> {
    let StuffId = self.StuffId;
    let ParcelType = self.ParcelType;
    let ParcelId = self.ParcelId;
    let LimitAmount = self.LimitAmount;
    let CouponStuffNameLocalizeKey = self.CouponStuffNameLocalizeKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CouponStuffExcel::create(_fbb, &CouponStuffExcelArgs{
      StuffId,
      ParcelType,
      ParcelId,
      LimitAmount,
      CouponStuffNameLocalizeKey,
    })
  }
}
