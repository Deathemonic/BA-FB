// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ClearDeckRuleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ClearDeckRuleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClearDeckRuleExcel<'a> {
  type Inner = ClearDeckRuleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ClearDeckRuleExcel<'a> {
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_SIZELIMIT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ClearDeckRuleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ClearDeckRuleExcelArgs
  ) -> flatbuffers::WIPOffset<ClearDeckRuleExcel<'bldr>> {
    let mut builder = ClearDeckRuleExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ClearDeckRule");
      let x = args.SizeLimit;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SizeLimit(x);
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ClearDeckRuleExcelT {
    let key = table_encryption_service::create_key(b"ClearDeckRule");
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let SizeLimit = self.SizeLimit();
    ClearDeckRuleExcelT {
      ContentType,
      SizeLimit,
    }
  }

  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(ClearDeckRuleExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn SizeLimit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ClearDeckRuleExcel::VT_SIZELIMIT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ClearDeckRuleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<i64>("SizeLimit", Self::VT_SIZELIMIT, false)?
     .finish();
    Ok(())
  }
}
pub struct ClearDeckRuleExcelArgs {
    pub ContentType: ContentType,
    pub SizeLimit: i64,
}
impl<'a> Default for ClearDeckRuleExcelArgs {
  #[inline]
  fn default() -> Self {
    ClearDeckRuleExcelArgs {
      ContentType: ContentType::None,
      SizeLimit: 0,
    }
  }
}

impl Serialize for ClearDeckRuleExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ClearDeckRuleExcel", 2)?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("SizeLimit", &self.SizeLimit())?;
    s.end()
  }
}

pub struct ClearDeckRuleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ClearDeckRuleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(ClearDeckRuleExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_SizeLimit(&mut self, SizeLimit: i64) {
    self.fbb_.push_slot::<i64>(ClearDeckRuleExcel::VT_SIZELIMIT, SizeLimit, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ClearDeckRuleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ClearDeckRuleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClearDeckRuleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ClearDeckRuleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ClearDeckRuleExcel");
      ds.field("ContentType", &self.ContentType());
      ds.field("SizeLimit", &self.SizeLimit());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ClearDeckRuleExcelT {
  pub ContentType: ContentType,
  pub SizeLimit: i64,
}
impl Default for ClearDeckRuleExcelT {
  fn default() -> Self {
    Self {
      ContentType: ContentType::None,
      SizeLimit: 0,
    }
  }
}
impl ClearDeckRuleExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ClearDeckRuleExcel<'b>> {
    let ContentType = self.ContentType;
    let SizeLimit = self.SizeLimit;
    ClearDeckRuleExcel::create(_fbb, &ClearDeckRuleExcelArgs{
      ContentType,
      SizeLimit,
    })
  }
}
