// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContentEnterCostReduceExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContentEnterCostReduceExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContentEnterCostReduceExcel<'a> {
  type Inner = ContentEnterCostReduceExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContentEnterCostReduceExcel<'a> {
  pub const VT_ENTERCOSTREDUCEGROUPID: flatbuffers::VOffsetT = 4;
  pub const VT_CONTENTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_STAGEID: flatbuffers::VOffsetT = 8;
  pub const VT_REDUCEENTERCOSTTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_REDUCEENTERCOSTID: flatbuffers::VOffsetT = 12;
  pub const VT_REDUCEAMOUNT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContentEnterCostReduceExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContentEnterCostReduceExcelArgs
  ) -> flatbuffers::WIPOffset<ContentEnterCostReduceExcel<'bldr>> {
    let mut builder = ContentEnterCostReduceExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"ContentEnterCostReduce");
      let x = args.ReduceAmount;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ReduceAmount(x);
      let x = args.ReduceEnterCostId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ReduceEnterCostId(x);
      let x = args.StageId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_StageId(x);
      let x = args.EnterCostReduceGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_EnterCostReduceGroupId(x);
      let x = args.ReduceEnterCostType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ReduceEnterCostType(x);
      let x = args.ContentType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_ContentType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> ContentEnterCostReduceExcelT {
    let key = table_encryption_service::create_key(b"ContentEnterCostReduce");
      let EnterCostReduceGroupId = self.EnterCostReduceGroupId();
      let ContentType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ContentType(), &key)
      } else {
        self.ContentType()
      };
      let StageId = self.StageId();
      let ReduceEnterCostType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.ReduceEnterCostType(), &key)
      } else {
        self.ReduceEnterCostType()
      };
      let ReduceEnterCostId = self.ReduceEnterCostId();
      let ReduceAmount = self.ReduceAmount();
    ContentEnterCostReduceExcelT {
      EnterCostReduceGroupId,
      ContentType,
      StageId,
      ReduceEnterCostType,
      ReduceEnterCostId,
      ReduceAmount,
    }
  }

  #[inline]
  pub fn EnterCostReduceGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentEnterCostReduceExcel::VT_ENTERCOSTREDUCEGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ContentType(&self) -> ContentType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ContentType>(ContentEnterCostReduceExcel::VT_CONTENTTYPE, Some(ContentType::None)).unwrap()}
  }
  #[inline]
  pub fn StageId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentEnterCostReduceExcel::VT_STAGEID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReduceEnterCostType(&self) -> ParcelType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ParcelType>(ContentEnterCostReduceExcel::VT_REDUCEENTERCOSTTYPE, Some(ParcelType::None)).unwrap()}
  }
  #[inline]
  pub fn ReduceEnterCostId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentEnterCostReduceExcel::VT_REDUCEENTERCOSTID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ReduceAmount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ContentEnterCostReduceExcel::VT_REDUCEAMOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ContentEnterCostReduceExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("EnterCostReduceGroupId", Self::VT_ENTERCOSTREDUCEGROUPID, false)?
     .visit_field::<ContentType>("ContentType", Self::VT_CONTENTTYPE, false)?
     .visit_field::<i64>("StageId", Self::VT_STAGEID, false)?
     .visit_field::<ParcelType>("ReduceEnterCostType", Self::VT_REDUCEENTERCOSTTYPE, false)?
     .visit_field::<i64>("ReduceEnterCostId", Self::VT_REDUCEENTERCOSTID, false)?
     .visit_field::<i64>("ReduceAmount", Self::VT_REDUCEAMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct ContentEnterCostReduceExcelArgs {
    pub EnterCostReduceGroupId: i64,
    pub ContentType: ContentType,
    pub StageId: i64,
    pub ReduceEnterCostType: ParcelType,
    pub ReduceEnterCostId: i64,
    pub ReduceAmount: i64,
}
impl<'a> Default for ContentEnterCostReduceExcelArgs {
  #[inline]
  fn default() -> Self {
    ContentEnterCostReduceExcelArgs {
      EnterCostReduceGroupId: 0,
      ContentType: ContentType::None,
      StageId: 0,
      ReduceEnterCostType: ParcelType::None,
      ReduceEnterCostId: 0,
      ReduceAmount: 0,
    }
  }
}

impl Serialize for ContentEnterCostReduceExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ContentEnterCostReduceExcel", 6)?;
      s.serialize_field("EnterCostReduceGroupId", &self.EnterCostReduceGroupId())?;
      s.serialize_field("ContentType", &self.ContentType())?;
      s.serialize_field("StageId", &self.StageId())?;
      s.serialize_field("ReduceEnterCostType", &self.ReduceEnterCostType())?;
      s.serialize_field("ReduceEnterCostId", &self.ReduceEnterCostId())?;
      s.serialize_field("ReduceAmount", &self.ReduceAmount())?;
    s.end()
  }
}

pub struct ContentEnterCostReduceExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContentEnterCostReduceExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_EnterCostReduceGroupId(&mut self, EnterCostReduceGroupId: i64) {
    self.fbb_.push_slot::<i64>(ContentEnterCostReduceExcel::VT_ENTERCOSTREDUCEGROUPID, EnterCostReduceGroupId, 0);
  }
  #[inline]
  pub fn add_ContentType(&mut self, ContentType: ContentType) {
    self.fbb_.push_slot::<ContentType>(ContentEnterCostReduceExcel::VT_CONTENTTYPE, ContentType, ContentType::None);
  }
  #[inline]
  pub fn add_StageId(&mut self, StageId: i64) {
    self.fbb_.push_slot::<i64>(ContentEnterCostReduceExcel::VT_STAGEID, StageId, 0);
  }
  #[inline]
  pub fn add_ReduceEnterCostType(&mut self, ReduceEnterCostType: ParcelType) {
    self.fbb_.push_slot::<ParcelType>(ContentEnterCostReduceExcel::VT_REDUCEENTERCOSTTYPE, ReduceEnterCostType, ParcelType::None);
  }
  #[inline]
  pub fn add_ReduceEnterCostId(&mut self, ReduceEnterCostId: i64) {
    self.fbb_.push_slot::<i64>(ContentEnterCostReduceExcel::VT_REDUCEENTERCOSTID, ReduceEnterCostId, 0);
  }
  #[inline]
  pub fn add_ReduceAmount(&mut self, ReduceAmount: i64) {
    self.fbb_.push_slot::<i64>(ContentEnterCostReduceExcel::VT_REDUCEAMOUNT, ReduceAmount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContentEnterCostReduceExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContentEnterCostReduceExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContentEnterCostReduceExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContentEnterCostReduceExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContentEnterCostReduceExcel");
      ds.field("EnterCostReduceGroupId", &self.EnterCostReduceGroupId());
      ds.field("ContentType", &self.ContentType());
      ds.field("StageId", &self.StageId());
      ds.field("ReduceEnterCostType", &self.ReduceEnterCostType());
      ds.field("ReduceEnterCostId", &self.ReduceEnterCostId());
      ds.field("ReduceAmount", &self.ReduceAmount());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ContentEnterCostReduceExcelT {
  pub EnterCostReduceGroupId: i64,
  pub ContentType: ContentType,
  pub StageId: i64,
  pub ReduceEnterCostType: ParcelType,
  pub ReduceEnterCostId: i64,
  pub ReduceAmount: i64,
}
impl Default for ContentEnterCostReduceExcelT {
  fn default() -> Self {
    Self {
      EnterCostReduceGroupId: 0,
      ContentType: ContentType::None,
      StageId: 0,
      ReduceEnterCostType: ParcelType::None,
      ReduceEnterCostId: 0,
      ReduceAmount: 0,
    }
  }
}
impl ContentEnterCostReduceExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ContentEnterCostReduceExcel<'b>> {
    let EnterCostReduceGroupId = self.EnterCostReduceGroupId;
    let ContentType = self.ContentType;
    let StageId = self.StageId;
    let ReduceEnterCostType = self.ReduceEnterCostType;
    let ReduceEnterCostId = self.ReduceEnterCostId;
    let ReduceAmount = self.ReduceAmount;
    ContentEnterCostReduceExcel::create(_fbb, &ContentEnterCostReduceExcelArgs{
      EnterCostReduceGroupId,
      ContentType,
      StageId,
      ReduceEnterCostType,
      ReduceEnterCostId,
      ReduceAmount,
    })
  }
}
