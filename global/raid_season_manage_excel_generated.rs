// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RaidSeasonManageExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RaidSeasonManageExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RaidSeasonManageExcel<'a> {
  type Inner = RaidSeasonManageExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RaidSeasonManageExcel<'a> {
  pub const VT_SEASONID: flatbuffers::VOffsetT = 4;
  pub const VT_SEASONDISPLAY: flatbuffers::VOffsetT = 6;
  pub const VT_SEASONSTARTDATA: flatbuffers::VOffsetT = 8;
  pub const VT_ENDNOTELABELSTARTDATE: flatbuffers::VOffsetT = 10;
  pub const VT_SEASONENDDATA: flatbuffers::VOffsetT = 12;
  pub const VT_SETTLEMENTENDDATE: flatbuffers::VOffsetT = 14;
  pub const VT_OPENRAIDBOSSGROUP: flatbuffers::VOffsetT = 16;
  pub const VT_RANKINGREWARDGROUPID: flatbuffers::VOffsetT = 18;
  pub const VT_MAXSEASONREWARDGAUAGE: flatbuffers::VOffsetT = 20;
  pub const VT_STACKEDSEASONREWARDGAUGE: flatbuffers::VOffsetT = 22;
  pub const VT_SEASONREWARDID: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RaidSeasonManageExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RaidSeasonManageExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<RaidSeasonManageExcel<'bldr>> {
    let mut builder = RaidSeasonManageExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"RaidSeasonManage");
      let x = args.RankingRewardGroupId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_RankingRewardGroupId(x);
      let x = args.SeasonDisplay;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonDisplay(x);
      let x = args.SeasonId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_SeasonId(x);
      if let Some(x) = args.SeasonRewardId {
        builder.add_SeasonRewardId(x);
      }
      if let Some(x) = args.StackedSeasonRewardGauge {
        builder.add_StackedSeasonRewardGauge(x);
      }
      let x = args.MaxSeasonRewardGauage;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_MaxSeasonRewardGauage(x);
      if let Some(x) = args.OpenRaidBossGroup {
        builder.add_OpenRaidBossGroup(x);
      }
      if let Some(x) = args.SettlementEndDate {
        builder.add_SettlementEndDate(x);
      }
      if let Some(x) = args.SeasonEndData {
        builder.add_SeasonEndData(x);
      }
      if let Some(x) = args.EndNoteLabelStartDate {
        builder.add_EndNoteLabelStartDate(x);
      }
      if let Some(x) = args.SeasonStartData {
        builder.add_SeasonStartData(x);
      }
    builder.finish()
  }

  pub fn unpack(&self) -> RaidSeasonManageExcelT {
    let key = table_encryption_service::create_key(b"RaidSeasonManage");
      let SeasonId = self.SeasonId();
      let SeasonDisplay = self.SeasonDisplay();
    let SeasonStartData = self.SeasonStartData().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let EndNoteLabelStartDate = self.EndNoteLabelStartDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SeasonEndData = self.SeasonEndData().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let SettlementEndDate = self.SettlementEndDate().map(|x| {
      if table_encryption_service::use_encryption() { table_encryption_service::convert_string(&x, &key).unwrap() } else { x.to_string() }
    });
    let OpenRaidBossGroup = self.OpenRaidBossGroup().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
      let RankingRewardGroupId = self.RankingRewardGroupId();
      let MaxSeasonRewardGauage = self.MaxSeasonRewardGauage();
    let StackedSeasonRewardGauge = self.StackedSeasonRewardGauge().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    let SeasonRewardId = self.SeasonRewardId().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_long(*val, &key) } else { *val }).collect()
    });
    RaidSeasonManageExcelT {
      SeasonId,
      SeasonDisplay,
      SeasonStartData,
      EndNoteLabelStartDate,
      SeasonEndData,
      SettlementEndDate,
      OpenRaidBossGroup,
      RankingRewardGroupId,
      MaxSeasonRewardGauage,
      StackedSeasonRewardGauge,
      SeasonRewardId,
    }
  }

  #[inline]
  pub fn SeasonId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidSeasonManageExcel::VT_SEASONID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SeasonDisplay(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidSeasonManageExcel::VT_SEASONDISPLAY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn SeasonStartData(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RaidSeasonManageExcel::VT_SEASONSTARTDATA, None)}
  }
  #[inline]
  pub fn EndNoteLabelStartDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RaidSeasonManageExcel::VT_ENDNOTELABELSTARTDATE, None)}
  }
  #[inline]
  pub fn SeasonEndData(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RaidSeasonManageExcel::VT_SEASONENDDATA, None)}
  }
  #[inline]
  pub fn SettlementEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RaidSeasonManageExcel::VT_SETTLEMENTENDDATE, None)}
  }
  #[inline]
  pub fn OpenRaidBossGroup(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(RaidSeasonManageExcel::VT_OPENRAIDBOSSGROUP, None)}
  }
  #[inline]
  pub fn RankingRewardGroupId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(RaidSeasonManageExcel::VT_RANKINGREWARDGROUPID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn MaxSeasonRewardGauage(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RaidSeasonManageExcel::VT_MAXSEASONREWARDGAUAGE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn StackedSeasonRewardGauge(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RaidSeasonManageExcel::VT_STACKEDSEASONREWARDGAUGE, None)}
  }
  #[inline]
  pub fn SeasonRewardId(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(RaidSeasonManageExcel::VT_SEASONREWARDID, None)}
  }
}

impl flatbuffers::Verifiable for RaidSeasonManageExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("SeasonId", Self::VT_SEASONID, false)?
     .visit_field::<i64>("SeasonDisplay", Self::VT_SEASONDISPLAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SeasonStartData", Self::VT_SEASONSTARTDATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("EndNoteLabelStartDate", Self::VT_ENDNOTELABELSTARTDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SeasonEndData", Self::VT_SEASONENDDATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("SettlementEndDate", Self::VT_SETTLEMENTENDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("OpenRaidBossGroup", Self::VT_OPENRAIDBOSSGROUP, false)?
     .visit_field::<i64>("RankingRewardGroupId", Self::VT_RANKINGREWARDGROUPID, false)?
     .visit_field::<i32>("MaxSeasonRewardGauage", Self::VT_MAXSEASONREWARDGAUAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("StackedSeasonRewardGauge", Self::VT_STACKEDSEASONREWARDGAUGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("SeasonRewardId", Self::VT_SEASONREWARDID, false)?
     .finish();
    Ok(())
  }
}
pub struct RaidSeasonManageExcelArgs<'a> {
    pub SeasonId: i64,
    pub SeasonDisplay: i64,
    pub SeasonStartData: Option<flatbuffers::WIPOffset<&'a str>>,
    pub EndNoteLabelStartDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SeasonEndData: Option<flatbuffers::WIPOffset<&'a str>>,
    pub SettlementEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub OpenRaidBossGroup: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub RankingRewardGroupId: i64,
    pub MaxSeasonRewardGauage: i32,
    pub StackedSeasonRewardGauge: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub SeasonRewardId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for RaidSeasonManageExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    RaidSeasonManageExcelArgs {
      SeasonId: 0,
      SeasonDisplay: 0,
      SeasonStartData: None,
      EndNoteLabelStartDate: None,
      SeasonEndData: None,
      SettlementEndDate: None,
      OpenRaidBossGroup: None,
      RankingRewardGroupId: 0,
      MaxSeasonRewardGauage: 0,
      StackedSeasonRewardGauge: None,
      SeasonRewardId: None,
    }
  }
}

impl Serialize for RaidSeasonManageExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("RaidSeasonManageExcel", 11)?;
      s.serialize_field("SeasonId", &self.SeasonId())?;
      s.serialize_field("SeasonDisplay", &self.SeasonDisplay())?;
      if let Some(f) = self.SeasonStartData() {
        s.serialize_field("SeasonStartData", &f)?;
      } else {
        s.skip_field("SeasonStartData")?;
      }
      if let Some(f) = self.EndNoteLabelStartDate() {
        s.serialize_field("EndNoteLabelStartDate", &f)?;
      } else {
        s.skip_field("EndNoteLabelStartDate")?;
      }
      if let Some(f) = self.SeasonEndData() {
        s.serialize_field("SeasonEndData", &f)?;
      } else {
        s.skip_field("SeasonEndData")?;
      }
      if let Some(f) = self.SettlementEndDate() {
        s.serialize_field("SettlementEndDate", &f)?;
      } else {
        s.skip_field("SettlementEndDate")?;
      }
      if let Some(f) = self.OpenRaidBossGroup() {
        s.serialize_field("OpenRaidBossGroup", &f)?;
      } else {
        s.skip_field("OpenRaidBossGroup")?;
      }
      s.serialize_field("RankingRewardGroupId", &self.RankingRewardGroupId())?;
      s.serialize_field("MaxSeasonRewardGauage", &self.MaxSeasonRewardGauage())?;
      if let Some(f) = self.StackedSeasonRewardGauge() {
        s.serialize_field("StackedSeasonRewardGauge", &f)?;
      } else {
        s.skip_field("StackedSeasonRewardGauge")?;
      }
      if let Some(f) = self.SeasonRewardId() {
        s.serialize_field("SeasonRewardId", &f)?;
      } else {
        s.skip_field("SeasonRewardId")?;
      }
    s.end()
  }
}

pub struct RaidSeasonManageExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RaidSeasonManageExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_SeasonId(&mut self, SeasonId: i64) {
    self.fbb_.push_slot::<i64>(RaidSeasonManageExcel::VT_SEASONID, SeasonId, 0);
  }
  #[inline]
  pub fn add_SeasonDisplay(&mut self, SeasonDisplay: i64) {
    self.fbb_.push_slot::<i64>(RaidSeasonManageExcel::VT_SEASONDISPLAY, SeasonDisplay, 0);
  }
  #[inline]
  pub fn add_SeasonStartData(&mut self, SeasonStartData: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidSeasonManageExcel::VT_SEASONSTARTDATA, SeasonStartData);
  }
  #[inline]
  pub fn add_EndNoteLabelStartDate(&mut self, EndNoteLabelStartDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidSeasonManageExcel::VT_ENDNOTELABELSTARTDATE, EndNoteLabelStartDate);
  }
  #[inline]
  pub fn add_SeasonEndData(&mut self, SeasonEndData: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidSeasonManageExcel::VT_SEASONENDDATA, SeasonEndData);
  }
  #[inline]
  pub fn add_SettlementEndDate(&mut self, SettlementEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidSeasonManageExcel::VT_SETTLEMENTENDDATE, SettlementEndDate);
  }
  #[inline]
  pub fn add_OpenRaidBossGroup(&mut self, OpenRaidBossGroup: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidSeasonManageExcel::VT_OPENRAIDBOSSGROUP, OpenRaidBossGroup);
  }
  #[inline]
  pub fn add_RankingRewardGroupId(&mut self, RankingRewardGroupId: i64) {
    self.fbb_.push_slot::<i64>(RaidSeasonManageExcel::VT_RANKINGREWARDGROUPID, RankingRewardGroupId, 0);
  }
  #[inline]
  pub fn add_MaxSeasonRewardGauage(&mut self, MaxSeasonRewardGauage: i32) {
    self.fbb_.push_slot::<i32>(RaidSeasonManageExcel::VT_MAXSEASONREWARDGAUAGE, MaxSeasonRewardGauage, 0);
  }
  #[inline]
  pub fn add_StackedSeasonRewardGauge(&mut self, StackedSeasonRewardGauge: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidSeasonManageExcel::VT_STACKEDSEASONREWARDGAUGE, StackedSeasonRewardGauge);
  }
  #[inline]
  pub fn add_SeasonRewardId(&mut self, SeasonRewardId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RaidSeasonManageExcel::VT_SEASONREWARDID, SeasonRewardId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RaidSeasonManageExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RaidSeasonManageExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RaidSeasonManageExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RaidSeasonManageExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RaidSeasonManageExcel");
      ds.field("SeasonId", &self.SeasonId());
      ds.field("SeasonDisplay", &self.SeasonDisplay());
      ds.field("SeasonStartData", &self.SeasonStartData());
      ds.field("EndNoteLabelStartDate", &self.EndNoteLabelStartDate());
      ds.field("SeasonEndData", &self.SeasonEndData());
      ds.field("SettlementEndDate", &self.SettlementEndDate());
      ds.field("OpenRaidBossGroup", &self.OpenRaidBossGroup());
      ds.field("RankingRewardGroupId", &self.RankingRewardGroupId());
      ds.field("MaxSeasonRewardGauage", &self.MaxSeasonRewardGauage());
      ds.field("StackedSeasonRewardGauge", &self.StackedSeasonRewardGauge());
      ds.field("SeasonRewardId", &self.SeasonRewardId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RaidSeasonManageExcelT {
  pub SeasonId: i64,
  pub SeasonDisplay: i64,
  pub SeasonStartData: Option<String>,
  pub EndNoteLabelStartDate: Option<String>,
  pub SeasonEndData: Option<String>,
  pub SettlementEndDate: Option<String>,
  pub OpenRaidBossGroup: Option<Vec<String>>,
  pub RankingRewardGroupId: i64,
  pub MaxSeasonRewardGauage: i32,
  pub StackedSeasonRewardGauge: Option<Vec<i64>>,
  pub SeasonRewardId: Option<Vec<i64>>,
}
impl Default for RaidSeasonManageExcelT {
  fn default() -> Self {
    Self {
      SeasonId: 0,
      SeasonDisplay: 0,
      SeasonStartData: None,
      EndNoteLabelStartDate: None,
      SeasonEndData: None,
      SettlementEndDate: None,
      OpenRaidBossGroup: None,
      RankingRewardGroupId: 0,
      MaxSeasonRewardGauage: 0,
      StackedSeasonRewardGauge: None,
      SeasonRewardId: None,
    }
  }
}
impl RaidSeasonManageExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RaidSeasonManageExcel<'b>> {
    let SeasonId = self.SeasonId;
    let SeasonDisplay = self.SeasonDisplay;
    let SeasonStartData = self.SeasonStartData.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let EndNoteLabelStartDate = self.EndNoteLabelStartDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SeasonEndData = self.SeasonEndData.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let SettlementEndDate = self.SettlementEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let OpenRaidBossGroup = self.OpenRaidBossGroup.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let RankingRewardGroupId = self.RankingRewardGroupId;
    let MaxSeasonRewardGauage = self.MaxSeasonRewardGauage;
    let StackedSeasonRewardGauge = self.StackedSeasonRewardGauge.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let SeasonRewardId = self.SeasonRewardId.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    RaidSeasonManageExcel::create(_fbb, &RaidSeasonManageExcelArgs{
      SeasonId,
      SeasonDisplay,
      SeasonStartData,
      EndNoteLabelStartDate,
      SeasonEndData,
      SettlementEndDate,
      OpenRaidBossGroup,
      RankingRewardGroupId,
      MaxSeasonRewardGauage,
      StackedSeasonRewardGauge,
      SeasonRewardId,
    })
  }
}
