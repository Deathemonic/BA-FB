// automatically generated by the FlatBuffers compiler, do not modify
// @generated
#![allow(unused_imports, dead_code)]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TimeAttackDungeonGeasExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TimeAttackDungeonGeasExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TimeAttackDungeonGeasExcel<'a> {
  type Inner = TimeAttackDungeonGeasExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TimeAttackDungeonGeasExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TIMEATTACKDUNGEONTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZEETCKEY: flatbuffers::VOffsetT = 8;
  pub const VT_BATTLEDURATION: flatbuffers::VOffsetT = 10;
  pub const VT_CLEARDEFAULTPOINT: flatbuffers::VOffsetT = 12;
  pub const VT_CLEARTIMEWEIGHTPOINT: flatbuffers::VOffsetT = 14;
  pub const VT_TIMEWEIGHTCONST: flatbuffers::VOffsetT = 16;
  pub const VT_DIFFICULTY: flatbuffers::VOffsetT = 18;
  pub const VT_RECOMMANDLEVEL: flatbuffers::VOffsetT = 20;
  pub const VT_GROUNDID: flatbuffers::VOffsetT = 22;
  pub const VT_ALLYPASSIVESKILLID: flatbuffers::VOffsetT = 24;
  pub const VT_ALLYPASSIVESKILLLEVEL: flatbuffers::VOffsetT = 26;
  pub const VT_ENEMYPASSIVESKILLID: flatbuffers::VOffsetT = 28;
  pub const VT_ENEMYPASSIVESKILLLEVEL: flatbuffers::VOffsetT = 30;
  pub const VT_GEASICONPATH: flatbuffers::VOffsetT = 32;
  pub const VT_GEASLOCALIZEETCKEY: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TimeAttackDungeonGeasExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TimeAttackDungeonGeasExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonGeasExcel<'bldr>> {
    let mut builder = TimeAttackDungeonGeasExcelBuilder::new(_fbb);
    let key = table_encryption_service::create_key(b"TimeAttackDungeonGeas");
      let x = args.GroundId;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_GroundId(x);
      let x = args.TimeWeightConst;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_TimeWeightConst(x);
      let x = args.ClearTimeWeightPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearTimeWeightPoint(x);
      let x = args.ClearDefaultPoint;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_ClearDefaultPoint(x);
      let x = args.BattleDuration;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_BattleDuration(x);
      let x = args.Id;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_long(x, &key) } else { x };
      builder.add_Id(x);
      if let Some(x) = args.GeasLocalizeEtcKey {
        builder.add_GeasLocalizeEtcKey(x);
      }
      if let Some(x) = args.GeasIconPath {
        builder.add_GeasIconPath(x);
      }
      if let Some(x) = args.EnemyPassiveSkillLevel {
        builder.add_EnemyPassiveSkillLevel(x);
      }
      if let Some(x) = args.EnemyPassiveSkillId {
        builder.add_EnemyPassiveSkillId(x);
      }
      if let Some(x) = args.AllyPassiveSkillLevel {
        builder.add_AllyPassiveSkillLevel(x);
      }
      if let Some(x) = args.AllyPassiveSkillId {
        builder.add_AllyPassiveSkillId(x);
      }
      let x = args.RecommandLevel;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_RecommandLevel(x);
      let x = args.Difficulty;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_int(x, &key) } else { x };
      builder.add_Difficulty(x);
      let x = args.LocalizeEtcKey;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(x, &key) } else { x };
      builder.add_LocalizeEtcKey(x);
      let x = args.TimeAttackDungeonType;
      let x = if table_encryption_service::use_encryption() { table_encryption_service::convert_enum(x, &key) } else { x };
      builder.add_TimeAttackDungeonType(x);
    builder.finish()
  }

  pub fn unpack(&self) -> TimeAttackDungeonGeasExcelT {
    let key = table_encryption_service::create_key(b"TimeAttackDungeonGeas");
      let Id = self.Id();
      let TimeAttackDungeonType = if table_encryption_service::use_encryption() {
        table_encryption_service::convert_enum(self.TimeAttackDungeonType(), &key)
      } else {
        self.TimeAttackDungeonType()
      };
      let LocalizeEtcKey = self.LocalizeEtcKey();
      let BattleDuration = self.BattleDuration();
      let ClearDefaultPoint = self.ClearDefaultPoint();
      let ClearTimeWeightPoint = self.ClearTimeWeightPoint();
      let TimeWeightConst = self.TimeWeightConst();
      let Difficulty = self.Difficulty();
      let RecommandLevel = self.RecommandLevel();
      let GroundId = self.GroundId();
    let AllyPassiveSkillId = self.AllyPassiveSkillId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let AllyPassiveSkillLevel = self.AllyPassiveSkillLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let EnemyPassiveSkillId = self.EnemyPassiveSkillId().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let EnemyPassiveSkillLevel = self.EnemyPassiveSkillLevel().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_int(*val, &key) } else { *val }).collect()
    });
    let GeasIconPath = self.GeasIconPath().map(|x| {
      x.iter().map(|s| if table_encryption_service::use_encryption() { table_encryption_service::convert_string(s, &key).unwrap() } else { s.to_string() }).collect()
    });
    let GeasLocalizeEtcKey = self.GeasLocalizeEtcKey().map(|x| {
      x.iter().map(|val| if table_encryption_service::use_encryption() { table_encryption_service::convert_uint(*val, &key) } else { *val }).collect()
    });
    TimeAttackDungeonGeasExcelT {
      Id,
      TimeAttackDungeonType,
      LocalizeEtcKey,
      BattleDuration,
      ClearDefaultPoint,
      ClearTimeWeightPoint,
      TimeWeightConst,
      Difficulty,
      RecommandLevel,
      GroundId,
      AllyPassiveSkillId,
      AllyPassiveSkillLevel,
      EnemyPassiveSkillId,
      EnemyPassiveSkillLevel,
      GeasIconPath,
      GeasLocalizeEtcKey,
    }
  }

  #[inline]
  pub fn Id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonGeasExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TimeAttackDungeonType(&self) -> TimeAttackDungeonType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TimeAttackDungeonType>(TimeAttackDungeonGeasExcel::VT_TIMEATTACKDUNGEONTYPE, Some(TimeAttackDungeonType::None)).unwrap()}
  }
  #[inline]
  pub fn LocalizeEtcKey(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TimeAttackDungeonGeasExcel::VT_LOCALIZEETCKEY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn BattleDuration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonGeasExcel::VT_BATTLEDURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ClearDefaultPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonGeasExcel::VT_CLEARDEFAULTPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ClearTimeWeightPoint(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonGeasExcel::VT_CLEARTIMEWEIGHTPOINT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn TimeWeightConst(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonGeasExcel::VT_TIMEWEIGHTCONST, Some(0)).unwrap()}
  }
  #[inline]
  pub fn Difficulty(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TimeAttackDungeonGeasExcel::VT_DIFFICULTY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn RecommandLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TimeAttackDungeonGeasExcel::VT_RECOMMANDLEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn GroundId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(TimeAttackDungeonGeasExcel::VT_GROUNDID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn AllyPassiveSkillId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TimeAttackDungeonGeasExcel::VT_ALLYPASSIVESKILLID, None)}
  }
  #[inline]
  pub fn AllyPassiveSkillLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(TimeAttackDungeonGeasExcel::VT_ALLYPASSIVESKILLLEVEL, None)}
  }
  #[inline]
  pub fn EnemyPassiveSkillId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TimeAttackDungeonGeasExcel::VT_ENEMYPASSIVESKILLID, None)}
  }
  #[inline]
  pub fn EnemyPassiveSkillLevel(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(TimeAttackDungeonGeasExcel::VT_ENEMYPASSIVESKILLLEVEL, None)}
  }
  #[inline]
  pub fn GeasIconPath(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TimeAttackDungeonGeasExcel::VT_GEASICONPATH, None)}
  }
  #[inline]
  pub fn GeasLocalizeEtcKey(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(TimeAttackDungeonGeasExcel::VT_GEASLOCALIZEETCKEY, None)}
  }
}

impl flatbuffers::Verifiable for TimeAttackDungeonGeasExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("Id", Self::VT_ID, false)?
     .visit_field::<TimeAttackDungeonType>("TimeAttackDungeonType", Self::VT_TIMEATTACKDUNGEONTYPE, false)?
     .visit_field::<u32>("LocalizeEtcKey", Self::VT_LOCALIZEETCKEY, false)?
     .visit_field::<i64>("BattleDuration", Self::VT_BATTLEDURATION, false)?
     .visit_field::<i64>("ClearDefaultPoint", Self::VT_CLEARDEFAULTPOINT, false)?
     .visit_field::<i64>("ClearTimeWeightPoint", Self::VT_CLEARTIMEWEIGHTPOINT, false)?
     .visit_field::<i64>("TimeWeightConst", Self::VT_TIMEWEIGHTCONST, false)?
     .visit_field::<i32>("Difficulty", Self::VT_DIFFICULTY, false)?
     .visit_field::<i32>("RecommandLevel", Self::VT_RECOMMANDLEVEL, false)?
     .visit_field::<i64>("GroundId", Self::VT_GROUNDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("AllyPassiveSkillId", Self::VT_ALLYPASSIVESKILLID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("AllyPassiveSkillLevel", Self::VT_ALLYPASSIVESKILLLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("EnemyPassiveSkillId", Self::VT_ENEMYPASSIVESKILLID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("EnemyPassiveSkillLevel", Self::VT_ENEMYPASSIVESKILLLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("GeasIconPath", Self::VT_GEASICONPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("GeasLocalizeEtcKey", Self::VT_GEASLOCALIZEETCKEY, false)?
     .finish();
    Ok(())
  }
}
pub struct TimeAttackDungeonGeasExcelArgs<'a> {
    pub Id: i64,
    pub TimeAttackDungeonType: TimeAttackDungeonType,
    pub LocalizeEtcKey: u32,
    pub BattleDuration: i64,
    pub ClearDefaultPoint: i64,
    pub ClearTimeWeightPoint: i64,
    pub TimeWeightConst: i64,
    pub Difficulty: i32,
    pub RecommandLevel: i32,
    pub GroundId: i64,
    pub AllyPassiveSkillId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub AllyPassiveSkillLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub EnemyPassiveSkillId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub EnemyPassiveSkillLevel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub GeasIconPath: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub GeasLocalizeEtcKey: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}
impl<'a> Default for TimeAttackDungeonGeasExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    TimeAttackDungeonGeasExcelArgs {
      Id: 0,
      TimeAttackDungeonType: TimeAttackDungeonType::None,
      LocalizeEtcKey: 0,
      BattleDuration: 0,
      ClearDefaultPoint: 0,
      ClearTimeWeightPoint: 0,
      TimeWeightConst: 0,
      Difficulty: 0,
      RecommandLevel: 0,
      GroundId: 0,
      AllyPassiveSkillId: None,
      AllyPassiveSkillLevel: None,
      EnemyPassiveSkillId: None,
      EnemyPassiveSkillLevel: None,
      GeasIconPath: None,
      GeasLocalizeEtcKey: None,
    }
  }
}

impl Serialize for TimeAttackDungeonGeasExcel<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TimeAttackDungeonGeasExcel", 16)?;
      s.serialize_field("Id", &self.Id())?;
      s.serialize_field("TimeAttackDungeonType", &self.TimeAttackDungeonType())?;
      s.serialize_field("LocalizeEtcKey", &self.LocalizeEtcKey())?;
      s.serialize_field("BattleDuration", &self.BattleDuration())?;
      s.serialize_field("ClearDefaultPoint", &self.ClearDefaultPoint())?;
      s.serialize_field("ClearTimeWeightPoint", &self.ClearTimeWeightPoint())?;
      s.serialize_field("TimeWeightConst", &self.TimeWeightConst())?;
      s.serialize_field("Difficulty", &self.Difficulty())?;
      s.serialize_field("RecommandLevel", &self.RecommandLevel())?;
      s.serialize_field("GroundId", &self.GroundId())?;
      if let Some(f) = self.AllyPassiveSkillId() {
        s.serialize_field("AllyPassiveSkillId", &f)?;
      } else {
        s.skip_field("AllyPassiveSkillId")?;
      }
      if let Some(f) = self.AllyPassiveSkillLevel() {
        s.serialize_field("AllyPassiveSkillLevel", &f)?;
      } else {
        s.skip_field("AllyPassiveSkillLevel")?;
      }
      if let Some(f) = self.EnemyPassiveSkillId() {
        s.serialize_field("EnemyPassiveSkillId", &f)?;
      } else {
        s.skip_field("EnemyPassiveSkillId")?;
      }
      if let Some(f) = self.EnemyPassiveSkillLevel() {
        s.serialize_field("EnemyPassiveSkillLevel", &f)?;
      } else {
        s.skip_field("EnemyPassiveSkillLevel")?;
      }
      if let Some(f) = self.GeasIconPath() {
        s.serialize_field("GeasIconPath", &f)?;
      } else {
        s.skip_field("GeasIconPath")?;
      }
      if let Some(f) = self.GeasLocalizeEtcKey() {
        s.serialize_field("GeasLocalizeEtcKey", &f)?;
      } else {
        s.skip_field("GeasLocalizeEtcKey")?;
      }
    s.end()
  }
}

pub struct TimeAttackDungeonGeasExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TimeAttackDungeonGeasExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_Id(&mut self, Id: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonGeasExcel::VT_ID, Id, 0);
  }
  #[inline]
  pub fn add_TimeAttackDungeonType(&mut self, TimeAttackDungeonType: TimeAttackDungeonType) {
    self.fbb_.push_slot::<TimeAttackDungeonType>(TimeAttackDungeonGeasExcel::VT_TIMEATTACKDUNGEONTYPE, TimeAttackDungeonType, TimeAttackDungeonType::None);
  }
  #[inline]
  pub fn add_LocalizeEtcKey(&mut self, LocalizeEtcKey: u32) {
    self.fbb_.push_slot::<u32>(TimeAttackDungeonGeasExcel::VT_LOCALIZEETCKEY, LocalizeEtcKey, 0);
  }
  #[inline]
  pub fn add_BattleDuration(&mut self, BattleDuration: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonGeasExcel::VT_BATTLEDURATION, BattleDuration, 0);
  }
  #[inline]
  pub fn add_ClearDefaultPoint(&mut self, ClearDefaultPoint: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonGeasExcel::VT_CLEARDEFAULTPOINT, ClearDefaultPoint, 0);
  }
  #[inline]
  pub fn add_ClearTimeWeightPoint(&mut self, ClearTimeWeightPoint: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonGeasExcel::VT_CLEARTIMEWEIGHTPOINT, ClearTimeWeightPoint, 0);
  }
  #[inline]
  pub fn add_TimeWeightConst(&mut self, TimeWeightConst: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonGeasExcel::VT_TIMEWEIGHTCONST, TimeWeightConst, 0);
  }
  #[inline]
  pub fn add_Difficulty(&mut self, Difficulty: i32) {
    self.fbb_.push_slot::<i32>(TimeAttackDungeonGeasExcel::VT_DIFFICULTY, Difficulty, 0);
  }
  #[inline]
  pub fn add_RecommandLevel(&mut self, RecommandLevel: i32) {
    self.fbb_.push_slot::<i32>(TimeAttackDungeonGeasExcel::VT_RECOMMANDLEVEL, RecommandLevel, 0);
  }
  #[inline]
  pub fn add_GroundId(&mut self, GroundId: i64) {
    self.fbb_.push_slot::<i64>(TimeAttackDungeonGeasExcel::VT_GROUNDID, GroundId, 0);
  }
  #[inline]
  pub fn add_AllyPassiveSkillId(&mut self, AllyPassiveSkillId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonGeasExcel::VT_ALLYPASSIVESKILLID, AllyPassiveSkillId);
  }
  #[inline]
  pub fn add_AllyPassiveSkillLevel(&mut self, AllyPassiveSkillLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonGeasExcel::VT_ALLYPASSIVESKILLLEVEL, AllyPassiveSkillLevel);
  }
  #[inline]
  pub fn add_EnemyPassiveSkillId(&mut self, EnemyPassiveSkillId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonGeasExcel::VT_ENEMYPASSIVESKILLID, EnemyPassiveSkillId);
  }
  #[inline]
  pub fn add_EnemyPassiveSkillLevel(&mut self, EnemyPassiveSkillLevel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonGeasExcel::VT_ENEMYPASSIVESKILLLEVEL, EnemyPassiveSkillLevel);
  }
  #[inline]
  pub fn add_GeasIconPath(&mut self, GeasIconPath: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonGeasExcel::VT_GEASICONPATH, GeasIconPath);
  }
  #[inline]
  pub fn add_GeasLocalizeEtcKey(&mut self, GeasLocalizeEtcKey: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TimeAttackDungeonGeasExcel::VT_GEASLOCALIZEETCKEY, GeasLocalizeEtcKey);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TimeAttackDungeonGeasExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TimeAttackDungeonGeasExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TimeAttackDungeonGeasExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TimeAttackDungeonGeasExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TimeAttackDungeonGeasExcel");
      ds.field("Id", &self.Id());
      ds.field("TimeAttackDungeonType", &self.TimeAttackDungeonType());
      ds.field("LocalizeEtcKey", &self.LocalizeEtcKey());
      ds.field("BattleDuration", &self.BattleDuration());
      ds.field("ClearDefaultPoint", &self.ClearDefaultPoint());
      ds.field("ClearTimeWeightPoint", &self.ClearTimeWeightPoint());
      ds.field("TimeWeightConst", &self.TimeWeightConst());
      ds.field("Difficulty", &self.Difficulty());
      ds.field("RecommandLevel", &self.RecommandLevel());
      ds.field("GroundId", &self.GroundId());
      ds.field("AllyPassiveSkillId", &self.AllyPassiveSkillId());
      ds.field("AllyPassiveSkillLevel", &self.AllyPassiveSkillLevel());
      ds.field("EnemyPassiveSkillId", &self.EnemyPassiveSkillId());
      ds.field("EnemyPassiveSkillLevel", &self.EnemyPassiveSkillLevel());
      ds.field("GeasIconPath", &self.GeasIconPath());
      ds.field("GeasLocalizeEtcKey", &self.GeasLocalizeEtcKey());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TimeAttackDungeonGeasExcelT {
  pub Id: i64,
  pub TimeAttackDungeonType: TimeAttackDungeonType,
  pub LocalizeEtcKey: u32,
  pub BattleDuration: i64,
  pub ClearDefaultPoint: i64,
  pub ClearTimeWeightPoint: i64,
  pub TimeWeightConst: i64,
  pub Difficulty: i32,
  pub RecommandLevel: i32,
  pub GroundId: i64,
  pub AllyPassiveSkillId: Option<Vec<String>>,
  pub AllyPassiveSkillLevel: Option<Vec<i32>>,
  pub EnemyPassiveSkillId: Option<Vec<String>>,
  pub EnemyPassiveSkillLevel: Option<Vec<i32>>,
  pub GeasIconPath: Option<Vec<String>>,
  pub GeasLocalizeEtcKey: Option<Vec<u32>>,
}
impl Default for TimeAttackDungeonGeasExcelT {
  fn default() -> Self {
    Self {
      Id: 0,
      TimeAttackDungeonType: TimeAttackDungeonType::None,
      LocalizeEtcKey: 0,
      BattleDuration: 0,
      ClearDefaultPoint: 0,
      ClearTimeWeightPoint: 0,
      TimeWeightConst: 0,
      Difficulty: 0,
      RecommandLevel: 0,
      GroundId: 0,
      AllyPassiveSkillId: None,
      AllyPassiveSkillLevel: None,
      EnemyPassiveSkillId: None,
      EnemyPassiveSkillLevel: None,
      GeasIconPath: None,
      GeasLocalizeEtcKey: None,
    }
  }
}
impl TimeAttackDungeonGeasExcelT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TimeAttackDungeonGeasExcel<'b>> {
    let Id = self.Id;
    let TimeAttackDungeonType = self.TimeAttackDungeonType;
    let LocalizeEtcKey = self.LocalizeEtcKey;
    let BattleDuration = self.BattleDuration;
    let ClearDefaultPoint = self.ClearDefaultPoint;
    let ClearTimeWeightPoint = self.ClearTimeWeightPoint;
    let TimeWeightConst = self.TimeWeightConst;
    let Difficulty = self.Difficulty;
    let RecommandLevel = self.RecommandLevel;
    let GroundId = self.GroundId;
    let AllyPassiveSkillId = self.AllyPassiveSkillId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let AllyPassiveSkillLevel = self.AllyPassiveSkillLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let EnemyPassiveSkillId = self.EnemyPassiveSkillId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let EnemyPassiveSkillLevel = self.EnemyPassiveSkillLevel.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let GeasIconPath = self.GeasIconPath.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let GeasLocalizeEtcKey = self.GeasLocalizeEtcKey.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    TimeAttackDungeonGeasExcel::create(_fbb, &TimeAttackDungeonGeasExcelArgs{
      Id,
      TimeAttackDungeonType,
      LocalizeEtcKey,
      BattleDuration,
      ClearDefaultPoint,
      ClearTimeWeightPoint,
      TimeWeightConst,
      Difficulty,
      RecommandLevel,
      GroundId,
      AllyPassiveSkillId,
      AllyPassiveSkillLevel,
      EnemyPassiveSkillId,
      EnemyPassiveSkillLevel,
      GeasIconPath,
      GeasLocalizeEtcKey,
    })
  }
}
